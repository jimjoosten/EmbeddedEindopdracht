
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c820  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800c960  0800c960  0001c960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cb68  0800cb68  0001cb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cb6c  0800cb6c  0001cb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000008  0800cb70  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b58  20000170  0800ccd8  00020170  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001cc8  0800ccd8  00021cc8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c3f3  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004535  00000000  00000000  0003c593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ce8  00000000  00000000  00040ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001af0  00000000  00000000  000427b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00027012  00000000  00000000  000442a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d80d  00000000  00000000  0006b2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e22f7  00000000  00000000  00088abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0016adb6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007eb0  00000000  00000000  0016ae08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000170 	.word	0x20000170
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c948 	.word	0x0800c948

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000174 	.word	0x20000174
 800017c:	0800c948 	.word	0x0800c948

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <Play_Buzzer>:

int iBuzzTeller = 0;
bool bAlreadyPlayed = false;

void Play_Buzzer(bool buzzer)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
	if (buzzer){
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d02e      	beq.n	800028e <Play_Buzzer+0x6e>
		iBuzzTeller++;
 8000230:	4b19      	ldr	r3, [pc, #100]	; (8000298 <Play_Buzzer+0x78>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <Play_Buzzer+0x78>)
 8000238:	6013      	str	r3, [r2, #0]
		if (iBuzzTeller >= 40000 && !bAlreadyPlayed) {
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <Play_Buzzer+0x78>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000242:	4293      	cmp	r3, r2
 8000244:	dd0f      	ble.n	8000266 <Play_Buzzer+0x46>
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <Play_Buzzer+0x7c>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	f083 0301 	eor.w	r3, r3, #1
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <Play_Buzzer+0x46>
			HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	4811      	ldr	r0, [pc, #68]	; (80002a0 <Play_Buzzer+0x80>)
 800025a:	f001 fc25 	bl	8001aa8 <HAL_GPIO_WritePin>
			bAlreadyPlayed = true;
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <Play_Buzzer+0x7c>)
 8000260:	2201      	movs	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
			bAlreadyPlayed = false;
			iBuzzTeller = 0;
		}
	}
}
 8000264:	e013      	b.n	800028e <Play_Buzzer+0x6e>
		} else if (iBuzzTeller >= 80000 && bAlreadyPlayed) {
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <Play_Buzzer+0x78>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <Play_Buzzer+0x84>)
 800026c:	4293      	cmp	r3, r2
 800026e:	dd0e      	ble.n	800028e <Play_Buzzer+0x6e>
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <Play_Buzzer+0x7c>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00a      	beq.n	800028e <Play_Buzzer+0x6e>
			HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2101      	movs	r1, #1
 800027c:	4808      	ldr	r0, [pc, #32]	; (80002a0 <Play_Buzzer+0x80>)
 800027e:	f001 fc13 	bl	8001aa8 <HAL_GPIO_WritePin>
			bAlreadyPlayed = false;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <Play_Buzzer+0x7c>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
			iBuzzTeller = 0;
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <Play_Buzzer+0x78>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000018c 	.word	0x2000018c
 800029c:	20000190 	.word	0x20000190
 80002a0:	48000400 	.word	0x48000400
 80002a4:	0001387f 	.word	0x0001387f

080002a8 <ledstrip_Pulse>:
#include <stdio.h>
#include <stdbool.h>

extern bool buzzerIsPlaying;

void ledstrip_Pulse(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 80002ac:	2101      	movs	r1, #1
 80002ae:	4829      	ldr	r0, [pc, #164]	; (8000354 <ledstrip_Pulse+0xac>)
 80002b0:	f001 fbe2 	bl	8001a78 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d14a      	bne.n	8000350 <ledstrip_Pulse+0xa8>
    {
    	// LED ROOD
    	ws2812_Set_LED(0, 255, 0, 0);
 80002ba:	2300      	movs	r3, #0
 80002bc:	2200      	movs	r2, #0
 80002be:	21ff      	movs	r1, #255	; 0xff
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 f891 	bl	80003e8 <ws2812_Set_LED>
    	ws2812_Send_PWM();
 80002c6:	f000 f8d7 	bl	8000478 <ws2812_Send_PWM>
    	HAL_Delay(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ce:	f000 fe5b 	bl	8000f88 <HAL_Delay>

    	// LED GROEN
    	ws2812_Set_LED(1, 0, 255, 0);
 80002d2:	2300      	movs	r3, #0
 80002d4:	22ff      	movs	r2, #255	; 0xff
 80002d6:	2100      	movs	r1, #0
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 f885 	bl	80003e8 <ws2812_Set_LED>
    	ws2812_Send_PWM();
 80002de:	f000 f8cb 	bl	8000478 <ws2812_Send_PWM>
    	HAL_Delay(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e6:	f000 fe4f 	bl	8000f88 <HAL_Delay>

    	// LED GEEL
    	ws2812_Set_LED(2, 255, 255, 0);
 80002ea:	2300      	movs	r3, #0
 80002ec:	22ff      	movs	r2, #255	; 0xff
 80002ee:	21ff      	movs	r1, #255	; 0xff
 80002f0:	2002      	movs	r0, #2
 80002f2:	f000 f879 	bl	80003e8 <ws2812_Set_LED>
    	ws2812_Send_PWM();
 80002f6:	f000 f8bf 	bl	8000478 <ws2812_Send_PWM>
    	HAL_Delay(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 fe43 	bl	8000f88 <HAL_Delay>

    	// LED ORANJE
    	ws2812_Set_LED(3, 255, 69, 0);
 8000302:	2300      	movs	r3, #0
 8000304:	2245      	movs	r2, #69	; 0x45
 8000306:	21ff      	movs	r1, #255	; 0xff
 8000308:	2003      	movs	r0, #3
 800030a:	f000 f86d 	bl	80003e8 <ws2812_Set_LED>
    	ws2812_Send_PWM();
 800030e:	f000 f8b3 	bl	8000478 <ws2812_Send_PWM>
    	HAL_Delay(1000);
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f000 fe37 	bl	8000f88 <HAL_Delay>

    	// LED BLAUW
    	ws2812_Set_LED(4, 0, 0, 255);
 800031a:	23ff      	movs	r3, #255	; 0xff
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	2004      	movs	r0, #4
 8000322:	f000 f861 	bl	80003e8 <ws2812_Set_LED>
    	ws2812_Send_PWM();
 8000326:	f000 f8a7 	bl	8000478 <ws2812_Send_PWM>
    	HAL_Delay(1000);
 800032a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032e:	f000 fe2b 	bl	8000f88 <HAL_Delay>

    	// LED ROZE
    	ws2812_Set_LED(5, 255, 20, 147);
 8000332:	2393      	movs	r3, #147	; 0x93
 8000334:	2214      	movs	r2, #20
 8000336:	21ff      	movs	r1, #255	; 0xff
 8000338:	2005      	movs	r0, #5
 800033a:	f000 f855 	bl	80003e8 <ws2812_Set_LED>
    	ws2812_Send_PWM();
 800033e:	f000 f89b 	bl	8000478 <ws2812_Send_PWM>
    	HAL_Delay(1000);
 8000342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000346:	f000 fe1f 	bl	8000f88 <HAL_Delay>

    	buzzerIsPlaying = false;
 800034a:	4b03      	ldr	r3, [pc, #12]	; (8000358 <ledstrip_Pulse+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
	ws2812_Send_PWM();
	HAL_Delay(1000);
	ws2812_SetAll_LED(30, 63, 0);
	ws2812_Send_PWM();
	HAL_Delay(1000);*/
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000c00 	.word	0x48000c00
 8000358:	20000008 	.word	0x20000008

0800035c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800036a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4313      	orrs	r3, r2
 8000372:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4013      	ands	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000380:	68fb      	ldr	r3, [r7, #12]
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800038e:	b480      	push	{r7}
 8000390:	b085      	sub	sp, #20
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800039a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800039c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4013      	ands	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003b2:	68fb      	ldr	r3, [r7, #12]
}
 80003b4:	bf00      	nop
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <HAL_TIM_PWM_PulseFinishedCallback>:
#define WS2812_LED_MAX 10
uint8_t LED_Data[WS2812_LED_MAX][4];
int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 80003c8:	2108      	movs	r1, #8
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80003cc:	f005 f922 	bl	8005614 <HAL_TIM_PWM_Stop_DMA>
  datasentflag = 1;
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000194 	.word	0x20000194
 80003e4:	200002b4 	.word	0x200002b4

080003e8 <ws2812_Set_LED>:

void ws2812_Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	b2d9      	uxtb	r1, r3
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <ws2812_Set_LED+0x58>)
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	b2d9      	uxtb	r1, r3
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <ws2812_Set_LED+0x58>)
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	4413      	add	r3, r2
 800040e:	460a      	mov	r2, r1
 8000410:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	b2d9      	uxtb	r1, r3
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <ws2812_Set_LED+0x58>)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	460a      	mov	r2, r1
 8000420:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	b2d9      	uxtb	r1, r3
 8000426:	4a06      	ldr	r2, [pc, #24]	; (8000440 <ws2812_Set_LED+0x58>)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	4413      	add	r3, r2
 800042e:	460a      	mov	r2, r1
 8000430:	70da      	strb	r2, [r3, #3]
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	2000028c 	.word	0x2000028c

08000444 <ws2812_SetAll_LED>:

void ws2812_SetAll_LED(int Red, int Green, int Blue)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e008      	b.n	8000468 <ws2812_SetAll_LED+0x24>
  {
    ws2812_Set_LED(i, Red, Green, Blue);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	68f9      	ldr	r1, [r7, #12]
 800045c:	6978      	ldr	r0, [r7, #20]
 800045e:	f7ff ffc3 	bl	80003e8 <ws2812_Set_LED>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	2b09      	cmp	r3, #9
 800046c:	ddf3      	ble.n	8000456 <ws2812_SetAll_LED+0x12>
  }
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <ws2812_Send_PWM>:

void ws2812_Send_PWM(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800047e:	af00      	add	r7, sp, #0
  uint16_t pwmData[24 * (WS2812_LED_MAX) + 50];
  uint32_t indx = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  uint32_t color;
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000486:	2300      	movs	r3, #0
 8000488:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800048c:	e04c      	b.n	8000528 <ws2812_Send_PWM+0xb0>
  {
    color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
 800048e:	4a40      	ldr	r2, [pc, #256]	; (8000590 <ws2812_Send_PWM+0x118>)
 8000490:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4413      	add	r3, r2
 8000498:	785b      	ldrb	r3, [r3, #1]
 800049a:	041a      	lsls	r2, r3, #16
 800049c:	493c      	ldr	r1, [pc, #240]	; (8000590 <ws2812_Send_PWM+0x118>)
 800049e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	440b      	add	r3, r1
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	021b      	lsls	r3, r3, #8
 80004aa:	431a      	orrs	r2, r3
 80004ac:	4938      	ldr	r1, [pc, #224]	; (8000590 <ws2812_Send_PWM+0x118>)
 80004ae:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	440b      	add	r3, r1
 80004b6:	78db      	ldrb	r3, [r3, #3]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    for (int i = 23; i >= 0; i--)
 80004be:	2317      	movs	r3, #23
 80004c0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80004c4:	e027      	b.n	8000516 <ws2812_Send_PWM+0x9e>
    {
      if (color & (1 << i))
 80004c6:	2201      	movs	r2, #1
 80004c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80004d6:	4013      	ands	r3, r2
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d009      	beq.n	80004f0 <ws2812_Send_PWM+0x78>
      {
        pwmData[indx] = 50; // 2/3 of ARR=75
 80004dc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80004e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80004e4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80004e8:	2132      	movs	r1, #50	; 0x32
 80004ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80004ee:	e008      	b.n	8000502 <ws2812_Send_PWM+0x8a>
      }

      else
        pwmData[indx] = 25; // 1/3 of ARR=75
 80004f0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80004f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80004f8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80004fc:	2119      	movs	r1, #25
 80004fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

      indx++;
 8000502:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000506:	3301      	adds	r3, #1
 8000508:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    for (int i = 23; i >= 0; i--)
 800050c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000510:	3b01      	subs	r3, #1
 8000512:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8000516:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800051a:	2b00      	cmp	r3, #0
 800051c:	dad3      	bge.n	80004c6 <ws2812_Send_PWM+0x4e>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 800051e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000522:	3301      	adds	r3, #1
 8000524:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8000528:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800052c:	2b09      	cmp	r3, #9
 800052e:	ddae      	ble.n	800048e <ws2812_Send_PWM+0x16>
    }
  }
  for (int i = 0; i < 50; i++)
 8000530:	2300      	movs	r3, #0
 8000532:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8000536:	e012      	b.n	800055e <ws2812_Send_PWM+0xe6>
  {
    pwmData[indx] = 0;
 8000538:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800053c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000540:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000544:	2100      	movs	r1, #0
 8000546:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    indx++;
 800054a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800054e:	3301      	adds	r3, #1
 8000550:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  for (int i = 0; i < 50; i++)
 8000554:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000558:	3301      	adds	r3, #1
 800055a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800055e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000562:	2b31      	cmp	r3, #49	; 0x31
 8000564:	dde8      	ble.n	8000538 <ws2812_Send_PWM+0xc0>
  }
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 8000566:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800056a:	b29b      	uxth	r3, r3
 800056c:	463a      	mov	r2, r7
 800056e:	2108      	movs	r1, #8
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <ws2812_Send_PWM+0x11c>)
 8000572:	f004 fe5d 	bl	8005230 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag)
 8000576:	bf00      	nop
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <ws2812_Send_PWM+0x120>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0fb      	beq.n	8000578 <ws2812_Send_PWM+0x100>
  {
  };
  datasentflag = 0;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <ws2812_Send_PWM+0x120>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000028c 	.word	0x2000028c
 8000594:	20000194 	.word	0x20000194
 8000598:	200002b4 	.word	0x200002b4

0800059c <StartAlarm>:

bool bAlarmGestart = false;
bool buzzerIsPlaying = true;

void StartAlarm() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	if(!bAlarmGestart) {
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <StartAlarm+0x24>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f083 0301 	eor.w	r3, r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d005      	beq.n	80005ba <StartAlarm+0x1e>
		printf("Alarm aan het starten....");
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <StartAlarm+0x28>)
 80005b0:	f00b fa3c 	bl	800ba2c <iprintf>
		bAlarmGestart = true;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <StartAlarm+0x24>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
	  // set state of bool
	}
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200002b8 	.word	0x200002b8
 80005c4:	0800c960 	.word	0x0800c960

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fc56 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f832 	bl	8000638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005d4:	f000 f89c 	bl	8000710 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f9a2 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f000 f98e 	bl	80008fc <MX_DMA_Init>
  MX_USB_Device_Init();
 80005e0:	f00a fc90 	bl	800af04 <MX_USB_Device_Init>
  MX_TIM16_Init();
 80005e4:	f000 f962 	bl	80008ac <MX_TIM16_Init>
  MX_TIM1_Init();
 80005e8:	f000 f8b0 	bl	800074c <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ws2812_SetAll_LED(0, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff ff27 	bl	8000444 <ws2812_SetAll_LED>
  ws2812_Send_PWM();
 80005f6:	f7ff ff3f 	bl	8000478 <ws2812_Send_PWM>

  while (1)
  {
	if(buzzerIsPlaying) {
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <main+0x64>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <main+0x42>
		Play_Buzzer(true);
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff fe0c 	bl	8000220 <Play_Buzzer>
 8000608:	e002      	b.n	8000610 <main+0x48>
	}
	else {
		Play_Buzzer(false);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff fe08 	bl	8000220 <Play_Buzzer>
	}
	ledstrip_Pulse();
 8000610:	f7ff fe4a 	bl	80002a8 <ledstrip_Pulse>
	//Relay_On();
	//Play_Buzzer();
    //Read_Rotary();
    //Read_Reed();

    if (bAlarmGestart) {
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <main+0x68>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0ee      	beq.n	80005fa <main+0x32>
    	printf("lekker man alarm gestart");
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <main+0x6c>)
 800061e:	f00b fa05 	bl	800ba2c <iprintf>
    	Play_Buzzer(true);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff fdfc 	bl	8000220 <Play_Buzzer>
	if(buzzerIsPlaying) {
 8000628:	e7e7      	b.n	80005fa <main+0x32>
 800062a:	bf00      	nop
 800062c:	20000008 	.word	0x20000008
 8000630:	200002b8 	.word	0x200002b8
 8000634:	0800c97c 	.word	0x0800c97c

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09a      	sub	sp, #104	; 0x68
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2248      	movs	r2, #72	; 0x48
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00b f9e8 	bl	800ba1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <SystemClock_Config+0xd4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <SystemClock_Config+0xd4>)
 8000668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xd4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800067a:	2326      	movs	r3, #38	; 0x26
 800067c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000690:	2300      	movs	r3, #0
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000694:	2360      	movs	r3, #96	; 0x60
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800069c:	2301      	movs	r3, #1
 800069e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80006a4:	2320      	movs	r3, #32
 80006a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fada 	bl	8003c78 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ca:	f000 f987 	bl	80009dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006ce:	236f      	movs	r3, #111	; 0x6f
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2103      	movs	r1, #3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fe36 	bl	8004360 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fa:	f000 f96f 	bl	80009dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006fe:	f004 fbc7 	bl	8004e90 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000702:	bf00      	nop
 8000704:	3768      	adds	r7, #104	; 0x68
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58000400 	.word	0x58000400

08000710 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2250      	movs	r2, #80	; 0x50
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f00b f97d 	bl	800ba1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800072c:	2310      	movs	r3, #16
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fa36 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800073e:	f000 f94d 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b09c      	sub	sp, #112	; 0x70
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2234      	movs	r2, #52	; 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00b f948 	bl	800ba1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800078c:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <MX_TIM1_Init+0x158>)
 800078e:	4a46      	ldr	r2, [pc, #280]	; (80008a8 <MX_TIM1_Init+0x15c>)
 8000790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <MX_TIM1_Init+0x158>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <MX_TIM1_Init+0x158>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 75- 1;
 800079e:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <MX_TIM1_Init+0x158>)
 80007a0:	224a      	movs	r2, #74	; 0x4a
 80007a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b3f      	ldr	r3, [pc, #252]	; (80008a4 <MX_TIM1_Init+0x158>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007aa:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <MX_TIM1_Init+0x158>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <MX_TIM1_Init+0x158>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b6:	483b      	ldr	r0, [pc, #236]	; (80008a4 <MX_TIM1_Init+0x158>)
 80007b8:	f004 fc81 	bl	80050be <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007c2:	f000 f90b 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007d0:	4619      	mov	r1, r3
 80007d2:	4834      	ldr	r0, [pc, #208]	; (80008a4 <MX_TIM1_Init+0x158>)
 80007d4:	f005 fa3a 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007de:	f000 f8fd 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007e2:	4830      	ldr	r0, [pc, #192]	; (80008a4 <MX_TIM1_Init+0x158>)
 80007e4:	f004 fcc2 	bl	800516c <HAL_TIM_PWM_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007ee:	f000 f8f5 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000802:	4619      	mov	r1, r3
 8000804:	4827      	ldr	r0, [pc, #156]	; (80008a4 <MX_TIM1_Init+0x158>)
 8000806:	f005 ff91 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000810:	f000 f8e4 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000830:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000834:	2208      	movs	r2, #8
 8000836:	4619      	mov	r1, r3
 8000838:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_TIM1_Init+0x158>)
 800083a:	f005 f8f3 	bl	8005a24 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000844:	f000 f8ca 	bl	80009dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800086e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM1_Init+0x158>)
 8000886:	f005 ffb1 	bl	80067ec <HAL_TIMEx_ConfigBreakDeadTime>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000890:	f000 f8a4 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM1_Init+0x158>)
 8000896:	f000 f965 	bl	8000b64 <HAL_TIM_MspPostInit>

}
 800089a:	bf00      	nop
 800089c:	3770      	adds	r7, #112	; 0x70
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000194 	.word	0x20000194
 80008a8:	40012c00 	.word	0x40012c00

080008ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <MX_TIM16_Init+0x4c>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63998;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008b8:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 80008bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008c6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80008ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008e0:	f004 fbed 	bl	80050be <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80008ea:	f000 f877 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200001e0 	.word	0x200001e0
 80008f8:	40014400 	.word	0x40014400

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000900:	2004      	movs	r0, #4
 8000902:	f7ff fd2b 	bl	800035c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fd28 	bl	800035c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	200b      	movs	r0, #11
 8000912:	f000 fc38 	bl	8001186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000916:	200b      	movs	r0, #11
 8000918:	f000 fc4f 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	2004      	movs	r0, #4
 8000936:	f7ff fd2a 	bl	800038e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fd27 	bl	800038e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fd24 	bl	800038e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2008      	movs	r0, #8
 8000948:	f7ff fd21 	bl	800038e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000952:	481f      	ldr	r0, [pc, #124]	; (80009d0 <MX_GPIO_Init+0xb0>)
 8000954:	f001 f8a8 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	481d      	ldr	r0, [pc, #116]	; (80009d4 <MX_GPIO_Init+0xb4>)
 800095e:	f001 f8a3 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RELAY_Pin;
 8000962:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4815      	ldr	r0, [pc, #84]	; (80009d0 <MX_GPIO_Init+0xb0>)
 800097a:	f000 ff0d 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 800097e:	f641 030a 	movw	r3, #6154	; 0x180a
 8000982:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0xb0>)
 8000992:	f000 ff01 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 8000996:	2301      	movs	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <MX_GPIO_Init+0xb4>)
 80009ac:	f000 fef4 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80009b0:	2301      	movs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0xb8>)
 80009c2:	f000 fee9 	bl	8001798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000800 	.word	0x48000800
 80009d4:	48000400 	.word	0x48000400
 80009d8:	48000c00 	.word	0x48000c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_TIM_PeriodElapsedCallback>:
void SetTimer() {
	HAL_TIM_Base_Start_IT(&htim16);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if (!bHasContact) { // kijken of contact is anders starten we het alarm.
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>
		printf("Timer is gestart!");
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a00:	f00b f814 	bl	800ba2c <iprintf>
		// Trigger function
		StartAlarm();
 8000a04:	f7ff fdca 	bl	800059c <StartAlarm>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200002b9 	.word	0x200002b9
 8000a14:	0800c998 	.word	0x0800c998

08000a18 <_write>:

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	68b8      	ldr	r0, [r7, #8]
 8000a28:	f00a fb2a 	bl	800b080 <CDC_Transmit_FS>
  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <LL_AHB2_GRP1_EnableClock>:
{
 8000a36:	b480      	push	{r7}
 8000a38:	b085      	sub	sp, #20
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4013      	ands	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <HAL_TIM_Base_MspInit+0xac>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d137      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000abe:	f7ff ffd3 	bl	8000a68 <LL_APB2_GRP1_EnableClock>

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel1;
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ac4:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <HAL_TIM_Base_MspInit+0xb4>)
 8000ac6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000aca:	2217      	movs	r2, #23
 8000acc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aee:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000afe:	f000 fb77 	bl	80011f0 <HAL_DMA_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_TIM_Base_MspInit+0x64>
    {
      Error_Handler();
 8000b08:	f7ff ff68 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_TIM_Base_MspInit+0xb0>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2019      	movs	r0, #25
 8000b1e:	f000 fb32 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b22:	2019      	movs	r0, #25
 8000b24:	f000 fb49 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b28:	e010      	b.n	8000b4c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <HAL_TIM_Base_MspInit+0xb8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d10b      	bne.n	8000b4c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b34:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b38:	f7ff ff96 	bl	8000a68 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2019      	movs	r0, #25
 8000b42:	f000 fb20 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b46:	2019      	movs	r0, #25
 8000b48:	f000 fb37 	bl	80011ba <HAL_NVIC_EnableIRQ>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40012c00 	.word	0x40012c00
 8000b58:	2000022c 	.word	0x2000022c
 8000b5c:	40020008 	.word	0x40020008
 8000b60:	40014400 	.word	0x40014400

08000b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <HAL_TIM_MspPostInit+0x54>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d114      	bne.n	8000bb0 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ff55 	bl	8000a36 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 fdf4 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40012c00 	.word	0x40012c00

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f992 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <DMA1_Channel1_IRQHandler+0x10>)
 8000c16:	f000 fc6d 	bl	80014f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000022c 	.word	0x2000022c

08000c24 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <USB_LP_IRQHandler+0x10>)
 8000c2a:	f001 f850 	bl	8001cce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200017a4 	.word	0x200017a4

08000c38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000c3e:	f004 fdd1 	bl	80057e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000c44:	f004 fdce 	bl	80057e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000194 	.word	0x20000194
 8000c50:	200001e0 	.word	0x200001e0

08000c54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
  }

  return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_isatty>:

int _isatty(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f00a fe4e 	bl	800b9c8 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20030000 	.word	0x20030000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	200002bc 	.word	0x200002bc
 8000d60:	20001cc8 	.word	0x20001cc8

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <SystemInit+0x98>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <SystemInit+0x98>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d90:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <SystemInit+0x9c>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dae:	f023 0305 	bic.w	r3, r3, #5
 8000db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dc2:	f023 0301 	bic.w	r3, r3, #1
 8000dc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dce:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <SystemInit+0xa0>)
 8000dd0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <SystemInit+0xa0>)
 8000dd8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	faf6fefb 	.word	0xfaf6fefb
 8000e04:	22041000 	.word	0x22041000

08000e08 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e08:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0c:	3304      	adds	r3, #4

08000e0e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e10:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e12:	d3f9      	bcc.n	8000e08 <CopyDataInit>
  bx lr
 8000e14:	4770      	bx	lr

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000e16:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000e18:	3004      	adds	r0, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000e1a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>
  bx lr
 8000e1e:	4770      	bx	lr

08000e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e24:	f7ff ff9e 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <LoopForever+0x6>)
 8000e2a:	490c      	ldr	r1, [pc, #48]	; (8000e5c <LoopForever+0xa>)
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <LoopForever+0xe>)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f7ff ffed 	bl	8000e0e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <LoopForever+0x12>)
 8000e36:	490c      	ldr	r1, [pc, #48]	; (8000e68 <LoopForever+0x16>)
 8000e38:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <LoopForever+0x1a>)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f7ff ffe7 	bl	8000e0e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <LoopForever+0x1e>)
 8000e42:	490c      	ldr	r1, [pc, #48]	; (8000e74 <LoopForever+0x22>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	f7ff ffe8 	bl	8000e1a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4a:	f00a fdc3 	bl	800b9d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e4e:	f7ff fbbb 	bl	80005c8 <main>

08000e52 <LoopForever>:

LoopForever:
  b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000170 	.word	0x20000170
 8000e60:	0800cb70 	.word	0x0800cb70
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e64:	20030000 	.word	0x20030000
 8000e68:	20030000 	.word	0x20030000
 8000e6c:	0800ccd8 	.word	0x0800ccd8
  INIT_BSS _sbss, _ebss
 8000e70:	20000170 	.word	0x20000170
 8000e74:	20001cc8 	.word	0x20001cc8

08000e78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_Init+0x3c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f96c 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e98:	200f      	movs	r0, #15
 8000e9a:	f000 f80f 	bl	8000ebc <HAL_InitTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	e001      	b.n	8000eae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eaa:	f7ff fdf6 	bl	8000a9a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58004000 	.word	0x58004000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d024      	beq.n	8000f1a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed0:	f003 fbf4 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_InitTick+0x6c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f974 	bl	80011d6 <HAL_SYSTICK_Config>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10f      	bne.n	8000f14 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b0f      	cmp	r3, #15
 8000ef8:	d809      	bhi.n	8000f0e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	2200      	movs	r2, #0
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	f000 f940 	bl	8001186 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_InitTick+0x70>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e007      	b.n	8000f1e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e004      	b.n	8000f1e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000014 	.word	0x20000014
 8000f2c:	20000010 	.word	0x20000010

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000014 	.word	0x20000014
 8000f54:	200002c0 	.word	0x200002c0

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200002c0 	.word	0x200002c0

08000f70 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTickPrio+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000010 	.word	0x20000010

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffe2 	bl	8000f58 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffd2 	bl	8000f58 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000014 	.word	0x20000014

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff40 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff33 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa4 	bl	800112c <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e08e      	b.n	8001320 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_DMA_Init+0x138>)
 800120a:	429a      	cmp	r2, r3
 800120c:	d80f      	bhi.n	800122e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <HAL_DMA_Init+0x13c>)
 8001216:	4413      	add	r3, r2
 8001218:	4a45      	ldr	r2, [pc, #276]	; (8001330 <HAL_DMA_Init+0x140>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	009a      	lsls	r2, r3, #2
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a42      	ldr	r2, [pc, #264]	; (8001334 <HAL_DMA_Init+0x144>)
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
 800122c:	e00e      	b.n	800124c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4b40      	ldr	r3, [pc, #256]	; (8001338 <HAL_DMA_Init+0x148>)
 8001236:	4413      	add	r3, r2
 8001238:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <HAL_DMA_Init+0x140>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	009a      	lsls	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a3c      	ldr	r2, [pc, #240]	; (800133c <HAL_DMA_Init+0x14c>)
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2202      	movs	r2, #2
 8001250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001266:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fa16 	bl	80016d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012ac:	d102      	bne.n	80012b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d010      	beq.n	80012f6 <HAL_DMA_Init+0x106>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d80c      	bhi.n	80012f6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fa35 	bl	800174c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	e008      	b.n	8001308 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020407 	.word	0x40020407
 800132c:	bffdfff8 	.word	0xbffdfff8
 8001330:	cccccccd 	.word	0xcccccccd
 8001334:	40020000 	.word	0x40020000
 8001338:	bffdfbf8 	.word	0xbffdfbf8
 800133c:	40020400 	.word	0x40020400

08001340 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_DMA_Start_IT+0x20>
 800135c:	2302      	movs	r3, #2
 800135e:	e066      	b.n	800142e <HAL_DMA_Start_IT+0xee>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d155      	bne.n	8001420 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 f95a 	bl	8001652 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 020e 	orr.w	r2, r2, #14
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e00f      	b.n	80013d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0204 	bic.w	r2, r2, #4
 80013c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 020a 	orr.w	r2, r2, #10
 80013d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800140c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e005      	b.n	800142c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001428:	2302      	movs	r3, #2
 800142a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800142c:	7dfb      	ldrb	r3, [r7, #23]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d005      	beq.n	800145a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2204      	movs	r2, #4
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e047      	b.n	80014ea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 020e 	bic.w	r2, r2, #14
 8001468:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 021c 	and.w	r2, r3, #28
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00c      	beq.n	80014ca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
    }
  }
  return status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f003 031c 	and.w	r3, r3, #28
 8001514:	2204      	movs	r2, #4
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d026      	beq.n	800156e <HAL_DMA_IRQHandler+0x7a>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d021      	beq.n	800156e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d107      	bne.n	8001548 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f003 021c 	and.w	r2, r3, #28
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2104      	movs	r1, #4
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	2b00      	cmp	r3, #0
 8001562:	d071      	beq.n	8001648 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800156c:	e06c      	b.n	8001648 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 031c 	and.w	r3, r3, #28
 8001576:	2202      	movs	r2, #2
 8001578:	409a      	lsls	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02e      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xec>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d029      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10b      	bne.n	80015b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020a 	bic.w	r2, r2, #10
 80015a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f003 021c 	and.w	r2, r3, #28
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2102      	movs	r1, #2
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d038      	beq.n	8001648 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015de:	e033      	b.n	8001648 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f003 031c 	and.w	r3, r3, #28
 80015e8:	2208      	movs	r2, #8
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d02a      	beq.n	800164a <HAL_DMA_IRQHandler+0x156>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d025      	beq.n	800164a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 021c 	and.w	r2, r3, #28
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001648:	bf00      	nop
 800164a:	bf00      	nop
}
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001668:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800167a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f003 021c 	and.w	r2, r3, #28
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b10      	cmp	r3, #16
 800169e:	d108      	bne.n	80016b2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016b0:	e007      	b.n	80016c2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	60da      	str	r2, [r3, #12]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d80a      	bhi.n	80016fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6493      	str	r3, [r2, #72]	; 0x48
 80016f8:	e007      	b.n	800170a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001704:	4413      	add	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3b08      	subs	r3, #8
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001720:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	2201      	movs	r2, #1
 800172a:	409a      	lsls	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40020407 	.word	0x40020407
 8001740:	4002081c 	.word	0x4002081c
 8001744:	cccccccd 	.word	0xcccccccd
 8001748:	40020880 	.word	0x40020880

0800174c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800175c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001770:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3b01      	subs	r3, #1
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2201      	movs	r2, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	1000823f 	.word	0x1000823f
 8001794:	40020940 	.word	0x40020940

08001798 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	e14c      	b.n	8001a42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 813e 	beq.w	8001a3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x40>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8098 	beq.w	8001a3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800190c:	4a54      	ldr	r2, [pc, #336]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001936:	d019      	beq.n	800196c <HAL_GPIO_Init+0x1d4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d013      	beq.n	8001968 <HAL_GPIO_Init+0x1d0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00d      	beq.n	8001964 <HAL_GPIO_Init+0x1cc>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_GPIO_Init+0x2d4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x1c8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <HAL_GPIO_Init+0x2d8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_GPIO_Init+0x1c4>
 8001958:	2304      	movs	r3, #4
 800195a:	e008      	b.n	800196e <HAL_GPIO_Init+0x1d6>
 800195c:	2307      	movs	r3, #7
 800195e:	e006      	b.n	800196e <HAL_GPIO_Init+0x1d6>
 8001960:	2303      	movs	r3, #3
 8001962:	e004      	b.n	800196e <HAL_GPIO_Init+0x1d6>
 8001964:	2302      	movs	r3, #2
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0x1d6>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_GPIO_Init+0x1d6>
 800196c:	2300      	movs	r3, #0
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	f002 0203 	and.w	r2, r2, #3
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	4093      	lsls	r3, r2
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800197e:	4938      	ldr	r1, [pc, #224]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019b0:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 80019e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a06:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f47f aeab 	bne.w	80017a8 <HAL_GPIO_Init+0x10>
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40010000 	.word	0x40010000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000c00 	.word	0x48000c00
 8001a70:	48001000 	.word	0x48001000
 8001a74:	58000800 	.word	0x58000800

08001a78 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af06      	add	r7, sp, #24
 8001ade:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0cb      	b.n	8001c82 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f009 fc38 	bl	800b374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2203      	movs	r2, #3
 8001b08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 ff30 	bl	8006976 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e040      	b.n	8001b9e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3303      	adds	r3, #3
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3338      	adds	r3, #56	; 0x38
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	3340      	adds	r3, #64	; 0x40
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d3b9      	bcc.n	8001b1c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e044      	b.n	8001c38 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3b5      	bcc.n	8001bae <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	687e      	ldr	r6, [r7, #4]
 8001c4a:	466d      	mov	r5, sp
 8001c4c:	f106 0410 	add.w	r4, r6, #16
 8001c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	602b      	str	r3, [r5, #0]
 8001c58:	1d33      	adds	r3, r6, #4
 8001c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5c:	6838      	ldr	r0, [r7, #0]
 8001c5e:	f004 fea5 	bl	80069ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f001 fc45 	bl	800350a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_PCD_Start+0x16>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e012      	b.n	8001cc6 <HAL_PCD_Start+0x3c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 fe4b 	bl	8006948 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f007 f90f 	bl	8008eda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f007 f914 	bl	8008f08 <USB_ReadInterrupts>
 8001ce0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fb05 	bl	80022fc <PCD_EP_ISR_Handler>

    return;
 8001cf2:	e110      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d013      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d10:	b292      	uxth	r2, r2
 8001d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f009 fbdf 	bl	800b4da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8fc 	bl	8001f1c <HAL_PCD_SetAddress>

    return;
 8001d24:	e0f7      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00c      	beq.n	8001d4a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d42:	b292      	uxth	r2, r2
 8001d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d48:	e0e5      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d66:	b292      	uxth	r2, r2
 8001d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d6c:	e0d3      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d034      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0204 	bic.w	r2, r2, #4
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0208 	bic.w	r2, r2, #8
 8001da2:	b292      	uxth	r2, r2
 8001da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dba:	2100      	movs	r1, #0
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f009 fd83 	bl	800b8c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f009 fbc2 	bl	800b54c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001de0:	e099      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d027      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0208 	orr.w	r2, r2, #8
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e16:	b292      	uxth	r2, r2
 8001e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0204 	orr.w	r2, r2, #4
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f009 fb6f 	bl	800b518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e3a:	e06c      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d040      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d12b      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0204 	orr.w	r2, r2, #4
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f009 fd05 	bl	800b8c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001ebe:	e02a      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f009 fb29 	bl	800b518 <HAL_PCD_SuspendCallback>
    return;
 8001ec6:	e026      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00f      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f009 fae7 	bl	800b4be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ef0:	e011      	b.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f14:	bf00      	nop
  }
}
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_SetAddress+0x1a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e013      	b.n	8001f5e <HAL_PCD_SetAddress+0x42>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f006 ffaf 	bl	8008eb2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	4608      	mov	r0, r1
 8001f70:	4611      	mov	r1, r2
 8001f72:	461a      	mov	r2, r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	70fb      	strb	r3, [r7, #3]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	803b      	strh	r3, [r7, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0e      	bge.n	8001faa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	705a      	strb	r2, [r3, #1]
 8001fa8:	e00e      	b.n	8001fc8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 0207 	and.w	r2, r3, #7
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fd4:	883a      	ldrh	r2, [r7, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	78ba      	ldrb	r2, [r7, #2]
 8001fde:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fe0:	78bb      	ldrb	r3, [r7, #2]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d102      	bne.n	8001fec <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_EP_Open+0x94>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e00e      	b.n	8002018 <HAL_PCD_EP_Open+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f004 fcf1 	bl	80069f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002016:	7afb      	ldrb	r3, [r7, #11]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800202c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002030:	2b00      	cmp	r3, #0
 8002032:	da0e      	bge.n	8002052 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	705a      	strb	r2, [r3, #1]
 8002050:	e00e      	b.n	8002070 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 0207 	and.w	r2, r3, #7
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	b2da      	uxtb	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_PCD_EP_Close+0x6a>
 8002086:	2302      	movs	r3, #2
 8002088:	e00e      	b.n	80020a8 <HAL_PCD_EP_Close+0x88>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68f9      	ldr	r1, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	f005 f86d 	bl	8007178 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	460b      	mov	r3, r1
 80020be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	7afb      	ldrb	r3, [r7, #11]
 80020c2:	f003 0207 	and.w	r2, r3, #7
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2200      	movs	r2, #0
 80020ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6979      	ldr	r1, [r7, #20]
 8002102:	4618      	mov	r0, r3
 8002104:	f005 fa25 	bl	8007552 <USB_EPStartXfer>

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 0207 	and.w	r2, r3, #7
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002134:	681b      	ldr	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	460b      	mov	r3, r1
 8002150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2201      	movs	r2, #1
 800218c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b2da      	uxtb	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6979      	ldr	r1, [r7, #20]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f005 f9d6 	bl	8007552 <USB_EPStartXfer>

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0207 	and.w	r2, r3, #7
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d901      	bls.n	80021ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e03e      	b.n	800224c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da0e      	bge.n	80021f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	705a      	strb	r2, [r3, #1]
 80021f2:	e00c      	b.n	800220e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	b2da      	uxtb	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_PCD_EP_SetStall+0x7e>
 800222a:	2302      	movs	r3, #2
 800222c:	e00e      	b.n	800224c <HAL_PCD_EP_SetStall+0x9c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	f006 fd39 	bl	8008cb4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 020f 	and.w	r2, r3, #15
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d901      	bls.n	8002272 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e040      	b.n	80022f4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	da0e      	bge.n	8002298 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	705a      	strb	r2, [r3, #1]
 8002296:	e00e      	b.n	80022b6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0207 	and.w	r2, r3, #7
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_PCD_EP_ClrStall+0x82>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e00e      	b.n	80022f4 <HAL_PCD_EP_ClrStall+0xa0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f006 fd36 	bl	8008d56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b096      	sub	sp, #88	; 0x58
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002304:	e3b1      	b.n	8002a6a <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800230e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002320:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8173 	bne.w	8002610 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800232a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d150      	bne.n	80023d8 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	81fb      	strh	r3, [r7, #14]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002356:	b29b      	uxth	r3, r3
 8002358:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3328      	adds	r3, #40	; 0x28
 800235e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002368:	b29b      	uxth	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002386:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	441a      	add	r2, r3
 8002392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002394:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f009 f876 	bl	800b48a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 835f 	beq.w	8002a6a <PCD_EP_ISR_Handler+0x76e>
 80023ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 835a 	bne.w	8002a6a <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b292      	uxth	r2, r2
 80023ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023d6:	e348      	b.n	8002a6a <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023de:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d032      	beq.n	800245c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4413      	add	r3, r2
 8002410:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800241a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800242c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002430:	b29b      	uxth	r3, r3
 8002432:	f006 fdbb 	bl	8008fac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29a      	uxth	r2, r3
 800243e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002442:	4013      	ands	r3, r2
 8002444:	823b      	strh	r3, [r7, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	8a3a      	ldrh	r2, [r7, #16]
 800244c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002450:	b292      	uxth	r2, r2
 8002452:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f008 ffeb 	bl	800b430 <HAL_PCD_SetupStageCallback>
 800245a:	e306      	b.n	8002a6a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800245c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002460:	2b00      	cmp	r3, #0
 8002462:	f280 8302 	bge.w	8002a6a <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29a      	uxth	r2, r3
 800246e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002472:	4013      	ands	r3, r2
 8002474:	83fb      	strh	r3, [r7, #30]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	8bfa      	ldrh	r2, [r7, #30]
 800247c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002480:	b292      	uxth	r2, r2
 8002482:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4413      	add	r3, r2
 800249e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d019      	beq.n	80024e8 <PCD_EP_ISR_Handler+0x1ec>
 80024b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c2:	6959      	ldr	r1, [r3, #20]
 80024c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f006 fd6d 	bl	8008fac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	441a      	add	r2, r3
 80024dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024e0:	2100      	movs	r1, #0
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f008 ffb6 	bl	800b454 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80024f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 82b5 	bne.w	8002a6a <PCD_EP_ISR_Handler+0x76e>
 8002500:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002504:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800250c:	f000 82ad 	beq.w	8002a6a <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4413      	add	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253a:	b29a      	uxth	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b3e      	cmp	r3, #62	; 0x3e
 8002546:	d91d      	bls.n	8002584 <PCD_EP_ISR_Handler+0x288>
 8002548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
 8002550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <PCD_EP_ISR_Handler+0x266>
 800255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255e:	3b01      	subs	r3, #1
 8002560:	647b      	str	r3, [r7, #68]	; 0x44
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29a      	uxth	r2, r3
 8002568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256a:	b29b      	uxth	r3, r3
 800256c:	029b      	lsls	r3, r3, #10
 800256e:	b29b      	uxth	r3, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257c:	b29a      	uxth	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	e026      	b.n	80025d2 <PCD_EP_ISR_Handler+0x2d6>
 8002584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <PCD_EP_ISR_Handler+0x2a6>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259a:	b29a      	uxth	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	e017      	b.n	80025d2 <PCD_EP_ISR_Handler+0x2d6>
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <PCD_EP_ISR_Handler+0x2c0>
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	3301      	adds	r3, #1
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	827b      	strh	r3, [r7, #18]
 80025e4:	8a7b      	ldrh	r3, [r7, #18]
 80025e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025ea:	827b      	strh	r3, [r7, #18]
 80025ec:	8a7b      	ldrh	r3, [r7, #18]
 80025ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025f2:	827b      	strh	r3, [r7, #18]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	8a7b      	ldrh	r3, [r7, #18]
 80025fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260a:	b29b      	uxth	r3, r3
 800260c:	8013      	strh	r3, [r2, #0]
 800260e:	e22c      	b.n	8002a6a <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002624:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002628:	2b00      	cmp	r3, #0
 800262a:	f280 80f6 	bge.w	800281a <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002644:	4013      	ands	r3, r2
 8002646:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800265c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002660:	b292      	uxth	r2, r2
 8002662:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002664:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800267a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267c:	7b1b      	ldrb	r3, [r3, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d123      	bne.n	80026ca <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4413      	add	r3, r2
 800269c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80026aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 808e 	beq.w	80027d0 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ba:	6959      	ldr	r1, [r3, #20]
 80026bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026be:	88da      	ldrh	r2, [r3, #6]
 80026c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026c4:	f006 fc72 	bl	8008fac <USB_ReadPMA>
 80026c8:	e082      	b.n	80027d0 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d10a      	bne.n	80026e8 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026d6:	461a      	mov	r2, r3
 80026d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9d3 	bl	8002a86 <HAL_PCD_EP_DB_Receive>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80026e6:	e073      	b.n	80027d0 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002702:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	441a      	add	r2, r3
 8002714:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800271c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002724:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002728:	b29b      	uxth	r3, r3
 800272a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d022      	beq.n	800278c <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4413      	add	r3, r2
 8002760:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800276e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02c      	beq.n	80027d0 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277c:	6959      	ldr	r1, [r3, #20]
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	891a      	ldrh	r2, [r3, #8]
 8002782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002786:	f006 fc11 	bl	8008fac <USB_ReadPMA>
 800278a:	e021      	b.n	80027d0 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002794:	b29b      	uxth	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	6959      	ldr	r1, [r3, #20]
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	895a      	ldrh	r2, [r3, #10]
 80027c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027cc:	f006 fbee 	bl	8008fac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027d8:	441a      	add	r2, r3
 80027da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027e6:	441a      	add	r2, r3
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <PCD_EP_ISR_Handler+0x504>
 80027f4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d206      	bcs.n	800280e <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f008 fe24 	bl	800b454 <HAL_PCD_DataOutStageCallback>
 800280c:	e005      	b.n	800281a <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002814:	4618      	mov	r0, r3
 8002816:	f004 fe9c 	bl	8007552 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800281a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8121 	beq.w	8002a6a <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002828:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	441a      	add	r2, r3
 8002868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800286c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002874:	b29b      	uxth	r3, r3
 8002876:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	2b01      	cmp	r3, #1
 800287e:	f040 80a2 	bne.w	80029c6 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288a:	7b1b      	ldrb	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8093 	beq.w	80029b8 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002892:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d046      	beq.n	800292c <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800289e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a0:	785b      	ldrb	r3, [r3, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d126      	bne.n	80028f4 <PCD_EP_ISR_Handler+0x5f8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	4413      	add	r3, r2
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	00da      	lsls	r2, r3, #3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	4413      	add	r3, r2
 80028c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	e061      	b.n	80029b8 <PCD_EP_ISR_Handler+0x6bc>
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d15d      	bne.n	80029b8 <PCD_EP_ISR_Handler+0x6bc>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	4413      	add	r3, r2
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	00da      	lsls	r2, r3, #3
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	4413      	add	r3, r2
 800291e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	e045      	b.n	80029b8 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d126      	bne.n	8002988 <PCD_EP_ISR_Handler+0x68c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	4413      	add	r3, r2
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
 8002952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00da      	lsls	r2, r3, #3
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	4413      	add	r3, r2
 800295c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296c:	b29a      	uxth	r2, r3
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002980:	b29a      	uxth	r2, r3
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	e017      	b.n	80029b8 <PCD_EP_ISR_Handler+0x6bc>
 8002988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298a:	785b      	ldrb	r3, [r3, #1]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d113      	bne.n	80029b8 <PCD_EP_ISR_Handler+0x6bc>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299e:	4413      	add	r3, r2
 80029a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	00da      	lsls	r2, r3, #3
 80029a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	2200      	movs	r2, #0
 80029b6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f008 fd63 	bl	800b48a <HAL_PCD_DataInStageCallback>
 80029c4:	e051      	b.n	8002a6a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80029c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d144      	bne.n	8002a5c <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d907      	bls.n	8002a16 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	e002      	b.n	8002a1c <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f008 fd2d 	bl	800b48a <HAL_PCD_DataInStageCallback>
 8002a30:	e01b      	b.n	8002a6a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a3a:	441a      	add	r2, r3
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a48:	441a      	add	r2, r3
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fd7c 	bl	8007552 <USB_EPStartXfer>
 8002a5a:	e006      	b.n	8002a6a <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a60:	461a      	mov	r2, r3
 8002a62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f917 	bl	8002c98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f6ff ac45 	blt.w	8002306 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3758      	adds	r7, #88	; 0x58
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b088      	sub	sp, #32
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d07c      	beq.n	8002b98 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	8b7b      	ldrh	r3, [r7, #26]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d306      	bcc.n	8002adc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	8b7b      	ldrh	r3, [r7, #26]
 8002ad4:	1ad2      	subs	r2, r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	619a      	str	r2, [r3, #24]
 8002ada:	e002      	b.n	8002ae2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d123      	bne.n	8002b32 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	833b      	strh	r3, [r7, #24]
 8002b06:	8b3b      	ldrh	r3, [r7, #24]
 8002b08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b0c:	833b      	strh	r3, [r7, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	441a      	add	r2, r3
 8002b1c:	8b3b      	ldrh	r3, [r7, #24]
 8002b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01f      	beq.n	8002b7c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	82fb      	strh	r3, [r7, #22]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	8afb      	ldrh	r3, [r7, #22]
 8002b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b7c:	8b7b      	ldrh	r3, [r7, #26]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8085 	beq.w	8002c8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6959      	ldr	r1, [r3, #20]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	891a      	ldrh	r2, [r3, #8]
 8002b90:	8b7b      	ldrh	r3, [r7, #26]
 8002b92:	f006 fa0b 	bl	8008fac <USB_ReadPMA>
 8002b96:	e07a      	b.n	8002c8e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bbc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	8b7b      	ldrh	r3, [r7, #26]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d306      	bcc.n	8002bd6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	8b7b      	ldrh	r3, [r7, #26]
 8002bce:	1ad2      	subs	r2, r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	619a      	str	r2, [r3, #24]
 8002bd4:	e002      	b.n	8002bdc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d123      	bne.n	8002c2c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	83fb      	strh	r3, [r7, #30]
 8002c00:	8bfb      	ldrh	r3, [r7, #30]
 8002c02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c06:	83fb      	strh	r3, [r7, #30]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	441a      	add	r2, r3
 8002c16:	8bfb      	ldrh	r3, [r7, #30]
 8002c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11f      	bne.n	8002c76 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c50:	83bb      	strh	r3, [r7, #28]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	8bbb      	ldrh	r3, [r7, #28]
 8002c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c76:	8b7b      	ldrh	r3, [r7, #26]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6959      	ldr	r1, [r3, #20]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	895a      	ldrh	r2, [r3, #10]
 8002c88:	8b7b      	ldrh	r3, [r7, #26]
 8002c8a:	f006 f98f 	bl	8008fac <USB_ReadPMA>
    }
  }

  return count;
 8002c8e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0a4      	sub	sp, #144	; 0x90
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 81db 	beq.w	8003068 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d907      	bls.n	8002cf6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	619a      	str	r2, [r3, #24]
 8002cf4:	e002      	b.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 80b9 	bne.w	8002e78 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d126      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	4413      	add	r3, r2
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	00da      	lsls	r2, r3, #3
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	4413      	add	r3, r2
 8002d30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e01a      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d116      	bne.n	8002d92 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	4413      	add	r3, r2
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	00da      	lsls	r2, r3, #3
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d84:	4413      	add	r3, r2
 8002d86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	2200      	movs	r2, #0
 8002d90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d126      	bne.n	8002dee <HAL_PCD_EP_DB_Transmit+0x156>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	00da      	lsls	r2, r3, #3
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	e017      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x186>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d113      	bne.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x186>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	4413      	add	r3, r2
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	00da      	lsls	r2, r3, #3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e16:	623b      	str	r3, [r7, #32]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f008 fb30 	bl	800b48a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 82fa 	beq.w	800342a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	82fb      	strh	r3, [r7, #22]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	8afb      	ldrh	r3, [r7, #22]
 8002e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8013      	strh	r3, [r2, #0]
 8002e76:	e2d8      	b.n	800342a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d021      	beq.n	8002ec6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	f040 82ac 	bne.w	800342a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002eda:	441a      	add	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ee8:	441a      	add	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d30b      	bcc.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f0a:	1ad2      	subs	r2, r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	621a      	str	r2, [r3, #32]
 8002f10:	e017      	b.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d108      	bne.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002f1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f2a:	e00a      	b.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d165      	bne.n	8003016 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5e:	4413      	add	r3, r2
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f86:	2b3e      	cmp	r3, #62	; 0x3e
 8002f88:	d91d      	bls.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	801a      	strh	r2, [r3, #0]
 8002fc4:	e044      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	e035      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x366>
 8002ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29a      	uxth	r2, r3
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	b29b      	uxth	r3, r3
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	b29b      	uxth	r3, r3
 800300c:	4313      	orrs	r3, r2
 800300e:	b29a      	uxth	r2, r3
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	e01c      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d118      	bne.n	8003050 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	647b      	str	r3, [r7, #68]	; 0x44
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003032:	4413      	add	r3, r2
 8003034:	647b      	str	r3, [r7, #68]	; 0x44
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303e:	4413      	add	r3, r2
 8003040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
 8003046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800304a:	b29a      	uxth	r2, r3
 800304c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6959      	ldr	r1, [r3, #20]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	891a      	ldrh	r2, [r3, #8]
 800305c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003060:	b29b      	uxth	r3, r3
 8003062:	f005 ff61 	bl	8008f28 <USB_WritePMA>
 8003066:	e1e0      	b.n	800342a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003070:	b29b      	uxth	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	4413      	add	r3, r2
 8003082:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800308c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003098:	429a      	cmp	r2, r3
 800309a:	d307      	bcc.n	80030ac <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	619a      	str	r2, [r3, #24]
 80030aa:	e002      	b.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 80c0 	bne.w	800323c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d126      	bne.n	8003112 <HAL_PCD_EP_DB_Transmit+0x47a>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d8:	4413      	add	r3, r2
 80030da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	00da      	lsls	r2, r3, #3
 80030e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e4:	4413      	add	r3, r2
 80030e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fa:	801a      	strh	r2, [r3, #0]
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800310a:	b29a      	uxth	r2, r3
 800310c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310e:	801a      	strh	r2, [r3, #0]
 8003110:	e01a      	b.n	8003148 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d116      	bne.n	8003148 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	667b      	str	r3, [r7, #100]	; 0x64
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800312e:	4413      	add	r3, r2
 8003130:	667b      	str	r3, [r7, #100]	; 0x64
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	00da      	lsls	r2, r3, #3
 8003138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800313a:	4413      	add	r3, r2
 800313c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	2200      	movs	r2, #0
 8003146:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	677b      	str	r3, [r7, #116]	; 0x74
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d12b      	bne.n	80031ae <HAL_PCD_EP_DB_Transmit+0x516>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003164:	b29b      	uxth	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800316a:	4413      	add	r3, r2
 800316c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	00da      	lsls	r2, r3, #3
 8003174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003176:	4413      	add	r3, r2
 8003178:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800317c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003180:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318c:	b29a      	uxth	r2, r3
 800318e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	e017      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x546>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d113      	bne.n	80031de <HAL_PCD_EP_DB_Transmit+0x546>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c4:	4413      	add	r3, r2
 80031c6:	677b      	str	r3, [r7, #116]	; 0x74
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00da      	lsls	r2, r3, #3
 80031ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031d6:	673b      	str	r3, [r7, #112]	; 0x70
 80031d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f008 f950 	bl	800b48a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 811a 	bne.w	800342a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003236:	b29b      	uxth	r3, r3
 8003238:	8013      	strh	r3, [r2, #0]
 800323a:	e0f6      	b.n	800342a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003260:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003286:	b29b      	uxth	r3, r3
 8003288:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 80ca 	bne.w	800342a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800329e:	441a      	add	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ac:	441a      	add	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d30b      	bcc.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ce:	1ad2      	subs	r2, r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	e017      	b.n	8003306 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d108      	bne.n	80032f0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80032de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032ee:	e00a      	b.n	8003306 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2200      	movs	r2, #0
 80032fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	657b      	str	r3, [r7, #84]	; 0x54
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d165      	bne.n	80033e0 <HAL_PCD_EP_DB_Transmit+0x748>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003328:	4413      	add	r3, r2
 800332a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00da      	lsls	r2, r3, #3
 8003332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003334:	4413      	add	r3, r2
 8003336:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800333a:	65bb      	str	r3, [r7, #88]	; 0x58
 800333c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003346:	b29a      	uxth	r2, r3
 8003348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334a:	801a      	strh	r2, [r3, #0]
 800334c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003350:	2b3e      	cmp	r3, #62	; 0x3e
 8003352:	d91d      	bls.n	8003390 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
 800335c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800336a:	3b01      	subs	r3, #1
 800336c:	66bb      	str	r3, [r7, #104]	; 0x68
 800336e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29a      	uxth	r2, r3
 8003374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003376:	b29b      	uxth	r3, r3
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	b29b      	uxth	r3, r3
 800337c:	4313      	orrs	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003388:	b29a      	uxth	r2, r3
 800338a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e041      	b.n	8003414 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <HAL_PCD_EP_DB_Transmit+0x716>
 8003398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	e032      	b.n	8003414 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_PCD_EP_DB_Transmit+0x730>
 80033c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c4:	3301      	adds	r3, #1
 80033c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	029b      	lsls	r3, r3, #10
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	e019      	b.n	8003414 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d115      	bne.n	8003414 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f6:	4413      	add	r3, r2
 80033f8:	657b      	str	r3, [r7, #84]	; 0x54
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	00da      	lsls	r2, r3, #3
 8003400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003402:	4413      	add	r3, r2
 8003404:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003408:	653b      	str	r3, [r7, #80]	; 0x50
 800340a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340e:	b29a      	uxth	r2, r3
 8003410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003412:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6959      	ldr	r1, [r3, #20]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	895a      	ldrh	r2, [r3, #10]
 8003420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003424:	b29b      	uxth	r3, r3
 8003426:	f005 fd7f 	bl	8008f28 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003444:	82bb      	strh	r3, [r7, #20]
 8003446:	8abb      	ldrh	r3, [r7, #20]
 8003448:	f083 0310 	eor.w	r3, r3, #16
 800344c:	82bb      	strh	r3, [r7, #20]
 800344e:	8abb      	ldrh	r3, [r7, #20]
 8003450:	f083 0320 	eor.w	r3, r3, #32
 8003454:	82bb      	strh	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	441a      	add	r2, r3
 8003464:	8abb      	ldrh	r3, [r7, #20]
 8003466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	b29b      	uxth	r3, r3
 8003478:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3790      	adds	r7, #144	; 0x90
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	817b      	strh	r3, [r7, #10]
 8003492:	4613      	mov	r3, r2
 8003494:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4413      	add	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e009      	b.n	80034ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ba:	897a      	ldrh	r2, [r7, #10]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2200      	movs	r2, #0
 80034d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	80da      	strh	r2, [r3, #6]
 80034e2:	e00b      	b.n	80034fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2201      	movs	r2, #1
 80034e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800352e:	b29b      	uxth	r3, r3
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003542:	b29b      	uxth	r3, r3
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	58000400 	.word	0x58000400

08003580 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <HAL_PWREx_GetVoltageRange+0x18>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	58000400 	.word	0x58000400

0800359c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035aa:	6053      	str	r3, [r2, #4]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	58000400 	.word	0x58000400

080035bc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ce:	d101      	bne.n	80035d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800360c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800362e:	d101      	bne.n	8003634 <LL_RCC_HSE_IsReady+0x18>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_RCC_HSE_IsReady+0x1a>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	6013      	str	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d101      	bne.n	8003694 <LL_RCC_HSI_IsReady+0x18>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <LL_RCC_HSI_IsReady+0x1a>
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80036e2:	bf00      	nop
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80036f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d101      	bne.n	8003726 <LL_RCC_HSI48_IsReady+0x18>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_RCC_HSI48_IsReady+0x1a>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003786:	f043 0304 	orr.w	r3, r3, #4
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800379c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d101      	bne.n	80037d2 <LL_RCC_LSE_IsReady+0x18>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <LL_RCC_LSE_IsReady+0x1a>
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d101      	bne.n	800383a <LL_RCC_LSI1_IsReady+0x18>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <LL_RCC_LSI1_IsReady+0x1a>
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d101      	bne.n	80038a2 <LL_RCC_LSI2_IsReady+0x18>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <LL_RCC_LSI2_IsReady+0x1a>
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6013      	str	r3, [r2, #0]
}
 800390e:	bf00      	nop
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800391c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d101      	bne.n	800392e <LL_RCC_MSI_IsReady+0x16>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <LL_RCC_MSI_IsReady+0x18>
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800394c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003972:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2bb0      	cmp	r3, #176	; 0xb0
 8003978:	d901      	bls.n	800397e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800397a:	23b0      	movs	r3, #176	; 0xb0
 800397c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800397e:	687b      	ldr	r3, [r7, #4]
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 0203 	bic.w	r2, r3, #3
 80039c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 030c 	and.w	r3, r3, #12
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80039fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	6013      	str	r3, [r2, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b4a:	d101      	bne.n	8003b50 <LL_RCC_PLL_IsReady+0x18>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <LL_RCC_PLL_IsReady+0x1a>
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d101      	bne.n	8003bd6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf6:	d101      	bne.n	8003bfc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d101      	bne.n	8003c22 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c40:	d101      	bne.n	8003c46 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c64:	d101      	bne.n	8003c6a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b08d      	sub	sp, #52	; 0x34
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e363      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 808d 	beq.w	8003db2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c98:	f7ff fea1 	bl	80039de <LL_RCC_GetSysClkSource>
 8003c9c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9e:	f7ff ff82 	bl	8003ba6 <LL_RCC_PLL_GetMainSource>
 8003ca2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x3e>
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d147      	bne.n	8003d40 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d144      	bne.n	8003d40 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e347      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003cc6:	f7ff fe4c 	bl	8003962 <LL_RCC_MSI_GetRange>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	429c      	cmp	r4, r3
 8003cce:	d914      	bls.n	8003cfa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fd05 	bl	80046e4 <RCC_SetFlashLatencyFromMSIRange>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e336      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fe26 	bl	800393a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fe4a 	bl	800398c <LL_RCC_MSI_SetCalibTrimming>
 8003cf8:	e013      	b.n	8003d22 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fe1b 	bl	800393a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fe3f 	bl	800398c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fce6 	bl	80046e4 <RCC_SetFlashLatencyFromMSIRange>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e317      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d22:	f000 fccb 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8003d26:	4603      	mov	r3, r0
 8003d28:	4aa4      	ldr	r2, [pc, #656]	; (8003fbc <HAL_RCC_OscConfig+0x344>)
 8003d2a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d2c:	4ba4      	ldr	r3, [pc, #656]	; (8003fc0 <HAL_RCC_OscConfig+0x348>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd f8c3 	bl	8000ebc <HAL_InitTick>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d039      	beq.n	8003db0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e308      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01e      	beq.n	8003d86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d48:	f7ff fdc8 	bl	80038dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f904 	bl	8000f58 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d54:	f7fd f900 	bl	8000f58 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e2f5      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d66:	f7ff fdd7 	bl	8003918 <LL_RCC_MSI_IsReady>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f1      	beq.n	8003d54 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fde0 	bl	800393a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fe04 	bl	800398c <LL_RCC_MSI_SetCalibTrimming>
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d86:	f7ff fdb8 	bl	80038fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d8a:	f7fd f8e5 	bl	8000f58 <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d92:	f7fd f8e1 	bl	8000f58 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e2d6      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003da4:	f7ff fdb8 	bl	8003918 <LL_RCC_MSI_IsReady>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f1      	bne.n	8003d92 <HAL_RCC_OscConfig+0x11a>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003db0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d047      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dbe:	f7ff fe0e 	bl	80039de <LL_RCC_GetSysClkSource>
 8003dc2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc4:	f7ff feef 	bl	8003ba6 <LL_RCC_PLL_GetMainSource>
 8003dc8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_OscConfig+0x164>
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d108      	bne.n	8003de8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d134      	bne.n	8003e4e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e2b4      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d102      	bne.n	8003df8 <HAL_RCC_OscConfig+0x180>
 8003df2:	f7ff fbf5 	bl	80035e0 <LL_RCC_HSE_Enable>
 8003df6:	e001      	b.n	8003dfc <HAL_RCC_OscConfig+0x184>
 8003df8:	f7ff fc01 	bl	80035fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d012      	beq.n	8003e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd f8a8 	bl	8000f58 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd f8a4 	bl	8000f58 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e299      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e1e:	f7ff fbfd 	bl	800361c <LL_RCC_HSE_IsReady>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f1      	beq.n	8003e0c <HAL_RCC_OscConfig+0x194>
 8003e28:	e011      	b.n	8003e4e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fd f895 	bl	8000f58 <HAL_GetTick>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e32:	f7fd f891 	bl	8000f58 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b64      	cmp	r3, #100	; 0x64
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e286      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e44:	f7ff fbea 	bl	800361c <LL_RCC_HSE_IsReady>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f1      	bne.n	8003e32 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d04c      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5a:	f7ff fdc0 	bl	80039de <LL_RCC_GetSysClkSource>
 8003e5e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e60:	f7ff fea1 	bl	8003ba6 <LL_RCC_PLL_GetMainSource>
 8003e64:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_OscConfig+0x200>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d10e      	bne.n	8003e90 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d10b      	bne.n	8003e90 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e266      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fc09 	bl	80036a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e8e:	e031      	b.n	8003ef4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d019      	beq.n	8003ecc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e98:	f7ff fbd2 	bl	8003640 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd f85c 	bl	8000f58 <HAL_GetTick>
 8003ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea4:	f7fd f858 	bl	8000f58 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e24d      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003eb6:	f7ff fbe1 	bl	800367c <LL_RCC_HSI_IsReady>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f1      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fbeb 	bl	80036a0 <LL_RCC_HSI_SetCalibTrimming>
 8003eca:	e013      	b.n	8003ef4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ecc:	f7ff fbc7 	bl	800365e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f842 	bl	8000f58 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd f83e 	bl	8000f58 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e233      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003eea:	f7ff fbc7 	bl	800367c <LL_RCC_HSI_IsReady>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f1      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a3 	beq.w	8004054 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d076      	beq.n	8004004 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d046      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003f22:	f7ff fc7e 	bl	8003822 <LL_RCC_LSI1_IsReady>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d113      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003f2c:	f7ff fc57 	bl	80037de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f30:	f7fd f812 	bl	8000f58 <HAL_GetTick>
 8003f34:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f38:	f7fd f80e 	bl	8000f58 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e203      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f4a:	f7ff fc6a 	bl	8003822 <LL_RCC_LSI1_IsReady>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f1      	beq.n	8003f38 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003f54:	f7ff fc77 	bl	8003846 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fc fffe 	bl	8000f58 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f60:	f7fc fffa 	bl	8000f58 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1ef      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f72:	f7ff fc8a 	bl	800388a <LL_RCC_LSI2_IsReady>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f1      	beq.n	8003f60 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fc94 	bl	80038ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003f86:	f7ff fc3b 	bl	8003800 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fc ffe5 	bl	8000f58 <HAL_GetTick>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f92:	f7fc ffe1 	bl	8000f58 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e1d6      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003fa4:	f7ff fc3d 	bl	8003822 <LL_RCC_LSI1_IsReady>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f1      	bne.n	8003f92 <HAL_RCC_OscConfig+0x31a>
 8003fae:	e051      	b.n	8004054 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003fb0:	f7ff fc15 	bl	80037de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fc ffd0 	bl	8000f58 <HAL_GetTick>
 8003fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003fba:	e00c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x35e>
 8003fbc:	2000000c 	.word	0x2000000c
 8003fc0:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fc4:	f7fc ffc8 	bl	8000f58 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1bd      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003fd6:	f7ff fc24 	bl	8003822 <LL_RCC_LSI1_IsReady>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f1      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003fe0:	f7ff fc42 	bl	8003868 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fe6:	f7fc ffb7 	bl	8000f58 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e1ac      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003ff8:	f7ff fc47 	bl	800388a <LL_RCC_LSI2_IsReady>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f1      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x36e>
 8004002:	e027      	b.n	8004054 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004004:	f7ff fc30 	bl	8003868 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fc ffa6 	bl	8000f58 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004010:	f7fc ffa2 	bl	8000f58 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e197      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004022:	f7ff fc32 	bl	800388a <LL_RCC_LSI2_IsReady>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f1      	bne.n	8004010 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800402c:	f7ff fbe8 	bl	8003800 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fc ff92 	bl	8000f58 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004038:	f7fc ff8e 	bl	8000f58 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e183      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800404a:	f7ff fbea 	bl	8003822 <LL_RCC_LSI1_IsReady>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f1      	bne.n	8004038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05b      	beq.n	8004118 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004060:	4ba7      	ldr	r3, [pc, #668]	; (8004300 <HAL_RCC_OscConfig+0x688>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d114      	bne.n	8004096 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800406c:	f7ff fa78 	bl	8003560 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004070:	f7fc ff72 	bl	8000f58 <HAL_GetTick>
 8004074:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004078:	f7fc ff6e 	bl	8000f58 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e163      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408a:	4b9d      	ldr	r3, [pc, #628]	; (8004300 <HAL_RCC_OscConfig+0x688>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d102      	bne.n	80040a4 <HAL_RCC_OscConfig+0x42c>
 800409e:	f7ff fb48 	bl	8003732 <LL_RCC_LSE_Enable>
 80040a2:	e00c      	b.n	80040be <HAL_RCC_OscConfig+0x446>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d104      	bne.n	80040b6 <HAL_RCC_OscConfig+0x43e>
 80040ac:	f7ff fb63 	bl	8003776 <LL_RCC_LSE_EnableBypass>
 80040b0:	f7ff fb3f 	bl	8003732 <LL_RCC_LSE_Enable>
 80040b4:	e003      	b.n	80040be <HAL_RCC_OscConfig+0x446>
 80040b6:	f7ff fb4d 	bl	8003754 <LL_RCC_LSE_Disable>
 80040ba:	f7ff fb6d 	bl	8003798 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d014      	beq.n	80040f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fc ff47 	bl	8000f58 <HAL_GetTick>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fc ff43 	bl	8000f58 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e136      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80040e4:	f7ff fb69 	bl	80037ba <LL_RCC_LSE_IsReady>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ef      	beq.n	80040ce <HAL_RCC_OscConfig+0x456>
 80040ee:	e013      	b.n	8004118 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fc ff32 	bl	8000f58 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80040f6:	e00a      	b.n	800410e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fc ff2e 	bl	8000f58 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e121      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800410e:	f7ff fb54 	bl	80037ba <LL_RCC_LSE_IsReady>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1ef      	bne.n	80040f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d02c      	beq.n	800417e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d014      	beq.n	8004156 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800412c:	f7ff facd 	bl	80036ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fc ff12 	bl	8000f58 <HAL_GetTick>
 8004134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004138:	f7fc ff0e 	bl	8000f58 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e103      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800414a:	f7ff fae0 	bl	800370e <LL_RCC_HSI48_IsReady>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f1      	beq.n	8004138 <HAL_RCC_OscConfig+0x4c0>
 8004154:	e013      	b.n	800417e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004156:	f7ff fac9 	bl	80036ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fc fefd 	bl	8000f58 <HAL_GetTick>
 800415e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004162:	f7fc fef9 	bl	8000f58 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0ee      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004174:	f7ff facb 	bl	800370e <LL_RCC_HSI48_IsReady>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f1      	bne.n	8004162 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80e4 	beq.w	8004350 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004188:	f7ff fc29 	bl	80039de <LL_RCC_GetSysClkSource>
 800418c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	2b02      	cmp	r3, #2
 800419c:	f040 80b4 	bne.w	8004308 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0203 	and.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d123      	bne.n	80041f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d11c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d114      	bne.n	80041f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d10d      	bne.n	80041f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d05d      	beq.n	80042b2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d058      	beq.n	80042ae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0a1      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800420e:	f7ff fc84 	bl	8003b1a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004212:	f7fc fea1 	bl	8000f58 <HAL_GetTick>
 8004216:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421a:	f7fc fe9d 	bl	8000f58 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e092      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ef      	bne.n	800421a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	4b30      	ldr	r3, [pc, #192]	; (8004304 <HAL_RCC_OscConfig+0x68c>)
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800424c:	4311      	orrs	r1, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004252:	0212      	lsls	r2, r2, #8
 8004254:	4311      	orrs	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800425a:	4311      	orrs	r1, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004260:	4311      	orrs	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004266:	430a      	orrs	r2, r1
 8004268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426c:	4313      	orrs	r3, r2
 800426e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004270:	f7ff fc44 	bl	8003afc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004284:	f7fc fe68 	bl	8000f58 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fc fe64 	bl	8000f58 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e059      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ef      	beq.n	800428c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ac:	e050      	b.n	8004350 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e04f      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d147      	bne.n	8004350 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042c0:	f7ff fc1c 	bl	8003afc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042d4:	f7fc fe40 	bl	8000f58 <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fc fe3c 	bl	8000f58 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e031      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ef      	beq.n	80042dc <HAL_RCC_OscConfig+0x664>
 80042fc:	e028      	b.n	8004350 <HAL_RCC_OscConfig+0x6d8>
 80042fe:	bf00      	nop
 8004300:	58000400 	.word	0x58000400
 8004304:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d01e      	beq.n	800434c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	f7ff fc04 	bl	8003b1a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fc fe21 	bl	8000f58 <HAL_GetTick>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431a:	f7fc fe1d 	bl	8000f58 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e012      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ef      	bne.n	800431a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_OscConfig+0x6e4>)
 8004346:	4013      	ands	r3, r2
 8004348:	60cb      	str	r3, [r1, #12]
 800434a:	e001      	b.n	8004350 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3734      	adds	r7, #52	; 0x34
 8004356:	46bd      	mov	sp, r7
 8004358:	bd90      	pop	{r4, r7, pc}
 800435a:	bf00      	nop
 800435c:	eefefffc 	.word	0xeefefffc

08004360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e12d      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004374:	4b98      	ldr	r3, [pc, #608]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d91b      	bls.n	80043ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b95      	ldr	r3, [pc, #596]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 0207 	bic.w	r2, r3, #7
 800438a:	4993      	ldr	r1, [pc, #588]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004392:	f7fc fde1 	bl	8000f58 <HAL_GetTick>
 8004396:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004398:	e008      	b.n	80043ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800439a:	f7fc fddd 	bl	8000f58 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e111      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ac:	4b8a      	ldr	r3, [pc, #552]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d1ef      	bne.n	800439a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fb13 	bl	80039f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043d0:	f7fc fdc2 	bl	8000f58 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043d8:	f7fc fdbe 	bl	8000f58 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0f2      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043ea:	f7ff fbe8 	bl	8003bbe <LL_RCC_IsActiveFlag_HPRE>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f1      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fb0a 	bl	8003a1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800440a:	f7fc fda5 	bl	8000f58 <HAL_GetTick>
 800440e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004412:	f7fc fda1 	bl	8000f58 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e0d5      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004424:	f7ff fbdd 	bl	8003be2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f1      	beq.n	8004412 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fb03 	bl	8003a4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004444:	f7fc fd88 	bl	8000f58 <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800444c:	f7fc fd84 	bl	8000f58 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0b8      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800445e:	f7ff fbd3 	bl	8003c08 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f1      	beq.n	800444c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d016      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fafd 	bl	8003a78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800447e:	f7fc fd6b 	bl	8000f58 <HAL_GetTick>
 8004482:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004486:	f7fc fd67 	bl	8000f58 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e09b      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004498:	f7ff fbc9 	bl	8003c2e <LL_RCC_IsActiveFlag_PPRE1>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f1      	beq.n	8004486 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d017      	beq.n	80044de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff faf3 	bl	8003aa0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044ba:	f7fc fd4d 	bl	8000f58 <HAL_GetTick>
 80044be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044c2:	f7fc fd49 	bl	8000f58 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e07d      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80044d4:	f7ff fbbd 	bl	8003c52 <LL_RCC_IsActiveFlag_PPRE2>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f1      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d043      	beq.n	8004572 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80044f2:	f7ff f893 	bl	800361c <LL_RCC_HSE_IsReady>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11e      	bne.n	800453a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e067      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d106      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004508:	f7ff fb16 	bl	8003b38 <LL_RCC_PLL_IsReady>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d113      	bne.n	800453a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e05c      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800451e:	f7ff f9fb 	bl	8003918 <LL_RCC_MSI_IsReady>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e051      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800452c:	f7ff f8a6 	bl	800367c <LL_RCC_HSI_IsReady>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e04a      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fa39 	bl	80039b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004544:	f7fc fd08 	bl	8000f58 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fc fd04 	bl	8000f58 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e036      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	f7ff fa3c 	bl	80039de <LL_RCC_GetSysClkSource>
 8004566:	4602      	mov	r2, r0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	429a      	cmp	r2, r3
 8004570:	d1ec      	bne.n	800454c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004572:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d21b      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 0207 	bic.w	r2, r3, #7
 8004588:	4913      	ldr	r1, [pc, #76]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fc fce2 	bl	8000f58 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	e008      	b.n	80045aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004598:	f7fc fcde 	bl	8000f58 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e012      	b.n	80045d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_ClockConfig+0x278>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1ef      	bne.n	8004598 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045b8:	f000 f880 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 80045bc:	4603      	mov	r3, r0
 80045be:	4a07      	ldr	r2, [pc, #28]	; (80045dc <HAL_RCC_ClockConfig+0x27c>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80045c2:	f7fc fcd5 	bl	8000f70 <HAL_GetTickPrio>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fc77 	bl	8000ebc <HAL_InitTick>
 80045ce:	4603      	mov	r3, r0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	58004000 	.word	0x58004000
 80045dc:	2000000c 	.word	0x2000000c

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e6:	f7ff f9fa 	bl	80039de <LL_RCC_GetSysClkSource>
 80045ea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80045f2:	f7ff f9b6 	bl	8003962 <LL_RCC_MSI_GetRange>
 80045f6:	4603      	mov	r3, r0
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	4a2b      	ldr	r2, [pc, #172]	; (80046ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e04b      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d102      	bne.n	8004614 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e045      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b08      	cmp	r3, #8
 8004618:	d10a      	bne.n	8004630 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800461a:	f7fe ffcf 	bl	80035bc <LL_RCC_HSE_IsEnabledDiv2>
 800461e:	4603      	mov	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d102      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004624:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e03a      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e037      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004630:	f7ff fab9 	bl	8003ba6 <LL_RCC_PLL_GetMainSource>
 8004634:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d003      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x64>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x6a>
 8004642:	e00d      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004646:	60bb      	str	r3, [r7, #8]
        break;
 8004648:	e015      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800464a:	f7fe ffb7 	bl	80035bc <LL_RCC_HSE_IsEnabledDiv2>
 800464e:	4603      	mov	r3, r0
 8004650:	2b01      	cmp	r3, #1
 8004652:	d102      	bne.n	800465a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004654:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004656:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004658:	e00d      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800465c:	60bb      	str	r3, [r7, #8]
        break;
 800465e:	e00a      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004660:	f7ff f97f 	bl	8003962 <LL_RCC_MSI_GetRange>
 8004664:	4603      	mov	r3, r0
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004672:	60bb      	str	r3, [r7, #8]
        break;
 8004674:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004676:	f7ff fa71 	bl	8003b5c <LL_RCC_PLL_GetN>
 800467a:	4602      	mov	r2, r0
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	fb03 f402 	mul.w	r4, r3, r2
 8004682:	f7ff fa84 	bl	8003b8e <LL_RCC_PLL_GetDivider>
 8004686:	4603      	mov	r3, r0
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	3301      	adds	r3, #1
 800468c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004690:	f7ff fa71 	bl	8003b76 <LL_RCC_PLL_GetR>
 8004694:	4603      	mov	r3, r0
 8004696:	0f5b      	lsrs	r3, r3, #29
 8004698:	3301      	adds	r3, #1
 800469a:	fbb4 f3f3 	udiv	r3, r4, r3
 800469e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80046a0:	68fb      	ldr	r3, [r7, #12]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd90      	pop	{r4, r7, pc}
 80046aa:	bf00      	nop
 80046ac:	0800ca90 	.word	0x0800ca90
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	003d0900 	.word	0x003d0900
 80046b8:	007a1200 	.word	0x007a1200

080046bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046bc:	b598      	push	{r3, r4, r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80046c0:	f7ff ff8e 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 80046c4:	4604      	mov	r4, r0
 80046c6:	f7ff f9ff 	bl	8003ac8 <LL_RCC_GetAHBPrescaler>
 80046ca:	4603      	mov	r3, r0
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	4a03      	ldr	r2, [pc, #12]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd98      	pop	{r3, r4, r7, pc}
 80046e0:	0800ca50 	.word	0x0800ca50

080046e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2bb0      	cmp	r3, #176	; 0xb0
 80046f0:	d903      	bls.n	80046fa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e007      	b.n	800470a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	4a11      	ldr	r2, [pc, #68]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800470a:	f7ff f9e9 	bl	8003ae0 <LL_RCC_GetAHB4Prescaler>
 800470e:	4603      	mov	r3, r0
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	4a0d      	ldr	r2, [pc, #52]	; (800474c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	0c9c      	lsrs	r4, r3, #18
 800472e:	f7fe ff27 	bl	8003580 <HAL_PWREx_GetVoltageRange>
 8004732:	4603      	mov	r3, r0
 8004734:	4619      	mov	r1, r3
 8004736:	4620      	mov	r0, r4
 8004738:	f000 f80c 	bl	8004754 <RCC_SetFlashLatency>
 800473c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}
 8004746:	bf00      	nop
 8004748:	0800ca90 	.word	0x0800ca90
 800474c:	0800ca50 	.word	0x0800ca50
 8004750:	431bde83 	.word	0x431bde83

08004754 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b093      	sub	sp, #76	; 0x4c
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <RCC_SetFlashLatency+0xe8>)
 8004760:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800476a:	4a35      	ldr	r2, [pc, #212]	; (8004840 <RCC_SetFlashLatency+0xec>)
 800476c:	f107 031c 	add.w	r3, r7, #28
 8004770:	ca07      	ldmia	r2, {r0, r1, r2}
 8004772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004776:	4b33      	ldr	r3, [pc, #204]	; (8004844 <RCC_SetFlashLatency+0xf0>)
 8004778:	f107 040c 	add.w	r4, r7, #12
 800477c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800477e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004782:	2300      	movs	r3, #0
 8004784:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478c:	d11a      	bne.n	80047c4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800478e:	2300      	movs	r3, #0
 8004790:	643b      	str	r3, [r7, #64]	; 0x40
 8004792:	e013      	b.n	80047bc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	3348      	adds	r3, #72	; 0x48
 800479a:	443b      	add	r3, r7
 800479c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d807      	bhi.n	80047b6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80047a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	3348      	adds	r3, #72	; 0x48
 80047ac:	443b      	add	r3, r7
 80047ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80047b4:	e020      	b.n	80047f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80047b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b8:	3301      	adds	r3, #1
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40
 80047bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d9e8      	bls.n	8004794 <RCC_SetFlashLatency+0x40>
 80047c2:	e019      	b.n	80047f8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c8:	e013      	b.n	80047f2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	3348      	adds	r3, #72	; 0x48
 80047d0:	443b      	add	r3, r7
 80047d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d807      	bhi.n	80047ec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80047dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	3348      	adds	r3, #72	; 0x48
 80047e2:	443b      	add	r3, r7
 80047e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80047ea:	e005      	b.n	80047f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ee:	3301      	adds	r3, #1
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d9e8      	bls.n	80047ca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <RCC_SetFlashLatency+0xf4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 0207 	bic.w	r2, r3, #7
 8004800:	4911      	ldr	r1, [pc, #68]	; (8004848 <RCC_SetFlashLatency+0xf4>)
 8004802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004808:	f7fc fba6 	bl	8000f58 <HAL_GetTick>
 800480c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800480e:	e008      	b.n	8004822 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004810:	f7fc fba2 	bl	8000f58 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e007      	b.n	8004832 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <RCC_SetFlashLatency+0xf4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800482c:	429a      	cmp	r2, r3
 800482e:	d1ef      	bne.n	8004810 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	374c      	adds	r7, #76	; 0x4c
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}
 800483a:	bf00      	nop
 800483c:	0800c9dc 	.word	0x0800c9dc
 8004840:	0800c9ec 	.word	0x0800c9ec
 8004844:	0800c9f8 	.word	0x0800c9f8
 8004848:	58004000 	.word	0x58004000

0800484c <LL_RCC_LSE_IsEnabled>:
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <LL_RCC_LSE_IsEnabled+0x18>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <LL_RCC_LSE_IsEnabled+0x1a>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_RCC_LSE_IsReady>:
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d101      	bne.n	8004888 <LL_RCC_LSE_IsReady+0x18>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <LL_RCC_LSE_IsReady+0x1a>
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_RCC_MSI_EnablePLLMode>:
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	6013      	str	r3, [r2, #0]
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <LL_RCC_SetRFWKPClockSource>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_SetSMPSClockSource>:
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f023 0203 	bic.w	r2, r3, #3
 80048f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <LL_RCC_SetSMPSPrescaler>:
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4313      	orrs	r3, r2
 8004920:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_RCC_SetUSARTClockSource>:
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f023 0203 	bic.w	r2, r3, #3
 8004942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_RCC_SetLPUARTClockSource>:
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800496e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_RCC_SetI2CClockSource>:
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800498e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800499e:	43db      	mvns	r3, r3
 80049a0:	401a      	ands	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_RCC_SetLPTIMClockSource>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	43db      	mvns	r3, r3
 80049d8:	401a      	ands	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_RCC_SetSAIClockSource>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_RCC_SetRNGClockSource>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_SetCLK48ClockSource>:
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_RCC_SetUSBClockSource>:
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ffe3 	bl	8004a4c <LL_RCC_SetCLK48ClockSource>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <LL_RCC_SetADCClockSource>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_RCC_SetRTCClockSource>:
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_GetRTCClockSource>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_RCC_ForceBackupDomainReset>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_RCC_PLLSAI1_Enable>:
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_RCC_PLLSAI1_Disable>:
{
 8004b62:	b480      	push	{r7}
 8004b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b74:	6013      	str	r3, [r2, #0]
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_RCC_PLLSAI1_IsReady>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b92:	d101      	bne.n	8004b98 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004bac:	2300      	movs	r3, #0
 8004bae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d034      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bc8:	d021      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bce:	d81b      	bhi.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd4:	d01d      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bda:	d815      	bhi.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be4:	d110      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004bf6:	e00d      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 f94d 	bl	8004e9c <RCCEx_PLLSAI1_ConfigNP>
 8004c02:	4603      	mov	r3, r0
 8004c04:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c06:	e005      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	77fb      	strb	r3, [r7, #31]
        break;
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e000      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c14:	7ffb      	ldrb	r3, [r7, #31]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fee8 	bl	80049f4 <LL_RCC_SetSAIClockSource>
 8004c24:	e001      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
 8004c28:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d046      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004c36:	f7ff ff56 	bl	8004ae6 <LL_RCC_GetRTCClockSource>
 8004c3a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d03c      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c46:	f7fe fc8b 	bl	8003560 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff30 	bl	8004aba <LL_RCC_SetRTCClockSource>
 8004c5a:	e02e      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004c66:	f7ff ff4b 	bl	8004b00 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004c6a:	f7ff ff5a 	bl	8004b22 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004c86:	f7ff fde1 	bl	800484c <LL_RCC_LSE_IsEnabled>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d114      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c90:	f7fc f962 	bl	8000f58 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c98:	f7fc f95e 	bl	8000f58 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d902      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	77fb      	strb	r3, [r7, #31]
              break;
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004cb0:	f7ff fdde 	bl	8004870 <LL_RCC_LSE_IsReady>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d1ee      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004cba:	7ffb      	ldrb	r3, [r7, #31]
 8004cbc:	77bb      	strb	r3, [r7, #30]
 8004cbe:	e001      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7ffb      	ldrb	r3, [r7, #31]
 8004cc2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fe2a 	bl	800492e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fe35 	bl	800495a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fe5d 	bl	80049c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fe52 	bl	80049c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fe2a 	bl	8004986 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fe1f 	bl	8004986 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d022      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fe8d 	bl	8004a78 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d66:	d107      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d76:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8e3 	bl	8004f52 <RCCEx_PLLSAI1_ConfigNQ>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004d96:	7ffb      	ldrb	r3, [r7, #31]
 8004d98:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d02b      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fe2a 	bl	8004a20 <LL_RCC_SetRNGClockSource>
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7ff fe21 	bl	8004a20 <LL_RCC_SetRNGClockSource>
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fe34 	bl	8004a4c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004dec:	d107      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dfc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d022      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fe3d 	bl	8004a8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e1c:	d107      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e36:	d10b      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f8e3 	bl	8005008 <RCCEx_PLLSAI1_ConfigNR>
 8004e42:	4603      	mov	r3, r0
 8004e44:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004e4c:	7ffb      	ldrb	r3, [r7, #31]
 8004e4e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fd26 	bl	80048b2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fd45 	bl	8004906 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fd2c 	bl	80048de <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004e86:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004e94:	f7ff fcfe 	bl	8004894 <LL_RCC_MSI_EnablePLLMode>
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ea8:	f7ff fe5b 	bl	8004b62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004eac:	f7fc f854 	bl	8000f58 <HAL_GetTick>
 8004eb0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004eb2:	e009      	b.n	8004ec8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb4:	f7fc f850 	bl	8000f58 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec6:	e004      	b.n	8004ed2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ec8:	f7ff fe5a 	bl	8004b80 <LL_RCC_PLLSAI1_IsReady>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d137      	bne.n	8004f48 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eec:	4313      	orrs	r3, r2
 8004eee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f02:	4313      	orrs	r3, r2
 8004f04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f06:	f7ff fe1d 	bl	8004b44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fc f825 	bl	8000f58 <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f10:	e009      	b.n	8004f26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f12:	f7fc f821 	bl	8000f58 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d902      	bls.n	8004f26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	73fb      	strb	r3, [r7, #15]
        break;
 8004f24:	e004      	b.n	8004f30 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f26:	f7ff fe2b 	bl	8004b80 <LL_RCC_PLLSAI1_IsReady>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d1f0      	bne.n	8004f12 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d108      	bne.n	8004f48 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f44:	4313      	orrs	r3, r2
 8004f46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f5e:	f7ff fe00 	bl	8004b62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f62:	f7fb fff9 	bl	8000f58 <HAL_GetTick>
 8004f66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f68:	e009      	b.n	8004f7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6a:	f7fb fff5 	bl	8000f58 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d902      	bls.n	8004f7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7c:	e004      	b.n	8004f88 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f7e:	f7ff fdff 	bl	8004b80 <LL_RCC_PLLSAI1_IsReady>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d137      	bne.n	8004ffe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fbc:	f7ff fdc2 	bl	8004b44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc0:	f7fb ffca 	bl	8000f58 <HAL_GetTick>
 8004fc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fc6:	e009      	b.n	8004fdc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fc8:	f7fb ffc6 	bl	8000f58 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d902      	bls.n	8004fdc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004fda:	e004      	b.n	8004fe6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fdc:	f7ff fdd0 	bl	8004b80 <LL_RCC_PLLSAI1_IsReady>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d1f0      	bne.n	8004fc8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005014:	f7ff fda5 	bl	8004b62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005018:	f7fb ff9e 	bl	8000f58 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005020:	f7fb ff9a 	bl	8000f58 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	e004      	b.n	800503e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005034:	f7ff fda4 	bl	8004b80 <LL_RCC_PLLSAI1_IsReady>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d137      	bne.n	80050b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005058:	4313      	orrs	r3, r2
 800505a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506e:	4313      	orrs	r3, r2
 8005070:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005072:	f7ff fd67 	bl	8004b44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005076:	f7fb ff6f 	bl	8000f58 <HAL_GetTick>
 800507a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800507c:	e009      	b.n	8005092 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800507e:	f7fb ff6b 	bl	8000f58 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d902      	bls.n	8005092 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	73fb      	strb	r3, [r7, #15]
        break;
 8005090:	e004      	b.n	800509c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005092:	f7ff fd75 	bl	8004b80 <LL_RCC_PLLSAI1_IsReady>
 8005096:	4603      	mov	r3, r0
 8005098:	2b01      	cmp	r3, #1
 800509a:	d1f0      	bne.n	800507e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d108      	bne.n	80050b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e049      	b.n	8005164 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fb fcdf 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f000 ff71 	bl	8005fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e049      	b.n	8005212 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f841 	bl	800521a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f000 ff1a 	bl	8005fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e03c      	b.n	80052d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b04      	cmp	r3, #4
 8005260:	d109      	bne.n	8005276 <HAL_TIM_PWM_Start_DMA+0x46>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e02f      	b.n	80052d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start_DMA+0x60>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e022      	b.n	80052d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d109      	bne.n	80052aa <HAL_TIM_PWM_Start_DMA+0x7a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e015      	b.n	80052d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d109      	bne.n	80052c4 <HAL_TIM_PWM_Start_DMA+0x94>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e008      	b.n	80052d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
 80052dc:	e188      	b.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e03c      	b.n	8005372 <HAL_TIM_PWM_Start_DMA+0x142>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d109      	bne.n	8005312 <HAL_TIM_PWM_Start_DMA+0xe2>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e02f      	b.n	8005372 <HAL_TIM_PWM_Start_DMA+0x142>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d109      	bne.n	800532c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e022      	b.n	8005372 <HAL_TIM_PWM_Start_DMA+0x142>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d109      	bne.n	8005346 <HAL_TIM_PWM_Start_DMA+0x116>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b01      	cmp	r3, #1
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	e015      	b.n	8005372 <HAL_TIM_PWM_Start_DMA+0x142>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b10      	cmp	r3, #16
 800534a:	d109      	bne.n	8005360 <HAL_TIM_PWM_Start_DMA+0x130>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e008      	b.n	8005372 <HAL_TIM_PWM_Start_DMA+0x142>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d034      	beq.n	80053e0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_TIM_PWM_Start_DMA+0x152>
 800537c:	887b      	ldrh	r3, [r7, #2]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e134      	b.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start_DMA+0x166>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	e026      	b.n	80053e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start_DMA+0x176>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	e01e      	b.n	80053e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start_DMA+0x186>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b4:	e016      	b.n	80053e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start_DMA+0x196>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c4:	e00e      	b.n	80053e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	e006      	b.n	80053e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053de:	e001      	b.n	80053e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e105      	b.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }

  switch (Channel)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	f200 80ae 	bhi.w	8005548 <HAL_TIM_PWM_Start_DMA+0x318>
 80053ec:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005429 	.word	0x08005429
 80053f8:	08005549 	.word	0x08005549
 80053fc:	08005549 	.word	0x08005549
 8005400:	08005549 	.word	0x08005549
 8005404:	08005471 	.word	0x08005471
 8005408:	08005549 	.word	0x08005549
 800540c:	08005549 	.word	0x08005549
 8005410:	08005549 	.word	0x08005549
 8005414:	080054b9 	.word	0x080054b9
 8005418:	08005549 	.word	0x08005549
 800541c:	08005549 	.word	0x08005549
 8005420:	08005549 	.word	0x08005549
 8005424:	08005501 	.word	0x08005501
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	4a72      	ldr	r2, [pc, #456]	; (80055f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	4a71      	ldr	r2, [pc, #452]	; (80055fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005436:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	4a70      	ldr	r2, [pc, #448]	; (8005600 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800543e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3334      	adds	r3, #52	; 0x34
 800544c:	461a      	mov	r2, r3
 800544e:	887b      	ldrh	r3, [r7, #2]
 8005450:	f7fb ff76 	bl	8001340 <HAL_DMA_Start_IT>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e0c8      	b.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546c:	60da      	str	r2, [r3, #12]
      break;
 800546e:	e06e      	b.n	800554e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	4a60      	ldr	r2, [pc, #384]	; (80055f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	4a5f      	ldr	r2, [pc, #380]	; (80055fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800547e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	4a5e      	ldr	r2, [pc, #376]	; (8005600 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3338      	adds	r3, #56	; 0x38
 8005494:	461a      	mov	r2, r3
 8005496:	887b      	ldrh	r3, [r7, #2]
 8005498:	f7fb ff52 	bl	8001340 <HAL_DMA_Start_IT>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e0a4      	b.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054b4:	60da      	str	r2, [r3, #12]
      break;
 80054b6:	e04a      	b.n	800554e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a4e      	ldr	r2, [pc, #312]	; (80055f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	4a4d      	ldr	r2, [pc, #308]	; (80055fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4a4c      	ldr	r2, [pc, #304]	; (8005600 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80054ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	333c      	adds	r3, #60	; 0x3c
 80054dc:	461a      	mov	r2, r3
 80054de:	887b      	ldrh	r3, [r7, #2]
 80054e0:	f7fb ff2e 	bl	8001340 <HAL_DMA_Start_IT>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e080      	b.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fc:	60da      	str	r2, [r3, #12]
      break;
 80054fe:	e026      	b.n	800554e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	4a3c      	ldr	r2, [pc, #240]	; (80055f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	4a3b      	ldr	r2, [pc, #236]	; (80055fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800550e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	4a3a      	ldr	r2, [pc, #232]	; (8005600 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005516:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3340      	adds	r3, #64	; 0x40
 8005524:	461a      	mov	r2, r3
 8005526:	887b      	ldrh	r3, [r7, #2]
 8005528:	f7fb ff0a 	bl	8001340 <HAL_DMA_Start_IT>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e05c      	b.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005544:	60da      	str	r2, [r3, #12]
      break;
 8005546:	e002      	b.n	800554e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
      break;
 800554c:	bf00      	nop
  }

  if (status == HAL_OK)
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d14c      	bne.n	80055ee <HAL_TIM_PWM_Start_DMA+0x3be>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2201      	movs	r2, #1
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f8bf 	bl	80066e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_TIM_PWM_Start_DMA+0x350>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a25      	ldr	r2, [pc, #148]	; (8005608 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIM_PWM_Start_DMA+0x350>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a24      	ldr	r2, [pc, #144]	; (800560c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <HAL_TIM_PWM_Start_DMA+0x354>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_TIM_PWM_Start_DMA+0x356>
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a19      	ldr	r2, [pc, #100]	; (8005604 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIM_PWM_Start_DMA+0x37e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ac:	d115      	bne.n	80055da <HAL_TIM_PWM_Start_DMA+0x3aa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d015      	beq.n	80055ec <HAL_TIM_PWM_Start_DMA+0x3bc>
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c6:	d011      	beq.n	80055ec <HAL_TIM_PWM_Start_DMA+0x3bc>
      {
        __HAL_TIM_ENABLE(htim);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	e008      	b.n	80055ec <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e000      	b.n	80055ee <HAL_TIM_PWM_Start_DMA+0x3be>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	08005ed5 	.word	0x08005ed5
 80055fc:	08005f7d 	.word	0x08005f7d
 8005600:	08005e43 	.word	0x08005e43
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800
 8005610:	00010007 	.word	0x00010007

08005614 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b0c      	cmp	r3, #12
 8005626:	d855      	bhi.n	80056d4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005665 	.word	0x08005665
 8005634:	080056d5 	.word	0x080056d5
 8005638:	080056d5 	.word	0x080056d5
 800563c:	080056d5 	.word	0x080056d5
 8005640:	08005681 	.word	0x08005681
 8005644:	080056d5 	.word	0x080056d5
 8005648:	080056d5 	.word	0x080056d5
 800564c:	080056d5 	.word	0x080056d5
 8005650:	0800569d 	.word	0x0800569d
 8005654:	080056d5 	.word	0x080056d5
 8005658:	080056d5 	.word	0x080056d5
 800565c:	080056d5 	.word	0x080056d5
 8005660:	080056b9 	.word	0x080056b9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005672:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	4618      	mov	r0, r3
 800567a:	f7fb fedc 	bl	8001436 <HAL_DMA_Abort_IT>
      break;
 800567e:	e02c      	b.n	80056da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	4618      	mov	r0, r3
 8005696:	f7fb fece 	bl	8001436 <HAL_DMA_Abort_IT>
      break;
 800569a:	e01e      	b.n	80056da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fb fec0 	bl	8001436 <HAL_DMA_Abort_IT>
      break;
 80056b6:	e010      	b.n	80056da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fb feb2 	bl	8001436 <HAL_DMA_Abort_IT>
      break;
 80056d2:	e002      	b.n	80056da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      break;
 80056d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d176      	bne.n	80057ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2200      	movs	r2, #0
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fff9 	bl	80066e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a39      	ldr	r2, [pc, #228]	; (80057d8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a37      	ldr	r2, [pc, #220]	; (80057dc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a36      	ldr	r2, [pc, #216]	; (80057e0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d101      	bne.n	8005710 <HAL_TIM_PWM_Stop_DMA+0xfc>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	f240 4344 	movw	r3, #1092	; 0x444
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	f240 4344 	movw	r3, #1092	; 0x444
 8005760:	4013      	ands	r3, r2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Stop_DMA+0x172>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005784:	e023      	b.n	80057ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Stop_DMA+0x182>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005794:	e01b      	b.n	80057ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Stop_DMA+0x192>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	e013      	b.n	80057ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057b4:	e00b      	b.n	80057ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c4:	e003      	b.n	80057ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800

080057e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0202 	mvn.w	r2, #2
 8005810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fae3 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fad5 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fa fdc3 	bl	80003c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b04      	cmp	r3, #4
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0204 	mvn.w	r2, #4
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fab9 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 faab 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fa fd99 	bl	80003c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0208 	mvn.w	r2, #8
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2204      	movs	r2, #4
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa8f 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa81 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fa fd6f 	bl	80003c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b10      	cmp	r3, #16
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0210 	mvn.w	r2, #16
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2208      	movs	r2, #8
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa65 	bl	8005df2 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa57 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fa fd45 	bl	80003c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0201 	mvn.w	r2, #1
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb f840 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 ffc6 	bl	8006920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a2:	d10e      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d107      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 ffb9 	bl	8006934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d10e      	bne.n	80059ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa16 	bl	8005e1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d10e      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d107      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0220 	mvn.w	r2, #32
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 ff79 	bl	800690c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e0ff      	b.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b14      	cmp	r3, #20
 8005a4e:	f200 80f0 	bhi.w	8005c32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a52:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005aad 	.word	0x08005aad
 8005a5c:	08005c33 	.word	0x08005c33
 8005a60:	08005c33 	.word	0x08005c33
 8005a64:	08005c33 	.word	0x08005c33
 8005a68:	08005aed 	.word	0x08005aed
 8005a6c:	08005c33 	.word	0x08005c33
 8005a70:	08005c33 	.word	0x08005c33
 8005a74:	08005c33 	.word	0x08005c33
 8005a78:	08005b2f 	.word	0x08005b2f
 8005a7c:	08005c33 	.word	0x08005c33
 8005a80:	08005c33 	.word	0x08005c33
 8005a84:	08005c33 	.word	0x08005c33
 8005a88:	08005b6f 	.word	0x08005b6f
 8005a8c:	08005c33 	.word	0x08005c33
 8005a90:	08005c33 	.word	0x08005c33
 8005a94:	08005c33 	.word	0x08005c33
 8005a98:	08005bb1 	.word	0x08005bb1
 8005a9c:	08005c33 	.word	0x08005c33
 8005aa0:	08005c33 	.word	0x08005c33
 8005aa4:	08005c33 	.word	0x08005c33
 8005aa8:	08005bf1 	.word	0x08005bf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fafa 	bl	80060ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0208 	orr.w	r2, r2, #8
 8005ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0204 	bic.w	r2, r2, #4
 8005ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6999      	ldr	r1, [r3, #24]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	619a      	str	r2, [r3, #24]
      break;
 8005aea:	e0a5      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb56 	bl	80061a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	021a      	lsls	r2, r3, #8
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	619a      	str	r2, [r3, #24]
      break;
 8005b2c:	e084      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fbaf 	bl	8006298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0208 	orr.w	r2, r2, #8
 8005b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0204 	bic.w	r2, r2, #4
 8005b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69d9      	ldr	r1, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	61da      	str	r2, [r3, #28]
      break;
 8005b6c:	e064      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fc07 	bl	8006388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69d9      	ldr	r1, [r3, #28]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	021a      	lsls	r2, r3, #8
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	61da      	str	r2, [r3, #28]
      break;
 8005bae:	e043      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fc44 	bl	8006444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0208 	orr.w	r2, r2, #8
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0204 	bic.w	r2, r2, #4
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bee:	e023      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fc7c 	bl	80064f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c30:	e002      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	75fb      	strb	r3, [r7, #23]
      break;
 8005c36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop

08005c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_ConfigClockSource+0x1c>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e0b6      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x18a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca4:	d03e      	beq.n	8005d24 <HAL_TIM_ConfigClockSource+0xd8>
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005caa:	f200 8087 	bhi.w	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb2:	f000 8086 	beq.w	8005dc2 <HAL_TIM_ConfigClockSource+0x176>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	d87f      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cbc:	2b70      	cmp	r3, #112	; 0x70
 8005cbe:	d01a      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xaa>
 8005cc0:	2b70      	cmp	r3, #112	; 0x70
 8005cc2:	d87b      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cc4:	2b60      	cmp	r3, #96	; 0x60
 8005cc6:	d050      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x11e>
 8005cc8:	2b60      	cmp	r3, #96	; 0x60
 8005cca:	d877      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005ccc:	2b50      	cmp	r3, #80	; 0x50
 8005cce:	d03c      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0xfe>
 8005cd0:	2b50      	cmp	r3, #80	; 0x50
 8005cd2:	d873      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d058      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x13e>
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	d86f      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cdc:	2b30      	cmp	r3, #48	; 0x30
 8005cde:	d064      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005ce0:	2b30      	cmp	r3, #48	; 0x30
 8005ce2:	d86b      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d060      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d867      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05c      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d05a      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15e>
 8005cf4:	e062      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f000 fccb 	bl	80066a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	609a      	str	r2, [r3, #8]
      break;
 8005d22:	e04f      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6899      	ldr	r1, [r3, #8]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f000 fcb4 	bl	80066a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d46:	609a      	str	r2, [r3, #8]
      break;
 8005d48:	e03c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 fc26 	bl	80065a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2150      	movs	r1, #80	; 0x50
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fc7f 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e02c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f000 fc45 	bl	8006606 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2160      	movs	r1, #96	; 0x60
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fc6f 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005d88:	e01c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f000 fc06 	bl	80065a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2140      	movs	r1, #64	; 0x40
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc5f 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005da8:	e00c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f000 fc56 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005dba:	e003      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc0:	e000      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d107      	bne.n	8005e6a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e68:	e02a      	b.n	8005ec0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d107      	bne.n	8005e84 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2202      	movs	r2, #2
 8005e78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e82:	e01d      	b.n	8005ec0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d107      	bne.n	8005e9e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2204      	movs	r2, #4
 8005e92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9c:	e010      	b.n	8005ec0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d107      	bne.n	8005eb8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2208      	movs	r2, #8
 8005eac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eb6:	e003      	b.n	8005ec0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ffb4 	bl	8005e2e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d10b      	bne.n	8005f04 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d136      	bne.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f02:	e031      	b.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d10b      	bne.n	8005f26 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2202      	movs	r2, #2
 8005f12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d125      	bne.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f24:	e020      	b.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d10b      	bne.n	8005f48 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2204      	movs	r2, #4
 8005f34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d114      	bne.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f46:	e00f      	b.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d10a      	bne.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2208      	movs	r2, #8
 8005f56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d103      	bne.n	8005f68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7fa fa29 	bl	80003c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d103      	bne.n	8005f9c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	771a      	strb	r2, [r3, #28]
 8005f9a:	e019      	b.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d103      	bne.n	8005fae <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	771a      	strb	r2, [r3, #28]
 8005fac:	e010      	b.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d103      	bne.n	8005fc0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2204      	movs	r2, #4
 8005fbc:	771a      	strb	r2, [r3, #28]
 8005fbe:	e007      	b.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d102      	bne.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff ff18 	bl	8005e06 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <TIM_Base_SetConfig+0xbc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x20>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <TIM_Base_SetConfig+0xbc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_Base_SetConfig+0x52>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d007      	beq.n	8006036 <TIM_Base_SetConfig+0x52>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <TIM_Base_SetConfig+0xc0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_Base_SetConfig+0x52>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a1d      	ldr	r2, [pc, #116]	; (80060a8 <TIM_Base_SetConfig+0xc4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d108      	bne.n	8006048 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <TIM_Base_SetConfig+0xbc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d007      	beq.n	8006084 <TIM_Base_SetConfig+0xa0>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a0b      	ldr	r2, [pc, #44]	; (80060a4 <TIM_Base_SetConfig+0xc0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0xa0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a0a      	ldr	r2, [pc, #40]	; (80060a8 <TIM_Base_SetConfig+0xc4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d103      	bne.n	800608c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	615a      	str	r2, [r3, #20]
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800

080060ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0303 	bic.w	r3, r3, #3
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 0302 	bic.w	r3, r3, #2
 80060f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a24      	ldr	r2, [pc, #144]	; (8006198 <TIM_OC1_SetConfig+0xec>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_OC1_SetConfig+0x70>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a23      	ldr	r2, [pc, #140]	; (800619c <TIM_OC1_SetConfig+0xf0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC1_SetConfig+0x70>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a22      	ldr	r2, [pc, #136]	; (80061a0 <TIM_OC1_SetConfig+0xf4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10c      	bne.n	8006136 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0308 	bic.w	r3, r3, #8
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a17      	ldr	r2, [pc, #92]	; (8006198 <TIM_OC1_SetConfig+0xec>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_OC1_SetConfig+0xa2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <TIM_OC1_SetConfig+0xf4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC1_SetConfig+0xa2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <TIM_OC1_SetConfig+0xf0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40014800 	.word	0x40014800
 80061a0:	40014400 	.word	0x40014400

080061a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0210 	bic.w	r2, r3, #16
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0320 	bic.w	r3, r3, #32
 80061f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a22      	ldr	r2, [pc, #136]	; (800628c <TIM_OC2_SetConfig+0xe8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10d      	bne.n	8006224 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a19      	ldr	r2, [pc, #100]	; (800628c <TIM_OC2_SetConfig+0xe8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <TIM_OC2_SetConfig+0x98>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a18      	ldr	r2, [pc, #96]	; (8006290 <TIM_OC2_SetConfig+0xec>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_OC2_SetConfig+0x98>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a17      	ldr	r2, [pc, #92]	; (8006294 <TIM_OC2_SetConfig+0xf0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d113      	bne.n	8006264 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800

08006298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a21      	ldr	r2, [pc, #132]	; (800637c <TIM_OC3_SetConfig+0xe4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d10d      	bne.n	8006316 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a18      	ldr	r2, [pc, #96]	; (800637c <TIM_OC3_SetConfig+0xe4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_OC3_SetConfig+0x96>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a17      	ldr	r2, [pc, #92]	; (8006380 <TIM_OC3_SetConfig+0xe8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_OC3_SetConfig+0x96>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a16      	ldr	r2, [pc, #88]	; (8006384 <TIM_OC3_SetConfig+0xec>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d113      	bne.n	8006356 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800

08006388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <TIM_OC4_SetConfig+0xb0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_OC4_SetConfig+0x74>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a13      	ldr	r2, [pc, #76]	; (800643c <TIM_OC4_SetConfig+0xb4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC4_SetConfig+0x74>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a12      	ldr	r2, [pc, #72]	; (8006440 <TIM_OC4_SetConfig+0xb8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d109      	bne.n	8006410 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800

08006444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <TIM_OC5_SetConfig+0xa4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_OC5_SetConfig+0x6a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a12      	ldr	r2, [pc, #72]	; (80064ec <TIM_OC5_SetConfig+0xa8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC5_SetConfig+0x6a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a11      	ldr	r2, [pc, #68]	; (80064f0 <TIM_OC5_SetConfig+0xac>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d109      	bne.n	80064c2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40014400 	.word	0x40014400
 80064f0:	40014800 	.word	0x40014800

080064f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800653a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	051b      	lsls	r3, r3, #20
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a14      	ldr	r2, [pc, #80]	; (800659c <TIM_OC6_SetConfig+0xa8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC6_SetConfig+0x6c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <TIM_OC6_SetConfig+0xac>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC6_SetConfig+0x6c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a12      	ldr	r2, [pc, #72]	; (80065a4 <TIM_OC6_SetConfig+0xb0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d109      	bne.n	8006574 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	029b      	lsls	r3, r3, #10
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800

080065a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f023 030a 	bic.w	r3, r3, #10
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0210 	bic.w	r2, r3, #16
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	031b      	lsls	r3, r3, #12
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	f043 0307 	orr.w	r3, r3, #7
 800668c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	021a      	lsls	r2, r3, #8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	2201      	movs	r2, #1
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1a      	ldr	r2, [r3, #32]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	43db      	mvns	r3, r3
 8006702:	401a      	ands	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1a      	ldr	r2, [r3, #32]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	fa01 f303 	lsl.w	r3, r1, r3
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006740:	2302      	movs	r3, #2
 8006742:	e04a      	b.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d108      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006774:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a12      	ldr	r2, [pc, #72]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d10c      	bne.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00

080067ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006804:	2302      	movs	r3, #2
 8006806:	e078      	b.n	80068fa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	041b      	lsls	r3, r3, #16
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a20      	ldr	r2, [pc, #128]	; (8006908 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d106      	bne.n	800689a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d121      	bne.n	80068e8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	051b      	lsls	r3, r3, #20
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d106      	bne.n	80068e8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00

0800690c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006958:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800695c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800697e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006982:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	b29b      	uxth	r3, r3
 8006990:	43db      	mvns	r3, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	4013      	ands	r3, r2
 8006996:	b29a      	uxth	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069ac:	b084      	sub	sp, #16
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	f107 0014 	add.w	r0, r7, #20
 80069ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	b004      	add	sp, #16
 80069ec:	4770      	bx	lr
	...

080069f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b09d      	sub	sp, #116	; 0x74
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	78db      	ldrb	r3, [r3, #3]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d81f      	bhi.n	8006a62 <USB_ActivateEndpoint+0x72>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <USB_ActivateEndpoint+0x38>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a6b 	.word	0x08006a6b
 8006a34:	08006a47 	.word	0x08006a47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a44:	e012      	b.n	8006a6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a52:	e00b      	b.n	8006a6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a60:	e004      	b.n	8006a6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006a68:	e000      	b.n	8006a6c <USB_ActivateEndpoint+0x7c>
      break;
 8006a6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	441a      	add	r2, r3
 8006a76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	b21b      	sxth	r3, r3
 8006a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa6:	b21a      	sxth	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b21b      	sxth	r3, r3
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	441a      	add	r2, r3
 8006ac0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f040 8178 	bne.w	8006dd2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8084 	beq.w	8006bf4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	4413      	add	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	00da      	lsls	r2, r3, #3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	88db      	ldrh	r3, [r3, #6]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	827b      	strh	r3, [r7, #18]
 8006b2e:	8a7b      	ldrh	r3, [r7, #18]
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01b      	beq.n	8006b70 <USB_ActivateEndpoint+0x180>
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	823b      	strh	r3, [r7, #16]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	8a3b      	ldrh	r3, [r7, #16]
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	78db      	ldrb	r3, [r3, #3]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d020      	beq.n	8006bba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8e:	81bb      	strh	r3, [r7, #12]
 8006b90:	89bb      	ldrh	r3, [r7, #12]
 8006b92:	f083 0320 	eor.w	r3, r3, #32
 8006b96:	81bb      	strh	r3, [r7, #12]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	89bb      	ldrh	r3, [r7, #12]
 8006ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]
 8006bb8:	e2d5      	b.n	8007166 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd0:	81fb      	strh	r3, [r7, #14]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
 8006bf2:	e2b8      	b.n	8007166 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	4413      	add	r3, r2
 8006c06:	633b      	str	r3, [r7, #48]	; 0x30
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00da      	lsls	r2, r3, #3
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	4413      	add	r3, r2
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	00da      	lsls	r2, r3, #3
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b3e      	cmp	r3, #62	; 0x3e
 8006c62:	d91d      	bls.n	8006ca0 <USB_ActivateEndpoint+0x2b0>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <USB_ActivateEndpoint+0x28e>
 8006c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	e026      	b.n	8006cee <USB_ActivateEndpoint+0x2fe>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <USB_ActivateEndpoint+0x2ce>
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e017      	b.n	8006cee <USB_ActivateEndpoint+0x2fe>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <USB_ActivateEndpoint+0x2e8>
 8006cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	029b      	lsls	r3, r3, #10
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8006cfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01b      	beq.n	8006d3e <USB_ActivateEndpoint+0x34e>
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1c:	843b      	strh	r3, [r7, #32]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	441a      	add	r2, r3
 8006d28:	8c3b      	ldrh	r3, [r7, #32]
 8006d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d124      	bne.n	8006d90 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5c:	83bb      	strh	r3, [r7, #28]
 8006d5e:	8bbb      	ldrh	r3, [r7, #28]
 8006d60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d64:	83bb      	strh	r3, [r7, #28]
 8006d66:	8bbb      	ldrh	r3, [r7, #28]
 8006d68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d6c:	83bb      	strh	r3, [r7, #28]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	441a      	add	r2, r3
 8006d78:	8bbb      	ldrh	r3, [r7, #28]
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]
 8006d8e:	e1ea      	b.n	8007166 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	83fb      	strh	r3, [r7, #30]
 8006da8:	8bfb      	ldrh	r3, [r7, #30]
 8006daa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dae:	83fb      	strh	r3, [r7, #30]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8bfb      	ldrh	r3, [r7, #30]
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
 8006dd0:	e1c9      	b.n	8007166 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	78db      	ldrb	r3, [r3, #3]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d11e      	bne.n	8006e18 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	8013      	strh	r3, [r2, #0]
 8006e16:	e01d      	b.n	8006e54 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e64:	4413      	add	r3, r2
 8006e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00da      	lsls	r2, r3, #3
 8006e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	891b      	ldrh	r3, [r3, #8]
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e98:	4413      	add	r3, r2
 8006e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	00da      	lsls	r2, r3, #3
 8006ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	895b      	ldrh	r3, [r3, #10]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 8093 	bne.w	8006fec <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ed6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01b      	beq.n	8006f1a <USB_ActivateEndpoint+0x52a>
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	441a      	add	r2, r3
 8006f04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006f28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01b      	beq.n	8006f6a <USB_ActivateEndpoint+0x57a>
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f80:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f88:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f90:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	441a      	add	r2, r3
 8006f9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	441a      	add	r2, r3
 8006fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	8013      	strh	r3, [r2, #0]
 8006fea:	e0bc      	b.n	8007166 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ffc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01d      	beq.n	8007044 <USB_ActivateEndpoint+0x654>
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007054:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01d      	beq.n	800709c <USB_ActivateEndpoint+0x6ac>
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	441a      	add	r2, r3
 8007084:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800708c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007094:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007098:	b29b      	uxth	r3, r3
 800709a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d024      	beq.n	80070ee <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070c2:	f083 0320 	eor.w	r3, r3, #32
 80070c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	441a      	add	r2, r3
 80070d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	8013      	strh	r3, [r2, #0]
 80070ec:	e01d      	b.n	800712a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007104:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	441a      	add	r2, r3
 8007112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007126:	b29b      	uxth	r3, r3
 8007128:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	441a      	add	r2, r3
 800714e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007162:	b29b      	uxth	r3, r3
 8007164:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007166:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800716a:	4618      	mov	r0, r3
 800716c:	3774      	adds	r7, #116	; 0x74
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop

08007178 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b08d      	sub	sp, #52	; 0x34
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	7b1b      	ldrb	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 808e 	bne.w	80072a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d044      	beq.n	800721e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	81bb      	strh	r3, [r7, #12]
 80071a2:	89bb      	ldrh	r3, [r7, #12]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01b      	beq.n	80071e4 <USB_DeactivateEndpoint+0x6c>
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c2:	817b      	strh	r3, [r7, #10]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	897b      	ldrh	r3, [r7, #10]
 80071d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fa:	813b      	strh	r3, [r7, #8]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007218:	b29b      	uxth	r3, r3
 800721a:	8013      	strh	r3, [r2, #0]
 800721c:	e192      	b.n	8007544 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	827b      	strh	r3, [r7, #18]
 800722c:	8a7b      	ldrh	r3, [r7, #18]
 800722e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01b      	beq.n	800726e <USB_DeactivateEndpoint+0xf6>
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	823b      	strh	r3, [r7, #16]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	8a3b      	ldrh	r3, [r7, #16]
 800725a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	b29b      	uxth	r3, r3
 800726c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	81fb      	strh	r3, [r7, #14]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	89fb      	ldrh	r3, [r7, #14]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
 80072a6:	e14d      	b.n	8007544 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 80a5 	bne.w	80073fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	843b      	strh	r3, [r7, #32]
 80072c0:	8c3b      	ldrh	r3, [r7, #32]
 80072c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01b      	beq.n	8007302 <USB_DeactivateEndpoint+0x18a>
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e0:	83fb      	strh	r3, [r7, #30]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	441a      	add	r2, r3
 80072ec:	8bfb      	ldrh	r3, [r7, #30]
 80072ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	83bb      	strh	r3, [r7, #28]
 8007310:	8bbb      	ldrh	r3, [r7, #28]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01b      	beq.n	8007352 <USB_DeactivateEndpoint+0x1da>
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007330:	837b      	strh	r3, [r7, #26]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	8b7b      	ldrh	r3, [r7, #26]
 800733e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800734e:	b29b      	uxth	r3, r3
 8007350:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007368:	833b      	strh	r3, [r7, #24]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	8b3b      	ldrh	r3, [r7, #24]
 8007376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	82fb      	strh	r3, [r7, #22]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	8afb      	ldrh	r3, [r7, #22]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d8:	82bb      	strh	r3, [r7, #20]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	8abb      	ldrh	r3, [r7, #20]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
 80073fa:	e0a3      	b.n	8007544 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800740a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800740c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01b      	beq.n	800744c <USB_DeactivateEndpoint+0x2d4>
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	857b      	strh	r3, [r7, #42]	; 0x2a
 800745a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800745c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01b      	beq.n	800749c <USB_DeactivateEndpoint+0x324>
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	853b      	strh	r3, [r7, #40]	; 0x28
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007494:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007498:	b29b      	uxth	r3, r3
 800749a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	441a      	add	r2, r3
 80074f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	b29b      	uxth	r3, r3
 800750a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	847b      	strh	r3, [r7, #34]	; 0x22
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3734      	adds	r7, #52	; 0x34
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b0c2      	sub	sp, #264	; 0x108
 8007556:	af00      	add	r7, sp, #0
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007560:	6018      	str	r0, [r3, #0]
 8007562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b01      	cmp	r3, #1
 800757a:	f040 86b7 	bne.w	80082ec <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	429a      	cmp	r2, r3
 8007598:	d908      	bls.n	80075ac <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800759a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075aa:	e007      	b.n	80075bc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80075ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	7b1b      	ldrb	r3, [r3, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d13a      	bne.n	8007642 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6959      	ldr	r1, [r3, #20]
 80075d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	88da      	ldrh	r2, [r3, #6]
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075f2:	6800      	ldr	r0, [r0, #0]
 80075f4:	f001 fc98 	bl	8008f28 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	4413      	add	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	00da      	lsls	r2, r3, #3
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4413      	add	r3, r2
 800762e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	f000 be1f 	b.w	8008280 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	78db      	ldrb	r3, [r3, #3]
 800764e:	2b02      	cmp	r3, #2
 8007650:	f040 8462 	bne.w	8007f18 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6a1a      	ldr	r2, [r3, #32]
 8007660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	429a      	cmp	r2, r3
 800766e:	f240 83df 	bls.w	8007e30 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800769c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	441a      	add	r2, r3
 80076b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80076c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 81c7 	beq.w	8007aa2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	633b      	str	r3, [r7, #48]	; 0x30
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d177      	bne.n	8007820 <USB_EPStartXfer+0x2ce>
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	62bb      	str	r3, [r7, #40]	; 0x28
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	4413      	add	r3, r2
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
 8007754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	00da      	lsls	r2, r3, #3
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	4413      	add	r3, r2
 8007766:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007776:	b29a      	uxth	r2, r3
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007780:	2b3e      	cmp	r3, #62	; 0x3e
 8007782:	d921      	bls.n	80077c8 <USB_EPStartXfer+0x276>
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <USB_EPStartXfer+0x252>
 800779a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800779e:	3b01      	subs	r3, #1
 80077a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	029b      	lsls	r3, r3, #10
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	e050      	b.n	800786a <USB_EPStartXfer+0x318>
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <USB_EPStartXfer+0x294>
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077de:	b29a      	uxth	r2, r3
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e041      	b.n	800786a <USB_EPStartXfer+0x318>
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <USB_EPStartXfer+0x2b4>
 80077fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007800:	3301      	adds	r3, #1
 8007802:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29a      	uxth	r2, r3
 800780c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007810:	b29b      	uxth	r3, r3
 8007812:	029b      	lsls	r3, r3, #10
 8007814:	b29b      	uxth	r3, r3
 8007816:	4313      	orrs	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	e024      	b.n	800786a <USB_EPStartXfer+0x318>
 8007820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d11c      	bne.n	800786a <USB_EPStartXfer+0x318>
 8007830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783e:	b29b      	uxth	r3, r3
 8007840:	461a      	mov	r2, r3
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	4413      	add	r3, r2
 8007846:	633b      	str	r3, [r7, #48]	; 0x30
 8007848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	00da      	lsls	r2, r3, #3
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	4413      	add	r3, r2
 800785a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007864:	b29a      	uxth	r2, r3
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	895b      	ldrh	r3, [r3, #10]
 8007876:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800787a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6959      	ldr	r1, [r3, #20]
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788a:	b29b      	uxth	r3, r3
 800788c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007890:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007894:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007898:	6800      	ldr	r0, [r0, #0]
 800789a:	f001 fb45 	bl	8008f28 <USB_WritePMA>
            ep->xfer_buff += len;
 800789e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695a      	ldr	r2, [r3, #20]
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ae:	441a      	add	r2, r3
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6a1a      	ldr	r2, [r3, #32]
 80078c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d90f      	bls.n	80078f8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80078d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e8:	1ad2      	subs	r2, r2, r3
 80078ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	621a      	str	r2, [r3, #32]
 80078f6:	e00e      	b.n	8007916 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d177      	bne.n	8007a16 <USB_EPStartXfer+0x4c4>
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	4413      	add	r3, r2
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	00da      	lsls	r2, r3, #3
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	4413      	add	r3, r2
 800795c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800796c:	b29a      	uxth	r2, r3
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	2b3e      	cmp	r3, #62	; 0x3e
 8007978:	d921      	bls.n	80079be <USB_EPStartXfer+0x46c>
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <USB_EPStartXfer+0x448>
 8007990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007994:	3b01      	subs	r3, #1
 8007996:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29a      	uxth	r2, r3
 80079a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	029b      	lsls	r3, r3, #10
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4313      	orrs	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	e056      	b.n	8007a6c <USB_EPStartXfer+0x51a>
 80079be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <USB_EPStartXfer+0x48a>
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e047      	b.n	8007a6c <USB_EPStartXfer+0x51a>
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <USB_EPStartXfer+0x4aa>
 80079f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079f6:	3301      	adds	r3, #1
 80079f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	029b      	lsls	r3, r3, #10
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e02a      	b.n	8007a6c <USB_EPStartXfer+0x51a>
 8007a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d122      	bne.n	8007a6c <USB_EPStartXfer+0x51a>
 8007a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	623b      	str	r3, [r7, #32]
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	4413      	add	r3, r2
 8007a48:	623b      	str	r3, [r7, #32]
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	00da      	lsls	r2, r3, #3
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	891b      	ldrh	r3, [r3, #8]
 8007a78:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6959      	ldr	r1, [r3, #20]
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a92:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a96:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	f001 fa44 	bl	8008f28 <USB_WritePMA>
 8007aa0:	e3ee      	b.n	8008280 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d177      	bne.n	8007ba2 <USB_EPStartXfer+0x650>
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad2:	4413      	add	r3, r2
 8007ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007aec:	647b      	str	r3, [r7, #68]	; 0x44
 8007aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b02:	2b3e      	cmp	r3, #62	; 0x3e
 8007b04:	d921      	bls.n	8007b4a <USB_EPStartXfer+0x5f8>
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <USB_EPStartXfer+0x5d4>
 8007b1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b20:	3b01      	subs	r3, #1
 8007b22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	029b      	lsls	r3, r3, #10
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4313      	orrs	r3, r2
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b46:	801a      	strh	r2, [r3, #0]
 8007b48:	e056      	b.n	8007bf8 <USB_EPStartXfer+0x6a6>
 8007b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <USB_EPStartXfer+0x616>
 8007b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	e047      	b.n	8007bf8 <USB_EPStartXfer+0x6a6>
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <USB_EPStartXfer+0x636>
 8007b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b82:	3301      	adds	r3, #1
 8007b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	029b      	lsls	r3, r3, #10
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e02a      	b.n	8007bf8 <USB_EPStartXfer+0x6a6>
 8007ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d122      	bne.n	8007bf8 <USB_EPStartXfer+0x6a6>
 8007bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd2:	4413      	add	r3, r2
 8007bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	00da      	lsls	r2, r3, #3
 8007be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be6:	4413      	add	r3, r2
 8007be8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	891b      	ldrh	r3, [r3, #8]
 8007c04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6959      	ldr	r1, [r3, #20]
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	f001 f97e 	bl	8008f28 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	695a      	ldr	r2, [r3, #20]
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3c:	441a      	add	r2, r3
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6a1a      	ldr	r2, [r3, #32]
 8007c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d90f      	bls.n	8007c86 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6a1a      	ldr	r2, [r3, #32]
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	621a      	str	r2, [r3, #32]
 8007c84:	e00e      	b.n	8007ca4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d177      	bne.n	8007db0 <USB_EPStartXfer+0x85e>
 8007cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	4413      	add	r3, r2
 8007ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	00da      	lsls	r2, r3, #3
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0a:	801a      	strh	r2, [r3, #0]
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d10:	2b3e      	cmp	r3, #62	; 0x3e
 8007d12:	d921      	bls.n	8007d58 <USB_EPStartXfer+0x806>
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d104      	bne.n	8007d34 <USB_EPStartXfer+0x7e2>
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	029b      	lsls	r3, r3, #10
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	4313      	orrs	r3, r2
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	801a      	strh	r2, [r3, #0]
 8007d56:	e050      	b.n	8007dfa <USB_EPStartXfer+0x8a8>
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <USB_EPStartXfer+0x824>
 8007d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	e041      	b.n	8007dfa <USB_EPStartXfer+0x8a8>
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <USB_EPStartXfer+0x844>
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	029b      	lsls	r3, r3, #10
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	4313      	orrs	r3, r2
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	e024      	b.n	8007dfa <USB_EPStartXfer+0x8a8>
 8007db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d11c      	bne.n	8007dfa <USB_EPStartXfer+0x8a8>
 8007dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd4:	4413      	add	r3, r2
 8007dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	00da      	lsls	r2, r3, #3
 8007de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de8:	4413      	add	r3, r2
 8007dea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	895b      	ldrh	r3, [r3, #10]
 8007e06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6959      	ldr	r1, [r3, #20]
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e28:	6800      	ldr	r0, [r0, #0]
 8007e2a:	f001 f87d 	bl	8008f28 <USB_WritePMA>
 8007e2e:	e227      	b.n	8008280 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	441a      	add	r2, r3
 8007e84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ebc:	4413      	add	r3, r2
 8007ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	00da      	lsls	r2, r3, #3
 8007ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ee0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	891b      	ldrh	r3, [r3, #8]
 8007eee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6959      	ldr	r1, [r3, #20]
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f10:	6800      	ldr	r0, [r0, #0]
 8007f12:	f001 f809 	bl	8008f28 <USB_WritePMA>
 8007f16:	e1b3      	b.n	8008280 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6a1a      	ldr	r2, [r3, #32]
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80c6 	beq.w	80080ea <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	673b      	str	r3, [r7, #112]	; 0x70
 8007f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d177      	bne.n	800806a <USB_EPStartXfer+0xb18>
 8007f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f9a:	4413      	add	r3, r2
 8007f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	00da      	lsls	r2, r3, #3
 8007fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fae:	4413      	add	r3, r2
 8007fb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fca:	2b3e      	cmp	r3, #62	; 0x3e
 8007fcc:	d921      	bls.n	8008012 <USB_EPStartXfer+0xac0>
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <USB_EPStartXfer+0xa9c>
 8007fe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	029b      	lsls	r3, r3, #10
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800a:	b29a      	uxth	r2, r3
 800800c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800e:	801a      	strh	r2, [r3, #0]
 8008010:	e050      	b.n	80080b4 <USB_EPStartXfer+0xb62>
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <USB_EPStartXfer+0xade>
 800801a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008028:	b29a      	uxth	r2, r3
 800802a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802c:	801a      	strh	r2, [r3, #0]
 800802e:	e041      	b.n	80080b4 <USB_EPStartXfer+0xb62>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USB_EPStartXfer+0xafe>
 8008046:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800804a:	3301      	adds	r3, #1
 800804c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800805a:	b29b      	uxth	r3, r3
 800805c:	029b      	lsls	r3, r3, #10
 800805e:	b29b      	uxth	r3, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	b29a      	uxth	r2, r3
 8008064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	e024      	b.n	80080b4 <USB_EPStartXfer+0xb62>
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d11c      	bne.n	80080b4 <USB_EPStartXfer+0xb62>
 800807a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800807e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008088:	b29b      	uxth	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800808e:	4413      	add	r3, r2
 8008090:	673b      	str	r3, [r7, #112]	; 0x70
 8008092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	00da      	lsls	r2, r3, #3
 80080a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a2:	4413      	add	r3, r2
 80080a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80080b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	895b      	ldrh	r3, [r3, #10]
 80080c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6959      	ldr	r1, [r3, #20]
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080e2:	6800      	ldr	r0, [r0, #0]
 80080e4:	f000 ff20 	bl	8008f28 <USB_WritePMA>
 80080e8:	e0ca      	b.n	8008280 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d177      	bne.n	80081ea <USB_EPStartXfer+0xc98>
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008114:	b29b      	uxth	r3, r3
 8008116:	461a      	mov	r2, r3
 8008118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800811a:	4413      	add	r3, r2
 800811c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800811e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	00da      	lsls	r2, r3, #3
 800812c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800812e:	4413      	add	r3, r2
 8008130:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008134:	67bb      	str	r3, [r7, #120]	; 0x78
 8008136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008140:	b29a      	uxth	r2, r3
 8008142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814a:	2b3e      	cmp	r3, #62	; 0x3e
 800814c:	d921      	bls.n	8008192 <USB_EPStartXfer+0xc40>
 800814e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008152:	095b      	lsrs	r3, r3, #5
 8008154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815c:	f003 031f 	and.w	r3, r3, #31
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <USB_EPStartXfer+0xc1c>
 8008164:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008168:	3b01      	subs	r3, #1
 800816a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800816e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29a      	uxth	r2, r3
 8008174:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008178:	b29b      	uxth	r3, r3
 800817a:	029b      	lsls	r3, r3, #10
 800817c:	b29b      	uxth	r3, r3
 800817e:	4313      	orrs	r3, r2
 8008180:	b29b      	uxth	r3, r3
 8008182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818a:	b29a      	uxth	r2, r3
 800818c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800818e:	801a      	strh	r2, [r3, #0]
 8008190:	e05c      	b.n	800824c <USB_EPStartXfer+0xcfa>
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <USB_EPStartXfer+0xc5e>
 800819a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	e04d      	b.n	800824c <USB_EPStartXfer+0xcfa>
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <USB_EPStartXfer+0xc7e>
 80081c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081ca:	3301      	adds	r3, #1
 80081cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081da:	b29b      	uxth	r3, r3
 80081dc:	029b      	lsls	r3, r3, #10
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4313      	orrs	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	e030      	b.n	800824c <USB_EPStartXfer+0xcfa>
 80081ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d128      	bne.n	800824c <USB_EPStartXfer+0xcfa>
 80081fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008216:	b29b      	uxth	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800821e:	4413      	add	r3, r2
 8008220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	00da      	lsls	r2, r3, #3
 8008232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008236:	4413      	add	r3, r2
 8008238:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800823c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008244:	b29a      	uxth	r2, r3
 8008246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800824a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800824c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	891b      	ldrh	r3, [r3, #8]
 8008258:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6959      	ldr	r1, [r3, #20]
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826c:	b29b      	uxth	r3, r3
 800826e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008272:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008276:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800827a:	6800      	ldr	r0, [r0, #0]
 800827c:	f000 fe54 	bl	8008f28 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a6:	817b      	strh	r3, [r7, #10]
 80082a8:	897b      	ldrh	r3, [r7, #10]
 80082aa:	f083 0310 	eor.w	r3, r3, #16
 80082ae:	817b      	strh	r3, [r7, #10]
 80082b0:	897b      	ldrh	r3, [r7, #10]
 80082b2:	f083 0320 	eor.w	r3, r3, #32
 80082b6:	817b      	strh	r3, [r7, #10]
 80082b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	441a      	add	r2, r3
 80082d2:	897b      	ldrh	r3, [r7, #10]
 80082d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	8013      	strh	r3, [r2, #0]
 80082e8:	f000 bcde 	b.w	8008ca8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	7b1b      	ldrb	r3, [r3, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f040 80bb 	bne.w	8008474 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80082fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	429a      	cmp	r2, r3
 8008318:	d917      	bls.n	800834a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800831a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800832a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833a:	1ad2      	subs	r2, r2, r3
 800833c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	619a      	str	r2, [r3, #24]
 8008348:	e00e      	b.n	8008368 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800834a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2200      	movs	r2, #0
 8008366:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008384:	b29b      	uxth	r3, r3
 8008386:	461a      	mov	r2, r3
 8008388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800838c:	4413      	add	r3, r2
 800838e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	00da      	lsls	r2, r3, #3
 80083a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083a4:	4413      	add	r3, r2
 80083a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80083ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c6:	2b3e      	cmp	r3, #62	; 0x3e
 80083c8:	d924      	bls.n	8008414 <USB_EPStartXfer+0xec2>
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d8:	f003 031f 	and.w	r3, r3, #31
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <USB_EPStartXfer+0xe98>
 80083e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083e4:	3b01      	subs	r3, #1
 80083e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	029b      	lsls	r3, r3, #10
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	b29b      	uxth	r3, r3
 8008400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008408:	b29a      	uxth	r2, r3
 800840a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800840e:	801a      	strh	r2, [r3, #0]
 8008410:	f000 bc10 	b.w	8008c34 <USB_EPStartXfer+0x16e2>
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10c      	bne.n	8008436 <USB_EPStartXfer+0xee4>
 800841c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800842c:	b29a      	uxth	r2, r3
 800842e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008432:	801a      	strh	r2, [r3, #0]
 8008434:	e3fe      	b.n	8008c34 <USB_EPStartXfer+0x16e2>
 8008436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <USB_EPStartXfer+0xf04>
 800844c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008450:	3301      	adds	r3, #1
 8008452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29a      	uxth	r2, r3
 800845e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008462:	b29b      	uxth	r3, r3
 8008464:	029b      	lsls	r3, r3, #10
 8008466:	b29b      	uxth	r3, r3
 8008468:	4313      	orrs	r3, r2
 800846a:	b29a      	uxth	r2, r3
 800846c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e3df      	b.n	8008c34 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	78db      	ldrb	r3, [r3, #3]
 8008480:	2b02      	cmp	r3, #2
 8008482:	f040 8218 	bne.w	80088b6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 809d 	bne.w	80085d2 <USB_EPStartXfer+0x1080>
 8008498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084bc:	4413      	add	r3, r2
 80084be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	00da      	lsls	r2, r3, #3
 80084d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084d4:	4413      	add	r3, r2
 80084d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008500:	d92b      	bls.n	800855a <USB_EPStartXfer+0x1008>
 8008502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f003 031f 	and.w	r3, r3, #31
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <USB_EPStartXfer+0xfe0>
 8008528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852c:	3b01      	subs	r3, #1
 800852e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29a      	uxth	r2, r3
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	b29b      	uxth	r3, r3
 8008540:	029b      	lsls	r3, r3, #10
 8008542:	b29b      	uxth	r3, r3
 8008544:	4313      	orrs	r3, r2
 8008546:	b29b      	uxth	r3, r3
 8008548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008550:	b29a      	uxth	r2, r3
 8008552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008556:	801a      	strh	r2, [r3, #0]
 8008558:	e070      	b.n	800863c <USB_EPStartXfer+0x10ea>
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10c      	bne.n	8008584 <USB_EPStartXfer+0x1032>
 800856a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b29b      	uxth	r3, r3
 8008572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800857a:	b29a      	uxth	r2, r3
 800857c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	e05b      	b.n	800863c <USB_EPStartXfer+0x10ea>
 8008584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <USB_EPStartXfer+0x1062>
 80085aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ae:	3301      	adds	r3, #1
 80085b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	029b      	lsls	r3, r3, #10
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	e034      	b.n	800863c <USB_EPStartXfer+0x10ea>
 80085d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d12c      	bne.n	800863c <USB_EPStartXfer+0x10ea>
 80085e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085fe:	b29b      	uxth	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008606:	4413      	add	r3, r2
 8008608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800860c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	00da      	lsls	r2, r3, #3
 800861a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800861e:	4413      	add	r3, r2
 8008620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	b29a      	uxth	r2, r3
 8008636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800864a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 809d 	bne.w	8008796 <USB_EPStartXfer+0x1244>
 800865c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800866a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008678:	b29b      	uxth	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008680:	4413      	add	r3, r2
 8008682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	00da      	lsls	r2, r3, #3
 8008694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008698:	4413      	add	r3, r2
 800869a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800869e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b4:	801a      	strh	r2, [r3, #0]
 80086b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b3e      	cmp	r3, #62	; 0x3e
 80086c4:	d92b      	bls.n	800871e <USB_EPStartXfer+0x11cc>
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <USB_EPStartXfer+0x11a4>
 80086ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f0:	3b01      	subs	r3, #1
 80086f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29b      	uxth	r3, r3
 8008708:	4313      	orrs	r3, r2
 800870a:	b29b      	uxth	r3, r3
 800870c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008714:	b29a      	uxth	r2, r3
 8008716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800871a:	801a      	strh	r2, [r3, #0]
 800871c:	e069      	b.n	80087f2 <USB_EPStartXfer+0x12a0>
 800871e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10c      	bne.n	8008748 <USB_EPStartXfer+0x11f6>
 800872e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29b      	uxth	r3, r3
 8008736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800873e:	b29a      	uxth	r2, r3
 8008740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008744:	801a      	strh	r2, [r3, #0]
 8008746:	e054      	b.n	80087f2 <USB_EPStartXfer+0x12a0>
 8008748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	085b      	lsrs	r3, r3, #1
 8008756:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800875a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d004      	beq.n	8008778 <USB_EPStartXfer+0x1226>
 800876e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008772:	3301      	adds	r3, #1
 8008774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	b29a      	uxth	r2, r3
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008784:	b29b      	uxth	r3, r3
 8008786:	029b      	lsls	r3, r3, #10
 8008788:	b29b      	uxth	r3, r3
 800878a:	4313      	orrs	r3, r2
 800878c:	b29a      	uxth	r2, r3
 800878e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	e02d      	b.n	80087f2 <USB_EPStartXfer+0x12a0>
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d125      	bne.n	80087f2 <USB_EPStartXfer+0x12a0>
 80087a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087bc:	4413      	add	r3, r2
 80087be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80087c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	00da      	lsls	r2, r3, #3
 80087d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087d4:	4413      	add	r3, r2
 80087d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 8218 	beq.w	8008c34 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008824:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d005      	beq.n	800883c <USB_EPStartXfer+0x12ea>
 8008830:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10d      	bne.n	8008858 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800883c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008844:	2b00      	cmp	r3, #0
 8008846:	f040 81f5 	bne.w	8008c34 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800884a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800884e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	f040 81ee 	bne.w	8008c34 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	441a      	add	r2, r3
 800889c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80088a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	8013      	strh	r3, [r2, #0]
 80088b4:	e1be      	b.n	8008c34 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80088b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	78db      	ldrb	r3, [r3, #3]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	f040 81b4 	bne.w	8008c30 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80088c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	699a      	ldr	r2, [r3, #24]
 80088d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d917      	bls.n	8008914 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80088e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008904:	1ad2      	subs	r2, r2, r3
 8008906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	619a      	str	r2, [r3, #24]
 8008912:	e00e      	b.n	8008932 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2200      	movs	r2, #0
 8008930:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b00      	cmp	r3, #0
 8008940:	f040 8085 	bne.w	8008a4e <USB_EPStartXfer+0x14fc>
 8008944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008960:	b29b      	uxth	r3, r3
 8008962:	461a      	mov	r2, r3
 8008964:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008968:	4413      	add	r3, r2
 800896a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800896e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	00da      	lsls	r2, r3, #3
 800897c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008980:	4413      	add	r3, r2
 8008982:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800898a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008996:	b29a      	uxth	r2, r3
 8008998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a2:	2b3e      	cmp	r3, #62	; 0x3e
 80089a4:	d923      	bls.n	80089ee <USB_EPStartXfer+0x149c>
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b4:	f003 031f 	and.w	r3, r3, #31
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d104      	bne.n	80089c6 <USB_EPStartXfer+0x1474>
 80089bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c0:	3b01      	subs	r3, #1
 80089c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	029b      	lsls	r3, r3, #10
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4313      	orrs	r3, r2
 80089da:	b29b      	uxth	r3, r3
 80089dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	e060      	b.n	8008ab0 <USB_EPStartXfer+0x155e>
 80089ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10c      	bne.n	8008a10 <USB_EPStartXfer+0x14be>
 80089f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	e04f      	b.n	8008ab0 <USB_EPStartXfer+0x155e>
 8008a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a14:	085b      	lsrs	r3, r3, #1
 8008a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <USB_EPStartXfer+0x14de>
 8008a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	029b      	lsls	r3, r3, #10
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4313      	orrs	r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a4a:	801a      	strh	r2, [r3, #0]
 8008a4c:	e030      	b.n	8008ab0 <USB_EPStartXfer+0x155e>
 8008a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	785b      	ldrb	r3, [r3, #1]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d128      	bne.n	8008ab0 <USB_EPStartXfer+0x155e>
 8008a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a82:	4413      	add	r3, r2
 8008a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	00da      	lsls	r2, r3, #3
 8008a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f040 8085 	bne.w	8008bda <USB_EPStartXfer+0x1688>
 8008ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008af4:	4413      	add	r3, r2
 8008af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	00da      	lsls	r2, r3, #3
 8008b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b30:	d923      	bls.n	8008b7a <USB_EPStartXfer+0x1628>
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b40:	f003 031f 	and.w	r3, r3, #31
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d104      	bne.n	8008b52 <USB_EPStartXfer+0x1600>
 8008b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	029b      	lsls	r3, r3, #10
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4313      	orrs	r3, r2
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b76:	801a      	strh	r2, [r3, #0]
 8008b78:	e05c      	b.n	8008c34 <USB_EPStartXfer+0x16e2>
 8008b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10c      	bne.n	8008b9c <USB_EPStartXfer+0x164a>
 8008b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b98:	801a      	strh	r2, [r3, #0]
 8008b9a:	e04b      	b.n	8008c34 <USB_EPStartXfer+0x16e2>
 8008b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba0:	085b      	lsrs	r3, r3, #1
 8008ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <USB_EPStartXfer+0x166a>
 8008bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	029b      	lsls	r3, r3, #10
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bd6:	801a      	strh	r2, [r3, #0]
 8008bd8:	e02c      	b.n	8008c34 <USB_EPStartXfer+0x16e2>
 8008bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d124      	bne.n	8008c34 <USB_EPStartXfer+0x16e2>
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c00:	4413      	add	r3, r2
 8008c02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	00da      	lsls	r2, r3, #3
 8008c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c18:	4413      	add	r3, r2
 8008c1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c2c:	801a      	strh	r2, [r3, #0]
 8008c2e:	e001      	b.n	8008c34 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e03a      	b.n	8008caa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	441a      	add	r2, r3
 8008c90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d020      	beq.n	8008d08 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cdc:	81bb      	strh	r3, [r7, #12]
 8008cde:	89bb      	ldrh	r3, [r7, #12]
 8008ce0:	f083 0310 	eor.w	r3, r3, #16
 8008ce4:	81bb      	strh	r3, [r7, #12]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	441a      	add	r2, r3
 8008cf0:	89bb      	ldrh	r3, [r7, #12]
 8008cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	8013      	strh	r3, [r2, #0]
 8008d06:	e01f      	b.n	8008d48 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1e:	81fb      	strh	r3, [r7, #14]
 8008d20:	89fb      	ldrh	r3, [r7, #14]
 8008d22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d26:	81fb      	strh	r3, [r7, #14]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	89fb      	ldrh	r3, [r7, #14]
 8008d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b087      	sub	sp, #28
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	7b1b      	ldrb	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 809d 	bne.w	8008ea4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d04c      	beq.n	8008e0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	823b      	strh	r3, [r7, #16]
 8008d80:	8a3b      	ldrh	r3, [r7, #16]
 8008d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01b      	beq.n	8008dc2 <USB_EPClearStall+0x6c>
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da0:	81fb      	strh	r3, [r7, #14]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	441a      	add	r2, r3
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	78db      	ldrb	r3, [r3, #3]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d06c      	beq.n	8008ea4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de0:	81bb      	strh	r3, [r7, #12]
 8008de2:	89bb      	ldrh	r3, [r7, #12]
 8008de4:	f083 0320 	eor.w	r3, r3, #32
 8008de8:	81bb      	strh	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	89bb      	ldrh	r3, [r7, #12]
 8008df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	8013      	strh	r3, [r2, #0]
 8008e0a:	e04b      	b.n	8008ea4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	82fb      	strh	r3, [r7, #22]
 8008e1a:	8afb      	ldrh	r3, [r7, #22]
 8008e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01b      	beq.n	8008e5c <USB_EPClearStall+0x106>
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	82bb      	strh	r3, [r7, #20]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	441a      	add	r2, r3
 8008e46:	8abb      	ldrh	r3, [r7, #20]
 8008e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e72:	827b      	strh	r3, [r7, #18]
 8008e74:	8a7b      	ldrh	r3, [r7, #18]
 8008e76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e7a:	827b      	strh	r3, [r7, #18]
 8008e7c:	8a7b      	ldrh	r3, [r7, #18]
 8008e7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e82:	827b      	strh	r3, [r7, #18]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	441a      	add	r2, r3
 8008e8e:	8a7b      	ldrh	r3, [r7, #18]
 8008e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2280      	movs	r2, #128	; 0x80
 8008ec8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b08b      	sub	sp, #44	; 0x2c
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4611      	mov	r1, r2
 8008f34:	461a      	mov	r2, r3
 8008f36:	460b      	mov	r3, r1
 8008f38:	80fb      	strh	r3, [r7, #6]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f3e:	88bb      	ldrh	r3, [r7, #4]
 8008f40:	3301      	adds	r3, #1
 8008f42:	085b      	lsrs	r3, r3, #1
 8008f44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f4e:	88fa      	ldrh	r2, [r7, #6]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5e:	e01b      	b.n	8008f98 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	b21a      	sxth	r2, r3
 8008f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b21b      	sxth	r3, r3
 8008f78:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	8a7a      	ldrh	r2, [r7, #18]
 8008f7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	3302      	adds	r3, #2
 8008f84:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	3b01      	subs	r3, #1
 8008f96:	627b      	str	r3, [r7, #36]	; 0x24
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e0      	bne.n	8008f60 <USB_WritePMA+0x38>
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
 8008fa2:	372c      	adds	r7, #44	; 0x2c
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b08b      	sub	sp, #44	; 0x2c
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	461a      	mov	r2, r3
 8008fba:	460b      	mov	r3, r1
 8008fbc:	80fb      	strh	r3, [r7, #6]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fc2:	88bb      	ldrh	r3, [r7, #4]
 8008fc4:	085b      	lsrs	r3, r3, #1
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fd2:	88fa      	ldrh	r2, [r7, #6]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fdc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fe2:	e018      	b.n	8009016 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	3302      	adds	r3, #2
 8008ff0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	0a1b      	lsrs	r3, r3, #8
 8009004:	b2da      	uxtb	r2, r3
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	3301      	adds	r3, #1
 800900e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	3b01      	subs	r3, #1
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e3      	bne.n	8008fe4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800901c:	88bb      	ldrh	r3, [r7, #4]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	b29b      	uxth	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d007      	beq.n	8009038 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	b2da      	uxtb	r2, r3
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	701a      	strb	r2, [r3, #0]
  }
}
 8009038:	bf00      	nop
 800903a:	372c      	adds	r7, #44	; 0x2c
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USBD_CDC_Init>:
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
 8009050:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009054:	f002 fc6e 	bl	800b934 <USBD_static_malloc>
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <USBD_CDC_Init+0x30>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	32b0      	adds	r2, #176	; 0xb0
 800906a:	2100      	movs	r1, #0
 800906c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009070:	2302      	movs	r3, #2
 8009072:	e0d4      	b.n	800921e <USBD_CDC_Init+0x1da>
 8009074:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009078:	2100      	movs	r1, #0
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f002 fcce 	bl	800ba1c <memset>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	32b0      	adds	r2, #176	; 0xb0
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	32b0      	adds	r2, #176	; 0xb0
 800909a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7c1b      	ldrb	r3, [r3, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d138      	bne.n	800911e <USBD_CDC_Init+0xda>
 80090ac:	4b5e      	ldr	r3, [pc, #376]	; (8009228 <USBD_CDC_Init+0x1e4>)
 80090ae:	7819      	ldrb	r1, [r3, #0]
 80090b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b4:	2202      	movs	r2, #2
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f002 fae1 	bl	800b67e <USBD_LL_OpenEP>
 80090bc:	4b5a      	ldr	r3, [pc, #360]	; (8009228 <USBD_CDC_Init+0x1e4>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	2201      	movs	r2, #1
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	4b55      	ldr	r3, [pc, #340]	; (800922c <USBD_CDC_Init+0x1e8>)
 80090d8:	7819      	ldrb	r1, [r3, #0]
 80090da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090de:	2202      	movs	r2, #2
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f002 facc 	bl	800b67e <USBD_LL_OpenEP>
 80090e6:	4b51      	ldr	r3, [pc, #324]	; (800922c <USBD_CDC_Init+0x1e8>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 020f 	and.w	r2, r3, #15
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090fe:	2201      	movs	r2, #1
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	4b4b      	ldr	r3, [pc, #300]	; (8009230 <USBD_CDC_Init+0x1ec>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	f003 020f 	and.w	r2, r3, #15
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	3326      	adds	r3, #38	; 0x26
 8009118:	2210      	movs	r2, #16
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e035      	b.n	800918a <USBD_CDC_Init+0x146>
 800911e:	4b42      	ldr	r3, [pc, #264]	; (8009228 <USBD_CDC_Init+0x1e4>)
 8009120:	7819      	ldrb	r1, [r3, #0]
 8009122:	2340      	movs	r3, #64	; 0x40
 8009124:	2202      	movs	r2, #2
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f002 faa9 	bl	800b67e <USBD_LL_OpenEP>
 800912c:	4b3e      	ldr	r3, [pc, #248]	; (8009228 <USBD_CDC_Init+0x1e4>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 020f 	and.w	r2, r3, #15
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	440b      	add	r3, r1
 8009140:	3324      	adds	r3, #36	; 0x24
 8009142:	2201      	movs	r2, #1
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	4b39      	ldr	r3, [pc, #228]	; (800922c <USBD_CDC_Init+0x1e8>)
 8009148:	7819      	ldrb	r1, [r3, #0]
 800914a:	2340      	movs	r3, #64	; 0x40
 800914c:	2202      	movs	r2, #2
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f002 fa95 	bl	800b67e <USBD_LL_OpenEP>
 8009154:	4b35      	ldr	r3, [pc, #212]	; (800922c <USBD_CDC_Init+0x1e8>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800916c:	2201      	movs	r2, #1
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	4b2f      	ldr	r3, [pc, #188]	; (8009230 <USBD_CDC_Init+0x1ec>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 020f 	and.w	r2, r3, #15
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	3326      	adds	r3, #38	; 0x26
 8009186:	2210      	movs	r2, #16
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	4b29      	ldr	r3, [pc, #164]	; (8009230 <USBD_CDC_Init+0x1ec>)
 800918c:	7819      	ldrb	r1, [r3, #0]
 800918e:	2308      	movs	r3, #8
 8009190:	2203      	movs	r2, #3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f002 fa73 	bl	800b67e <USBD_LL_OpenEP>
 8009198:	4b25      	ldr	r3, [pc, #148]	; (8009230 <USBD_CDC_Init+0x1ec>)
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	f003 020f 	and.w	r2, r3, #15
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	3324      	adds	r3, #36	; 0x24
 80091ae:	2201      	movs	r2, #1
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	33b0      	adds	r3, #176	; 0xb0
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4798      	blx	r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <USBD_CDC_Init+0x1a8>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e018      	b.n	800921e <USBD_CDC_Init+0x1da>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7c1b      	ldrb	r3, [r3, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10a      	bne.n	800920a <USBD_CDC_Init+0x1c6>
 80091f4:	4b0d      	ldr	r3, [pc, #52]	; (800922c <USBD_CDC_Init+0x1e8>)
 80091f6:	7819      	ldrb	r1, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f002 fb2b 	bl	800b85e <USBD_LL_PrepareReceive>
 8009208:	e008      	b.n	800921c <USBD_CDC_Init+0x1d8>
 800920a:	4b08      	ldr	r3, [pc, #32]	; (800922c <USBD_CDC_Init+0x1e8>)
 800920c:	7819      	ldrb	r1, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009214:	2340      	movs	r3, #64	; 0x40
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f002 fb21 	bl	800b85e <USBD_LL_PrepareReceive>
 800921c:	2300      	movs	r3, #0
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	2000009f 	.word	0x2000009f
 800922c:	200000a0 	.word	0x200000a0
 8009230:	200000a1 	.word	0x200000a1

08009234 <USBD_CDC_DeInit>:
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
 8009240:	4b3a      	ldr	r3, [pc, #232]	; (800932c <USBD_CDC_DeInit+0xf8>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f002 fa3f 	bl	800b6ca <USBD_LL_CloseEP>
 800924c:	4b37      	ldr	r3, [pc, #220]	; (800932c <USBD_CDC_DeInit+0xf8>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	f003 020f 	and.w	r2, r3, #15
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	3324      	adds	r3, #36	; 0x24
 8009262:	2200      	movs	r2, #0
 8009264:	801a      	strh	r2, [r3, #0]
 8009266:	4b32      	ldr	r3, [pc, #200]	; (8009330 <USBD_CDC_DeInit+0xfc>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f002 fa2c 	bl	800b6ca <USBD_LL_CloseEP>
 8009272:	4b2f      	ldr	r3, [pc, #188]	; (8009330 <USBD_CDC_DeInit+0xfc>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f003 020f 	and.w	r2, r3, #15
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800928a:	2200      	movs	r2, #0
 800928c:	801a      	strh	r2, [r3, #0]
 800928e:	4b29      	ldr	r3, [pc, #164]	; (8009334 <USBD_CDC_DeInit+0x100>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f002 fa18 	bl	800b6ca <USBD_LL_CloseEP>
 800929a:	4b26      	ldr	r3, [pc, #152]	; (8009334 <USBD_CDC_DeInit+0x100>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	f003 020f 	and.w	r2, r3, #15
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	3324      	adds	r3, #36	; 0x24
 80092b0:	2200      	movs	r2, #0
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	4b1f      	ldr	r3, [pc, #124]	; (8009334 <USBD_CDC_DeInit+0x100>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 020f 	and.w	r2, r3, #15
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	3326      	adds	r3, #38	; 0x26
 80092ca:	2200      	movs	r2, #0
 80092cc:	801a      	strh	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	32b0      	adds	r2, #176	; 0xb0
 80092d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01f      	beq.n	8009320 <USBD_CDC_DeInit+0xec>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	33b0      	adds	r3, #176	; 0xb0
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	4798      	blx	r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	32b0      	adds	r2, #176	; 0xb0
 80092fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009302:	4618      	mov	r0, r3
 8009304:	f002 fb24 	bl	800b950 <USBD_static_free>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	32b0      	adds	r2, #176	; 0xb0
 8009312:	2100      	movs	r1, #0
 8009314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8009320:	2300      	movs	r3, #0
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	2000009f 	.word	0x2000009f
 8009330:	200000a0 	.word	0x200000a0
 8009334:	200000a1 	.word	0x200000a1

08009338 <USBD_CDC_Setup>:
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	32b0      	adds	r2, #176	; 0xb0
 800934c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	2300      	movs	r3, #0
 8009354:	737b      	strb	r3, [r7, #13]
 8009356:	2300      	movs	r3, #0
 8009358:	817b      	strh	r3, [r7, #10]
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <USBD_CDC_Setup+0x30>
 8009364:	2303      	movs	r3, #3
 8009366:	e0bf      	b.n	80094e8 <USBD_CDC_Setup+0x1b0>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009370:	2b00      	cmp	r3, #0
 8009372:	d050      	beq.n	8009416 <USBD_CDC_Setup+0xde>
 8009374:	2b20      	cmp	r3, #32
 8009376:	f040 80af 	bne.w	80094d8 <USBD_CDC_Setup+0x1a0>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	88db      	ldrh	r3, [r3, #6]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d03a      	beq.n	80093f8 <USBD_CDC_Setup+0xc0>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	b25b      	sxtb	r3, r3
 8009388:	2b00      	cmp	r3, #0
 800938a:	da1b      	bge.n	80093c4 <USBD_CDC_Setup+0x8c>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	33b0      	adds	r3, #176	; 0xb0
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	7850      	ldrb	r0, [r2, #1]
 80093a2:	6939      	ldr	r1, [r7, #16]
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	88d2      	ldrh	r2, [r2, #6]
 80093a8:	4798      	blx	r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	88db      	ldrh	r3, [r3, #6]
 80093ae:	2b07      	cmp	r3, #7
 80093b0:	bf28      	it	cs
 80093b2:	2307      	movcs	r3, #7
 80093b4:	81fb      	strh	r3, [r7, #14]
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	89fa      	ldrh	r2, [r7, #14]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 fd21 	bl	800ae04 <USBD_CtlSendData>
 80093c2:	e090      	b.n	80094e6 <USBD_CDC_Setup+0x1ae>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	785a      	ldrb	r2, [r3, #1]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	88db      	ldrh	r3, [r3, #6]
 80093d2:	2b3f      	cmp	r3, #63	; 0x3f
 80093d4:	d803      	bhi.n	80093de <USBD_CDC_Setup+0xa6>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	88db      	ldrh	r3, [r3, #6]
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	e000      	b.n	80093e0 <USBD_CDC_Setup+0xa8>
 80093de:	2240      	movs	r2, #64	; 0x40
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 80093e6:	6939      	ldr	r1, [r7, #16]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80093ee:	461a      	mov	r2, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 fd33 	bl	800ae5c <USBD_CtlPrepareRx>
 80093f6:	e076      	b.n	80094e6 <USBD_CDC_Setup+0x1ae>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	33b0      	adds	r3, #176	; 0xb0
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	7850      	ldrb	r0, [r2, #1]
 800940e:	2200      	movs	r2, #0
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	4798      	blx	r3
 8009414:	e067      	b.n	80094e6 <USBD_CDC_Setup+0x1ae>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b0b      	cmp	r3, #11
 800941c:	d851      	bhi.n	80094c2 <USBD_CDC_Setup+0x18a>
 800941e:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <USBD_CDC_Setup+0xec>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	08009455 	.word	0x08009455
 8009428:	080094d1 	.word	0x080094d1
 800942c:	080094c3 	.word	0x080094c3
 8009430:	080094c3 	.word	0x080094c3
 8009434:	080094c3 	.word	0x080094c3
 8009438:	080094c3 	.word	0x080094c3
 800943c:	080094c3 	.word	0x080094c3
 8009440:	080094c3 	.word	0x080094c3
 8009444:	080094c3 	.word	0x080094c3
 8009448:	080094c3 	.word	0x080094c3
 800944c:	0800947f 	.word	0x0800947f
 8009450:	080094a9 	.word	0x080094a9
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b03      	cmp	r3, #3
 800945e:	d107      	bne.n	8009470 <USBD_CDC_Setup+0x138>
 8009460:	f107 030a 	add.w	r3, r7, #10
 8009464:	2202      	movs	r2, #2
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 fccb 	bl	800ae04 <USBD_CtlSendData>
 800946e:	e032      	b.n	80094d6 <USBD_CDC_Setup+0x19e>
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 fc55 	bl	800ad22 <USBD_CtlError>
 8009478:	2303      	movs	r3, #3
 800947a:	75fb      	strb	r3, [r7, #23]
 800947c:	e02b      	b.n	80094d6 <USBD_CDC_Setup+0x19e>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b03      	cmp	r3, #3
 8009488:	d107      	bne.n	800949a <USBD_CDC_Setup+0x162>
 800948a:	f107 030d 	add.w	r3, r7, #13
 800948e:	2201      	movs	r2, #1
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 fcb6 	bl	800ae04 <USBD_CtlSendData>
 8009498:	e01d      	b.n	80094d6 <USBD_CDC_Setup+0x19e>
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fc40 	bl	800ad22 <USBD_CtlError>
 80094a2:	2303      	movs	r3, #3
 80094a4:	75fb      	strb	r3, [r7, #23]
 80094a6:	e016      	b.n	80094d6 <USBD_CDC_Setup+0x19e>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d00f      	beq.n	80094d4 <USBD_CDC_Setup+0x19c>
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 fc33 	bl	800ad22 <USBD_CtlError>
 80094bc:	2303      	movs	r3, #3
 80094be:	75fb      	strb	r3, [r7, #23]
 80094c0:	e008      	b.n	80094d4 <USBD_CDC_Setup+0x19c>
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fc2c 	bl	800ad22 <USBD_CtlError>
 80094ca:	2303      	movs	r3, #3
 80094cc:	75fb      	strb	r3, [r7, #23]
 80094ce:	e002      	b.n	80094d6 <USBD_CDC_Setup+0x19e>
 80094d0:	bf00      	nop
 80094d2:	e008      	b.n	80094e6 <USBD_CDC_Setup+0x1ae>
 80094d4:	bf00      	nop
 80094d6:	e006      	b.n	80094e6 <USBD_CDC_Setup+0x1ae>
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fc21 	bl	800ad22 <USBD_CtlError>
 80094e0:	2303      	movs	r3, #3
 80094e2:	75fb      	strb	r3, [r7, #23]
 80094e4:	bf00      	nop
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_CDC_DataIn>:
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	32b0      	adds	r2, #176	; 0xb0
 800950e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <USBD_CDC_DataIn+0x2a>
 8009516:	2303      	movs	r3, #3
 8009518:	e065      	b.n	80095e6 <USBD_CDC_DataIn+0xf6>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	32b0      	adds	r2, #176	; 0xb0
 8009524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009528:	60bb      	str	r3, [r7, #8]
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	f003 020f 	and.w	r2, r3, #15
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	3318      	adds	r3, #24
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d02f      	beq.n	80095a4 <USBD_CDC_DataIn+0xb4>
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 020f 	and.w	r2, r3, #15
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	440b      	add	r3, r1
 8009556:	3318      	adds	r3, #24
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	f003 010f 	and.w	r1, r3, #15
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	460b      	mov	r3, r1
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4403      	add	r3, r0
 800956c:	3338      	adds	r3, #56	; 0x38
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	fbb2 f1f3 	udiv	r1, r2, r3
 8009574:	fb01 f303 	mul.w	r3, r1, r3
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d112      	bne.n	80095a4 <USBD_CDC_DataIn+0xb4>
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	f003 020f 	and.w	r2, r3, #15
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	3318      	adds	r3, #24
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	78f9      	ldrb	r1, [r7, #3]
 8009598:	2300      	movs	r3, #0
 800959a:	2200      	movs	r2, #0
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f002 f93d 	bl	800b81c <USBD_LL_Transmit>
 80095a2:	e01f      	b.n	80095e4 <USBD_CDC_DataIn+0xf4>
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	33b0      	adds	r3, #176	; 0xb0
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d010      	beq.n	80095e4 <USBD_CDC_DataIn+0xf4>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	33b0      	adds	r3, #176	; 0xb0
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	4798      	blx	r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_CDC_DataOut>:
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	32b0      	adds	r2, #176	; 0xb0
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	32b0      	adds	r2, #176	; 0xb0
 8009614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <USBD_CDC_DataOut+0x32>
 800961c:	2303      	movs	r3, #3
 800961e:	e01a      	b.n	8009656 <USBD_CDC_DataOut+0x68>
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f002 f93b 	bl	800b8a0 <USBD_LL_GetRxDataSize>
 800962a:	4602      	mov	r2, r0
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	33b0      	adds	r3, #176	; 0xb0
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009650:	4611      	mov	r1, r2
 8009652:	4798      	blx	r3
 8009654:	2300      	movs	r3, #0
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_CDC_EP0_RxReady>:
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	32b0      	adds	r2, #176	; 0xb0
 8009670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <USBD_CDC_EP0_RxReady+0x22>
 800967c:	2303      	movs	r3, #3
 800967e:	e025      	b.n	80096cc <USBD_CDC_EP0_RxReady+0x6e>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	33b0      	adds	r3, #176	; 0xb0
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d01a      	beq.n	80096ca <USBD_CDC_EP0_RxReady+0x6c>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800969a:	2bff      	cmp	r3, #255	; 0xff
 800969c:	d015      	beq.n	80096ca <USBD_CDC_EP0_RxReady+0x6c>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	33b0      	adds	r3, #176	; 0xb0
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 80096b6:	68f9      	ldr	r1, [r7, #12]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 80096be:	b292      	uxth	r2, r2
 80096c0:	4798      	blx	r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	22ff      	movs	r2, #255	; 0xff
 80096c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80096ca:	2300      	movs	r3, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CDC_GetFSCfgDesc>:
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	2182      	movs	r1, #130	; 0x82
 80096de:	4818      	ldr	r0, [pc, #96]	; (8009740 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096e0:	f000 fcbd 	bl	800a05e <USBD_GetEpDesc>
 80096e4:	6178      	str	r0, [r7, #20]
 80096e6:	2101      	movs	r1, #1
 80096e8:	4815      	ldr	r0, [pc, #84]	; (8009740 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096ea:	f000 fcb8 	bl	800a05e <USBD_GetEpDesc>
 80096ee:	6138      	str	r0, [r7, #16]
 80096f0:	2181      	movs	r1, #129	; 0x81
 80096f2:	4813      	ldr	r0, [pc, #76]	; (8009740 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096f4:	f000 fcb3 	bl	800a05e <USBD_GetEpDesc>
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <USBD_CDC_GetFSCfgDesc+0x32>
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2210      	movs	r2, #16
 8009704:	719a      	strb	r2, [r3, #6]
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d006      	beq.n	800971a <USBD_CDC_GetFSCfgDesc+0x46>
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2200      	movs	r2, #0
 8009710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009714:	711a      	strb	r2, [r3, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	715a      	strb	r2, [r3, #5]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d006      	beq.n	800972e <USBD_CDC_GetFSCfgDesc+0x5a>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009728:	711a      	strb	r2, [r3, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	715a      	strb	r2, [r3, #5]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2243      	movs	r2, #67	; 0x43
 8009732:	801a      	strh	r2, [r3, #0]
 8009734:	4b02      	ldr	r3, [pc, #8]	; (8009740 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	2000005c 	.word	0x2000005c

08009744 <USBD_CDC_GetHSCfgDesc>:
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	2182      	movs	r1, #130	; 0x82
 800974e:	4818      	ldr	r0, [pc, #96]	; (80097b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009750:	f000 fc85 	bl	800a05e <USBD_GetEpDesc>
 8009754:	6178      	str	r0, [r7, #20]
 8009756:	2101      	movs	r1, #1
 8009758:	4815      	ldr	r0, [pc, #84]	; (80097b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800975a:	f000 fc80 	bl	800a05e <USBD_GetEpDesc>
 800975e:	6138      	str	r0, [r7, #16]
 8009760:	2181      	movs	r1, #129	; 0x81
 8009762:	4813      	ldr	r0, [pc, #76]	; (80097b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009764:	f000 fc7b 	bl	800a05e <USBD_GetEpDesc>
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <USBD_CDC_GetHSCfgDesc+0x32>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2210      	movs	r2, #16
 8009774:	719a      	strb	r2, [r3, #6]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <USBD_CDC_GetHSCfgDesc+0x46>
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2200      	movs	r2, #0
 8009780:	711a      	strb	r2, [r3, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f042 0202 	orr.w	r2, r2, #2
 8009788:	715a      	strb	r2, [r3, #5]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d006      	beq.n	800979e <USBD_CDC_GetHSCfgDesc+0x5a>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	711a      	strb	r2, [r3, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f042 0202 	orr.w	r2, r2, #2
 800979c:	715a      	strb	r2, [r3, #5]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2243      	movs	r2, #67	; 0x43
 80097a2:	801a      	strh	r2, [r3, #0]
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	2000005c 	.word	0x2000005c

080097b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	2182      	movs	r1, #130	; 0x82
 80097be:	4818      	ldr	r0, [pc, #96]	; (8009820 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097c0:	f000 fc4d 	bl	800a05e <USBD_GetEpDesc>
 80097c4:	6178      	str	r0, [r7, #20]
 80097c6:	2101      	movs	r1, #1
 80097c8:	4815      	ldr	r0, [pc, #84]	; (8009820 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097ca:	f000 fc48 	bl	800a05e <USBD_GetEpDesc>
 80097ce:	6138      	str	r0, [r7, #16]
 80097d0:	2181      	movs	r1, #129	; 0x81
 80097d2:	4813      	ldr	r0, [pc, #76]	; (8009820 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097d4:	f000 fc43 	bl	800a05e <USBD_GetEpDesc>
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2210      	movs	r2, #16
 80097e4:	719a      	strb	r2, [r3, #6]
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f4:	711a      	strb	r2, [r3, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	715a      	strb	r2, [r3, #5]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d006      	beq.n	800980e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009808:	711a      	strb	r2, [r3, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	715a      	strb	r2, [r3, #5]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2243      	movs	r2, #67	; 0x43
 8009812:	801a      	strh	r2, [r3, #0]
 8009814:	4b02      	ldr	r3, [pc, #8]	; (8009820 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	2000005c 	.word	0x2000005c

08009824 <USBD_CDC_GetDeviceQualifierDescriptor>:
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	220a      	movs	r2, #10
 8009830:	801a      	strh	r2, [r3, #0]
 8009832:	4b03      	ldr	r3, [pc, #12]	; (8009840 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	20000018 	.word	0x20000018

08009844 <USBD_CDC_RegisterInterface>:
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <USBD_CDC_RegisterInterface+0x14>
 8009854:	2303      	movs	r3, #3
 8009856:	e009      	b.n	800986c <USBD_CDC_RegisterInterface+0x28>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	33b0      	adds	r3, #176	; 0xb0
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	2300      	movs	r3, #0
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USBD_CDC_SetTxBuffer>:
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	32b0      	adds	r2, #176	; 0xb0
 800988e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <USBD_CDC_SetTxBuffer+0x26>
 800989a:	2303      	movs	r3, #3
 800989c:	e008      	b.n	80098b0 <USBD_CDC_SetTxBuffer+0x38>
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80098ae:	2300      	movs	r3, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USBD_CDC_SetRxBuffer>:
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	32b0      	adds	r2, #176	; 0xb0
 80098d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <USBD_CDC_SetRxBuffer+0x24>
 80098dc:	2303      	movs	r3, #3
 80098de:	e004      	b.n	80098ea <USBD_CDC_SetRxBuffer+0x2e>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80098e8:	2300      	movs	r3, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
	...

080098f8 <USBD_CDC_TransmitPacket>:
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	32b0      	adds	r2, #176	; 0xb0
 800990a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990e:	60bb      	str	r3, [r7, #8]
 8009910:	2301      	movs	r3, #1
 8009912:	73fb      	strb	r3, [r7, #15]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <USBD_CDC_TransmitPacket+0x26>
 800991a:	2303      	movs	r3, #3
 800991c:	e025      	b.n	800996a <USBD_CDC_TransmitPacket+0x72>
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11f      	bne.n	8009968 <USBD_CDC_TransmitPacket+0x70>
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2201      	movs	r2, #1
 800992c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009930:	4b10      	ldr	r3, [pc, #64]	; (8009974 <USBD_CDC_TransmitPacket+0x7c>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	f003 020f 	and.w	r2, r3, #15
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4403      	add	r3, r0
 800994a:	3318      	adds	r3, #24
 800994c:	6019      	str	r1, [r3, #0]
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <USBD_CDC_TransmitPacket+0x7c>)
 8009950:	7819      	ldrb	r1, [r3, #0]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 ff5c 	bl	800b81c <USBD_LL_Transmit>
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	2000009f 	.word	0x2000009f

08009978 <USBD_CDC_ReceivePacket>:
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	32b0      	adds	r2, #176	; 0xb0
 800998a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	32b0      	adds	r2, #176	; 0xb0
 800999a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <USBD_CDC_ReceivePacket+0x2e>
 80099a2:	2303      	movs	r3, #3
 80099a4:	e018      	b.n	80099d8 <USBD_CDC_ReceivePacket+0x60>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	7c1b      	ldrb	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <USBD_CDC_ReceivePacket+0x4c>
 80099ae:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <USBD_CDC_ReceivePacket+0x68>)
 80099b0:	7819      	ldrb	r1, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 ff4e 	bl	800b85e <USBD_LL_PrepareReceive>
 80099c2:	e008      	b.n	80099d6 <USBD_CDC_ReceivePacket+0x5e>
 80099c4:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <USBD_CDC_ReceivePacket+0x68>)
 80099c6:	7819      	ldrb	r1, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099ce:	2340      	movs	r3, #64	; 0x40
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 ff44 	bl	800b85e <USBD_LL_PrepareReceive>
 80099d6:	2300      	movs	r3, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	200000a0 	.word	0x200000a0

080099e4 <USBD_Init>:
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	4613      	mov	r3, r2
 80099f0:	71fb      	strb	r3, [r7, #7]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <USBD_Init+0x18>
 80099f8:	2303      	movs	r3, #3
 80099fa:	e01f      	b.n	8009a3c <USBD_Init+0x58>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <USBD_Init+0x3e>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	79fa      	ldrb	r2, [r7, #7]
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f001 fda7 	bl	800b584 <USBD_LL_Init>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_RegisterClass>:
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	81fb      	strh	r3, [r7, #14]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <USBD_RegisterClass+0x18>
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e025      	b.n	8009aa8 <USBD_RegisterClass+0x64>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	32ae      	adds	r2, #174	; 0xae
 8009a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00f      	beq.n	8009a98 <USBD_RegisterClass+0x54>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	32ae      	adds	r2, #174	; 0xae
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	f107 020e 	add.w	r2, r7, #14
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	4602      	mov	r2, r0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_Start>:
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 fdc5 	bl	800b648 <USBD_LL_Start>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_RunTestMode>:
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <USBD_SetClassConfig>:
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	70fb      	strb	r3, [r7, #3]
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d009      	beq.n	8009b0c <USBD_SetClassConfig+0x2e>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	4611      	mov	r1, r2
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	4798      	blx	r3
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_ClrClassConfig>:
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	78fa      	ldrb	r2, [r7, #3]
 8009b30:	4611      	mov	r1, r2
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	4798      	blx	r3
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <USBD_ClrClassConfig+0x2a>
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	73fb      	strb	r3, [r7, #15]
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_LL_SetupStage>:
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 f8a6 	bl	800acae <USBD_ParseSetupRequest>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b70:	461a      	mov	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b7e:	f003 031f 	and.w	r3, r3, #31
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d01a      	beq.n	8009bbc <USBD_LL_SetupStage+0x72>
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d822      	bhi.n	8009bd0 <USBD_LL_SetupStage+0x86>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <USBD_LL_SetupStage+0x4a>
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d00a      	beq.n	8009ba8 <USBD_LL_SetupStage+0x5e>
 8009b92:	e01d      	b.n	8009bd0 <USBD_LL_SetupStage+0x86>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fad3 	bl	800a148 <USBD_StdDevReq>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]
 8009ba6:	e020      	b.n	8009bea <USBD_LL_SetupStage+0xa0>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fb3b 	bl	800a22c <USBD_StdItfReq>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]
 8009bba:	e016      	b.n	8009bea <USBD_LL_SetupStage+0xa0>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fb9d 	bl	800a304 <USBD_StdEPReq>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
 8009bce:	e00c      	b.n	8009bea <USBD_LL_SetupStage+0xa0>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fd92 	bl	800b708 <USBD_LL_StallEP>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
 8009be8:	bf00      	nop
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_LL_DataOutStage>:
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	72fb      	strb	r3, [r7, #11]
 8009c02:	2300      	movs	r3, #0
 8009c04:	75fb      	strb	r3, [r7, #23]
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d16e      	bne.n	8009cea <USBD_LL_DataOutStage+0xf6>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	f040 8098 	bne.w	8009d50 <USBD_LL_DataOutStage+0x15c>
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d913      	bls.n	8009c54 <USBD_LL_DataOutStage+0x60>
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	1ad2      	subs	r2, r2, r3
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	609a      	str	r2, [r3, #8]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	4293      	cmp	r3, r2
 8009c44:	bf28      	it	cs
 8009c46:	4613      	movcs	r3, r2
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f001 f922 	bl	800ae96 <USBD_CtlContinueRx>
 8009c52:	e07d      	b.n	8009d50 <USBD_LL_DataOutStage+0x15c>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c5a:	f003 031f 	and.w	r3, r3, #31
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d014      	beq.n	8009c8c <USBD_LL_DataOutStage+0x98>
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d81d      	bhi.n	8009ca2 <USBD_LL_DataOutStage+0xae>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <USBD_LL_DataOutStage+0x7c>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d003      	beq.n	8009c76 <USBD_LL_DataOutStage+0x82>
 8009c6e:	e018      	b.n	8009ca2 <USBD_LL_DataOutStage+0xae>
 8009c70:	2300      	movs	r3, #0
 8009c72:	75bb      	strb	r3, [r7, #22]
 8009c74:	e018      	b.n	8009ca8 <USBD_LL_DataOutStage+0xb4>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	4619      	mov	r1, r3
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 f9d2 	bl	800a02a <USBD_CoreFindIF>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75bb      	strb	r3, [r7, #22]
 8009c8a:	e00d      	b.n	8009ca8 <USBD_LL_DataOutStage+0xb4>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	4619      	mov	r1, r3
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 f9d4 	bl	800a044 <USBD_CoreFindEP>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	75bb      	strb	r3, [r7, #22]
 8009ca0:	e002      	b.n	8009ca8 <USBD_LL_DataOutStage+0xb4>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	75bb      	strb	r3, [r7, #22]
 8009ca6:	bf00      	nop
 8009ca8:	7dbb      	ldrb	r3, [r7, #22]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d119      	bne.n	8009ce2 <USBD_LL_DataOutStage+0xee>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d113      	bne.n	8009ce2 <USBD_LL_DataOutStage+0xee>
 8009cba:	7dba      	ldrb	r2, [r7, #22]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	32ae      	adds	r2, #174	; 0xae
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <USBD_LL_DataOutStage+0xee>
 8009cca:	7dba      	ldrb	r2, [r7, #22]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8009cd2:	7dba      	ldrb	r2, [r7, #22]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	32ae      	adds	r2, #174	; 0xae
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	4798      	blx	r3
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f001 f8e8 	bl	800aeb8 <USBD_CtlSendStatus>
 8009ce8:	e032      	b.n	8009d50 <USBD_LL_DataOutStage+0x15c>
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f9a5 	bl	800a044 <USBD_CoreFindEP>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	75bb      	strb	r3, [r7, #22]
 8009cfe:	7dbb      	ldrb	r3, [r7, #22]
 8009d00:	2bff      	cmp	r3, #255	; 0xff
 8009d02:	d025      	beq.n	8009d50 <USBD_LL_DataOutStage+0x15c>
 8009d04:	7dbb      	ldrb	r3, [r7, #22]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d122      	bne.n	8009d50 <USBD_LL_DataOutStage+0x15c>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d117      	bne.n	8009d46 <USBD_LL_DataOutStage+0x152>
 8009d16:	7dba      	ldrb	r2, [r7, #22]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	32ae      	adds	r2, #174	; 0xae
 8009d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00f      	beq.n	8009d46 <USBD_LL_DataOutStage+0x152>
 8009d26:	7dba      	ldrb	r2, [r7, #22]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8009d2e:	7dba      	ldrb	r2, [r7, #22]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	32ae      	adds	r2, #174	; 0xae
 8009d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	7afa      	ldrb	r2, [r7, #11]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	75fb      	strb	r3, [r7, #23]
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <USBD_LL_DataOutStage+0x15c>
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	e000      	b.n	8009d52 <USBD_LL_DataOutStage+0x15e>
 8009d50:	2300      	movs	r3, #0
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_LL_DataInStage>:
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b086      	sub	sp, #24
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	460b      	mov	r3, r1
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	72fb      	strb	r3, [r7, #11]
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d16f      	bne.n	8009e4e <USBD_LL_DataInStage+0xf4>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3314      	adds	r3, #20
 8009d72:	613b      	str	r3, [r7, #16]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d15a      	bne.n	8009e34 <USBD_LL_DataInStage+0xda>
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	689a      	ldr	r2, [r3, #8]
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d914      	bls.n	8009db4 <USBD_LL_DataInStage+0x5a>
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	689a      	ldr	r2, [r3, #8]
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	1ad2      	subs	r2, r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	609a      	str	r2, [r3, #8]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f001 f84a 	bl	800ae3a <USBD_CtlContinueSendData>
 8009da6:	2300      	movs	r3, #0
 8009da8:	2200      	movs	r2, #0
 8009daa:	2100      	movs	r1, #0
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f001 fd56 	bl	800b85e <USBD_LL_PrepareReceive>
 8009db2:	e03f      	b.n	8009e34 <USBD_LL_DataInStage+0xda>
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d11c      	bne.n	8009dfa <USBD_LL_DataInStage+0xa0>
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d316      	bcc.n	8009dfa <USBD_LL_DataInStage+0xa0>
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d20f      	bcs.n	8009dfa <USBD_LL_DataInStage+0xa0>
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2100      	movs	r1, #0
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f001 f82b 	bl	800ae3a <USBD_CtlContinueSendData>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8009dec:	2300      	movs	r3, #0
 8009dee:	2200      	movs	r2, #0
 8009df0:	2100      	movs	r1, #0
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f001 fd33 	bl	800b85e <USBD_LL_PrepareReceive>
 8009df8:	e01c      	b.n	8009e34 <USBD_LL_DataInStage+0xda>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d10f      	bne.n	8009e26 <USBD_LL_DataInStage+0xcc>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d009      	beq.n	8009e26 <USBD_LL_DataInStage+0xcc>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	4798      	blx	r3
 8009e26:	2180      	movs	r1, #128	; 0x80
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f001 fc6d 	bl	800b708 <USBD_LL_StallEP>
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f001 f855 	bl	800aede <USBD_CtlReceiveStatus>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d03a      	beq.n	8009eb4 <USBD_LL_DataInStage+0x15a>
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7ff fe42 	bl	8009ac8 <USBD_RunTestMode>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009e4c:	e032      	b.n	8009eb4 <USBD_LL_DataInStage+0x15a>
 8009e4e:	7afb      	ldrb	r3, [r7, #11]
 8009e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	4619      	mov	r1, r3
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f8f3 	bl	800a044 <USBD_CoreFindEP>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	75fb      	strb	r3, [r7, #23]
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	2bff      	cmp	r3, #255	; 0xff
 8009e66:	d025      	beq.n	8009eb4 <USBD_LL_DataInStage+0x15a>
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d122      	bne.n	8009eb4 <USBD_LL_DataInStage+0x15a>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d11c      	bne.n	8009eb4 <USBD_LL_DataInStage+0x15a>
 8009e7a:	7dfa      	ldrb	r2, [r7, #23]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	32ae      	adds	r2, #174	; 0xae
 8009e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d014      	beq.n	8009eb4 <USBD_LL_DataInStage+0x15a>
 8009e8a:	7dfa      	ldrb	r2, [r7, #23]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8009e92:	7dfa      	ldrb	r2, [r7, #23]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	32ae      	adds	r2, #174	; 0xae
 8009e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	7afa      	ldrb	r2, [r7, #11]
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	4798      	blx	r3
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75bb      	strb	r3, [r7, #22]
 8009eaa:	7dbb      	ldrb	r3, [r7, #22]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <USBD_LL_DataInStage+0x15a>
 8009eb0:	7dbb      	ldrb	r3, [r7, #22]
 8009eb2:	e000      	b.n	8009eb6 <USBD_LL_DataInStage+0x15c>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_LL_Reset>:
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	605a      	str	r2, [r3, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d014      	beq.n	8009f24 <USBD_LL_Reset+0x66>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00e      	beq.n	8009f24 <USBD_LL_Reset+0x66>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6852      	ldr	r2, [r2, #4]
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	4611      	mov	r1, r2
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	4798      	blx	r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <USBD_LL_Reset+0x66>
 8009f20:	2303      	movs	r3, #3
 8009f22:	73fb      	strb	r3, [r7, #15]
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	2200      	movs	r2, #0
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fba7 	bl	800b67e <USBD_LL_OpenEP>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2240      	movs	r2, #64	; 0x40
 8009f3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	2200      	movs	r2, #0
 8009f44:	2180      	movs	r1, #128	; 0x80
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fb99 	bl	800b67e <USBD_LL_OpenEP>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	849a      	strh	r2, [r3, #36]	; 0x24
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2240      	movs	r2, #64	; 0x40
 8009f56:	621a      	str	r2, [r3, #32]
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_LL_SetSpeed>:
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	741a      	strb	r2, [r3, #16]
 8009f74:	2300      	movs	r3, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <USBD_LL_Suspend>:
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d006      	beq.n	8009fa4 <USBD_LL_Suspend+0x22>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8009fac:	2300      	movs	r3, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <USBD_LL_Resume>:
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d106      	bne.n	8009fdc <USBD_LL_Resume+0x22>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USBD_LL_SOF>:
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d110      	bne.n	800a020 <USBD_LL_SOF+0x36>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBD_LL_SOF+0x36>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <USBD_LL_SOF+0x36>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
 800a020:	2300      	movs	r3, #0
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_CoreFindIF>:
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
 800a036:	2300      	movs	r3, #0
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <USBD_CoreFindEP>:
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70fb      	strb	r3, [r7, #3]
 800a050:	2300      	movs	r3, #0
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <USBD_GetEpDesc>:
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	70fb      	strb	r3, [r7, #3]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	2300      	movs	r3, #0
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	885b      	ldrh	r3, [r3, #2]
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	b29b      	uxth	r3, r3
 800a082:	429a      	cmp	r2, r3
 800a084:	d920      	bls.n	800a0c8 <USBD_GetEpDesc+0x6a>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	817b      	strh	r3, [r7, #10]
 800a08e:	e013      	b.n	800a0b8 <USBD_GetEpDesc+0x5a>
 800a090:	f107 030a 	add.w	r3, r7, #10
 800a094:	4619      	mov	r1, r3
 800a096:	6978      	ldr	r0, [r7, #20]
 800a098:	f000 f81b 	bl	800a0d2 <USBD_GetNextDesc>
 800a09c:	6178      	str	r0, [r7, #20]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	2b05      	cmp	r3, #5
 800a0a4:	d108      	bne.n	800a0b8 <USBD_GetEpDesc+0x5a>
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	613b      	str	r3, [r7, #16]
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	789b      	ldrb	r3, [r3, #2]
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d008      	beq.n	800a0c6 <USBD_GetEpDesc+0x68>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	613b      	str	r3, [r7, #16]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	885b      	ldrh	r3, [r3, #2]
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	897b      	ldrh	r3, [r7, #10]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d8e5      	bhi.n	800a090 <USBD_GetEpDesc+0x32>
 800a0c4:	e000      	b.n	800a0c8 <USBD_GetEpDesc+0x6a>
 800a0c6:	bf00      	nop
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_GetNextDesc>:
 800a0d2:	b480      	push	{r7}
 800a0d4:	b085      	sub	sp, #20
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	6039      	str	r1, [r7, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	881a      	ldrh	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	4413      	add	r3, r2
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	801a      	strh	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <SWAPBYTE>:
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	827b      	strh	r3, [r7, #18]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	3301      	adds	r3, #1
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	823b      	strh	r3, [r7, #16]
 800a12a:	8a3b      	ldrh	r3, [r7, #16]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	b21a      	sxth	r2, r3
 800a130:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a134:	4313      	orrs	r3, r2
 800a136:	b21b      	sxth	r3, r3
 800a138:	81fb      	strh	r3, [r7, #14]
 800a13a:	89fb      	ldrh	r3, [r7, #14]
 800a13c:	4618      	mov	r0, r3
 800a13e:	371c      	adds	r7, #28
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USBD_StdDevReq>:
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	d005      	beq.n	800a16e <USBD_StdDevReq+0x26>
 800a162:	2b40      	cmp	r3, #64	; 0x40
 800a164:	d857      	bhi.n	800a216 <USBD_StdDevReq+0xce>
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00f      	beq.n	800a18a <USBD_StdDevReq+0x42>
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d153      	bne.n	800a216 <USBD_StdDevReq+0xce>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	32ae      	adds	r2, #174	; 0xae
 800a178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	4798      	blx	r3
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	e04a      	b.n	800a220 <USBD_StdDevReq+0xd8>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d83b      	bhi.n	800a20a <USBD_StdDevReq+0xc2>
 800a192:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <USBD_StdDevReq+0x50>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a1ed 	.word	0x0800a1ed
 800a19c:	0800a201 	.word	0x0800a201
 800a1a0:	0800a20b 	.word	0x0800a20b
 800a1a4:	0800a1f7 	.word	0x0800a1f7
 800a1a8:	0800a20b 	.word	0x0800a20b
 800a1ac:	0800a1cb 	.word	0x0800a1cb
 800a1b0:	0800a1c1 	.word	0x0800a1c1
 800a1b4:	0800a20b 	.word	0x0800a20b
 800a1b8:	0800a1e3 	.word	0x0800a1e3
 800a1bc:	0800a1d5 	.word	0x0800a1d5
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fa3c 	bl	800a640 <USBD_GetDescriptor>
 800a1c8:	e024      	b.n	800a214 <USBD_StdDevReq+0xcc>
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fbcb 	bl	800a968 <USBD_SetAddress>
 800a1d2:	e01f      	b.n	800a214 <USBD_StdDevReq+0xcc>
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fc0a 	bl	800a9f0 <USBD_SetConfig>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]
 800a1e0:	e018      	b.n	800a214 <USBD_StdDevReq+0xcc>
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fcad 	bl	800ab44 <USBD_GetConfig>
 800a1ea:	e013      	b.n	800a214 <USBD_StdDevReq+0xcc>
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fcde 	bl	800abb0 <USBD_GetStatus>
 800a1f4:	e00e      	b.n	800a214 <USBD_StdDevReq+0xcc>
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fd0d 	bl	800ac18 <USBD_SetFeature>
 800a1fe:	e009      	b.n	800a214 <USBD_StdDevReq+0xcc>
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fd31 	bl	800ac6a <USBD_ClrFeature>
 800a208:	e004      	b.n	800a214 <USBD_StdDevReq+0xcc>
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fd88 	bl	800ad22 <USBD_CtlError>
 800a212:	bf00      	nop
 800a214:	e004      	b.n	800a220 <USBD_StdDevReq+0xd8>
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fd82 	bl	800ad22 <USBD_CtlError>
 800a21e:	bf00      	nop
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop

0800a22c <USBD_StdItfReq>:
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a242:	2b40      	cmp	r3, #64	; 0x40
 800a244:	d005      	beq.n	800a252 <USBD_StdItfReq+0x26>
 800a246:	2b40      	cmp	r3, #64	; 0x40
 800a248:	d852      	bhi.n	800a2f0 <USBD_StdItfReq+0xc4>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <USBD_StdItfReq+0x26>
 800a24e:	2b20      	cmp	r3, #32
 800a250:	d14e      	bne.n	800a2f0 <USBD_StdItfReq+0xc4>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	3b01      	subs	r3, #1
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d840      	bhi.n	800a2e2 <USBD_StdItfReq+0xb6>
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	889b      	ldrh	r3, [r3, #4]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b01      	cmp	r3, #1
 800a268:	d836      	bhi.n	800a2d8 <USBD_StdItfReq+0xac>
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	889b      	ldrh	r3, [r3, #4]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff fed9 	bl	800a02a <USBD_CoreFindIF>
 800a278:	4603      	mov	r3, r0
 800a27a:	73bb      	strb	r3, [r7, #14]
 800a27c:	7bbb      	ldrb	r3, [r7, #14]
 800a27e:	2bff      	cmp	r3, #255	; 0xff
 800a280:	d01d      	beq.n	800a2be <USBD_StdItfReq+0x92>
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d11a      	bne.n	800a2be <USBD_StdItfReq+0x92>
 800a288:	7bba      	ldrb	r2, [r7, #14]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	32ae      	adds	r2, #174	; 0xae
 800a28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00f      	beq.n	800a2b8 <USBD_StdItfReq+0x8c>
 800a298:	7bba      	ldrb	r2, [r7, #14]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800a2a0:	7bba      	ldrb	r2, [r7, #14]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	32ae      	adds	r2, #174	; 0xae
 800a2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73fb      	strb	r3, [r7, #15]
 800a2b6:	e004      	b.n	800a2c2 <USBD_StdItfReq+0x96>
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	73fb      	strb	r3, [r7, #15]
 800a2bc:	e001      	b.n	800a2c2 <USBD_StdItfReq+0x96>
 800a2be:	2303      	movs	r3, #3
 800a2c0:	73fb      	strb	r3, [r7, #15]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d110      	bne.n	800a2ec <USBD_StdItfReq+0xc0>
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10d      	bne.n	800a2ec <USBD_StdItfReq+0xc0>
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fdf1 	bl	800aeb8 <USBD_CtlSendStatus>
 800a2d6:	e009      	b.n	800a2ec <USBD_StdItfReq+0xc0>
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fd21 	bl	800ad22 <USBD_CtlError>
 800a2e0:	e004      	b.n	800a2ec <USBD_StdItfReq+0xc0>
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fd1c 	bl	800ad22 <USBD_CtlError>
 800a2ea:	e000      	b.n	800a2ee <USBD_StdItfReq+0xc2>
 800a2ec:	bf00      	nop
 800a2ee:	e004      	b.n	800a2fa <USBD_StdItfReq+0xce>
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fd15 	bl	800ad22 <USBD_CtlError>
 800a2f8:	bf00      	nop
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_StdEPReq>:
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	2300      	movs	r3, #0
 800a310:	73fb      	strb	r3, [r7, #15]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	889b      	ldrh	r3, [r3, #4]
 800a316:	73bb      	strb	r3, [r7, #14]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	d007      	beq.n	800a334 <USBD_StdEPReq+0x30>
 800a324:	2b40      	cmp	r3, #64	; 0x40
 800a326:	f200 817f 	bhi.w	800a628 <USBD_StdEPReq+0x324>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d02a      	beq.n	800a384 <USBD_StdEPReq+0x80>
 800a32e:	2b20      	cmp	r3, #32
 800a330:	f040 817a 	bne.w	800a628 <USBD_StdEPReq+0x324>
 800a334:	7bbb      	ldrb	r3, [r7, #14]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fe83 	bl	800a044 <USBD_CoreFindEP>
 800a33e:	4603      	mov	r3, r0
 800a340:	737b      	strb	r3, [r7, #13]
 800a342:	7b7b      	ldrb	r3, [r7, #13]
 800a344:	2bff      	cmp	r3, #255	; 0xff
 800a346:	f000 8174 	beq.w	800a632 <USBD_StdEPReq+0x32e>
 800a34a:	7b7b      	ldrb	r3, [r7, #13]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f040 8170 	bne.w	800a632 <USBD_StdEPReq+0x32e>
 800a352:	7b7a      	ldrb	r2, [r7, #13]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800a35a:	7b7a      	ldrb	r2, [r7, #13]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	32ae      	adds	r2, #174	; 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 8163 	beq.w	800a632 <USBD_StdEPReq+0x32e>
 800a36c:	7b7a      	ldrb	r2, [r7, #13]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	32ae      	adds	r2, #174	; 0xae
 800a372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
 800a37e:	4603      	mov	r3, r0
 800a380:	73fb      	strb	r3, [r7, #15]
 800a382:	e156      	b.n	800a632 <USBD_StdEPReq+0x32e>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d008      	beq.n	800a39e <USBD_StdEPReq+0x9a>
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	f300 8145 	bgt.w	800a61c <USBD_StdEPReq+0x318>
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 809b 	beq.w	800a4ce <USBD_StdEPReq+0x1ca>
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d03c      	beq.n	800a416 <USBD_StdEPReq+0x112>
 800a39c:	e13e      	b.n	800a61c <USBD_StdEPReq+0x318>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d002      	beq.n	800a3b0 <USBD_StdEPReq+0xac>
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d016      	beq.n	800a3dc <USBD_StdEPReq+0xd8>
 800a3ae:	e02c      	b.n	800a40a <USBD_StdEPReq+0x106>
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00d      	beq.n	800a3d2 <USBD_StdEPReq+0xce>
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	2b80      	cmp	r3, #128	; 0x80
 800a3ba:	d00a      	beq.n	800a3d2 <USBD_StdEPReq+0xce>
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f001 f9a1 	bl	800b708 <USBD_LL_StallEP>
 800a3c6:	2180      	movs	r1, #128	; 0x80
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f001 f99d 	bl	800b708 <USBD_LL_StallEP>
 800a3ce:	bf00      	nop
 800a3d0:	e020      	b.n	800a414 <USBD_StdEPReq+0x110>
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fca4 	bl	800ad22 <USBD_CtlError>
 800a3da:	e01b      	b.n	800a414 <USBD_StdEPReq+0x110>
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	885b      	ldrh	r3, [r3, #2]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10e      	bne.n	800a402 <USBD_StdEPReq+0xfe>
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00b      	beq.n	800a402 <USBD_StdEPReq+0xfe>
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
 800a3ec:	2b80      	cmp	r3, #128	; 0x80
 800a3ee:	d008      	beq.n	800a402 <USBD_StdEPReq+0xfe>
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	88db      	ldrh	r3, [r3, #6]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d104      	bne.n	800a402 <USBD_StdEPReq+0xfe>
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f001 f983 	bl	800b708 <USBD_LL_StallEP>
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fd58 	bl	800aeb8 <USBD_CtlSendStatus>
 800a408:	e004      	b.n	800a414 <USBD_StdEPReq+0x110>
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fc88 	bl	800ad22 <USBD_CtlError>
 800a412:	bf00      	nop
 800a414:	e107      	b.n	800a626 <USBD_StdEPReq+0x322>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d002      	beq.n	800a428 <USBD_StdEPReq+0x124>
 800a422:	2b03      	cmp	r3, #3
 800a424:	d016      	beq.n	800a454 <USBD_StdEPReq+0x150>
 800a426:	e04b      	b.n	800a4c0 <USBD_StdEPReq+0x1bc>
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00d      	beq.n	800a44a <USBD_StdEPReq+0x146>
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	2b80      	cmp	r3, #128	; 0x80
 800a432:	d00a      	beq.n	800a44a <USBD_StdEPReq+0x146>
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f001 f965 	bl	800b708 <USBD_LL_StallEP>
 800a43e:	2180      	movs	r1, #128	; 0x80
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 f961 	bl	800b708 <USBD_LL_StallEP>
 800a446:	bf00      	nop
 800a448:	e040      	b.n	800a4cc <USBD_StdEPReq+0x1c8>
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fc68 	bl	800ad22 <USBD_CtlError>
 800a452:	e03b      	b.n	800a4cc <USBD_StdEPReq+0x1c8>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	885b      	ldrh	r3, [r3, #2]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d136      	bne.n	800a4ca <USBD_StdEPReq+0x1c6>
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a462:	2b00      	cmp	r3, #0
 800a464:	d004      	beq.n	800a470 <USBD_StdEPReq+0x16c>
 800a466:	7bbb      	ldrb	r3, [r7, #14]
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f001 f96b 	bl	800b746 <USBD_LL_ClearStallEP>
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fd21 	bl	800aeb8 <USBD_CtlSendStatus>
 800a476:	7bbb      	ldrb	r3, [r7, #14]
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff fde2 	bl	800a044 <USBD_CoreFindEP>
 800a480:	4603      	mov	r3, r0
 800a482:	737b      	strb	r3, [r7, #13]
 800a484:	7b7b      	ldrb	r3, [r7, #13]
 800a486:	2bff      	cmp	r3, #255	; 0xff
 800a488:	d01f      	beq.n	800a4ca <USBD_StdEPReq+0x1c6>
 800a48a:	7b7b      	ldrb	r3, [r7, #13]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d11c      	bne.n	800a4ca <USBD_StdEPReq+0x1c6>
 800a490:	7b7a      	ldrb	r2, [r7, #13]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800a498:	7b7a      	ldrb	r2, [r7, #13]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	32ae      	adds	r2, #174	; 0xae
 800a49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d010      	beq.n	800a4ca <USBD_StdEPReq+0x1c6>
 800a4a8:	7b7a      	ldrb	r2, [r7, #13]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	32ae      	adds	r2, #174	; 0xae
 800a4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	4798      	blx	r3
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73fb      	strb	r3, [r7, #15]
 800a4be:	e004      	b.n	800a4ca <USBD_StdEPReq+0x1c6>
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fc2d 	bl	800ad22 <USBD_CtlError>
 800a4c8:	e000      	b.n	800a4cc <USBD_StdEPReq+0x1c8>
 800a4ca:	bf00      	nop
 800a4cc:	e0ab      	b.n	800a626 <USBD_StdEPReq+0x322>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d002      	beq.n	800a4e0 <USBD_StdEPReq+0x1dc>
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d032      	beq.n	800a544 <USBD_StdEPReq+0x240>
 800a4de:	e097      	b.n	800a610 <USBD_StdEPReq+0x30c>
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d007      	beq.n	800a4f6 <USBD_StdEPReq+0x1f2>
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	2b80      	cmp	r3, #128	; 0x80
 800a4ea:	d004      	beq.n	800a4f6 <USBD_StdEPReq+0x1f2>
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fc17 	bl	800ad22 <USBD_CtlError>
 800a4f4:	e091      	b.n	800a61a <USBD_StdEPReq+0x316>
 800a4f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da0b      	bge.n	800a516 <USBD_StdEPReq+0x212>
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a504:	4613      	mov	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	3310      	adds	r3, #16
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4413      	add	r3, r2
 800a512:	3304      	adds	r3, #4
 800a514:	e00b      	b.n	800a52e <USBD_StdEPReq+0x22a>
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	4413      	add	r3, r2
 800a52c:	3304      	adds	r3, #4
 800a52e:	60bb      	str	r3, [r7, #8]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2202      	movs	r2, #2
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fc61 	bl	800ae04 <USBD_CtlSendData>
 800a542:	e06a      	b.n	800a61a <USBD_StdEPReq+0x316>
 800a544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da11      	bge.n	800a570 <USBD_StdEPReq+0x26c>
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	f003 020f 	and.w	r2, r3, #15
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	440b      	add	r3, r1
 800a55e:	3324      	adds	r3, #36	; 0x24
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d117      	bne.n	800a596 <USBD_StdEPReq+0x292>
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fbda 	bl	800ad22 <USBD_CtlError>
 800a56e:	e054      	b.n	800a61a <USBD_StdEPReq+0x316>
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	f003 020f 	and.w	r2, r3, #15
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	4613      	mov	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d104      	bne.n	800a596 <USBD_StdEPReq+0x292>
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fbc7 	bl	800ad22 <USBD_CtlError>
 800a594:	e041      	b.n	800a61a <USBD_StdEPReq+0x316>
 800a596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	da0b      	bge.n	800a5b6 <USBD_StdEPReq+0x2b2>
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	3310      	adds	r3, #16
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	e00b      	b.n	800a5ce <USBD_StdEPReq+0x2ca>
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	60bb      	str	r3, [r7, #8]
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <USBD_StdEPReq+0x2d8>
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	2b80      	cmp	r3, #128	; 0x80
 800a5da:	d103      	bne.n	800a5e4 <USBD_StdEPReq+0x2e0>
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e00e      	b.n	800a602 <USBD_StdEPReq+0x2fe>
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 f8cb 	bl	800b784 <USBD_LL_IsStallEP>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <USBD_StdEPReq+0x2f8>
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	e002      	b.n	800a602 <USBD_StdEPReq+0x2fe>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2202      	movs	r2, #2
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fbfb 	bl	800ae04 <USBD_CtlSendData>
 800a60e:	e004      	b.n	800a61a <USBD_StdEPReq+0x316>
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fb85 	bl	800ad22 <USBD_CtlError>
 800a618:	bf00      	nop
 800a61a:	e004      	b.n	800a626 <USBD_StdEPReq+0x322>
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fb7f 	bl	800ad22 <USBD_CtlError>
 800a624:	bf00      	nop
 800a626:	e005      	b.n	800a634 <USBD_StdEPReq+0x330>
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fb79 	bl	800ad22 <USBD_CtlError>
 800a630:	e000      	b.n	800a634 <USBD_StdEPReq+0x330>
 800a632:	bf00      	nop
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <USBD_GetDescriptor>:
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
 800a64a:	2300      	movs	r3, #0
 800a64c:	813b      	strh	r3, [r7, #8]
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	2300      	movs	r3, #0
 800a654:	72fb      	strb	r3, [r7, #11]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	885b      	ldrh	r3, [r3, #2]
 800a65a:	0a1b      	lsrs	r3, r3, #8
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3b01      	subs	r3, #1
 800a660:	2b0e      	cmp	r3, #14
 800a662:	f200 8152 	bhi.w	800a90a <USBD_GetDescriptor+0x2ca>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <USBD_GetDescriptor+0x2c>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a6dd 	.word	0x0800a6dd
 800a670:	0800a6f5 	.word	0x0800a6f5
 800a674:	0800a735 	.word	0x0800a735
 800a678:	0800a90b 	.word	0x0800a90b
 800a67c:	0800a90b 	.word	0x0800a90b
 800a680:	0800a8ab 	.word	0x0800a8ab
 800a684:	0800a8d7 	.word	0x0800a8d7
 800a688:	0800a90b 	.word	0x0800a90b
 800a68c:	0800a90b 	.word	0x0800a90b
 800a690:	0800a90b 	.word	0x0800a90b
 800a694:	0800a90b 	.word	0x0800a90b
 800a698:	0800a90b 	.word	0x0800a90b
 800a69c:	0800a90b 	.word	0x0800a90b
 800a6a0:	0800a90b 	.word	0x0800a90b
 800a6a4:	0800a6a9 	.word	0x0800a6a9
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <USBD_GetDescriptor+0x8c>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	7c12      	ldrb	r2, [r2, #16]
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	e126      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fb27 	bl	800ad22 <USBD_CtlError>
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	72fb      	strb	r3, [r7, #11]
 800a6da:	e11e      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	7c12      	ldrb	r2, [r2, #16]
 800a6e8:	f107 0108 	add.w	r1, r7, #8
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	4798      	blx	r3
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	e112      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	7c1b      	ldrb	r3, [r3, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10d      	bne.n	800a718 <USBD_GetDescriptor+0xd8>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a704:	f107 0208 	add.w	r2, r7, #8
 800a708:	4610      	mov	r0, r2
 800a70a:	4798      	blx	r3
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	2202      	movs	r2, #2
 800a714:	701a      	strb	r2, [r3, #0]
 800a716:	e100      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	f107 0208 	add.w	r2, r7, #8
 800a724:	4610      	mov	r0, r2
 800a726:	4798      	blx	r3
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3301      	adds	r3, #1
 800a72e:	2202      	movs	r2, #2
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	e0f2      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	885b      	ldrh	r3, [r3, #2]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	f200 80ac 	bhi.w	800a898 <USBD_GetDescriptor+0x258>
 800a740:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <USBD_GetDescriptor+0x108>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a761 	.word	0x0800a761
 800a74c:	0800a795 	.word	0x0800a795
 800a750:	0800a7c9 	.word	0x0800a7c9
 800a754:	0800a7fd 	.word	0x0800a7fd
 800a758:	0800a831 	.word	0x0800a831
 800a75c:	0800a865 	.word	0x0800a865
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00b      	beq.n	800a784 <USBD_GetDescriptor+0x144>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	7c12      	ldrb	r2, [r2, #16]
 800a778:	f107 0108 	add.w	r1, r7, #8
 800a77c:	4610      	mov	r0, r2
 800a77e:	4798      	blx	r3
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	e091      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 facb 	bl	800ad22 <USBD_CtlError>
 800a78c:	7afb      	ldrb	r3, [r7, #11]
 800a78e:	3301      	adds	r3, #1
 800a790:	72fb      	strb	r3, [r7, #11]
 800a792:	e089      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00b      	beq.n	800a7b8 <USBD_GetDescriptor+0x178>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	7c12      	ldrb	r2, [r2, #16]
 800a7ac:	f107 0108 	add.w	r1, r7, #8
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4798      	blx	r3
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	e077      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fab1 	bl	800ad22 <USBD_CtlError>
 800a7c0:	7afb      	ldrb	r3, [r7, #11]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	72fb      	strb	r3, [r7, #11]
 800a7c6:	e06f      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00b      	beq.n	800a7ec <USBD_GetDescriptor+0x1ac>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	7c12      	ldrb	r2, [r2, #16]
 800a7e0:	f107 0108 	add.w	r1, r7, #8
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	4798      	blx	r3
 800a7e8:	60f8      	str	r0, [r7, #12]
 800a7ea:	e05d      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fa97 	bl	800ad22 <USBD_CtlError>
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	72fb      	strb	r3, [r7, #11]
 800a7fa:	e055      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00b      	beq.n	800a820 <USBD_GetDescriptor+0x1e0>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	7c12      	ldrb	r2, [r2, #16]
 800a814:	f107 0108 	add.w	r1, r7, #8
 800a818:	4610      	mov	r0, r2
 800a81a:	4798      	blx	r3
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	e043      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fa7d 	bl	800ad22 <USBD_CtlError>
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	3301      	adds	r3, #1
 800a82c:	72fb      	strb	r3, [r7, #11]
 800a82e:	e03b      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a836:	695b      	ldr	r3, [r3, #20]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00b      	beq.n	800a854 <USBD_GetDescriptor+0x214>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	7c12      	ldrb	r2, [r2, #16]
 800a848:	f107 0108 	add.w	r1, r7, #8
 800a84c:	4610      	mov	r0, r2
 800a84e:	4798      	blx	r3
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	e029      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fa63 	bl	800ad22 <USBD_CtlError>
 800a85c:	7afb      	ldrb	r3, [r7, #11]
 800a85e:	3301      	adds	r3, #1
 800a860:	72fb      	strb	r3, [r7, #11]
 800a862:	e021      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00b      	beq.n	800a888 <USBD_GetDescriptor+0x248>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	7c12      	ldrb	r2, [r2, #16]
 800a87c:	f107 0108 	add.w	r1, r7, #8
 800a880:	4610      	mov	r0, r2
 800a882:	4798      	blx	r3
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	e00f      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa49 	bl	800ad22 <USBD_CtlError>
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	3301      	adds	r3, #1
 800a894:	72fb      	strb	r3, [r7, #11]
 800a896:	e007      	b.n	800a8a8 <USBD_GetDescriptor+0x268>
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fa41 	bl	800ad22 <USBD_CtlError>
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	72fb      	strb	r3, [r7, #11]
 800a8a6:	bf00      	nop
 800a8a8:	e037      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	7c1b      	ldrb	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d109      	bne.n	800a8c6 <USBD_GetDescriptor+0x286>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ba:	f107 0208 	add.w	r2, r7, #8
 800a8be:	4610      	mov	r0, r2
 800a8c0:	4798      	blx	r3
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	e029      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fa2a 	bl	800ad22 <USBD_CtlError>
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	72fb      	strb	r3, [r7, #11]
 800a8d4:	e021      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7c1b      	ldrb	r3, [r3, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10d      	bne.n	800a8fa <USBD_GetDescriptor+0x2ba>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e6:	f107 0208 	add.w	r2, r7, #8
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	4798      	blx	r3
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	2207      	movs	r2, #7
 800a8f6:	701a      	strb	r2, [r3, #0]
 800a8f8:	e00f      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fa10 	bl	800ad22 <USBD_CtlError>
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	3301      	adds	r3, #1
 800a906:	72fb      	strb	r3, [r7, #11]
 800a908:	e007      	b.n	800a91a <USBD_GetDescriptor+0x2da>
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fa08 	bl	800ad22 <USBD_CtlError>
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	3301      	adds	r3, #1
 800a916:	72fb      	strb	r3, [r7, #11]
 800a918:	bf00      	nop
 800a91a:	7afb      	ldrb	r3, [r7, #11]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d11e      	bne.n	800a95e <USBD_GetDescriptor+0x31e>
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	88db      	ldrh	r3, [r3, #6]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d016      	beq.n	800a956 <USBD_GetDescriptor+0x316>
 800a928:	893b      	ldrh	r3, [r7, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00e      	beq.n	800a94c <USBD_GetDescriptor+0x30c>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	88da      	ldrh	r2, [r3, #6]
 800a932:	893b      	ldrh	r3, [r7, #8]
 800a934:	4293      	cmp	r3, r2
 800a936:	bf28      	it	cs
 800a938:	4613      	movcs	r3, r2
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	813b      	strh	r3, [r7, #8]
 800a93e:	893b      	ldrh	r3, [r7, #8]
 800a940:	461a      	mov	r2, r3
 800a942:	68f9      	ldr	r1, [r7, #12]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fa5d 	bl	800ae04 <USBD_CtlSendData>
 800a94a:	e009      	b.n	800a960 <USBD_GetDescriptor+0x320>
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f9e7 	bl	800ad22 <USBD_CtlError>
 800a954:	e004      	b.n	800a960 <USBD_GetDescriptor+0x320>
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 faae 	bl	800aeb8 <USBD_CtlSendStatus>
 800a95c:	e000      	b.n	800a960 <USBD_GetDescriptor+0x320>
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop

0800a968 <USBD_SetAddress>:
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	889b      	ldrh	r3, [r3, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d131      	bne.n	800a9de <USBD_SetAddress+0x76>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	88db      	ldrh	r3, [r3, #6]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d12d      	bne.n	800a9de <USBD_SetAddress+0x76>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	885b      	ldrh	r3, [r3, #2]
 800a986:	2b7f      	cmp	r3, #127	; 0x7f
 800a988:	d829      	bhi.n	800a9de <USBD_SetAddress+0x76>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	885b      	ldrh	r3, [r3, #2]
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a994:	73fb      	strb	r3, [r7, #15]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d104      	bne.n	800a9ac <USBD_SetAddress+0x44>
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f9bc 	bl	800ad22 <USBD_CtlError>
 800a9aa:	e01d      	b.n	800a9e8 <USBD_SetAddress+0x80>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7bfa      	ldrb	r2, [r7, #15]
 800a9b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 ff10 	bl	800b7de <USBD_LL_SetUSBAddress>
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fa7a 	bl	800aeb8 <USBD_CtlSendStatus>
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <USBD_SetAddress+0x6c>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800a9d2:	e009      	b.n	800a9e8 <USBD_SetAddress+0x80>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800a9dc:	e004      	b.n	800a9e8 <USBD_SetAddress+0x80>
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f99e 	bl	800ad22 <USBD_CtlError>
 800a9e6:	bf00      	nop
 800a9e8:	bf00      	nop
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_SetConfig>:
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73fb      	strb	r3, [r7, #15]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	885b      	ldrh	r3, [r3, #2]
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	4b4e      	ldr	r3, [pc, #312]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa06:	701a      	strb	r2, [r3, #0]
 800aa08:	4b4d      	ldr	r3, [pc, #308]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d905      	bls.n	800aa1c <USBD_SetConfig+0x2c>
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f985 	bl	800ad22 <USBD_CtlError>
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e08c      	b.n	800ab36 <USBD_SetConfig+0x146>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d002      	beq.n	800aa2e <USBD_SetConfig+0x3e>
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d029      	beq.n	800aa80 <USBD_SetConfig+0x90>
 800aa2c:	e075      	b.n	800ab1a <USBD_SetConfig+0x12a>
 800aa2e:	4b44      	ldr	r3, [pc, #272]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d020      	beq.n	800aa78 <USBD_SetConfig+0x88>
 800aa36:	4b42      	ldr	r3, [pc, #264]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	605a      	str	r2, [r3, #4]
 800aa40:	4b3f      	ldr	r3, [pc, #252]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff f849 	bl	8009ade <USBD_SetClassConfig>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d008      	beq.n	800aa68 <USBD_SetConfig+0x78>
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f962 	bl	800ad22 <USBD_CtlError>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2202      	movs	r2, #2
 800aa62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800aa66:	e065      	b.n	800ab34 <USBD_SetConfig+0x144>
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fa25 	bl	800aeb8 <USBD_CtlSendStatus>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2203      	movs	r2, #3
 800aa72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800aa76:	e05d      	b.n	800ab34 <USBD_SetConfig+0x144>
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fa1d 	bl	800aeb8 <USBD_CtlSendStatus>
 800aa7e:	e059      	b.n	800ab34 <USBD_SetConfig+0x144>
 800aa80:	4b2f      	ldr	r3, [pc, #188]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d112      	bne.n	800aaae <USBD_SetConfig+0xbe>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800aa90:	4b2b      	ldr	r3, [pc, #172]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	4b29      	ldr	r3, [pc, #164]	; (800ab40 <USBD_SetConfig+0x150>)
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff f838 	bl	8009b16 <USBD_ClrClassConfig>
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fa06 	bl	800aeb8 <USBD_CtlSendStatus>
 800aaac:	e042      	b.n	800ab34 <USBD_SetConfig+0x144>
 800aaae:	4b24      	ldr	r3, [pc, #144]	; (800ab40 <USBD_SetConfig+0x150>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d02a      	beq.n	800ab12 <USBD_SetConfig+0x122>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7ff f826 	bl	8009b16 <USBD_ClrClassConfig>
 800aaca:	4b1d      	ldr	r3, [pc, #116]	; (800ab40 <USBD_SetConfig+0x150>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	605a      	str	r2, [r3, #4]
 800aad4:	4b1a      	ldr	r3, [pc, #104]	; (800ab40 <USBD_SetConfig+0x150>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7fe ffff 	bl	8009ade <USBD_SetClassConfig>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00f      	beq.n	800ab0a <USBD_SetConfig+0x11a>
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f918 	bl	800ad22 <USBD_CtlError>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff f80b 	bl	8009b16 <USBD_ClrClassConfig>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2202      	movs	r2, #2
 800ab04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800ab08:	e014      	b.n	800ab34 <USBD_SetConfig+0x144>
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f9d4 	bl	800aeb8 <USBD_CtlSendStatus>
 800ab10:	e010      	b.n	800ab34 <USBD_SetConfig+0x144>
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f9d0 	bl	800aeb8 <USBD_CtlSendStatus>
 800ab18:	e00c      	b.n	800ab34 <USBD_SetConfig+0x144>
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f900 	bl	800ad22 <USBD_CtlError>
 800ab22:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <USBD_SetConfig+0x150>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7fe fff4 	bl	8009b16 <USBD_ClrClassConfig>
 800ab2e:	2303      	movs	r3, #3
 800ab30:	73fb      	strb	r3, [r7, #15]
 800ab32:	bf00      	nop
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	200002c4 	.word	0x200002c4

0800ab44 <USBD_GetConfig>:
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	88db      	ldrh	r3, [r3, #6]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d004      	beq.n	800ab60 <USBD_GetConfig+0x1c>
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f8e2 	bl	800ad22 <USBD_CtlError>
 800ab5e:	e023      	b.n	800aba8 <USBD_GetConfig+0x64>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	dc02      	bgt.n	800ab72 <USBD_GetConfig+0x2e>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dc03      	bgt.n	800ab78 <USBD_GetConfig+0x34>
 800ab70:	e015      	b.n	800ab9e <USBD_GetConfig+0x5a>
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d00b      	beq.n	800ab8e <USBD_GetConfig+0x4a>
 800ab76:	e012      	b.n	800ab9e <USBD_GetConfig+0x5a>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	609a      	str	r2, [r3, #8]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3308      	adds	r3, #8
 800ab82:	2201      	movs	r2, #1
 800ab84:	4619      	mov	r1, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f93c 	bl	800ae04 <USBD_CtlSendData>
 800ab8c:	e00c      	b.n	800aba8 <USBD_GetConfig+0x64>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3304      	adds	r3, #4
 800ab92:	2201      	movs	r2, #1
 800ab94:	4619      	mov	r1, r3
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f934 	bl	800ae04 <USBD_CtlSendData>
 800ab9c:	e004      	b.n	800aba8 <USBD_GetConfig+0x64>
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f8be 	bl	800ad22 <USBD_CtlError>
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_GetStatus>:
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	3b01      	subs	r3, #1
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d81e      	bhi.n	800ac06 <USBD_GetStatus+0x56>
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	88db      	ldrh	r3, [r3, #6]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d004      	beq.n	800abda <USBD_GetStatus+0x2a>
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f8a5 	bl	800ad22 <USBD_CtlError>
 800abd8:	e01a      	b.n	800ac10 <USBD_GetStatus+0x60>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	60da      	str	r2, [r3, #12]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <USBD_GetStatus+0x46>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f043 0202 	orr.w	r2, r3, #2
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	60da      	str	r2, [r3, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	330c      	adds	r3, #12
 800abfa:	2202      	movs	r2, #2
 800abfc:	4619      	mov	r1, r3
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f900 	bl	800ae04 <USBD_CtlSendData>
 800ac04:	e004      	b.n	800ac10 <USBD_GetStatus+0x60>
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f88a 	bl	800ad22 <USBD_CtlError>
 800ac0e:	bf00      	nop
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_SetFeature>:
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	885b      	ldrh	r3, [r3, #2]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d107      	bne.n	800ac3a <USBD_SetFeature+0x22>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f940 	bl	800aeb8 <USBD_CtlSendStatus>
 800ac38:	e013      	b.n	800ac62 <USBD_SetFeature+0x4a>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	885b      	ldrh	r3, [r3, #2]
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d10b      	bne.n	800ac5a <USBD_SetFeature+0x42>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	889b      	ldrh	r3, [r3, #4]
 800ac46:	0a1b      	lsrs	r3, r3, #8
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f930 	bl	800aeb8 <USBD_CtlSendStatus>
 800ac58:	e003      	b.n	800ac62 <USBD_SetFeature+0x4a>
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f860 	bl	800ad22 <USBD_CtlError>
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_ClrFeature>:
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d80b      	bhi.n	800ac9a <USBD_ClrFeature+0x30>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	885b      	ldrh	r3, [r3, #2]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d10c      	bne.n	800aca4 <USBD_ClrFeature+0x3a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f910 	bl	800aeb8 <USBD_CtlSendStatus>
 800ac98:	e004      	b.n	800aca4 <USBD_ClrFeature+0x3a>
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f840 	bl	800ad22 <USBD_CtlError>
 800aca2:	e000      	b.n	800aca6 <USBD_ClrFeature+0x3c>
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_ParseSetupRequest>:
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	781a      	ldrb	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	701a      	strb	r2, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	781a      	ldrb	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	705a      	strb	r2, [r3, #1]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3301      	adds	r3, #1
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f7ff fa17 	bl	800a10c <SWAPBYTE>
 800acde:	4603      	mov	r3, r0
 800ace0:	461a      	mov	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	805a      	strh	r2, [r3, #2]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3301      	adds	r3, #1
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7ff fa0a 	bl	800a10c <SWAPBYTE>
 800acf8:	4603      	mov	r3, r0
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	809a      	strh	r2, [r3, #4]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7ff f9fd 	bl	800a10c <SWAPBYTE>
 800ad12:	4603      	mov	r3, r0
 800ad14:	461a      	mov	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	80da      	strh	r2, [r3, #6]
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_CtlError>:
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
 800ad2c:	2180      	movs	r1, #128	; 0x80
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fcea 	bl	800b708 <USBD_LL_StallEP>
 800ad34:	2100      	movs	r1, #0
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fce6 	bl	800b708 <USBD_LL_StallEP>
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_GetString>:
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	2300      	movs	r3, #0
 800ad52:	75fb      	strb	r3, [r7, #23]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d036      	beq.n	800adc8 <USBD_GetString+0x84>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	613b      	str	r3, [r7, #16]
 800ad5e:	6938      	ldr	r0, [r7, #16]
 800ad60:	f000 f836 	bl	800add0 <USBD_GetLen>
 800ad64:	4603      	mov	r3, r0
 800ad66:	3301      	adds	r3, #1
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	801a      	strh	r2, [r3, #0]
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	4413      	add	r3, r2
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	7812      	ldrb	r2, [r2, #0]
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	3301      	adds	r3, #1
 800ad82:	75fb      	strb	r3, [r7, #23]
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	4413      	add	r3, r2
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	3301      	adds	r3, #1
 800ad92:	75fb      	strb	r3, [r7, #23]
 800ad94:	e013      	b.n	800adbe <USBD_GetString+0x7a>
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	3301      	adds	r3, #1
 800ada6:	613b      	str	r3, [r7, #16]
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	3301      	adds	r3, #1
 800adac:	75fb      	strb	r3, [r7, #23]
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	4413      	add	r3, r2
 800adb4:	2200      	movs	r2, #0
 800adb6:	701a      	strb	r2, [r3, #0]
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	3301      	adds	r3, #1
 800adbc:	75fb      	strb	r3, [r7, #23]
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e7      	bne.n	800ad96 <USBD_GetString+0x52>
 800adc6:	e000      	b.n	800adca <USBD_GetString+0x86>
 800adc8:	bf00      	nop
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_GetLen>:
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60bb      	str	r3, [r7, #8]
 800ade0:	e005      	b.n	800adee <USBD_GetLen+0x1e>
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
 800ade4:	3301      	adds	r3, #1
 800ade6:	73fb      	strb	r3, [r7, #15]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	3301      	adds	r3, #1
 800adec:	60bb      	str	r3, [r7, #8]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1f5      	bne.n	800ade2 <USBD_GetLen+0x12>
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USBD_CtlSendData>:
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2202      	movs	r2, #2
 800ae14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	619a      	str	r2, [r3, #24]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	61da      	str	r2, [r3, #28]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	2100      	movs	r1, #0
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 fcf6 	bl	800b81c <USBD_LL_Transmit>
 800ae30:	2300      	movs	r3, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBD_CtlContinueSendData>:
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	607a      	str	r2, [r7, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 fce5 	bl	800b81c <USBD_LL_Transmit>
 800ae52:	2300      	movs	r3, #0
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_CtlPrepareRx>:
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2203      	movs	r2, #3
 800ae6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	2100      	movs	r1, #0
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 fce9 	bl	800b85e <USBD_LL_PrepareReceive>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_CtlContinueRx>:
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	2100      	movs	r1, #0
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 fcd8 	bl	800b85e <USBD_LL_PrepareReceive>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_CtlSendStatus>:
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2204      	movs	r2, #4
 800aec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800aec8:	2300      	movs	r3, #0
 800aeca:	2200      	movs	r2, #0
 800aecc:	2100      	movs	r1, #0
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fca4 	bl	800b81c <USBD_LL_Transmit>
 800aed4:	2300      	movs	r3, #0
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_CtlReceiveStatus>:
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2205      	movs	r2, #5
 800aeea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800aeee:	2300      	movs	r3, #0
 800aef0:	2200      	movs	r2, #0
 800aef2:	2100      	movs	r1, #0
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fcb2 	bl	800b85e <USBD_LL_PrepareReceive>
 800aefa:	2300      	movs	r3, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <MX_USB_Device_Init>:
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
 800af08:	2200      	movs	r2, #0
 800af0a:	4912      	ldr	r1, [pc, #72]	; (800af54 <MX_USB_Device_Init+0x50>)
 800af0c:	4812      	ldr	r0, [pc, #72]	; (800af58 <MX_USB_Device_Init+0x54>)
 800af0e:	f7fe fd69 	bl	80099e4 <USBD_Init>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <MX_USB_Device_Init+0x18>
 800af18:	f7f5 fd60 	bl	80009dc <Error_Handler>
 800af1c:	490f      	ldr	r1, [pc, #60]	; (800af5c <MX_USB_Device_Init+0x58>)
 800af1e:	480e      	ldr	r0, [pc, #56]	; (800af58 <MX_USB_Device_Init+0x54>)
 800af20:	f7fe fd90 	bl	8009a44 <USBD_RegisterClass>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <MX_USB_Device_Init+0x2a>
 800af2a:	f7f5 fd57 	bl	80009dc <Error_Handler>
 800af2e:	490c      	ldr	r1, [pc, #48]	; (800af60 <MX_USB_Device_Init+0x5c>)
 800af30:	4809      	ldr	r0, [pc, #36]	; (800af58 <MX_USB_Device_Init+0x54>)
 800af32:	f7fe fc87 	bl	8009844 <USBD_CDC_RegisterInterface>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <MX_USB_Device_Init+0x3c>
 800af3c:	f7f5 fd4e 	bl	80009dc <Error_Handler>
 800af40:	4805      	ldr	r0, [pc, #20]	; (800af58 <MX_USB_Device_Init+0x54>)
 800af42:	f7fe fdb5 	bl	8009ab0 <USBD_Start>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <MX_USB_Device_Init+0x4c>
 800af4c:	f7f5 fd46 	bl	80009dc <Error_Handler>
 800af50:	bf00      	nop
 800af52:	bd80      	pop	{r7, pc}
 800af54:	200000b8 	.word	0x200000b8
 800af58:	200002c8 	.word	0x200002c8
 800af5c:	20000024 	.word	0x20000024
 800af60:	200000a4 	.word	0x200000a4

0800af64 <CDC_Init_FS>:
 800af64:	b580      	push	{r7, lr}
 800af66:	af00      	add	r7, sp, #0
 800af68:	2200      	movs	r2, #0
 800af6a:	4905      	ldr	r1, [pc, #20]	; (800af80 <CDC_Init_FS+0x1c>)
 800af6c:	4805      	ldr	r0, [pc, #20]	; (800af84 <CDC_Init_FS+0x20>)
 800af6e:	f7fe fc83 	bl	8009878 <USBD_CDC_SetTxBuffer>
 800af72:	4905      	ldr	r1, [pc, #20]	; (800af88 <CDC_Init_FS+0x24>)
 800af74:	4803      	ldr	r0, [pc, #12]	; (800af84 <CDC_Init_FS+0x20>)
 800af76:	f7fe fca1 	bl	80098bc <USBD_CDC_SetRxBuffer>
 800af7a:	2300      	movs	r3, #0
 800af7c:	4618      	mov	r0, r3
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20000da4 	.word	0x20000da4
 800af84:	200002c8 	.word	0x200002c8
 800af88:	200005a4 	.word	0x200005a4

0800af8c <CDC_DeInit_FS>:
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
 800af90:	2300      	movs	r3, #0
 800af92:	4618      	mov	r0, r3
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <CDC_Control_FS>:
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	71fb      	strb	r3, [r7, #7]
 800afa8:	4613      	mov	r3, r2
 800afaa:	80bb      	strh	r3, [r7, #4]
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	2b23      	cmp	r3, #35	; 0x23
 800afb0:	d84a      	bhi.n	800b048 <CDC_Control_FS+0xac>
 800afb2:	a201      	add	r2, pc, #4	; (adr r2, 800afb8 <CDC_Control_FS+0x1c>)
 800afb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb8:	0800b049 	.word	0x0800b049
 800afbc:	0800b049 	.word	0x0800b049
 800afc0:	0800b049 	.word	0x0800b049
 800afc4:	0800b049 	.word	0x0800b049
 800afc8:	0800b049 	.word	0x0800b049
 800afcc:	0800b049 	.word	0x0800b049
 800afd0:	0800b049 	.word	0x0800b049
 800afd4:	0800b049 	.word	0x0800b049
 800afd8:	0800b049 	.word	0x0800b049
 800afdc:	0800b049 	.word	0x0800b049
 800afe0:	0800b049 	.word	0x0800b049
 800afe4:	0800b049 	.word	0x0800b049
 800afe8:	0800b049 	.word	0x0800b049
 800afec:	0800b049 	.word	0x0800b049
 800aff0:	0800b049 	.word	0x0800b049
 800aff4:	0800b049 	.word	0x0800b049
 800aff8:	0800b049 	.word	0x0800b049
 800affc:	0800b049 	.word	0x0800b049
 800b000:	0800b049 	.word	0x0800b049
 800b004:	0800b049 	.word	0x0800b049
 800b008:	0800b049 	.word	0x0800b049
 800b00c:	0800b049 	.word	0x0800b049
 800b010:	0800b049 	.word	0x0800b049
 800b014:	0800b049 	.word	0x0800b049
 800b018:	0800b049 	.word	0x0800b049
 800b01c:	0800b049 	.word	0x0800b049
 800b020:	0800b049 	.word	0x0800b049
 800b024:	0800b049 	.word	0x0800b049
 800b028:	0800b049 	.word	0x0800b049
 800b02c:	0800b049 	.word	0x0800b049
 800b030:	0800b049 	.word	0x0800b049
 800b034:	0800b049 	.word	0x0800b049
 800b038:	0800b049 	.word	0x0800b049
 800b03c:	0800b049 	.word	0x0800b049
 800b040:	0800b049 	.word	0x0800b049
 800b044:	0800b049 	.word	0x0800b049
 800b048:	bf00      	nop
 800b04a:	2300      	movs	r3, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <CDC_Receive_FS>:
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4805      	ldr	r0, [pc, #20]	; (800b07c <CDC_Receive_FS+0x24>)
 800b066:	f7fe fc29 	bl	80098bc <USBD_CDC_SetRxBuffer>
 800b06a:	4804      	ldr	r0, [pc, #16]	; (800b07c <CDC_Receive_FS+0x24>)
 800b06c:	f7fe fc84 	bl	8009978 <USBD_CDC_ReceivePacket>
 800b070:	2300      	movs	r3, #0
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	200002c8 	.word	0x200002c8

0800b080 <CDC_Transmit_FS>:
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	807b      	strh	r3, [r7, #2]
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
 800b090:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <CDC_Transmit_FS+0x48>)
 800b092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b096:	60bb      	str	r3, [r7, #8]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <CDC_Transmit_FS+0x26>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e00b      	b.n	800b0be <CDC_Transmit_FS+0x3e>
 800b0a6:	887b      	ldrh	r3, [r7, #2]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	4806      	ldr	r0, [pc, #24]	; (800b0c8 <CDC_Transmit_FS+0x48>)
 800b0ae:	f7fe fbe3 	bl	8009878 <USBD_CDC_SetTxBuffer>
 800b0b2:	4805      	ldr	r0, [pc, #20]	; (800b0c8 <CDC_Transmit_FS+0x48>)
 800b0b4:	f7fe fc20 	bl	80098f8 <USBD_CDC_TransmitPacket>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	200002c8 	.word	0x200002c8

0800b0cc <CDC_TransmitCplt_FS>:
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	71fb      	strb	r3, [r7, #7]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	75fb      	strb	r3, [r7, #23]
 800b0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <USBD_CDC_DeviceDescriptor>:
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2212      	movs	r2, #18
 800b100:	801a      	strh	r2, [r3, #0]
 800b102:	4b03      	ldr	r3, [pc, #12]	; (800b110 <USBD_CDC_DeviceDescriptor+0x20>)
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	200000d8 	.word	0x200000d8

0800b114 <USBD_CDC_LangIDStrDescriptor>:
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	6039      	str	r1, [r7, #0]
 800b11e:	71fb      	strb	r3, [r7, #7]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	2204      	movs	r2, #4
 800b124:	801a      	strh	r2, [r3, #0]
 800b126:	4b03      	ldr	r3, [pc, #12]	; (800b134 <USBD_CDC_LangIDStrDescriptor+0x20>)
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	200000ec 	.word	0x200000ec

0800b138 <USBD_CDC_ProductStrDescriptor>:
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	6039      	str	r1, [r7, #0]
 800b142:	71fb      	strb	r3, [r7, #7]
 800b144:	79fb      	ldrb	r3, [r7, #7]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d105      	bne.n	800b156 <USBD_CDC_ProductStrDescriptor+0x1e>
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	4907      	ldr	r1, [pc, #28]	; (800b16c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b14e:	4808      	ldr	r0, [pc, #32]	; (800b170 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b150:	f7ff fdf8 	bl	800ad44 <USBD_GetString>
 800b154:	e004      	b.n	800b160 <USBD_CDC_ProductStrDescriptor+0x28>
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	4904      	ldr	r1, [pc, #16]	; (800b16c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b15a:	4805      	ldr	r0, [pc, #20]	; (800b170 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b15c:	f7ff fdf2 	bl	800ad44 <USBD_GetString>
 800b160:	4b02      	ldr	r3, [pc, #8]	; (800b16c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	200015a4 	.word	0x200015a4
 800b170:	0800ca08 	.word	0x0800ca08

0800b174 <USBD_CDC_ManufacturerStrDescriptor>:
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	4603      	mov	r3, r0
 800b17c:	6039      	str	r1, [r7, #0]
 800b17e:	71fb      	strb	r3, [r7, #7]
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	4904      	ldr	r1, [pc, #16]	; (800b194 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b184:	4804      	ldr	r0, [pc, #16]	; (800b198 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b186:	f7ff fddd 	bl	800ad44 <USBD_GetString>
 800b18a:	4b02      	ldr	r3, [pc, #8]	; (800b194 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	200015a4 	.word	0x200015a4
 800b198:	0800ca20 	.word	0x0800ca20

0800b19c <USBD_CDC_SerialStrDescriptor>:
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	6039      	str	r1, [r7, #0]
 800b1a6:	71fb      	strb	r3, [r7, #7]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	221a      	movs	r2, #26
 800b1ac:	801a      	strh	r2, [r3, #0]
 800b1ae:	f000 f843 	bl	800b238 <Get_SerialNum>
 800b1b2:	4b02      	ldr	r3, [pc, #8]	; (800b1bc <USBD_CDC_SerialStrDescriptor+0x20>)
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	200000f0 	.word	0x200000f0

0800b1c0 <USBD_CDC_ConfigStrDescriptor>:
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	6039      	str	r1, [r7, #0]
 800b1ca:	71fb      	strb	r3, [r7, #7]
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d105      	bne.n	800b1de <USBD_CDC_ConfigStrDescriptor+0x1e>
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	4907      	ldr	r1, [pc, #28]	; (800b1f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b1d6:	4808      	ldr	r0, [pc, #32]	; (800b1f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b1d8:	f7ff fdb4 	bl	800ad44 <USBD_GetString>
 800b1dc:	e004      	b.n	800b1e8 <USBD_CDC_ConfigStrDescriptor+0x28>
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	4904      	ldr	r1, [pc, #16]	; (800b1f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b1e2:	4805      	ldr	r0, [pc, #20]	; (800b1f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b1e4:	f7ff fdae 	bl	800ad44 <USBD_GetString>
 800b1e8:	4b02      	ldr	r3, [pc, #8]	; (800b1f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	200015a4 	.word	0x200015a4
 800b1f8:	0800ca34 	.word	0x0800ca34

0800b1fc <USBD_CDC_InterfaceStrDescriptor>:
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	6039      	str	r1, [r7, #0]
 800b206:	71fb      	strb	r3, [r7, #7]
 800b208:	79fb      	ldrb	r3, [r7, #7]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d105      	bne.n	800b21a <USBD_CDC_InterfaceStrDescriptor+0x1e>
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	4907      	ldr	r1, [pc, #28]	; (800b230 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b212:	4808      	ldr	r0, [pc, #32]	; (800b234 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b214:	f7ff fd96 	bl	800ad44 <USBD_GetString>
 800b218:	e004      	b.n	800b224 <USBD_CDC_InterfaceStrDescriptor+0x28>
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	4904      	ldr	r1, [pc, #16]	; (800b230 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b21e:	4805      	ldr	r0, [pc, #20]	; (800b234 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b220:	f7ff fd90 	bl	800ad44 <USBD_GetString>
 800b224:	4b02      	ldr	r3, [pc, #8]	; (800b230 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	200015a4 	.word	0x200015a4
 800b234:	0800ca40 	.word	0x0800ca40

0800b238 <Get_SerialNum>:
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <Get_SerialNum+0x44>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <Get_SerialNum+0x48>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	4b0e      	ldr	r3, [pc, #56]	; (800b284 <Get_SerialNum+0x4c>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	607b      	str	r3, [r7, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4413      	add	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d009      	beq.n	800b272 <Get_SerialNum+0x3a>
 800b25e:	2208      	movs	r2, #8
 800b260:	4909      	ldr	r1, [pc, #36]	; (800b288 <Get_SerialNum+0x50>)
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f000 f814 	bl	800b290 <IntToUnicode>
 800b268:	2204      	movs	r2, #4
 800b26a:	4908      	ldr	r1, [pc, #32]	; (800b28c <Get_SerialNum+0x54>)
 800b26c:	68b8      	ldr	r0, [r7, #8]
 800b26e:	f000 f80f 	bl	800b290 <IntToUnicode>
 800b272:	bf00      	nop
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	1fff7590 	.word	0x1fff7590
 800b280:	1fff7594 	.word	0x1fff7594
 800b284:	1fff7598 	.word	0x1fff7598
 800b288:	200000f2 	.word	0x200000f2
 800b28c:	20000102 	.word	0x20000102

0800b290 <IntToUnicode>:
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	71fb      	strb	r3, [r7, #7]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	75fb      	strb	r3, [r7, #23]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	75fb      	strb	r3, [r7, #23]
 800b2a6:	e027      	b.n	800b2f8 <IntToUnicode+0x68>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	0f1b      	lsrs	r3, r3, #28
 800b2ac:	2b09      	cmp	r3, #9
 800b2ae:	d80b      	bhi.n	800b2c8 <IntToUnicode+0x38>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	0f1b      	lsrs	r3, r3, #28
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	440b      	add	r3, r1
 800b2c0:	3230      	adds	r2, #48	; 0x30
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	e00a      	b.n	800b2de <IntToUnicode+0x4e>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	0f1b      	lsrs	r3, r3, #28
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	440b      	add	r3, r1
 800b2d8:	3237      	adds	r2, #55	; 0x37
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	701a      	strb	r2, [r3, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	75fb      	strb	r3, [r7, #23]
 800b2f8:	7dfa      	ldrb	r2, [r7, #23]
 800b2fa:	79fb      	ldrb	r3, [r7, #7]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d3d3      	bcc.n	800b2a8 <IntToUnicode+0x18>
 800b300:	bf00      	nop
 800b302:	bf00      	nop
 800b304:	371c      	adds	r7, #28
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <LL_AHB2_GRP1_EnableClock>:
 800b30e:	b480      	push	{r7}
 800b310:	b085      	sub	sp, #20
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b31a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b31c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4313      	orrs	r3, r2
 800b324:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b32a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4013      	ands	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	bf00      	nop
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <LL_APB1_GRP1_EnableClock>:
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b34c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b34e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4313      	orrs	r3, r2
 800b356:	658b      	str	r3, [r1, #88]	; 0x58
 800b358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b35c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4013      	ands	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	bf00      	nop
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <HAL_PCD_MspInit>:
 800b374:	b580      	push	{r7, lr}
 800b376:	b09c      	sub	sp, #112	; 0x70
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	609a      	str	r2, [r3, #8]
 800b388:	60da      	str	r2, [r3, #12]
 800b38a:	611a      	str	r2, [r3, #16]
 800b38c:	f107 030c 	add.w	r3, r7, #12
 800b390:	2250      	movs	r2, #80	; 0x50
 800b392:	2100      	movs	r1, #0
 800b394:	4618      	mov	r0, r3
 800b396:	f000 fb41 	bl	800ba1c <memset>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a23      	ldr	r2, [pc, #140]	; (800b42c <HAL_PCD_MspInit+0xb8>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d13e      	bne.n	800b422 <HAL_PCD_MspInit+0xae>
 800b3a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	2318      	movs	r3, #24
 800b3ac:	613b      	str	r3, [r7, #16]
 800b3ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3b8:	61bb      	str	r3, [r7, #24]
 800b3ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3c4:	623b      	str	r3, [r7, #32]
 800b3c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b3ca:	643b      	str	r3, [r7, #64]	; 0x40
 800b3cc:	f107 030c 	add.w	r3, r7, #12
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7f9 fbe7 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <HAL_PCD_MspInit+0x6c>
 800b3dc:	f7f5 fafe 	bl	80009dc <Error_Handler>
 800b3e0:	2001      	movs	r0, #1
 800b3e2:	f7ff ff94 	bl	800b30e <LL_AHB2_GRP1_EnableClock>
 800b3e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	663b      	str	r3, [r7, #96]	; 0x60
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	667b      	str	r3, [r7, #100]	; 0x64
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3f8:	230a      	movs	r3, #10
 800b3fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b400:	4619      	mov	r1, r3
 800b402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b406:	f7f6 f9c7 	bl	8001798 <HAL_GPIO_Init>
 800b40a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b40e:	f7ff ff97 	bl	800b340 <LL_APB1_GRP1_EnableClock>
 800b412:	2200      	movs	r2, #0
 800b414:	2100      	movs	r1, #0
 800b416:	2014      	movs	r0, #20
 800b418:	f7f5 feb5 	bl	8001186 <HAL_NVIC_SetPriority>
 800b41c:	2014      	movs	r0, #20
 800b41e:	f7f5 fecc 	bl	80011ba <HAL_NVIC_EnableIRQ>
 800b422:	bf00      	nop
 800b424:	3770      	adds	r7, #112	; 0x70
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	40006800 	.word	0x40006800

0800b430 <HAL_PCD_SetupStageCallback>:
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f7fe fb7f 	bl	8009b4a <USBD_LL_SetupStage>
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_PCD_DataOutStageCallback>:
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	70fb      	strb	r3, [r7, #3]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b466:	78fa      	ldrb	r2, [r7, #3]
 800b468:	6879      	ldr	r1, [r7, #4]
 800b46a:	4613      	mov	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	440b      	add	r3, r1
 800b474:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	78fb      	ldrb	r3, [r7, #3]
 800b47c:	4619      	mov	r1, r3
 800b47e:	f7fe fbb9 	bl	8009bf4 <USBD_LL_DataOutStage>
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <HAL_PCD_DataInStageCallback>:
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b49c:	78fa      	ldrb	r2, [r7, #3]
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	00db      	lsls	r3, r3, #3
 800b4a8:	440b      	add	r3, r1
 800b4aa:	333c      	adds	r3, #60	; 0x3c
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	78fb      	ldrb	r3, [r7, #3]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	f7fe fc52 	bl	8009d5a <USBD_LL_DataInStage>
 800b4b6:	bf00      	nop
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <HAL_PCD_SOFCallback>:
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe fd8c 	bl	8009fea <USBD_LL_SOF>
 800b4d2:	bf00      	nop
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <HAL_PCD_ResetCallback>:
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	73fb      	strb	r3, [r7, #15]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d001      	beq.n	800b4f2 <HAL_PCD_ResetCallback+0x18>
 800b4ee:	f7f5 fa75 	bl	80009dc <Error_Handler>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b4f8:	7bfa      	ldrb	r2, [r7, #15]
 800b4fa:	4611      	mov	r1, r2
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe fd30 	bl	8009f62 <USBD_LL_SetSpeed>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fe fcd8 	bl	8009ebe <USBD_LL_Reset>
 800b50e:	bf00      	nop
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <HAL_PCD_SuspendCallback>:
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b526:	4618      	mov	r0, r3
 800b528:	f7fe fd2b 	bl	8009f82 <USBD_LL_Suspend>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d005      	beq.n	800b540 <HAL_PCD_SuspendCallback+0x28>
 800b534:	4b04      	ldr	r3, [pc, #16]	; (800b548 <HAL_PCD_SuspendCallback+0x30>)
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	4a03      	ldr	r2, [pc, #12]	; (800b548 <HAL_PCD_SuspendCallback+0x30>)
 800b53a:	f043 0306 	orr.w	r3, r3, #6
 800b53e:	6113      	str	r3, [r2, #16]
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	e000ed00 	.word	0xe000ed00

0800b54c <HAL_PCD_ResumeCallback>:
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d007      	beq.n	800b56c <HAL_PCD_ResumeCallback+0x20>
 800b55c:	4b08      	ldr	r3, [pc, #32]	; (800b580 <HAL_PCD_ResumeCallback+0x34>)
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	4a07      	ldr	r2, [pc, #28]	; (800b580 <HAL_PCD_ResumeCallback+0x34>)
 800b562:	f023 0306 	bic.w	r3, r3, #6
 800b566:	6113      	str	r3, [r2, #16]
 800b568:	f000 f9fc 	bl	800b964 <SystemClockConfig_Resume>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe fd21 	bl	8009fba <USBD_LL_Resume>
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	e000ed00 	.word	0xe000ed00

0800b584 <USBD_LL_Init>:
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	4a2c      	ldr	r2, [pc, #176]	; (800b640 <USBD_LL_Init+0xbc>)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a2a      	ldr	r2, [pc, #168]	; (800b640 <USBD_LL_Init+0xbc>)
 800b598:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800b59c:	f7f7 fffe 	bl	800359c <HAL_PWREx_EnableVddUSB>
 800b5a0:	4b27      	ldr	r3, [pc, #156]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5a2:	4a28      	ldr	r2, [pc, #160]	; (800b644 <USBD_LL_Init+0xc0>)
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	4b26      	ldr	r3, [pc, #152]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	605a      	str	r2, [r3, #4]
 800b5ac:	4b24      	ldr	r3, [pc, #144]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	609a      	str	r2, [r3, #8]
 800b5b2:	4b23      	ldr	r3, [pc, #140]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	611a      	str	r2, [r3, #16]
 800b5b8:	4b21      	ldr	r3, [pc, #132]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	615a      	str	r2, [r3, #20]
 800b5be:	4b20      	ldr	r3, [pc, #128]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	619a      	str	r2, [r3, #24]
 800b5c4:	4b1e      	ldr	r3, [pc, #120]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	61da      	str	r2, [r3, #28]
 800b5ca:	4b1d      	ldr	r3, [pc, #116]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	621a      	str	r2, [r3, #32]
 800b5d0:	481b      	ldr	r0, [pc, #108]	; (800b640 <USBD_LL_Init+0xbc>)
 800b5d2:	f7f6 fa81 	bl	8001ad8 <HAL_PCD_Init>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <USBD_LL_Init+0x5c>
 800b5dc:	f7f5 f9fe 	bl	80009dc <Error_Handler>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5e6:	2318      	movs	r3, #24
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	f7f7 ff4a 	bl	8003484 <HAL_PCDEx_PMAConfig>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5f6:	2358      	movs	r3, #88	; 0x58
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2180      	movs	r1, #128	; 0x80
 800b5fc:	f7f7 ff42 	bl	8003484 <HAL_PCDEx_PMAConfig>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b606:	23c0      	movs	r3, #192	; 0xc0
 800b608:	2200      	movs	r2, #0
 800b60a:	2181      	movs	r1, #129	; 0x81
 800b60c:	f7f7 ff3a 	bl	8003484 <HAL_PCDEx_PMAConfig>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b616:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b61a:	2200      	movs	r2, #0
 800b61c:	2101      	movs	r1, #1
 800b61e:	f7f7 ff31 	bl	8003484 <HAL_PCDEx_PMAConfig>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b62c:	2200      	movs	r2, #0
 800b62e:	2182      	movs	r1, #130	; 0x82
 800b630:	f7f7 ff28 	bl	8003484 <HAL_PCDEx_PMAConfig>
 800b634:	2300      	movs	r3, #0
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	200017a4 	.word	0x200017a4
 800b644:	40006800 	.word	0x40006800

0800b648 <USBD_LL_Start>:
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	2300      	movs	r3, #0
 800b652:	73fb      	strb	r3, [r7, #15]
 800b654:	2300      	movs	r3, #0
 800b656:	73bb      	strb	r3, [r7, #14]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b65e:	4618      	mov	r0, r3
 800b660:	f7f6 fb13 	bl	8001c8a <HAL_PCD_Start>
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 f980 	bl	800b970 <USBD_Get_USB_Status>
 800b670:	4603      	mov	r3, r0
 800b672:	73bb      	strb	r3, [r7, #14]
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBD_LL_OpenEP>:
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	4608      	mov	r0, r1
 800b688:	4611      	mov	r1, r2
 800b68a:	461a      	mov	r2, r3
 800b68c:	4603      	mov	r3, r0
 800b68e:	70fb      	strb	r3, [r7, #3]
 800b690:	460b      	mov	r3, r1
 800b692:	70bb      	strb	r3, [r7, #2]
 800b694:	4613      	mov	r3, r2
 800b696:	803b      	strh	r3, [r7, #0]
 800b698:	2300      	movs	r3, #0
 800b69a:	73fb      	strb	r3, [r7, #15]
 800b69c:	2300      	movs	r3, #0
 800b69e:	73bb      	strb	r3, [r7, #14]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6a6:	78bb      	ldrb	r3, [r7, #2]
 800b6a8:	883a      	ldrh	r2, [r7, #0]
 800b6aa:	78f9      	ldrb	r1, [r7, #3]
 800b6ac:	f7f6 fc5b 	bl	8001f66 <HAL_PCD_EP_Open>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73fb      	strb	r3, [r7, #15]
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 f95a 	bl	800b970 <USBD_Get_USB_Status>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	73bb      	strb	r3, [r7, #14]
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBD_LL_CloseEP>:
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	70fb      	strb	r3, [r7, #3]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73fb      	strb	r3, [r7, #15]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73bb      	strb	r3, [r7, #14]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7f6 fc99 	bl	8002020 <HAL_PCD_EP_Close>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 f93b 	bl	800b970 <USBD_Get_USB_Status>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	73bb      	strb	r3, [r7, #14]
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_LL_StallEP>:
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	70fb      	strb	r3, [r7, #3]
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]
 800b718:	2300      	movs	r3, #0
 800b71a:	73bb      	strb	r3, [r7, #14]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b722:	78fa      	ldrb	r2, [r7, #3]
 800b724:	4611      	mov	r1, r2
 800b726:	4618      	mov	r0, r3
 800b728:	f7f6 fd42 	bl	80021b0 <HAL_PCD_EP_SetStall>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	4618      	mov	r0, r3
 800b734:	f000 f91c 	bl	800b970 <USBD_Get_USB_Status>
 800b738:	4603      	mov	r3, r0
 800b73a:	73bb      	strb	r3, [r7, #14]
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBD_LL_ClearStallEP>:
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
 800b752:	2300      	movs	r3, #0
 800b754:	73fb      	strb	r3, [r7, #15]
 800b756:	2300      	movs	r3, #0
 800b758:	73bb      	strb	r3, [r7, #14]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	4611      	mov	r1, r2
 800b764:	4618      	mov	r0, r3
 800b766:	f7f6 fd75 	bl	8002254 <HAL_PCD_EP_ClrStall>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73fb      	strb	r3, [r7, #15]
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 f8fd 	bl	800b970 <USBD_Get_USB_Status>
 800b776:	4603      	mov	r3, r0
 800b778:	73bb      	strb	r3, [r7, #14]
 800b77a:	7bbb      	ldrb	r3, [r7, #14]
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBD_LL_IsStallEP>:
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	70fb      	strb	r3, [r7, #3]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	da0c      	bge.n	800b7ba <USBD_LL_IsStallEP+0x36>
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7a6:	68f9      	ldr	r1, [r7, #12]
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	00db      	lsls	r3, r3, #3
 800b7b2:	440b      	add	r3, r1
 800b7b4:	3302      	adds	r3, #2
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	e00b      	b.n	800b7d2 <USBD_LL_IsStallEP+0x4e>
 800b7ba:	78fb      	ldrb	r3, [r7, #3]
 800b7bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7c0:	68f9      	ldr	r1, [r7, #12]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	440b      	add	r3, r1
 800b7cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <USBD_LL_SetUSBAddress>:
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	70fb      	strb	r3, [r7, #3]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73bb      	strb	r3, [r7, #14]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7f8:	78fa      	ldrb	r2, [r7, #3]
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7f6 fb8d 	bl	8001f1c <HAL_PCD_SetAddress>
 800b802:	4603      	mov	r3, r0
 800b804:	73fb      	strb	r3, [r7, #15]
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 f8b1 	bl	800b970 <USBD_Get_USB_Status>
 800b80e:	4603      	mov	r3, r0
 800b810:	73bb      	strb	r3, [r7, #14]
 800b812:	7bbb      	ldrb	r3, [r7, #14]
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_LL_Transmit>:
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	607a      	str	r2, [r7, #4]
 800b826:	603b      	str	r3, [r7, #0]
 800b828:	460b      	mov	r3, r1
 800b82a:	72fb      	strb	r3, [r7, #11]
 800b82c:	2300      	movs	r3, #0
 800b82e:	75fb      	strb	r3, [r7, #23]
 800b830:	2300      	movs	r3, #0
 800b832:	75bb      	strb	r3, [r7, #22]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b83a:	7af9      	ldrb	r1, [r7, #11]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	f7f6 fc7f 	bl	8002142 <HAL_PCD_EP_Transmit>
 800b844:	4603      	mov	r3, r0
 800b846:	75fb      	strb	r3, [r7, #23]
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f890 	bl	800b970 <USBD_Get_USB_Status>
 800b850:	4603      	mov	r3, r0
 800b852:	75bb      	strb	r3, [r7, #22]
 800b854:	7dbb      	ldrb	r3, [r7, #22]
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_LL_PrepareReceive>:
 800b85e:	b580      	push	{r7, lr}
 800b860:	b086      	sub	sp, #24
 800b862:	af00      	add	r7, sp, #0
 800b864:	60f8      	str	r0, [r7, #12]
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	603b      	str	r3, [r7, #0]
 800b86a:	460b      	mov	r3, r1
 800b86c:	72fb      	strb	r3, [r7, #11]
 800b86e:	2300      	movs	r3, #0
 800b870:	75fb      	strb	r3, [r7, #23]
 800b872:	2300      	movs	r3, #0
 800b874:	75bb      	strb	r3, [r7, #22]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b87c:	7af9      	ldrb	r1, [r7, #11]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	f7f6 fc15 	bl	80020b0 <HAL_PCD_EP_Receive>
 800b886:	4603      	mov	r3, r0
 800b888:	75fb      	strb	r3, [r7, #23]
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f000 f86f 	bl	800b970 <USBD_Get_USB_Status>
 800b892:	4603      	mov	r3, r0
 800b894:	75bb      	strb	r3, [r7, #22]
 800b896:	7dbb      	ldrb	r3, [r7, #22]
 800b898:	4618      	mov	r0, r3
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_LL_GetRxDataSize>:
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8b2:	78fa      	ldrb	r2, [r7, #3]
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7f6 fc2b 	bl	8002112 <HAL_PCD_EP_GetRxCount>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
	...

0800b8c8 <HAL_PCDEx_LPM_Callback>:
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <HAL_PCDEx_LPM_Callback+0x18>
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d013      	beq.n	800b906 <HAL_PCDEx_LPM_Callback+0x3e>
 800b8de:	e023      	b.n	800b928 <HAL_PCDEx_LPM_Callback+0x60>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <HAL_PCDEx_LPM_Callback+0x30>
 800b8e8:	f000 f83c 	bl	800b964 <SystemClockConfig_Resume>
 800b8ec:	4b10      	ldr	r3, [pc, #64]	; (800b930 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	4a0f      	ldr	r2, [pc, #60]	; (800b930 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8f2:	f023 0306 	bic.w	r3, r3, #6
 800b8f6:	6113      	str	r3, [r2, #16]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fb5b 	bl	8009fba <USBD_LL_Resume>
 800b904:	e010      	b.n	800b928 <HAL_PCDEx_LPM_Callback+0x60>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe fb38 	bl	8009f82 <USBD_LL_Suspend>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d005      	beq.n	800b926 <HAL_PCDEx_LPM_Callback+0x5e>
 800b91a:	4b05      	ldr	r3, [pc, #20]	; (800b930 <HAL_PCDEx_LPM_Callback+0x68>)
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	4a04      	ldr	r2, [pc, #16]	; (800b930 <HAL_PCDEx_LPM_Callback+0x68>)
 800b920:	f043 0306 	orr.w	r3, r3, #6
 800b924:	6113      	str	r3, [r2, #16]
 800b926:	bf00      	nop
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	e000ed00 	.word	0xe000ed00

0800b934 <USBD_static_malloc>:
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	4b03      	ldr	r3, [pc, #12]	; (800b94c <USBD_static_malloc+0x18>)
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	20001a98 	.word	0x20001a98

0800b950 <USBD_static_free>:
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <SystemClockConfig_Resume>:
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
 800b968:	f7f4 fe66 	bl	8000638 <SystemClock_Config>
 800b96c:	bf00      	nop
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_Get_USB_Status>:
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	71fb      	strb	r3, [r7, #7]
 800b97a:	2300      	movs	r3, #0
 800b97c:	73fb      	strb	r3, [r7, #15]
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	2b03      	cmp	r3, #3
 800b982:	d817      	bhi.n	800b9b4 <USBD_Get_USB_Status+0x44>
 800b984:	a201      	add	r2, pc, #4	; (adr r2, 800b98c <USBD_Get_USB_Status+0x1c>)
 800b986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98a:	bf00      	nop
 800b98c:	0800b99d 	.word	0x0800b99d
 800b990:	0800b9a3 	.word	0x0800b9a3
 800b994:	0800b9a9 	.word	0x0800b9a9
 800b998:	0800b9af 	.word	0x0800b9af
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]
 800b9a0:	e00b      	b.n	800b9ba <USBD_Get_USB_Status+0x4a>
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	73fb      	strb	r3, [r7, #15]
 800b9a6:	e008      	b.n	800b9ba <USBD_Get_USB_Status+0x4a>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	73fb      	strb	r3, [r7, #15]
 800b9ac:	e005      	b.n	800b9ba <USBD_Get_USB_Status+0x4a>
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	73fb      	strb	r3, [r7, #15]
 800b9b2:	e002      	b.n	800b9ba <USBD_Get_USB_Status+0x4a>
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	73fb      	strb	r3, [r7, #15]
 800b9b8:	bf00      	nop
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <__errno>:
 800b9c8:	4b01      	ldr	r3, [pc, #4]	; (800b9d0 <__errno+0x8>)
 800b9ca:	6818      	ldr	r0, [r3, #0]
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	2000010c 	.word	0x2000010c

0800b9d4 <__libc_init_array>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	4d0d      	ldr	r5, [pc, #52]	; (800ba0c <__libc_init_array+0x38>)
 800b9d8:	4c0d      	ldr	r4, [pc, #52]	; (800ba10 <__libc_init_array+0x3c>)
 800b9da:	1b64      	subs	r4, r4, r5
 800b9dc:	10a4      	asrs	r4, r4, #2
 800b9de:	2600      	movs	r6, #0
 800b9e0:	42a6      	cmp	r6, r4
 800b9e2:	d109      	bne.n	800b9f8 <__libc_init_array+0x24>
 800b9e4:	4d0b      	ldr	r5, [pc, #44]	; (800ba14 <__libc_init_array+0x40>)
 800b9e6:	4c0c      	ldr	r4, [pc, #48]	; (800ba18 <__libc_init_array+0x44>)
 800b9e8:	f000 ffae 	bl	800c948 <_init>
 800b9ec:	1b64      	subs	r4, r4, r5
 800b9ee:	10a4      	asrs	r4, r4, #2
 800b9f0:	2600      	movs	r6, #0
 800b9f2:	42a6      	cmp	r6, r4
 800b9f4:	d105      	bne.n	800ba02 <__libc_init_array+0x2e>
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9fc:	4798      	blx	r3
 800b9fe:	3601      	adds	r6, #1
 800ba00:	e7ee      	b.n	800b9e0 <__libc_init_array+0xc>
 800ba02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba06:	4798      	blx	r3
 800ba08:	3601      	adds	r6, #1
 800ba0a:	e7f2      	b.n	800b9f2 <__libc_init_array+0x1e>
 800ba0c:	0800cb68 	.word	0x0800cb68
 800ba10:	0800cb68 	.word	0x0800cb68
 800ba14:	0800cb68 	.word	0x0800cb68
 800ba18:	0800cb6c 	.word	0x0800cb6c

0800ba1c <memset>:
 800ba1c:	4402      	add	r2, r0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d100      	bne.n	800ba26 <memset+0xa>
 800ba24:	4770      	bx	lr
 800ba26:	f803 1b01 	strb.w	r1, [r3], #1
 800ba2a:	e7f9      	b.n	800ba20 <memset+0x4>

0800ba2c <iprintf>:
 800ba2c:	b40f      	push	{r0, r1, r2, r3}
 800ba2e:	4b0a      	ldr	r3, [pc, #40]	; (800ba58 <iprintf+0x2c>)
 800ba30:	b513      	push	{r0, r1, r4, lr}
 800ba32:	681c      	ldr	r4, [r3, #0]
 800ba34:	b124      	cbz	r4, 800ba40 <iprintf+0x14>
 800ba36:	69a3      	ldr	r3, [r4, #24]
 800ba38:	b913      	cbnz	r3, 800ba40 <iprintf+0x14>
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 f866 	bl	800bb0c <__sinit>
 800ba40:	ab05      	add	r3, sp, #20
 800ba42:	9a04      	ldr	r2, [sp, #16]
 800ba44:	68a1      	ldr	r1, [r4, #8]
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 f9bd 	bl	800bdc8 <_vfiprintf_r>
 800ba4e:	b002      	add	sp, #8
 800ba50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba54:	b004      	add	sp, #16
 800ba56:	4770      	bx	lr
 800ba58:	2000010c 	.word	0x2000010c

0800ba5c <std>:
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	4604      	mov	r4, r0
 800ba62:	e9c0 3300 	strd	r3, r3, [r0]
 800ba66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba6a:	6083      	str	r3, [r0, #8]
 800ba6c:	8181      	strh	r1, [r0, #12]
 800ba6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ba70:	81c2      	strh	r2, [r0, #14]
 800ba72:	6183      	str	r3, [r0, #24]
 800ba74:	4619      	mov	r1, r3
 800ba76:	2208      	movs	r2, #8
 800ba78:	305c      	adds	r0, #92	; 0x5c
 800ba7a:	f7ff ffcf 	bl	800ba1c <memset>
 800ba7e:	4b05      	ldr	r3, [pc, #20]	; (800ba94 <std+0x38>)
 800ba80:	6263      	str	r3, [r4, #36]	; 0x24
 800ba82:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <std+0x3c>)
 800ba84:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <std+0x40>)
 800ba88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba8a:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <std+0x44>)
 800ba8c:	6224      	str	r4, [r4, #32]
 800ba8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ba90:	bd10      	pop	{r4, pc}
 800ba92:	bf00      	nop
 800ba94:	0800c371 	.word	0x0800c371
 800ba98:	0800c393 	.word	0x0800c393
 800ba9c:	0800c3cb 	.word	0x0800c3cb
 800baa0:	0800c3ef 	.word	0x0800c3ef

0800baa4 <_cleanup_r>:
 800baa4:	4901      	ldr	r1, [pc, #4]	; (800baac <_cleanup_r+0x8>)
 800baa6:	f000 b8af 	b.w	800bc08 <_fwalk_reent>
 800baaa:	bf00      	nop
 800baac:	0800c6c9 	.word	0x0800c6c9

0800bab0 <__sfmoreglue>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	2268      	movs	r2, #104	; 0x68
 800bab4:	1e4d      	subs	r5, r1, #1
 800bab6:	4355      	muls	r5, r2
 800bab8:	460e      	mov	r6, r1
 800baba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800babe:	f000 f8e5 	bl	800bc8c <_malloc_r>
 800bac2:	4604      	mov	r4, r0
 800bac4:	b140      	cbz	r0, 800bad8 <__sfmoreglue+0x28>
 800bac6:	2100      	movs	r1, #0
 800bac8:	e9c0 1600 	strd	r1, r6, [r0]
 800bacc:	300c      	adds	r0, #12
 800bace:	60a0      	str	r0, [r4, #8]
 800bad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bad4:	f7ff ffa2 	bl	800ba1c <memset>
 800bad8:	4620      	mov	r0, r4
 800bada:	bd70      	pop	{r4, r5, r6, pc}

0800badc <__sfp_lock_acquire>:
 800badc:	4801      	ldr	r0, [pc, #4]	; (800bae4 <__sfp_lock_acquire+0x8>)
 800bade:	f000 b8b3 	b.w	800bc48 <__retarget_lock_acquire_recursive>
 800bae2:	bf00      	nop
 800bae4:	20001cb9 	.word	0x20001cb9

0800bae8 <__sfp_lock_release>:
 800bae8:	4801      	ldr	r0, [pc, #4]	; (800baf0 <__sfp_lock_release+0x8>)
 800baea:	f000 b8ae 	b.w	800bc4a <__retarget_lock_release_recursive>
 800baee:	bf00      	nop
 800baf0:	20001cb9 	.word	0x20001cb9

0800baf4 <__sinit_lock_acquire>:
 800baf4:	4801      	ldr	r0, [pc, #4]	; (800bafc <__sinit_lock_acquire+0x8>)
 800baf6:	f000 b8a7 	b.w	800bc48 <__retarget_lock_acquire_recursive>
 800bafa:	bf00      	nop
 800bafc:	20001cba 	.word	0x20001cba

0800bb00 <__sinit_lock_release>:
 800bb00:	4801      	ldr	r0, [pc, #4]	; (800bb08 <__sinit_lock_release+0x8>)
 800bb02:	f000 b8a2 	b.w	800bc4a <__retarget_lock_release_recursive>
 800bb06:	bf00      	nop
 800bb08:	20001cba 	.word	0x20001cba

0800bb0c <__sinit>:
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	4604      	mov	r4, r0
 800bb10:	f7ff fff0 	bl	800baf4 <__sinit_lock_acquire>
 800bb14:	69a3      	ldr	r3, [r4, #24]
 800bb16:	b11b      	cbz	r3, 800bb20 <__sinit+0x14>
 800bb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb1c:	f7ff bff0 	b.w	800bb00 <__sinit_lock_release>
 800bb20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb24:	6523      	str	r3, [r4, #80]	; 0x50
 800bb26:	4b13      	ldr	r3, [pc, #76]	; (800bb74 <__sinit+0x68>)
 800bb28:	4a13      	ldr	r2, [pc, #76]	; (800bb78 <__sinit+0x6c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb2e:	42a3      	cmp	r3, r4
 800bb30:	bf04      	itt	eq
 800bb32:	2301      	moveq	r3, #1
 800bb34:	61a3      	streq	r3, [r4, #24]
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 f820 	bl	800bb7c <__sfp>
 800bb3c:	6060      	str	r0, [r4, #4]
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 f81c 	bl	800bb7c <__sfp>
 800bb44:	60a0      	str	r0, [r4, #8]
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 f818 	bl	800bb7c <__sfp>
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	60e0      	str	r0, [r4, #12]
 800bb50:	2104      	movs	r1, #4
 800bb52:	6860      	ldr	r0, [r4, #4]
 800bb54:	f7ff ff82 	bl	800ba5c <std>
 800bb58:	68a0      	ldr	r0, [r4, #8]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	2109      	movs	r1, #9
 800bb5e:	f7ff ff7d 	bl	800ba5c <std>
 800bb62:	68e0      	ldr	r0, [r4, #12]
 800bb64:	2202      	movs	r2, #2
 800bb66:	2112      	movs	r1, #18
 800bb68:	f7ff ff78 	bl	800ba5c <std>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	61a3      	str	r3, [r4, #24]
 800bb70:	e7d2      	b.n	800bb18 <__sinit+0xc>
 800bb72:	bf00      	nop
 800bb74:	0800cad0 	.word	0x0800cad0
 800bb78:	0800baa5 	.word	0x0800baa5

0800bb7c <__sfp>:
 800bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7e:	4607      	mov	r7, r0
 800bb80:	f7ff ffac 	bl	800badc <__sfp_lock_acquire>
 800bb84:	4b1e      	ldr	r3, [pc, #120]	; (800bc00 <__sfp+0x84>)
 800bb86:	681e      	ldr	r6, [r3, #0]
 800bb88:	69b3      	ldr	r3, [r6, #24]
 800bb8a:	b913      	cbnz	r3, 800bb92 <__sfp+0x16>
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f7ff ffbd 	bl	800bb0c <__sinit>
 800bb92:	3648      	adds	r6, #72	; 0x48
 800bb94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	d503      	bpl.n	800bba4 <__sfp+0x28>
 800bb9c:	6833      	ldr	r3, [r6, #0]
 800bb9e:	b30b      	cbz	r3, 800bbe4 <__sfp+0x68>
 800bba0:	6836      	ldr	r6, [r6, #0]
 800bba2:	e7f7      	b.n	800bb94 <__sfp+0x18>
 800bba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bba8:	b9d5      	cbnz	r5, 800bbe0 <__sfp+0x64>
 800bbaa:	4b16      	ldr	r3, [pc, #88]	; (800bc04 <__sfp+0x88>)
 800bbac:	60e3      	str	r3, [r4, #12]
 800bbae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbb2:	6665      	str	r5, [r4, #100]	; 0x64
 800bbb4:	f000 f847 	bl	800bc46 <__retarget_lock_init_recursive>
 800bbb8:	f7ff ff96 	bl	800bae8 <__sfp_lock_release>
 800bbbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbc4:	6025      	str	r5, [r4, #0]
 800bbc6:	61a5      	str	r5, [r4, #24]
 800bbc8:	2208      	movs	r2, #8
 800bbca:	4629      	mov	r1, r5
 800bbcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbd0:	f7ff ff24 	bl	800ba1c <memset>
 800bbd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbdc:	4620      	mov	r0, r4
 800bbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe0:	3468      	adds	r4, #104	; 0x68
 800bbe2:	e7d9      	b.n	800bb98 <__sfp+0x1c>
 800bbe4:	2104      	movs	r1, #4
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	f7ff ff62 	bl	800bab0 <__sfmoreglue>
 800bbec:	4604      	mov	r4, r0
 800bbee:	6030      	str	r0, [r6, #0]
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d1d5      	bne.n	800bba0 <__sfp+0x24>
 800bbf4:	f7ff ff78 	bl	800bae8 <__sfp_lock_release>
 800bbf8:	230c      	movs	r3, #12
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	e7ee      	b.n	800bbdc <__sfp+0x60>
 800bbfe:	bf00      	nop
 800bc00:	0800cad0 	.word	0x0800cad0
 800bc04:	ffff0001 	.word	0xffff0001

0800bc08 <_fwalk_reent>:
 800bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	4688      	mov	r8, r1
 800bc10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc14:	2700      	movs	r7, #0
 800bc16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc1a:	f1b9 0901 	subs.w	r9, r9, #1
 800bc1e:	d505      	bpl.n	800bc2c <_fwalk_reent+0x24>
 800bc20:	6824      	ldr	r4, [r4, #0]
 800bc22:	2c00      	cmp	r4, #0
 800bc24:	d1f7      	bne.n	800bc16 <_fwalk_reent+0xe>
 800bc26:	4638      	mov	r0, r7
 800bc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2c:	89ab      	ldrh	r3, [r5, #12]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d907      	bls.n	800bc42 <_fwalk_reent+0x3a>
 800bc32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc36:	3301      	adds	r3, #1
 800bc38:	d003      	beq.n	800bc42 <_fwalk_reent+0x3a>
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	47c0      	blx	r8
 800bc40:	4307      	orrs	r7, r0
 800bc42:	3568      	adds	r5, #104	; 0x68
 800bc44:	e7e9      	b.n	800bc1a <_fwalk_reent+0x12>

0800bc46 <__retarget_lock_init_recursive>:
 800bc46:	4770      	bx	lr

0800bc48 <__retarget_lock_acquire_recursive>:
 800bc48:	4770      	bx	lr

0800bc4a <__retarget_lock_release_recursive>:
 800bc4a:	4770      	bx	lr

0800bc4c <sbrk_aligned>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	4e0e      	ldr	r6, [pc, #56]	; (800bc88 <sbrk_aligned+0x3c>)
 800bc50:	460c      	mov	r4, r1
 800bc52:	6831      	ldr	r1, [r6, #0]
 800bc54:	4605      	mov	r5, r0
 800bc56:	b911      	cbnz	r1, 800bc5e <sbrk_aligned+0x12>
 800bc58:	f000 fb7a 	bl	800c350 <_sbrk_r>
 800bc5c:	6030      	str	r0, [r6, #0]
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4628      	mov	r0, r5
 800bc62:	f000 fb75 	bl	800c350 <_sbrk_r>
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	d00a      	beq.n	800bc80 <sbrk_aligned+0x34>
 800bc6a:	1cc4      	adds	r4, r0, #3
 800bc6c:	f024 0403 	bic.w	r4, r4, #3
 800bc70:	42a0      	cmp	r0, r4
 800bc72:	d007      	beq.n	800bc84 <sbrk_aligned+0x38>
 800bc74:	1a21      	subs	r1, r4, r0
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 fb6a 	bl	800c350 <_sbrk_r>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d101      	bne.n	800bc84 <sbrk_aligned+0x38>
 800bc80:	f04f 34ff 	mov.w	r4, #4294967295
 800bc84:	4620      	mov	r0, r4
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	20001cc0 	.word	0x20001cc0

0800bc8c <_malloc_r>:
 800bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc90:	1ccd      	adds	r5, r1, #3
 800bc92:	f025 0503 	bic.w	r5, r5, #3
 800bc96:	3508      	adds	r5, #8
 800bc98:	2d0c      	cmp	r5, #12
 800bc9a:	bf38      	it	cc
 800bc9c:	250c      	movcc	r5, #12
 800bc9e:	2d00      	cmp	r5, #0
 800bca0:	4607      	mov	r7, r0
 800bca2:	db01      	blt.n	800bca8 <_malloc_r+0x1c>
 800bca4:	42a9      	cmp	r1, r5
 800bca6:	d905      	bls.n	800bcb4 <_malloc_r+0x28>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	2600      	movs	r6, #0
 800bcae:	4630      	mov	r0, r6
 800bcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb4:	4e2e      	ldr	r6, [pc, #184]	; (800bd70 <_malloc_r+0xe4>)
 800bcb6:	f000 fdbb 	bl	800c830 <__malloc_lock>
 800bcba:	6833      	ldr	r3, [r6, #0]
 800bcbc:	461c      	mov	r4, r3
 800bcbe:	bb34      	cbnz	r4, 800bd0e <_malloc_r+0x82>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7ff ffc2 	bl	800bc4c <sbrk_aligned>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	4604      	mov	r4, r0
 800bccc:	d14d      	bne.n	800bd6a <_malloc_r+0xde>
 800bcce:	6834      	ldr	r4, [r6, #0]
 800bcd0:	4626      	mov	r6, r4
 800bcd2:	2e00      	cmp	r6, #0
 800bcd4:	d140      	bne.n	800bd58 <_malloc_r+0xcc>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4638      	mov	r0, r7
 800bcdc:	eb04 0803 	add.w	r8, r4, r3
 800bce0:	f000 fb36 	bl	800c350 <_sbrk_r>
 800bce4:	4580      	cmp	r8, r0
 800bce6:	d13a      	bne.n	800bd5e <_malloc_r+0xd2>
 800bce8:	6821      	ldr	r1, [r4, #0]
 800bcea:	3503      	adds	r5, #3
 800bcec:	1a6d      	subs	r5, r5, r1
 800bcee:	f025 0503 	bic.w	r5, r5, #3
 800bcf2:	3508      	adds	r5, #8
 800bcf4:	2d0c      	cmp	r5, #12
 800bcf6:	bf38      	it	cc
 800bcf8:	250c      	movcc	r5, #12
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f7ff ffa5 	bl	800bc4c <sbrk_aligned>
 800bd02:	3001      	adds	r0, #1
 800bd04:	d02b      	beq.n	800bd5e <_malloc_r+0xd2>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	442b      	add	r3, r5
 800bd0a:	6023      	str	r3, [r4, #0]
 800bd0c:	e00e      	b.n	800bd2c <_malloc_r+0xa0>
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	1b52      	subs	r2, r2, r5
 800bd12:	d41e      	bmi.n	800bd52 <_malloc_r+0xc6>
 800bd14:	2a0b      	cmp	r2, #11
 800bd16:	d916      	bls.n	800bd46 <_malloc_r+0xba>
 800bd18:	1961      	adds	r1, r4, r5
 800bd1a:	42a3      	cmp	r3, r4
 800bd1c:	6025      	str	r5, [r4, #0]
 800bd1e:	bf18      	it	ne
 800bd20:	6059      	strne	r1, [r3, #4]
 800bd22:	6863      	ldr	r3, [r4, #4]
 800bd24:	bf08      	it	eq
 800bd26:	6031      	streq	r1, [r6, #0]
 800bd28:	5162      	str	r2, [r4, r5]
 800bd2a:	604b      	str	r3, [r1, #4]
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f104 060b 	add.w	r6, r4, #11
 800bd32:	f000 fd83 	bl	800c83c <__malloc_unlock>
 800bd36:	f026 0607 	bic.w	r6, r6, #7
 800bd3a:	1d23      	adds	r3, r4, #4
 800bd3c:	1af2      	subs	r2, r6, r3
 800bd3e:	d0b6      	beq.n	800bcae <_malloc_r+0x22>
 800bd40:	1b9b      	subs	r3, r3, r6
 800bd42:	50a3      	str	r3, [r4, r2]
 800bd44:	e7b3      	b.n	800bcae <_malloc_r+0x22>
 800bd46:	6862      	ldr	r2, [r4, #4]
 800bd48:	42a3      	cmp	r3, r4
 800bd4a:	bf0c      	ite	eq
 800bd4c:	6032      	streq	r2, [r6, #0]
 800bd4e:	605a      	strne	r2, [r3, #4]
 800bd50:	e7ec      	b.n	800bd2c <_malloc_r+0xa0>
 800bd52:	4623      	mov	r3, r4
 800bd54:	6864      	ldr	r4, [r4, #4]
 800bd56:	e7b2      	b.n	800bcbe <_malloc_r+0x32>
 800bd58:	4634      	mov	r4, r6
 800bd5a:	6876      	ldr	r6, [r6, #4]
 800bd5c:	e7b9      	b.n	800bcd2 <_malloc_r+0x46>
 800bd5e:	230c      	movs	r3, #12
 800bd60:	603b      	str	r3, [r7, #0]
 800bd62:	4638      	mov	r0, r7
 800bd64:	f000 fd6a 	bl	800c83c <__malloc_unlock>
 800bd68:	e7a1      	b.n	800bcae <_malloc_r+0x22>
 800bd6a:	6025      	str	r5, [r4, #0]
 800bd6c:	e7de      	b.n	800bd2c <_malloc_r+0xa0>
 800bd6e:	bf00      	nop
 800bd70:	20001cbc 	.word	0x20001cbc

0800bd74 <__sfputc_r>:
 800bd74:	6893      	ldr	r3, [r2, #8]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	b410      	push	{r4}
 800bd7c:	6093      	str	r3, [r2, #8]
 800bd7e:	da08      	bge.n	800bd92 <__sfputc_r+0x1e>
 800bd80:	6994      	ldr	r4, [r2, #24]
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	db01      	blt.n	800bd8a <__sfputc_r+0x16>
 800bd86:	290a      	cmp	r1, #10
 800bd88:	d103      	bne.n	800bd92 <__sfputc_r+0x1e>
 800bd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd8e:	f000 bb33 	b.w	800c3f8 <__swbuf_r>
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	1c58      	adds	r0, r3, #1
 800bd96:	6010      	str	r0, [r2, #0]
 800bd98:	7019      	strb	r1, [r3, #0]
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <__sfputs_r>:
 800bda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	4614      	mov	r4, r2
 800bdaa:	18d5      	adds	r5, r2, r3
 800bdac:	42ac      	cmp	r4, r5
 800bdae:	d101      	bne.n	800bdb4 <__sfputs_r+0x12>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e007      	b.n	800bdc4 <__sfputs_r+0x22>
 800bdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb8:	463a      	mov	r2, r7
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff ffda 	bl	800bd74 <__sfputc_r>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d1f3      	bne.n	800bdac <__sfputs_r+0xa>
 800bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc8 <_vfiprintf_r>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	460d      	mov	r5, r1
 800bdce:	b09d      	sub	sp, #116	; 0x74
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	4698      	mov	r8, r3
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	b118      	cbz	r0, 800bde0 <_vfiprintf_r+0x18>
 800bdd8:	6983      	ldr	r3, [r0, #24]
 800bdda:	b90b      	cbnz	r3, 800bde0 <_vfiprintf_r+0x18>
 800bddc:	f7ff fe96 	bl	800bb0c <__sinit>
 800bde0:	4b89      	ldr	r3, [pc, #548]	; (800c008 <_vfiprintf_r+0x240>)
 800bde2:	429d      	cmp	r5, r3
 800bde4:	d11b      	bne.n	800be1e <_vfiprintf_r+0x56>
 800bde6:	6875      	ldr	r5, [r6, #4]
 800bde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_vfiprintf_r+0x32>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	059a      	lsls	r2, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_vfiprintf_r+0x32>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf6:	f7ff ff27 	bl	800bc48 <__retarget_lock_acquire_recursive>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	071b      	lsls	r3, r3, #28
 800bdfe:	d501      	bpl.n	800be04 <_vfiprintf_r+0x3c>
 800be00:	692b      	ldr	r3, [r5, #16]
 800be02:	b9eb      	cbnz	r3, 800be40 <_vfiprintf_r+0x78>
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f000 fb5a 	bl	800c4c0 <__swsetup_r>
 800be0c:	b1c0      	cbz	r0, 800be40 <_vfiprintf_r+0x78>
 800be0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be10:	07dc      	lsls	r4, r3, #31
 800be12:	d50e      	bpl.n	800be32 <_vfiprintf_r+0x6a>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295
 800be18:	b01d      	add	sp, #116	; 0x74
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	4b7b      	ldr	r3, [pc, #492]	; (800c00c <_vfiprintf_r+0x244>)
 800be20:	429d      	cmp	r5, r3
 800be22:	d101      	bne.n	800be28 <_vfiprintf_r+0x60>
 800be24:	68b5      	ldr	r5, [r6, #8]
 800be26:	e7df      	b.n	800bde8 <_vfiprintf_r+0x20>
 800be28:	4b79      	ldr	r3, [pc, #484]	; (800c010 <_vfiprintf_r+0x248>)
 800be2a:	429d      	cmp	r5, r3
 800be2c:	bf08      	it	eq
 800be2e:	68f5      	ldreq	r5, [r6, #12]
 800be30:	e7da      	b.n	800bde8 <_vfiprintf_r+0x20>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	0598      	lsls	r0, r3, #22
 800be36:	d4ed      	bmi.n	800be14 <_vfiprintf_r+0x4c>
 800be38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be3a:	f7ff ff06 	bl	800bc4a <__retarget_lock_release_recursive>
 800be3e:	e7e9      	b.n	800be14 <_vfiprintf_r+0x4c>
 800be40:	2300      	movs	r3, #0
 800be42:	9309      	str	r3, [sp, #36]	; 0x24
 800be44:	2320      	movs	r3, #32
 800be46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be4e:	2330      	movs	r3, #48	; 0x30
 800be50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c014 <_vfiprintf_r+0x24c>
 800be54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be58:	f04f 0901 	mov.w	r9, #1
 800be5c:	4623      	mov	r3, r4
 800be5e:	469a      	mov	sl, r3
 800be60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be64:	b10a      	cbz	r2, 800be6a <_vfiprintf_r+0xa2>
 800be66:	2a25      	cmp	r2, #37	; 0x25
 800be68:	d1f9      	bne.n	800be5e <_vfiprintf_r+0x96>
 800be6a:	ebba 0b04 	subs.w	fp, sl, r4
 800be6e:	d00b      	beq.n	800be88 <_vfiprintf_r+0xc0>
 800be70:	465b      	mov	r3, fp
 800be72:	4622      	mov	r2, r4
 800be74:	4629      	mov	r1, r5
 800be76:	4630      	mov	r0, r6
 800be78:	f7ff ff93 	bl	800bda2 <__sfputs_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	f000 80aa 	beq.w	800bfd6 <_vfiprintf_r+0x20e>
 800be82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be84:	445a      	add	r2, fp
 800be86:	9209      	str	r2, [sp, #36]	; 0x24
 800be88:	f89a 3000 	ldrb.w	r3, [sl]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 80a2 	beq.w	800bfd6 <_vfiprintf_r+0x20e>
 800be92:	2300      	movs	r3, #0
 800be94:	f04f 32ff 	mov.w	r2, #4294967295
 800be98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be9c:	f10a 0a01 	add.w	sl, sl, #1
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	9307      	str	r3, [sp, #28]
 800bea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bea8:	931a      	str	r3, [sp, #104]	; 0x68
 800beaa:	4654      	mov	r4, sl
 800beac:	2205      	movs	r2, #5
 800beae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb2:	4858      	ldr	r0, [pc, #352]	; (800c014 <_vfiprintf_r+0x24c>)
 800beb4:	f7f4 f964 	bl	8000180 <memchr>
 800beb8:	9a04      	ldr	r2, [sp, #16]
 800beba:	b9d8      	cbnz	r0, 800bef4 <_vfiprintf_r+0x12c>
 800bebc:	06d1      	lsls	r1, r2, #27
 800bebe:	bf44      	itt	mi
 800bec0:	2320      	movmi	r3, #32
 800bec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec6:	0713      	lsls	r3, r2, #28
 800bec8:	bf44      	itt	mi
 800beca:	232b      	movmi	r3, #43	; 0x2b
 800becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bed0:	f89a 3000 	ldrb.w	r3, [sl]
 800bed4:	2b2a      	cmp	r3, #42	; 0x2a
 800bed6:	d015      	beq.n	800bf04 <_vfiprintf_r+0x13c>
 800bed8:	9a07      	ldr	r2, [sp, #28]
 800beda:	4654      	mov	r4, sl
 800bedc:	2000      	movs	r0, #0
 800bede:	f04f 0c0a 	mov.w	ip, #10
 800bee2:	4621      	mov	r1, r4
 800bee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee8:	3b30      	subs	r3, #48	; 0x30
 800beea:	2b09      	cmp	r3, #9
 800beec:	d94e      	bls.n	800bf8c <_vfiprintf_r+0x1c4>
 800beee:	b1b0      	cbz	r0, 800bf1e <_vfiprintf_r+0x156>
 800bef0:	9207      	str	r2, [sp, #28]
 800bef2:	e014      	b.n	800bf1e <_vfiprintf_r+0x156>
 800bef4:	eba0 0308 	sub.w	r3, r0, r8
 800bef8:	fa09 f303 	lsl.w	r3, r9, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	9304      	str	r3, [sp, #16]
 800bf00:	46a2      	mov	sl, r4
 800bf02:	e7d2      	b.n	800beaa <_vfiprintf_r+0xe2>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	1d19      	adds	r1, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	9103      	str	r1, [sp, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bfbb      	ittet	lt
 800bf10:	425b      	neglt	r3, r3
 800bf12:	f042 0202 	orrlt.w	r2, r2, #2
 800bf16:	9307      	strge	r3, [sp, #28]
 800bf18:	9307      	strlt	r3, [sp, #28]
 800bf1a:	bfb8      	it	lt
 800bf1c:	9204      	strlt	r2, [sp, #16]
 800bf1e:	7823      	ldrb	r3, [r4, #0]
 800bf20:	2b2e      	cmp	r3, #46	; 0x2e
 800bf22:	d10c      	bne.n	800bf3e <_vfiprintf_r+0x176>
 800bf24:	7863      	ldrb	r3, [r4, #1]
 800bf26:	2b2a      	cmp	r3, #42	; 0x2a
 800bf28:	d135      	bne.n	800bf96 <_vfiprintf_r+0x1ce>
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	1d1a      	adds	r2, r3, #4
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	9203      	str	r2, [sp, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	bfb8      	it	lt
 800bf36:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf3a:	3402      	adds	r4, #2
 800bf3c:	9305      	str	r3, [sp, #20]
 800bf3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c024 <_vfiprintf_r+0x25c>
 800bf42:	7821      	ldrb	r1, [r4, #0]
 800bf44:	2203      	movs	r2, #3
 800bf46:	4650      	mov	r0, sl
 800bf48:	f7f4 f91a 	bl	8000180 <memchr>
 800bf4c:	b140      	cbz	r0, 800bf60 <_vfiprintf_r+0x198>
 800bf4e:	2340      	movs	r3, #64	; 0x40
 800bf50:	eba0 000a 	sub.w	r0, r0, sl
 800bf54:	fa03 f000 	lsl.w	r0, r3, r0
 800bf58:	9b04      	ldr	r3, [sp, #16]
 800bf5a:	4303      	orrs	r3, r0
 800bf5c:	3401      	adds	r4, #1
 800bf5e:	9304      	str	r3, [sp, #16]
 800bf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf64:	482c      	ldr	r0, [pc, #176]	; (800c018 <_vfiprintf_r+0x250>)
 800bf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf6a:	2206      	movs	r2, #6
 800bf6c:	f7f4 f908 	bl	8000180 <memchr>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d03f      	beq.n	800bff4 <_vfiprintf_r+0x22c>
 800bf74:	4b29      	ldr	r3, [pc, #164]	; (800c01c <_vfiprintf_r+0x254>)
 800bf76:	bb1b      	cbnz	r3, 800bfc0 <_vfiprintf_r+0x1f8>
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	3307      	adds	r3, #7
 800bf7c:	f023 0307 	bic.w	r3, r3, #7
 800bf80:	3308      	adds	r3, #8
 800bf82:	9303      	str	r3, [sp, #12]
 800bf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf86:	443b      	add	r3, r7
 800bf88:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8a:	e767      	b.n	800be5c <_vfiprintf_r+0x94>
 800bf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf90:	460c      	mov	r4, r1
 800bf92:	2001      	movs	r0, #1
 800bf94:	e7a5      	b.n	800bee2 <_vfiprintf_r+0x11a>
 800bf96:	2300      	movs	r3, #0
 800bf98:	3401      	adds	r4, #1
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f04f 0c0a 	mov.w	ip, #10
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa8:	3a30      	subs	r2, #48	; 0x30
 800bfaa:	2a09      	cmp	r2, #9
 800bfac:	d903      	bls.n	800bfb6 <_vfiprintf_r+0x1ee>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0c5      	beq.n	800bf3e <_vfiprintf_r+0x176>
 800bfb2:	9105      	str	r1, [sp, #20]
 800bfb4:	e7c3      	b.n	800bf3e <_vfiprintf_r+0x176>
 800bfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfba:	4604      	mov	r4, r0
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e7f0      	b.n	800bfa2 <_vfiprintf_r+0x1da>
 800bfc0:	ab03      	add	r3, sp, #12
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	4b16      	ldr	r3, [pc, #88]	; (800c020 <_vfiprintf_r+0x258>)
 800bfc8:	a904      	add	r1, sp, #16
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f3af 8000 	nop.w
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	1c78      	adds	r0, r7, #1
 800bfd4:	d1d6      	bne.n	800bf84 <_vfiprintf_r+0x1bc>
 800bfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd8:	07d9      	lsls	r1, r3, #31
 800bfda:	d405      	bmi.n	800bfe8 <_vfiprintf_r+0x220>
 800bfdc:	89ab      	ldrh	r3, [r5, #12]
 800bfde:	059a      	lsls	r2, r3, #22
 800bfe0:	d402      	bmi.n	800bfe8 <_vfiprintf_r+0x220>
 800bfe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe4:	f7ff fe31 	bl	800bc4a <__retarget_lock_release_recursive>
 800bfe8:	89ab      	ldrh	r3, [r5, #12]
 800bfea:	065b      	lsls	r3, r3, #25
 800bfec:	f53f af12 	bmi.w	800be14 <_vfiprintf_r+0x4c>
 800bff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bff2:	e711      	b.n	800be18 <_vfiprintf_r+0x50>
 800bff4:	ab03      	add	r3, sp, #12
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	462a      	mov	r2, r5
 800bffa:	4b09      	ldr	r3, [pc, #36]	; (800c020 <_vfiprintf_r+0x258>)
 800bffc:	a904      	add	r1, sp, #16
 800bffe:	4630      	mov	r0, r6
 800c000:	f000 f880 	bl	800c104 <_printf_i>
 800c004:	e7e4      	b.n	800bfd0 <_vfiprintf_r+0x208>
 800c006:	bf00      	nop
 800c008:	0800caf4 	.word	0x0800caf4
 800c00c:	0800cb14 	.word	0x0800cb14
 800c010:	0800cad4 	.word	0x0800cad4
 800c014:	0800cb34 	.word	0x0800cb34
 800c018:	0800cb3e 	.word	0x0800cb3e
 800c01c:	00000000 	.word	0x00000000
 800c020:	0800bda3 	.word	0x0800bda3
 800c024:	0800cb3a 	.word	0x0800cb3a

0800c028 <_printf_common>:
 800c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02c:	4616      	mov	r6, r2
 800c02e:	4699      	mov	r9, r3
 800c030:	688a      	ldr	r2, [r1, #8]
 800c032:	690b      	ldr	r3, [r1, #16]
 800c034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c038:	4293      	cmp	r3, r2
 800c03a:	bfb8      	it	lt
 800c03c:	4613      	movlt	r3, r2
 800c03e:	6033      	str	r3, [r6, #0]
 800c040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c044:	4607      	mov	r7, r0
 800c046:	460c      	mov	r4, r1
 800c048:	b10a      	cbz	r2, 800c04e <_printf_common+0x26>
 800c04a:	3301      	adds	r3, #1
 800c04c:	6033      	str	r3, [r6, #0]
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	0699      	lsls	r1, r3, #26
 800c052:	bf42      	ittt	mi
 800c054:	6833      	ldrmi	r3, [r6, #0]
 800c056:	3302      	addmi	r3, #2
 800c058:	6033      	strmi	r3, [r6, #0]
 800c05a:	6825      	ldr	r5, [r4, #0]
 800c05c:	f015 0506 	ands.w	r5, r5, #6
 800c060:	d106      	bne.n	800c070 <_printf_common+0x48>
 800c062:	f104 0a19 	add.w	sl, r4, #25
 800c066:	68e3      	ldr	r3, [r4, #12]
 800c068:	6832      	ldr	r2, [r6, #0]
 800c06a:	1a9b      	subs	r3, r3, r2
 800c06c:	42ab      	cmp	r3, r5
 800c06e:	dc26      	bgt.n	800c0be <_printf_common+0x96>
 800c070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c074:	1e13      	subs	r3, r2, #0
 800c076:	6822      	ldr	r2, [r4, #0]
 800c078:	bf18      	it	ne
 800c07a:	2301      	movne	r3, #1
 800c07c:	0692      	lsls	r2, r2, #26
 800c07e:	d42b      	bmi.n	800c0d8 <_printf_common+0xb0>
 800c080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c084:	4649      	mov	r1, r9
 800c086:	4638      	mov	r0, r7
 800c088:	47c0      	blx	r8
 800c08a:	3001      	adds	r0, #1
 800c08c:	d01e      	beq.n	800c0cc <_printf_common+0xa4>
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	68e5      	ldr	r5, [r4, #12]
 800c092:	6832      	ldr	r2, [r6, #0]
 800c094:	f003 0306 	and.w	r3, r3, #6
 800c098:	2b04      	cmp	r3, #4
 800c09a:	bf08      	it	eq
 800c09c:	1aad      	subeq	r5, r5, r2
 800c09e:	68a3      	ldr	r3, [r4, #8]
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	bf0c      	ite	eq
 800c0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0a8:	2500      	movne	r5, #0
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	bfc4      	itt	gt
 800c0ae:	1a9b      	subgt	r3, r3, r2
 800c0b0:	18ed      	addgt	r5, r5, r3
 800c0b2:	2600      	movs	r6, #0
 800c0b4:	341a      	adds	r4, #26
 800c0b6:	42b5      	cmp	r5, r6
 800c0b8:	d11a      	bne.n	800c0f0 <_printf_common+0xc8>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e008      	b.n	800c0d0 <_printf_common+0xa8>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	4652      	mov	r2, sl
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	47c0      	blx	r8
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d103      	bne.n	800c0d4 <_printf_common+0xac>
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	e7c6      	b.n	800c066 <_printf_common+0x3e>
 800c0d8:	18e1      	adds	r1, r4, r3
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	2030      	movs	r0, #48	; 0x30
 800c0de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0e2:	4422      	add	r2, r4
 800c0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0ec:	3302      	adds	r3, #2
 800c0ee:	e7c7      	b.n	800c080 <_printf_common+0x58>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	47c0      	blx	r8
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	d0e6      	beq.n	800c0cc <_printf_common+0xa4>
 800c0fe:	3601      	adds	r6, #1
 800c100:	e7d9      	b.n	800c0b6 <_printf_common+0x8e>
	...

0800c104 <_printf_i>:
 800c104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c108:	7e0f      	ldrb	r7, [r1, #24]
 800c10a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c10c:	2f78      	cmp	r7, #120	; 0x78
 800c10e:	4691      	mov	r9, r2
 800c110:	4680      	mov	r8, r0
 800c112:	460c      	mov	r4, r1
 800c114:	469a      	mov	sl, r3
 800c116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c11a:	d807      	bhi.n	800c12c <_printf_i+0x28>
 800c11c:	2f62      	cmp	r7, #98	; 0x62
 800c11e:	d80a      	bhi.n	800c136 <_printf_i+0x32>
 800c120:	2f00      	cmp	r7, #0
 800c122:	f000 80d8 	beq.w	800c2d6 <_printf_i+0x1d2>
 800c126:	2f58      	cmp	r7, #88	; 0x58
 800c128:	f000 80a3 	beq.w	800c272 <_printf_i+0x16e>
 800c12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c134:	e03a      	b.n	800c1ac <_printf_i+0xa8>
 800c136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c13a:	2b15      	cmp	r3, #21
 800c13c:	d8f6      	bhi.n	800c12c <_printf_i+0x28>
 800c13e:	a101      	add	r1, pc, #4	; (adr r1, 800c144 <_printf_i+0x40>)
 800c140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c144:	0800c19d 	.word	0x0800c19d
 800c148:	0800c1b1 	.word	0x0800c1b1
 800c14c:	0800c12d 	.word	0x0800c12d
 800c150:	0800c12d 	.word	0x0800c12d
 800c154:	0800c12d 	.word	0x0800c12d
 800c158:	0800c12d 	.word	0x0800c12d
 800c15c:	0800c1b1 	.word	0x0800c1b1
 800c160:	0800c12d 	.word	0x0800c12d
 800c164:	0800c12d 	.word	0x0800c12d
 800c168:	0800c12d 	.word	0x0800c12d
 800c16c:	0800c12d 	.word	0x0800c12d
 800c170:	0800c2bd 	.word	0x0800c2bd
 800c174:	0800c1e1 	.word	0x0800c1e1
 800c178:	0800c29f 	.word	0x0800c29f
 800c17c:	0800c12d 	.word	0x0800c12d
 800c180:	0800c12d 	.word	0x0800c12d
 800c184:	0800c2df 	.word	0x0800c2df
 800c188:	0800c12d 	.word	0x0800c12d
 800c18c:	0800c1e1 	.word	0x0800c1e1
 800c190:	0800c12d 	.word	0x0800c12d
 800c194:	0800c12d 	.word	0x0800c12d
 800c198:	0800c2a7 	.word	0x0800c2a7
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	1d1a      	adds	r2, r3, #4
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	602a      	str	r2, [r5, #0]
 800c1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e0a3      	b.n	800c2f8 <_printf_i+0x1f4>
 800c1b0:	6820      	ldr	r0, [r4, #0]
 800c1b2:	6829      	ldr	r1, [r5, #0]
 800c1b4:	0606      	lsls	r6, r0, #24
 800c1b6:	f101 0304 	add.w	r3, r1, #4
 800c1ba:	d50a      	bpl.n	800c1d2 <_printf_i+0xce>
 800c1bc:	680e      	ldr	r6, [r1, #0]
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	da03      	bge.n	800c1cc <_printf_i+0xc8>
 800c1c4:	232d      	movs	r3, #45	; 0x2d
 800c1c6:	4276      	negs	r6, r6
 800c1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1cc:	485e      	ldr	r0, [pc, #376]	; (800c348 <_printf_i+0x244>)
 800c1ce:	230a      	movs	r3, #10
 800c1d0:	e019      	b.n	800c206 <_printf_i+0x102>
 800c1d2:	680e      	ldr	r6, [r1, #0]
 800c1d4:	602b      	str	r3, [r5, #0]
 800c1d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1da:	bf18      	it	ne
 800c1dc:	b236      	sxthne	r6, r6
 800c1de:	e7ef      	b.n	800c1c0 <_printf_i+0xbc>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	6820      	ldr	r0, [r4, #0]
 800c1e4:	1d19      	adds	r1, r3, #4
 800c1e6:	6029      	str	r1, [r5, #0]
 800c1e8:	0601      	lsls	r1, r0, #24
 800c1ea:	d501      	bpl.n	800c1f0 <_printf_i+0xec>
 800c1ec:	681e      	ldr	r6, [r3, #0]
 800c1ee:	e002      	b.n	800c1f6 <_printf_i+0xf2>
 800c1f0:	0646      	lsls	r6, r0, #25
 800c1f2:	d5fb      	bpl.n	800c1ec <_printf_i+0xe8>
 800c1f4:	881e      	ldrh	r6, [r3, #0]
 800c1f6:	4854      	ldr	r0, [pc, #336]	; (800c348 <_printf_i+0x244>)
 800c1f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c1fa:	bf0c      	ite	eq
 800c1fc:	2308      	moveq	r3, #8
 800c1fe:	230a      	movne	r3, #10
 800c200:	2100      	movs	r1, #0
 800c202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c206:	6865      	ldr	r5, [r4, #4]
 800c208:	60a5      	str	r5, [r4, #8]
 800c20a:	2d00      	cmp	r5, #0
 800c20c:	bfa2      	ittt	ge
 800c20e:	6821      	ldrge	r1, [r4, #0]
 800c210:	f021 0104 	bicge.w	r1, r1, #4
 800c214:	6021      	strge	r1, [r4, #0]
 800c216:	b90e      	cbnz	r6, 800c21c <_printf_i+0x118>
 800c218:	2d00      	cmp	r5, #0
 800c21a:	d04d      	beq.n	800c2b8 <_printf_i+0x1b4>
 800c21c:	4615      	mov	r5, r2
 800c21e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c222:	fb03 6711 	mls	r7, r3, r1, r6
 800c226:	5dc7      	ldrb	r7, [r0, r7]
 800c228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c22c:	4637      	mov	r7, r6
 800c22e:	42bb      	cmp	r3, r7
 800c230:	460e      	mov	r6, r1
 800c232:	d9f4      	bls.n	800c21e <_printf_i+0x11a>
 800c234:	2b08      	cmp	r3, #8
 800c236:	d10b      	bne.n	800c250 <_printf_i+0x14c>
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	07de      	lsls	r6, r3, #31
 800c23c:	d508      	bpl.n	800c250 <_printf_i+0x14c>
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	6861      	ldr	r1, [r4, #4]
 800c242:	4299      	cmp	r1, r3
 800c244:	bfde      	ittt	le
 800c246:	2330      	movle	r3, #48	; 0x30
 800c248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c24c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c250:	1b52      	subs	r2, r2, r5
 800c252:	6122      	str	r2, [r4, #16]
 800c254:	f8cd a000 	str.w	sl, [sp]
 800c258:	464b      	mov	r3, r9
 800c25a:	aa03      	add	r2, sp, #12
 800c25c:	4621      	mov	r1, r4
 800c25e:	4640      	mov	r0, r8
 800c260:	f7ff fee2 	bl	800c028 <_printf_common>
 800c264:	3001      	adds	r0, #1
 800c266:	d14c      	bne.n	800c302 <_printf_i+0x1fe>
 800c268:	f04f 30ff 	mov.w	r0, #4294967295
 800c26c:	b004      	add	sp, #16
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	4835      	ldr	r0, [pc, #212]	; (800c348 <_printf_i+0x244>)
 800c274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c278:	6829      	ldr	r1, [r5, #0]
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c280:	6029      	str	r1, [r5, #0]
 800c282:	061d      	lsls	r5, r3, #24
 800c284:	d514      	bpl.n	800c2b0 <_printf_i+0x1ac>
 800c286:	07df      	lsls	r7, r3, #31
 800c288:	bf44      	itt	mi
 800c28a:	f043 0320 	orrmi.w	r3, r3, #32
 800c28e:	6023      	strmi	r3, [r4, #0]
 800c290:	b91e      	cbnz	r6, 800c29a <_printf_i+0x196>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	f023 0320 	bic.w	r3, r3, #32
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	2310      	movs	r3, #16
 800c29c:	e7b0      	b.n	800c200 <_printf_i+0xfc>
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	f043 0320 	orr.w	r3, r3, #32
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	2378      	movs	r3, #120	; 0x78
 800c2a8:	4828      	ldr	r0, [pc, #160]	; (800c34c <_printf_i+0x248>)
 800c2aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2ae:	e7e3      	b.n	800c278 <_printf_i+0x174>
 800c2b0:	0659      	lsls	r1, r3, #25
 800c2b2:	bf48      	it	mi
 800c2b4:	b2b6      	uxthmi	r6, r6
 800c2b6:	e7e6      	b.n	800c286 <_printf_i+0x182>
 800c2b8:	4615      	mov	r5, r2
 800c2ba:	e7bb      	b.n	800c234 <_printf_i+0x130>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	6826      	ldr	r6, [r4, #0]
 800c2c0:	6961      	ldr	r1, [r4, #20]
 800c2c2:	1d18      	adds	r0, r3, #4
 800c2c4:	6028      	str	r0, [r5, #0]
 800c2c6:	0635      	lsls	r5, r6, #24
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	d501      	bpl.n	800c2d0 <_printf_i+0x1cc>
 800c2cc:	6019      	str	r1, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <_printf_i+0x1d2>
 800c2d0:	0670      	lsls	r0, r6, #25
 800c2d2:	d5fb      	bpl.n	800c2cc <_printf_i+0x1c8>
 800c2d4:	8019      	strh	r1, [r3, #0]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	6123      	str	r3, [r4, #16]
 800c2da:	4615      	mov	r5, r2
 800c2dc:	e7ba      	b.n	800c254 <_printf_i+0x150>
 800c2de:	682b      	ldr	r3, [r5, #0]
 800c2e0:	1d1a      	adds	r2, r3, #4
 800c2e2:	602a      	str	r2, [r5, #0]
 800c2e4:	681d      	ldr	r5, [r3, #0]
 800c2e6:	6862      	ldr	r2, [r4, #4]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f7f3 ff48 	bl	8000180 <memchr>
 800c2f0:	b108      	cbz	r0, 800c2f6 <_printf_i+0x1f2>
 800c2f2:	1b40      	subs	r0, r0, r5
 800c2f4:	6060      	str	r0, [r4, #4]
 800c2f6:	6863      	ldr	r3, [r4, #4]
 800c2f8:	6123      	str	r3, [r4, #16]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c300:	e7a8      	b.n	800c254 <_printf_i+0x150>
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	462a      	mov	r2, r5
 800c306:	4649      	mov	r1, r9
 800c308:	4640      	mov	r0, r8
 800c30a:	47d0      	blx	sl
 800c30c:	3001      	adds	r0, #1
 800c30e:	d0ab      	beq.n	800c268 <_printf_i+0x164>
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	079b      	lsls	r3, r3, #30
 800c314:	d413      	bmi.n	800c33e <_printf_i+0x23a>
 800c316:	68e0      	ldr	r0, [r4, #12]
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	4298      	cmp	r0, r3
 800c31c:	bfb8      	it	lt
 800c31e:	4618      	movlt	r0, r3
 800c320:	e7a4      	b.n	800c26c <_printf_i+0x168>
 800c322:	2301      	movs	r3, #1
 800c324:	4632      	mov	r2, r6
 800c326:	4649      	mov	r1, r9
 800c328:	4640      	mov	r0, r8
 800c32a:	47d0      	blx	sl
 800c32c:	3001      	adds	r0, #1
 800c32e:	d09b      	beq.n	800c268 <_printf_i+0x164>
 800c330:	3501      	adds	r5, #1
 800c332:	68e3      	ldr	r3, [r4, #12]
 800c334:	9903      	ldr	r1, [sp, #12]
 800c336:	1a5b      	subs	r3, r3, r1
 800c338:	42ab      	cmp	r3, r5
 800c33a:	dcf2      	bgt.n	800c322 <_printf_i+0x21e>
 800c33c:	e7eb      	b.n	800c316 <_printf_i+0x212>
 800c33e:	2500      	movs	r5, #0
 800c340:	f104 0619 	add.w	r6, r4, #25
 800c344:	e7f5      	b.n	800c332 <_printf_i+0x22e>
 800c346:	bf00      	nop
 800c348:	0800cb45 	.word	0x0800cb45
 800c34c:	0800cb56 	.word	0x0800cb56

0800c350 <_sbrk_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d06      	ldr	r5, [pc, #24]	; (800c36c <_sbrk_r+0x1c>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	f7f4 fccc 	bl	8000cf8 <_sbrk>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_sbrk_r+0x1a>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_sbrk_r+0x1a>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	20001cc4 	.word	0x20001cc4

0800c370 <__sread>:
 800c370:	b510      	push	{r4, lr}
 800c372:	460c      	mov	r4, r1
 800c374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c378:	f000 fab2 	bl	800c8e0 <_read_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	bfab      	itete	ge
 800c380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c382:	89a3      	ldrhlt	r3, [r4, #12]
 800c384:	181b      	addge	r3, r3, r0
 800c386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c38a:	bfac      	ite	ge
 800c38c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c38e:	81a3      	strhlt	r3, [r4, #12]
 800c390:	bd10      	pop	{r4, pc}

0800c392 <__swrite>:
 800c392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c396:	461f      	mov	r7, r3
 800c398:	898b      	ldrh	r3, [r1, #12]
 800c39a:	05db      	lsls	r3, r3, #23
 800c39c:	4605      	mov	r5, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	d505      	bpl.n	800c3b0 <__swrite+0x1e>
 800c3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f000 f9c8 	bl	800c740 <_lseek_r>
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	4632      	mov	r2, r6
 800c3be:	463b      	mov	r3, r7
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c6:	f000 b869 	b.w	800c49c <_write_r>

0800c3ca <__sseek>:
 800c3ca:	b510      	push	{r4, lr}
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d2:	f000 f9b5 	bl	800c740 <_lseek_r>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	bf15      	itete	ne
 800c3dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3e6:	81a3      	strheq	r3, [r4, #12]
 800c3e8:	bf18      	it	ne
 800c3ea:	81a3      	strhne	r3, [r4, #12]
 800c3ec:	bd10      	pop	{r4, pc}

0800c3ee <__sclose>:
 800c3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f2:	f000 b8d3 	b.w	800c59c <_close_r>
	...

0800c3f8 <__swbuf_r>:
 800c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fa:	460e      	mov	r6, r1
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	4605      	mov	r5, r0
 800c400:	b118      	cbz	r0, 800c40a <__swbuf_r+0x12>
 800c402:	6983      	ldr	r3, [r0, #24]
 800c404:	b90b      	cbnz	r3, 800c40a <__swbuf_r+0x12>
 800c406:	f7ff fb81 	bl	800bb0c <__sinit>
 800c40a:	4b21      	ldr	r3, [pc, #132]	; (800c490 <__swbuf_r+0x98>)
 800c40c:	429c      	cmp	r4, r3
 800c40e:	d12b      	bne.n	800c468 <__swbuf_r+0x70>
 800c410:	686c      	ldr	r4, [r5, #4]
 800c412:	69a3      	ldr	r3, [r4, #24]
 800c414:	60a3      	str	r3, [r4, #8]
 800c416:	89a3      	ldrh	r3, [r4, #12]
 800c418:	071a      	lsls	r2, r3, #28
 800c41a:	d52f      	bpl.n	800c47c <__swbuf_r+0x84>
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	b36b      	cbz	r3, 800c47c <__swbuf_r+0x84>
 800c420:	6923      	ldr	r3, [r4, #16]
 800c422:	6820      	ldr	r0, [r4, #0]
 800c424:	1ac0      	subs	r0, r0, r3
 800c426:	6963      	ldr	r3, [r4, #20]
 800c428:	b2f6      	uxtb	r6, r6
 800c42a:	4283      	cmp	r3, r0
 800c42c:	4637      	mov	r7, r6
 800c42e:	dc04      	bgt.n	800c43a <__swbuf_r+0x42>
 800c430:	4621      	mov	r1, r4
 800c432:	4628      	mov	r0, r5
 800c434:	f000 f948 	bl	800c6c8 <_fflush_r>
 800c438:	bb30      	cbnz	r0, 800c488 <__swbuf_r+0x90>
 800c43a:	68a3      	ldr	r3, [r4, #8]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	60a3      	str	r3, [r4, #8]
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	6022      	str	r2, [r4, #0]
 800c446:	701e      	strb	r6, [r3, #0]
 800c448:	6963      	ldr	r3, [r4, #20]
 800c44a:	3001      	adds	r0, #1
 800c44c:	4283      	cmp	r3, r0
 800c44e:	d004      	beq.n	800c45a <__swbuf_r+0x62>
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	07db      	lsls	r3, r3, #31
 800c454:	d506      	bpl.n	800c464 <__swbuf_r+0x6c>
 800c456:	2e0a      	cmp	r6, #10
 800c458:	d104      	bne.n	800c464 <__swbuf_r+0x6c>
 800c45a:	4621      	mov	r1, r4
 800c45c:	4628      	mov	r0, r5
 800c45e:	f000 f933 	bl	800c6c8 <_fflush_r>
 800c462:	b988      	cbnz	r0, 800c488 <__swbuf_r+0x90>
 800c464:	4638      	mov	r0, r7
 800c466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c468:	4b0a      	ldr	r3, [pc, #40]	; (800c494 <__swbuf_r+0x9c>)
 800c46a:	429c      	cmp	r4, r3
 800c46c:	d101      	bne.n	800c472 <__swbuf_r+0x7a>
 800c46e:	68ac      	ldr	r4, [r5, #8]
 800c470:	e7cf      	b.n	800c412 <__swbuf_r+0x1a>
 800c472:	4b09      	ldr	r3, [pc, #36]	; (800c498 <__swbuf_r+0xa0>)
 800c474:	429c      	cmp	r4, r3
 800c476:	bf08      	it	eq
 800c478:	68ec      	ldreq	r4, [r5, #12]
 800c47a:	e7ca      	b.n	800c412 <__swbuf_r+0x1a>
 800c47c:	4621      	mov	r1, r4
 800c47e:	4628      	mov	r0, r5
 800c480:	f000 f81e 	bl	800c4c0 <__swsetup_r>
 800c484:	2800      	cmp	r0, #0
 800c486:	d0cb      	beq.n	800c420 <__swbuf_r+0x28>
 800c488:	f04f 37ff 	mov.w	r7, #4294967295
 800c48c:	e7ea      	b.n	800c464 <__swbuf_r+0x6c>
 800c48e:	bf00      	nop
 800c490:	0800caf4 	.word	0x0800caf4
 800c494:	0800cb14 	.word	0x0800cb14
 800c498:	0800cad4 	.word	0x0800cad4

0800c49c <_write_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4d07      	ldr	r5, [pc, #28]	; (800c4bc <_write_r+0x20>)
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	602a      	str	r2, [r5, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	f7f4 fab4 	bl	8000a18 <_write>
 800c4b0:	1c43      	adds	r3, r0, #1
 800c4b2:	d102      	bne.n	800c4ba <_write_r+0x1e>
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	b103      	cbz	r3, 800c4ba <_write_r+0x1e>
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	20001cc4 	.word	0x20001cc4

0800c4c0 <__swsetup_r>:
 800c4c0:	4b32      	ldr	r3, [pc, #200]	; (800c58c <__swsetup_r+0xcc>)
 800c4c2:	b570      	push	{r4, r5, r6, lr}
 800c4c4:	681d      	ldr	r5, [r3, #0]
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	460c      	mov	r4, r1
 800c4ca:	b125      	cbz	r5, 800c4d6 <__swsetup_r+0x16>
 800c4cc:	69ab      	ldr	r3, [r5, #24]
 800c4ce:	b913      	cbnz	r3, 800c4d6 <__swsetup_r+0x16>
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	f7ff fb1b 	bl	800bb0c <__sinit>
 800c4d6:	4b2e      	ldr	r3, [pc, #184]	; (800c590 <__swsetup_r+0xd0>)
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	d10f      	bne.n	800c4fc <__swsetup_r+0x3c>
 800c4dc:	686c      	ldr	r4, [r5, #4]
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4e4:	0719      	lsls	r1, r3, #28
 800c4e6:	d42c      	bmi.n	800c542 <__swsetup_r+0x82>
 800c4e8:	06dd      	lsls	r5, r3, #27
 800c4ea:	d411      	bmi.n	800c510 <__swsetup_r+0x50>
 800c4ec:	2309      	movs	r3, #9
 800c4ee:	6033      	str	r3, [r6, #0]
 800c4f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4f4:	81a3      	strh	r3, [r4, #12]
 800c4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fa:	e03e      	b.n	800c57a <__swsetup_r+0xba>
 800c4fc:	4b25      	ldr	r3, [pc, #148]	; (800c594 <__swsetup_r+0xd4>)
 800c4fe:	429c      	cmp	r4, r3
 800c500:	d101      	bne.n	800c506 <__swsetup_r+0x46>
 800c502:	68ac      	ldr	r4, [r5, #8]
 800c504:	e7eb      	b.n	800c4de <__swsetup_r+0x1e>
 800c506:	4b24      	ldr	r3, [pc, #144]	; (800c598 <__swsetup_r+0xd8>)
 800c508:	429c      	cmp	r4, r3
 800c50a:	bf08      	it	eq
 800c50c:	68ec      	ldreq	r4, [r5, #12]
 800c50e:	e7e6      	b.n	800c4de <__swsetup_r+0x1e>
 800c510:	0758      	lsls	r0, r3, #29
 800c512:	d512      	bpl.n	800c53a <__swsetup_r+0x7a>
 800c514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c516:	b141      	cbz	r1, 800c52a <__swsetup_r+0x6a>
 800c518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c51c:	4299      	cmp	r1, r3
 800c51e:	d002      	beq.n	800c526 <__swsetup_r+0x66>
 800c520:	4630      	mov	r0, r6
 800c522:	f000 f991 	bl	800c848 <_free_r>
 800c526:	2300      	movs	r3, #0
 800c528:	6363      	str	r3, [r4, #52]	; 0x34
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	2300      	movs	r3, #0
 800c534:	6063      	str	r3, [r4, #4]
 800c536:	6923      	ldr	r3, [r4, #16]
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f043 0308 	orr.w	r3, r3, #8
 800c540:	81a3      	strh	r3, [r4, #12]
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	b94b      	cbnz	r3, 800c55a <__swsetup_r+0x9a>
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c550:	d003      	beq.n	800c55a <__swsetup_r+0x9a>
 800c552:	4621      	mov	r1, r4
 800c554:	4630      	mov	r0, r6
 800c556:	f000 f92b 	bl	800c7b0 <__smakebuf_r>
 800c55a:	89a0      	ldrh	r0, [r4, #12]
 800c55c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c560:	f010 0301 	ands.w	r3, r0, #1
 800c564:	d00a      	beq.n	800c57c <__swsetup_r+0xbc>
 800c566:	2300      	movs	r3, #0
 800c568:	60a3      	str	r3, [r4, #8]
 800c56a:	6963      	ldr	r3, [r4, #20]
 800c56c:	425b      	negs	r3, r3
 800c56e:	61a3      	str	r3, [r4, #24]
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	b943      	cbnz	r3, 800c586 <__swsetup_r+0xc6>
 800c574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c578:	d1ba      	bne.n	800c4f0 <__swsetup_r+0x30>
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	0781      	lsls	r1, r0, #30
 800c57e:	bf58      	it	pl
 800c580:	6963      	ldrpl	r3, [r4, #20]
 800c582:	60a3      	str	r3, [r4, #8]
 800c584:	e7f4      	b.n	800c570 <__swsetup_r+0xb0>
 800c586:	2000      	movs	r0, #0
 800c588:	e7f7      	b.n	800c57a <__swsetup_r+0xba>
 800c58a:	bf00      	nop
 800c58c:	2000010c 	.word	0x2000010c
 800c590:	0800caf4 	.word	0x0800caf4
 800c594:	0800cb14 	.word	0x0800cb14
 800c598:	0800cad4 	.word	0x0800cad4

0800c59c <_close_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4d06      	ldr	r5, [pc, #24]	; (800c5b8 <_close_r+0x1c>)
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	602b      	str	r3, [r5, #0]
 800c5a8:	f7f4 fb71 	bl	8000c8e <_close>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d102      	bne.n	800c5b6 <_close_r+0x1a>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	b103      	cbz	r3, 800c5b6 <_close_r+0x1a>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	20001cc4 	.word	0x20001cc4

0800c5bc <__sflush_r>:
 800c5bc:	898a      	ldrh	r2, [r1, #12]
 800c5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c2:	4605      	mov	r5, r0
 800c5c4:	0710      	lsls	r0, r2, #28
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	d458      	bmi.n	800c67c <__sflush_r+0xc0>
 800c5ca:	684b      	ldr	r3, [r1, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	dc05      	bgt.n	800c5dc <__sflush_r+0x20>
 800c5d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	dc02      	bgt.n	800c5dc <__sflush_r+0x20>
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5de:	2e00      	cmp	r6, #0
 800c5e0:	d0f9      	beq.n	800c5d6 <__sflush_r+0x1a>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5e8:	682f      	ldr	r7, [r5, #0]
 800c5ea:	602b      	str	r3, [r5, #0]
 800c5ec:	d032      	beq.n	800c654 <__sflush_r+0x98>
 800c5ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	075a      	lsls	r2, r3, #29
 800c5f4:	d505      	bpl.n	800c602 <__sflush_r+0x46>
 800c5f6:	6863      	ldr	r3, [r4, #4]
 800c5f8:	1ac0      	subs	r0, r0, r3
 800c5fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5fc:	b10b      	cbz	r3, 800c602 <__sflush_r+0x46>
 800c5fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c600:	1ac0      	subs	r0, r0, r3
 800c602:	2300      	movs	r3, #0
 800c604:	4602      	mov	r2, r0
 800c606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c608:	6a21      	ldr	r1, [r4, #32]
 800c60a:	4628      	mov	r0, r5
 800c60c:	47b0      	blx	r6
 800c60e:	1c43      	adds	r3, r0, #1
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	d106      	bne.n	800c622 <__sflush_r+0x66>
 800c614:	6829      	ldr	r1, [r5, #0]
 800c616:	291d      	cmp	r1, #29
 800c618:	d82c      	bhi.n	800c674 <__sflush_r+0xb8>
 800c61a:	4a2a      	ldr	r2, [pc, #168]	; (800c6c4 <__sflush_r+0x108>)
 800c61c:	40ca      	lsrs	r2, r1
 800c61e:	07d6      	lsls	r6, r2, #31
 800c620:	d528      	bpl.n	800c674 <__sflush_r+0xb8>
 800c622:	2200      	movs	r2, #0
 800c624:	6062      	str	r2, [r4, #4]
 800c626:	04d9      	lsls	r1, r3, #19
 800c628:	6922      	ldr	r2, [r4, #16]
 800c62a:	6022      	str	r2, [r4, #0]
 800c62c:	d504      	bpl.n	800c638 <__sflush_r+0x7c>
 800c62e:	1c42      	adds	r2, r0, #1
 800c630:	d101      	bne.n	800c636 <__sflush_r+0x7a>
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	b903      	cbnz	r3, 800c638 <__sflush_r+0x7c>
 800c636:	6560      	str	r0, [r4, #84]	; 0x54
 800c638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c63a:	602f      	str	r7, [r5, #0]
 800c63c:	2900      	cmp	r1, #0
 800c63e:	d0ca      	beq.n	800c5d6 <__sflush_r+0x1a>
 800c640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c644:	4299      	cmp	r1, r3
 800c646:	d002      	beq.n	800c64e <__sflush_r+0x92>
 800c648:	4628      	mov	r0, r5
 800c64a:	f000 f8fd 	bl	800c848 <_free_r>
 800c64e:	2000      	movs	r0, #0
 800c650:	6360      	str	r0, [r4, #52]	; 0x34
 800c652:	e7c1      	b.n	800c5d8 <__sflush_r+0x1c>
 800c654:	6a21      	ldr	r1, [r4, #32]
 800c656:	2301      	movs	r3, #1
 800c658:	4628      	mov	r0, r5
 800c65a:	47b0      	blx	r6
 800c65c:	1c41      	adds	r1, r0, #1
 800c65e:	d1c7      	bne.n	800c5f0 <__sflush_r+0x34>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0c4      	beq.n	800c5f0 <__sflush_r+0x34>
 800c666:	2b1d      	cmp	r3, #29
 800c668:	d001      	beq.n	800c66e <__sflush_r+0xb2>
 800c66a:	2b16      	cmp	r3, #22
 800c66c:	d101      	bne.n	800c672 <__sflush_r+0xb6>
 800c66e:	602f      	str	r7, [r5, #0]
 800c670:	e7b1      	b.n	800c5d6 <__sflush_r+0x1a>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	e7ad      	b.n	800c5d8 <__sflush_r+0x1c>
 800c67c:	690f      	ldr	r7, [r1, #16]
 800c67e:	2f00      	cmp	r7, #0
 800c680:	d0a9      	beq.n	800c5d6 <__sflush_r+0x1a>
 800c682:	0793      	lsls	r3, r2, #30
 800c684:	680e      	ldr	r6, [r1, #0]
 800c686:	bf08      	it	eq
 800c688:	694b      	ldreq	r3, [r1, #20]
 800c68a:	600f      	str	r7, [r1, #0]
 800c68c:	bf18      	it	ne
 800c68e:	2300      	movne	r3, #0
 800c690:	eba6 0807 	sub.w	r8, r6, r7
 800c694:	608b      	str	r3, [r1, #8]
 800c696:	f1b8 0f00 	cmp.w	r8, #0
 800c69a:	dd9c      	ble.n	800c5d6 <__sflush_r+0x1a>
 800c69c:	6a21      	ldr	r1, [r4, #32]
 800c69e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6a0:	4643      	mov	r3, r8
 800c6a2:	463a      	mov	r2, r7
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	47b0      	blx	r6
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	dc06      	bgt.n	800c6ba <__sflush_r+0xfe>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b2:	81a3      	strh	r3, [r4, #12]
 800c6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b8:	e78e      	b.n	800c5d8 <__sflush_r+0x1c>
 800c6ba:	4407      	add	r7, r0
 800c6bc:	eba8 0800 	sub.w	r8, r8, r0
 800c6c0:	e7e9      	b.n	800c696 <__sflush_r+0xda>
 800c6c2:	bf00      	nop
 800c6c4:	20400001 	.word	0x20400001

0800c6c8 <_fflush_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	690b      	ldr	r3, [r1, #16]
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	b913      	cbnz	r3, 800c6d8 <_fflush_r+0x10>
 800c6d2:	2500      	movs	r5, #0
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	b118      	cbz	r0, 800c6e2 <_fflush_r+0x1a>
 800c6da:	6983      	ldr	r3, [r0, #24]
 800c6dc:	b90b      	cbnz	r3, 800c6e2 <_fflush_r+0x1a>
 800c6de:	f7ff fa15 	bl	800bb0c <__sinit>
 800c6e2:	4b14      	ldr	r3, [pc, #80]	; (800c734 <_fflush_r+0x6c>)
 800c6e4:	429c      	cmp	r4, r3
 800c6e6:	d11b      	bne.n	800c720 <_fflush_r+0x58>
 800c6e8:	686c      	ldr	r4, [r5, #4]
 800c6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d0ef      	beq.n	800c6d2 <_fflush_r+0xa>
 800c6f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6f4:	07d0      	lsls	r0, r2, #31
 800c6f6:	d404      	bmi.n	800c702 <_fflush_r+0x3a>
 800c6f8:	0599      	lsls	r1, r3, #22
 800c6fa:	d402      	bmi.n	800c702 <_fflush_r+0x3a>
 800c6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6fe:	f7ff faa3 	bl	800bc48 <__retarget_lock_acquire_recursive>
 800c702:	4628      	mov	r0, r5
 800c704:	4621      	mov	r1, r4
 800c706:	f7ff ff59 	bl	800c5bc <__sflush_r>
 800c70a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c70c:	07da      	lsls	r2, r3, #31
 800c70e:	4605      	mov	r5, r0
 800c710:	d4e0      	bmi.n	800c6d4 <_fflush_r+0xc>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	059b      	lsls	r3, r3, #22
 800c716:	d4dd      	bmi.n	800c6d4 <_fflush_r+0xc>
 800c718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c71a:	f7ff fa96 	bl	800bc4a <__retarget_lock_release_recursive>
 800c71e:	e7d9      	b.n	800c6d4 <_fflush_r+0xc>
 800c720:	4b05      	ldr	r3, [pc, #20]	; (800c738 <_fflush_r+0x70>)
 800c722:	429c      	cmp	r4, r3
 800c724:	d101      	bne.n	800c72a <_fflush_r+0x62>
 800c726:	68ac      	ldr	r4, [r5, #8]
 800c728:	e7df      	b.n	800c6ea <_fflush_r+0x22>
 800c72a:	4b04      	ldr	r3, [pc, #16]	; (800c73c <_fflush_r+0x74>)
 800c72c:	429c      	cmp	r4, r3
 800c72e:	bf08      	it	eq
 800c730:	68ec      	ldreq	r4, [r5, #12]
 800c732:	e7da      	b.n	800c6ea <_fflush_r+0x22>
 800c734:	0800caf4 	.word	0x0800caf4
 800c738:	0800cb14 	.word	0x0800cb14
 800c73c:	0800cad4 	.word	0x0800cad4

0800c740 <_lseek_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	; (800c760 <_lseek_r+0x20>)
 800c744:	4604      	mov	r4, r0
 800c746:	4608      	mov	r0, r1
 800c748:	4611      	mov	r1, r2
 800c74a:	2200      	movs	r2, #0
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f7f4 fac4 	bl	8000cdc <_lseek>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_lseek_r+0x1e>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_lseek_r+0x1e>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20001cc4 	.word	0x20001cc4

0800c764 <__swhatbuf_r>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	460e      	mov	r6, r1
 800c768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76c:	2900      	cmp	r1, #0
 800c76e:	b096      	sub	sp, #88	; 0x58
 800c770:	4614      	mov	r4, r2
 800c772:	461d      	mov	r5, r3
 800c774:	da08      	bge.n	800c788 <__swhatbuf_r+0x24>
 800c776:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	602a      	str	r2, [r5, #0]
 800c77e:	061a      	lsls	r2, r3, #24
 800c780:	d410      	bmi.n	800c7a4 <__swhatbuf_r+0x40>
 800c782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c786:	e00e      	b.n	800c7a6 <__swhatbuf_r+0x42>
 800c788:	466a      	mov	r2, sp
 800c78a:	f000 f8bb 	bl	800c904 <_fstat_r>
 800c78e:	2800      	cmp	r0, #0
 800c790:	dbf1      	blt.n	800c776 <__swhatbuf_r+0x12>
 800c792:	9a01      	ldr	r2, [sp, #4]
 800c794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c79c:	425a      	negs	r2, r3
 800c79e:	415a      	adcs	r2, r3
 800c7a0:	602a      	str	r2, [r5, #0]
 800c7a2:	e7ee      	b.n	800c782 <__swhatbuf_r+0x1e>
 800c7a4:	2340      	movs	r3, #64	; 0x40
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	b016      	add	sp, #88	; 0x58
 800c7ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7b0 <__smakebuf_r>:
 800c7b0:	898b      	ldrh	r3, [r1, #12]
 800c7b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7b4:	079d      	lsls	r5, r3, #30
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	d507      	bpl.n	800c7cc <__smakebuf_r+0x1c>
 800c7bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	6123      	str	r3, [r4, #16]
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	6163      	str	r3, [r4, #20]
 800c7c8:	b002      	add	sp, #8
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	ab01      	add	r3, sp, #4
 800c7ce:	466a      	mov	r2, sp
 800c7d0:	f7ff ffc8 	bl	800c764 <__swhatbuf_r>
 800c7d4:	9900      	ldr	r1, [sp, #0]
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f7ff fa57 	bl	800bc8c <_malloc_r>
 800c7de:	b948      	cbnz	r0, 800c7f4 <__smakebuf_r+0x44>
 800c7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7e4:	059a      	lsls	r2, r3, #22
 800c7e6:	d4ef      	bmi.n	800c7c8 <__smakebuf_r+0x18>
 800c7e8:	f023 0303 	bic.w	r3, r3, #3
 800c7ec:	f043 0302 	orr.w	r3, r3, #2
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	e7e3      	b.n	800c7bc <__smakebuf_r+0xc>
 800c7f4:	4b0d      	ldr	r3, [pc, #52]	; (800c82c <__smakebuf_r+0x7c>)
 800c7f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	6020      	str	r0, [r4, #0]
 800c7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	9b00      	ldr	r3, [sp, #0]
 800c804:	6163      	str	r3, [r4, #20]
 800c806:	9b01      	ldr	r3, [sp, #4]
 800c808:	6120      	str	r0, [r4, #16]
 800c80a:	b15b      	cbz	r3, 800c824 <__smakebuf_r+0x74>
 800c80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c810:	4630      	mov	r0, r6
 800c812:	f000 f889 	bl	800c928 <_isatty_r>
 800c816:	b128      	cbz	r0, 800c824 <__smakebuf_r+0x74>
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	f023 0303 	bic.w	r3, r3, #3
 800c81e:	f043 0301 	orr.w	r3, r3, #1
 800c822:	81a3      	strh	r3, [r4, #12]
 800c824:	89a0      	ldrh	r0, [r4, #12]
 800c826:	4305      	orrs	r5, r0
 800c828:	81a5      	strh	r5, [r4, #12]
 800c82a:	e7cd      	b.n	800c7c8 <__smakebuf_r+0x18>
 800c82c:	0800baa5 	.word	0x0800baa5

0800c830 <__malloc_lock>:
 800c830:	4801      	ldr	r0, [pc, #4]	; (800c838 <__malloc_lock+0x8>)
 800c832:	f7ff ba09 	b.w	800bc48 <__retarget_lock_acquire_recursive>
 800c836:	bf00      	nop
 800c838:	20001cb8 	.word	0x20001cb8

0800c83c <__malloc_unlock>:
 800c83c:	4801      	ldr	r0, [pc, #4]	; (800c844 <__malloc_unlock+0x8>)
 800c83e:	f7ff ba04 	b.w	800bc4a <__retarget_lock_release_recursive>
 800c842:	bf00      	nop
 800c844:	20001cb8 	.word	0x20001cb8

0800c848 <_free_r>:
 800c848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c84a:	2900      	cmp	r1, #0
 800c84c:	d044      	beq.n	800c8d8 <_free_r+0x90>
 800c84e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c852:	9001      	str	r0, [sp, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	f1a1 0404 	sub.w	r4, r1, #4
 800c85a:	bfb8      	it	lt
 800c85c:	18e4      	addlt	r4, r4, r3
 800c85e:	f7ff ffe7 	bl	800c830 <__malloc_lock>
 800c862:	4a1e      	ldr	r2, [pc, #120]	; (800c8dc <_free_r+0x94>)
 800c864:	9801      	ldr	r0, [sp, #4]
 800c866:	6813      	ldr	r3, [r2, #0]
 800c868:	b933      	cbnz	r3, 800c878 <_free_r+0x30>
 800c86a:	6063      	str	r3, [r4, #4]
 800c86c:	6014      	str	r4, [r2, #0]
 800c86e:	b003      	add	sp, #12
 800c870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c874:	f7ff bfe2 	b.w	800c83c <__malloc_unlock>
 800c878:	42a3      	cmp	r3, r4
 800c87a:	d908      	bls.n	800c88e <_free_r+0x46>
 800c87c:	6825      	ldr	r5, [r4, #0]
 800c87e:	1961      	adds	r1, r4, r5
 800c880:	428b      	cmp	r3, r1
 800c882:	bf01      	itttt	eq
 800c884:	6819      	ldreq	r1, [r3, #0]
 800c886:	685b      	ldreq	r3, [r3, #4]
 800c888:	1949      	addeq	r1, r1, r5
 800c88a:	6021      	streq	r1, [r4, #0]
 800c88c:	e7ed      	b.n	800c86a <_free_r+0x22>
 800c88e:	461a      	mov	r2, r3
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	b10b      	cbz	r3, 800c898 <_free_r+0x50>
 800c894:	42a3      	cmp	r3, r4
 800c896:	d9fa      	bls.n	800c88e <_free_r+0x46>
 800c898:	6811      	ldr	r1, [r2, #0]
 800c89a:	1855      	adds	r5, r2, r1
 800c89c:	42a5      	cmp	r5, r4
 800c89e:	d10b      	bne.n	800c8b8 <_free_r+0x70>
 800c8a0:	6824      	ldr	r4, [r4, #0]
 800c8a2:	4421      	add	r1, r4
 800c8a4:	1854      	adds	r4, r2, r1
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	6011      	str	r1, [r2, #0]
 800c8aa:	d1e0      	bne.n	800c86e <_free_r+0x26>
 800c8ac:	681c      	ldr	r4, [r3, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	6053      	str	r3, [r2, #4]
 800c8b2:	4421      	add	r1, r4
 800c8b4:	6011      	str	r1, [r2, #0]
 800c8b6:	e7da      	b.n	800c86e <_free_r+0x26>
 800c8b8:	d902      	bls.n	800c8c0 <_free_r+0x78>
 800c8ba:	230c      	movs	r3, #12
 800c8bc:	6003      	str	r3, [r0, #0]
 800c8be:	e7d6      	b.n	800c86e <_free_r+0x26>
 800c8c0:	6825      	ldr	r5, [r4, #0]
 800c8c2:	1961      	adds	r1, r4, r5
 800c8c4:	428b      	cmp	r3, r1
 800c8c6:	bf04      	itt	eq
 800c8c8:	6819      	ldreq	r1, [r3, #0]
 800c8ca:	685b      	ldreq	r3, [r3, #4]
 800c8cc:	6063      	str	r3, [r4, #4]
 800c8ce:	bf04      	itt	eq
 800c8d0:	1949      	addeq	r1, r1, r5
 800c8d2:	6021      	streq	r1, [r4, #0]
 800c8d4:	6054      	str	r4, [r2, #4]
 800c8d6:	e7ca      	b.n	800c86e <_free_r+0x26>
 800c8d8:	b003      	add	sp, #12
 800c8da:	bd30      	pop	{r4, r5, pc}
 800c8dc:	20001cbc 	.word	0x20001cbc

0800c8e0 <_read_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d07      	ldr	r5, [pc, #28]	; (800c900 <_read_r+0x20>)
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	4608      	mov	r0, r1
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	602a      	str	r2, [r5, #0]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f7f4 f9b0 	bl	8000c54 <_read>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_read_r+0x1e>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_read_r+0x1e>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	20001cc4 	.word	0x20001cc4

0800c904 <_fstat_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4d07      	ldr	r5, [pc, #28]	; (800c924 <_fstat_r+0x20>)
 800c908:	2300      	movs	r3, #0
 800c90a:	4604      	mov	r4, r0
 800c90c:	4608      	mov	r0, r1
 800c90e:	4611      	mov	r1, r2
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	f7f4 f9c8 	bl	8000ca6 <_fstat>
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	d102      	bne.n	800c920 <_fstat_r+0x1c>
 800c91a:	682b      	ldr	r3, [r5, #0]
 800c91c:	b103      	cbz	r3, 800c920 <_fstat_r+0x1c>
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	bd38      	pop	{r3, r4, r5, pc}
 800c922:	bf00      	nop
 800c924:	20001cc4 	.word	0x20001cc4

0800c928 <_isatty_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4d06      	ldr	r5, [pc, #24]	; (800c944 <_isatty_r+0x1c>)
 800c92c:	2300      	movs	r3, #0
 800c92e:	4604      	mov	r4, r0
 800c930:	4608      	mov	r0, r1
 800c932:	602b      	str	r3, [r5, #0]
 800c934:	f7f4 f9c7 	bl	8000cc6 <_isatty>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_isatty_r+0x1a>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_isatty_r+0x1a>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	20001cc4 	.word	0x20001cc4

0800c948 <_init>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	bf00      	nop
 800c94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94e:	bc08      	pop	{r3}
 800c950:	469e      	mov	lr, r3
 800c952:	4770      	bx	lr

0800c954 <_fini>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	bf00      	nop
 800c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95a:	bc08      	pop	{r3}
 800c95c:	469e      	mov	lr, r3
 800c95e:	4770      	bx	lr
