
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3d0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a6e4  0800a6e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000008  0800a6e8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a40  200001ac  0800a88c  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001bec  0800a88c  00021bec  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   000140c6  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000037e8  00000000  00000000  000342a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001610  00000000  00000000  00037a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001468  00000000  00000000  000390a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024e2c  00000000  00000000  0003a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000154e9  00000000  00000000  0005f334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d5ff2  00000000  00000000  0007481d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0014a80f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006058  00000000  00000000  0014a860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ac 	.word	0x200001ac
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a4f8 	.word	0x0800a4f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b0 	.word	0x200001b0
 800017c:	0800a4f8 	.word	0x0800a4f8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fb27 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f80b 	bl	8000274 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800025e:	f000 f875 	bl	800034c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000262:	f000 f891 	bl	8000388 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000266:	f008 fc25 	bl	8008ab4 <MX_USB_Device_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Read_Rotary();
 800026a:	f000 f909 	bl	8000480 <Read_Rotary>
    Read_Reed();
 800026e:	f000 f8e3 	bl	8000438 <Read_Reed>
    Read_Rotary();
 8000272:	e7fa      	b.n	800026a <main+0x18>

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b09a      	sub	sp, #104	; 0x68
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0320 	add.w	r3, r7, #32
 800027e:	2248      	movs	r2, #72	; 0x48
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f009 f9a2 	bl	80095cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029a:	4b2b      	ldr	r3, [pc, #172]	; (8000348 <SystemClock_Config+0xd4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002a2:	4a29      	ldr	r2, [pc, #164]	; (8000348 <SystemClock_Config+0xd4>)
 80002a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a8:	6013      	str	r3, [r2, #0]
 80002aa:	4b27      	ldr	r3, [pc, #156]	; (8000348 <SystemClock_Config+0xd4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80002b6:	2326      	movs	r3, #38	; 0x26
 80002b8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80002ba:	2300      	movs	r3, #0
 80002bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c8:	2340      	movs	r3, #64	; 0x40
 80002ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002cc:	2300      	movs	r3, #0
 80002ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d0:	2360      	movs	r3, #96	; 0x60
 80002d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d4:	2302      	movs	r3, #2
 80002d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002d8:	2301      	movs	r3, #1
 80002da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002e0:	2320      	movs	r3, #32
 80002e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80002f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0320 	add.w	r3, r7, #32
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 feda 	bl	80030b4 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000306:	f000 f885 	bl	8000414 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800030a:	236f      	movs	r3, #111	; 0x6f
 800030c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	2303      	movs	r3, #3
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2103      	movs	r1, #3
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fa36 	bl	800379c <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000336:	f000 f86d 	bl	8000414 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800033a:	f003 ffc7 	bl	80042cc <HAL_RCCEx_EnableMSIPLLMode>
}
 800033e:	bf00      	nop
 8000340:	3768      	adds	r7, #104	; 0x68
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	58000400 	.word	0x58000400

0800034c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b094      	sub	sp, #80	; 0x50
 8000350:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000352:	463b      	mov	r3, r7
 8000354:	2250      	movs	r2, #80	; 0x50
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f009 f937 	bl	80095cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800035e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000362:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000364:	2300      	movs	r3, #0
 8000366:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000368:	2310      	movs	r3, #16
 800036a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800036c:	463b      	mov	r3, r7
 800036e:	4618      	mov	r0, r3
 8000370:	f003 fe36 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800037a:	f000 f84b 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800037e:	bf00      	nop
 8000380:	3750      	adds	r7, #80	; 0x50
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	2004      	movs	r0, #4
 800039e:	f7ff ff3f 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff ff3c 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	2008      	movs	r0, #8
 80003aa:	f7ff ff39 	bl	8000220 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b4:	4815      	ldr	r0, [pc, #84]	; (800040c <MX_GPIO_Init+0x84>)
 80003b6:	f000 fd95 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80003ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	480e      	ldr	r0, [pc, #56]	; (800040c <MX_GPIO_Init+0x84>)
 80003d2:	f000 fbff 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 80003d6:	f641 030a 	movw	r3, #6154	; 0x180a
 80003da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4619      	mov	r1, r3
 80003e8:	4808      	ldr	r0, [pc, #32]	; (800040c <MX_GPIO_Init+0x84>)
 80003ea:	f000 fbf3 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80003ee:	2301      	movs	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_GPIO_Init+0x88>)
 8000400:	f000 fbe8 	bl	8000bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	48000800 	.word	0x48000800
 8000410:	48000c00 	.word	0x48000c00

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	e7fe      	b.n	800041c <Error_Handler+0x8>
	...

08000420 <REED_status>:
#include "main.h"
#include <stdio.h>


GPIO_PinState REED_status()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 8000424:	2108      	movs	r1, #8
 8000426:	4803      	ldr	r0, [pc, #12]	; (8000434 <REED_status+0x14>)
 8000428:	f000 fd44 	bl	8000eb4 <HAL_GPIO_ReadPin>
 800042c:	4603      	mov	r3, r0
}
 800042e:	4618      	mov	r0, r3
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	48000800 	.word	0x48000800

08000438 <Read_Reed>:


void Read_Reed()
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	#if 1
		if (!REED_status())
 800043c:	f7ff fff0 	bl	8000420 <REED_status>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d103      	bne.n	800044e <Read_Reed+0x16>
		{
			printf("Reed heeft nu contact");
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <Read_Reed+0x20>)
 8000448:	f009 f8c8 	bl	80095dc <iprintf>
		else
		{
			printf("Reed heeft geen contact");
		}
	#endif
}
 800044c:	e002      	b.n	8000454 <Read_Reed+0x1c>
			printf("Reed heeft geen contact");
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <Read_Reed+0x24>)
 8000450:	f009 f8c4 	bl	80095dc <iprintf>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	0800a510 	.word	0x0800a510
 800045c:	0800a528 	.word	0x0800a528

08000460 <_write>:

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 800046c:	6879      	ldr	r1, [r7, #4]
 800046e:	68b8      	ldr	r0, [r7, #8]
 8000470:	f008 fbde 	bl	8008c30 <CDC_Transmit_FS>
  return len;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <Read_Rotary>:

void Read_Rotary()
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 8000486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800048a:	4855      	ldr	r0, [pc, #340]	; (80005e0 <Read_Rotary+0x160>)
 800048c:	f000 fd12 	bl	8000eb4 <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 8000494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000498:	4851      	ldr	r0, [pc, #324]	; (80005e0 <Read_Rotary+0x160>)
 800049a:	f000 fd0b 	bl	8000eb4 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	005a      	lsls	r2, r3, #1
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	4413      	add	r3, r2
 80004aa:	4a4e      	ldr	r2, [pc, #312]	; (80005e4 <Read_Rotary+0x164>)
 80004ac:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 80004ae:	4b4e      	ldr	r3, [pc, #312]	; (80005e8 <Read_Rotary+0x168>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b4c      	ldr	r3, [pc, #304]	; (80005e4 <Read_Rotary+0x164>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	494d      	ldr	r1, [pc, #308]	; (80005ec <Read_Rotary+0x16c>)
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004c0:	607b      	str	r3, [r7, #4]

    if (info == 1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d109      	bne.n	80004dc <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 80004c8:	4b46      	ldr	r3, [pc, #280]	; (80005e4 <Read_Rotary+0x164>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2201      	movs	r2, #1
 80004ce:	409a      	lsls	r2, r3
 80004d0:	4b47      	ldr	r3, [pc, #284]	; (80005f0 <Read_Rotary+0x170>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	4a46      	ldr	r2, [pc, #280]	; (80005f0 <Read_Rotary+0x170>)
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	e00c      	b.n	80004f6 <Read_Rotary+0x76>
    }
    else if (info == -1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004e2:	d108      	bne.n	80004f6 <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 80004e4:	4b3f      	ldr	r3, [pc, #252]	; (80005e4 <Read_Rotary+0x164>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2201      	movs	r2, #1
 80004ea:	409a      	lsls	r2, r3
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <Read_Rotary+0x174>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	4a40      	ldr	r2, [pc, #256]	; (80005f4 <Read_Rotary+0x174>)
 80004f4:	6013      	str	r3, [r2, #0]
    else if (info == 2)
    {
        // skipped a value
    }

    if (prevVal != newVal && newVal == 3)
 80004f6:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <Read_Rotary+0x168>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <Read_Rotary+0x164>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d047      	beq.n	8000592 <Read_Rotary+0x112>
 8000502:	4b38      	ldr	r3, [pc, #224]	; (80005e4 <Read_Rotary+0x164>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b03      	cmp	r3, #3
 8000508:	d143      	bne.n	8000592 <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 800050a:	4b39      	ldr	r3, [pc, #228]	; (80005f0 <Read_Rotary+0x170>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b0b      	cmp	r3, #11
 8000510:	d00b      	beq.n	800052a <Read_Rotary+0xaa>
 8000512:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <Read_Rotary+0x170>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b0d      	cmp	r3, #13
 8000518:	d007      	beq.n	800052a <Read_Rotary+0xaa>
 800051a:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <Read_Rotary+0x170>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b0e      	cmp	r3, #14
 8000520:	d003      	beq.n	800052a <Read_Rotary+0xaa>
 8000522:	4b33      	ldr	r3, [pc, #204]	; (80005f0 <Read_Rotary+0x170>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b0f      	cmp	r3, #15
 8000528:	d10e      	bne.n	8000548 <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 800052a:	4b33      	ldr	r3, [pc, #204]	; (80005f8 <Read_Rotary+0x178>)
 800052c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3301      	adds	r3, #1
 8000534:	b29b      	uxth	r3, r3
 8000536:	b21a      	sxth	r2, r3
 8000538:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <Read_Rotary+0x178>)
 800053a:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	4827      	ldr	r0, [pc, #156]	; (80005e0 <Read_Rotary+0x160>)
 8000544:	f000 fcce 	bl	8000ee4 <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <Read_Rotary+0x174>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b0b      	cmp	r3, #11
 800054e:	d00b      	beq.n	8000568 <Read_Rotary+0xe8>
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <Read_Rotary+0x174>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b0d      	cmp	r3, #13
 8000556:	d007      	beq.n	8000568 <Read_Rotary+0xe8>
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <Read_Rotary+0x174>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b0e      	cmp	r3, #14
 800055e:	d003      	beq.n	8000568 <Read_Rotary+0xe8>
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <Read_Rotary+0x174>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d10e      	bne.n	8000586 <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <Read_Rotary+0x178>)
 800056a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800056e:	b29b      	uxth	r3, r3
 8000570:	3b01      	subs	r3, #1
 8000572:	b29b      	uxth	r3, r3
 8000574:	b21a      	sxth	r2, r3
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <Read_Rotary+0x178>)
 8000578:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	4817      	ldr	r0, [pc, #92]	; (80005e0 <Read_Rotary+0x160>)
 8000582:	f000 fcaf 	bl	8000ee4 <HAL_GPIO_WritePin>
        }
        clockState = 0;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <Read_Rotary+0x170>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <Read_Rotary+0x174>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <Read_Rotary+0x164>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <Read_Rotary+0x168>)
 8000598:	6013      	str	r3, [r2, #0]

    if (iTimer > 15000)
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <Read_Rotary+0x17c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f643 2298 	movw	r2, #15000	; 0x3a98
 80005a2:	4293      	cmp	r3, r2
 80005a4:	dd09      	ble.n	80005ba <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <Read_Rotary+0x178>)
 80005a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <Read_Rotary+0x180>)
 80005b0:	f009 f814 	bl	80095dc <iprintf>
        iTimer = 0;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <Read_Rotary+0x17c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <Read_Rotary+0x17c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <Read_Rotary+0x17c>)
 80005c2:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 80005c4:	2101      	movs	r1, #1
 80005c6:	480f      	ldr	r0, [pc, #60]	; (8000604 <Read_Rotary+0x184>)
 80005c8:	f000 fc74 	bl	8000eb4 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d102      	bne.n	80005d8 <Read_Rotary+0x158>
        {
          readValue = 0;
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <Read_Rotary+0x178>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	801a      	strh	r2, [r3, #0]
        }
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	48000800 	.word	0x48000800
 80005e4:	200001d4 	.word	0x200001d4
 80005e8:	200001cc 	.word	0x200001cc
 80005ec:	20000008 	.word	0x20000008
 80005f0:	200001d8 	.word	0x200001d8
 80005f4:	200001dc 	.word	0x200001dc
 80005f8:	200001c8 	.word	0x200001c8
 80005fc:	200001d0 	.word	0x200001d0
 8000600:	0800a540 	.word	0x0800a540
 8000604:	48000c00 	.word	0x48000c00

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061a:	e7fe      	b.n	800061a <NMI_Handler+0x4>

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <HardFault_Handler+0x4>

08000622 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <MemManage_Handler+0x4>

08000628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <BusFault_Handler+0x4>

0800062e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <UsageFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000662:	f000 f97b 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <USB_LP_IRQHandler+0x10>)
 8000672:	f000 fd4a 	bl	800110a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200016c8 	.word	0x200016c8

08000680 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	e00a      	b.n	80006a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000692:	f3af 8000 	nop.w
 8000696:	4601      	mov	r1, r0
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	60ba      	str	r2, [r7, #8]
 800069e:	b2ca      	uxtb	r2, r1
 80006a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dbf0      	blt.n	8000692 <_read+0x12>
  }

  return len;
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	605a      	str	r2, [r3, #4]
  return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <_isatty>:

int _isatty(int file)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <_sbrk+0x5c>)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <_sbrk+0x60>)
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <_sbrk+0x64>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <_sbrk+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	429a      	cmp	r2, r3
 8000752:	d207      	bcs.n	8000764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000754:	f008 ff10 	bl	8009578 <__errno>
 8000758:	4603      	mov	r3, r0
 800075a:	220c      	movs	r2, #12
 800075c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	e009      	b.n	8000778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <_sbrk+0x64>)
 8000774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20030000 	.word	0x20030000
 8000784:	00000400 	.word	0x00000400
 8000788:	200001e0 	.word	0x200001e0
 800078c:	20001bf0 	.word	0x20001bf0

08000790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000794:	4b24      	ldr	r3, [pc, #144]	; (8000828 <SystemInit+0x98>)
 8000796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079a:	4a23      	ldr	r2, [pc, #140]	; (8000828 <SystemInit+0x98>)
 800079c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80007b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007bc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <SystemInit+0x9c>)
 80007ca:	4013      	ands	r3, r2
 80007cc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007da:	f023 0305 	bic.w	r3, r3, #5
 80007de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <SystemInit+0xa0>)
 80007fc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80007fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <SystemInit+0xa0>)
 8000804:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000814:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	faf6fefb 	.word	0xfaf6fefb
 8000830:	22041000 	.word	0x22041000

08000834 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000834:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000836:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000838:	3304      	adds	r3, #4

0800083a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800083e:	d3f9      	bcc.n	8000834 <CopyDataInit>
  bx lr
 8000840:	4770      	bx	lr

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000842:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000844:	3004      	adds	r0, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000846:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>
  bx lr
 800084a:	4770      	bx	lr

0800084c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000850:	f7ff ff9e 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <LoopForever+0x6>)
 8000856:	490c      	ldr	r1, [pc, #48]	; (8000888 <LoopForever+0xa>)
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <LoopForever+0xe>)
 800085a:	2300      	movs	r3, #0
 800085c:	f7ff ffed 	bl	800083a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <LoopForever+0x12>)
 8000862:	490c      	ldr	r1, [pc, #48]	; (8000894 <LoopForever+0x16>)
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <LoopForever+0x1a>)
 8000866:	2300      	movs	r3, #0
 8000868:	f7ff ffe7 	bl	800083a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <LoopForever+0x1e>)
 800086e:	490c      	ldr	r1, [pc, #48]	; (80008a0 <LoopForever+0x22>)
 8000870:	2300      	movs	r3, #0
 8000872:	f7ff ffe8 	bl	8000846 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000876:	f008 fe85 	bl	8009584 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800087a:	f7ff fcea 	bl	8000252 <main>

0800087e <LoopForever>:

LoopForever:
  b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   r0, =_estack
 8000880:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000884:	20000008 	.word	0x20000008
 8000888:	200001ac 	.word	0x200001ac
 800088c:	0800a6e8 	.word	0x0800a6e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000890:	20030000 	.word	0x20030000
 8000894:	20030000 	.word	0x20030000
 8000898:	0800a88c 	.word	0x0800a88c
  INIT_BSS _sbss, _ebss
 800089c:	200001ac 	.word	0x200001ac
 80008a0:	20001bec 	.word	0x20001bec

080008a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_Init+0x3c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_Init+0x3c>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008be:	2003      	movs	r0, #3
 80008c0:	f000 f948 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c4:	200f      	movs	r0, #15
 80008c6:	f000 f80f 	bl	80008e8 <HAL_InitTick>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	e001      	b.n	80008da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d6:	f7ff fe97 	bl	8000608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008da:	79fb      	ldrb	r3, [r7, #7]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	58004000 	.word	0x58004000

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_InitTick+0x6c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d024      	beq.n	8000946 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008fc:	f003 f8fc 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8000900:	4602      	mov	r2, r0
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x6c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4619      	mov	r1, r3
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000910:	fbb2 f3f3 	udiv	r3, r2, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f950 	bl	8000bba <HAL_SYSTICK_Config>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10f      	bne.n	8000940 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d809      	bhi.n	800093a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000926:	2200      	movs	r2, #0
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	f04f 30ff 	mov.w	r0, #4294967295
 800092e:	f000 f91c 	bl	8000b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <HAL_InitTick+0x70>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	e007      	b.n	800094a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e004      	b.n	800094a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e001      	b.n	800094a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800094a:	7bfb      	ldrb	r3, [r7, #15]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000050 	.word	0x20000050
 8000958:	2000004c 	.word	0x2000004c

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000050 	.word	0x20000050
 8000980:	200001e4 	.word	0x200001e4

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	200001e4 	.word	0x200001e4

0800099c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTickPrio+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000004c 	.word	0x2000004c

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff29 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff40 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff90 	bl	8000aa8 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5f 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff33 	bl	8000a18 <__NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa4 	bl	8000b10 <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	e14c      	b.n	8000e7e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 813e 	beq.w	8000e78 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d005      	beq.n	8000c14 <HAL_GPIO_Init+0x40>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d130      	bne.n	8000c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	f003 0201 	and.w	r2, r3, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d017      	beq.n	8000cb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d123      	bne.n	8000d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	6939      	ldr	r1, [r7, #16]
 8000d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0203 	and.w	r2, r3, #3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 8098 	beq.w	8000e78 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d48:	4a54      	ldr	r2, [pc, #336]	; (8000e9c <HAL_GPIO_Init+0x2c8>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d72:	d019      	beq.n	8000da8 <HAL_GPIO_Init+0x1d4>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4a      	ldr	r2, [pc, #296]	; (8000ea0 <HAL_GPIO_Init+0x2cc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d013      	beq.n	8000da4 <HAL_GPIO_Init+0x1d0>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00d      	beq.n	8000da0 <HAL_GPIO_Init+0x1cc>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2d4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x1c8>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a47      	ldr	r2, [pc, #284]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d101      	bne.n	8000d98 <HAL_GPIO_Init+0x1c4>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e008      	b.n	8000daa <HAL_GPIO_Init+0x1d6>
 8000d98:	2307      	movs	r3, #7
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x1d6>
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e004      	b.n	8000daa <HAL_GPIO_Init+0x1d6>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x1d6>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_GPIO_Init+0x1d6>
 8000da8:	2300      	movs	r3, #0
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	f002 0203 	and.w	r2, r2, #3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dba:	4938      	ldr	r1, [pc, #224]	; (8000e9c <HAL_GPIO_Init+0x2c8>)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc8:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dec:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e16:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e42:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_GPIO_Init+0x2dc>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f aeab 	bne.w	8000be4 <HAL_GPIO_Init+0x10>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	58000800 	.word	0x58000800

08000eb4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e001      	b.n	8000ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f16:	b08b      	sub	sp, #44	; 0x2c
 8000f18:	af06      	add	r7, sp, #24
 8000f1a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0cb      	b.n	80010be <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d106      	bne.n	8000f40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f007 fff2 	bl	8008f24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 faeb 	bl	8004528 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e040      	b.n	8000fda <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3301      	adds	r3, #1
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3303      	adds	r3, #3
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3338      	adds	r3, #56	; 0x38
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	333c      	adds	r3, #60	; 0x3c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	3340      	adds	r3, #64	; 0x40
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3b9      	bcc.n	8000f58 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e044      	b.n	8001074 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3b5      	bcc.n	8000fea <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	687e      	ldr	r6, [r7, #4]
 8001086:	466d      	mov	r5, sp
 8001088:	f106 0410 	add.w	r4, r6, #16
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	602b      	str	r3, [r5, #0]
 8001094:	1d33      	adds	r3, r6, #4
 8001096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f003 fa60 	bl	800455e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d102      	bne.n	80010bc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f001 fc45 	bl	8002946 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_PCD_Start+0x16>
 80010d8:	2302      	movs	r3, #2
 80010da:	e012      	b.n	8001102 <HAL_PCD_Start+0x3c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fa06 	bl	80044fa <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 fcc9 	bl	8006a8a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f005 fcce 	bl	8006ab8 <USB_ReadInterrupts>
 800111c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fb05 	bl	8001738 <PCD_EP_ISR_Handler>

    return;
 800112e:	e110      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	2b00      	cmp	r3, #0
 8001138:	d013      	beq.n	8001162 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001142:	b29a      	uxth	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800114c:	b292      	uxth	r2, r2
 800114e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f007 ff99 	bl	800908a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001158:	2100      	movs	r1, #0
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8fc 	bl	8001358 <HAL_PCD_SetAddress>

    return;
 8001160:	e0f7      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00c      	beq.n	8001186 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800117e:	b292      	uxth	r2, r2
 8001180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001184:	e0e5      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011a2:	b292      	uxth	r2, r2
 80011a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011a8:	e0d3      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d034      	beq.n	800121e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0204 	bic.w	r2, r2, #4
 80011c6:	b292      	uxth	r2, r2
 80011c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0208 	bic.w	r2, r2, #8
 80011de:	b292      	uxth	r2, r2
 80011e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d107      	bne.n	80011fe <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011f6:	2100      	movs	r1, #0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f008 f93d 	bl	8009478 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f007 ff7c 	bl	80090fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001216:	b292      	uxth	r2, r2
 8001218:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800121c:	e099      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001224:	2b00      	cmp	r3, #0
 8001226:	d027      	beq.n	8001278 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0208 	orr.w	r2, r2, #8
 800123a:	b292      	uxth	r2, r2
 800123c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0204 	orr.w	r2, r2, #4
 800126a:	b292      	uxth	r2, r2
 800126c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f007 ff29 	bl	80090c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001276:	e06c      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	2b00      	cmp	r3, #0
 8001280:	d040      	beq.n	8001304 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001294:	b292      	uxth	r2, r2
 8001296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d12b      	bne.n	80012fc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0204 	orr.w	r2, r2, #4
 80012b6:	b292      	uxth	r2, r2
 80012b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0208 	orr.w	r2, r2, #8
 80012ce:	b292      	uxth	r2, r2
 80012d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012f2:	2101      	movs	r1, #1
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f008 f8bf 	bl	8009478 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80012fa:	e02a      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f007 fee3 	bl	80090c8 <HAL_PCD_SuspendCallback>
    return;
 8001302:	e026      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00f      	beq.n	800132e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001316:	b29a      	uxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001320:	b292      	uxth	r2, r2
 8001322:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f007 fea1 	bl	800906e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800132c:	e011      	b.n	8001352 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001340:	b29a      	uxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800134a:	b292      	uxth	r2, r2
 800134c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001350:	bf00      	nop
  }
}
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_PCD_SetAddress+0x1a>
 800136e:	2302      	movs	r3, #2
 8001370:	e013      	b.n	800139a <HAL_PCD_SetAddress+0x42>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	78fa      	ldrb	r2, [r7, #3]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fb69 	bl	8006a62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	4608      	mov	r0, r1
 80013ac:	4611      	mov	r1, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	70fb      	strb	r3, [r7, #3]
 80013b4:	460b      	mov	r3, r1
 80013b6:	803b      	strh	r3, [r7, #0]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da0e      	bge.n	80013e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	705a      	strb	r2, [r3, #1]
 80013e4:	e00e      	b.n	8001404 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 0207 	and.w	r2, r3, #7
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	b2da      	uxtb	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001410:	883a      	ldrh	r2, [r7, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	78ba      	ldrb	r2, [r7, #2]
 800141a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800141c:	78bb      	ldrb	r3, [r7, #2]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d102      	bne.n	8001428 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_PCD_EP_Open+0x94>
 8001432:	2302      	movs	r3, #2
 8001434:	e00e      	b.n	8001454 <HAL_PCD_EP_Open+0xb2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f8ab 	bl	80045a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001452:	7afb      	ldrb	r3, [r7, #11]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da0e      	bge.n	800148e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2201      	movs	r2, #1
 800148a:	705a      	strb	r2, [r3, #1]
 800148c:	e00e      	b.n	80014ac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	f003 0207 	and.w	r2, r3, #7
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_PCD_EP_Close+0x6a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e00e      	b.n	80014e4 <HAL_PCD_EP_Close+0x88>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fc27 	bl	8004d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	460b      	mov	r3, r1
 80014fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	f003 0207 	and.w	r2, r3, #7
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2200      	movs	r2, #0
 800152a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	b2da      	uxtb	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6979      	ldr	r1, [r7, #20]
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fddf 	bl	8005102 <USB_EPStartXfer>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	460b      	mov	r3, r1
 8001558:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	f003 0207 	and.w	r2, r3, #7
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001570:	681b      	ldr	r3, [r3, #0]
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	460b      	mov	r3, r1
 800158c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800158e:	7afb      	ldrb	r3, [r7, #11]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2201      	movs	r2, #1
 80015c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6979      	ldr	r1, [r7, #20]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fd90 	bl	8005102 <USB_EPStartXfer>

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d901      	bls.n	800160a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e03e      	b.n	8001688 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800160a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da0e      	bge.n	8001630 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	705a      	strb	r2, [r3, #1]
 800162e:	e00c      	b.n	800164a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2201      	movs	r2, #1
 800164e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_PCD_EP_SetStall+0x7e>
 8001666:	2302      	movs	r3, #2
 8001668:	e00e      	b.n	8001688 <HAL_PCD_EP_SetStall+0x9c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	4618      	mov	r0, r3
 800167a:	f005 f8f3 	bl	8006864 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 020f 	and.w	r2, r3, #15
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d901      	bls.n	80016ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e040      	b.n	8001730 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da0e      	bge.n	80016d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2201      	movs	r2, #1
 80016d0:	705a      	strb	r2, [r3, #1]
 80016d2:	e00e      	b.n	80016f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 0207 	and.w	r2, r3, #7
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_PCD_EP_ClrStall+0x82>
 800170e:	2302      	movs	r3, #2
 8001710:	e00e      	b.n	8001730 <HAL_PCD_EP_ClrStall+0xa0>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f005 f8f0 	bl	8006906 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	; 0x58
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001740:	e3b1      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800174e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800175c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 8173 	bne.w	8001a4c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d150      	bne.n	8001814 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001782:	81fb      	strh	r3, [r7, #14]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800178e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001792:	b29b      	uxth	r3, r3
 8001794:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3328      	adds	r3, #40	; 0x28
 800179a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	441a      	add	r2, r3
 80017ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017d2:	2100      	movs	r1, #0
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f007 fc30 	bl	800903a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 835f 	beq.w	8001ea6 <PCD_EP_ISR_Handler+0x76e>
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 835a 	bne.w	8001ea6 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b292      	uxth	r2, r2
 8001806:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001812:	e348      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800181a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001826:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800182a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182e:	2b00      	cmp	r3, #0
 8001830:	d032      	beq.n	8001898 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800183a:	b29b      	uxth	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4413      	add	r3, r2
 800184c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001858:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800186c:	b29b      	uxth	r3, r3
 800186e:	f005 f975 	bl	8006b5c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b29a      	uxth	r2, r3
 800187a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800187e:	4013      	ands	r3, r2
 8001880:	823b      	strh	r3, [r7, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	8a3a      	ldrh	r2, [r7, #16]
 8001888:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800188c:	b292      	uxth	r2, r2
 800188e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f007 fba5 	bl	8008fe0 <HAL_PCD_SetupStageCallback>
 8001896:	e306      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001898:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800189c:	2b00      	cmp	r3, #0
 800189e:	f280 8302 	bge.w	8001ea6 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018ae:	4013      	ands	r3, r2
 80018b0:	83fb      	strh	r3, [r7, #30]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	8bfa      	ldrh	r2, [r7, #30]
 80018b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018bc:	b292      	uxth	r2, r2
 80018be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d019      	beq.n	8001924 <PCD_EP_ISR_Handler+0x1ec>
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d015      	beq.n	8001924 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fe:	6959      	ldr	r1, [r3, #20]
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001908:	b29b      	uxth	r3, r3
 800190a:	f005 f927 	bl	8006b5c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800190e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	441a      	add	r2, r3
 8001918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800191c:	2100      	movs	r1, #0
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f007 fb70 	bl	8009004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800192e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 82b5 	bne.w	8001ea6 <PCD_EP_ISR_Handler+0x76e>
 800193c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001940:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001948:	f000 82ad 	beq.w	8001ea6 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800195a:	b29b      	uxth	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4413      	add	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001976:	b29a      	uxth	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	801a      	strh	r2, [r3, #0]
 800197c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b3e      	cmp	r3, #62	; 0x3e
 8001982:	d91d      	bls.n	80019c0 <PCD_EP_ISR_Handler+0x288>
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	095b      	lsrs	r3, r3, #5
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
 800198c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <PCD_EP_ISR_Handler+0x266>
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	3b01      	subs	r3, #1
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	e026      	b.n	8001a0e <PCD_EP_ISR_Handler+0x2d6>
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <PCD_EP_ISR_Handler+0x2a6>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	e017      	b.n	8001a0e <PCD_EP_ISR_Handler+0x2d6>
 80019de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	647b      	str	r3, [r7, #68]	; 0x44
 80019e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <PCD_EP_ISR_Handler+0x2c0>
 80019f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f4:	3301      	adds	r3, #1
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1e:	827b      	strh	r3, [r7, #18]
 8001a20:	8a7b      	ldrh	r3, [r7, #18]
 8001a22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a26:	827b      	strh	r3, [r7, #18]
 8001a28:	8a7b      	ldrh	r3, [r7, #18]
 8001a2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a2e:	827b      	strh	r3, [r7, #18]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	8a7b      	ldrh	r3, [r7, #18]
 8001a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	8013      	strh	r3, [r2, #0]
 8001a4a:	e22c      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a60:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f280 80f6 	bge.w	8001c56 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a80:	4013      	ands	r3, r2
 8001a82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001aa0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab8:	7b1b      	ldrb	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d123      	bne.n	8001b06 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001ae6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 808e 	beq.w	8001c0c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	6959      	ldr	r1, [r3, #20]
 8001af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afa:	88da      	ldrh	r2, [r3, #6]
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	f005 f82c 	bl	8006b5c <USB_ReadPMA>
 8001b04:	e082      	b.n	8001c0c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	78db      	ldrb	r3, [r3, #3]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d10a      	bne.n	8001b24 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b12:	461a      	mov	r2, r3
 8001b14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f9d3 	bl	8001ec2 <HAL_PCD_EP_DB_Receive>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b22:	e073      	b.n	8001c0c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	441a      	add	r2, r3
 8001b50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d022      	beq.n	8001bc8 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001baa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d02c      	beq.n	8001c0c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb8:	6959      	ldr	r1, [r3, #20]
 8001bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbc:	891a      	ldrh	r2, [r3, #8]
 8001bbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc2:	f004 ffcb 	bl	8006b5c <USB_ReadPMA>
 8001bc6:	e021      	b.n	8001c0c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d009      	beq.n	8001c0c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfe:	6959      	ldr	r1, [r3, #20]
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	895a      	ldrh	r2, [r3, #10]
 8001c04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c08:	f004 ffa8 	bl	8006b5c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c14:	441a      	add	r2, r3
 8001c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c22:	441a      	add	r2, r3
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <PCD_EP_ISR_Handler+0x504>
 8001c30:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d206      	bcs.n	8001c4a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f007 f9de 	bl	8009004 <HAL_PCD_DataOutStageCallback>
 8001c48:	e005      	b.n	8001c56 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fa56 	bl	8005102 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8121 	beq.w	8001ea6 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	441a      	add	r2, r3
 8001ca4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	78db      	ldrb	r3, [r3, #3]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	f040 80a2 	bne.w	8001e02 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	7b1b      	ldrb	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8093 	beq.w	8001df4 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d046      	beq.n	8001d68 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d126      	bne.n	8001d30 <PCD_EP_ISR_Handler+0x5f8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	4413      	add	r3, r2
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	00da      	lsls	r2, r3, #3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	4413      	add	r3, r2
 8001d04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d08:	623b      	str	r3, [r7, #32]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	e061      	b.n	8001df4 <PCD_EP_ISR_Handler+0x6bc>
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d15d      	bne.n	8001df4 <PCD_EP_ISR_Handler+0x6bc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4c:	4413      	add	r3, r2
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	00da      	lsls	r2, r3, #3
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	4413      	add	r3, r2
 8001d5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d62:	2200      	movs	r2, #0
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	e045      	b.n	8001df4 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	785b      	ldrb	r3, [r3, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d126      	bne.n	8001dc4 <PCD_EP_ISR_Handler+0x68c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	4413      	add	r3, r2
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	00da      	lsls	r2, r3, #3
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	4413      	add	r3, r2
 8001d98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	e017      	b.n	8001df4 <PCD_EP_ISR_Handler+0x6bc>
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d113      	bne.n	8001df4 <PCD_EP_ISR_Handler+0x6bc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dda:	4413      	add	r3, r2
 8001ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	00da      	lsls	r2, r3, #3
 8001de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de6:	4413      	add	r3, r2
 8001de8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df0:	2200      	movs	r2, #0
 8001df2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f007 f91d 	bl	800903a <HAL_PCD_DataInStageCallback>
 8001e00:	e051      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d144      	bne.n	8001e98 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d907      	bls.n	8001e52 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e4a:	1ad2      	subs	r2, r2, r3
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	e002      	b.n	8001e58 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f007 f8e7 	bl	800903a <HAL_PCD_DataInStageCallback>
 8001e6c:	e01b      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e76:	441a      	add	r2, r3
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e84:	441a      	add	r2, r3
 8001e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e88:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 f936 	bl	8005102 <USB_EPStartXfer>
 8001e96:	e006      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f917 	bl	80020d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f6ff ac45 	blt.w	8001742 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3758      	adds	r7, #88	; 0x58
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b088      	sub	sp, #32
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d07c      	beq.n	8001fd4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	8b7b      	ldrh	r3, [r7, #26]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d306      	bcc.n	8001f18 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	8b7b      	ldrh	r3, [r7, #26]
 8001f10:	1ad2      	subs	r2, r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	619a      	str	r2, [r3, #24]
 8001f16:	e002      	b.n	8001f1e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d123      	bne.n	8001f6e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f40:	833b      	strh	r3, [r7, #24]
 8001f42:	8b3b      	ldrh	r3, [r7, #24]
 8001f44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f48:	833b      	strh	r3, [r7, #24]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	441a      	add	r2, r3
 8001f58:	8b3b      	ldrh	r3, [r7, #24]
 8001f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01f      	beq.n	8001fb8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f92:	82fb      	strh	r3, [r7, #22]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	441a      	add	r2, r3
 8001fa2:	8afb      	ldrh	r3, [r7, #22]
 8001fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fb8:	8b7b      	ldrh	r3, [r7, #26]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8085 	beq.w	80020ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	891a      	ldrh	r2, [r3, #8]
 8001fcc:	8b7b      	ldrh	r3, [r7, #26]
 8001fce:	f004 fdc5 	bl	8006b5c <USB_ReadPMA>
 8001fd2:	e07a      	b.n	80020ca <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	8b7b      	ldrh	r3, [r7, #26]
 8002000:	429a      	cmp	r2, r3
 8002002:	d306      	bcc.n	8002012 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	8b7b      	ldrh	r3, [r7, #26]
 800200a:	1ad2      	subs	r2, r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	619a      	str	r2, [r3, #24]
 8002010:	e002      	b.n	8002018 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d123      	bne.n	8002068 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	83fb      	strh	r3, [r7, #30]
 800203c:	8bfb      	ldrh	r3, [r7, #30]
 800203e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002042:	83fb      	strh	r3, [r7, #30]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	8bfb      	ldrh	r3, [r7, #30]
 8002054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800205c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002064:	b29b      	uxth	r3, r3
 8002066:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208c:	83bb      	strh	r3, [r7, #28]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	8bbb      	ldrh	r3, [r7, #28]
 800209e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020b2:	8b7b      	ldrh	r3, [r7, #26]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	6959      	ldr	r1, [r3, #20]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	895a      	ldrh	r2, [r3, #10]
 80020c4:	8b7b      	ldrh	r3, [r7, #26]
 80020c6:	f004 fd49 	bl	8006b5c <USB_ReadPMA>
    }
  }

  return count;
 80020ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0a4      	sub	sp, #144	; 0x90
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 81db 	beq.w	80024a4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4413      	add	r3, r2
 8002108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002112:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800211e:	429a      	cmp	r2, r3
 8002120:	d907      	bls.n	8002132 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800212a:	1ad2      	subs	r2, r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	619a      	str	r2, [r3, #24]
 8002130:	e002      	b.n	8002138 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f040 80b9 	bne.w	80022b4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d126      	bne.n	8002198 <HAL_PCD_EP_DB_Transmit+0xc4>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215e:	4413      	add	r3, r2
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	00da      	lsls	r2, r3, #3
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	4413      	add	r3, r2
 800216c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217c:	b29a      	uxth	r2, r3
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800218c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002190:	b29a      	uxth	r2, r3
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	801a      	strh	r2, [r3, #0]
 8002196:	e01a      	b.n	80021ce <HAL_PCD_EP_DB_Transmit+0xfa>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d116      	bne.n	80021ce <HAL_PCD_EP_DB_Transmit+0xfa>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b4:	4413      	add	r3, r2
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	00da      	lsls	r2, r3, #3
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c0:	4413      	add	r3, r2
 80021c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	2200      	movs	r2, #0
 80021cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d126      	bne.n	800222a <HAL_PCD_EP_DB_Transmit+0x156>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	00da      	lsls	r2, r3, #3
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220e:	b29a      	uxth	r2, r3
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29a      	uxth	r2, r3
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	e017      	b.n	800225a <HAL_PCD_EP_DB_Transmit+0x186>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d113      	bne.n	800225a <HAL_PCD_EP_DB_Transmit+0x186>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	4413      	add	r3, r2
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00da      	lsls	r2, r3, #3
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	4413      	add	r3, r2
 800224e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	2200      	movs	r2, #0
 8002258:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f006 feea 	bl	800903a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 82fa 	beq.w	8002866 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228c:	82fb      	strh	r3, [r7, #22]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	441a      	add	r2, r3
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	8013      	strh	r3, [r2, #0]
 80022b2:	e2d8      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d021      	beq.n	8002302 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	441a      	add	r2, r3
 80022ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80022ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fe:	b29b      	uxth	r3, r3
 8002300:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002308:	2b01      	cmp	r3, #1
 800230a:	f040 82ac 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002316:	441a      	add	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002324:	441a      	add	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	429a      	cmp	r2, r3
 8002334:	d30b      	bcc.n	800234e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002346:	1ad2      	subs	r2, r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	621a      	str	r2, [r3, #32]
 800234c:	e017      	b.n	800237e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002356:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800235a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002366:	e00a      	b.n	800237e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d165      	bne.n	8002452 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239a:	4413      	add	r3, r2
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00da      	lsls	r2, r3, #3
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	4413      	add	r3, r2
 80023a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023c2:	2b3e      	cmp	r3, #62	; 0x3e
 80023c4:	d91d      	bls.n	8002402 <HAL_PCD_EP_DB_Transmit+0x32e>
 80023c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80023da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023dc:	3b01      	subs	r3, #1
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fe:	801a      	strh	r2, [r3, #0]
 8002400:	e044      	b.n	800248c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <HAL_PCD_EP_DB_Transmit+0x34c>
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002418:	b29a      	uxth	r2, r3
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	e035      	b.n	800248c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	64bb      	str	r3, [r7, #72]	; 0x48
 8002428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_PCD_EP_DB_Transmit+0x366>
 8002434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002436:	3301      	adds	r3, #1
 8002438:	64bb      	str	r3, [r7, #72]	; 0x48
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29a      	uxth	r2, r3
 8002440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002442:	b29b      	uxth	r3, r3
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	b29b      	uxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b29a      	uxth	r2, r3
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	e01c      	b.n	800248c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d118      	bne.n	800248c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246e:	4413      	add	r3, r2
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	00da      	lsls	r2, r3, #3
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	4413      	add	r3, r2
 800247c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002480:	643b      	str	r3, [r7, #64]	; 0x40
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002486:	b29a      	uxth	r2, r3
 8002488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	6959      	ldr	r1, [r3, #20]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	891a      	ldrh	r2, [r3, #8]
 8002498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800249c:	b29b      	uxth	r3, r3
 800249e:	f004 fb1b 	bl	8006ad8 <USB_WritePMA>
 80024a2:	e1e0      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d307      	bcc.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024e0:	1ad2      	subs	r2, r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	e002      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 80c0 	bne.w	8002678 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d126      	bne.n	800254e <HAL_PCD_EP_DB_Transmit+0x47a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002514:	4413      	add	r3, r2
 8002516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00da      	lsls	r2, r3, #3
 800251e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002520:	4413      	add	r3, r2
 8002522:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002526:	67bb      	str	r3, [r7, #120]	; 0x78
 8002528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002532:	b29a      	uxth	r2, r3
 8002534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	e01a      	b.n	8002584 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d116      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	667b      	str	r3, [r7, #100]	; 0x64
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800256a:	4413      	add	r3, r2
 800256c:	667b      	str	r3, [r7, #100]	; 0x64
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	00da      	lsls	r2, r3, #3
 8002574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002576:	4413      	add	r3, r2
 8002578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800257c:	663b      	str	r3, [r7, #96]	; 0x60
 800257e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	677b      	str	r3, [r7, #116]	; 0x74
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12b      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x516>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a6:	4413      	add	r3, r2
 80025a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	00da      	lsls	r2, r3, #3
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e017      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x546>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d113      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x546>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002600:	4413      	add	r3, r2
 8002602:	677b      	str	r3, [r7, #116]	; 0x74
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	00da      	lsls	r2, r3, #3
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	4413      	add	r3, r2
 800260e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002612:	673b      	str	r3, [r7, #112]	; 0x70
 8002614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f006 fd0a 	bl	800903a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 811a 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]
 8002676:	e0f6      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d121      	bne.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f040 80ca 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026da:	441a      	add	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026e8:	441a      	add	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d30b      	bcc.n	8002712 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a1a      	ldr	r2, [r3, #32]
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	621a      	str	r2, [r3, #32]
 8002710:	e017      	b.n	8002742 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800271a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800271e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800272a:	e00a      	b.n	8002742 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	657b      	str	r3, [r7, #84]	; 0x54
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d165      	bne.n	800281c <HAL_PCD_EP_DB_Transmit+0x748>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002764:	4413      	add	r3, r2
 8002766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	00da      	lsls	r2, r3, #3
 800276e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002770:	4413      	add	r3, r2
 8002772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002776:	65bb      	str	r3, [r7, #88]	; 0x58
 8002778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002782:	b29a      	uxth	r2, r3
 8002784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800278c:	2b3e      	cmp	r3, #62	; 0x3e
 800278e:	d91d      	bls.n	80027cc <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	66bb      	str	r3, [r7, #104]	; 0x68
 8002798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x6d6>
 80027a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a6:	3b01      	subs	r3, #1
 80027a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e041      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x716>
 80027d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e032      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_PCD_EP_DB_Transmit+0x730>
 80027fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002800:	3301      	adds	r3, #1
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
 8002804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29a      	uxth	r2, r3
 800280a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800280c:	b29b      	uxth	r3, r3
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	b29b      	uxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b29a      	uxth	r2, r3
 8002816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	e019      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0x77c>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d115      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282c:	b29b      	uxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	4413      	add	r3, r2
 8002834:	657b      	str	r3, [r7, #84]	; 0x54
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00da      	lsls	r2, r3, #3
 800283c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283e:	4413      	add	r3, r2
 8002840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002844:	653b      	str	r3, [r7, #80]	; 0x50
 8002846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284a:	b29a      	uxth	r2, r3
 800284c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	6959      	ldr	r1, [r3, #20]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	895a      	ldrh	r2, [r3, #10]
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002860:	b29b      	uxth	r3, r3
 8002862:	f004 f939 	bl	8006ad8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002880:	82bb      	strh	r3, [r7, #20]
 8002882:	8abb      	ldrh	r3, [r7, #20]
 8002884:	f083 0310 	eor.w	r3, r3, #16
 8002888:	82bb      	strh	r3, [r7, #20]
 800288a:	8abb      	ldrh	r3, [r7, #20]
 800288c:	f083 0320 	eor.w	r3, r3, #32
 8002890:	82bb      	strh	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	8abb      	ldrh	r3, [r7, #20]
 80028a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3790      	adds	r7, #144	; 0x90
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	4613      	mov	r3, r2
 80028d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e009      	b.n	800290a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028f6:	897a      	ldrh	r2, [r7, #10]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800290a:	893b      	ldrh	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b29a      	uxth	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	80da      	strh	r2, [r3, #6]
 800291e:	e00b      	b.n	8002938 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2201      	movs	r2, #1
 8002924:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	b29a      	uxth	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b29a      	uxth	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800296a:	b29b      	uxth	r3, r3
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800297e:	b29b      	uxth	r3, r3
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	58000400 	.word	0x58000400

080029bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	58000400 	.word	0x58000400

080029d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e6:	6053      	str	r3, [r2, #4]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	58000400 	.word	0x58000400

080029f8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0a:	d101      	bne.n	8002a10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a6a:	d101      	bne.n	8002a70 <LL_RCC_HSE_IsReady+0x18>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <LL_RCC_HSE_IsReady+0x1a>
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d101      	bne.n	8002ad0 <LL_RCC_HSI_IsReady+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_RCC_HSI_IsReady+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d101      	bne.n	8002b62 <LL_RCC_HSI48_IsReady+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_RCC_HSI48_IsReady+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d101      	bne.n	8002c0e <LL_RCC_LSE_IsReady+0x18>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <LL_RCC_LSE_IsReady+0x1a>
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d101      	bne.n	8002c76 <LL_RCC_LSI1_IsReady+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_RCC_LSI1_IsReady+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d101      	bne.n	8002cde <LL_RCC_LSI2_IsReady+0x18>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <LL_RCC_LSI2_IsReady+0x1a>
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6013      	str	r3, [r2, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d101      	bne.n	8002d6a <LL_RCC_MSI_IsReady+0x16>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <LL_RCC_MSI_IsReady+0x18>
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2bb0      	cmp	r3, #176	; 0xb0
 8002db4:	d901      	bls.n	8002dba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002db6:	23b0      	movs	r3, #176	; 0xb0
 8002db8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002dba:	687b      	ldr	r3, [r7, #4]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 0203 	bic.w	r2, r3, #3
 8002e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e96:	f023 020f 	bic.w	r2, r3, #15
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	608b      	str	r3, [r1, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f86:	d101      	bne.n	8002f8c <LL_RCC_PLL_IsReady+0x18>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <LL_RCC_PLL_IsReady+0x1a>
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0303 	and.w	r3, r3, #3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d101      	bne.n	8003012 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003032:	d101      	bne.n	8003038 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d101      	bne.n	800305e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800307c:	d101      	bne.n	8003082 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030a0:	d101      	bne.n	80030a6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b08d      	sub	sp, #52	; 0x34
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e363      	b.n	800378e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 808d 	beq.w	80031ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d4:	f7ff fea1 	bl	8002e1a <LL_RCC_GetSysClkSource>
 80030d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030da:	f7ff ff82 	bl	8002fe2 <LL_RCC_PLL_GetMainSource>
 80030de:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x3e>
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	d147      	bne.n	800317c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d144      	bne.n	800317c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e347      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003102:	f7ff fe4c 	bl	8002d9e <LL_RCC_MSI_GetRange>
 8003106:	4603      	mov	r3, r0
 8003108:	429c      	cmp	r4, r3
 800310a:	d914      	bls.n	8003136 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fd05 	bl	8003b20 <RCC_SetFlashLatencyFromMSIRange>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e336      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe26 	bl	8002d76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fe4a 	bl	8002dc8 <LL_RCC_MSI_SetCalibTrimming>
 8003134:	e013      	b.n	800315e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fe1b 	bl	8002d76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fe3f 	bl	8002dc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fce6 	bl	8003b20 <RCC_SetFlashLatencyFromMSIRange>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e317      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800315e:	f000 fccb 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003162:	4603      	mov	r3, r0
 8003164:	4aa4      	ldr	r2, [pc, #656]	; (80033f8 <HAL_RCC_OscConfig+0x344>)
 8003166:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003168:	4ba4      	ldr	r3, [pc, #656]	; (80033fc <HAL_RCC_OscConfig+0x348>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fbbb 	bl	80008e8 <HAL_InitTick>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d039      	beq.n	80031ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e308      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01e      	beq.n	80031c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003184:	f7ff fdc8 	bl	8002d18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003188:	f7fd fbfc 	bl	8000984 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003190:	f7fd fbf8 	bl	8000984 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e2f5      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80031a2:	f7ff fdd7 	bl	8002d54 <LL_RCC_MSI_IsReady>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f1      	beq.n	8003190 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fde0 	bl	8002d76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fe04 	bl	8002dc8 <LL_RCC_MSI_SetCalibTrimming>
 80031c0:	e015      	b.n	80031ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031c2:	f7ff fdb8 	bl	8002d36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031c6:	f7fd fbdd 	bl	8000984 <HAL_GetTick>
 80031ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ce:	f7fd fbd9 	bl	8000984 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e2d6      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031e0:	f7ff fdb8 	bl	8002d54 <LL_RCC_MSI_IsReady>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f1      	bne.n	80031ce <HAL_RCC_OscConfig+0x11a>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d047      	beq.n	800328a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fa:	f7ff fe0e 	bl	8002e1a <LL_RCC_GetSysClkSource>
 80031fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003200:	f7ff feef 	bl	8002fe2 <LL_RCC_PLL_GetMainSource>
 8003204:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x164>
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d108      	bne.n	8003224 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d105      	bne.n	8003224 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d134      	bne.n	800328a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e2b4      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d102      	bne.n	8003234 <HAL_RCC_OscConfig+0x180>
 800322e:	f7ff fbf5 	bl	8002a1c <LL_RCC_HSE_Enable>
 8003232:	e001      	b.n	8003238 <HAL_RCC_OscConfig+0x184>
 8003234:	f7ff fc01 	bl	8002a3a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd fba0 	bl	8000984 <HAL_GetTick>
 8003244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fd fb9c 	bl	8000984 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e299      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800325a:	f7ff fbfd 	bl	8002a58 <LL_RCC_HSE_IsReady>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f1      	beq.n	8003248 <HAL_RCC_OscConfig+0x194>
 8003264:	e011      	b.n	800328a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fd fb8d 	bl	8000984 <HAL_GetTick>
 800326a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326e:	f7fd fb89 	bl	8000984 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b64      	cmp	r3, #100	; 0x64
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e286      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003280:	f7ff fbea 	bl	8002a58 <LL_RCC_HSE_IsReady>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f1      	bne.n	800326e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d04c      	beq.n	8003330 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003296:	f7ff fdc0 	bl	8002e1a <LL_RCC_GetSysClkSource>
 800329a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	f7ff fea1 	bl	8002fe2 <LL_RCC_PLL_GetMainSource>
 80032a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x200>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d10e      	bne.n	80032cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e266      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fc09 	bl	8002adc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032ca:	e031      	b.n	8003330 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d019      	beq.n	8003308 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	f7ff fbd2 	bl	8002a7c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd fb54 	bl	8000984 <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fd fb50 	bl	8000984 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e24d      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032f2:	f7ff fbe1 	bl	8002ab8 <LL_RCC_HSI_IsReady>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f1      	beq.n	80032e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fbeb 	bl	8002adc <LL_RCC_HSI_SetCalibTrimming>
 8003306:	e013      	b.n	8003330 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003308:	f7ff fbc7 	bl	8002a9a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fd fb3a 	bl	8000984 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003314:	f7fd fb36 	bl	8000984 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e233      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003326:	f7ff fbc7 	bl	8002ab8 <LL_RCC_HSI_IsReady>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f1      	bne.n	8003314 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a3 	beq.w	8003490 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d076      	beq.n	8003440 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d046      	beq.n	80033ec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800335e:	f7ff fc7e 	bl	8002c5e <LL_RCC_LSI1_IsReady>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003368:	f7ff fc57 	bl	8002c1a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800336c:	f7fd fb0a 	bl	8000984 <HAL_GetTick>
 8003370:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003374:	f7fd fb06 	bl	8000984 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e203      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003386:	f7ff fc6a 	bl	8002c5e <LL_RCC_LSI1_IsReady>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f1      	beq.n	8003374 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003390:	f7ff fc77 	bl	8002c82 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd faf6 	bl	8000984 <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800339c:	f7fd faf2 	bl	8000984 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1ef      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80033ae:	f7ff fc8a 	bl	8002cc6 <LL_RCC_LSI2_IsReady>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f1      	beq.n	800339c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fc94 	bl	8002cea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80033c2:	f7ff fc3b 	bl	8002c3c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fadd 	bl	8000984 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033ce:	f7fd fad9 	bl	8000984 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1d6      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033e0:	f7ff fc3d 	bl	8002c5e <LL_RCC_LSI1_IsReady>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f1      	bne.n	80033ce <HAL_RCC_OscConfig+0x31a>
 80033ea:	e051      	b.n	8003490 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033ec:	f7ff fc15 	bl	8002c1a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fd fac8 	bl	8000984 <HAL_GetTick>
 80033f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033f6:	e00c      	b.n	8003412 <HAL_RCC_OscConfig+0x35e>
 80033f8:	20000048 	.word	0x20000048
 80033fc:	2000004c 	.word	0x2000004c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003400:	f7fd fac0 	bl	8000984 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1bd      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003412:	f7ff fc24 	bl	8002c5e <LL_RCC_LSI1_IsReady>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f1      	beq.n	8003400 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800341c:	f7ff fc42 	bl	8002ca4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003422:	f7fd faaf 	bl	8000984 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b03      	cmp	r3, #3
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e1ac      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003434:	f7ff fc47 	bl	8002cc6 <LL_RCC_LSI2_IsReady>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f1      	bne.n	8003422 <HAL_RCC_OscConfig+0x36e>
 800343e:	e027      	b.n	8003490 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003440:	f7ff fc30 	bl	8002ca4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd fa9e 	bl	8000984 <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800344c:	f7fd fa9a 	bl	8000984 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b03      	cmp	r3, #3
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e197      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800345e:	f7ff fc32 	bl	8002cc6 <LL_RCC_LSI2_IsReady>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f1      	bne.n	800344c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003468:	f7ff fbe8 	bl	8002c3c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fd fa8a 	bl	8000984 <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003474:	f7fd fa86 	bl	8000984 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e183      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003486:	f7ff fbea 	bl	8002c5e <LL_RCC_LSI1_IsReady>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f1      	bne.n	8003474 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d05b      	beq.n	8003554 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4ba7      	ldr	r3, [pc, #668]	; (800373c <HAL_RCC_OscConfig+0x688>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d114      	bne.n	80034d2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80034a8:	f7ff fa78 	bl	800299c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ac:	f7fd fa6a 	bl	8000984 <HAL_GetTick>
 80034b0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fd fa66 	bl	8000984 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e163      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c6:	4b9d      	ldr	r3, [pc, #628]	; (800373c <HAL_RCC_OscConfig+0x688>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_OscConfig+0x42c>
 80034da:	f7ff fb48 	bl	8002b6e <LL_RCC_LSE_Enable>
 80034de:	e00c      	b.n	80034fa <HAL_RCC_OscConfig+0x446>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d104      	bne.n	80034f2 <HAL_RCC_OscConfig+0x43e>
 80034e8:	f7ff fb63 	bl	8002bb2 <LL_RCC_LSE_EnableBypass>
 80034ec:	f7ff fb3f 	bl	8002b6e <LL_RCC_LSE_Enable>
 80034f0:	e003      	b.n	80034fa <HAL_RCC_OscConfig+0x446>
 80034f2:	f7ff fb4d 	bl	8002b90 <LL_RCC_LSE_Disable>
 80034f6:	f7ff fb6d 	bl	8002bd4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d014      	beq.n	800352c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fd fa3f 	bl	8000984 <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fd fa3b 	bl	8000984 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e136      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003520:	f7ff fb69 	bl	8002bf6 <LL_RCC_LSE_IsReady>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ef      	beq.n	800350a <HAL_RCC_OscConfig+0x456>
 800352a:	e013      	b.n	8003554 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd fa2a 	bl	8000984 <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fd fa26 	bl	8000984 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e121      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800354a:	f7ff fb54 	bl	8002bf6 <LL_RCC_LSE_IsReady>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ef      	bne.n	8003534 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02c      	beq.n	80035ba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d014      	beq.n	8003592 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003568:	f7ff facd 	bl	8002b06 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd fa0a 	bl	8000984 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003574:	f7fd fa06 	bl	8000984 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e103      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003586:	f7ff fae0 	bl	8002b4a <LL_RCC_HSI48_IsReady>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f1      	beq.n	8003574 <HAL_RCC_OscConfig+0x4c0>
 8003590:	e013      	b.n	80035ba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003592:	f7ff fac9 	bl	8002b28 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fd f9f5 	bl	8000984 <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359e:	f7fd f9f1 	bl	8000984 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0ee      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80035b0:	f7ff facb 	bl	8002b4a <LL_RCC_HSI48_IsReady>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f1      	bne.n	800359e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80e4 	beq.w	800378c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c4:	f7ff fc29 	bl	8002e1a <LL_RCC_GetSysClkSource>
 80035c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	f040 80b4 	bne.w	8003744 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0203 	and.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d123      	bne.n	8003632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d11c      	bne.n	8003632 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d114      	bne.n	8003632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d10d      	bne.n	8003632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d05d      	beq.n	80036ee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	d058      	beq.n	80036ea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0a1      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800364a:	f7ff fc84 	bl	8002f56 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800364e:	f7fd f999 	bl	8000984 <HAL_GetTick>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003656:	f7fd f995 	bl	8000984 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e092      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ef      	bne.n	8003656 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_RCC_OscConfig+0x68c>)
 800367e:	4013      	ands	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800368e:	0212      	lsls	r2, r2, #8
 8003690:	4311      	orrs	r1, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036a2:	430a      	orrs	r2, r1
 80036a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036ac:	f7ff fc44 	bl	8002f38 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c0:	f7fd f960 	bl	8000984 <HAL_GetTick>
 80036c4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fd f95c 	bl	8000984 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e059      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e8:	e050      	b.n	800378c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e04f      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d147      	bne.n	800378c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036fc:	f7ff fc1c 	bl	8002f38 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003710:	f7fd f938 	bl	8000984 <HAL_GetTick>
 8003714:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd f934 	bl	8000984 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e031      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ef      	beq.n	8003718 <HAL_RCC_OscConfig+0x664>
 8003738:	e028      	b.n	800378c <HAL_RCC_OscConfig+0x6d8>
 800373a:	bf00      	nop
 800373c:	58000400 	.word	0x58000400
 8003740:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d01e      	beq.n	8003788 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	f7ff fc04 	bl	8002f56 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd f919 	bl	8000984 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fd f915 	bl	8000984 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e012      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ef      	bne.n	8003756 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_OscConfig+0x6e4>)
 8003782:	4013      	ands	r3, r2
 8003784:	60cb      	str	r3, [r1, #12]
 8003786:	e001      	b.n	800378c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3734      	adds	r7, #52	; 0x34
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	bf00      	nop
 8003798:	eefefffc 	.word	0xeefefffc

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e12d      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b98      	ldr	r3, [pc, #608]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d91b      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b95      	ldr	r3, [pc, #596]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4993      	ldr	r1, [pc, #588]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ce:	f7fd f8d9 	bl	8000984 <HAL_GetTick>
 80037d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037d6:	f7fd f8d5 	bl	8000984 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e111      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e8:	4b8a      	ldr	r3, [pc, #552]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d1ef      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fb13 	bl	8002e32 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800380c:	f7fd f8ba 	bl	8000984 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003814:	f7fd f8b6 	bl	8000984 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0f2      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003826:	f7ff fbe8 	bl	8002ffa <LL_RCC_IsActiveFlag_HPRE>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f1      	beq.n	8003814 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d016      	beq.n	800386a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fb0a 	bl	8002e5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003846:	f7fd f89d 	bl	8000984 <HAL_GetTick>
 800384a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800384e:	f7fd f899 	bl	8000984 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0d5      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003860:	f7ff fbdd 	bl	800301e <LL_RCC_IsActiveFlag_C2HPRE>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f1      	beq.n	800384e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fb03 	bl	8002e86 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003880:	f7fd f880 	bl	8000984 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003888:	f7fd f87c 	bl	8000984 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0b8      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800389a:	f7ff fbd3 	bl	8003044 <LL_RCC_IsActiveFlag_SHDHPRE>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f1      	beq.n	8003888 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d016      	beq.n	80038de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fafd 	bl	8002eb4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038ba:	f7fd f863 	bl	8000984 <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038c2:	f7fd f85f 	bl	8000984 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e09b      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038d4:	f7ff fbc9 	bl	800306a <LL_RCC_IsActiveFlag_PPRE1>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f1      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d017      	beq.n	800391a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff faf3 	bl	8002edc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038f6:	f7fd f845 	bl	8000984 <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038fe:	f7fd f841 	bl	8000984 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e07d      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003910:	f7ff fbbd 	bl	800308e <LL_RCC_IsActiveFlag_PPRE2>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f1      	beq.n	80038fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d043      	beq.n	80039ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d106      	bne.n	800393c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800392e:	f7ff f893 	bl	8002a58 <LL_RCC_HSE_IsReady>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d11e      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e067      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d106      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003944:	f7ff fb16 	bl	8002f74 <LL_RCC_PLL_IsReady>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e05c      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800395a:	f7ff f9fb 	bl	8002d54 <LL_RCC_MSI_IsReady>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e051      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003968:	f7ff f8a6 	bl	8002ab8 <LL_RCC_HSI_IsReady>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e04a      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fa39 	bl	8002df2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003980:	f7fd f800 	bl	8000984 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fc fffc 	bl	8000984 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e036      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	f7ff fa3c 	bl	8002e1a <LL_RCC_GetSysClkSource>
 80039a2:	4602      	mov	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d1ec      	bne.n	8003988 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d21b      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039bc:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 0207 	bic.w	r2, r3, #7
 80039c4:	4913      	ldr	r1, [pc, #76]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fc ffda 	bl	8000984 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039d4:	f7fc ffd6 	bl	8000984 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e012      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1ef      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039f4:	f000 f880 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_RCC_ClockConfig+0x27c>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039fe:	f7fc ffcd 	bl	800099c <HAL_GetTickPrio>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fc ff6f 	bl	80008e8 <HAL_InitTick>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	58004000 	.word	0x58004000
 8003a18:	20000048 	.word	0x20000048

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	f7ff f9fa 	bl	8002e1a <LL_RCC_GetSysClkSource>
 8003a26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a2e:	f7ff f9b6 	bl	8002d9e <LL_RCC_MSI_GetRange>
 8003a32:	4603      	mov	r3, r0
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e04b      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a4a:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e045      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d10a      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a56:	f7fe ffcf 	bl	80029f8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e03a      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e037      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a6c:	f7ff fab9 	bl	8002fe2 <LL_RCC_PLL_GetMainSource>
 8003a70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d003      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x64>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a7e:	e00d      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a82:	60bb      	str	r3, [r7, #8]
        break;
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a86:	f7fe ffb7 	bl	80029f8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a90:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a94:	e00d      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a98:	60bb      	str	r3, [r7, #8]
        break;
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a9c:	f7ff f97f 	bl	8002d9e <LL_RCC_MSI_GetRange>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	60bb      	str	r3, [r7, #8]
        break;
 8003ab0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003ab2:	f7ff fa71 	bl	8002f98 <LL_RCC_PLL_GetN>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	fb03 f402 	mul.w	r4, r3, r2
 8003abe:	f7ff fa84 	bl	8002fca <LL_RCC_PLL_GetDivider>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003acc:	f7ff fa71 	bl	8002fb2 <LL_RCC_PLL_GetR>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	0f5b      	lsrs	r3, r3, #29
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ada:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003adc:	68fb      	ldr	r3, [r7, #12]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	0800a608 	.word	0x0800a608
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	003d0900 	.word	0x003d0900
 8003af4:	007a1200 	.word	0x007a1200

08003af8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b598      	push	{r3, r4, r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003afc:	f7ff ff8e 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8003b00:	4604      	mov	r4, r0
 8003b02:	f7ff f9ff 	bl	8002f04 <LL_RCC_GetAHBPrescaler>
 8003b06:	4603      	mov	r3, r0
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <HAL_RCC_GetHCLKFreq+0x24>)
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd98      	pop	{r3, r4, r7, pc}
 8003b1c:	0800a5c8 	.word	0x0800a5c8

08003b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2bb0      	cmp	r3, #176	; 0xb0
 8003b2c:	d903      	bls.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e007      	b.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b46:	f7ff f9e9 	bl	8002f1c <LL_RCC_GetAHB4Prescaler>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9c      	lsrs	r4, r3, #18
 8003b6a:	f7fe ff27 	bl	80029bc <HAL_PWREx_GetVoltageRange>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4619      	mov	r1, r3
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 f80c 	bl	8003b90 <RCC_SetFlashLatency>
 8003b78:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	0800a608 	.word	0x0800a608
 8003b88:	0800a5c8 	.word	0x0800a5c8
 8003b8c:	431bde83 	.word	0x431bde83

08003b90 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b093      	sub	sp, #76	; 0x4c
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <RCC_SetFlashLatency+0xe8>)
 8003b9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003ba6:	4a35      	ldr	r2, [pc, #212]	; (8003c7c <RCC_SetFlashLatency+0xec>)
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003bb2:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <RCC_SetFlashLatency+0xf0>)
 8003bb4:	f107 040c 	add.w	r4, r7, #12
 8003bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d11a      	bne.n	8003c00 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bce:	e013      	b.n	8003bf8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3348      	adds	r3, #72	; 0x48
 8003bd6:	443b      	add	r3, r7
 8003bd8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d807      	bhi.n	8003bf2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	3348      	adds	r3, #72	; 0x48
 8003be8:	443b      	add	r3, r7
 8003bea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bf0:	e020      	b.n	8003c34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d9e8      	bls.n	8003bd0 <RCC_SetFlashLatency+0x40>
 8003bfe:	e019      	b.n	8003c34 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	e013      	b.n	8003c2e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	3348      	adds	r3, #72	; 0x48
 8003c0c:	443b      	add	r3, r7
 8003c0e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d807      	bhi.n	8003c28 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	3348      	adds	r3, #72	; 0x48
 8003c1e:	443b      	add	r3, r7
 8003c20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c24:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c26:	e005      	b.n	8003c34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d9e8      	bls.n	8003c06 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <RCC_SetFlashLatency+0xf4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 0207 	bic.w	r2, r3, #7
 8003c3c:	4911      	ldr	r1, [pc, #68]	; (8003c84 <RCC_SetFlashLatency+0xf4>)
 8003c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c44:	f7fc fe9e 	bl	8000984 <HAL_GetTick>
 8003c48:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c4a:	e008      	b.n	8003c5e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c4c:	f7fc fe9a 	bl	8000984 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e007      	b.n	8003c6e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <RCC_SetFlashLatency+0xf4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1ef      	bne.n	8003c4c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	374c      	adds	r7, #76	; 0x4c
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}
 8003c76:	bf00      	nop
 8003c78:	0800a554 	.word	0x0800a554
 8003c7c:	0800a564 	.word	0x0800a564
 8003c80:	0800a570 	.word	0x0800a570
 8003c84:	58004000 	.word	0x58004000

08003c88 <LL_RCC_LSE_IsEnabled>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <LL_RCC_LSE_IsEnabled+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <LL_RCC_LSE_IsEnabled+0x1a>
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_RCC_LSE_IsReady>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d101      	bne.n	8003cc4 <LL_RCC_LSE_IsReady+0x18>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <LL_RCC_LSE_IsReady+0x1a>
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_RCC_MSI_EnablePLLMode>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cde:	f043 0304 	orr.w	r3, r3, #4
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_SetRFWKPClockSource>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_RCC_SetSMPSClockSource>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f023 0203 	bic.w	r2, r3, #3
 8003d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_SetSMPSPrescaler>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_SetUSARTClockSource>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_SetLPUARTClockSource>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_RCC_SetI2CClockSource>:
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_RCC_SetLPTIMClockSource>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	43db      	mvns	r3, r3
 8003e14:	401a      	ands	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_RCC_SetSAIClockSource>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_SetRNGClockSource>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_RCC_SetCLK48ClockSource>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_RCC_SetUSBClockSource>:
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ffe3 	bl	8003e88 <LL_RCC_SetCLK48ClockSource>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <LL_RCC_SetADCClockSource>:
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_RCC_SetRTCClockSource>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_GetRTCClockSource>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_RCC_ForceBackupDomainReset>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_PLLSAI1_Enable>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_PLLSAI1_Disable>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_PLLSAI1_IsReady>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fce:	d101      	bne.n	8003fd4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fec:	2300      	movs	r3, #0
 8003fee:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d034      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004004:	d021      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800400a:	d81b      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800400c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004010:	d01d      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004016:	d815      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800401c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004020:	d110      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004032:	e00d      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f94d 	bl	80042d8 <RCCEx_PLLSAI1_ConfigNP>
 800403e:	4603      	mov	r3, r0
 8004040:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004042:	e005      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	77fb      	strb	r3, [r7, #31]
        break;
 8004048:	e002      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800404a:	bf00      	nop
 800404c:	e000      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800404e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004050:	7ffb      	ldrb	r3, [r7, #31]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fee8 	bl	8003e30 <LL_RCC_SetSAIClockSource>
 8004060:	e001      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	7ffb      	ldrb	r3, [r7, #31]
 8004064:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406e:	2b00      	cmp	r3, #0
 8004070:	d046      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004072:	f7ff ff56 	bl	8003f22 <LL_RCC_GetRTCClockSource>
 8004076:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	429a      	cmp	r2, r3
 8004080:	d03c      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004082:	f7fe fc8b 	bl	800299c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff30 	bl	8003ef6 <LL_RCC_SetRTCClockSource>
 8004096:	e02e      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040a2:	f7ff ff4b 	bl	8003f3c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040a6:	f7ff ff5a 	bl	8003f5e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80040b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80040c2:	f7ff fde1 	bl	8003c88 <LL_RCC_LSE_IsEnabled>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d114      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040cc:	f7fc fc5a 	bl	8000984 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80040d2:	e00b      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fc fc56 	bl	8000984 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d902      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	77fb      	strb	r3, [r7, #31]
              break;
 80040ea:	e004      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040ec:	f7ff fdde 	bl	8003cac <LL_RCC_LSE_IsReady>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d1ee      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	77bb      	strb	r3, [r7, #30]
 80040fa:	e001      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7ffb      	ldrb	r3, [r7, #31]
 80040fe:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fe2a 	bl	8003d6a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fe35 	bl	8003d96 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fe5d 	bl	8003dfc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fe52 	bl	8003dfc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fe2a 	bl	8003dc2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fe1f 	bl	8003dc2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d022      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fe8d 	bl	8003eb4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a2:	d107      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041bc:	d10b      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f8e3 	bl	800438e <RCCEx_PLLSAI1_ConfigNQ>
 80041c8:	4603      	mov	r3, r0
 80041ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80041d2:	7ffb      	ldrb	r3, [r7, #31]
 80041d4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02b      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d008      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f4:	d003      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d105      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fe2a 	bl	8003e5c <LL_RCC_SetRNGClockSource>
 8004208:	e00a      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	2000      	movs	r0, #0
 8004216:	f7ff fe21 	bl	8003e5c <LL_RCC_SetRNGClockSource>
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff fe34 	bl	8003e88 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004228:	d107      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004238:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	2b00      	cmp	r3, #0
 8004244:	d022      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fe3d 	bl	8003eca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004258:	d107      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800425a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004272:	d10b      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f8e3 	bl	8004444 <RCCEx_PLLSAI1_ConfigNR>
 800427e:	4603      	mov	r3, r0
 8004280:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004282:	7ffb      	ldrb	r3, [r7, #31]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004288:	7ffb      	ldrb	r3, [r7, #31]
 800428a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fd26 	bl	8003cee <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fd45 	bl	8003d42 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fd2c 	bl	8003d1a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80042c2:	7fbb      	ldrb	r3, [r7, #30]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80042d0:	f7ff fcfe 	bl	8003cd0 <LL_RCC_MSI_EnablePLLMode>
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042e4:	f7ff fe5b 	bl	8003f9e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042e8:	f7fc fb4c 	bl	8000984 <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042ee:	e009      	b.n	8004304 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f0:	f7fc fb48 	bl	8000984 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d902      	bls.n	8004304 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	73fb      	strb	r3, [r7, #15]
      break;
 8004302:	e004      	b.n	800430e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004304:	f7ff fe5a 	bl	8003fbc <LL_RCC_PLLSAI1_IsReady>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d137      	bne.n	8004384 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004328:	4313      	orrs	r3, r2
 800432a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800433e:	4313      	orrs	r3, r2
 8004340:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004342:	f7ff fe1d 	bl	8003f80 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004346:	f7fc fb1d 	bl	8000984 <HAL_GetTick>
 800434a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800434c:	e009      	b.n	8004362 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800434e:	f7fc fb19 	bl	8000984 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d902      	bls.n	8004362 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	73fb      	strb	r3, [r7, #15]
        break;
 8004360:	e004      	b.n	800436c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004362:	f7ff fe2b 	bl	8003fbc <LL_RCC_PLLSAI1_IsReady>
 8004366:	4603      	mov	r3, r0
 8004368:	2b01      	cmp	r3, #1
 800436a:	d1f0      	bne.n	800434e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d108      	bne.n	8004384 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800439a:	f7ff fe00 	bl	8003f9e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800439e:	f7fc faf1 	bl	8000984 <HAL_GetTick>
 80043a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043a4:	e009      	b.n	80043ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043a6:	f7fc faed 	bl	8000984 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d902      	bls.n	80043ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	73fb      	strb	r3, [r7, #15]
      break;
 80043b8:	e004      	b.n	80043c4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043ba:	f7ff fdff 	bl	8003fbc <LL_RCC_PLLSAI1_IsReady>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d137      	bne.n	800443a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043de:	4313      	orrs	r3, r2
 80043e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f4:	4313      	orrs	r3, r2
 80043f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043f8:	f7ff fdc2 	bl	8003f80 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fc:	f7fc fac2 	bl	8000984 <HAL_GetTick>
 8004400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004402:	e009      	b.n	8004418 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004404:	f7fc fabe 	bl	8000984 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	73fb      	strb	r3, [r7, #15]
        break;
 8004416:	e004      	b.n	8004422 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004418:	f7ff fdd0 	bl	8003fbc <LL_RCC_PLLSAI1_IsReady>
 800441c:	4603      	mov	r3, r0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d1f0      	bne.n	8004404 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d108      	bne.n	800443a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004436:	4313      	orrs	r3, r2
 8004438:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004450:	f7ff fda5 	bl	8003f9e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004454:	f7fc fa96 	bl	8000984 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800445a:	e009      	b.n	8004470 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800445c:	f7fc fa92 	bl	8000984 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	73fb      	strb	r3, [r7, #15]
      break;
 800446e:	e004      	b.n	800447a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004470:	f7ff fda4 	bl	8003fbc <LL_RCC_PLLSAI1_IsReady>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d137      	bne.n	80044f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004494:	4313      	orrs	r3, r2
 8004496:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044aa:	4313      	orrs	r3, r2
 80044ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044ae:	f7ff fd67 	bl	8003f80 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b2:	f7fc fa67 	bl	8000984 <HAL_GetTick>
 80044b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044b8:	e009      	b.n	80044ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ba:	f7fc fa63 	bl	8000984 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d902      	bls.n	80044ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	73fb      	strb	r3, [r7, #15]
        break;
 80044cc:	e004      	b.n	80044d8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044ce:	f7ff fd75 	bl	8003fbc <LL_RCC_PLLSAI1_IsReady>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d1f0      	bne.n	80044ba <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d108      	bne.n	80044f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ec:	4313      	orrs	r3, r2
 80044ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800450a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800450e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004530:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004534:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	b29b      	uxth	r3, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	b29b      	uxth	r3, r3
 8004546:	4013      	ands	r3, r2
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800455e:	b084      	sub	sp, #16
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	f107 0014 	add.w	r0, r7, #20
 800456c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	b004      	add	sp, #16
 800459e:	4770      	bx	lr

080045a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b09d      	sub	sp, #116	; 0x74
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	78db      	ldrb	r3, [r3, #3]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d81f      	bhi.n	8004612 <USB_ActivateEndpoint+0x72>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <USB_ActivateEndpoint+0x38>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800461b 	.word	0x0800461b
 80045e4:	080045f7 	.word	0x080045f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045f4:	e012      	b.n	800461c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004602:	e00b      	b.n	800461c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004604:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800460c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004610:	e004      	b.n	800461c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004618:	e000      	b.n	800461c <USB_ActivateEndpoint+0x7c>
      break;
 800461a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	441a      	add	r2, r3
 8004626:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800462a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	b21b      	sxth	r3, r3
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	b21a      	sxth	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b21b      	sxth	r3, r3
 800465e:	4313      	orrs	r3, r2
 8004660:	b21b      	sxth	r3, r3
 8004662:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	7b1b      	ldrb	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 8178 	bne.w	8004982 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8084 	beq.w	80047a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4413      	add	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	00da      	lsls	r2, r3, #3
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	88db      	ldrh	r3, [r3, #6]
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	827b      	strh	r3, [r7, #18]
 80046de:	8a7b      	ldrh	r3, [r7, #18]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01b      	beq.n	8004720 <USB_ActivateEndpoint+0x180>
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	823b      	strh	r3, [r7, #16]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	8a3b      	ldrh	r3, [r7, #16]
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	78db      	ldrb	r3, [r3, #3]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d020      	beq.n	800476a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473e:	81bb      	strh	r3, [r7, #12]
 8004740:	89bb      	ldrh	r3, [r7, #12]
 8004742:	f083 0320 	eor.w	r3, r3, #32
 8004746:	81bb      	strh	r3, [r7, #12]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	89bb      	ldrh	r3, [r7, #12]
 8004754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004764:	b29b      	uxth	r3, r3
 8004766:	8013      	strh	r3, [r2, #0]
 8004768:	e2d5      	b.n	8004d16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004780:	81fb      	strh	r3, [r7, #14]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	441a      	add	r2, r3
 800478c:	89fb      	ldrh	r3, [r7, #14]
 800478e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8013      	strh	r3, [r2, #0]
 80047a2:	e2b8      	b.n	8004d16 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	4413      	add	r3, r2
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	00da      	lsls	r2, r3, #3
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	4413      	add	r3, r2
 80047c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	88db      	ldrh	r3, [r3, #6]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	4413      	add	r3, r2
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	00da      	lsls	r2, r3, #3
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	4413      	add	r3, r2
 80047f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004806:	b29a      	uxth	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b3e      	cmp	r3, #62	; 0x3e
 8004812:	d91d      	bls.n	8004850 <USB_ActivateEndpoint+0x2b0>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	66bb      	str	r3, [r7, #104]	; 0x68
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <USB_ActivateEndpoint+0x28e>
 8004828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800482a:	3b01      	subs	r3, #1
 800482c:	66bb      	str	r3, [r7, #104]	; 0x68
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29a      	uxth	r2, r3
 8004834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004836:	b29b      	uxth	r3, r3
 8004838:	029b      	lsls	r3, r3, #10
 800483a:	b29b      	uxth	r3, r3
 800483c:	4313      	orrs	r3, r2
 800483e:	b29b      	uxth	r3, r3
 8004840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004848:	b29a      	uxth	r2, r3
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	e026      	b.n	800489e <USB_ActivateEndpoint+0x2fe>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <USB_ActivateEndpoint+0x2ce>
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004866:	b29a      	uxth	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	e017      	b.n	800489e <USB_ActivateEndpoint+0x2fe>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	66bb      	str	r3, [r7, #104]	; 0x68
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <USB_ActivateEndpoint+0x2e8>
 8004882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004884:	3301      	adds	r3, #1
 8004886:	66bb      	str	r3, [r7, #104]	; 0x68
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004890:	b29b      	uxth	r3, r3
 8004892:	029b      	lsls	r3, r3, #10
 8004894:	b29b      	uxth	r3, r3
 8004896:	4313      	orrs	r3, r2
 8004898:	b29a      	uxth	r2, r3
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80048ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <USB_ActivateEndpoint+0x34e>
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	843b      	strh	r3, [r7, #32]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8c3b      	ldrh	r3, [r7, #32]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d124      	bne.n	8004940 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	83bb      	strh	r3, [r7, #28]
 800490e:	8bbb      	ldrh	r3, [r7, #28]
 8004910:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004914:	83bb      	strh	r3, [r7, #28]
 8004916:	8bbb      	ldrh	r3, [r7, #28]
 8004918:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800491c:	83bb      	strh	r3, [r7, #28]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	441a      	add	r2, r3
 8004928:	8bbb      	ldrh	r3, [r7, #28]
 800492a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493a:	b29b      	uxth	r3, r3
 800493c:	8013      	strh	r3, [r2, #0]
 800493e:	e1ea      	b.n	8004d16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	83fb      	strh	r3, [r7, #30]
 8004958:	8bfb      	ldrh	r3, [r7, #30]
 800495a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800495e:	83fb      	strh	r3, [r7, #30]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	8bfb      	ldrh	r3, [r7, #30]
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
 8004980:	e1c9      	b.n	8004d16 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	78db      	ldrb	r3, [r3, #3]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d11e      	bne.n	80049c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80049b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8013      	strh	r3, [r2, #0]
 80049c6:	e01d      	b.n	8004a04 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a14:	4413      	add	r3, r2
 8004a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	00da      	lsls	r2, r3, #3
 8004a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	891b      	ldrh	r3, [r3, #8]
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a48:	4413      	add	r3, r2
 8004a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	00da      	lsls	r2, r3, #3
 8004a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	895b      	ldrh	r3, [r3, #10]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 8093 	bne.w	8004b9c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01b      	beq.n	8004aca <USB_ActivateEndpoint+0x52a>
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ad8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01b      	beq.n	8004b1a <USB_ActivateEndpoint+0x57a>
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b30:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b38:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b40:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
 8004b9a:	e0bc      	b.n	8004d16 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004bac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01d      	beq.n	8004bf4 <USB_ActivateEndpoint+0x654>
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01d      	beq.n	8004c4c <USB_ActivateEndpoint+0x6ac>
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	78db      	ldrb	r3, [r3, #3]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d024      	beq.n	8004c9e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c72:	f083 0320 	eor.w	r3, r3, #32
 8004c76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	441a      	add	r2, r3
 8004c84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]
 8004c9c:	e01d      	b.n	8004cda <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3774      	adds	r7, #116	; 0x74
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop

08004d28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b08d      	sub	sp, #52	; 0x34
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	7b1b      	ldrb	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 808e 	bne.w	8004e58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d044      	beq.n	8004dce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	81bb      	strh	r3, [r7, #12]
 8004d52:	89bb      	ldrh	r3, [r7, #12]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01b      	beq.n	8004d94 <USB_DeactivateEndpoint+0x6c>
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	817b      	strh	r3, [r7, #10]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	897b      	ldrh	r3, [r7, #10]
 8004d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004daa:	813b      	strh	r3, [r7, #8]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	893b      	ldrh	r3, [r7, #8]
 8004db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]
 8004dcc:	e192      	b.n	80050f4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	827b      	strh	r3, [r7, #18]
 8004ddc:	8a7b      	ldrh	r3, [r7, #18]
 8004dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01b      	beq.n	8004e1e <USB_DeactivateEndpoint+0xf6>
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	823b      	strh	r3, [r7, #16]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	441a      	add	r2, r3
 8004e08:	8a3b      	ldrh	r3, [r7, #16]
 8004e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e34:	81fb      	strh	r3, [r7, #14]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	89fb      	ldrh	r3, [r7, #14]
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]
 8004e56:	e14d      	b.n	80050f4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 80a5 	bne.w	8004fac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	843b      	strh	r3, [r7, #32]
 8004e70:	8c3b      	ldrh	r3, [r7, #32]
 8004e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01b      	beq.n	8004eb2 <USB_DeactivateEndpoint+0x18a>
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	83fb      	strh	r3, [r7, #30]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	8bfb      	ldrh	r3, [r7, #30]
 8004e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	83bb      	strh	r3, [r7, #28]
 8004ec0:	8bbb      	ldrh	r3, [r7, #28]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01b      	beq.n	8004f02 <USB_DeactivateEndpoint+0x1da>
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee0:	837b      	strh	r3, [r7, #26]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8b7b      	ldrh	r3, [r7, #26]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	833b      	strh	r3, [r7, #24]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	8b3b      	ldrh	r3, [r7, #24]
 8004f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	82fb      	strh	r3, [r7, #22]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	8afb      	ldrh	r3, [r7, #22]
 8004f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f88:	82bb      	strh	r3, [r7, #20]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	8abb      	ldrh	r3, [r7, #20]
 8004f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8013      	strh	r3, [r2, #0]
 8004faa:	e0a3      	b.n	80050f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <USB_DeactivateEndpoint+0x2d4>
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	857b      	strh	r3, [r7, #42]	; 0x2a
 800500a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <USB_DeactivateEndpoint+0x324>
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	853b      	strh	r3, [r7, #40]	; 0x28
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005048:	b29b      	uxth	r3, r3
 800504a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005080:	b29b      	uxth	r3, r3
 8005082:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3734      	adds	r7, #52	; 0x34
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b0c2      	sub	sp, #264	; 0x108
 8005106:	af00      	add	r7, sp, #0
 8005108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005110:	6018      	str	r0, [r3, #0]
 8005112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800511c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b01      	cmp	r3, #1
 800512a:	f040 86b7 	bne.w	8005e9c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800512e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d908      	bls.n	800515c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800514a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800515a:	e007      	b.n	800516c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	7b1b      	ldrb	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d13a      	bne.n	80051f2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800517c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6959      	ldr	r1, [r3, #20]
 8005188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	88da      	ldrh	r2, [r3, #6]
 8005194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005198:	b29b      	uxth	r3, r3
 800519a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800519e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	f001 fc98 	bl	8006ad8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	00da      	lsls	r2, r3, #3
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	f000 be1f 	b.w	8005e30 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	78db      	ldrb	r3, [r3, #3]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	f040 8462 	bne.w	8005ac8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	f240 83df 	bls.w	80059e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800524c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800526a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005272:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800527e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800529c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 81c7 	beq.w	8005652 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d177      	bne.n	80053d0 <USB_EPStartXfer+0x2ce>
 80052e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	4413      	add	r3, r2
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
 8005304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	00da      	lsls	r2, r3, #3
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	4413      	add	r3, r2
 8005316:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005326:	b29a      	uxth	r2, r3
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005330:	2b3e      	cmp	r3, #62	; 0x3e
 8005332:	d921      	bls.n	8005378 <USB_EPStartXfer+0x276>
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <USB_EPStartXfer+0x252>
 800534a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800534e:	3b01      	subs	r3, #1
 8005350:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29a      	uxth	r2, r3
 800535a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800535e:	b29b      	uxth	r3, r3
 8005360:	029b      	lsls	r3, r3, #10
 8005362:	b29b      	uxth	r3, r3
 8005364:	4313      	orrs	r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005370:	b29a      	uxth	r2, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	e050      	b.n	800541a <USB_EPStartXfer+0x318>
 8005378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <USB_EPStartXfer+0x294>
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538e:	b29a      	uxth	r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e041      	b.n	800541a <USB_EPStartXfer+0x318>
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <USB_EPStartXfer+0x2b4>
 80053ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053b0:	3301      	adds	r3, #1
 80053b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e024      	b.n	800541a <USB_EPStartXfer+0x318>
 80053d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d11c      	bne.n	800541a <USB_EPStartXfer+0x318>
 80053e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	4413      	add	r3, r2
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	00da      	lsls	r2, r3, #3
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	4413      	add	r3, r2
 800540a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005414:	b29a      	uxth	r2, r3
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800541a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	895b      	ldrh	r3, [r3, #10]
 8005426:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800542a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6959      	ldr	r1, [r3, #20]
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	b29b      	uxth	r3, r3
 800543c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005440:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005444:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005448:	6800      	ldr	r0, [r0, #0]
 800544a:	f001 fb45 	bl	8006ad8 <USB_WritePMA>
            ep->xfer_buff += len;
 800544e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545e:	441a      	add	r2, r3
 8005460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800546c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d90f      	bls.n	80054a8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	1ad2      	subs	r2, r2, r3
 800549a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	621a      	str	r2, [r3, #32]
 80054a6:	e00e      	b.n	80054c6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80054a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2200      	movs	r2, #0
 80054c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d177      	bne.n	80055c6 <USB_EPStartXfer+0x4c4>
 80054d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	4413      	add	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4413      	add	r3, r2
 800550c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551c:	b29a      	uxth	r2, r3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005526:	2b3e      	cmp	r3, #62	; 0x3e
 8005528:	d921      	bls.n	800556e <USB_EPStartXfer+0x46c>
 800552a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <USB_EPStartXfer+0x448>
 8005540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005544:	3b01      	subs	r3, #1
 8005546:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29a      	uxth	r2, r3
 8005550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005554:	b29b      	uxth	r3, r3
 8005556:	029b      	lsls	r3, r3, #10
 8005558:	b29b      	uxth	r3, r3
 800555a:	4313      	orrs	r3, r2
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29a      	uxth	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e056      	b.n	800561c <USB_EPStartXfer+0x51a>
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <USB_EPStartXfer+0x48a>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005584:	b29a      	uxth	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e047      	b.n	800561c <USB_EPStartXfer+0x51a>
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <USB_EPStartXfer+0x4aa>
 80055a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a6:	3301      	adds	r3, #1
 80055a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4313      	orrs	r3, r2
 80055be:	b29a      	uxth	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e02a      	b.n	800561c <USB_EPStartXfer+0x51a>
 80055c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d122      	bne.n	800561c <USB_EPStartXfer+0x51a>
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	4413      	add	r3, r2
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	00da      	lsls	r2, r3, #3
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	4413      	add	r3, r2
 800560c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005616:	b29a      	uxth	r2, r3
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800561c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	891b      	ldrh	r3, [r3, #8]
 8005628:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800562c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6959      	ldr	r1, [r3, #20]
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563c:	b29b      	uxth	r3, r3
 800563e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005642:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005646:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	f001 fa44 	bl	8006ad8 <USB_WritePMA>
 8005650:	e3ee      	b.n	8005e30 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d177      	bne.n	8005752 <USB_EPStartXfer+0x650>
 8005662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	64bb      	str	r3, [r7, #72]	; 0x48
 800566e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800567c:	b29b      	uxth	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005682:	4413      	add	r3, r2
 8005684:	64bb      	str	r3, [r7, #72]	; 0x48
 8005686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	00da      	lsls	r2, r3, #3
 8005694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005696:	4413      	add	r3, r2
 8005698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800569c:	647b      	str	r3, [r7, #68]	; 0x44
 800569e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b2:	2b3e      	cmp	r3, #62	; 0x3e
 80056b4:	d921      	bls.n	80056fa <USB_EPStartXfer+0x5f8>
 80056b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <USB_EPStartXfer+0x5d4>
 80056cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056d0:	3b01      	subs	r3, #1
 80056d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	029b      	lsls	r3, r3, #10
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4313      	orrs	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	e056      	b.n	80057a8 <USB_EPStartXfer+0x6a6>
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <USB_EPStartXfer+0x616>
 8005702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005710:	b29a      	uxth	r2, r3
 8005712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	e047      	b.n	80057a8 <USB_EPStartXfer+0x6a6>
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <USB_EPStartXfer+0x636>
 800572e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005732:	3301      	adds	r3, #1
 8005734:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29a      	uxth	r2, r3
 800573e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005742:	b29b      	uxth	r3, r3
 8005744:	029b      	lsls	r3, r3, #10
 8005746:	b29b      	uxth	r3, r3
 8005748:	4313      	orrs	r3, r2
 800574a:	b29a      	uxth	r2, r3
 800574c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e02a      	b.n	80057a8 <USB_EPStartXfer+0x6a6>
 8005752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d122      	bne.n	80057a8 <USB_EPStartXfer+0x6a6>
 8005762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	653b      	str	r3, [r7, #80]	; 0x50
 800576e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577c:	b29b      	uxth	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005782:	4413      	add	r3, r2
 8005784:	653b      	str	r3, [r7, #80]	; 0x50
 8005786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	00da      	lsls	r2, r3, #3
 8005794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005796:	4413      	add	r3, r2
 8005798:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800579c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	891b      	ldrh	r3, [r3, #8]
 80057b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6959      	ldr	r1, [r3, #20]
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057d6:	6800      	ldr	r0, [r0, #0]
 80057d8:	f001 f97e 	bl	8006ad8 <USB_WritePMA>
            ep->xfer_buff += len;
 80057dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ec:	441a      	add	r2, r3
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d90f      	bls.n	8005836 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	621a      	str	r2, [r3, #32]
 8005834:	e00e      	b.n	8005854 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005858:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	643b      	str	r3, [r7, #64]	; 0x40
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d177      	bne.n	8005960 <USB_EPStartXfer+0x85e>
 8005870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
 800587c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588a:	b29b      	uxth	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	4413      	add	r3, r2
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	00da      	lsls	r2, r3, #3
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	4413      	add	r3, r2
 80058a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058aa:	637b      	str	r3, [r7, #52]	; 0x34
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c0:	2b3e      	cmp	r3, #62	; 0x3e
 80058c2:	d921      	bls.n	8005908 <USB_EPStartXfer+0x806>
 80058c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <USB_EPStartXfer+0x7e2>
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	3b01      	subs	r3, #1
 80058e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4313      	orrs	r3, r2
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005900:	b29a      	uxth	r2, r3
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	e050      	b.n	80059aa <USB_EPStartXfer+0x8a8>
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <USB_EPStartXfer+0x824>
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29a      	uxth	r2, r3
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e041      	b.n	80059aa <USB_EPStartXfer+0x8a8>
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <USB_EPStartXfer+0x844>
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	3301      	adds	r3, #1
 8005942:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29a      	uxth	r2, r3
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	b29b      	uxth	r3, r3
 8005952:	029b      	lsls	r3, r3, #10
 8005954:	b29b      	uxth	r3, r3
 8005956:	4313      	orrs	r3, r2
 8005958:	b29a      	uxth	r2, r3
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e024      	b.n	80059aa <USB_EPStartXfer+0x8a8>
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d11c      	bne.n	80059aa <USB_EPStartXfer+0x8a8>
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597e:	b29b      	uxth	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005984:	4413      	add	r3, r2
 8005986:	643b      	str	r3, [r7, #64]	; 0x40
 8005988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	00da      	lsls	r2, r3, #3
 8005996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005998:	4413      	add	r3, r2
 800599a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	895b      	ldrh	r3, [r3, #10]
 80059b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6959      	ldr	r1, [r3, #20]
 80059c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059d8:	6800      	ldr	r0, [r0, #0]
 80059da:	f001 f87d 	bl	8006ad8 <USB_WritePMA>
 80059de:	e227      	b.n	8005e30 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6c:	4413      	add	r3, r2
 8005a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	00da      	lsls	r2, r3, #3
 8005a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a80:	4413      	add	r3, r2
 8005a82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a86:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	891b      	ldrh	r3, [r3, #8]
 8005a9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6959      	ldr	r1, [r3, #20]
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ab8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005abc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ac0:	6800      	ldr	r0, [r0, #0]
 8005ac2:	f001 f809 	bl	8006ad8 <USB_WritePMA>
 8005ac6:	e1b3      	b.n	8005e30 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80c6 	beq.w	8005c9a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	673b      	str	r3, [r7, #112]	; 0x70
 8005b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d177      	bne.n	8005c1a <USB_EPStartXfer+0xb18>
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b4a:	4413      	add	r3, r2
 8005b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00da      	lsls	r2, r3, #3
 8005b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b64:	667b      	str	r3, [r7, #100]	; 0x64
 8005b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b7c:	d921      	bls.n	8005bc2 <USB_EPStartXfer+0xac0>
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <USB_EPStartXfer+0xa9c>
 8005b94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e050      	b.n	8005c64 <USB_EPStartXfer+0xb62>
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <USB_EPStartXfer+0xade>
 8005bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	e041      	b.n	8005c64 <USB_EPStartXfer+0xb62>
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <USB_EPStartXfer+0xafe>
 8005bf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4313      	orrs	r3, r2
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e024      	b.n	8005c64 <USB_EPStartXfer+0xb62>
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d11c      	bne.n	8005c64 <USB_EPStartXfer+0xb62>
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3e:	4413      	add	r3, r2
 8005c40:	673b      	str	r3, [r7, #112]	; 0x70
 8005c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	00da      	lsls	r2, r3, #3
 8005c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c52:	4413      	add	r3, r2
 8005c54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	895b      	ldrh	r3, [r3, #10]
 8005c70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6959      	ldr	r1, [r3, #20]
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c92:	6800      	ldr	r0, [r0, #0]
 8005c94:	f000 ff20 	bl	8006ad8 <USB_WritePMA>
 8005c98:	e0ca      	b.n	8005e30 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d177      	bne.n	8005d9a <USB_EPStartXfer+0xc98>
 8005caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cca:	4413      	add	r3, r2
 8005ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	00da      	lsls	r2, r3, #3
 8005cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cde:	4413      	add	r3, r2
 8005ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005cfc:	d921      	bls.n	8005d42 <USB_EPStartXfer+0xc40>
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <USB_EPStartXfer+0xc1c>
 8005d14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	e05c      	b.n	8005dfc <USB_EPStartXfer+0xcfa>
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <USB_EPStartXfer+0xc5e>
 8005d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e04d      	b.n	8005dfc <USB_EPStartXfer+0xcfa>
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <USB_EPStartXfer+0xc7e>
 8005d76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	4313      	orrs	r3, r2
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e030      	b.n	8005dfc <USB_EPStartXfer+0xcfa>
 8005d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d128      	bne.n	8005dfc <USB_EPStartXfer+0xcfa>
 8005daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dce:	4413      	add	r3, r2
 8005dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	00da      	lsls	r2, r3, #3
 8005de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	891b      	ldrh	r3, [r3, #8]
 8005e08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	f000 fe54 	bl	8006ad8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e56:	817b      	strh	r3, [r7, #10]
 8005e58:	897b      	ldrh	r3, [r7, #10]
 8005e5a:	f083 0310 	eor.w	r3, r3, #16
 8005e5e:	817b      	strh	r3, [r7, #10]
 8005e60:	897b      	ldrh	r3, [r7, #10]
 8005e62:	f083 0320 	eor.w	r3, r3, #32
 8005e66:	817b      	strh	r3, [r7, #10]
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	441a      	add	r2, r3
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	8013      	strh	r3, [r2, #0]
 8005e98:	f000 bcde 	b.w	8006858 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	7b1b      	ldrb	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f040 80bb 	bne.w	8006024 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d917      	bls.n	8005efa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eea:	1ad2      	subs	r2, r2, r3
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	619a      	str	r2, [r3, #24]
 8005ef8:	e00e      	b.n	8005f18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2200      	movs	r2, #0
 8005f16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	00da      	lsls	r2, r3, #3
 8005f50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f76:	2b3e      	cmp	r3, #62	; 0x3e
 8005f78:	d924      	bls.n	8005fc4 <USB_EPStartXfer+0xec2>
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_EPStartXfer+0xe98>
 8005f90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f94:	3b01      	subs	r3, #1
 8005f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	029b      	lsls	r3, r3, #10
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	f000 bc10 	b.w	80067e4 <USB_EPStartXfer+0x16e2>
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10c      	bne.n	8005fe6 <USB_EPStartXfer+0xee4>
 8005fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e3fe      	b.n	80067e4 <USB_EPStartXfer+0x16e2>
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <USB_EPStartXfer+0xf04>
 8005ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006000:	3301      	adds	r3, #1
 8006002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29a      	uxth	r2, r3
 800600e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006012:	b29b      	uxth	r3, r3
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	b29b      	uxth	r3, r3
 8006018:	4313      	orrs	r3, r2
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	e3df      	b.n	80067e4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	78db      	ldrb	r3, [r3, #3]
 8006030:	2b02      	cmp	r3, #2
 8006032:	f040 8218 	bne.w	8006466 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 809d 	bne.w	8006182 <USB_EPStartXfer+0x1080>
 8006048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800606c:	4413      	add	r3, r2
 800606e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	00da      	lsls	r2, r3, #3
 8006080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006084:	4413      	add	r3, r2
 8006086:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800608a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800608e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b3e      	cmp	r3, #62	; 0x3e
 80060b0:	d92b      	bls.n	800610a <USB_EPStartXfer+0x1008>
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <USB_EPStartXfer+0xfe0>
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060dc:	3b01      	subs	r3, #1
 80060de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	029b      	lsls	r3, r3, #10
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4313      	orrs	r3, r2
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006100:	b29a      	uxth	r2, r3
 8006102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e070      	b.n	80061ec <USB_EPStartXfer+0x10ea>
 800610a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10c      	bne.n	8006134 <USB_EPStartXfer+0x1032>
 800611a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612a:	b29a      	uxth	r2, r3
 800612c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	e05b      	b.n	80061ec <USB_EPStartXfer+0x10ea>
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <USB_EPStartXfer+0x1062>
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	3301      	adds	r3, #1
 8006160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29a      	uxth	r2, r3
 800616c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006170:	b29b      	uxth	r3, r3
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	b29b      	uxth	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e034      	b.n	80061ec <USB_EPStartXfer+0x10ea>
 8006182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	785b      	ldrb	r3, [r3, #1]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d12c      	bne.n	80061ec <USB_EPStartXfer+0x10ea>
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061b6:	4413      	add	r3, r2
 80061b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	00da      	lsls	r2, r3, #3
 80061ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 809d 	bne.w	8006346 <USB_EPStartXfer+0x1244>
 800620c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800621a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006230:	4413      	add	r3, r2
 8006232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	00da      	lsls	r2, r3, #3
 8006244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006248:	4413      	add	r3, r2
 800624a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800624e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800625e:	b29a      	uxth	r2, r3
 8006260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b3e      	cmp	r3, #62	; 0x3e
 8006274:	d92b      	bls.n	80062ce <USB_EPStartXfer+0x11cc>
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <USB_EPStartXfer+0x11a4>
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a0:	3b01      	subs	r3, #1
 80062a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	029b      	lsls	r3, r3, #10
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e069      	b.n	80063a2 <USB_EPStartXfer+0x12a0>
 80062ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10c      	bne.n	80062f8 <USB_EPStartXfer+0x11f6>
 80062de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e054      	b.n	80063a2 <USB_EPStartXfer+0x12a0>
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <USB_EPStartXfer+0x1226>
 800631e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006322:	3301      	adds	r3, #1
 8006324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29a      	uxth	r2, r3
 8006330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006334:	b29b      	uxth	r3, r3
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	b29b      	uxth	r3, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e02d      	b.n	80063a2 <USB_EPStartXfer+0x12a0>
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d125      	bne.n	80063a2 <USB_EPStartXfer+0x12a0>
 8006356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800636c:	4413      	add	r3, r2
 800636e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	00da      	lsls	r2, r3, #3
 8006380:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006384:	4413      	add	r3, r2
 8006386:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800638a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800638e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8218 	beq.w	80067e4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <USB_EPStartXfer+0x12ea>
 80063e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10d      	bne.n	8006408 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 81f5 	bne.w	80067e4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 81ee 	bne.w	80067e4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	441a      	add	r2, r3
 800644c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]
 8006464:	e1be      	b.n	80067e4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	78db      	ldrb	r3, [r3, #3]
 8006472:	2b01      	cmp	r3, #1
 8006474:	f040 81b4 	bne.w	80067e0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	429a      	cmp	r2, r3
 8006492:	d917      	bls.n	80064c4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b4:	1ad2      	subs	r2, r2, r3
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	619a      	str	r2, [r3, #24]
 80064c2:	e00e      	b.n	80064e2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 8085 	bne.w	80065fe <USB_EPStartXfer+0x14fc>
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006510:	b29b      	uxth	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006518:	4413      	add	r3, r2
 800651a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	00da      	lsls	r2, r3, #3
 800652c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006530:	4413      	add	r3, r2
 8006532:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006552:	2b3e      	cmp	r3, #62	; 0x3e
 8006554:	d923      	bls.n	800659e <USB_EPStartXfer+0x149c>
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <USB_EPStartXfer+0x1474>
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006570:	3b01      	subs	r3, #1
 8006572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	e060      	b.n	8006660 <USB_EPStartXfer+0x155e>
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10c      	bne.n	80065c0 <USB_EPStartXfer+0x14be>
 80065a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e04f      	b.n	8006660 <USB_EPStartXfer+0x155e>
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <USB_EPStartXfer+0x14de>
 80065d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065da:	3301      	adds	r3, #1
 80065dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	029b      	lsls	r3, r3, #10
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e030      	b.n	8006660 <USB_EPStartXfer+0x155e>
 80065fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d128      	bne.n	8006660 <USB_EPStartXfer+0x155e>
 800660e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006632:	4413      	add	r3, r2
 8006634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	00da      	lsls	r2, r3, #3
 8006646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664a:	4413      	add	r3, r2
 800664c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 8085 	bne.w	800678a <USB_EPStartXfer+0x1688>
 8006680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800668e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669c:	b29b      	uxth	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066a4:	4413      	add	r3, r2
 80066a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	00da      	lsls	r2, r3, #3
 80066b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066bc:	4413      	add	r3, r2
 80066be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	2b3e      	cmp	r3, #62	; 0x3e
 80066e0:	d923      	bls.n	800672a <USB_EPStartXfer+0x1628>
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <USB_EPStartXfer+0x1600>
 80066f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066fc:	3b01      	subs	r3, #1
 80066fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29a      	uxth	r2, r3
 800670a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800670e:	b29b      	uxth	r3, r3
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	b29b      	uxth	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e05c      	b.n	80067e4 <USB_EPStartXfer+0x16e2>
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10c      	bne.n	800674c <USB_EPStartXfer+0x164a>
 8006732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006742:	b29a      	uxth	r2, r3
 8006744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	e04b      	b.n	80067e4 <USB_EPStartXfer+0x16e2>
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	085b      	lsrs	r3, r3, #1
 8006752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <USB_EPStartXfer+0x166a>
 8006762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006766:	3301      	adds	r3, #1
 8006768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800676c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006778:	b29b      	uxth	r3, r3
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	b29b      	uxth	r3, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	b29a      	uxth	r2, r3
 8006782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	e02c      	b.n	80067e4 <USB_EPStartXfer+0x16e2>
 800678a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d124      	bne.n	80067e4 <USB_EPStartXfer+0x16e2>
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b0:	4413      	add	r3, r2
 80067b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00da      	lsls	r2, r3, #3
 80067c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067c8:	4413      	add	r3, r2
 80067ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	e001      	b.n	80067e4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e03a      	b.n	800685a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800680e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006812:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006816:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800681a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800681e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006822:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	441a      	add	r2, r3
 8006840:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800684c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	b29b      	uxth	r3, r3
 8006856:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d020      	beq.n	80068b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688c:	81bb      	strh	r3, [r7, #12]
 800688e:	89bb      	ldrh	r3, [r7, #12]
 8006890:	f083 0310 	eor.w	r3, r3, #16
 8006894:	81bb      	strh	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	89bb      	ldrh	r3, [r7, #12]
 80068a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	8013      	strh	r3, [r2, #0]
 80068b6:	e01f      	b.n	80068f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	81fb      	strh	r3, [r7, #14]
 80068d0:	89fb      	ldrh	r3, [r7, #14]
 80068d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068d6:	81fb      	strh	r3, [r7, #14]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006906:	b480      	push	{r7}
 8006908:	b087      	sub	sp, #28
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	7b1b      	ldrb	r3, [r3, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 809d 	bne.w	8006a54 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d04c      	beq.n	80069bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	823b      	strh	r3, [r7, #16]
 8006930:	8a3b      	ldrh	r3, [r7, #16]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01b      	beq.n	8006972 <USB_EPClearStall+0x6c>
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006950:	81fb      	strh	r3, [r7, #14]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	441a      	add	r2, r3
 800695c:	89fb      	ldrh	r3, [r7, #14]
 800695e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	78db      	ldrb	r3, [r3, #3]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d06c      	beq.n	8006a54 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006990:	81bb      	strh	r3, [r7, #12]
 8006992:	89bb      	ldrh	r3, [r7, #12]
 8006994:	f083 0320 	eor.w	r3, r3, #32
 8006998:	81bb      	strh	r3, [r7, #12]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	89bb      	ldrh	r3, [r7, #12]
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
 80069ba:	e04b      	b.n	8006a54 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	82fb      	strh	r3, [r7, #22]
 80069ca:	8afb      	ldrh	r3, [r7, #22]
 80069cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01b      	beq.n	8006a0c <USB_EPClearStall+0x106>
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	82bb      	strh	r3, [r7, #20]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8abb      	ldrh	r3, [r7, #20]
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	827b      	strh	r3, [r7, #18]
 8006a24:	8a7b      	ldrh	r3, [r7, #18]
 8006a26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a2a:	827b      	strh	r3, [r7, #18]
 8006a2c:	8a7b      	ldrh	r3, [r7, #18]
 8006a2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a32:	827b      	strh	r3, [r7, #18]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	441a      	add	r2, r3
 8006a3e:	8a7b      	ldrh	r3, [r7, #18]
 8006a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2280      	movs	r2, #128	; 0x80
 8006a78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006aca:	68fb      	ldr	r3, [r7, #12]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b08b      	sub	sp, #44	; 0x2c
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	80fb      	strh	r3, [r7, #6]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006aee:	88bb      	ldrh	r3, [r7, #4]
 8006af0:	3301      	adds	r3, #1
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0e:	e01b      	b.n	8006b48 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	b21a      	sxth	r2, r3
 8006b20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	b21b      	sxth	r3, r3
 8006b28:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	8a7a      	ldrh	r2, [r7, #18]
 8006b2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	3302      	adds	r3, #2
 8006b34:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	3b01      	subs	r3, #1
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e0      	bne.n	8006b10 <USB_WritePMA+0x38>
  }
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	372c      	adds	r7, #44	; 0x2c
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b08b      	sub	sp, #44	; 0x2c
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4611      	mov	r1, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	80fb      	strh	r3, [r7, #6]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b72:	88bb      	ldrh	r3, [r7, #4]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
 8006b92:	e018      	b.n	8006bc6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3301      	adds	r3, #1
 8006bae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e3      	bne.n	8006b94 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bcc:	88bb      	ldrh	r3, [r7, #4]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	701a      	strb	r2, [r3, #0]
  }
}
 8006be8:	bf00      	nop
 8006bea:	372c      	adds	r7, #44	; 0x2c
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c04:	f002 fc6e 	bl	80094e4 <USBD_static_malloc>
 8006c08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32b0      	adds	r2, #176	; 0xb0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c20:	2302      	movs	r3, #2
 8006c22:	e0d4      	b.n	8006dce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c24:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c28:	2100      	movs	r1, #0
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f002 fcce 	bl	80095cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32b0      	adds	r2, #176	; 0xb0
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	32b0      	adds	r2, #176	; 0xb0
 8006c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7c1b      	ldrb	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d138      	bne.n	8006cce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c5c:	4b5e      	ldr	r3, [pc, #376]	; (8006dd8 <USBD_CDC_Init+0x1e4>)
 8006c5e:	7819      	ldrb	r1, [r3, #0]
 8006c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c64:	2202      	movs	r2, #2
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f002 fae1 	bl	800922e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c6c:	4b5a      	ldr	r3, [pc, #360]	; (8006dd8 <USBD_CDC_Init+0x1e4>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	3324      	adds	r3, #36	; 0x24
 8006c82:	2201      	movs	r2, #1
 8006c84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c86:	4b55      	ldr	r3, [pc, #340]	; (8006ddc <USBD_CDC_Init+0x1e8>)
 8006c88:	7819      	ldrb	r1, [r3, #0]
 8006c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c8e:	2202      	movs	r2, #2
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f002 facc 	bl	800922e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c96:	4b51      	ldr	r3, [pc, #324]	; (8006ddc <USBD_CDC_Init+0x1e8>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 020f 	and.w	r2, r3, #15
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cae:	2201      	movs	r2, #1
 8006cb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006cb2:	4b4b      	ldr	r3, [pc, #300]	; (8006de0 <USBD_CDC_Init+0x1ec>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 020f 	and.w	r2, r3, #15
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3326      	adds	r3, #38	; 0x26
 8006cc8:	2210      	movs	r2, #16
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	e035      	b.n	8006d3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cce:	4b42      	ldr	r3, [pc, #264]	; (8006dd8 <USBD_CDC_Init+0x1e4>)
 8006cd0:	7819      	ldrb	r1, [r3, #0]
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f002 faa9 	bl	800922e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cdc:	4b3e      	ldr	r3, [pc, #248]	; (8006dd8 <USBD_CDC_Init+0x1e4>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 020f 	and.w	r2, r3, #15
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cf6:	4b39      	ldr	r3, [pc, #228]	; (8006ddc <USBD_CDC_Init+0x1e8>)
 8006cf8:	7819      	ldrb	r1, [r3, #0]
 8006cfa:	2340      	movs	r3, #64	; 0x40
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f002 fa95 	bl	800922e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d04:	4b35      	ldr	r3, [pc, #212]	; (8006ddc <USBD_CDC_Init+0x1e8>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d20:	4b2f      	ldr	r3, [pc, #188]	; (8006de0 <USBD_CDC_Init+0x1ec>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 020f 	and.w	r2, r3, #15
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	3326      	adds	r3, #38	; 0x26
 8006d36:	2210      	movs	r2, #16
 8006d38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d3a:	4b29      	ldr	r3, [pc, #164]	; (8006de0 <USBD_CDC_Init+0x1ec>)
 8006d3c:	7819      	ldrb	r1, [r3, #0]
 8006d3e:	2308      	movs	r3, #8
 8006d40:	2203      	movs	r2, #3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f002 fa73 	bl	800922e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <USBD_CDC_Init+0x1ec>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f003 020f 	and.w	r2, r3, #15
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3324      	adds	r3, #36	; 0x24
 8006d5e:	2201      	movs	r2, #1
 8006d60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	33b0      	adds	r3, #176	; 0xb0
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e018      	b.n	8006dce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7c1b      	ldrb	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006da4:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <USBD_CDC_Init+0x1e8>)
 8006da6:	7819      	ldrb	r1, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f002 fb2b 	bl	800940e <USBD_LL_PrepareReceive>
 8006db8:	e008      	b.n	8006dcc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <USBD_CDC_Init+0x1e8>)
 8006dbc:	7819      	ldrb	r1, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc4:	2340      	movs	r3, #64	; 0x40
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f002 fb21 	bl	800940e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200000db 	.word	0x200000db
 8006ddc:	200000dc 	.word	0x200000dc
 8006de0:	200000dd 	.word	0x200000dd

08006de4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006df0:	4b3a      	ldr	r3, [pc, #232]	; (8006edc <USBD_CDC_DeInit+0xf8>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f002 fa3f 	bl	800927a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006dfc:	4b37      	ldr	r3, [pc, #220]	; (8006edc <USBD_CDC_DeInit+0xf8>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3324      	adds	r3, #36	; 0x24
 8006e12:	2200      	movs	r2, #0
 8006e14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e16:	4b32      	ldr	r3, [pc, #200]	; (8006ee0 <USBD_CDC_DeInit+0xfc>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f002 fa2c 	bl	800927a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e22:	4b2f      	ldr	r3, [pc, #188]	; (8006ee0 <USBD_CDC_DeInit+0xfc>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e3e:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <USBD_CDC_DeInit+0x100>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f002 fa18 	bl	800927a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e4a:	4b26      	ldr	r3, [pc, #152]	; (8006ee4 <USBD_CDC_DeInit+0x100>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f003 020f 	and.w	r2, r3, #15
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	3324      	adds	r3, #36	; 0x24
 8006e60:	2200      	movs	r2, #0
 8006e62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e64:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <USBD_CDC_DeInit+0x100>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	f003 020f 	and.w	r2, r3, #15
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	3326      	adds	r3, #38	; 0x26
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	32b0      	adds	r2, #176	; 0xb0
 8006e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01f      	beq.n	8006ed0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	33b0      	adds	r3, #176	; 0xb0
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32b0      	adds	r2, #176	; 0xb0
 8006eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f002 fb24 	bl	8009500 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	32b0      	adds	r2, #176	; 0xb0
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	200000db 	.word	0x200000db
 8006ee0:	200000dc 	.word	0x200000dc
 8006ee4:	200000dd 	.word	0x200000dd

08006ee8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	32b0      	adds	r2, #176	; 0xb0
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e0bf      	b.n	8007098 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d050      	beq.n	8006fc6 <USBD_CDC_Setup+0xde>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	f040 80af 	bne.w	8007088 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	88db      	ldrh	r3, [r3, #6]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d03a      	beq.n	8006fa8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	b25b      	sxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	da1b      	bge.n	8006f74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	33b0      	adds	r3, #176	; 0xb0
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	88d2      	ldrh	r2, [r2, #6]
 8006f58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	88db      	ldrh	r3, [r3, #6]
 8006f5e:	2b07      	cmp	r3, #7
 8006f60:	bf28      	it	cs
 8006f62:	2307      	movcs	r3, #7
 8006f64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	89fa      	ldrh	r2, [r7, #14]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 fd21 	bl	80089b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f72:	e090      	b.n	8007096 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	785a      	ldrb	r2, [r3, #1]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	88db      	ldrh	r3, [r3, #6]
 8006f82:	2b3f      	cmp	r3, #63	; 0x3f
 8006f84:	d803      	bhi.n	8006f8e <USBD_CDC_Setup+0xa6>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	88db      	ldrh	r3, [r3, #6]
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	e000      	b.n	8006f90 <USBD_CDC_Setup+0xa8>
 8006f8e:	2240      	movs	r2, #64	; 0x40
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f96:	6939      	ldr	r1, [r7, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 fd33 	bl	8008a0c <USBD_CtlPrepareRx>
      break;
 8006fa6:	e076      	b.n	8007096 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	33b0      	adds	r3, #176	; 0xb0
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	7850      	ldrb	r0, [r2, #1]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	4798      	blx	r3
      break;
 8006fc4:	e067      	b.n	8007096 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	2b0b      	cmp	r3, #11
 8006fcc:	d851      	bhi.n	8007072 <USBD_CDC_Setup+0x18a>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USBD_CDC_Setup+0xec>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08007005 	.word	0x08007005
 8006fd8:	08007081 	.word	0x08007081
 8006fdc:	08007073 	.word	0x08007073
 8006fe0:	08007073 	.word	0x08007073
 8006fe4:	08007073 	.word	0x08007073
 8006fe8:	08007073 	.word	0x08007073
 8006fec:	08007073 	.word	0x08007073
 8006ff0:	08007073 	.word	0x08007073
 8006ff4:	08007073 	.word	0x08007073
 8006ff8:	08007073 	.word	0x08007073
 8006ffc:	0800702f 	.word	0x0800702f
 8007000:	08007059 	.word	0x08007059
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b03      	cmp	r3, #3
 800700e:	d107      	bne.n	8007020 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007010:	f107 030a 	add.w	r3, r7, #10
 8007014:	2202      	movs	r2, #2
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fccb 	bl	80089b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800701e:	e032      	b.n	8007086 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fc55 	bl	80088d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	75fb      	strb	r3, [r7, #23]
          break;
 800702c:	e02b      	b.n	8007086 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b03      	cmp	r3, #3
 8007038:	d107      	bne.n	800704a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800703a:	f107 030d 	add.w	r3, r7, #13
 800703e:	2201      	movs	r2, #1
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fcb6 	bl	80089b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007048:	e01d      	b.n	8007086 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fc40 	bl	80088d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007052:	2303      	movs	r3, #3
 8007054:	75fb      	strb	r3, [r7, #23]
          break;
 8007056:	e016      	b.n	8007086 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b03      	cmp	r3, #3
 8007062:	d00f      	beq.n	8007084 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fc33 	bl	80088d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007070:	e008      	b.n	8007084 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fc2c 	bl	80088d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800707a:	2303      	movs	r3, #3
 800707c:	75fb      	strb	r3, [r7, #23]
          break;
 800707e:	e002      	b.n	8007086 <USBD_CDC_Setup+0x19e>
          break;
 8007080:	bf00      	nop
 8007082:	e008      	b.n	8007096 <USBD_CDC_Setup+0x1ae>
          break;
 8007084:	bf00      	nop
      }
      break;
 8007086:	e006      	b.n	8007096 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fc21 	bl	80088d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	75fb      	strb	r3, [r7, #23]
      break;
 8007094:	bf00      	nop
  }

  return (uint8_t)ret;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	32b0      	adds	r2, #176	; 0xb0
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e065      	b.n	8007196 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	32b0      	adds	r2, #176	; 0xb0
 80070d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	f003 020f 	and.w	r2, r3, #15
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	3318      	adds	r3, #24
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02f      	beq.n	8007154 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	f003 020f 	and.w	r2, r3, #15
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	3318      	adds	r3, #24
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	f003 010f 	and.w	r1, r3, #15
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	460b      	mov	r3, r1
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	4403      	add	r3, r0
 800711c:	3338      	adds	r3, #56	; 0x38
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	fbb2 f1f3 	udiv	r1, r2, r3
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800712a:	2b00      	cmp	r3, #0
 800712c:	d112      	bne.n	8007154 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	3318      	adds	r3, #24
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007146:	78f9      	ldrb	r1, [r7, #3]
 8007148:	2300      	movs	r3, #0
 800714a:	2200      	movs	r2, #0
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f002 f93d 	bl	80093cc <USBD_LL_Transmit>
 8007152:	e01f      	b.n	8007194 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	33b0      	adds	r3, #176	; 0xb0
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d010      	beq.n	8007194 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	33b0      	adds	r3, #176	; 0xb0
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	32b0      	adds	r2, #176	; 0xb0
 80071b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	32b0      	adds	r2, #176	; 0xb0
 80071c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e01a      	b.n	8007206 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f002 f93b 	bl	8009450 <USBD_LL_GetRxDataSize>
 80071da:	4602      	mov	r2, r0
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	33b0      	adds	r3, #176	; 0xb0
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007200:	4611      	mov	r1, r2
 8007202:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	32b0      	adds	r2, #176	; 0xb0
 8007220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007224:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	e025      	b.n	800727c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	33b0      	adds	r3, #176	; 0xb0
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01a      	beq.n	800727a <USBD_CDC_EP0_RxReady+0x6c>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800724a:	2bff      	cmp	r3, #255	; 0xff
 800724c:	d015      	beq.n	800727a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	33b0      	adds	r3, #176	; 0xb0
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007266:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800726e:	b292      	uxth	r2, r2
 8007270:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800728c:	2182      	movs	r1, #130	; 0x82
 800728e:	4818      	ldr	r0, [pc, #96]	; (80072f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007290:	f000 fcbd 	bl	8007c0e <USBD_GetEpDesc>
 8007294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007296:	2101      	movs	r1, #1
 8007298:	4815      	ldr	r0, [pc, #84]	; (80072f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800729a:	f000 fcb8 	bl	8007c0e <USBD_GetEpDesc>
 800729e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072a0:	2181      	movs	r1, #129	; 0x81
 80072a2:	4813      	ldr	r0, [pc, #76]	; (80072f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072a4:	f000 fcb3 	bl	8007c0e <USBD_GetEpDesc>
 80072a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2210      	movs	r2, #16
 80072b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2200      	movs	r2, #0
 80072c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c4:	711a      	strb	r2, [r3, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d006      	beq.n	80072de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d8:	711a      	strb	r2, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2243      	movs	r2, #67	; 0x43
 80072e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072e4:	4b02      	ldr	r3, [pc, #8]	; (80072f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000098 	.word	0x20000098

080072f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072fc:	2182      	movs	r1, #130	; 0x82
 80072fe:	4818      	ldr	r0, [pc, #96]	; (8007360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007300:	f000 fc85 	bl	8007c0e <USBD_GetEpDesc>
 8007304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007306:	2101      	movs	r1, #1
 8007308:	4815      	ldr	r0, [pc, #84]	; (8007360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800730a:	f000 fc80 	bl	8007c0e <USBD_GetEpDesc>
 800730e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007310:	2181      	movs	r1, #129	; 0x81
 8007312:	4813      	ldr	r0, [pc, #76]	; (8007360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007314:	f000 fc7b 	bl	8007c0e <USBD_GetEpDesc>
 8007318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2210      	movs	r2, #16
 8007324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2200      	movs	r2, #0
 8007330:	711a      	strb	r2, [r3, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f042 0202 	orr.w	r2, r2, #2
 8007338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	711a      	strb	r2, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f042 0202 	orr.w	r2, r2, #2
 800734c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2243      	movs	r2, #67	; 0x43
 8007352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000098 	.word	0x20000098

08007364 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800736c:	2182      	movs	r1, #130	; 0x82
 800736e:	4818      	ldr	r0, [pc, #96]	; (80073d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007370:	f000 fc4d 	bl	8007c0e <USBD_GetEpDesc>
 8007374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007376:	2101      	movs	r1, #1
 8007378:	4815      	ldr	r0, [pc, #84]	; (80073d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800737a:	f000 fc48 	bl	8007c0e <USBD_GetEpDesc>
 800737e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007380:	2181      	movs	r1, #129	; 0x81
 8007382:	4813      	ldr	r0, [pc, #76]	; (80073d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007384:	f000 fc43 	bl	8007c0e <USBD_GetEpDesc>
 8007388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2210      	movs	r2, #16
 8007394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d006      	beq.n	80073aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2200      	movs	r2, #0
 80073a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a4:	711a      	strb	r2, [r3, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d006      	beq.n	80073be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b8:	711a      	strb	r2, [r3, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2243      	movs	r2, #67	; 0x43
 80073c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000098 	.word	0x20000098

080073d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	220a      	movs	r2, #10
 80073e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073e2:	4b03      	ldr	r3, [pc, #12]	; (80073f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	20000054 	.word	0x20000054

080073f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	e009      	b.n	800741c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	33b0      	adds	r3, #176	; 0xb0
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	32b0      	adds	r2, #176	; 0xb0
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800744a:	2303      	movs	r3, #3
 800744c:	e008      	b.n	8007460 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	32b0      	adds	r2, #176	; 0xb0
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	e004      	b.n	800749a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32b0      	adds	r2, #176	; 0xb0
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e025      	b.n	800751a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d11f      	bne.n	8007518 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2201      	movs	r2, #1
 80074dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80074e0:	4b10      	ldr	r3, [pc, #64]	; (8007524 <USBD_CDC_TransmitPacket+0x7c>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f003 020f 	and.w	r2, r3, #15
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4403      	add	r3, r0
 80074fa:	3318      	adds	r3, #24
 80074fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <USBD_CDC_TransmitPacket+0x7c>)
 8007500:	7819      	ldrb	r1, [r3, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 ff5c 	bl	80093cc <USBD_LL_Transmit>

    ret = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200000db 	.word	0x200000db

08007528 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	32b0      	adds	r2, #176	; 0xb0
 800753a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	32b0      	adds	r2, #176	; 0xb0
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007552:	2303      	movs	r3, #3
 8007554:	e018      	b.n	8007588 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7c1b      	ldrb	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <USBD_CDC_ReceivePacket+0x68>)
 8007560:	7819      	ldrb	r1, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 ff4e 	bl	800940e <USBD_LL_PrepareReceive>
 8007572:	e008      	b.n	8007586 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <USBD_CDC_ReceivePacket+0x68>)
 8007576:	7819      	ldrb	r1, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800757e:	2340      	movs	r3, #64	; 0x40
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 ff44 	bl	800940e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	200000dc 	.word	0x200000dc

08007594 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e01f      	b.n	80075ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	79fa      	ldrb	r2, [r7, #7]
 80075de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f001 fda7 	bl	8009134 <USBD_LL_Init>
 80075e6:	4603      	mov	r3, r0
 80075e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	e025      	b.n	8007658 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	32ae      	adds	r2, #174	; 0xae
 800761e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00f      	beq.n	8007648 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	32ae      	adds	r2, #174	; 0xae
 8007632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f107 020e 	add.w	r2, r7, #14
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	4602      	mov	r2, r0
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fdc5 	bl	80091f8 <USBD_LL_Start>
 800766e:	4603      	mov	r3, r0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d009      	beq.n	80076bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	4611      	mov	r1, r2
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	4611      	mov	r1, r2
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f001 f8a6 	bl	800885e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	2b02      	cmp	r3, #2
 8007734:	d01a      	beq.n	800776c <USBD_LL_SetupStage+0x72>
 8007736:	2b02      	cmp	r3, #2
 8007738:	d822      	bhi.n	8007780 <USBD_LL_SetupStage+0x86>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <USBD_LL_SetupStage+0x4a>
 800773e:	2b01      	cmp	r3, #1
 8007740:	d00a      	beq.n	8007758 <USBD_LL_SetupStage+0x5e>
 8007742:	e01d      	b.n	8007780 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fad3 	bl	8007cf8 <USBD_StdDevReq>
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]
      break;
 8007756:	e020      	b.n	800779a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fb3b 	bl	8007ddc <USBD_StdItfReq>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
      break;
 800776a:	e016      	b.n	800779a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fb9d 	bl	8007eb4 <USBD_StdEPReq>
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]
      break;
 800777e:	e00c      	b.n	800779a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007786:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800778a:	b2db      	uxtb	r3, r3
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 fd92 	bl	80092b8 <USBD_LL_StallEP>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
      break;
 8007798:	bf00      	nop
  }

  return ret;
 800779a:	7bfb      	ldrb	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	460b      	mov	r3, r1
 80077ae:	607a      	str	r2, [r7, #4]
 80077b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d16e      	bne.n	800789a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	f040 8098 	bne.w	8007900 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d913      	bls.n	8007804 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	1ad2      	subs	r2, r2, r3
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	4293      	cmp	r3, r2
 80077f4:	bf28      	it	cs
 80077f6:	4613      	movcs	r3, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f001 f922 	bl	8008a46 <USBD_CtlContinueRx>
 8007802:	e07d      	b.n	8007900 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2b02      	cmp	r3, #2
 8007810:	d014      	beq.n	800783c <USBD_LL_DataOutStage+0x98>
 8007812:	2b02      	cmp	r3, #2
 8007814:	d81d      	bhi.n	8007852 <USBD_LL_DataOutStage+0xae>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <USBD_LL_DataOutStage+0x7c>
 800781a:	2b01      	cmp	r3, #1
 800781c:	d003      	beq.n	8007826 <USBD_LL_DataOutStage+0x82>
 800781e:	e018      	b.n	8007852 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	75bb      	strb	r3, [r7, #22]
            break;
 8007824:	e018      	b.n	8007858 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800782c:	b2db      	uxtb	r3, r3
 800782e:	4619      	mov	r1, r3
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f9d2 	bl	8007bda <USBD_CoreFindIF>
 8007836:	4603      	mov	r3, r0
 8007838:	75bb      	strb	r3, [r7, #22]
            break;
 800783a:	e00d      	b.n	8007858 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007842:	b2db      	uxtb	r3, r3
 8007844:	4619      	mov	r1, r3
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f9d4 	bl	8007bf4 <USBD_CoreFindEP>
 800784c:	4603      	mov	r3, r0
 800784e:	75bb      	strb	r3, [r7, #22]
            break;
 8007850:	e002      	b.n	8007858 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	75bb      	strb	r3, [r7, #22]
            break;
 8007856:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007858:	7dbb      	ldrb	r3, [r7, #22]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d119      	bne.n	8007892 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b03      	cmp	r3, #3
 8007868:	d113      	bne.n	8007892 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800786a:	7dba      	ldrb	r2, [r7, #22]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	32ae      	adds	r2, #174	; 0xae
 8007870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00b      	beq.n	8007892 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800787a:	7dba      	ldrb	r2, [r7, #22]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007882:	7dba      	ldrb	r2, [r7, #22]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	32ae      	adds	r2, #174	; 0xae
 8007888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f001 f8e8 	bl	8008a68 <USBD_CtlSendStatus>
 8007898:	e032      	b.n	8007900 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800789a:	7afb      	ldrb	r3, [r7, #11]
 800789c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	4619      	mov	r1, r3
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f9a5 	bl	8007bf4 <USBD_CoreFindEP>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ae:	7dbb      	ldrb	r3, [r7, #22]
 80078b0:	2bff      	cmp	r3, #255	; 0xff
 80078b2:	d025      	beq.n	8007900 <USBD_LL_DataOutStage+0x15c>
 80078b4:	7dbb      	ldrb	r3, [r7, #22]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d122      	bne.n	8007900 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d117      	bne.n	80078f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80078c6:	7dba      	ldrb	r2, [r7, #22]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	32ae      	adds	r2, #174	; 0xae
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00f      	beq.n	80078f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078d6:	7dba      	ldrb	r2, [r7, #22]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078de:	7dba      	ldrb	r2, [r7, #22]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	32ae      	adds	r2, #174	; 0xae
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	7afa      	ldrb	r2, [r7, #11]
 80078ec:	4611      	mov	r1, r2
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	e000      	b.n	8007902 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	460b      	mov	r3, r1
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d16f      	bne.n	80079fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3314      	adds	r3, #20
 8007922:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800792a:	2b02      	cmp	r3, #2
 800792c:	d15a      	bne.n	80079e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	429a      	cmp	r2, r3
 8007938:	d914      	bls.n	8007964 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	1ad2      	subs	r2, r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	461a      	mov	r2, r3
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f001 f84a 	bl	80089ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007956:	2300      	movs	r3, #0
 8007958:	2200      	movs	r2, #0
 800795a:	2100      	movs	r1, #0
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f001 fd56 	bl	800940e <USBD_LL_PrepareReceive>
 8007962:	e03f      	b.n	80079e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	429a      	cmp	r2, r3
 800796e:	d11c      	bne.n	80079aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007978:	429a      	cmp	r2, r3
 800797a:	d316      	bcc.n	80079aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007986:	429a      	cmp	r2, r3
 8007988:	d20f      	bcs.n	80079aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800798a:	2200      	movs	r2, #0
 800798c:	2100      	movs	r1, #0
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f001 f82b 	bl	80089ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f001 fd33 	bl	800940e <USBD_LL_PrepareReceive>
 80079a8:	e01c      	b.n	80079e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d10f      	bne.n	80079d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079d6:	2180      	movs	r1, #128	; 0x80
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 fc6d 	bl	80092b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f001 f855 	bl	8008a8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d03a      	beq.n	8007a64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff fe42 	bl	8007678 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079fc:	e032      	b.n	8007a64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4619      	mov	r1, r3
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f8f3 	bl	8007bf4 <USBD_CoreFindEP>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	2bff      	cmp	r3, #255	; 0xff
 8007a16:	d025      	beq.n	8007a64 <USBD_LL_DataInStage+0x15a>
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d122      	bne.n	8007a64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d11c      	bne.n	8007a64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007a2a:	7dfa      	ldrb	r2, [r7, #23]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	32ae      	adds	r2, #174	; 0xae
 8007a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d014      	beq.n	8007a64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a3a:	7dfa      	ldrb	r2, [r7, #23]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a42:	7dfa      	ldrb	r2, [r7, #23]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	32ae      	adds	r2, #174	; 0xae
 8007a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	7afa      	ldrb	r2, [r7, #11]
 8007a50:	4611      	mov	r1, r2
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a5a:	7dbb      	ldrb	r3, [r7, #22]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a60:	7dbb      	ldrb	r3, [r7, #22]
 8007a62:	e000      	b.n	8007a66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d014      	beq.n	8007ad4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00e      	beq.n	8007ad4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6852      	ldr	r2, [r2, #4]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ad4:	2340      	movs	r3, #64	; 0x40
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 fba7 	bl	800922e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2240      	movs	r2, #64	; 0x40
 8007aec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007af0:	2340      	movs	r3, #64	; 0x40
 8007af2:	2200      	movs	r2, #0
 8007af4:	2180      	movs	r1, #128	; 0x80
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fb99 	bl	800922e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2240      	movs	r2, #64	; 0x40
 8007b06:	621a      	str	r2, [r3, #32]

  return ret;
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d006      	beq.n	8007b54 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2204      	movs	r2, #4
 8007b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d106      	bne.n	8007b8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d110      	bne.n	8007bd0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007be6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b086      	sub	sp, #24
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	460b      	mov	r3, r1
 8007c18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d920      	bls.n	8007c78 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c3e:	e013      	b.n	8007c68 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c40:	f107 030a 	add.w	r3, r7, #10
 8007c44:	4619      	mov	r1, r3
 8007c46:	6978      	ldr	r0, [r7, #20]
 8007c48:	f000 f81b 	bl	8007c82 <USBD_GetNextDesc>
 8007c4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	d108      	bne.n	8007c68 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	789b      	ldrb	r3, [r3, #2]
 8007c5e:	78fa      	ldrb	r2, [r7, #3]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d008      	beq.n	8007c76 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	897b      	ldrh	r3, [r7, #10]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d8e5      	bhi.n	8007c40 <USBD_GetEpDesc+0x32>
 8007c74:	e000      	b.n	8007c78 <USBD_GetEpDesc+0x6a>
          break;
 8007c76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c78:	693b      	ldr	r3, [r7, #16]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	881a      	ldrh	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4413      	add	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cae:	68fb      	ldr	r3, [r7, #12]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cda:	8a3b      	ldrh	r3, [r7, #16]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	b21a      	sxth	r2, r3
 8007ce0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	b21b      	sxth	r3, r3
 8007ce8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cea:	89fb      	ldrh	r3, [r7, #14]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d005      	beq.n	8007d1e <USBD_StdDevReq+0x26>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d857      	bhi.n	8007dc6 <USBD_StdDevReq+0xce>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00f      	beq.n	8007d3a <USBD_StdDevReq+0x42>
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d153      	bne.n	8007dc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	32ae      	adds	r2, #174	; 0xae
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]
      break;
 8007d38:	e04a      	b.n	8007dd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b09      	cmp	r3, #9
 8007d40:	d83b      	bhi.n	8007dba <USBD_StdDevReq+0xc2>
 8007d42:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <USBD_StdDevReq+0x50>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d9d 	.word	0x08007d9d
 8007d4c:	08007db1 	.word	0x08007db1
 8007d50:	08007dbb 	.word	0x08007dbb
 8007d54:	08007da7 	.word	0x08007da7
 8007d58:	08007dbb 	.word	0x08007dbb
 8007d5c:	08007d7b 	.word	0x08007d7b
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007dbb 	.word	0x08007dbb
 8007d68:	08007d93 	.word	0x08007d93
 8007d6c:	08007d85 	.word	0x08007d85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa3c 	bl	80081f0 <USBD_GetDescriptor>
          break;
 8007d78:	e024      	b.n	8007dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fbcb 	bl	8008518 <USBD_SetAddress>
          break;
 8007d82:	e01f      	b.n	8007dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fc0a 	bl	80085a0 <USBD_SetConfig>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d90:	e018      	b.n	8007dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fcad 	bl	80086f4 <USBD_GetConfig>
          break;
 8007d9a:	e013      	b.n	8007dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fcde 	bl	8008760 <USBD_GetStatus>
          break;
 8007da4:	e00e      	b.n	8007dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fd0d 	bl	80087c8 <USBD_SetFeature>
          break;
 8007dae:	e009      	b.n	8007dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fd31 	bl	800881a <USBD_ClrFeature>
          break;
 8007db8:	e004      	b.n	8007dc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fd88 	bl	80088d2 <USBD_CtlError>
          break;
 8007dc2:	bf00      	nop
      }
      break;
 8007dc4:	e004      	b.n	8007dd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fd82 	bl	80088d2 <USBD_CtlError>
      break;
 8007dce:	bf00      	nop
  }

  return ret;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop

08007ddc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d005      	beq.n	8007e02 <USBD_StdItfReq+0x26>
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d852      	bhi.n	8007ea0 <USBD_StdItfReq+0xc4>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <USBD_StdItfReq+0x26>
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d14e      	bne.n	8007ea0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d840      	bhi.n	8007e92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	889b      	ldrh	r3, [r3, #4]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d836      	bhi.n	8007e88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	889b      	ldrh	r3, [r3, #4]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff fed9 	bl	8007bda <USBD_CoreFindIF>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2bff      	cmp	r3, #255	; 0xff
 8007e30:	d01d      	beq.n	8007e6e <USBD_StdItfReq+0x92>
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d11a      	bne.n	8007e6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e38:	7bba      	ldrb	r2, [r7, #14]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32ae      	adds	r2, #174	; 0xae
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00f      	beq.n	8007e68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e48:	7bba      	ldrb	r2, [r7, #14]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e50:	7bba      	ldrb	r2, [r7, #14]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	32ae      	adds	r2, #174	; 0xae
 8007e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e66:	e004      	b.n	8007e72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e6c:	e001      	b.n	8007e72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	88db      	ldrh	r3, [r3, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d110      	bne.n	8007e9c <USBD_StdItfReq+0xc0>
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10d      	bne.n	8007e9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fdf1 	bl	8008a68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e86:	e009      	b.n	8007e9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fd21 	bl	80088d2 <USBD_CtlError>
          break;
 8007e90:	e004      	b.n	8007e9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fd1c 	bl	80088d2 <USBD_CtlError>
          break;
 8007e9a:	e000      	b.n	8007e9e <USBD_StdItfReq+0xc2>
          break;
 8007e9c:	bf00      	nop
      }
      break;
 8007e9e:	e004      	b.n	8007eaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fd15 	bl	80088d2 <USBD_CtlError>
      break;
 8007ea8:	bf00      	nop
  }

  return ret;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	889b      	ldrh	r3, [r3, #4]
 8007ec6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed0:	2b40      	cmp	r3, #64	; 0x40
 8007ed2:	d007      	beq.n	8007ee4 <USBD_StdEPReq+0x30>
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	f200 817f 	bhi.w	80081d8 <USBD_StdEPReq+0x324>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02a      	beq.n	8007f34 <USBD_StdEPReq+0x80>
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	f040 817a 	bne.w	80081d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff fe83 	bl	8007bf4 <USBD_CoreFindEP>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ef2:	7b7b      	ldrb	r3, [r7, #13]
 8007ef4:	2bff      	cmp	r3, #255	; 0xff
 8007ef6:	f000 8174 	beq.w	80081e2 <USBD_StdEPReq+0x32e>
 8007efa:	7b7b      	ldrb	r3, [r7, #13]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f040 8170 	bne.w	80081e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f02:	7b7a      	ldrb	r2, [r7, #13]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f0a:	7b7a      	ldrb	r2, [r7, #13]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	32ae      	adds	r2, #174	; 0xae
 8007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 8163 	beq.w	80081e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f1c:	7b7a      	ldrb	r2, [r7, #13]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32ae      	adds	r2, #174	; 0xae
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f32:	e156      	b.n	80081e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d008      	beq.n	8007f4e <USBD_StdEPReq+0x9a>
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	f300 8145 	bgt.w	80081cc <USBD_StdEPReq+0x318>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 809b 	beq.w	800807e <USBD_StdEPReq+0x1ca>
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d03c      	beq.n	8007fc6 <USBD_StdEPReq+0x112>
 8007f4c:	e13e      	b.n	80081cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d002      	beq.n	8007f60 <USBD_StdEPReq+0xac>
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d016      	beq.n	8007f8c <USBD_StdEPReq+0xd8>
 8007f5e:	e02c      	b.n	8007fba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <USBD_StdEPReq+0xce>
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b80      	cmp	r3, #128	; 0x80
 8007f6a:	d00a      	beq.n	8007f82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 f9a1 	bl	80092b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f76:	2180      	movs	r1, #128	; 0x80
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 f99d 	bl	80092b8 <USBD_LL_StallEP>
 8007f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f80:	e020      	b.n	8007fc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fca4 	bl	80088d2 <USBD_CtlError>
              break;
 8007f8a:	e01b      	b.n	8007fc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	885b      	ldrh	r3, [r3, #2]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10e      	bne.n	8007fb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00b      	beq.n	8007fb2 <USBD_StdEPReq+0xfe>
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b80      	cmp	r3, #128	; 0x80
 8007f9e:	d008      	beq.n	8007fb2 <USBD_StdEPReq+0xfe>
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	88db      	ldrh	r3, [r3, #6]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f983 	bl	80092b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fd58 	bl	8008a68 <USBD_CtlSendStatus>

              break;
 8007fb8:	e004      	b.n	8007fc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fc88 	bl	80088d2 <USBD_CtlError>
              break;
 8007fc2:	bf00      	nop
          }
          break;
 8007fc4:	e107      	b.n	80081d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d002      	beq.n	8007fd8 <USBD_StdEPReq+0x124>
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d016      	beq.n	8008004 <USBD_StdEPReq+0x150>
 8007fd6:	e04b      	b.n	8008070 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00d      	beq.n	8007ffa <USBD_StdEPReq+0x146>
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b80      	cmp	r3, #128	; 0x80
 8007fe2:	d00a      	beq.n	8007ffa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f965 	bl	80092b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fee:	2180      	movs	r1, #128	; 0x80
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f961 	bl	80092b8 <USBD_LL_StallEP>
 8007ff6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ff8:	e040      	b.n	800807c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fc68 	bl	80088d2 <USBD_CtlError>
              break;
 8008002:	e03b      	b.n	800807c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	885b      	ldrh	r3, [r3, #2]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d136      	bne.n	800807a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 f96b 	bl	80092f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fd21 	bl	8008a68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff fde2 	bl	8007bf4 <USBD_CoreFindEP>
 8008030:	4603      	mov	r3, r0
 8008032:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008034:	7b7b      	ldrb	r3, [r7, #13]
 8008036:	2bff      	cmp	r3, #255	; 0xff
 8008038:	d01f      	beq.n	800807a <USBD_StdEPReq+0x1c6>
 800803a:	7b7b      	ldrb	r3, [r7, #13]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d11c      	bne.n	800807a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008040:	7b7a      	ldrb	r2, [r7, #13]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008048:	7b7a      	ldrb	r2, [r7, #13]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	32ae      	adds	r2, #174	; 0xae
 800804e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d010      	beq.n	800807a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008058:	7b7a      	ldrb	r2, [r7, #13]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32ae      	adds	r2, #174	; 0xae
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800806e:	e004      	b.n	800807a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fc2d 	bl	80088d2 <USBD_CtlError>
              break;
 8008078:	e000      	b.n	800807c <USBD_StdEPReq+0x1c8>
              break;
 800807a:	bf00      	nop
          }
          break;
 800807c:	e0ab      	b.n	80081d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d002      	beq.n	8008090 <USBD_StdEPReq+0x1dc>
 800808a:	2b03      	cmp	r3, #3
 800808c:	d032      	beq.n	80080f4 <USBD_StdEPReq+0x240>
 800808e:	e097      	b.n	80081c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d007      	beq.n	80080a6 <USBD_StdEPReq+0x1f2>
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b80      	cmp	r3, #128	; 0x80
 800809a:	d004      	beq.n	80080a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fc17 	bl	80088d2 <USBD_CtlError>
                break;
 80080a4:	e091      	b.n	80081ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	da0b      	bge.n	80080c6 <USBD_StdEPReq+0x212>
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	3310      	adds	r3, #16
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4413      	add	r3, r2
 80080c2:	3304      	adds	r3, #4
 80080c4:	e00b      	b.n	80080de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	3304      	adds	r3, #4
 80080de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2202      	movs	r2, #2
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fc61 	bl	80089b4 <USBD_CtlSendData>
              break;
 80080f2:	e06a      	b.n	80081ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	da11      	bge.n	8008120 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	f003 020f 	and.w	r2, r3, #15
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	3324      	adds	r3, #36	; 0x24
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d117      	bne.n	8008146 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fbda 	bl	80088d2 <USBD_CtlError>
                  break;
 800811e:	e054      	b.n	80081ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	f003 020f 	and.w	r2, r3, #15
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fbc7 	bl	80088d2 <USBD_CtlError>
                  break;
 8008144:	e041      	b.n	80081ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800814a:	2b00      	cmp	r3, #0
 800814c:	da0b      	bge.n	8008166 <USBD_StdEPReq+0x2b2>
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	3310      	adds	r3, #16
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	3304      	adds	r3, #4
 8008164:	e00b      	b.n	800817e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800816c:	4613      	mov	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	3304      	adds	r3, #4
 800817e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <USBD_StdEPReq+0x2d8>
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b80      	cmp	r3, #128	; 0x80
 800818a:	d103      	bne.n	8008194 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	e00e      	b.n	80081b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f8cb 	bl	8009334 <USBD_LL_IsStallEP>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2201      	movs	r2, #1
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e002      	b.n	80081b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2202      	movs	r2, #2
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fbfb 	bl	80089b4 <USBD_CtlSendData>
              break;
 80081be:	e004      	b.n	80081ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb85 	bl	80088d2 <USBD_CtlError>
              break;
 80081c8:	bf00      	nop
          }
          break;
 80081ca:	e004      	b.n	80081d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fb7f 	bl	80088d2 <USBD_CtlError>
          break;
 80081d4:	bf00      	nop
      }
      break;
 80081d6:	e005      	b.n	80081e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fb79 	bl	80088d2 <USBD_CtlError>
      break;
 80081e0:	e000      	b.n	80081e4 <USBD_StdEPReq+0x330>
      break;
 80081e2:	bf00      	nop
  }

  return ret;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	0a1b      	lsrs	r3, r3, #8
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	2b0e      	cmp	r3, #14
 8008212:	f200 8152 	bhi.w	80084ba <USBD_GetDescriptor+0x2ca>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <USBD_GetDescriptor+0x2c>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800828d 	.word	0x0800828d
 8008220:	080082a5 	.word	0x080082a5
 8008224:	080082e5 	.word	0x080082e5
 8008228:	080084bb 	.word	0x080084bb
 800822c:	080084bb 	.word	0x080084bb
 8008230:	0800845b 	.word	0x0800845b
 8008234:	08008487 	.word	0x08008487
 8008238:	080084bb 	.word	0x080084bb
 800823c:	080084bb 	.word	0x080084bb
 8008240:	080084bb 	.word	0x080084bb
 8008244:	080084bb 	.word	0x080084bb
 8008248:	080084bb 	.word	0x080084bb
 800824c:	080084bb 	.word	0x080084bb
 8008250:	080084bb 	.word	0x080084bb
 8008254:	08008259 	.word	0x08008259
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800827a:	e126      	b.n	80084ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fb27 	bl	80088d2 <USBD_CtlError>
        err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
      break;
 800828a:	e11e      	b.n	80084ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7c12      	ldrb	r2, [r2, #16]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
      break;
 80082a2:	e112      	b.n	80084ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7c1b      	ldrb	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10d      	bne.n	80082c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b4:	f107 0208 	add.w	r2, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	2202      	movs	r2, #2
 80082c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082c6:	e100      	b.n	80084ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	f107 0208 	add.w	r2, r7, #8
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	2202      	movs	r2, #2
 80082e0:	701a      	strb	r2, [r3, #0]
      break;
 80082e2:	e0f2      	b.n	80084ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	885b      	ldrh	r3, [r3, #2]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	f200 80ac 	bhi.w	8008448 <USBD_GetDescriptor+0x258>
 80082f0:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <USBD_GetDescriptor+0x108>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	08008311 	.word	0x08008311
 80082fc:	08008345 	.word	0x08008345
 8008300:	08008379 	.word	0x08008379
 8008304:	080083ad 	.word	0x080083ad
 8008308:	080083e1 	.word	0x080083e1
 800830c:	08008415 	.word	0x08008415
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008332:	e091      	b.n	8008458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 facb 	bl	80088d2 <USBD_CtlError>
            err++;
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	3301      	adds	r3, #1
 8008340:	72fb      	strb	r3, [r7, #11]
          break;
 8008342:	e089      	b.n	8008458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 0108 	add.w	r1, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008366:	e077      	b.n	8008458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fab1 	bl	80088d2 <USBD_CtlError>
            err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
          break;
 8008376:	e06f      	b.n	8008458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839a:	e05d      	b.n	8008458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa97 	bl	80088d2 <USBD_CtlError>
            err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
          break;
 80083aa:	e055      	b.n	8008458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	7c12      	ldrb	r2, [r2, #16]
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ce:	e043      	b.n	8008458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa7d 	bl	80088d2 <USBD_CtlError>
            err++;
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	3301      	adds	r3, #1
 80083dc:	72fb      	strb	r3, [r7, #11]
          break;
 80083de:	e03b      	b.n	8008458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 0108 	add.w	r1, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008402:	e029      	b.n	8008458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa63 	bl	80088d2 <USBD_CtlError>
            err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
          break;
 8008412:	e021      	b.n	8008458 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7c12      	ldrb	r2, [r2, #16]
 800842c:	f107 0108 	add.w	r1, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008436:	e00f      	b.n	8008458 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa49 	bl	80088d2 <USBD_CtlError>
            err++;
 8008440:	7afb      	ldrb	r3, [r7, #11]
 8008442:	3301      	adds	r3, #1
 8008444:	72fb      	strb	r3, [r7, #11]
          break;
 8008446:	e007      	b.n	8008458 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa41 	bl	80088d2 <USBD_CtlError>
          err++;
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	3301      	adds	r3, #1
 8008454:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008456:	bf00      	nop
      }
      break;
 8008458:	e037      	b.n	80084ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7c1b      	ldrb	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	f107 0208 	add.w	r2, r7, #8
 800846e:	4610      	mov	r0, r2
 8008470:	4798      	blx	r3
 8008472:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008474:	e029      	b.n	80084ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fa2a 	bl	80088d2 <USBD_CtlError>
        err++;
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	3301      	adds	r3, #1
 8008482:	72fb      	strb	r3, [r7, #11]
      break;
 8008484:	e021      	b.n	80084ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	7c1b      	ldrb	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10d      	bne.n	80084aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	f107 0208 	add.w	r2, r7, #8
 800849a:	4610      	mov	r0, r2
 800849c:	4798      	blx	r3
 800849e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	2207      	movs	r2, #7
 80084a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a8:	e00f      	b.n	80084ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa10 	bl	80088d2 <USBD_CtlError>
        err++;
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	3301      	adds	r3, #1
 80084b6:	72fb      	strb	r3, [r7, #11]
      break;
 80084b8:	e007      	b.n	80084ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa08 	bl	80088d2 <USBD_CtlError>
      err++;
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	3301      	adds	r3, #1
 80084c6:	72fb      	strb	r3, [r7, #11]
      break;
 80084c8:	bf00      	nop
  }

  if (err != 0U)
 80084ca:	7afb      	ldrb	r3, [r7, #11]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d11e      	bne.n	800850e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	88db      	ldrh	r3, [r3, #6]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d016      	beq.n	8008506 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80084d8:	893b      	ldrh	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	88da      	ldrh	r2, [r3, #6]
 80084e2:	893b      	ldrh	r3, [r7, #8]
 80084e4:	4293      	cmp	r3, r2
 80084e6:	bf28      	it	cs
 80084e8:	4613      	movcs	r3, r2
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084ee:	893b      	ldrh	r3, [r7, #8]
 80084f0:	461a      	mov	r2, r3
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fa5d 	bl	80089b4 <USBD_CtlSendData>
 80084fa:	e009      	b.n	8008510 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f9e7 	bl	80088d2 <USBD_CtlError>
 8008504:	e004      	b.n	8008510 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 faae 	bl	8008a68 <USBD_CtlSendStatus>
 800850c:	e000      	b.n	8008510 <USBD_GetDescriptor+0x320>
    return;
 800850e:	bf00      	nop
  }
}
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop

08008518 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	889b      	ldrh	r3, [r3, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d131      	bne.n	800858e <USBD_SetAddress+0x76>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d12d      	bne.n	800858e <USBD_SetAddress+0x76>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	2b7f      	cmp	r3, #127	; 0x7f
 8008538:	d829      	bhi.n	800858e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	885b      	ldrh	r3, [r3, #2]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008544:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b03      	cmp	r3, #3
 8008550:	d104      	bne.n	800855c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f9bc 	bl	80088d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855a:	e01d      	b.n	8008598 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7bfa      	ldrb	r2, [r7, #15]
 8008560:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 ff10 	bl	800938e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa7a 	bl	8008a68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008582:	e009      	b.n	8008598 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858c:	e004      	b.n	8008598 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f99e 	bl	80088d2 <USBD_CtlError>
  }
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	885b      	ldrh	r3, [r3, #2]
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	4b4e      	ldr	r3, [pc, #312]	; (80086f0 <USBD_SetConfig+0x150>)
 80085b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085b8:	4b4d      	ldr	r3, [pc, #308]	; (80086f0 <USBD_SetConfig+0x150>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d905      	bls.n	80085cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f985 	bl	80088d2 <USBD_CtlError>
    return USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e08c      	b.n	80086e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d002      	beq.n	80085de <USBD_SetConfig+0x3e>
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d029      	beq.n	8008630 <USBD_SetConfig+0x90>
 80085dc:	e075      	b.n	80086ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085de:	4b44      	ldr	r3, [pc, #272]	; (80086f0 <USBD_SetConfig+0x150>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d020      	beq.n	8008628 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085e6:	4b42      	ldr	r3, [pc, #264]	; (80086f0 <USBD_SetConfig+0x150>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085f0:	4b3f      	ldr	r3, [pc, #252]	; (80086f0 <USBD_SetConfig+0x150>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff f849 	bl	800768e <USBD_SetClassConfig>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d008      	beq.n	8008618 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f962 	bl	80088d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2202      	movs	r2, #2
 8008612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008616:	e065      	b.n	80086e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa25 	bl	8008a68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2203      	movs	r2, #3
 8008622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008626:	e05d      	b.n	80086e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fa1d 	bl	8008a68 <USBD_CtlSendStatus>
      break;
 800862e:	e059      	b.n	80086e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008630:	4b2f      	ldr	r3, [pc, #188]	; (80086f0 <USBD_SetConfig+0x150>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d112      	bne.n	800865e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008640:	4b2b      	ldr	r3, [pc, #172]	; (80086f0 <USBD_SetConfig+0x150>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800864a:	4b29      	ldr	r3, [pc, #164]	; (80086f0 <USBD_SetConfig+0x150>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff f838 	bl	80076c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa06 	bl	8008a68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800865c:	e042      	b.n	80086e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800865e:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <USBD_SetConfig+0x150>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	429a      	cmp	r2, r3
 800866a:	d02a      	beq.n	80086c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff f826 	bl	80076c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800867a:	4b1d      	ldr	r3, [pc, #116]	; (80086f0 <USBD_SetConfig+0x150>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008684:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <USBD_SetConfig+0x150>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fe ffff 	bl	800768e <USBD_SetClassConfig>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00f      	beq.n	80086ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f918 	bl	80088d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7ff f80b 	bl	80076c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086b8:	e014      	b.n	80086e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f9d4 	bl	8008a68 <USBD_CtlSendStatus>
      break;
 80086c0:	e010      	b.n	80086e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f9d0 	bl	8008a68 <USBD_CtlSendStatus>
      break;
 80086c8:	e00c      	b.n	80086e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f900 	bl	80088d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <USBD_SetConfig+0x150>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7fe fff4 	bl	80076c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086de:	2303      	movs	r3, #3
 80086e0:	73fb      	strb	r3, [r7, #15]
      break;
 80086e2:	bf00      	nop
  }

  return ret;
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200001e8 	.word	0x200001e8

080086f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	88db      	ldrh	r3, [r3, #6]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d004      	beq.n	8008710 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f8e2 	bl	80088d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800870e:	e023      	b.n	8008758 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	dc02      	bgt.n	8008722 <USBD_GetConfig+0x2e>
 800871c:	2b00      	cmp	r3, #0
 800871e:	dc03      	bgt.n	8008728 <USBD_GetConfig+0x34>
 8008720:	e015      	b.n	800874e <USBD_GetConfig+0x5a>
 8008722:	2b03      	cmp	r3, #3
 8008724:	d00b      	beq.n	800873e <USBD_GetConfig+0x4a>
 8008726:	e012      	b.n	800874e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3308      	adds	r3, #8
 8008732:	2201      	movs	r2, #1
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f93c 	bl	80089b4 <USBD_CtlSendData>
        break;
 800873c:	e00c      	b.n	8008758 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3304      	adds	r3, #4
 8008742:	2201      	movs	r2, #1
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f934 	bl	80089b4 <USBD_CtlSendData>
        break;
 800874c:	e004      	b.n	8008758 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f8be 	bl	80088d2 <USBD_CtlError>
        break;
 8008756:	bf00      	nop
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008770:	b2db      	uxtb	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	2b02      	cmp	r3, #2
 8008776:	d81e      	bhi.n	80087b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	88db      	ldrh	r3, [r3, #6]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d004      	beq.n	800878a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f8a5 	bl	80088d2 <USBD_CtlError>
        break;
 8008788:	e01a      	b.n	80087c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d005      	beq.n	80087a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f043 0202 	orr.w	r2, r3, #2
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	330c      	adds	r3, #12
 80087aa:	2202      	movs	r2, #2
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f900 	bl	80089b4 <USBD_CtlSendData>
      break;
 80087b4:	e004      	b.n	80087c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f88a 	bl	80088d2 <USBD_CtlError>
      break;
 80087be:	bf00      	nop
  }
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d107      	bne.n	80087ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f940 	bl	8008a68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087e8:	e013      	b.n	8008812 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d10b      	bne.n	800880a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	889b      	ldrh	r3, [r3, #4]
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f930 	bl	8008a68 <USBD_CtlSendStatus>
}
 8008808:	e003      	b.n	8008812 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f860 	bl	80088d2 <USBD_CtlError>
}
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882a:	b2db      	uxtb	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	2b02      	cmp	r3, #2
 8008830:	d80b      	bhi.n	800884a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d10c      	bne.n	8008854 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f910 	bl	8008a68 <USBD_CtlSendStatus>
      }
      break;
 8008848:	e004      	b.n	8008854 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f840 	bl	80088d2 <USBD_CtlError>
      break;
 8008852:	e000      	b.n	8008856 <USBD_ClrFeature+0x3c>
      break;
 8008854:	bf00      	nop
  }
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3301      	adds	r3, #1
 8008878:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3301      	adds	r3, #1
 8008886:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff fa17 	bl	8007cbc <SWAPBYTE>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3301      	adds	r3, #1
 800889a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f7ff fa0a 	bl	8007cbc <SWAPBYTE>
 80088a8:	4603      	mov	r3, r0
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff f9fd 	bl	8007cbc <SWAPBYTE>
 80088c2:	4603      	mov	r3, r0
 80088c4:	461a      	mov	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	80da      	strh	r2, [r3, #6]
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088dc:	2180      	movs	r1, #128	; 0x80
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fcea 	bl	80092b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088e4:	2100      	movs	r1, #0
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fce6 	bl	80092b8 <USBD_LL_StallEP>
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d036      	beq.n	8008978 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800890e:	6938      	ldr	r0, [r7, #16]
 8008910:	f000 f836 	bl	8008980 <USBD_GetLen>
 8008914:	4603      	mov	r3, r0
 8008916:	3301      	adds	r3, #1
 8008918:	b29b      	uxth	r3, r3
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	4413      	add	r3, r2
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7812      	ldrb	r2, [r2, #0]
 800892c:	701a      	strb	r2, [r3, #0]
  idx++;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	3301      	adds	r3, #1
 8008932:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	4413      	add	r3, r2
 800893a:	2203      	movs	r2, #3
 800893c:	701a      	strb	r2, [r3, #0]
  idx++;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	3301      	adds	r3, #1
 8008942:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008944:	e013      	b.n	800896e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4413      	add	r3, r2
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	3301      	adds	r3, #1
 8008956:	613b      	str	r3, [r7, #16]
    idx++;
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	3301      	adds	r3, #1
 800895c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	4413      	add	r3, r2
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
    idx++;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	3301      	adds	r3, #1
 800896c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e7      	bne.n	8008946 <USBD_GetString+0x52>
 8008976:	e000      	b.n	800897a <USBD_GetString+0x86>
    return;
 8008978:	bf00      	nop
  }
}
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008990:	e005      	b.n	800899e <USBD_GetLen+0x1e>
  {
    len++;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	3301      	adds	r3, #1
 8008996:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	3301      	adds	r3, #1
 800899c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1f5      	bne.n	8008992 <USBD_GetLen+0x12>
  }

  return len;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	2100      	movs	r1, #0
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fcf6 	bl	80093cc <USBD_LL_Transmit>

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	2100      	movs	r1, #0
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fce5 	bl	80093cc <USBD_LL_Transmit>

  return USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2203      	movs	r2, #3
 8008a1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	2100      	movs	r1, #0
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fce9 	bl	800940e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	2100      	movs	r1, #0
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fcd8 	bl	800940e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2204      	movs	r2, #4
 8008a74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a78:	2300      	movs	r3, #0
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fca4 	bl	80093cc <USBD_LL_Transmit>

  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2205      	movs	r2, #5
 8008a9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fcb2 	bl	800940e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4912      	ldr	r1, [pc, #72]	; (8008b04 <MX_USB_Device_Init+0x50>)
 8008abc:	4812      	ldr	r0, [pc, #72]	; (8008b08 <MX_USB_Device_Init+0x54>)
 8008abe:	f7fe fd69 	bl	8007594 <USBD_Init>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008ac8:	f7f7 fca4 	bl	8000414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008acc:	490f      	ldr	r1, [pc, #60]	; (8008b0c <MX_USB_Device_Init+0x58>)
 8008ace:	480e      	ldr	r0, [pc, #56]	; (8008b08 <MX_USB_Device_Init+0x54>)
 8008ad0:	f7fe fd90 	bl	80075f4 <USBD_RegisterClass>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008ada:	f7f7 fc9b 	bl	8000414 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008ade:	490c      	ldr	r1, [pc, #48]	; (8008b10 <MX_USB_Device_Init+0x5c>)
 8008ae0:	4809      	ldr	r0, [pc, #36]	; (8008b08 <MX_USB_Device_Init+0x54>)
 8008ae2:	f7fe fc87 	bl	80073f4 <USBD_CDC_RegisterInterface>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008aec:	f7f7 fc92 	bl	8000414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008af0:	4805      	ldr	r0, [pc, #20]	; (8008b08 <MX_USB_Device_Init+0x54>)
 8008af2:	f7fe fdb5 	bl	8007660 <USBD_Start>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008afc:	f7f7 fc8a 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008b00:	bf00      	nop
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	200000f4 	.word	0x200000f4
 8008b08:	200001ec 	.word	0x200001ec
 8008b0c:	20000060 	.word	0x20000060
 8008b10:	200000e0 	.word	0x200000e0

08008b14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4905      	ldr	r1, [pc, #20]	; (8008b30 <CDC_Init_FS+0x1c>)
 8008b1c:	4805      	ldr	r0, [pc, #20]	; (8008b34 <CDC_Init_FS+0x20>)
 8008b1e:	f7fe fc83 	bl	8007428 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b22:	4905      	ldr	r1, [pc, #20]	; (8008b38 <CDC_Init_FS+0x24>)
 8008b24:	4803      	ldr	r0, [pc, #12]	; (8008b34 <CDC_Init_FS+0x20>)
 8008b26:	f7fe fca1 	bl	800746c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20000cc8 	.word	0x20000cc8
 8008b34:	200001ec 	.word	0x200001ec
 8008b38:	200004c8 	.word	0x200004c8

08008b3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	71fb      	strb	r3, [r7, #7]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b23      	cmp	r3, #35	; 0x23
 8008b60:	d84a      	bhi.n	8008bf8 <CDC_Control_FS+0xac>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <CDC_Control_FS+0x1c>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008bf9 	.word	0x08008bf9
 8008b6c:	08008bf9 	.word	0x08008bf9
 8008b70:	08008bf9 	.word	0x08008bf9
 8008b74:	08008bf9 	.word	0x08008bf9
 8008b78:	08008bf9 	.word	0x08008bf9
 8008b7c:	08008bf9 	.word	0x08008bf9
 8008b80:	08008bf9 	.word	0x08008bf9
 8008b84:	08008bf9 	.word	0x08008bf9
 8008b88:	08008bf9 	.word	0x08008bf9
 8008b8c:	08008bf9 	.word	0x08008bf9
 8008b90:	08008bf9 	.word	0x08008bf9
 8008b94:	08008bf9 	.word	0x08008bf9
 8008b98:	08008bf9 	.word	0x08008bf9
 8008b9c:	08008bf9 	.word	0x08008bf9
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008bf9 	.word	0x08008bf9
 8008ba8:	08008bf9 	.word	0x08008bf9
 8008bac:	08008bf9 	.word	0x08008bf9
 8008bb0:	08008bf9 	.word	0x08008bf9
 8008bb4:	08008bf9 	.word	0x08008bf9
 8008bb8:	08008bf9 	.word	0x08008bf9
 8008bbc:	08008bf9 	.word	0x08008bf9
 8008bc0:	08008bf9 	.word	0x08008bf9
 8008bc4:	08008bf9 	.word	0x08008bf9
 8008bc8:	08008bf9 	.word	0x08008bf9
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008bf9 	.word	0x08008bf9
 8008bd8:	08008bf9 	.word	0x08008bf9
 8008bdc:	08008bf9 	.word	0x08008bf9
 8008be0:	08008bf9 	.word	0x08008bf9
 8008be4:	08008bf9 	.word	0x08008bf9
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008bf9 	.word	0x08008bf9
 8008bf0:	08008bf9 	.word	0x08008bf9
 8008bf4:	08008bf9 	.word	0x08008bf9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bf8:	bf00      	nop
  }

  return (USBD_OK);
 8008bfa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4805      	ldr	r0, [pc, #20]	; (8008c2c <CDC_Receive_FS+0x24>)
 8008c16:	f7fe fc29 	bl	800746c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c1a:	4804      	ldr	r0, [pc, #16]	; (8008c2c <CDC_Receive_FS+0x24>)
 8008c1c:	f7fe fc84 	bl	8007528 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	200001ec 	.word	0x200001ec

08008c30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c40:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <CDC_Transmit_FS+0x48>)
 8008c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e00b      	b.n	8008c6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c56:	887b      	ldrh	r3, [r7, #2]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	6879      	ldr	r1, [r7, #4]
 8008c5c:	4806      	ldr	r0, [pc, #24]	; (8008c78 <CDC_Transmit_FS+0x48>)
 8008c5e:	f7fe fbe3 	bl	8007428 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c62:	4805      	ldr	r0, [pc, #20]	; (8008c78 <CDC_Transmit_FS+0x48>)
 8008c64:	f7fe fc20 	bl	80074a8 <USBD_CDC_TransmitPacket>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	200001ec 	.word	0x200001ec

08008c7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2212      	movs	r2, #18
 8008cb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008cb2:	4b03      	ldr	r3, [pc, #12]	; (8008cc0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	20000114 	.word	0x20000114

08008cc4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	6039      	str	r1, [r7, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2204      	movs	r2, #4
 8008cd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cd6:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	20000128 	.word	0x20000128

08008ce8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d105      	bne.n	8008d06 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	4907      	ldr	r1, [pc, #28]	; (8008d1c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cfe:	4808      	ldr	r0, [pc, #32]	; (8008d20 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008d00:	f7ff fdf8 	bl	80088f4 <USBD_GetString>
 8008d04:	e004      	b.n	8008d10 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	4904      	ldr	r1, [pc, #16]	; (8008d1c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008d0a:	4805      	ldr	r0, [pc, #20]	; (8008d20 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008d0c:	f7ff fdf2 	bl	80088f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	200014c8 	.word	0x200014c8
 8008d20:	0800a580 	.word	0x0800a580

08008d24 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	4904      	ldr	r1, [pc, #16]	; (8008d44 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008d34:	4804      	ldr	r0, [pc, #16]	; (8008d48 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008d36:	f7ff fddd 	bl	80088f4 <USBD_GetString>
  return USBD_StrDesc;
 8008d3a:	4b02      	ldr	r3, [pc, #8]	; (8008d44 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	200014c8 	.word	0x200014c8
 8008d48:	0800a598 	.word	0x0800a598

08008d4c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	221a      	movs	r2, #26
 8008d5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d5e:	f000 f843 	bl	8008de8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d62:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	2000012c 	.word	0x2000012c

08008d70 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	4907      	ldr	r1, [pc, #28]	; (8008da4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d86:	4808      	ldr	r0, [pc, #32]	; (8008da8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d88:	f7ff fdb4 	bl	80088f4 <USBD_GetString>
 8008d8c:	e004      	b.n	8008d98 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4904      	ldr	r1, [pc, #16]	; (8008da4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d92:	4805      	ldr	r0, [pc, #20]	; (8008da8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d94:	f7ff fdae 	bl	80088f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200014c8 	.word	0x200014c8
 8008da8:	0800a5ac 	.word	0x0800a5ac

08008dac <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008db8:	79fb      	ldrb	r3, [r7, #7]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d105      	bne.n	8008dca <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4907      	ldr	r1, [pc, #28]	; (8008de0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008dc2:	4808      	ldr	r0, [pc, #32]	; (8008de4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008dc4:	f7ff fd96 	bl	80088f4 <USBD_GetString>
 8008dc8:	e004      	b.n	8008dd4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	4904      	ldr	r1, [pc, #16]	; (8008de0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008dce:	4805      	ldr	r0, [pc, #20]	; (8008de4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008dd0:	f7ff fd90 	bl	80088f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	200014c8 	.word	0x200014c8
 8008de4:	0800a5b8 	.word	0x0800a5b8

08008de8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dee:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <Get_SerialNum+0x44>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008df4:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <Get_SerialNum+0x48>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dfa:	4b0e      	ldr	r3, [pc, #56]	; (8008e34 <Get_SerialNum+0x4c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e0e:	2208      	movs	r2, #8
 8008e10:	4909      	ldr	r1, [pc, #36]	; (8008e38 <Get_SerialNum+0x50>)
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f814 	bl	8008e40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e18:	2204      	movs	r2, #4
 8008e1a:	4908      	ldr	r1, [pc, #32]	; (8008e3c <Get_SerialNum+0x54>)
 8008e1c:	68b8      	ldr	r0, [r7, #8]
 8008e1e:	f000 f80f 	bl	8008e40 <IntToUnicode>
  }
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	1fff7590 	.word	0x1fff7590
 8008e30:	1fff7594 	.word	0x1fff7594
 8008e34:	1fff7598 	.word	0x1fff7598
 8008e38:	2000012e 	.word	0x2000012e
 8008e3c:	2000013e 	.word	0x2000013e

08008e40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e52:	2300      	movs	r3, #0
 8008e54:	75fb      	strb	r3, [r7, #23]
 8008e56:	e027      	b.n	8008ea8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	0f1b      	lsrs	r3, r3, #28
 8008e5c:	2b09      	cmp	r3, #9
 8008e5e:	d80b      	bhi.n	8008e78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	0f1b      	lsrs	r3, r3, #28
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	440b      	add	r3, r1
 8008e70:	3230      	adds	r2, #48	; 0x30
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e00a      	b.n	8008e8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	0f1b      	lsrs	r3, r3, #28
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4619      	mov	r1, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	440b      	add	r3, r1
 8008e88:	3237      	adds	r2, #55	; 0x37
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	3301      	adds	r3, #1
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	75fb      	strb	r3, [r7, #23]
 8008ea8:	7dfa      	ldrb	r2, [r7, #23]
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d3d3      	bcc.n	8008e58 <IntToUnicode+0x18>
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <LL_AHB2_GRP1_EnableClock>:
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b085      	sub	sp, #20
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
}
 8008ee4:	bf00      	nop
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008efc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4013      	ands	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008f14:	68fb      	ldr	r3, [r7, #12]
}
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b09c      	sub	sp, #112	; 0x70
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008f3c:	f107 030c 	add.w	r3, r7, #12
 8008f40:	2250      	movs	r2, #80	; 0x50
 8008f42:	2100      	movs	r1, #0
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb41 	bl	80095cc <memset>
  if(pcdHandle->Instance==USB)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a23      	ldr	r2, [pc, #140]	; (8008fdc <HAL_PCD_MspInit+0xb8>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d13e      	bne.n	8008fd2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8008f5a:	2318      	movs	r3, #24
 8008f5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008f6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008f6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8008f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008f76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f7a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fb f82d 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8008f8c:	f7f7 fa42 	bl	8000414 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f90:	2001      	movs	r0, #1
 8008f92:	f7ff ff94 	bl	8008ebe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008fa8:	230a      	movs	r3, #10
 8008faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008fb6:	f7f7 fe0d 	bl	8000bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008fba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008fbe:	f7ff ff97 	bl	8008ef0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	2014      	movs	r0, #20
 8008fc8:	f7f7 fdcf 	bl	8000b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008fcc:	2014      	movs	r0, #20
 8008fce:	f7f7 fde6 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	3770      	adds	r7, #112	; 0x70
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40006800 	.word	0x40006800

08008fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f7fe fb7f 	bl	80076fa <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	440b      	add	r3, r1
 8009024:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	4619      	mov	r1, r3
 800902e:	f7fe fbb9 	bl	80077a4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	440b      	add	r3, r1
 800905a:	333c      	adds	r3, #60	; 0x3c
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	78fb      	ldrb	r3, [r7, #3]
 8009060:	4619      	mov	r1, r3
 8009062:	f7fe fc52 	bl	800790a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fd8c 	bl	8007b9a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009092:	2301      	movs	r3, #1
 8009094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d001      	beq.n	80090a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800909e:	f7f7 f9b9 	bl	8000414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090a8:	7bfa      	ldrb	r2, [r7, #15]
 80090aa:	4611      	mov	r1, r2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe fd30 	bl	8007b12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fcd8 	bl	8007a6e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80090be:	bf00      	nop
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe fd2b 	bl	8007b32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090e4:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <HAL_PCD_SuspendCallback+0x30>)
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	4a03      	ldr	r2, [pc, #12]	; (80090f8 <HAL_PCD_SuspendCallback+0x30>)
 80090ea:	f043 0306 	orr.w	r3, r3, #6
 80090ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	e000ed00 	.word	0xe000ed00

080090fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800910c:	4b08      	ldr	r3, [pc, #32]	; (8009130 <HAL_PCD_ResumeCallback+0x34>)
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	4a07      	ldr	r2, [pc, #28]	; (8009130 <HAL_PCD_ResumeCallback+0x34>)
 8009112:	f023 0306 	bic.w	r3, r3, #6
 8009116:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009118:	f000 f9fc 	bl	8009514 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fd21 	bl	8007b6a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	e000ed00 	.word	0xe000ed00

08009134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800913c:	4a2c      	ldr	r2, [pc, #176]	; (80091f0 <USBD_LL_Init+0xbc>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a2a      	ldr	r2, [pc, #168]	; (80091f0 <USBD_LL_Init+0xbc>)
 8009148:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800914c:	f7f9 fc44 	bl	80029d8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009150:	4b27      	ldr	r3, [pc, #156]	; (80091f0 <USBD_LL_Init+0xbc>)
 8009152:	4a28      	ldr	r2, [pc, #160]	; (80091f4 <USBD_LL_Init+0xc0>)
 8009154:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009156:	4b26      	ldr	r3, [pc, #152]	; (80091f0 <USBD_LL_Init+0xbc>)
 8009158:	2208      	movs	r2, #8
 800915a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800915c:	4b24      	ldr	r3, [pc, #144]	; (80091f0 <USBD_LL_Init+0xbc>)
 800915e:	2202      	movs	r2, #2
 8009160:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009162:	4b23      	ldr	r3, [pc, #140]	; (80091f0 <USBD_LL_Init+0xbc>)
 8009164:	2202      	movs	r2, #2
 8009166:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009168:	4b21      	ldr	r3, [pc, #132]	; (80091f0 <USBD_LL_Init+0xbc>)
 800916a:	2200      	movs	r2, #0
 800916c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800916e:	4b20      	ldr	r3, [pc, #128]	; (80091f0 <USBD_LL_Init+0xbc>)
 8009170:	2200      	movs	r2, #0
 8009172:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009174:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <USBD_LL_Init+0xbc>)
 8009176:	2200      	movs	r2, #0
 8009178:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800917a:	4b1d      	ldr	r3, [pc, #116]	; (80091f0 <USBD_LL_Init+0xbc>)
 800917c:	2200      	movs	r2, #0
 800917e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009180:	481b      	ldr	r0, [pc, #108]	; (80091f0 <USBD_LL_Init+0xbc>)
 8009182:	f7f7 fec7 	bl	8000f14 <HAL_PCD_Init>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800918c:	f7f7 f942 	bl	8000414 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009196:	2318      	movs	r3, #24
 8009198:	2200      	movs	r2, #0
 800919a:	2100      	movs	r1, #0
 800919c:	f7f9 fb90 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091a6:	2358      	movs	r3, #88	; 0x58
 80091a8:	2200      	movs	r2, #0
 80091aa:	2180      	movs	r1, #128	; 0x80
 80091ac:	f7f9 fb88 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091b6:	23c0      	movs	r3, #192	; 0xc0
 80091b8:	2200      	movs	r2, #0
 80091ba:	2181      	movs	r1, #129	; 0x81
 80091bc:	f7f9 fb80 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091ca:	2200      	movs	r2, #0
 80091cc:	2101      	movs	r1, #1
 80091ce:	f7f9 fb77 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091dc:	2200      	movs	r2, #0
 80091de:	2182      	movs	r1, #130	; 0x82
 80091e0:	f7f9 fb6e 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200016c8 	.word	0x200016c8
 80091f4:	40006800 	.word	0x40006800

080091f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800920e:	4618      	mov	r0, r3
 8009210:	f7f7 ff59 	bl	80010c6 <HAL_PCD_Start>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f980 	bl	8009520 <USBD_Get_USB_Status>
 8009220:	4603      	mov	r3, r0
 8009222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009224:	7bbb      	ldrb	r3, [r7, #14]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	4608      	mov	r0, r1
 8009238:	4611      	mov	r1, r2
 800923a:	461a      	mov	r2, r3
 800923c:	4603      	mov	r3, r0
 800923e:	70fb      	strb	r3, [r7, #3]
 8009240:	460b      	mov	r3, r1
 8009242:	70bb      	strb	r3, [r7, #2]
 8009244:	4613      	mov	r3, r2
 8009246:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009256:	78bb      	ldrb	r3, [r7, #2]
 8009258:	883a      	ldrh	r2, [r7, #0]
 800925a:	78f9      	ldrb	r1, [r7, #3]
 800925c:	f7f8 f8a1 	bl	80013a2 <HAL_PCD_EP_Open>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f95a 	bl	8009520 <USBD_Get_USB_Status>
 800926c:	4603      	mov	r3, r0
 800926e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009270:	7bbb      	ldrb	r3, [r7, #14]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7f8 f8df 	bl	800145c <HAL_PCD_EP_Close>
 800929e:	4603      	mov	r3, r0
 80092a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 f93b 	bl	8009520 <USBD_Get_USB_Status>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	4611      	mov	r1, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f8 f988 	bl	80015ec <HAL_PCD_EP_SetStall>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f91c 	bl	8009520 <USBD_Get_USB_Status>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f7f8 f9bb 	bl	8001690 <HAL_PCD_EP_ClrStall>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f8fd 	bl	8009520 <USBD_Get_USB_Status>
 8009326:	4603      	mov	r3, r0
 8009328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932a:	7bbb      	ldrb	r3, [r7, #14]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009346:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800934c:	2b00      	cmp	r3, #0
 800934e:	da0c      	bge.n	800936a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	440b      	add	r3, r1
 8009364:	3302      	adds	r3, #2
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	e00b      	b.n	8009382 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009370:	68f9      	ldr	r1, [r7, #12]
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	440b      	add	r3, r1
 800937c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009380:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f7 ffd3 	bl	8001358 <HAL_PCD_SetAddress>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f8b1 	bl	8009520 <USBD_Get_USB_Status>
 80093be:	4603      	mov	r3, r0
 80093c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	460b      	mov	r3, r1
 80093da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093ea:	7af9      	ldrb	r1, [r7, #11]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	f7f8 f8c5 	bl	800157e <HAL_PCD_EP_Transmit>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 f890 	bl	8009520 <USBD_Get_USB_Status>
 8009400:	4603      	mov	r3, r0
 8009402:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009404:	7dbb      	ldrb	r3, [r7, #22]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b086      	sub	sp, #24
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
 800941a:	460b      	mov	r3, r1
 800941c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800942c:	7af9      	ldrb	r1, [r7, #11]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	f7f8 f85b 	bl	80014ec <HAL_PCD_EP_Receive>
 8009436:	4603      	mov	r3, r0
 8009438:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	4618      	mov	r0, r3
 800943e:	f000 f86f 	bl	8009520 <USBD_Get_USB_Status>
 8009442:	4603      	mov	r3, r0
 8009444:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009446:	7dbb      	ldrb	r3, [r7, #22]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f7f8 f871 	bl	800154e <HAL_PCD_EP_GetRxCount>
 800946c:	4603      	mov	r3, r0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <HAL_PCDEx_LPM_Callback+0x18>
 800948a:	2b01      	cmp	r3, #1
 800948c:	d013      	beq.n	80094b6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800948e:	e023      	b.n	80094d8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009498:	f000 f83c 	bl	8009514 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800949c:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	4a0f      	ldr	r2, [pc, #60]	; (80094e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80094a2:	f023 0306 	bic.w	r3, r3, #6
 80094a6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fb5b 	bl	8007b6a <USBD_LL_Resume>
    break;
 80094b4:	e010      	b.n	80094d8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fb38 	bl	8007b32 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d005      	beq.n	80094d6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	4a04      	ldr	r2, [pc, #16]	; (80094e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80094d0:	f043 0306 	orr.w	r3, r3, #6
 80094d4:	6113      	str	r3, [r2, #16]
    break;
 80094d6:	bf00      	nop
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	e000ed00 	.word	0xe000ed00

080094e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094ec:	4b03      	ldr	r3, [pc, #12]	; (80094fc <USBD_static_malloc+0x18>)
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	200019bc 	.word	0x200019bc

08009500 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009518:	f7f6 feac 	bl	8000274 <SystemClock_Config>
}
 800951c:	bf00      	nop
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	2b03      	cmp	r3, #3
 8009532:	d817      	bhi.n	8009564 <USBD_Get_USB_Status+0x44>
 8009534:	a201      	add	r2, pc, #4	; (adr r2, 800953c <USBD_Get_USB_Status+0x1c>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	0800954d 	.word	0x0800954d
 8009540:	08009553 	.word	0x08009553
 8009544:	08009559 	.word	0x08009559
 8009548:	0800955f 	.word	0x0800955f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
    break;
 8009550:	e00b      	b.n	800956a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009552:	2303      	movs	r3, #3
 8009554:	73fb      	strb	r3, [r7, #15]
    break;
 8009556:	e008      	b.n	800956a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009558:	2301      	movs	r3, #1
 800955a:	73fb      	strb	r3, [r7, #15]
    break;
 800955c:	e005      	b.n	800956a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800955e:	2303      	movs	r3, #3
 8009560:	73fb      	strb	r3, [r7, #15]
    break;
 8009562:	e002      	b.n	800956a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009564:	2303      	movs	r3, #3
 8009566:	73fb      	strb	r3, [r7, #15]
    break;
 8009568:	bf00      	nop
  }
  return usb_status;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <__errno>:
 8009578:	4b01      	ldr	r3, [pc, #4]	; (8009580 <__errno+0x8>)
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	20000148 	.word	0x20000148

08009584 <__libc_init_array>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4d0d      	ldr	r5, [pc, #52]	; (80095bc <__libc_init_array+0x38>)
 8009588:	4c0d      	ldr	r4, [pc, #52]	; (80095c0 <__libc_init_array+0x3c>)
 800958a:	1b64      	subs	r4, r4, r5
 800958c:	10a4      	asrs	r4, r4, #2
 800958e:	2600      	movs	r6, #0
 8009590:	42a6      	cmp	r6, r4
 8009592:	d109      	bne.n	80095a8 <__libc_init_array+0x24>
 8009594:	4d0b      	ldr	r5, [pc, #44]	; (80095c4 <__libc_init_array+0x40>)
 8009596:	4c0c      	ldr	r4, [pc, #48]	; (80095c8 <__libc_init_array+0x44>)
 8009598:	f000 ffae 	bl	800a4f8 <_init>
 800959c:	1b64      	subs	r4, r4, r5
 800959e:	10a4      	asrs	r4, r4, #2
 80095a0:	2600      	movs	r6, #0
 80095a2:	42a6      	cmp	r6, r4
 80095a4:	d105      	bne.n	80095b2 <__libc_init_array+0x2e>
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ac:	4798      	blx	r3
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7ee      	b.n	8009590 <__libc_init_array+0xc>
 80095b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b6:	4798      	blx	r3
 80095b8:	3601      	adds	r6, #1
 80095ba:	e7f2      	b.n	80095a2 <__libc_init_array+0x1e>
 80095bc:	0800a6e0 	.word	0x0800a6e0
 80095c0:	0800a6e0 	.word	0x0800a6e0
 80095c4:	0800a6e0 	.word	0x0800a6e0
 80095c8:	0800a6e4 	.word	0x0800a6e4

080095cc <memset>:
 80095cc:	4402      	add	r2, r0
 80095ce:	4603      	mov	r3, r0
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d100      	bne.n	80095d6 <memset+0xa>
 80095d4:	4770      	bx	lr
 80095d6:	f803 1b01 	strb.w	r1, [r3], #1
 80095da:	e7f9      	b.n	80095d0 <memset+0x4>

080095dc <iprintf>:
 80095dc:	b40f      	push	{r0, r1, r2, r3}
 80095de:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <iprintf+0x2c>)
 80095e0:	b513      	push	{r0, r1, r4, lr}
 80095e2:	681c      	ldr	r4, [r3, #0]
 80095e4:	b124      	cbz	r4, 80095f0 <iprintf+0x14>
 80095e6:	69a3      	ldr	r3, [r4, #24]
 80095e8:	b913      	cbnz	r3, 80095f0 <iprintf+0x14>
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f866 	bl	80096bc <__sinit>
 80095f0:	ab05      	add	r3, sp, #20
 80095f2:	9a04      	ldr	r2, [sp, #16]
 80095f4:	68a1      	ldr	r1, [r4, #8]
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 f9bd 	bl	8009978 <_vfiprintf_r>
 80095fe:	b002      	add	sp, #8
 8009600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009604:	b004      	add	sp, #16
 8009606:	4770      	bx	lr
 8009608:	20000148 	.word	0x20000148

0800960c <std>:
 800960c:	2300      	movs	r3, #0
 800960e:	b510      	push	{r4, lr}
 8009610:	4604      	mov	r4, r0
 8009612:	e9c0 3300 	strd	r3, r3, [r0]
 8009616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800961a:	6083      	str	r3, [r0, #8]
 800961c:	8181      	strh	r1, [r0, #12]
 800961e:	6643      	str	r3, [r0, #100]	; 0x64
 8009620:	81c2      	strh	r2, [r0, #14]
 8009622:	6183      	str	r3, [r0, #24]
 8009624:	4619      	mov	r1, r3
 8009626:	2208      	movs	r2, #8
 8009628:	305c      	adds	r0, #92	; 0x5c
 800962a:	f7ff ffcf 	bl	80095cc <memset>
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <std+0x38>)
 8009630:	6263      	str	r3, [r4, #36]	; 0x24
 8009632:	4b05      	ldr	r3, [pc, #20]	; (8009648 <std+0x3c>)
 8009634:	62a3      	str	r3, [r4, #40]	; 0x28
 8009636:	4b05      	ldr	r3, [pc, #20]	; (800964c <std+0x40>)
 8009638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800963a:	4b05      	ldr	r3, [pc, #20]	; (8009650 <std+0x44>)
 800963c:	6224      	str	r4, [r4, #32]
 800963e:	6323      	str	r3, [r4, #48]	; 0x30
 8009640:	bd10      	pop	{r4, pc}
 8009642:	bf00      	nop
 8009644:	08009f21 	.word	0x08009f21
 8009648:	08009f43 	.word	0x08009f43
 800964c:	08009f7b 	.word	0x08009f7b
 8009650:	08009f9f 	.word	0x08009f9f

08009654 <_cleanup_r>:
 8009654:	4901      	ldr	r1, [pc, #4]	; (800965c <_cleanup_r+0x8>)
 8009656:	f000 b8af 	b.w	80097b8 <_fwalk_reent>
 800965a:	bf00      	nop
 800965c:	0800a279 	.word	0x0800a279

08009660 <__sfmoreglue>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	2268      	movs	r2, #104	; 0x68
 8009664:	1e4d      	subs	r5, r1, #1
 8009666:	4355      	muls	r5, r2
 8009668:	460e      	mov	r6, r1
 800966a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800966e:	f000 f8e5 	bl	800983c <_malloc_r>
 8009672:	4604      	mov	r4, r0
 8009674:	b140      	cbz	r0, 8009688 <__sfmoreglue+0x28>
 8009676:	2100      	movs	r1, #0
 8009678:	e9c0 1600 	strd	r1, r6, [r0]
 800967c:	300c      	adds	r0, #12
 800967e:	60a0      	str	r0, [r4, #8]
 8009680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009684:	f7ff ffa2 	bl	80095cc <memset>
 8009688:	4620      	mov	r0, r4
 800968a:	bd70      	pop	{r4, r5, r6, pc}

0800968c <__sfp_lock_acquire>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__sfp_lock_acquire+0x8>)
 800968e:	f000 b8b3 	b.w	80097f8 <__retarget_lock_acquire_recursive>
 8009692:	bf00      	nop
 8009694:	20001bdd 	.word	0x20001bdd

08009698 <__sfp_lock_release>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sfp_lock_release+0x8>)
 800969a:	f000 b8ae 	b.w	80097fa <__retarget_lock_release_recursive>
 800969e:	bf00      	nop
 80096a0:	20001bdd 	.word	0x20001bdd

080096a4 <__sinit_lock_acquire>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__sinit_lock_acquire+0x8>)
 80096a6:	f000 b8a7 	b.w	80097f8 <__retarget_lock_acquire_recursive>
 80096aa:	bf00      	nop
 80096ac:	20001bde 	.word	0x20001bde

080096b0 <__sinit_lock_release>:
 80096b0:	4801      	ldr	r0, [pc, #4]	; (80096b8 <__sinit_lock_release+0x8>)
 80096b2:	f000 b8a2 	b.w	80097fa <__retarget_lock_release_recursive>
 80096b6:	bf00      	nop
 80096b8:	20001bde 	.word	0x20001bde

080096bc <__sinit>:
 80096bc:	b510      	push	{r4, lr}
 80096be:	4604      	mov	r4, r0
 80096c0:	f7ff fff0 	bl	80096a4 <__sinit_lock_acquire>
 80096c4:	69a3      	ldr	r3, [r4, #24]
 80096c6:	b11b      	cbz	r3, 80096d0 <__sinit+0x14>
 80096c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096cc:	f7ff bff0 	b.w	80096b0 <__sinit_lock_release>
 80096d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096d4:	6523      	str	r3, [r4, #80]	; 0x50
 80096d6:	4b13      	ldr	r3, [pc, #76]	; (8009724 <__sinit+0x68>)
 80096d8:	4a13      	ldr	r2, [pc, #76]	; (8009728 <__sinit+0x6c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80096de:	42a3      	cmp	r3, r4
 80096e0:	bf04      	itt	eq
 80096e2:	2301      	moveq	r3, #1
 80096e4:	61a3      	streq	r3, [r4, #24]
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f820 	bl	800972c <__sfp>
 80096ec:	6060      	str	r0, [r4, #4]
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 f81c 	bl	800972c <__sfp>
 80096f4:	60a0      	str	r0, [r4, #8]
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f818 	bl	800972c <__sfp>
 80096fc:	2200      	movs	r2, #0
 80096fe:	60e0      	str	r0, [r4, #12]
 8009700:	2104      	movs	r1, #4
 8009702:	6860      	ldr	r0, [r4, #4]
 8009704:	f7ff ff82 	bl	800960c <std>
 8009708:	68a0      	ldr	r0, [r4, #8]
 800970a:	2201      	movs	r2, #1
 800970c:	2109      	movs	r1, #9
 800970e:	f7ff ff7d 	bl	800960c <std>
 8009712:	68e0      	ldr	r0, [r4, #12]
 8009714:	2202      	movs	r2, #2
 8009716:	2112      	movs	r1, #18
 8009718:	f7ff ff78 	bl	800960c <std>
 800971c:	2301      	movs	r3, #1
 800971e:	61a3      	str	r3, [r4, #24]
 8009720:	e7d2      	b.n	80096c8 <__sinit+0xc>
 8009722:	bf00      	nop
 8009724:	0800a648 	.word	0x0800a648
 8009728:	08009655 	.word	0x08009655

0800972c <__sfp>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	4607      	mov	r7, r0
 8009730:	f7ff ffac 	bl	800968c <__sfp_lock_acquire>
 8009734:	4b1e      	ldr	r3, [pc, #120]	; (80097b0 <__sfp+0x84>)
 8009736:	681e      	ldr	r6, [r3, #0]
 8009738:	69b3      	ldr	r3, [r6, #24]
 800973a:	b913      	cbnz	r3, 8009742 <__sfp+0x16>
 800973c:	4630      	mov	r0, r6
 800973e:	f7ff ffbd 	bl	80096bc <__sinit>
 8009742:	3648      	adds	r6, #72	; 0x48
 8009744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009748:	3b01      	subs	r3, #1
 800974a:	d503      	bpl.n	8009754 <__sfp+0x28>
 800974c:	6833      	ldr	r3, [r6, #0]
 800974e:	b30b      	cbz	r3, 8009794 <__sfp+0x68>
 8009750:	6836      	ldr	r6, [r6, #0]
 8009752:	e7f7      	b.n	8009744 <__sfp+0x18>
 8009754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009758:	b9d5      	cbnz	r5, 8009790 <__sfp+0x64>
 800975a:	4b16      	ldr	r3, [pc, #88]	; (80097b4 <__sfp+0x88>)
 800975c:	60e3      	str	r3, [r4, #12]
 800975e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009762:	6665      	str	r5, [r4, #100]	; 0x64
 8009764:	f000 f847 	bl	80097f6 <__retarget_lock_init_recursive>
 8009768:	f7ff ff96 	bl	8009698 <__sfp_lock_release>
 800976c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009774:	6025      	str	r5, [r4, #0]
 8009776:	61a5      	str	r5, [r4, #24]
 8009778:	2208      	movs	r2, #8
 800977a:	4629      	mov	r1, r5
 800977c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009780:	f7ff ff24 	bl	80095cc <memset>
 8009784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800978c:	4620      	mov	r0, r4
 800978e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009790:	3468      	adds	r4, #104	; 0x68
 8009792:	e7d9      	b.n	8009748 <__sfp+0x1c>
 8009794:	2104      	movs	r1, #4
 8009796:	4638      	mov	r0, r7
 8009798:	f7ff ff62 	bl	8009660 <__sfmoreglue>
 800979c:	4604      	mov	r4, r0
 800979e:	6030      	str	r0, [r6, #0]
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d1d5      	bne.n	8009750 <__sfp+0x24>
 80097a4:	f7ff ff78 	bl	8009698 <__sfp_lock_release>
 80097a8:	230c      	movs	r3, #12
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	e7ee      	b.n	800978c <__sfp+0x60>
 80097ae:	bf00      	nop
 80097b0:	0800a648 	.word	0x0800a648
 80097b4:	ffff0001 	.word	0xffff0001

080097b8 <_fwalk_reent>:
 80097b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097bc:	4606      	mov	r6, r0
 80097be:	4688      	mov	r8, r1
 80097c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097c4:	2700      	movs	r7, #0
 80097c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097ca:	f1b9 0901 	subs.w	r9, r9, #1
 80097ce:	d505      	bpl.n	80097dc <_fwalk_reent+0x24>
 80097d0:	6824      	ldr	r4, [r4, #0]
 80097d2:	2c00      	cmp	r4, #0
 80097d4:	d1f7      	bne.n	80097c6 <_fwalk_reent+0xe>
 80097d6:	4638      	mov	r0, r7
 80097d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097dc:	89ab      	ldrh	r3, [r5, #12]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d907      	bls.n	80097f2 <_fwalk_reent+0x3a>
 80097e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097e6:	3301      	adds	r3, #1
 80097e8:	d003      	beq.n	80097f2 <_fwalk_reent+0x3a>
 80097ea:	4629      	mov	r1, r5
 80097ec:	4630      	mov	r0, r6
 80097ee:	47c0      	blx	r8
 80097f0:	4307      	orrs	r7, r0
 80097f2:	3568      	adds	r5, #104	; 0x68
 80097f4:	e7e9      	b.n	80097ca <_fwalk_reent+0x12>

080097f6 <__retarget_lock_init_recursive>:
 80097f6:	4770      	bx	lr

080097f8 <__retarget_lock_acquire_recursive>:
 80097f8:	4770      	bx	lr

080097fa <__retarget_lock_release_recursive>:
 80097fa:	4770      	bx	lr

080097fc <sbrk_aligned>:
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	4e0e      	ldr	r6, [pc, #56]	; (8009838 <sbrk_aligned+0x3c>)
 8009800:	460c      	mov	r4, r1
 8009802:	6831      	ldr	r1, [r6, #0]
 8009804:	4605      	mov	r5, r0
 8009806:	b911      	cbnz	r1, 800980e <sbrk_aligned+0x12>
 8009808:	f000 fb7a 	bl	8009f00 <_sbrk_r>
 800980c:	6030      	str	r0, [r6, #0]
 800980e:	4621      	mov	r1, r4
 8009810:	4628      	mov	r0, r5
 8009812:	f000 fb75 	bl	8009f00 <_sbrk_r>
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	d00a      	beq.n	8009830 <sbrk_aligned+0x34>
 800981a:	1cc4      	adds	r4, r0, #3
 800981c:	f024 0403 	bic.w	r4, r4, #3
 8009820:	42a0      	cmp	r0, r4
 8009822:	d007      	beq.n	8009834 <sbrk_aligned+0x38>
 8009824:	1a21      	subs	r1, r4, r0
 8009826:	4628      	mov	r0, r5
 8009828:	f000 fb6a 	bl	8009f00 <_sbrk_r>
 800982c:	3001      	adds	r0, #1
 800982e:	d101      	bne.n	8009834 <sbrk_aligned+0x38>
 8009830:	f04f 34ff 	mov.w	r4, #4294967295
 8009834:	4620      	mov	r0, r4
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	20001be4 	.word	0x20001be4

0800983c <_malloc_r>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	1ccd      	adds	r5, r1, #3
 8009842:	f025 0503 	bic.w	r5, r5, #3
 8009846:	3508      	adds	r5, #8
 8009848:	2d0c      	cmp	r5, #12
 800984a:	bf38      	it	cc
 800984c:	250c      	movcc	r5, #12
 800984e:	2d00      	cmp	r5, #0
 8009850:	4607      	mov	r7, r0
 8009852:	db01      	blt.n	8009858 <_malloc_r+0x1c>
 8009854:	42a9      	cmp	r1, r5
 8009856:	d905      	bls.n	8009864 <_malloc_r+0x28>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	2600      	movs	r6, #0
 800985e:	4630      	mov	r0, r6
 8009860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009864:	4e2e      	ldr	r6, [pc, #184]	; (8009920 <_malloc_r+0xe4>)
 8009866:	f000 fdbb 	bl	800a3e0 <__malloc_lock>
 800986a:	6833      	ldr	r3, [r6, #0]
 800986c:	461c      	mov	r4, r3
 800986e:	bb34      	cbnz	r4, 80098be <_malloc_r+0x82>
 8009870:	4629      	mov	r1, r5
 8009872:	4638      	mov	r0, r7
 8009874:	f7ff ffc2 	bl	80097fc <sbrk_aligned>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	4604      	mov	r4, r0
 800987c:	d14d      	bne.n	800991a <_malloc_r+0xde>
 800987e:	6834      	ldr	r4, [r6, #0]
 8009880:	4626      	mov	r6, r4
 8009882:	2e00      	cmp	r6, #0
 8009884:	d140      	bne.n	8009908 <_malloc_r+0xcc>
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	4631      	mov	r1, r6
 800988a:	4638      	mov	r0, r7
 800988c:	eb04 0803 	add.w	r8, r4, r3
 8009890:	f000 fb36 	bl	8009f00 <_sbrk_r>
 8009894:	4580      	cmp	r8, r0
 8009896:	d13a      	bne.n	800990e <_malloc_r+0xd2>
 8009898:	6821      	ldr	r1, [r4, #0]
 800989a:	3503      	adds	r5, #3
 800989c:	1a6d      	subs	r5, r5, r1
 800989e:	f025 0503 	bic.w	r5, r5, #3
 80098a2:	3508      	adds	r5, #8
 80098a4:	2d0c      	cmp	r5, #12
 80098a6:	bf38      	it	cc
 80098a8:	250c      	movcc	r5, #12
 80098aa:	4629      	mov	r1, r5
 80098ac:	4638      	mov	r0, r7
 80098ae:	f7ff ffa5 	bl	80097fc <sbrk_aligned>
 80098b2:	3001      	adds	r0, #1
 80098b4:	d02b      	beq.n	800990e <_malloc_r+0xd2>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	442b      	add	r3, r5
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	e00e      	b.n	80098dc <_malloc_r+0xa0>
 80098be:	6822      	ldr	r2, [r4, #0]
 80098c0:	1b52      	subs	r2, r2, r5
 80098c2:	d41e      	bmi.n	8009902 <_malloc_r+0xc6>
 80098c4:	2a0b      	cmp	r2, #11
 80098c6:	d916      	bls.n	80098f6 <_malloc_r+0xba>
 80098c8:	1961      	adds	r1, r4, r5
 80098ca:	42a3      	cmp	r3, r4
 80098cc:	6025      	str	r5, [r4, #0]
 80098ce:	bf18      	it	ne
 80098d0:	6059      	strne	r1, [r3, #4]
 80098d2:	6863      	ldr	r3, [r4, #4]
 80098d4:	bf08      	it	eq
 80098d6:	6031      	streq	r1, [r6, #0]
 80098d8:	5162      	str	r2, [r4, r5]
 80098da:	604b      	str	r3, [r1, #4]
 80098dc:	4638      	mov	r0, r7
 80098de:	f104 060b 	add.w	r6, r4, #11
 80098e2:	f000 fd83 	bl	800a3ec <__malloc_unlock>
 80098e6:	f026 0607 	bic.w	r6, r6, #7
 80098ea:	1d23      	adds	r3, r4, #4
 80098ec:	1af2      	subs	r2, r6, r3
 80098ee:	d0b6      	beq.n	800985e <_malloc_r+0x22>
 80098f0:	1b9b      	subs	r3, r3, r6
 80098f2:	50a3      	str	r3, [r4, r2]
 80098f4:	e7b3      	b.n	800985e <_malloc_r+0x22>
 80098f6:	6862      	ldr	r2, [r4, #4]
 80098f8:	42a3      	cmp	r3, r4
 80098fa:	bf0c      	ite	eq
 80098fc:	6032      	streq	r2, [r6, #0]
 80098fe:	605a      	strne	r2, [r3, #4]
 8009900:	e7ec      	b.n	80098dc <_malloc_r+0xa0>
 8009902:	4623      	mov	r3, r4
 8009904:	6864      	ldr	r4, [r4, #4]
 8009906:	e7b2      	b.n	800986e <_malloc_r+0x32>
 8009908:	4634      	mov	r4, r6
 800990a:	6876      	ldr	r6, [r6, #4]
 800990c:	e7b9      	b.n	8009882 <_malloc_r+0x46>
 800990e:	230c      	movs	r3, #12
 8009910:	603b      	str	r3, [r7, #0]
 8009912:	4638      	mov	r0, r7
 8009914:	f000 fd6a 	bl	800a3ec <__malloc_unlock>
 8009918:	e7a1      	b.n	800985e <_malloc_r+0x22>
 800991a:	6025      	str	r5, [r4, #0]
 800991c:	e7de      	b.n	80098dc <_malloc_r+0xa0>
 800991e:	bf00      	nop
 8009920:	20001be0 	.word	0x20001be0

08009924 <__sfputc_r>:
 8009924:	6893      	ldr	r3, [r2, #8]
 8009926:	3b01      	subs	r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	b410      	push	{r4}
 800992c:	6093      	str	r3, [r2, #8]
 800992e:	da08      	bge.n	8009942 <__sfputc_r+0x1e>
 8009930:	6994      	ldr	r4, [r2, #24]
 8009932:	42a3      	cmp	r3, r4
 8009934:	db01      	blt.n	800993a <__sfputc_r+0x16>
 8009936:	290a      	cmp	r1, #10
 8009938:	d103      	bne.n	8009942 <__sfputc_r+0x1e>
 800993a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800993e:	f000 bb33 	b.w	8009fa8 <__swbuf_r>
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	1c58      	adds	r0, r3, #1
 8009946:	6010      	str	r0, [r2, #0]
 8009948:	7019      	strb	r1, [r3, #0]
 800994a:	4608      	mov	r0, r1
 800994c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009950:	4770      	bx	lr

08009952 <__sfputs_r>:
 8009952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	4614      	mov	r4, r2
 800995a:	18d5      	adds	r5, r2, r3
 800995c:	42ac      	cmp	r4, r5
 800995e:	d101      	bne.n	8009964 <__sfputs_r+0x12>
 8009960:	2000      	movs	r0, #0
 8009962:	e007      	b.n	8009974 <__sfputs_r+0x22>
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	463a      	mov	r2, r7
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff ffda 	bl	8009924 <__sfputc_r>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d1f3      	bne.n	800995c <__sfputs_r+0xa>
 8009974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009978 <_vfiprintf_r>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	460d      	mov	r5, r1
 800997e:	b09d      	sub	sp, #116	; 0x74
 8009980:	4614      	mov	r4, r2
 8009982:	4698      	mov	r8, r3
 8009984:	4606      	mov	r6, r0
 8009986:	b118      	cbz	r0, 8009990 <_vfiprintf_r+0x18>
 8009988:	6983      	ldr	r3, [r0, #24]
 800998a:	b90b      	cbnz	r3, 8009990 <_vfiprintf_r+0x18>
 800998c:	f7ff fe96 	bl	80096bc <__sinit>
 8009990:	4b89      	ldr	r3, [pc, #548]	; (8009bb8 <_vfiprintf_r+0x240>)
 8009992:	429d      	cmp	r5, r3
 8009994:	d11b      	bne.n	80099ce <_vfiprintf_r+0x56>
 8009996:	6875      	ldr	r5, [r6, #4]
 8009998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800999a:	07d9      	lsls	r1, r3, #31
 800999c:	d405      	bmi.n	80099aa <_vfiprintf_r+0x32>
 800999e:	89ab      	ldrh	r3, [r5, #12]
 80099a0:	059a      	lsls	r2, r3, #22
 80099a2:	d402      	bmi.n	80099aa <_vfiprintf_r+0x32>
 80099a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099a6:	f7ff ff27 	bl	80097f8 <__retarget_lock_acquire_recursive>
 80099aa:	89ab      	ldrh	r3, [r5, #12]
 80099ac:	071b      	lsls	r3, r3, #28
 80099ae:	d501      	bpl.n	80099b4 <_vfiprintf_r+0x3c>
 80099b0:	692b      	ldr	r3, [r5, #16]
 80099b2:	b9eb      	cbnz	r3, 80099f0 <_vfiprintf_r+0x78>
 80099b4:	4629      	mov	r1, r5
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 fb5a 	bl	800a070 <__swsetup_r>
 80099bc:	b1c0      	cbz	r0, 80099f0 <_vfiprintf_r+0x78>
 80099be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c0:	07dc      	lsls	r4, r3, #31
 80099c2:	d50e      	bpl.n	80099e2 <_vfiprintf_r+0x6a>
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	b01d      	add	sp, #116	; 0x74
 80099ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ce:	4b7b      	ldr	r3, [pc, #492]	; (8009bbc <_vfiprintf_r+0x244>)
 80099d0:	429d      	cmp	r5, r3
 80099d2:	d101      	bne.n	80099d8 <_vfiprintf_r+0x60>
 80099d4:	68b5      	ldr	r5, [r6, #8]
 80099d6:	e7df      	b.n	8009998 <_vfiprintf_r+0x20>
 80099d8:	4b79      	ldr	r3, [pc, #484]	; (8009bc0 <_vfiprintf_r+0x248>)
 80099da:	429d      	cmp	r5, r3
 80099dc:	bf08      	it	eq
 80099de:	68f5      	ldreq	r5, [r6, #12]
 80099e0:	e7da      	b.n	8009998 <_vfiprintf_r+0x20>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	0598      	lsls	r0, r3, #22
 80099e6:	d4ed      	bmi.n	80099c4 <_vfiprintf_r+0x4c>
 80099e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ea:	f7ff ff06 	bl	80097fa <__retarget_lock_release_recursive>
 80099ee:	e7e9      	b.n	80099c4 <_vfiprintf_r+0x4c>
 80099f0:	2300      	movs	r3, #0
 80099f2:	9309      	str	r3, [sp, #36]	; 0x24
 80099f4:	2320      	movs	r3, #32
 80099f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80099fe:	2330      	movs	r3, #48	; 0x30
 8009a00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bc4 <_vfiprintf_r+0x24c>
 8009a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a08:	f04f 0901 	mov.w	r9, #1
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	469a      	mov	sl, r3
 8009a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a14:	b10a      	cbz	r2, 8009a1a <_vfiprintf_r+0xa2>
 8009a16:	2a25      	cmp	r2, #37	; 0x25
 8009a18:	d1f9      	bne.n	8009a0e <_vfiprintf_r+0x96>
 8009a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a1e:	d00b      	beq.n	8009a38 <_vfiprintf_r+0xc0>
 8009a20:	465b      	mov	r3, fp
 8009a22:	4622      	mov	r2, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7ff ff93 	bl	8009952 <__sfputs_r>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	f000 80aa 	beq.w	8009b86 <_vfiprintf_r+0x20e>
 8009a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a34:	445a      	add	r2, fp
 8009a36:	9209      	str	r2, [sp, #36]	; 0x24
 8009a38:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 80a2 	beq.w	8009b86 <_vfiprintf_r+0x20e>
 8009a42:	2300      	movs	r3, #0
 8009a44:	f04f 32ff 	mov.w	r2, #4294967295
 8009a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a4c:	f10a 0a01 	add.w	sl, sl, #1
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	9307      	str	r3, [sp, #28]
 8009a54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a58:	931a      	str	r3, [sp, #104]	; 0x68
 8009a5a:	4654      	mov	r4, sl
 8009a5c:	2205      	movs	r2, #5
 8009a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a62:	4858      	ldr	r0, [pc, #352]	; (8009bc4 <_vfiprintf_r+0x24c>)
 8009a64:	f7f6 fb8c 	bl	8000180 <memchr>
 8009a68:	9a04      	ldr	r2, [sp, #16]
 8009a6a:	b9d8      	cbnz	r0, 8009aa4 <_vfiprintf_r+0x12c>
 8009a6c:	06d1      	lsls	r1, r2, #27
 8009a6e:	bf44      	itt	mi
 8009a70:	2320      	movmi	r3, #32
 8009a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a76:	0713      	lsls	r3, r2, #28
 8009a78:	bf44      	itt	mi
 8009a7a:	232b      	movmi	r3, #43	; 0x2b
 8009a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a80:	f89a 3000 	ldrb.w	r3, [sl]
 8009a84:	2b2a      	cmp	r3, #42	; 0x2a
 8009a86:	d015      	beq.n	8009ab4 <_vfiprintf_r+0x13c>
 8009a88:	9a07      	ldr	r2, [sp, #28]
 8009a8a:	4654      	mov	r4, sl
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f04f 0c0a 	mov.w	ip, #10
 8009a92:	4621      	mov	r1, r4
 8009a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a98:	3b30      	subs	r3, #48	; 0x30
 8009a9a:	2b09      	cmp	r3, #9
 8009a9c:	d94e      	bls.n	8009b3c <_vfiprintf_r+0x1c4>
 8009a9e:	b1b0      	cbz	r0, 8009ace <_vfiprintf_r+0x156>
 8009aa0:	9207      	str	r2, [sp, #28]
 8009aa2:	e014      	b.n	8009ace <_vfiprintf_r+0x156>
 8009aa4:	eba0 0308 	sub.w	r3, r0, r8
 8009aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8009aac:	4313      	orrs	r3, r2
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	46a2      	mov	sl, r4
 8009ab2:	e7d2      	b.n	8009a5a <_vfiprintf_r+0xe2>
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	1d19      	adds	r1, r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	9103      	str	r1, [sp, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bfbb      	ittet	lt
 8009ac0:	425b      	neglt	r3, r3
 8009ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac6:	9307      	strge	r3, [sp, #28]
 8009ac8:	9307      	strlt	r3, [sp, #28]
 8009aca:	bfb8      	it	lt
 8009acc:	9204      	strlt	r2, [sp, #16]
 8009ace:	7823      	ldrb	r3, [r4, #0]
 8009ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad2:	d10c      	bne.n	8009aee <_vfiprintf_r+0x176>
 8009ad4:	7863      	ldrb	r3, [r4, #1]
 8009ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad8:	d135      	bne.n	8009b46 <_vfiprintf_r+0x1ce>
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	1d1a      	adds	r2, r3, #4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	9203      	str	r2, [sp, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfb8      	it	lt
 8009ae6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aea:	3402      	adds	r4, #2
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bd4 <_vfiprintf_r+0x25c>
 8009af2:	7821      	ldrb	r1, [r4, #0]
 8009af4:	2203      	movs	r2, #3
 8009af6:	4650      	mov	r0, sl
 8009af8:	f7f6 fb42 	bl	8000180 <memchr>
 8009afc:	b140      	cbz	r0, 8009b10 <_vfiprintf_r+0x198>
 8009afe:	2340      	movs	r3, #64	; 0x40
 8009b00:	eba0 000a 	sub.w	r0, r0, sl
 8009b04:	fa03 f000 	lsl.w	r0, r3, r0
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	4303      	orrs	r3, r0
 8009b0c:	3401      	adds	r4, #1
 8009b0e:	9304      	str	r3, [sp, #16]
 8009b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b14:	482c      	ldr	r0, [pc, #176]	; (8009bc8 <_vfiprintf_r+0x250>)
 8009b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b1a:	2206      	movs	r2, #6
 8009b1c:	f7f6 fb30 	bl	8000180 <memchr>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d03f      	beq.n	8009ba4 <_vfiprintf_r+0x22c>
 8009b24:	4b29      	ldr	r3, [pc, #164]	; (8009bcc <_vfiprintf_r+0x254>)
 8009b26:	bb1b      	cbnz	r3, 8009b70 <_vfiprintf_r+0x1f8>
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	3307      	adds	r3, #7
 8009b2c:	f023 0307 	bic.w	r3, r3, #7
 8009b30:	3308      	adds	r3, #8
 8009b32:	9303      	str	r3, [sp, #12]
 8009b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b36:	443b      	add	r3, r7
 8009b38:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3a:	e767      	b.n	8009a0c <_vfiprintf_r+0x94>
 8009b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b40:	460c      	mov	r4, r1
 8009b42:	2001      	movs	r0, #1
 8009b44:	e7a5      	b.n	8009a92 <_vfiprintf_r+0x11a>
 8009b46:	2300      	movs	r3, #0
 8009b48:	3401      	adds	r4, #1
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f04f 0c0a 	mov.w	ip, #10
 8009b52:	4620      	mov	r0, r4
 8009b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b58:	3a30      	subs	r2, #48	; 0x30
 8009b5a:	2a09      	cmp	r2, #9
 8009b5c:	d903      	bls.n	8009b66 <_vfiprintf_r+0x1ee>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0c5      	beq.n	8009aee <_vfiprintf_r+0x176>
 8009b62:	9105      	str	r1, [sp, #20]
 8009b64:	e7c3      	b.n	8009aee <_vfiprintf_r+0x176>
 8009b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e7f0      	b.n	8009b52 <_vfiprintf_r+0x1da>
 8009b70:	ab03      	add	r3, sp, #12
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	462a      	mov	r2, r5
 8009b76:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <_vfiprintf_r+0x258>)
 8009b78:	a904      	add	r1, sp, #16
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f3af 8000 	nop.w
 8009b80:	4607      	mov	r7, r0
 8009b82:	1c78      	adds	r0, r7, #1
 8009b84:	d1d6      	bne.n	8009b34 <_vfiprintf_r+0x1bc>
 8009b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b88:	07d9      	lsls	r1, r3, #31
 8009b8a:	d405      	bmi.n	8009b98 <_vfiprintf_r+0x220>
 8009b8c:	89ab      	ldrh	r3, [r5, #12]
 8009b8e:	059a      	lsls	r2, r3, #22
 8009b90:	d402      	bmi.n	8009b98 <_vfiprintf_r+0x220>
 8009b92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b94:	f7ff fe31 	bl	80097fa <__retarget_lock_release_recursive>
 8009b98:	89ab      	ldrh	r3, [r5, #12]
 8009b9a:	065b      	lsls	r3, r3, #25
 8009b9c:	f53f af12 	bmi.w	80099c4 <_vfiprintf_r+0x4c>
 8009ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ba2:	e711      	b.n	80099c8 <_vfiprintf_r+0x50>
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <_vfiprintf_r+0x258>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f000 f880 	bl	8009cb4 <_printf_i>
 8009bb4:	e7e4      	b.n	8009b80 <_vfiprintf_r+0x208>
 8009bb6:	bf00      	nop
 8009bb8:	0800a66c 	.word	0x0800a66c
 8009bbc:	0800a68c 	.word	0x0800a68c
 8009bc0:	0800a64c 	.word	0x0800a64c
 8009bc4:	0800a6ac 	.word	0x0800a6ac
 8009bc8:	0800a6b6 	.word	0x0800a6b6
 8009bcc:	00000000 	.word	0x00000000
 8009bd0:	08009953 	.word	0x08009953
 8009bd4:	0800a6b2 	.word	0x0800a6b2

08009bd8 <_printf_common>:
 8009bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	4616      	mov	r6, r2
 8009bde:	4699      	mov	r9, r3
 8009be0:	688a      	ldr	r2, [r1, #8]
 8009be2:	690b      	ldr	r3, [r1, #16]
 8009be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009be8:	4293      	cmp	r3, r2
 8009bea:	bfb8      	it	lt
 8009bec:	4613      	movlt	r3, r2
 8009bee:	6033      	str	r3, [r6, #0]
 8009bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	b10a      	cbz	r2, 8009bfe <_printf_common+0x26>
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	6033      	str	r3, [r6, #0]
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	0699      	lsls	r1, r3, #26
 8009c02:	bf42      	ittt	mi
 8009c04:	6833      	ldrmi	r3, [r6, #0]
 8009c06:	3302      	addmi	r3, #2
 8009c08:	6033      	strmi	r3, [r6, #0]
 8009c0a:	6825      	ldr	r5, [r4, #0]
 8009c0c:	f015 0506 	ands.w	r5, r5, #6
 8009c10:	d106      	bne.n	8009c20 <_printf_common+0x48>
 8009c12:	f104 0a19 	add.w	sl, r4, #25
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	6832      	ldr	r2, [r6, #0]
 8009c1a:	1a9b      	subs	r3, r3, r2
 8009c1c:	42ab      	cmp	r3, r5
 8009c1e:	dc26      	bgt.n	8009c6e <_printf_common+0x96>
 8009c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c24:	1e13      	subs	r3, r2, #0
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	bf18      	it	ne
 8009c2a:	2301      	movne	r3, #1
 8009c2c:	0692      	lsls	r2, r2, #26
 8009c2e:	d42b      	bmi.n	8009c88 <_printf_common+0xb0>
 8009c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c34:	4649      	mov	r1, r9
 8009c36:	4638      	mov	r0, r7
 8009c38:	47c0      	blx	r8
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d01e      	beq.n	8009c7c <_printf_common+0xa4>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	68e5      	ldr	r5, [r4, #12]
 8009c42:	6832      	ldr	r2, [r6, #0]
 8009c44:	f003 0306 	and.w	r3, r3, #6
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	bf08      	it	eq
 8009c4c:	1aad      	subeq	r5, r5, r2
 8009c4e:	68a3      	ldr	r3, [r4, #8]
 8009c50:	6922      	ldr	r2, [r4, #16]
 8009c52:	bf0c      	ite	eq
 8009c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c58:	2500      	movne	r5, #0
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	bfc4      	itt	gt
 8009c5e:	1a9b      	subgt	r3, r3, r2
 8009c60:	18ed      	addgt	r5, r5, r3
 8009c62:	2600      	movs	r6, #0
 8009c64:	341a      	adds	r4, #26
 8009c66:	42b5      	cmp	r5, r6
 8009c68:	d11a      	bne.n	8009ca0 <_printf_common+0xc8>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e008      	b.n	8009c80 <_printf_common+0xa8>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4652      	mov	r2, sl
 8009c72:	4649      	mov	r1, r9
 8009c74:	4638      	mov	r0, r7
 8009c76:	47c0      	blx	r8
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d103      	bne.n	8009c84 <_printf_common+0xac>
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c84:	3501      	adds	r5, #1
 8009c86:	e7c6      	b.n	8009c16 <_printf_common+0x3e>
 8009c88:	18e1      	adds	r1, r4, r3
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	2030      	movs	r0, #48	; 0x30
 8009c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c92:	4422      	add	r2, r4
 8009c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	e7c7      	b.n	8009c30 <_printf_common+0x58>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	47c0      	blx	r8
 8009caa:	3001      	adds	r0, #1
 8009cac:	d0e6      	beq.n	8009c7c <_printf_common+0xa4>
 8009cae:	3601      	adds	r6, #1
 8009cb0:	e7d9      	b.n	8009c66 <_printf_common+0x8e>
	...

08009cb4 <_printf_i>:
 8009cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	7e0f      	ldrb	r7, [r1, #24]
 8009cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cbc:	2f78      	cmp	r7, #120	; 0x78
 8009cbe:	4691      	mov	r9, r2
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	469a      	mov	sl, r3
 8009cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cca:	d807      	bhi.n	8009cdc <_printf_i+0x28>
 8009ccc:	2f62      	cmp	r7, #98	; 0x62
 8009cce:	d80a      	bhi.n	8009ce6 <_printf_i+0x32>
 8009cd0:	2f00      	cmp	r7, #0
 8009cd2:	f000 80d8 	beq.w	8009e86 <_printf_i+0x1d2>
 8009cd6:	2f58      	cmp	r7, #88	; 0x58
 8009cd8:	f000 80a3 	beq.w	8009e22 <_printf_i+0x16e>
 8009cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ce4:	e03a      	b.n	8009d5c <_printf_i+0xa8>
 8009ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cea:	2b15      	cmp	r3, #21
 8009cec:	d8f6      	bhi.n	8009cdc <_printf_i+0x28>
 8009cee:	a101      	add	r1, pc, #4	; (adr r1, 8009cf4 <_printf_i+0x40>)
 8009cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cf4:	08009d4d 	.word	0x08009d4d
 8009cf8:	08009d61 	.word	0x08009d61
 8009cfc:	08009cdd 	.word	0x08009cdd
 8009d00:	08009cdd 	.word	0x08009cdd
 8009d04:	08009cdd 	.word	0x08009cdd
 8009d08:	08009cdd 	.word	0x08009cdd
 8009d0c:	08009d61 	.word	0x08009d61
 8009d10:	08009cdd 	.word	0x08009cdd
 8009d14:	08009cdd 	.word	0x08009cdd
 8009d18:	08009cdd 	.word	0x08009cdd
 8009d1c:	08009cdd 	.word	0x08009cdd
 8009d20:	08009e6d 	.word	0x08009e6d
 8009d24:	08009d91 	.word	0x08009d91
 8009d28:	08009e4f 	.word	0x08009e4f
 8009d2c:	08009cdd 	.word	0x08009cdd
 8009d30:	08009cdd 	.word	0x08009cdd
 8009d34:	08009e8f 	.word	0x08009e8f
 8009d38:	08009cdd 	.word	0x08009cdd
 8009d3c:	08009d91 	.word	0x08009d91
 8009d40:	08009cdd 	.word	0x08009cdd
 8009d44:	08009cdd 	.word	0x08009cdd
 8009d48:	08009e57 	.word	0x08009e57
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	1d1a      	adds	r2, r3, #4
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	602a      	str	r2, [r5, #0]
 8009d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0a3      	b.n	8009ea8 <_printf_i+0x1f4>
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	6829      	ldr	r1, [r5, #0]
 8009d64:	0606      	lsls	r6, r0, #24
 8009d66:	f101 0304 	add.w	r3, r1, #4
 8009d6a:	d50a      	bpl.n	8009d82 <_printf_i+0xce>
 8009d6c:	680e      	ldr	r6, [r1, #0]
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	2e00      	cmp	r6, #0
 8009d72:	da03      	bge.n	8009d7c <_printf_i+0xc8>
 8009d74:	232d      	movs	r3, #45	; 0x2d
 8009d76:	4276      	negs	r6, r6
 8009d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7c:	485e      	ldr	r0, [pc, #376]	; (8009ef8 <_printf_i+0x244>)
 8009d7e:	230a      	movs	r3, #10
 8009d80:	e019      	b.n	8009db6 <_printf_i+0x102>
 8009d82:	680e      	ldr	r6, [r1, #0]
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d8a:	bf18      	it	ne
 8009d8c:	b236      	sxthne	r6, r6
 8009d8e:	e7ef      	b.n	8009d70 <_printf_i+0xbc>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	6820      	ldr	r0, [r4, #0]
 8009d94:	1d19      	adds	r1, r3, #4
 8009d96:	6029      	str	r1, [r5, #0]
 8009d98:	0601      	lsls	r1, r0, #24
 8009d9a:	d501      	bpl.n	8009da0 <_printf_i+0xec>
 8009d9c:	681e      	ldr	r6, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <_printf_i+0xf2>
 8009da0:	0646      	lsls	r6, r0, #25
 8009da2:	d5fb      	bpl.n	8009d9c <_printf_i+0xe8>
 8009da4:	881e      	ldrh	r6, [r3, #0]
 8009da6:	4854      	ldr	r0, [pc, #336]	; (8009ef8 <_printf_i+0x244>)
 8009da8:	2f6f      	cmp	r7, #111	; 0x6f
 8009daa:	bf0c      	ite	eq
 8009dac:	2308      	moveq	r3, #8
 8009dae:	230a      	movne	r3, #10
 8009db0:	2100      	movs	r1, #0
 8009db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009db6:	6865      	ldr	r5, [r4, #4]
 8009db8:	60a5      	str	r5, [r4, #8]
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	bfa2      	ittt	ge
 8009dbe:	6821      	ldrge	r1, [r4, #0]
 8009dc0:	f021 0104 	bicge.w	r1, r1, #4
 8009dc4:	6021      	strge	r1, [r4, #0]
 8009dc6:	b90e      	cbnz	r6, 8009dcc <_printf_i+0x118>
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	d04d      	beq.n	8009e68 <_printf_i+0x1b4>
 8009dcc:	4615      	mov	r5, r2
 8009dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8009dd6:	5dc7      	ldrb	r7, [r0, r7]
 8009dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ddc:	4637      	mov	r7, r6
 8009dde:	42bb      	cmp	r3, r7
 8009de0:	460e      	mov	r6, r1
 8009de2:	d9f4      	bls.n	8009dce <_printf_i+0x11a>
 8009de4:	2b08      	cmp	r3, #8
 8009de6:	d10b      	bne.n	8009e00 <_printf_i+0x14c>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	07de      	lsls	r6, r3, #31
 8009dec:	d508      	bpl.n	8009e00 <_printf_i+0x14c>
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	6861      	ldr	r1, [r4, #4]
 8009df2:	4299      	cmp	r1, r3
 8009df4:	bfde      	ittt	le
 8009df6:	2330      	movle	r3, #48	; 0x30
 8009df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e00:	1b52      	subs	r2, r2, r5
 8009e02:	6122      	str	r2, [r4, #16]
 8009e04:	f8cd a000 	str.w	sl, [sp]
 8009e08:	464b      	mov	r3, r9
 8009e0a:	aa03      	add	r2, sp, #12
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4640      	mov	r0, r8
 8009e10:	f7ff fee2 	bl	8009bd8 <_printf_common>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d14c      	bne.n	8009eb2 <_printf_i+0x1fe>
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1c:	b004      	add	sp, #16
 8009e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e22:	4835      	ldr	r0, [pc, #212]	; (8009ef8 <_printf_i+0x244>)
 8009e24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e28:	6829      	ldr	r1, [r5, #0]
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e30:	6029      	str	r1, [r5, #0]
 8009e32:	061d      	lsls	r5, r3, #24
 8009e34:	d514      	bpl.n	8009e60 <_printf_i+0x1ac>
 8009e36:	07df      	lsls	r7, r3, #31
 8009e38:	bf44      	itt	mi
 8009e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e3e:	6023      	strmi	r3, [r4, #0]
 8009e40:	b91e      	cbnz	r6, 8009e4a <_printf_i+0x196>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	f023 0320 	bic.w	r3, r3, #32
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	e7b0      	b.n	8009db0 <_printf_i+0xfc>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	f043 0320 	orr.w	r3, r3, #32
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	2378      	movs	r3, #120	; 0x78
 8009e58:	4828      	ldr	r0, [pc, #160]	; (8009efc <_printf_i+0x248>)
 8009e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e5e:	e7e3      	b.n	8009e28 <_printf_i+0x174>
 8009e60:	0659      	lsls	r1, r3, #25
 8009e62:	bf48      	it	mi
 8009e64:	b2b6      	uxthmi	r6, r6
 8009e66:	e7e6      	b.n	8009e36 <_printf_i+0x182>
 8009e68:	4615      	mov	r5, r2
 8009e6a:	e7bb      	b.n	8009de4 <_printf_i+0x130>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	6826      	ldr	r6, [r4, #0]
 8009e70:	6961      	ldr	r1, [r4, #20]
 8009e72:	1d18      	adds	r0, r3, #4
 8009e74:	6028      	str	r0, [r5, #0]
 8009e76:	0635      	lsls	r5, r6, #24
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	d501      	bpl.n	8009e80 <_printf_i+0x1cc>
 8009e7c:	6019      	str	r1, [r3, #0]
 8009e7e:	e002      	b.n	8009e86 <_printf_i+0x1d2>
 8009e80:	0670      	lsls	r0, r6, #25
 8009e82:	d5fb      	bpl.n	8009e7c <_printf_i+0x1c8>
 8009e84:	8019      	strh	r1, [r3, #0]
 8009e86:	2300      	movs	r3, #0
 8009e88:	6123      	str	r3, [r4, #16]
 8009e8a:	4615      	mov	r5, r2
 8009e8c:	e7ba      	b.n	8009e04 <_printf_i+0x150>
 8009e8e:	682b      	ldr	r3, [r5, #0]
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	602a      	str	r2, [r5, #0]
 8009e94:	681d      	ldr	r5, [r3, #0]
 8009e96:	6862      	ldr	r2, [r4, #4]
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f7f6 f970 	bl	8000180 <memchr>
 8009ea0:	b108      	cbz	r0, 8009ea6 <_printf_i+0x1f2>
 8009ea2:	1b40      	subs	r0, r0, r5
 8009ea4:	6060      	str	r0, [r4, #4]
 8009ea6:	6863      	ldr	r3, [r4, #4]
 8009ea8:	6123      	str	r3, [r4, #16]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb0:	e7a8      	b.n	8009e04 <_printf_i+0x150>
 8009eb2:	6923      	ldr	r3, [r4, #16]
 8009eb4:	462a      	mov	r2, r5
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	4640      	mov	r0, r8
 8009eba:	47d0      	blx	sl
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d0ab      	beq.n	8009e18 <_printf_i+0x164>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	079b      	lsls	r3, r3, #30
 8009ec4:	d413      	bmi.n	8009eee <_printf_i+0x23a>
 8009ec6:	68e0      	ldr	r0, [r4, #12]
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	4298      	cmp	r0, r3
 8009ecc:	bfb8      	it	lt
 8009ece:	4618      	movlt	r0, r3
 8009ed0:	e7a4      	b.n	8009e1c <_printf_i+0x168>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4632      	mov	r2, r6
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	4640      	mov	r0, r8
 8009eda:	47d0      	blx	sl
 8009edc:	3001      	adds	r0, #1
 8009ede:	d09b      	beq.n	8009e18 <_printf_i+0x164>
 8009ee0:	3501      	adds	r5, #1
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	9903      	ldr	r1, [sp, #12]
 8009ee6:	1a5b      	subs	r3, r3, r1
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	dcf2      	bgt.n	8009ed2 <_printf_i+0x21e>
 8009eec:	e7eb      	b.n	8009ec6 <_printf_i+0x212>
 8009eee:	2500      	movs	r5, #0
 8009ef0:	f104 0619 	add.w	r6, r4, #25
 8009ef4:	e7f5      	b.n	8009ee2 <_printf_i+0x22e>
 8009ef6:	bf00      	nop
 8009ef8:	0800a6bd 	.word	0x0800a6bd
 8009efc:	0800a6ce 	.word	0x0800a6ce

08009f00 <_sbrk_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_sbrk_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f6 fc0a 	bl	8000724 <_sbrk>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_sbrk_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_sbrk_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20001be8 	.word	0x20001be8

08009f20 <__sread>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	460c      	mov	r4, r1
 8009f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f28:	f000 fab2 	bl	800a490 <_read_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	bfab      	itete	ge
 8009f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f32:	89a3      	ldrhlt	r3, [r4, #12]
 8009f34:	181b      	addge	r3, r3, r0
 8009f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f3a:	bfac      	ite	ge
 8009f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f3e:	81a3      	strhlt	r3, [r4, #12]
 8009f40:	bd10      	pop	{r4, pc}

08009f42 <__swrite>:
 8009f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f46:	461f      	mov	r7, r3
 8009f48:	898b      	ldrh	r3, [r1, #12]
 8009f4a:	05db      	lsls	r3, r3, #23
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	4616      	mov	r6, r2
 8009f52:	d505      	bpl.n	8009f60 <__swrite+0x1e>
 8009f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f58:	2302      	movs	r3, #2
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f000 f9c8 	bl	800a2f0 <_lseek_r>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	463b      	mov	r3, r7
 8009f70:	4628      	mov	r0, r5
 8009f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f76:	f000 b869 	b.w	800a04c <_write_r>

08009f7a <__sseek>:
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f82:	f000 f9b5 	bl	800a2f0 <_lseek_r>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	bf15      	itete	ne
 8009f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f96:	81a3      	strheq	r3, [r4, #12]
 8009f98:	bf18      	it	ne
 8009f9a:	81a3      	strhne	r3, [r4, #12]
 8009f9c:	bd10      	pop	{r4, pc}

08009f9e <__sclose>:
 8009f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa2:	f000 b8d3 	b.w	800a14c <_close_r>
	...

08009fa8 <__swbuf_r>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	460e      	mov	r6, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	4605      	mov	r5, r0
 8009fb0:	b118      	cbz	r0, 8009fba <__swbuf_r+0x12>
 8009fb2:	6983      	ldr	r3, [r0, #24]
 8009fb4:	b90b      	cbnz	r3, 8009fba <__swbuf_r+0x12>
 8009fb6:	f7ff fb81 	bl	80096bc <__sinit>
 8009fba:	4b21      	ldr	r3, [pc, #132]	; (800a040 <__swbuf_r+0x98>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	d12b      	bne.n	800a018 <__swbuf_r+0x70>
 8009fc0:	686c      	ldr	r4, [r5, #4]
 8009fc2:	69a3      	ldr	r3, [r4, #24]
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	071a      	lsls	r2, r3, #28
 8009fca:	d52f      	bpl.n	800a02c <__swbuf_r+0x84>
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	b36b      	cbz	r3, 800a02c <__swbuf_r+0x84>
 8009fd0:	6923      	ldr	r3, [r4, #16]
 8009fd2:	6820      	ldr	r0, [r4, #0]
 8009fd4:	1ac0      	subs	r0, r0, r3
 8009fd6:	6963      	ldr	r3, [r4, #20]
 8009fd8:	b2f6      	uxtb	r6, r6
 8009fda:	4283      	cmp	r3, r0
 8009fdc:	4637      	mov	r7, r6
 8009fde:	dc04      	bgt.n	8009fea <__swbuf_r+0x42>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f000 f948 	bl	800a278 <_fflush_r>
 8009fe8:	bb30      	cbnz	r0, 800a038 <__swbuf_r+0x90>
 8009fea:	68a3      	ldr	r3, [r4, #8]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	60a3      	str	r3, [r4, #8]
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	6022      	str	r2, [r4, #0]
 8009ff6:	701e      	strb	r6, [r3, #0]
 8009ff8:	6963      	ldr	r3, [r4, #20]
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	4283      	cmp	r3, r0
 8009ffe:	d004      	beq.n	800a00a <__swbuf_r+0x62>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	07db      	lsls	r3, r3, #31
 800a004:	d506      	bpl.n	800a014 <__swbuf_r+0x6c>
 800a006:	2e0a      	cmp	r6, #10
 800a008:	d104      	bne.n	800a014 <__swbuf_r+0x6c>
 800a00a:	4621      	mov	r1, r4
 800a00c:	4628      	mov	r0, r5
 800a00e:	f000 f933 	bl	800a278 <_fflush_r>
 800a012:	b988      	cbnz	r0, 800a038 <__swbuf_r+0x90>
 800a014:	4638      	mov	r0, r7
 800a016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a018:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <__swbuf_r+0x9c>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	d101      	bne.n	800a022 <__swbuf_r+0x7a>
 800a01e:	68ac      	ldr	r4, [r5, #8]
 800a020:	e7cf      	b.n	8009fc2 <__swbuf_r+0x1a>
 800a022:	4b09      	ldr	r3, [pc, #36]	; (800a048 <__swbuf_r+0xa0>)
 800a024:	429c      	cmp	r4, r3
 800a026:	bf08      	it	eq
 800a028:	68ec      	ldreq	r4, [r5, #12]
 800a02a:	e7ca      	b.n	8009fc2 <__swbuf_r+0x1a>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f81e 	bl	800a070 <__swsetup_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	d0cb      	beq.n	8009fd0 <__swbuf_r+0x28>
 800a038:	f04f 37ff 	mov.w	r7, #4294967295
 800a03c:	e7ea      	b.n	800a014 <__swbuf_r+0x6c>
 800a03e:	bf00      	nop
 800a040:	0800a66c 	.word	0x0800a66c
 800a044:	0800a68c 	.word	0x0800a68c
 800a048:	0800a64c 	.word	0x0800a64c

0800a04c <_write_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4d07      	ldr	r5, [pc, #28]	; (800a06c <_write_r+0x20>)
 800a050:	4604      	mov	r4, r0
 800a052:	4608      	mov	r0, r1
 800a054:	4611      	mov	r1, r2
 800a056:	2200      	movs	r2, #0
 800a058:	602a      	str	r2, [r5, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f7f6 fa00 	bl	8000460 <_write>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	d102      	bne.n	800a06a <_write_r+0x1e>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	b103      	cbz	r3, 800a06a <_write_r+0x1e>
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	20001be8 	.word	0x20001be8

0800a070 <__swsetup_r>:
 800a070:	4b32      	ldr	r3, [pc, #200]	; (800a13c <__swsetup_r+0xcc>)
 800a072:	b570      	push	{r4, r5, r6, lr}
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	4606      	mov	r6, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	b125      	cbz	r5, 800a086 <__swsetup_r+0x16>
 800a07c:	69ab      	ldr	r3, [r5, #24]
 800a07e:	b913      	cbnz	r3, 800a086 <__swsetup_r+0x16>
 800a080:	4628      	mov	r0, r5
 800a082:	f7ff fb1b 	bl	80096bc <__sinit>
 800a086:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <__swsetup_r+0xd0>)
 800a088:	429c      	cmp	r4, r3
 800a08a:	d10f      	bne.n	800a0ac <__swsetup_r+0x3c>
 800a08c:	686c      	ldr	r4, [r5, #4]
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a094:	0719      	lsls	r1, r3, #28
 800a096:	d42c      	bmi.n	800a0f2 <__swsetup_r+0x82>
 800a098:	06dd      	lsls	r5, r3, #27
 800a09a:	d411      	bmi.n	800a0c0 <__swsetup_r+0x50>
 800a09c:	2309      	movs	r3, #9
 800a09e:	6033      	str	r3, [r6, #0]
 800a0a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	e03e      	b.n	800a12a <__swsetup_r+0xba>
 800a0ac:	4b25      	ldr	r3, [pc, #148]	; (800a144 <__swsetup_r+0xd4>)
 800a0ae:	429c      	cmp	r4, r3
 800a0b0:	d101      	bne.n	800a0b6 <__swsetup_r+0x46>
 800a0b2:	68ac      	ldr	r4, [r5, #8]
 800a0b4:	e7eb      	b.n	800a08e <__swsetup_r+0x1e>
 800a0b6:	4b24      	ldr	r3, [pc, #144]	; (800a148 <__swsetup_r+0xd8>)
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	bf08      	it	eq
 800a0bc:	68ec      	ldreq	r4, [r5, #12]
 800a0be:	e7e6      	b.n	800a08e <__swsetup_r+0x1e>
 800a0c0:	0758      	lsls	r0, r3, #29
 800a0c2:	d512      	bpl.n	800a0ea <__swsetup_r+0x7a>
 800a0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c6:	b141      	cbz	r1, 800a0da <__swsetup_r+0x6a>
 800a0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0cc:	4299      	cmp	r1, r3
 800a0ce:	d002      	beq.n	800a0d6 <__swsetup_r+0x66>
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f991 	bl	800a3f8 <_free_r>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0e0:	81a3      	strh	r3, [r4, #12]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	6063      	str	r3, [r4, #4]
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f043 0308 	orr.w	r3, r3, #8
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	6923      	ldr	r3, [r4, #16]
 800a0f4:	b94b      	cbnz	r3, 800a10a <__swsetup_r+0x9a>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a100:	d003      	beq.n	800a10a <__swsetup_r+0x9a>
 800a102:	4621      	mov	r1, r4
 800a104:	4630      	mov	r0, r6
 800a106:	f000 f92b 	bl	800a360 <__smakebuf_r>
 800a10a:	89a0      	ldrh	r0, [r4, #12]
 800a10c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a110:	f010 0301 	ands.w	r3, r0, #1
 800a114:	d00a      	beq.n	800a12c <__swsetup_r+0xbc>
 800a116:	2300      	movs	r3, #0
 800a118:	60a3      	str	r3, [r4, #8]
 800a11a:	6963      	ldr	r3, [r4, #20]
 800a11c:	425b      	negs	r3, r3
 800a11e:	61a3      	str	r3, [r4, #24]
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	b943      	cbnz	r3, 800a136 <__swsetup_r+0xc6>
 800a124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a128:	d1ba      	bne.n	800a0a0 <__swsetup_r+0x30>
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	0781      	lsls	r1, r0, #30
 800a12e:	bf58      	it	pl
 800a130:	6963      	ldrpl	r3, [r4, #20]
 800a132:	60a3      	str	r3, [r4, #8]
 800a134:	e7f4      	b.n	800a120 <__swsetup_r+0xb0>
 800a136:	2000      	movs	r0, #0
 800a138:	e7f7      	b.n	800a12a <__swsetup_r+0xba>
 800a13a:	bf00      	nop
 800a13c:	20000148 	.word	0x20000148
 800a140:	0800a66c 	.word	0x0800a66c
 800a144:	0800a68c 	.word	0x0800a68c
 800a148:	0800a64c 	.word	0x0800a64c

0800a14c <_close_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d06      	ldr	r5, [pc, #24]	; (800a168 <_close_r+0x1c>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f6 faaf 	bl	80006ba <_close>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_close_r+0x1a>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_close_r+0x1a>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	20001be8 	.word	0x20001be8

0800a16c <__sflush_r>:
 800a16c:	898a      	ldrh	r2, [r1, #12]
 800a16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a172:	4605      	mov	r5, r0
 800a174:	0710      	lsls	r0, r2, #28
 800a176:	460c      	mov	r4, r1
 800a178:	d458      	bmi.n	800a22c <__sflush_r+0xc0>
 800a17a:	684b      	ldr	r3, [r1, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	dc05      	bgt.n	800a18c <__sflush_r+0x20>
 800a180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a182:	2b00      	cmp	r3, #0
 800a184:	dc02      	bgt.n	800a18c <__sflush_r+0x20>
 800a186:	2000      	movs	r0, #0
 800a188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a18e:	2e00      	cmp	r6, #0
 800a190:	d0f9      	beq.n	800a186 <__sflush_r+0x1a>
 800a192:	2300      	movs	r3, #0
 800a194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a198:	682f      	ldr	r7, [r5, #0]
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	d032      	beq.n	800a204 <__sflush_r+0x98>
 800a19e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	075a      	lsls	r2, r3, #29
 800a1a4:	d505      	bpl.n	800a1b2 <__sflush_r+0x46>
 800a1a6:	6863      	ldr	r3, [r4, #4]
 800a1a8:	1ac0      	subs	r0, r0, r3
 800a1aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ac:	b10b      	cbz	r3, 800a1b2 <__sflush_r+0x46>
 800a1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1b0:	1ac0      	subs	r0, r0, r3
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1b8:	6a21      	ldr	r1, [r4, #32]
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b0      	blx	r6
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	d106      	bne.n	800a1d2 <__sflush_r+0x66>
 800a1c4:	6829      	ldr	r1, [r5, #0]
 800a1c6:	291d      	cmp	r1, #29
 800a1c8:	d82c      	bhi.n	800a224 <__sflush_r+0xb8>
 800a1ca:	4a2a      	ldr	r2, [pc, #168]	; (800a274 <__sflush_r+0x108>)
 800a1cc:	40ca      	lsrs	r2, r1
 800a1ce:	07d6      	lsls	r6, r2, #31
 800a1d0:	d528      	bpl.n	800a224 <__sflush_r+0xb8>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	6062      	str	r2, [r4, #4]
 800a1d6:	04d9      	lsls	r1, r3, #19
 800a1d8:	6922      	ldr	r2, [r4, #16]
 800a1da:	6022      	str	r2, [r4, #0]
 800a1dc:	d504      	bpl.n	800a1e8 <__sflush_r+0x7c>
 800a1de:	1c42      	adds	r2, r0, #1
 800a1e0:	d101      	bne.n	800a1e6 <__sflush_r+0x7a>
 800a1e2:	682b      	ldr	r3, [r5, #0]
 800a1e4:	b903      	cbnz	r3, 800a1e8 <__sflush_r+0x7c>
 800a1e6:	6560      	str	r0, [r4, #84]	; 0x54
 800a1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ea:	602f      	str	r7, [r5, #0]
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	d0ca      	beq.n	800a186 <__sflush_r+0x1a>
 800a1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1f4:	4299      	cmp	r1, r3
 800a1f6:	d002      	beq.n	800a1fe <__sflush_r+0x92>
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 f8fd 	bl	800a3f8 <_free_r>
 800a1fe:	2000      	movs	r0, #0
 800a200:	6360      	str	r0, [r4, #52]	; 0x34
 800a202:	e7c1      	b.n	800a188 <__sflush_r+0x1c>
 800a204:	6a21      	ldr	r1, [r4, #32]
 800a206:	2301      	movs	r3, #1
 800a208:	4628      	mov	r0, r5
 800a20a:	47b0      	blx	r6
 800a20c:	1c41      	adds	r1, r0, #1
 800a20e:	d1c7      	bne.n	800a1a0 <__sflush_r+0x34>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d0c4      	beq.n	800a1a0 <__sflush_r+0x34>
 800a216:	2b1d      	cmp	r3, #29
 800a218:	d001      	beq.n	800a21e <__sflush_r+0xb2>
 800a21a:	2b16      	cmp	r3, #22
 800a21c:	d101      	bne.n	800a222 <__sflush_r+0xb6>
 800a21e:	602f      	str	r7, [r5, #0]
 800a220:	e7b1      	b.n	800a186 <__sflush_r+0x1a>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	e7ad      	b.n	800a188 <__sflush_r+0x1c>
 800a22c:	690f      	ldr	r7, [r1, #16]
 800a22e:	2f00      	cmp	r7, #0
 800a230:	d0a9      	beq.n	800a186 <__sflush_r+0x1a>
 800a232:	0793      	lsls	r3, r2, #30
 800a234:	680e      	ldr	r6, [r1, #0]
 800a236:	bf08      	it	eq
 800a238:	694b      	ldreq	r3, [r1, #20]
 800a23a:	600f      	str	r7, [r1, #0]
 800a23c:	bf18      	it	ne
 800a23e:	2300      	movne	r3, #0
 800a240:	eba6 0807 	sub.w	r8, r6, r7
 800a244:	608b      	str	r3, [r1, #8]
 800a246:	f1b8 0f00 	cmp.w	r8, #0
 800a24a:	dd9c      	ble.n	800a186 <__sflush_r+0x1a>
 800a24c:	6a21      	ldr	r1, [r4, #32]
 800a24e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a250:	4643      	mov	r3, r8
 800a252:	463a      	mov	r2, r7
 800a254:	4628      	mov	r0, r5
 800a256:	47b0      	blx	r6
 800a258:	2800      	cmp	r0, #0
 800a25a:	dc06      	bgt.n	800a26a <__sflush_r+0xfe>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a262:	81a3      	strh	r3, [r4, #12]
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	e78e      	b.n	800a188 <__sflush_r+0x1c>
 800a26a:	4407      	add	r7, r0
 800a26c:	eba8 0800 	sub.w	r8, r8, r0
 800a270:	e7e9      	b.n	800a246 <__sflush_r+0xda>
 800a272:	bf00      	nop
 800a274:	20400001 	.word	0x20400001

0800a278 <_fflush_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	4605      	mov	r5, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	b913      	cbnz	r3, 800a288 <_fflush_r+0x10>
 800a282:	2500      	movs	r5, #0
 800a284:	4628      	mov	r0, r5
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	b118      	cbz	r0, 800a292 <_fflush_r+0x1a>
 800a28a:	6983      	ldr	r3, [r0, #24]
 800a28c:	b90b      	cbnz	r3, 800a292 <_fflush_r+0x1a>
 800a28e:	f7ff fa15 	bl	80096bc <__sinit>
 800a292:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <_fflush_r+0x6c>)
 800a294:	429c      	cmp	r4, r3
 800a296:	d11b      	bne.n	800a2d0 <_fflush_r+0x58>
 800a298:	686c      	ldr	r4, [r5, #4]
 800a29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0ef      	beq.n	800a282 <_fflush_r+0xa>
 800a2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2a4:	07d0      	lsls	r0, r2, #31
 800a2a6:	d404      	bmi.n	800a2b2 <_fflush_r+0x3a>
 800a2a8:	0599      	lsls	r1, r3, #22
 800a2aa:	d402      	bmi.n	800a2b2 <_fflush_r+0x3a>
 800a2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ae:	f7ff faa3 	bl	80097f8 <__retarget_lock_acquire_recursive>
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	f7ff ff59 	bl	800a16c <__sflush_r>
 800a2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2bc:	07da      	lsls	r2, r3, #31
 800a2be:	4605      	mov	r5, r0
 800a2c0:	d4e0      	bmi.n	800a284 <_fflush_r+0xc>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	059b      	lsls	r3, r3, #22
 800a2c6:	d4dd      	bmi.n	800a284 <_fflush_r+0xc>
 800a2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ca:	f7ff fa96 	bl	80097fa <__retarget_lock_release_recursive>
 800a2ce:	e7d9      	b.n	800a284 <_fflush_r+0xc>
 800a2d0:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <_fflush_r+0x70>)
 800a2d2:	429c      	cmp	r4, r3
 800a2d4:	d101      	bne.n	800a2da <_fflush_r+0x62>
 800a2d6:	68ac      	ldr	r4, [r5, #8]
 800a2d8:	e7df      	b.n	800a29a <_fflush_r+0x22>
 800a2da:	4b04      	ldr	r3, [pc, #16]	; (800a2ec <_fflush_r+0x74>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	bf08      	it	eq
 800a2e0:	68ec      	ldreq	r4, [r5, #12]
 800a2e2:	e7da      	b.n	800a29a <_fflush_r+0x22>
 800a2e4:	0800a66c 	.word	0x0800a66c
 800a2e8:	0800a68c 	.word	0x0800a68c
 800a2ec:	0800a64c 	.word	0x0800a64c

0800a2f0 <_lseek_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d07      	ldr	r5, [pc, #28]	; (800a310 <_lseek_r+0x20>)
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f6 fa02 	bl	8000708 <_lseek>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_lseek_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_lseek_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20001be8 	.word	0x20001be8

0800a314 <__swhatbuf_r>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	460e      	mov	r6, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	2900      	cmp	r1, #0
 800a31e:	b096      	sub	sp, #88	; 0x58
 800a320:	4614      	mov	r4, r2
 800a322:	461d      	mov	r5, r3
 800a324:	da08      	bge.n	800a338 <__swhatbuf_r+0x24>
 800a326:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	061a      	lsls	r2, r3, #24
 800a330:	d410      	bmi.n	800a354 <__swhatbuf_r+0x40>
 800a332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a336:	e00e      	b.n	800a356 <__swhatbuf_r+0x42>
 800a338:	466a      	mov	r2, sp
 800a33a:	f000 f8bb 	bl	800a4b4 <_fstat_r>
 800a33e:	2800      	cmp	r0, #0
 800a340:	dbf1      	blt.n	800a326 <__swhatbuf_r+0x12>
 800a342:	9a01      	ldr	r2, [sp, #4]
 800a344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a34c:	425a      	negs	r2, r3
 800a34e:	415a      	adcs	r2, r3
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	e7ee      	b.n	800a332 <__swhatbuf_r+0x1e>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	2000      	movs	r0, #0
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	b016      	add	sp, #88	; 0x58
 800a35c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a360 <__smakebuf_r>:
 800a360:	898b      	ldrh	r3, [r1, #12]
 800a362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a364:	079d      	lsls	r5, r3, #30
 800a366:	4606      	mov	r6, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	d507      	bpl.n	800a37c <__smakebuf_r+0x1c>
 800a36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	2301      	movs	r3, #1
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	b002      	add	sp, #8
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	ab01      	add	r3, sp, #4
 800a37e:	466a      	mov	r2, sp
 800a380:	f7ff ffc8 	bl	800a314 <__swhatbuf_r>
 800a384:	9900      	ldr	r1, [sp, #0]
 800a386:	4605      	mov	r5, r0
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff fa57 	bl	800983c <_malloc_r>
 800a38e:	b948      	cbnz	r0, 800a3a4 <__smakebuf_r+0x44>
 800a390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a394:	059a      	lsls	r2, r3, #22
 800a396:	d4ef      	bmi.n	800a378 <__smakebuf_r+0x18>
 800a398:	f023 0303 	bic.w	r3, r3, #3
 800a39c:	f043 0302 	orr.w	r3, r3, #2
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	e7e3      	b.n	800a36c <__smakebuf_r+0xc>
 800a3a4:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <__smakebuf_r+0x7c>)
 800a3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	6020      	str	r0, [r4, #0]
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	6163      	str	r3, [r4, #20]
 800a3b6:	9b01      	ldr	r3, [sp, #4]
 800a3b8:	6120      	str	r0, [r4, #16]
 800a3ba:	b15b      	cbz	r3, 800a3d4 <__smakebuf_r+0x74>
 800a3bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 f889 	bl	800a4d8 <_isatty_r>
 800a3c6:	b128      	cbz	r0, 800a3d4 <__smakebuf_r+0x74>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	89a0      	ldrh	r0, [r4, #12]
 800a3d6:	4305      	orrs	r5, r0
 800a3d8:	81a5      	strh	r5, [r4, #12]
 800a3da:	e7cd      	b.n	800a378 <__smakebuf_r+0x18>
 800a3dc:	08009655 	.word	0x08009655

0800a3e0 <__malloc_lock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	; (800a3e8 <__malloc_lock+0x8>)
 800a3e2:	f7ff ba09 	b.w	80097f8 <__retarget_lock_acquire_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20001bdc 	.word	0x20001bdc

0800a3ec <__malloc_unlock>:
 800a3ec:	4801      	ldr	r0, [pc, #4]	; (800a3f4 <__malloc_unlock+0x8>)
 800a3ee:	f7ff ba04 	b.w	80097fa <__retarget_lock_release_recursive>
 800a3f2:	bf00      	nop
 800a3f4:	20001bdc 	.word	0x20001bdc

0800a3f8 <_free_r>:
 800a3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3fa:	2900      	cmp	r1, #0
 800a3fc:	d044      	beq.n	800a488 <_free_r+0x90>
 800a3fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a402:	9001      	str	r0, [sp, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f1a1 0404 	sub.w	r4, r1, #4
 800a40a:	bfb8      	it	lt
 800a40c:	18e4      	addlt	r4, r4, r3
 800a40e:	f7ff ffe7 	bl	800a3e0 <__malloc_lock>
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <_free_r+0x94>)
 800a414:	9801      	ldr	r0, [sp, #4]
 800a416:	6813      	ldr	r3, [r2, #0]
 800a418:	b933      	cbnz	r3, 800a428 <_free_r+0x30>
 800a41a:	6063      	str	r3, [r4, #4]
 800a41c:	6014      	str	r4, [r2, #0]
 800a41e:	b003      	add	sp, #12
 800a420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a424:	f7ff bfe2 	b.w	800a3ec <__malloc_unlock>
 800a428:	42a3      	cmp	r3, r4
 800a42a:	d908      	bls.n	800a43e <_free_r+0x46>
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	1961      	adds	r1, r4, r5
 800a430:	428b      	cmp	r3, r1
 800a432:	bf01      	itttt	eq
 800a434:	6819      	ldreq	r1, [r3, #0]
 800a436:	685b      	ldreq	r3, [r3, #4]
 800a438:	1949      	addeq	r1, r1, r5
 800a43a:	6021      	streq	r1, [r4, #0]
 800a43c:	e7ed      	b.n	800a41a <_free_r+0x22>
 800a43e:	461a      	mov	r2, r3
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	b10b      	cbz	r3, 800a448 <_free_r+0x50>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d9fa      	bls.n	800a43e <_free_r+0x46>
 800a448:	6811      	ldr	r1, [r2, #0]
 800a44a:	1855      	adds	r5, r2, r1
 800a44c:	42a5      	cmp	r5, r4
 800a44e:	d10b      	bne.n	800a468 <_free_r+0x70>
 800a450:	6824      	ldr	r4, [r4, #0]
 800a452:	4421      	add	r1, r4
 800a454:	1854      	adds	r4, r2, r1
 800a456:	42a3      	cmp	r3, r4
 800a458:	6011      	str	r1, [r2, #0]
 800a45a:	d1e0      	bne.n	800a41e <_free_r+0x26>
 800a45c:	681c      	ldr	r4, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	6053      	str	r3, [r2, #4]
 800a462:	4421      	add	r1, r4
 800a464:	6011      	str	r1, [r2, #0]
 800a466:	e7da      	b.n	800a41e <_free_r+0x26>
 800a468:	d902      	bls.n	800a470 <_free_r+0x78>
 800a46a:	230c      	movs	r3, #12
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	e7d6      	b.n	800a41e <_free_r+0x26>
 800a470:	6825      	ldr	r5, [r4, #0]
 800a472:	1961      	adds	r1, r4, r5
 800a474:	428b      	cmp	r3, r1
 800a476:	bf04      	itt	eq
 800a478:	6819      	ldreq	r1, [r3, #0]
 800a47a:	685b      	ldreq	r3, [r3, #4]
 800a47c:	6063      	str	r3, [r4, #4]
 800a47e:	bf04      	itt	eq
 800a480:	1949      	addeq	r1, r1, r5
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	6054      	str	r4, [r2, #4]
 800a486:	e7ca      	b.n	800a41e <_free_r+0x26>
 800a488:	b003      	add	sp, #12
 800a48a:	bd30      	pop	{r4, r5, pc}
 800a48c:	20001be0 	.word	0x20001be0

0800a490 <_read_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_read_r+0x20>)
 800a494:	4604      	mov	r4, r0
 800a496:	4608      	mov	r0, r1
 800a498:	4611      	mov	r1, r2
 800a49a:	2200      	movs	r2, #0
 800a49c:	602a      	str	r2, [r5, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f7f6 f8ee 	bl	8000680 <_read>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_read_r+0x1e>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_read_r+0x1e>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	20001be8 	.word	0x20001be8

0800a4b4 <_fstat_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4d07      	ldr	r5, [pc, #28]	; (800a4d4 <_fstat_r+0x20>)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	f7f6 f906 	bl	80006d2 <_fstat>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d102      	bne.n	800a4d0 <_fstat_r+0x1c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	b103      	cbz	r3, 800a4d0 <_fstat_r+0x1c>
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20001be8 	.word	0x20001be8

0800a4d8 <_isatty_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	; (800a4f4 <_isatty_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f6 f905 	bl	80006f2 <_isatty>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_isatty_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_isatty_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	20001be8 	.word	0x20001be8

0800a4f8 <_init>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	bf00      	nop
 800a4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fe:	bc08      	pop	{r3}
 800a500:	469e      	mov	lr, r3
 800a502:	4770      	bx	lr

0800a504 <_fini>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	bf00      	nop
 800a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50a:	bc08      	pop	{r3}
 800a50c:	469e      	mov	lr, r3
 800a50e:	4770      	bx	lr
