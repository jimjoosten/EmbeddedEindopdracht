
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab14  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000008  0800ae78  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a90  200001ac  0800b01c  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001c3c  0800b01c  00021c3c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b0ef  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000041ea  00000000  00000000  0003b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c10  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a28  00000000  00000000  000410c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00026dd0  00000000  00000000  00042af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c616  00000000  00000000  000698c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e1ed9  00000000  00000000  00085ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00167daf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007b10  00000000  00000000  00167e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ac 	.word	0x200001ac
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ac3c 	.word	0x0800ac3c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b0 	.word	0x200001b0
 800017c:	0800ac3c 	.word	0x0800ac3c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <Play_Buzzer>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Play_Buzzer()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2101      	movs	r1, #1
 8000228:	4808      	ldr	r0, [pc, #32]	; (800024c <Play_Buzzer+0x2c>)
 800022a:	f000 ff8d 	bl	8001148 <HAL_GPIO_WritePin>
	    HAL_Delay(500);
 800022e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000232:	f000 fccd 	bl	8000bd0 <HAL_Delay>
	    HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2101      	movs	r1, #1
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <Play_Buzzer+0x2c>)
 800023c:	f000 ff84 	bl	8001148 <HAL_GPIO_WritePin>
	    HAL_Delay(250);
 8000240:	20fa      	movs	r0, #250	; 0xfa
 8000242:	f000 fcc5 	bl	8000bd0 <HAL_Delay>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	48000400 	.word	0x48000400

08000250 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4013      	ands	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000274:	68fb      	ldr	r3, [r7, #12]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
	...

08000284 <StartAlarm>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool bAlarmGestart = false;

void StartAlarm() {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	if(!bAlarmGestart) {
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <StartAlarm+0x24>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f083 0301 	eor.w	r3, r3, #1
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d005      	beq.n	80002a2 <StartAlarm+0x1e>
		printf("Alarm aan het starten....");
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <StartAlarm+0x28>)
 8000298:	f009 fd42 	bl	8009d20 <iprintf>
		bAlarmGestart = true;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <StartAlarm+0x24>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
	  // set state of bool
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000214 	.word	0x20000214
 80002ac:	0800ac54 	.word	0x0800ac54

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 fc06 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f81c 	bl	80002f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002bc:	f000 f886 	bl	80003cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f8ca 	bl	8000458 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80002c4:	f008 ff98 	bl	80091f8 <MX_USB_Device_Init>
  MX_TIM16_Init();
 80002c8:	f000 f89e 	bl	8000408 <MX_TIM16_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Relay_On();
 80002cc:	f000 f98c 	bl	80005e8 <Relay_On>
//	Play_Buzzer();
    Read_Rotary();
 80002d0:	f000 f9a6 	bl	8000620 <Read_Rotary>
    Read_Reed();
 80002d4:	f000 f952 	bl	800057c <Read_Reed>

    if (bAlarmGestart) {
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <main+0x3c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f5      	beq.n	80002cc <main+0x1c>
    	printf("lekker man alarm gestart");
 80002e0:	4803      	ldr	r0, [pc, #12]	; (80002f0 <main+0x40>)
 80002e2:	f009 fd1d 	bl	8009d20 <iprintf>
    	Play_Buzzer();
 80002e6:	f7ff ff9b 	bl	8000220 <Play_Buzzer>
	Relay_On();
 80002ea:	e7ef      	b.n	80002cc <main+0x1c>
 80002ec:	20000214 	.word	0x20000214
 80002f0:	0800ac70 	.word	0x0800ac70

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09a      	sub	sp, #104	; 0x68
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0320 	add.w	r3, r7, #32
 80002fe:	2248      	movs	r2, #72	; 0x48
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f009 fd04 	bl	8009d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]
 8000316:	615a      	str	r2, [r3, #20]
 8000318:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <SystemClock_Config+0xd4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000322:	4a29      	ldr	r2, [pc, #164]	; (80003c8 <SystemClock_Config+0xd4>)
 8000324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000328:	6013      	str	r3, [r2, #0]
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <SystemClock_Config+0xd4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000336:	2326      	movs	r3, #38	; 0x26
 8000338:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800033a:	2300      	movs	r3, #0
 800033c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000342:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000348:	2340      	movs	r3, #64	; 0x40
 800034a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800034c:	2300      	movs	r3, #0
 800034e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000350:	2360      	movs	r3, #96	; 0x60
 8000352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000358:	2301      	movs	r3, #1
 800035a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000360:	2320      	movs	r3, #32
 8000362:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000368:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800036e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000374:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0320 	add.w	r3, r7, #32
 800037a:	4618      	mov	r0, r3
 800037c:	f002 ffcc 	bl	8003318 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000386:	f000 f8c5 	bl	8000514 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800038a:	236f      	movs	r3, #111	; 0x6f
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2303      	movs	r3, #3
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2103      	movs	r1, #3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fb28 	bl	8003a00 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80003b6:	f000 f8ad 	bl	8000514 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80003ba:	f004 f8b9 	bl	8004530 <HAL_RCCEx_EnableMSIPLLMode>
}
 80003be:	bf00      	nop
 80003c0:	3768      	adds	r7, #104	; 0x68
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	58000400 	.word	0x58000400

080003cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b094      	sub	sp, #80	; 0x50
 80003d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003d2:	463b      	mov	r3, r7
 80003d4:	2250      	movs	r2, #80	; 0x50
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f009 fc99 	bl	8009d10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80003de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003e4:	2300      	movs	r3, #0
 80003e6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80003e8:	2310      	movs	r3, #16
 80003ea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003ec:	463b      	mov	r3, r7
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 ff28 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80003fa:	f000 f88b 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003fe:	bf00      	nop
 8000400:	3750      	adds	r7, #80	; 0x50
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_TIM16_Init+0x48>)
 800040e:	4a11      	ldr	r2, [pc, #68]	; (8000454 <MX_TIM16_Init+0x4c>)
 8000410:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63998;
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_TIM16_Init+0x48>)
 8000414:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 8000418:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <MX_TIM16_Init+0x48>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_TIM16_Init+0x48>)
 8000422:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000426:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_TIM16_Init+0x48>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_TIM16_Init+0x48>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_TIM16_Init+0x48>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_TIM16_Init+0x48>)
 800043c:	f004 f98f 	bl	800475e <HAL_TIM_Base_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000446:	f000 f865 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200001c8 	.word	0x200001c8
 8000454:	40014400 	.word	0x40014400

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	2004      	movs	r0, #4
 800046e:	f7ff feef 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff feec 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff fee9 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047e:	2008      	movs	r0, #8
 8000480:	f7ff fee6 	bl	8000250 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800048a:	481f      	ldr	r0, [pc, #124]	; (8000508 <MX_GPIO_Init+0xb0>)
 800048c:	f000 fe5c 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2101      	movs	r1, #1
 8000494:	481d      	ldr	r0, [pc, #116]	; (800050c <MX_GPIO_Init+0xb4>)
 8000496:	f000 fe57 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RELAY_Pin;
 800049a:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800049e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4815      	ldr	r0, [pc, #84]	; (8000508 <MX_GPIO_Init+0xb0>)
 80004b2:	f000 fcc1 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 80004b6:	f641 030a 	movw	r3, #6154	; 0x180a
 80004ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <MX_GPIO_Init+0xb0>)
 80004ca:	f000 fcb5 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 80004ce:	2301      	movs	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <MX_GPIO_Init+0xb4>)
 80004e4:	f000 fca8 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80004e8:	2301      	movs	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_GPIO_Init+0xb8>)
 80004fa:	f000 fc9d 	bl	8000e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48000800 	.word	0x48000800
 800050c:	48000400 	.word	0x48000400
 8000510:	48000c00 	.word	0x48000c00

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <REED_status>:
bool bHasContact = false;
bool isTimerOn = false;
extern TIM_HandleTypeDef htim16;

GPIO_PinState REED_status()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 8000524:	2108      	movs	r1, #8
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <REED_status+0x14>)
 8000528:	f000 fdf6 	bl	8001118 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	48000800 	.word	0x48000800

08000538 <SetTimer>:

void SetTimer() {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim16);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <SetTimer+0x10>)
 800053e:	f004 f965 	bl	800480c <HAL_TIM_Base_Start_IT>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200001c8 	.word	0x200001c8

0800054c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	if (!bHasContact) { // kijken of contact is anders starten we het alarm.
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d004      	beq.n	800056c <HAL_TIM_PeriodElapsedCallback+0x20>
		printf("Timer is gestart!");
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000564:	f009 fbdc 	bl	8009d20 <iprintf>
		// Trigger function
		StartAlarm();
 8000568:	f7ff fe8c 	bl	8000284 <StartAlarm>
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000215 	.word	0x20000215
 8000578:	0800ac8c 	.word	0x0800ac8c

0800057c <Read_Reed>:


void Read_Reed()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	if (!REED_status() && !bHasContact)
 8000580:	f7ff ffce 	bl	8000520 <REED_status>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d110      	bne.n	80005ac <Read_Reed+0x30>
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <Read_Reed+0x5c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d009      	beq.n	80005ac <Read_Reed+0x30>
	{
		printf("Reed heeft nu contact");
 8000598:	4810      	ldr	r0, [pc, #64]	; (80005dc <Read_Reed+0x60>)
 800059a:	f009 fbc1 	bl	8009d20 <iprintf>
		bHasContact = true;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <Read_Reed+0x5c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
		isTimerOn = false;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <Read_Reed+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]

		printf("Reed heeft geen contact");
		bHasContact = false;
	}

}
 80005aa:	e013      	b.n	80005d4 <Read_Reed+0x58>
	else if (REED_status() && bHasContact)
 80005ac:	f7ff ffb8 	bl	8000520 <REED_status>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00e      	beq.n	80005d4 <Read_Reed+0x58>
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <Read_Reed+0x5c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00a      	beq.n	80005d4 <Read_Reed+0x58>
		isTimerOn = true;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <Read_Reed+0x64>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
		SetTimer();
 80005c4:	f7ff ffb8 	bl	8000538 <SetTimer>
		printf("Reed heeft geen contact");
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <Read_Reed+0x68>)
 80005ca:	f009 fba9 	bl	8009d20 <iprintf>
		bHasContact = false;
 80005ce:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <Read_Reed+0x5c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000215 	.word	0x20000215
 80005dc:	0800aca0 	.word	0x0800aca0
 80005e0:	20000216 	.word	0x20000216
 80005e4:	0800acb8 	.word	0x0800acb8

080005e8 <Relay_On>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Relay_On()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2140      	movs	r1, #64	; 0x40
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <Relay_On+0x14>)
 80005f2:	f000 fda9 	bl	8001148 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48000800 	.word	0x48000800

08000600 <_write>:

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	68b8      	ldr	r0, [r7, #8]
 8000610:	f008 feb0 	bl	8009374 <CDC_Transmit_FS>
  return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <Read_Rotary>:

void Read_Rotary()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	4855      	ldr	r0, [pc, #340]	; (8000780 <Read_Rotary+0x160>)
 800062c:	f000 fd74 	bl	8001118 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 8000634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000638:	4851      	ldr	r0, [pc, #324]	; (8000780 <Read_Rotary+0x160>)
 800063a:	f000 fd6d 	bl	8001118 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	005a      	lsls	r2, r3, #1
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	4a4e      	ldr	r2, [pc, #312]	; (8000784 <Read_Rotary+0x164>)
 800064c:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 800064e:	4b4e      	ldr	r3, [pc, #312]	; (8000788 <Read_Rotary+0x168>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <Read_Rotary+0x164>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	494d      	ldr	r1, [pc, #308]	; (800078c <Read_Rotary+0x16c>)
 8000658:	0092      	lsls	r2, r2, #2
 800065a:	4413      	add	r3, r2
 800065c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000660:	607b      	str	r3, [r7, #4]

    if (info == 1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d109      	bne.n	800067c <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 8000668:	4b46      	ldr	r3, [pc, #280]	; (8000784 <Read_Rotary+0x164>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2201      	movs	r2, #1
 800066e:	409a      	lsls	r2, r3
 8000670:	4b47      	ldr	r3, [pc, #284]	; (8000790 <Read_Rotary+0x170>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4313      	orrs	r3, r2
 8000676:	4a46      	ldr	r2, [pc, #280]	; (8000790 <Read_Rotary+0x170>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e00c      	b.n	8000696 <Read_Rotary+0x76>
    }
    else if (info == -1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000682:	d108      	bne.n	8000696 <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <Read_Rotary+0x164>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	409a      	lsls	r2, r3
 800068c:	4b41      	ldr	r3, [pc, #260]	; (8000794 <Read_Rotary+0x174>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4313      	orrs	r3, r2
 8000692:	4a40      	ldr	r2, [pc, #256]	; (8000794 <Read_Rotary+0x174>)
 8000694:	6013      	str	r3, [r2, #0]
    else if (info == 2)
    {
        // skipped a value
    }

    if (prevVal != newVal && newVal == 3)
 8000696:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <Read_Rotary+0x168>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <Read_Rotary+0x164>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d047      	beq.n	8000732 <Read_Rotary+0x112>
 80006a2:	4b38      	ldr	r3, [pc, #224]	; (8000784 <Read_Rotary+0x164>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d143      	bne.n	8000732 <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <Read_Rotary+0x170>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b0b      	cmp	r3, #11
 80006b0:	d00b      	beq.n	80006ca <Read_Rotary+0xaa>
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <Read_Rotary+0x170>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d007      	beq.n	80006ca <Read_Rotary+0xaa>
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <Read_Rotary+0x170>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b0e      	cmp	r3, #14
 80006c0:	d003      	beq.n	80006ca <Read_Rotary+0xaa>
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <Read_Rotary+0x170>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b0f      	cmp	r3, #15
 80006c8:	d10e      	bne.n	80006e8 <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <Read_Rotary+0x178>)
 80006cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	3301      	adds	r3, #1
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <Read_Rotary+0x178>)
 80006da:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4827      	ldr	r0, [pc, #156]	; (8000780 <Read_Rotary+0x160>)
 80006e4:	f000 fd30 	bl	8001148 <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <Read_Rotary+0x174>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b0b      	cmp	r3, #11
 80006ee:	d00b      	beq.n	8000708 <Read_Rotary+0xe8>
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <Read_Rotary+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d007      	beq.n	8000708 <Read_Rotary+0xe8>
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <Read_Rotary+0x174>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b0e      	cmp	r3, #14
 80006fe:	d003      	beq.n	8000708 <Read_Rotary+0xe8>
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <Read_Rotary+0x174>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d10e      	bne.n	8000726 <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <Read_Rotary+0x178>)
 800070a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070e:	b29b      	uxth	r3, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	b29b      	uxth	r3, r3
 8000714:	b21a      	sxth	r2, r3
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <Read_Rotary+0x178>)
 8000718:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4817      	ldr	r0, [pc, #92]	; (8000780 <Read_Rotary+0x160>)
 8000722:	f000 fd11 	bl	8001148 <HAL_GPIO_WritePin>
        }
        clockState = 0;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <Read_Rotary+0x170>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <Read_Rotary+0x174>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <Read_Rotary+0x164>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <Read_Rotary+0x168>)
 8000738:	6013      	str	r3, [r2, #0]

    if (iTimer > 20000)
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <Read_Rotary+0x17c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000742:	4293      	cmp	r3, r2
 8000744:	dd09      	ble.n	800075a <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <Read_Rotary+0x178>)
 8000748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074c:	4619      	mov	r1, r3
 800074e:	4814      	ldr	r0, [pc, #80]	; (80007a0 <Read_Rotary+0x180>)
 8000750:	f009 fae6 	bl	8009d20 <iprintf>
        iTimer = 0;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <Read_Rotary+0x17c>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <Read_Rotary+0x17c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <Read_Rotary+0x17c>)
 8000762:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 8000764:	2101      	movs	r1, #1
 8000766:	480f      	ldr	r0, [pc, #60]	; (80007a4 <Read_Rotary+0x184>)
 8000768:	f000 fcd6 	bl	8001118 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <Read_Rotary+0x158>
        {
          readValue = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <Read_Rotary+0x178>)
 8000774:	2200      	movs	r2, #0
 8000776:	801a      	strh	r2, [r3, #0]
        }
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	48000800 	.word	0x48000800
 8000784:	20000224 	.word	0x20000224
 8000788:	2000021c 	.word	0x2000021c
 800078c:	20000008 	.word	0x20000008
 8000790:	20000228 	.word	0x20000228
 8000794:	2000022c 	.word	0x2000022c
 8000798:	20000218 	.word	0x20000218
 800079c:	20000220 	.word	0x20000220
 80007a0:	0800acd0 	.word	0x0800acd0
 80007a4:	48000c00 	.word	0x48000c00

080007a8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007cc:	68fb      	ldr	r3, [r7, #12]
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_TIM_Base_MspInit+0x34>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d10b      	bne.n	8000812 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80007fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007fe:	f7ff ffd3 	bl	80007a8 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2019      	movs	r0, #25
 8000808:	f000 fae1 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800080c:	2019      	movs	r0, #25
 800080e:	f000 faf8 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40014400 	.word	0x40014400

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f984 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <USB_LP_IRQHandler+0x10>)
 800087a:	f000 fd78 	bl	800136e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20001718 	.word	0x20001718

08000888 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800088e:	f004 f80b 	bl	80048a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001c8 	.word	0x200001c8

0800089c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
  }

  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f009 f9a4 	bl	8009cbc <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20030000 	.word	0x20030000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	20000230 	.word	0x20000230
 80009a8:	20001c40 	.word	0x20001c40

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <SystemInit+0x98>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <SystemInit+0x98>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80009d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80009d8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80009da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <SystemInit+0x9c>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80009ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009f6:	f023 0305 	bic.w	r3, r3, #5
 80009fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80009fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <SystemInit+0xa0>)
 8000a18:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <SystemInit+0xa0>)
 8000a20:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	faf6fefb 	.word	0xfaf6fefb
 8000a4c:	22041000 	.word	0x22041000

08000a50 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000a50:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a52:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a54:	3304      	adds	r3, #4

08000a56 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a56:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a58:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a5a:	d3f9      	bcc.n	8000a50 <CopyDataInit>
  bx lr
 8000a5c:	4770      	bx	lr

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000a5e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000a60:	3004      	adds	r0, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000a62:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>
  bx lr
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f7ff ff9e 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <LoopForever+0x6>)
 8000a72:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <LoopForever+0xa>)
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <LoopForever+0xe>)
 8000a76:	2300      	movs	r3, #0
 8000a78:	f7ff ffed 	bl	8000a56 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <LoopForever+0x12>)
 8000a7e:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <LoopForever+0x16>)
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <LoopForever+0x1a>)
 8000a82:	2300      	movs	r3, #0
 8000a84:	f7ff ffe7 	bl	8000a56 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <LoopForever+0x1e>)
 8000a8a:	490c      	ldr	r1, [pc, #48]	; (8000abc <LoopForever+0x22>)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f7ff ffe8 	bl	8000a62 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a92:	f009 f919 	bl	8009cc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a96:	f7ff fc0b 	bl	80002b0 <main>

08000a9a <LoopForever>:

LoopForever:
  b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   r0, =_estack
 8000a9c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200001ac 	.word	0x200001ac
 8000aa8:	0800ae78 	.word	0x0800ae78
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000aac:	20030000 	.word	0x20030000
 8000ab0:	20030000 	.word	0x20030000
 8000ab4:	0800b01c 	.word	0x0800b01c
  INIT_BSS _sbss, _ebss
 8000ab8:	200001ac 	.word	0x200001ac
 8000abc:	20001c3c 	.word	0x20001c3c

08000ac0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_Init+0x3c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <HAL_Init+0x3c>)
 8000ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 f96c 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae0:	200f      	movs	r0, #15
 8000ae2:	f000 f80f 	bl	8000b04 <HAL_InitTick>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	e001      	b.n	8000af6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af2:	f7ff fe72 	bl	80007da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58004000 	.word	0x58004000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d024      	beq.n	8000b62 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b18:	f003 f920 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f974 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10f      	bne.n	8000b5c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d809      	bhi.n	8000b56 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4a:	f000 f940 	bl	8000dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_InitTick+0x70>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e004      	b.n	8000b66 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e001      	b.n	8000b66 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000050 	.word	0x20000050
 8000b74:	2000004c 	.word	0x2000004c

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000050 	.word	0x20000050
 8000b9c:	20000234 	.word	0x20000234

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000234 	.word	0x20000234

08000bb8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTickPrio+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000004c 	.word	0x2000004c

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffe2 	bl	8000ba0 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffd2 	bl	8000ba0 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000050 	.word	0x20000050

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff40 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff90 	bl	8000d0c <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5f 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff33 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa4 	bl	8000d74 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e14c      	b.n	80010e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 813e 	beq.w	80010dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d017      	beq.n	8000f16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d123      	bne.n	8000f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0203 	and.w	r2, r3, #3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8098 	beq.w	80010dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fac:	4a54      	ldr	r2, [pc, #336]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd6:	d019      	beq.n	800100c <HAL_GPIO_Init+0x1d4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x2cc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_GPIO_Init+0x1d0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a49      	ldr	r2, [pc, #292]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1cc>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a48      	ldr	r2, [pc, #288]	; (800110c <HAL_GPIO_Init+0x2d4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1c8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a47      	ldr	r2, [pc, #284]	; (8001110 <HAL_GPIO_Init+0x2d8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1c4>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e008      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001000:	2303      	movs	r3, #3
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4938      	ldr	r1, [pc, #224]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001050:	4a30      	ldr	r2, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 80010b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f47f aeab 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	58000800 	.word	0x58000800

08001118 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e001      	b.n	800113a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001164:	e002      	b.n	800116c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af06      	add	r7, sp, #24
 800117e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0cb      	b.n	8001322 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f008 fa62 	bl	8009668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fd5a 	bl	8004c6a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e040      	b.n	800123e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3301      	adds	r3, #1
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3303      	adds	r3, #3
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3338      	adds	r3, #56	; 0x38
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	333c      	adds	r3, #60	; 0x3c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3340      	adds	r3, #64	; 0x40
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3b9      	bcc.n	80011bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e044      	b.n	80012d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3b5      	bcc.n	800124e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	687e      	ldr	r6, [r7, #4]
 80012ea:	466d      	mov	r5, sp
 80012ec:	f106 0410 	add.w	r4, r6, #16
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	1d33      	adds	r3, r6, #4
 80012fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f003 fccf 	bl	8004ca0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f001 fc45 	bl	8002baa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800132a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_PCD_Start+0x16>
 800133c:	2302      	movs	r3, #2
 800133e:	e012      	b.n	8001366 <HAL_PCD_Start+0x3c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fc75 	bl	8004c3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f005 ff39 	bl	80071ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f005 ff3e 	bl	80071fc <USB_ReadInterrupts>
 8001380:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fb05 	bl	800199c <PCD_EP_ISR_Handler>

    return;
 8001392:	e110      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d013      	beq.n	80013c6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f008 fa09 	bl	80097ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013bc:	2100      	movs	r1, #0
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8fc 	bl	80015bc <HAL_PCD_SetAddress>

    return;
 80013c4:	e0f7      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013e2:	b292      	uxth	r2, r2
 80013e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013e8:	e0e5      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00c      	beq.n	800140e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001406:	b292      	uxth	r2, r2
 8001408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800140c:	e0d3      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d034      	beq.n	8001482 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0204 	bic.w	r2, r2, #4
 800142a:	b292      	uxth	r2, r2
 800142c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0208 	bic.w	r2, r2, #8
 8001442:	b292      	uxth	r2, r2
 8001444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f008 fbad 	bl	8009bbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f008 f9ec 	bl	8009840 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800147a:	b292      	uxth	r2, r2
 800147c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001480:	e099      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001488:	2b00      	cmp	r3, #0
 800148a:	d027      	beq.n	80014dc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001494:	b29a      	uxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0208 	orr.w	r2, r2, #8
 800149e:	b292      	uxth	r2, r2
 80014a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0204 	orr.w	r2, r2, #4
 80014ce:	b292      	uxth	r2, r2
 80014d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f008 f999 	bl	800980c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014da:	e06c      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d040      	beq.n	8001568 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f8:	b292      	uxth	r2, r2
 80014fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d12b      	bne.n	8001560 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0204 	orr.w	r2, r2, #4
 800151a:	b292      	uxth	r2, r2
 800151c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0208 	orr.w	r2, r2, #8
 8001532:	b292      	uxth	r2, r2
 8001534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001548:	b29b      	uxth	r3, r3
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001556:	2101      	movs	r1, #1
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f008 fb2f 	bl	8009bbc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800155e:	e02a      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f008 f953 	bl	800980c <HAL_PCD_SuspendCallback>
    return;
 8001566:	e026      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00f      	beq.n	8001592 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001584:	b292      	uxth	r2, r2
 8001586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f008 f911 	bl	80097b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001590:	e011      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00c      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015b4:	bf00      	nop
  }
}
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_PCD_SetAddress+0x1a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e013      	b.n	80015fe <HAL_PCD_SetAddress+0x42>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f005 fdd9 	bl	80071a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	4608      	mov	r0, r1
 8001610:	4611      	mov	r1, r2
 8001612:	461a      	mov	r2, r3
 8001614:	4603      	mov	r3, r0
 8001616:	70fb      	strb	r3, [r7, #3]
 8001618:	460b      	mov	r3, r1
 800161a:	803b      	strh	r3, [r7, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da0e      	bge.n	800164a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2201      	movs	r2, #1
 8001646:	705a      	strb	r2, [r3, #1]
 8001648:	e00e      	b.n	8001668 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	f003 0207 	and.w	r2, r3, #7
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2da      	uxtb	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001674:	883a      	ldrh	r2, [r7, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	78ba      	ldrb	r2, [r7, #2]
 800167e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001680:	78bb      	ldrb	r3, [r7, #2]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d102      	bne.n	800168c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_PCD_EP_Open+0x94>
 8001696:	2302      	movs	r3, #2
 8001698:	e00e      	b.n	80016b8 <HAL_PCD_EP_Open+0xb2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fb1b 	bl	8004ce4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80016b6:	7afb      	ldrb	r3, [r7, #11]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da0e      	bge.n	80016f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	705a      	strb	r2, [r3, #1]
 80016f0:	e00e      	b.n	8001710 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	f003 0207 	and.w	r2, r3, #7
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	b2da      	uxtb	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_PCD_EP_Close+0x6a>
 8001726:	2302      	movs	r3, #2
 8001728:	e00e      	b.n	8001748 <HAL_PCD_EP_Close+0x88>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fe97 	bl	800546c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	460b      	mov	r3, r1
 800175e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	f003 0207 	and.w	r2, r3, #7
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2200      	movs	r2, #0
 800178e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	b2da      	uxtb	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6979      	ldr	r1, [r7, #20]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f84f 	bl	8005846 <USB_EPStartXfer>

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f003 0207 	and.w	r2, r3, #7
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80017d4:	681b      	ldr	r3, [r3, #0]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	460b      	mov	r3, r1
 80017f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2201      	movs	r2, #1
 800182c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	b2da      	uxtb	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6979      	ldr	r1, [r7, #20]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 f800 	bl	8005846 <USB_EPStartXfer>

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	f003 0207 	and.w	r2, r3, #7
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d901      	bls.n	800186e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e03e      	b.n	80018ec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800186e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	da0e      	bge.n	8001894 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	705a      	strb	r2, [r3, #1]
 8001892:	e00c      	b.n	80018ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_PCD_EP_SetStall+0x7e>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e00e      	b.n	80018ec <HAL_PCD_EP_SetStall+0x9c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fb63 	bl	8006fa8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f003 020f 	and.w	r2, r3, #15
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d901      	bls.n	8001912 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e040      	b.n	8001994 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da0e      	bge.n	8001938 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	705a      	strb	r2, [r3, #1]
 8001936:	e00e      	b.n	8001956 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 0207 	and.w	r2, r3, #7
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	b2da      	uxtb	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_PCD_EP_ClrStall+0x82>
 8001972:	2302      	movs	r3, #2
 8001974:	e00e      	b.n	8001994 <HAL_PCD_EP_ClrStall+0xa0>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fb60 	bl	800704a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b096      	sub	sp, #88	; 0x58
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019a4:	e3b1      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80019c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 8173 	bne.w	8001cb0 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d150      	bne.n	8001a78 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e6:	81fb      	strh	r3, [r7, #14]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3328      	adds	r3, #40	; 0x28
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	441a      	add	r2, r3
 8001a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a36:	2100      	movs	r1, #0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f007 fea0 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 835f 	beq.w	800210a <PCD_EP_ISR_Handler+0x76e>
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f040 835a 	bne.w	800210a <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a76:	e348      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d032      	beq.n	8001afc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	f005 fbe5 	bl	80072a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	823b      	strh	r3, [r7, #16]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	8a3a      	ldrh	r2, [r7, #16]
 8001aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001af0:	b292      	uxth	r2, r2
 8001af2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f007 fe15 	bl	8009724 <HAL_PCD_SetupStageCallback>
 8001afa:	e306      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001afc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f280 8302 	bge.w	800210a <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b12:	4013      	ands	r3, r2
 8001b14:	83fb      	strh	r3, [r7, #30]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	8bfa      	ldrh	r2, [r7, #30]
 8001b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b20:	b292      	uxth	r2, r2
 8001b22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d019      	beq.n	8001b88 <PCD_EP_ISR_Handler+0x1ec>
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d015      	beq.n	8001b88 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b62:	6959      	ldr	r1, [r3, #20]
 8001b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f005 fb97 	bl	80072a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f007 fde0 	bl	8009748 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 82b5 	bne.w	800210a <PCD_EP_ISR_Handler+0x76e>
 8001ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ba4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001bac:	f000 82ad 	beq.w	800210a <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	801a      	strh	r2, [r3, #0]
 8001be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b3e      	cmp	r3, #62	; 0x3e
 8001be6:	d91d      	bls.n	8001c24 <PCD_EP_ISR_Handler+0x288>
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <PCD_EP_ISR_Handler+0x266>
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	647b      	str	r3, [r7, #68]	; 0x44
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	029b      	lsls	r3, r3, #10
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	e026      	b.n	8001c72 <PCD_EP_ISR_Handler+0x2d6>
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <PCD_EP_ISR_Handler+0x2a6>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e017      	b.n	8001c72 <PCD_EP_ISR_Handler+0x2d6>
 8001c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <PCD_EP_ISR_Handler+0x2c0>
 8001c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c58:	3301      	adds	r3, #1
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c82:	827b      	strh	r3, [r7, #18]
 8001c84:	8a7b      	ldrh	r3, [r7, #18]
 8001c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c8a:	827b      	strh	r3, [r7, #18]
 8001c8c:	8a7b      	ldrh	r3, [r7, #18]
 8001c8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c92:	827b      	strh	r3, [r7, #18]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	8a7b      	ldrh	r3, [r7, #18]
 8001c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	8013      	strh	r3, [r2, #0]
 8001cae:	e22c      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cc4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f280 80f6 	bge.w	8001eba <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d00:	b292      	uxth	r2, r2
 8001d02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d04:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	7b1b      	ldrb	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d123      	bne.n	8001d6a <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001d4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 808e 	beq.w	8001e70 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5a:	6959      	ldr	r1, [r3, #20]
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	88da      	ldrh	r2, [r3, #6]
 8001d60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d64:	f005 fa9c 	bl	80072a0 <USB_ReadPMA>
 8001d68:	e082      	b.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6c:	78db      	ldrb	r3, [r3, #3]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d10a      	bne.n	8001d88 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d76:	461a      	mov	r2, r3
 8001d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f9d3 	bl	8002126 <HAL_PCD_EP_DB_Receive>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001d86:	e073      	b.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	441a      	add	r2, r3
 8001db4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d022      	beq.n	8001e2c <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d02c      	beq.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1c:	6959      	ldr	r1, [r3, #20]
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	891a      	ldrh	r2, [r3, #8]
 8001e22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e26:	f005 fa3b 	bl	80072a0 <USB_ReadPMA>
 8001e2a:	e021      	b.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e50:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e66:	895a      	ldrh	r2, [r3, #10]
 8001e68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e6c:	f005 fa18 	bl	80072a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e78:	441a      	add	r2, r3
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e86:	441a      	add	r2, r3
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <PCD_EP_ISR_Handler+0x504>
 8001e94:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d206      	bcs.n	8001eae <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fc4e 	bl	8009748 <HAL_PCD_DataOutStageCallback>
 8001eac:	e005      	b.n	8001eba <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fcc6 	bl	8005846 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001eba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8121 	beq.w	800210a <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ec8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1a:	78db      	ldrb	r3, [r3, #3]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 80a2 	bne.w	8002066 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	7b1b      	ldrb	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8093 	beq.w	8002058 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d046      	beq.n	8001fcc <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d126      	bne.n	8001f94 <PCD_EP_ISR_Handler+0x5f8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	4413      	add	r3, r2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	00da      	lsls	r2, r3, #3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	4413      	add	r3, r2
 8001f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	e061      	b.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8001f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d15d      	bne.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	4413      	add	r3, r2
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	00da      	lsls	r2, r3, #3
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	e045      	b.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d126      	bne.n	8002028 <PCD_EP_ISR_Handler+0x68c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fee:	4413      	add	r3, r2
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	00da      	lsls	r2, r3, #3
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200c:	b29a      	uxth	r2, r3
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002020:	b29a      	uxth	r2, r3
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	e017      	b.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8002028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d113      	bne.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	4413      	add	r3, r2
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	00da      	lsls	r2, r3, #3
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	4413      	add	r3, r2
 800204c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
 8002052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f007 fb8d 	bl	800977e <HAL_PCD_DataInStageCallback>
 8002064:	e051      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d144      	bne.n	80020fc <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207a:	b29b      	uxth	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	4413      	add	r3, r2
 800208c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d907      	bls.n	80020b6 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	619a      	str	r2, [r3, #24]
 80020b4:	e002      	b.n	80020bc <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80020b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f007 fb57 	bl	800977e <HAL_PCD_DataInStageCallback>
 80020d0:	e01b      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80020d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020da:	441a      	add	r2, r3
 80020dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020de:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80020e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020e8:	441a      	add	r2, r3
 80020ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fba6 	bl	8005846 <USB_EPStartXfer>
 80020fa:	e006      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002100:	461a      	mov	r2, r3
 8002102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f917 	bl	8002338 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21b      	sxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f6ff ac45 	blt.w	80019a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3758      	adds	r7, #88	; 0x58
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d07c      	beq.n	8002238 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4413      	add	r3, r2
 8002158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002162:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	8b7b      	ldrh	r3, [r7, #26]
 800216a:	429a      	cmp	r2, r3
 800216c:	d306      	bcc.n	800217c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	8b7b      	ldrh	r3, [r7, #26]
 8002174:	1ad2      	subs	r2, r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	619a      	str	r2, [r3, #24]
 800217a:	e002      	b.n	8002182 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d123      	bne.n	80021d2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a4:	833b      	strh	r3, [r7, #24]
 80021a6:	8b3b      	ldrh	r3, [r7, #24]
 80021a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021ac:	833b      	strh	r3, [r7, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	8b3b      	ldrh	r3, [r7, #24]
 80021be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01f      	beq.n	800221c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	82fb      	strh	r3, [r7, #22]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	8afb      	ldrh	r3, [r7, #22]
 8002208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800220c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002218:	b29b      	uxth	r3, r3
 800221a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800221c:	8b7b      	ldrh	r3, [r7, #26]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8085 	beq.w	800232e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6959      	ldr	r1, [r3, #20]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	891a      	ldrh	r2, [r3, #8]
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	f005 f835 	bl	80072a0 <USB_ReadPMA>
 8002236:	e07a      	b.n	800232e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	429a      	cmp	r2, r3
 8002266:	d306      	bcc.n	8002276 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	8b7b      	ldrh	r3, [r7, #26]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	e002      	b.n	800227c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d123      	bne.n	80022cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229e:	83fb      	strh	r3, [r7, #30]
 80022a0:	8bfb      	ldrh	r3, [r7, #30]
 80022a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022a6:	83fb      	strh	r3, [r7, #30]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	441a      	add	r2, r3
 80022b6:	8bfb      	ldrh	r3, [r7, #30]
 80022b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11f      	bne.n	8002316 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f0:	83bb      	strh	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	8bbb      	ldrh	r3, [r7, #28]
 8002302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800230a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002312:	b29b      	uxth	r3, r3
 8002314:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002316:	8b7b      	ldrh	r3, [r7, #26]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6959      	ldr	r1, [r3, #20]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	895a      	ldrh	r2, [r3, #10]
 8002328:	8b7b      	ldrh	r3, [r7, #26]
 800232a:	f004 ffb9 	bl	80072a0 <USB_ReadPMA>
    }
  }

  return count;
 800232e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0a4      	sub	sp, #144	; 0x90
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 81db 	beq.w	8002708 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	4413      	add	r3, r2
 800236c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002376:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002382:	429a      	cmp	r2, r3
 8002384:	d907      	bls.n	8002396 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	e002      	b.n	800239c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 80b9 	bne.w	8002518 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d126      	bne.n	80023fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	4413      	add	r3, r2
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	00da      	lsls	r2, r3, #3
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	4413      	add	r3, r2
 80023d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	801a      	strh	r2, [r3, #0]
 80023fa:	e01a      	b.n	8002432 <HAL_PCD_EP_DB_Transmit+0xfa>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d116      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	4413      	add	r3, r2
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	00da      	lsls	r2, r3, #3
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	4413      	add	r3, r2
 8002426:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d126      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0x156>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	00da      	lsls	r2, r3, #3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002472:	b29a      	uxth	r2, r3
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002486:	b29a      	uxth	r2, r3
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e017      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x186>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	785b      	ldrb	r3, [r3, #1]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d113      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x186>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	4413      	add	r3, r2
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	00da      	lsls	r2, r3, #3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	4413      	add	r3, r2
 80024b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	2200      	movs	r2, #0
 80024bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f007 f95a 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 82fa 	beq.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	82fb      	strh	r3, [r7, #22]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	441a      	add	r2, r3
 8002500:	8afb      	ldrh	r3, [r7, #22]
 8002502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]
 8002516:	e2d8      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d021      	beq.n	8002566 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	441a      	add	r2, r3
 800254e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	2b01      	cmp	r3, #1
 800256e:	f040 82ac 	bne.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800257a:	441a      	add	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002588:	441a      	add	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6a1a      	ldr	r2, [r3, #32]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d30b      	bcc.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025aa:	1ad2      	subs	r2, r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	621a      	str	r2, [r3, #32]
 80025b0:	e017      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d108      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80025ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025ca:	e00a      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d165      	bne.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x37e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	4413      	add	r3, r2
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	00da      	lsls	r2, r3, #3
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	4413      	add	r3, r2
 800260c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261c:	b29a      	uxth	r2, r3
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	2b3e      	cmp	r3, #62	; 0x3e
 8002628:	d91d      	bls.n	8002666 <HAL_PCD_EP_DB_Transmit+0x32e>
 800262a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
 8002632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_PCD_EP_DB_Transmit+0x30c>
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002640:	3b01      	subs	r3, #1
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29a      	uxth	r2, r3
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264c:	b29b      	uxth	r3, r3
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	b29b      	uxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265e:	b29a      	uxth	r2, r3
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	e044      	b.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <HAL_PCD_EP_DB_Transmit+0x34c>
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800267c:	b29a      	uxth	r2, r3
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e035      	b.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_PCD_EP_DB_Transmit+0x366>
 8002698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269a:	3301      	adds	r3, #1
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e01c      	b.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d118      	bne.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	4413      	add	r3, r2
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	00da      	lsls	r2, r3, #3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	4413      	add	r3, r2
 80026e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
 80026e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6959      	ldr	r1, [r3, #20]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	891a      	ldrh	r2, [r3, #8]
 80026fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002700:	b29b      	uxth	r3, r3
 8002702:	f004 fd8b 	bl	800721c <USB_WritePMA>
 8002706:	e1e0      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	4413      	add	r3, r2
 8002722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002738:	429a      	cmp	r2, r3
 800273a:	d307      	bcc.n	800274c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002744:	1ad2      	subs	r2, r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	e002      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 80c0 	bne.w	80028dc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d126      	bne.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002778:	4413      	add	r3, r2
 800277a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	00da      	lsls	r2, r3, #3
 8002782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002784:	4413      	add	r3, r2
 8002786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800278a:	67bb      	str	r3, [r7, #120]	; 0x78
 800278c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	b29a      	uxth	r2, r3
 8002798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	e01a      	b.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d116      	bne.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	667b      	str	r3, [r7, #100]	; 0x64
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ce:	4413      	add	r3, r2
 80027d0:	667b      	str	r3, [r7, #100]	; 0x64
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	00da      	lsls	r2, r3, #3
 80027d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027da:	4413      	add	r3, r2
 80027dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027e0:	663b      	str	r3, [r7, #96]	; 0x60
 80027e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e4:	2200      	movs	r2, #0
 80027e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	677b      	str	r3, [r7, #116]	; 0x74
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12b      	bne.n	800284e <HAL_PCD_EP_DB_Transmit+0x516>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280a:	4413      	add	r3, r2
 800280c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00da      	lsls	r2, r3, #3
 8002814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002816:	4413      	add	r3, r2
 8002818:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800281c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282c:	b29a      	uxth	r2, r3
 800282e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002844:	b29a      	uxth	r2, r3
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e017      	b.n	800287e <HAL_PCD_EP_DB_Transmit+0x546>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d113      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x546>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002864:	4413      	add	r3, r2
 8002866:	677b      	str	r3, [r7, #116]	; 0x74
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	00da      	lsls	r2, r3, #3
 800286e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002870:	4413      	add	r3, r2
 8002872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002876:	673b      	str	r3, [r7, #112]	; 0x70
 8002878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f006 ff7a 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 811a 	bne.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80028c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
 80028da:	e0f6      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d121      	bne.n	800292a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	b29b      	uxth	r3, r3
 8002928:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	f040 80ca 	bne.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800293e:	441a      	add	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800294c:	441a      	add	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d30b      	bcc.n	8002976 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	621a      	str	r2, [r3, #32]
 8002974:	e017      	b.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d108      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800297e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800298e:	e00a      	b.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d165      	bne.n	8002a80 <HAL_PCD_EP_DB_Transmit+0x748>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c8:	4413      	add	r3, r2
 80029ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00da      	lsls	r2, r3, #3
 80029d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d4:	4413      	add	r3, r2
 80029d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029da:	65bb      	str	r3, [r7, #88]	; 0x58
 80029dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f0:	2b3e      	cmp	r3, #62	; 0x3e
 80029f2:	d91d      	bls.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80029f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	e041      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x716>
 8002a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4a:	801a      	strh	r2, [r3, #0]
 8002a4c:	e032      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x730>
 8002a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a64:	3301      	adds	r3, #1
 8002a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	029b      	lsls	r3, r3, #10
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	e019      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d115      	bne.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	4413      	add	r3, r2
 8002a98:	657b      	str	r3, [r7, #84]	; 0x54
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	00da      	lsls	r2, r3, #3
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8002aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6959      	ldr	r1, [r3, #20]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	895a      	ldrh	r2, [r3, #10]
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f004 fba9 	bl	800721c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae4:	82bb      	strh	r3, [r7, #20]
 8002ae6:	8abb      	ldrh	r3, [r7, #20]
 8002ae8:	f083 0310 	eor.w	r3, r3, #16
 8002aec:	82bb      	strh	r3, [r7, #20]
 8002aee:	8abb      	ldrh	r3, [r7, #20]
 8002af0:	f083 0320 	eor.w	r3, r3, #32
 8002af4:	82bb      	strh	r3, [r7, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	441a      	add	r2, r3
 8002b04:	8abb      	ldrh	r3, [r7, #20]
 8002b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3790      	adds	r7, #144	; 0x90
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	817b      	strh	r3, [r7, #10]
 8002b32:	4613      	mov	r3, r2
 8002b34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e009      	b.n	8002b6e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b5a:	897a      	ldrh	r2, [r7, #10]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b6e:	893b      	ldrh	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	80da      	strh	r2, [r3, #6]
 8002b82:	e00b      	b.n	8002b9c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2201      	movs	r2, #1
 8002b88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	58000400 	.word	0x58000400

08002c20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	58000400 	.word	0x58000400

08002c3c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4a:	6053      	str	r3, [r2, #4]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	58000400 	.word	0x58000400

08002c5c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6e:	d101      	bne.n	8002c74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cce:	d101      	bne.n	8002cd4 <LL_RCC_HSE_IsReady+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_RCC_HSE_IsReady+0x1a>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d101      	bne.n	8002d34 <LL_RCC_HSI_IsReady+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_RCC_HSI_IsReady+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d101      	bne.n	8002dc6 <LL_RCC_HSI48_IsReady+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_RCC_HSI48_IsReady+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d101      	bne.n	8002e72 <LL_RCC_LSE_IsReady+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_RCC_LSE_IsReady+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d101      	bne.n	8002eda <LL_RCC_LSI1_IsReady+0x18>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_RCC_LSI1_IsReady+0x1a>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d101      	bne.n	8002f42 <LL_RCC_LSI2_IsReady+0x18>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_RCC_LSI2_IsReady+0x1a>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6013      	str	r3, [r2, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d101      	bne.n	8002fce <LL_RCC_MSI_IsReady+0x16>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_RCC_MSI_IsReady+0x18>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003012:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2bb0      	cmp	r3, #176	; 0xb0
 8003018:	d901      	bls.n	800301e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800301a:	23b0      	movs	r3, #176	; 0xb0
 800301c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800301e:	687b      	ldr	r3, [r7, #4]
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 0203 	bic.w	r2, r3, #3
 8003068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800312a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ea:	d101      	bne.n	80031f0 <LL_RCC_PLL_IsReady+0x18>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <LL_RCC_PLL_IsReady+0x1a>
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0303 	and.w	r3, r3, #3
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d101      	bne.n	8003276 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003296:	d101      	bne.n	800329c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d101      	bne.n	80032c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e0:	d101      	bne.n	80032e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003304:	d101      	bne.n	800330a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b08d      	sub	sp, #52	; 0x34
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e363      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 808d 	beq.w	8003452 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003338:	f7ff fea1 	bl	800307e <LL_RCC_GetSysClkSource>
 800333c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333e:	f7ff ff82 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003342:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x3e>
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d147      	bne.n	80033e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	2b01      	cmp	r3, #1
 8003354:	d144      	bne.n	80033e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e347      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003366:	f7ff fe4c 	bl	8003002 <LL_RCC_MSI_GetRange>
 800336a:	4603      	mov	r3, r0
 800336c:	429c      	cmp	r4, r3
 800336e:	d914      	bls.n	800339a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fd05 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e336      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe26 	bl	8002fda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fe4a 	bl	800302c <LL_RCC_MSI_SetCalibTrimming>
 8003398:	e013      	b.n	80033c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe1b 	bl	8002fda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fe3f 	bl	800302c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fce6 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e317      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033c2:	f000 fccb 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4aa4      	ldr	r2, [pc, #656]	; (800365c <HAL_RCC_OscConfig+0x344>)
 80033ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033cc:	4ba4      	ldr	r3, [pc, #656]	; (8003660 <HAL_RCC_OscConfig+0x348>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fb97 	bl	8000b04 <HAL_InitTick>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d039      	beq.n	8003450 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e308      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01e      	beq.n	8003426 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033e8:	f7ff fdc8 	bl	8002f7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fbd8 	bl	8000ba0 <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f4:	f7fd fbd4 	bl	8000ba0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e2f5      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003406:	f7ff fdd7 	bl	8002fb8 <LL_RCC_MSI_IsReady>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f1      	beq.n	80033f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fde0 	bl	8002fda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fe04 	bl	800302c <LL_RCC_MSI_SetCalibTrimming>
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003426:	f7ff fdb8 	bl	8002f9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800342a:	f7fd fbb9 	bl	8000ba0 <HAL_GetTick>
 800342e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003432:	f7fd fbb5 	bl	8000ba0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e2d6      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003444:	f7ff fdb8 	bl	8002fb8 <LL_RCC_MSI_IsReady>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f1      	bne.n	8003432 <HAL_RCC_OscConfig+0x11a>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003450:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d047      	beq.n	80034ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	f7ff fe0e 	bl	800307e <LL_RCC_GetSysClkSource>
 8003462:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003464:	f7ff feef 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003468:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x164>
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d108      	bne.n	8003488 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d105      	bne.n	8003488 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d134      	bne.n	80034ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e2b4      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d102      	bne.n	8003498 <HAL_RCC_OscConfig+0x180>
 8003492:	f7ff fbf5 	bl	8002c80 <LL_RCC_HSE_Enable>
 8003496:	e001      	b.n	800349c <HAL_RCC_OscConfig+0x184>
 8003498:	f7ff fc01 	bl	8002c9e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fb7c 	bl	8000ba0 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fd fb78 	bl	8000ba0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e299      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034be:	f7ff fbfd 	bl	8002cbc <LL_RCC_HSE_IsReady>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f1      	beq.n	80034ac <HAL_RCC_OscConfig+0x194>
 80034c8:	e011      	b.n	80034ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fd fb69 	bl	8000ba0 <HAL_GetTick>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d2:	f7fd fb65 	bl	8000ba0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e286      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034e4:	f7ff fbea 	bl	8002cbc <LL_RCC_HSE_IsReady>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f1      	bne.n	80034d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d04c      	beq.n	8003594 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fa:	f7ff fdc0 	bl	800307e <LL_RCC_GetSysClkSource>
 80034fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003500:	f7ff fea1 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003504:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d005      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d10e      	bne.n	8003530 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d10b      	bne.n	8003530 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e266      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fc09 	bl	8002d40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800352e:	e031      	b.n	8003594 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d019      	beq.n	800356c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003538:	f7ff fbd2 	bl	8002ce0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fb30 	bl	8000ba0 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003544:	f7fd fb2c 	bl	8000ba0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e24d      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003556:	f7ff fbe1 	bl	8002d1c <LL_RCC_HSI_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f1      	beq.n	8003544 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fbeb 	bl	8002d40 <LL_RCC_HSI_SetCalibTrimming>
 800356a:	e013      	b.n	8003594 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356c:	f7ff fbc7 	bl	8002cfe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fb16 	bl	8000ba0 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003578:	f7fd fb12 	bl	8000ba0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e233      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800358a:	f7ff fbc7 	bl	8002d1c <LL_RCC_HSI_IsReady>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f1      	bne.n	8003578 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a3 	beq.w	80036f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d076      	beq.n	80036a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d046      	beq.n	8003650 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80035c2:	f7ff fc7e 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035cc:	f7ff fc57 	bl	8002e7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035d0:	f7fd fae6 	bl	8000ba0 <HAL_GetTick>
 80035d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035d8:	f7fd fae2 	bl	8000ba0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e203      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035ea:	f7ff fc6a 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f1      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80035f4:	f7ff fc77 	bl	8002ee6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd fad2 	bl	8000ba0 <HAL_GetTick>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003600:	f7fd face 	bl	8000ba0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b03      	cmp	r3, #3
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1ef      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003612:	f7ff fc8a 	bl	8002f2a <LL_RCC_LSI2_IsReady>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f1      	beq.n	8003600 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fc94 	bl	8002f4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003626:	f7ff fc3b 	bl	8002ea0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fd fab9 	bl	8000ba0 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003632:	f7fd fab5 	bl	8000ba0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1d6      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003644:	f7ff fc3d 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f1      	bne.n	8003632 <HAL_RCC_OscConfig+0x31a>
 800364e:	e051      	b.n	80036f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003650:	f7ff fc15 	bl	8002e7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd faa4 	bl	8000ba0 <HAL_GetTick>
 8003658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800365a:	e00c      	b.n	8003676 <HAL_RCC_OscConfig+0x35e>
 800365c:	20000048 	.word	0x20000048
 8003660:	2000004c 	.word	0x2000004c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003664:	f7fd fa9c 	bl	8000ba0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1bd      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003676:	f7ff fc24 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f1      	beq.n	8003664 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003680:	f7ff fc42 	bl	8002f08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003686:	f7fd fa8b 	bl	8000ba0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1ac      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003698:	f7ff fc47 	bl	8002f2a <LL_RCC_LSI2_IsReady>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f1      	bne.n	8003686 <HAL_RCC_OscConfig+0x36e>
 80036a2:	e027      	b.n	80036f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80036a4:	f7ff fc30 	bl	8002f08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd fa7a 	bl	8000ba0 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036b0:	f7fd fa76 	bl	8000ba0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e197      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036c2:	f7ff fc32 	bl	8002f2a <LL_RCC_LSI2_IsReady>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f1      	bne.n	80036b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80036cc:	f7ff fbe8 	bl	8002ea0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fa66 	bl	8000ba0 <HAL_GetTick>
 80036d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036d8:	f7fd fa62 	bl	8000ba0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e183      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036ea:	f7ff fbea 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f1      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003700:	4ba7      	ldr	r3, [pc, #668]	; (80039a0 <HAL_RCC_OscConfig+0x688>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d114      	bne.n	8003736 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800370c:	f7ff fa78 	bl	8002c00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003710:	f7fd fa46 	bl	8000ba0 <HAL_GetTick>
 8003714:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003718:	f7fd fa42 	bl	8000ba0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e163      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372a:	4b9d      	ldr	r3, [pc, #628]	; (80039a0 <HAL_RCC_OscConfig+0x688>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x42c>
 800373e:	f7ff fb48 	bl	8002dd2 <LL_RCC_LSE_Enable>
 8003742:	e00c      	b.n	800375e <HAL_RCC_OscConfig+0x446>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b05      	cmp	r3, #5
 800374a:	d104      	bne.n	8003756 <HAL_RCC_OscConfig+0x43e>
 800374c:	f7ff fb63 	bl	8002e16 <LL_RCC_LSE_EnableBypass>
 8003750:	f7ff fb3f 	bl	8002dd2 <LL_RCC_LSE_Enable>
 8003754:	e003      	b.n	800375e <HAL_RCC_OscConfig+0x446>
 8003756:	f7ff fb4d 	bl	8002df4 <LL_RCC_LSE_Disable>
 800375a:	f7ff fb6d 	bl	8002e38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d014      	beq.n	8003790 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fd fa1b 	bl	8000ba0 <HAL_GetTick>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fd fa17 	bl	8000ba0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e136      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003784:	f7ff fb69 	bl	8002e5a <LL_RCC_LSE_IsReady>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ef      	beq.n	800376e <HAL_RCC_OscConfig+0x456>
 800378e:	e013      	b.n	80037b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd fa06 	bl	8000ba0 <HAL_GetTick>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fd fa02 	bl	8000ba0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e121      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037ae:	f7ff fb54 	bl	8002e5a <LL_RCC_LSE_IsReady>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ef      	bne.n	8003798 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02c      	beq.n	800381e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d014      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037cc:	f7ff facd 	bl	8002d6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd f9e6 	bl	8000ba0 <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d8:	f7fd f9e2 	bl	8000ba0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e103      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037ea:	f7ff fae0 	bl	8002dae <LL_RCC_HSI48_IsReady>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f1      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4c0>
 80037f4:	e013      	b.n	800381e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037f6:	f7ff fac9 	bl	8002d8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fd f9d1 	bl	8000ba0 <HAL_GetTick>
 80037fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003802:	f7fd f9cd 	bl	8000ba0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0ee      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003814:	f7ff facb 	bl	8002dae <LL_RCC_HSI48_IsReady>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f1      	bne.n	8003802 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80e4 	beq.w	80039f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003828:	f7ff fc29 	bl	800307e <LL_RCC_GetSysClkSource>
 800382c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	2b02      	cmp	r3, #2
 800383c:	f040 80b4 	bne.w	80039a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	429a      	cmp	r2, r3
 800384c:	d123      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d11c      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d114      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d10d      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d05d      	beq.n	8003952 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d058      	beq.n	800394e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0a1      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038ae:	f7ff fc84 	bl	80031ba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b2:	f7fd f975 	bl	8000ba0 <HAL_GetTick>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fd f971 	bl	8000ba0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e092      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ef      	bne.n	80038ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x68c>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f2:	0212      	lsls	r2, r2, #8
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038fa:	4311      	orrs	r1, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003906:	430a      	orrs	r2, r1
 8003908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003910:	f7ff fc44 	bl	800319c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003924:	f7fd f93c 	bl	8000ba0 <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd f938 	bl	8000ba0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e059      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394c:	e050      	b.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e04f      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d147      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003960:	f7ff fc1c 	bl	800319c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003974:	f7fd f914 	bl	8000ba0 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fd f910 	bl	8000ba0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e031      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCC_OscConfig+0x664>
 800399c:	e028      	b.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
 800399e:	bf00      	nop
 80039a0:	58000400 	.word	0x58000400
 80039a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d01e      	beq.n	80039ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	f7ff fc04 	bl	80031ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd f8f5 	bl	8000ba0 <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fd f8f1 	bl	8000ba0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e012      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ef      	bne.n	80039ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_OscConfig+0x6e4>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]
 80039ea:	e001      	b.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3734      	adds	r7, #52	; 0x34
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	eefefffc 	.word	0xeefefffc

08003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e12d      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b98      	ldr	r3, [pc, #608]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d91b      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b95      	ldr	r3, [pc, #596]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4993      	ldr	r1, [pc, #588]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a32:	f7fd f8b5 	bl	8000ba0 <HAL_GetTick>
 8003a36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a3a:	f7fd f8b1 	bl	8000ba0 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e111      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4c:	4b8a      	ldr	r3, [pc, #552]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fb13 	bl	8003096 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a70:	f7fd f896 	bl	8000ba0 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a78:	f7fd f892 	bl	8000ba0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0f2      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a8a:	f7ff fbe8 	bl	800325e <LL_RCC_IsActiveFlag_HPRE>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f1      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fb0a 	bl	80030be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd f879 	bl	8000ba0 <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ab2:	f7fd f875 	bl	8000ba0 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0d5      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ac4:	f7ff fbdd 	bl	8003282 <LL_RCC_IsActiveFlag_C2HPRE>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f1      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fb03 	bl	80030ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ae4:	f7fd f85c 	bl	8000ba0 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aec:	f7fd f858 	bl	8000ba0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0b8      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003afe:	f7ff fbd3 	bl	80032a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f1      	beq.n	8003aec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d016      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fafd 	bl	8003118 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b1e:	f7fd f83f 	bl	8000ba0 <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b26:	f7fd f83b 	bl	8000ba0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e09b      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b38:	f7ff fbc9 	bl	80032ce <LL_RCC_IsActiveFlag_PPRE1>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f1      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d017      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff faf3 	bl	8003140 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd f821 	bl	8000ba0 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b62:	f7fd f81d 	bl	8000ba0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e07d      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b74:	f7ff fbbd 	bl	80032f2 <LL_RCC_IsActiveFlag_PPRE2>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f1      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d043      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b92:	f7ff f893 	bl	8002cbc <LL_RCC_HSE_IsReady>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d11e      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e067      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ba8:	f7ff fb16 	bl	80031d8 <LL_RCC_PLL_IsReady>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d113      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e05c      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bbe:	f7ff f9fb 	bl	8002fb8 <LL_RCC_MSI_IsReady>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e051      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003bcc:	f7ff f8a6 	bl	8002d1c <LL_RCC_HSI_IsReady>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e04a      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fa39 	bl	8003056 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fc ffdc 	bl	8000ba0 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fc ffd8 	bl	8000ba0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e036      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	f7ff fa3c 	bl	800307e <LL_RCC_GetSysClkSource>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d1ec      	bne.n	8003bec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d21b      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 0207 	bic.w	r2, r3, #7
 8003c28:	4913      	ldr	r1, [pc, #76]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fc ffb6 	bl	8000ba0 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c38:	f7fc ffb2 	bl	8000ba0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e012      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1ef      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c58:	f000 f880 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <HAL_RCC_ClockConfig+0x27c>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c62:	f7fc ffa9 	bl	8000bb8 <HAL_GetTickPrio>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc ff4b 	bl	8000b04 <HAL_InitTick>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	58004000 	.word	0x58004000
 8003c7c:	20000048 	.word	0x20000048

08003c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c86:	f7ff f9fa 	bl	800307e <LL_RCC_GetSysClkSource>
 8003c8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c92:	f7ff f9b6 	bl	8003002 <LL_RCC_MSI_GetRange>
 8003c96:	4603      	mov	r3, r0
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a2b      	ldr	r2, [pc, #172]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e04b      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e045      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cba:	f7fe ffcf 	bl	8002c5c <LL_RCC_HSE_IsEnabledDiv2>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d102      	bne.n	8003cca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e03a      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003cca:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e037      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003cd0:	f7ff fab9 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003cd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d003      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x64>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x6a>
 8003ce2:	e00d      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ce6:	60bb      	str	r3, [r7, #8]
        break;
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cea:	f7fe ffb7 	bl	8002c5c <LL_RCC_HSE_IsEnabledDiv2>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d102      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cf6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cf8:	e00d      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003cfc:	60bb      	str	r3, [r7, #8]
        break;
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d00:	f7ff f97f 	bl	8003002 <LL_RCC_MSI_GetRange>
 8003d04:	4603      	mov	r3, r0
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d12:	60bb      	str	r3, [r7, #8]
        break;
 8003d14:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d16:	f7ff fa71 	bl	80031fc <LL_RCC_PLL_GetN>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	fb03 f402 	mul.w	r4, r3, r2
 8003d22:	f7ff fa84 	bl	800322e <LL_RCC_PLL_GetDivider>
 8003d26:	4603      	mov	r3, r0
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d30:	f7ff fa71 	bl	8003216 <LL_RCC_PLL_GetR>
 8003d34:	4603      	mov	r3, r0
 8003d36:	0f5b      	lsrs	r3, r3, #29
 8003d38:	3301      	adds	r3, #1
 8003d3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	0800ad98 	.word	0x0800ad98
 8003d50:	00f42400 	.word	0x00f42400
 8003d54:	003d0900 	.word	0x003d0900
 8003d58:	007a1200 	.word	0x007a1200

08003d5c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b598      	push	{r3, r4, r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d60:	f7ff ff8e 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003d64:	4604      	mov	r4, r0
 8003d66:	f7ff f9ff 	bl	8003168 <LL_RCC_GetAHBPrescaler>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd98      	pop	{r3, r4, r7, pc}
 8003d80:	0800ad58 	.word	0x0800ad58

08003d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2bb0      	cmp	r3, #176	; 0xb0
 8003d90:	d903      	bls.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e007      	b.n	8003daa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003daa:	f7ff f9e9 	bl	8003180 <LL_RCC_GetAHB4Prescaler>
 8003dae:	4603      	mov	r3, r0
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0c9c      	lsrs	r4, r3, #18
 8003dce:	f7fe ff27 	bl	8002c20 <HAL_PWREx_GetVoltageRange>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 f80c 	bl	8003df4 <RCC_SetFlashLatency>
 8003ddc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd90      	pop	{r4, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	0800ad98 	.word	0x0800ad98
 8003dec:	0800ad58 	.word	0x0800ad58
 8003df0:	431bde83 	.word	0x431bde83

08003df4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b093      	sub	sp, #76	; 0x4c
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <RCC_SetFlashLatency+0xe8>)
 8003e00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003e0a:	4a35      	ldr	r2, [pc, #212]	; (8003ee0 <RCC_SetFlashLatency+0xec>)
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <RCC_SetFlashLatency+0xf0>)
 8003e18:	f107 040c 	add.w	r4, r7, #12
 8003e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e22:	2300      	movs	r3, #0
 8003e24:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2c:	d11a      	bne.n	8003e64 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	643b      	str	r3, [r7, #64]	; 0x40
 8003e32:	e013      	b.n	8003e5c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	3348      	adds	r3, #72	; 0x48
 8003e3a:	443b      	add	r3, r7
 8003e3c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d807      	bhi.n	8003e56 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	3348      	adds	r3, #72	; 0x48
 8003e4c:	443b      	add	r3, r7
 8003e4e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e54:	e020      	b.n	8003e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	3301      	adds	r3, #1
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d9e8      	bls.n	8003e34 <RCC_SetFlashLatency+0x40>
 8003e62:	e019      	b.n	8003e98 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e64:	2300      	movs	r3, #0
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e68:	e013      	b.n	8003e92 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3348      	adds	r3, #72	; 0x48
 8003e70:	443b      	add	r3, r7
 8003e72:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d807      	bhi.n	8003e8c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	3348      	adds	r3, #72	; 0x48
 8003e82:	443b      	add	r3, r7
 8003e84:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e8a:	e005      	b.n	8003e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8e:	3301      	adds	r3, #1
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d9e8      	bls.n	8003e6a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <RCC_SetFlashLatency+0xf4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 0207 	bic.w	r2, r3, #7
 8003ea0:	4911      	ldr	r1, [pc, #68]	; (8003ee8 <RCC_SetFlashLatency+0xf4>)
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ea8:	f7fc fe7a 	bl	8000ba0 <HAL_GetTick>
 8003eac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eae:	e008      	b.n	8003ec2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003eb0:	f7fc fe76 	bl	8000ba0 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e007      	b.n	8003ed2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <RCC_SetFlashLatency+0xf4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1ef      	bne.n	8003eb0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	374c      	adds	r7, #76	; 0x4c
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd90      	pop	{r4, r7, pc}
 8003eda:	bf00      	nop
 8003edc:	0800ace4 	.word	0x0800ace4
 8003ee0:	0800acf4 	.word	0x0800acf4
 8003ee4:	0800ad00 	.word	0x0800ad00
 8003ee8:	58004000 	.word	0x58004000

08003eec <LL_RCC_LSE_IsEnabled>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <LL_RCC_LSE_IsEnabled+0x18>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <LL_RCC_LSE_IsEnabled+0x1a>
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_LSE_IsReady>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d101      	bne.n	8003f28 <LL_RCC_LSE_IsReady+0x18>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_RCC_LSE_IsReady+0x1a>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_RCC_MSI_EnablePLLMode>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_SetRFWKPClockSource>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_SetSMPSClockSource>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f023 0203 	bic.w	r2, r3, #3
 8003f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LL_RCC_SetSMPSPrescaler>:
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_SetUSARTClockSource>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_SetLPUARTClockSource>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800400e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_RCC_SetI2CClockSource>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800403e:	43db      	mvns	r3, r3
 8004040:	401a      	ands	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_SetLPTIMClockSource>:
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0c1b      	lsrs	r3, r3, #16
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	43db      	mvns	r3, r3
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_SetSAIClockSource>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_RCC_SetRNGClockSource>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_SetCLK48ClockSource>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_RCC_SetUSBClockSource>:
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ffe3 	bl	80040ec <LL_RCC_SetCLK48ClockSource>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <LL_RCC_SetADCClockSource>:
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_RCC_SetRTCClockSource>:
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800416e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_GetRTCClockSource>:
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_RCC_ForceBackupDomainReset>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_RCC_PLLSAI1_Enable>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041f6:	6013      	str	r3, [r2, #0]
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_PLLSAI1_Disable>:
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004210:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004214:	6013      	str	r3, [r2, #0]
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_RCC_PLLSAI1_IsReady>:
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004232:	d101      	bne.n	8004238 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800424c:	2300      	movs	r3, #0
 800424e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004250:	2300      	movs	r3, #0
 8004252:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d034      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004268:	d021      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800426a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800426e:	d81b      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004274:	d01d      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800427a:	d815      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004284:	d110      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004296:	e00d      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f94d 	bl	800453c <RCCEx_PLLSAI1_ConfigNP>
 80042a2:	4603      	mov	r3, r0
 80042a4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042a6:	e005      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
        break;
 80042ac:	e002      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b4:	7ffb      	ldrb	r3, [r7, #31]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fee8 	bl	8004094 <LL_RCC_SetSAIClockSource>
 80042c4:	e001      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	7ffb      	ldrb	r3, [r7, #31]
 80042c8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d046      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80042d6:	f7ff ff56 	bl	8004186 <LL_RCC_GetRTCClockSource>
 80042da:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d03c      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042e6:	f7fe fc8b 	bl	8002c00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff30 	bl	800415a <LL_RCC_SetRTCClockSource>
 80042fa:	e02e      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004306:	f7ff ff4b 	bl	80041a0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800430a:	f7ff ff5a 	bl	80041c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800431c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004326:	f7ff fde1 	bl	8003eec <LL_RCC_LSE_IsEnabled>
 800432a:	4603      	mov	r3, r0
 800432c:	2b01      	cmp	r3, #1
 800432e:	d114      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004330:	f7fc fc36 	bl	8000ba0 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004336:	e00b      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fc fc32 	bl	8000ba0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d902      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	77fb      	strb	r3, [r7, #31]
              break;
 800434e:	e004      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004350:	f7ff fdde 	bl	8003f10 <LL_RCC_LSE_IsReady>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d1ee      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	77bb      	strb	r3, [r7, #30]
 800435e:	e001      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7ffb      	ldrb	r3, [r7, #31]
 8004362:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fe2a 	bl	8003fce <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fe35 	bl	8003ffa <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe5d 	bl	8004060 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fe52 	bl	8004060 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fe2a 	bl	8004026 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fe1f 	bl	8004026 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fe8d 	bl	8004118 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004406:	d107      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004416:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004420:	d10b      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f8e3 	bl	80045f2 <RCCEx_PLLSAI1_ConfigNQ>
 800442c:	4603      	mov	r3, r0
 800442e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004430:	7ffb      	ldrb	r3, [r7, #31]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02b      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004458:	d003      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fe2a 	bl	80040c0 <LL_RCC_SetRNGClockSource>
 800446c:	e00a      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	2000      	movs	r0, #0
 800447a:	f7ff fe21 	bl	80040c0 <LL_RCC_SetRNGClockSource>
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fe34 	bl	80040ec <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800448c:	d107      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d022      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fe3d 	bl	800412e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044bc:	d107      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044d6:	d10b      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f8e3 	bl	80046a8 <RCCEx_PLLSAI1_ConfigNR>
 80044e2:	4603      	mov	r3, r0
 80044e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80044ec:	7ffb      	ldrb	r3, [r7, #31]
 80044ee:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fd26 	bl	8003f52 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fd45 	bl	8003fa6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fd2c 	bl	8003f7e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004526:	7fbb      	ldrb	r3, [r7, #30]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004534:	f7ff fcfe 	bl	8003f34 <LL_RCC_MSI_EnablePLLMode>
}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}

0800453c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004548:	f7ff fe5b 	bl	8004202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800454c:	f7fc fb28 	bl	8000ba0 <HAL_GetTick>
 8004550:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004552:	e009      	b.n	8004568 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004554:	f7fc fb24 	bl	8000ba0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d902      	bls.n	8004568 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	73fb      	strb	r3, [r7, #15]
      break;
 8004566:	e004      	b.n	8004572 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004568:	f7ff fe5a 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d137      	bne.n	80045e8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800458c:	4313      	orrs	r3, r2
 800458e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045a6:	f7ff fe1d 	bl	80041e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045aa:	f7fc faf9 	bl	8000ba0 <HAL_GetTick>
 80045ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045b0:	e009      	b.n	80045c6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b2:	f7fc faf5 	bl	8000ba0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d902      	bls.n	80045c6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	73fb      	strb	r3, [r7, #15]
        break;
 80045c4:	e004      	b.n	80045d0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045c6:	f7ff fe2b 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d1f0      	bne.n	80045b2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d108      	bne.n	80045e8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e4:	4313      	orrs	r3, r2
 80045e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045fe:	f7ff fe00 	bl	8004202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004602:	f7fc facd 	bl	8000ba0 <HAL_GetTick>
 8004606:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004608:	e009      	b.n	800461e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800460a:	f7fc fac9 	bl	8000ba0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d902      	bls.n	800461e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e004      	b.n	8004628 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800461e:	f7ff fdff 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d137      	bne.n	800469e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004658:	4313      	orrs	r3, r2
 800465a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800465c:	f7ff fdc2 	bl	80041e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004660:	f7fc fa9e 	bl	8000ba0 <HAL_GetTick>
 8004664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004666:	e009      	b.n	800467c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004668:	f7fc fa9a 	bl	8000ba0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d902      	bls.n	800467c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	73fb      	strb	r3, [r7, #15]
        break;
 800467a:	e004      	b.n	8004686 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800467c:	f7ff fdd0 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d1f0      	bne.n	8004668 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d108      	bne.n	800469e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800469a:	4313      	orrs	r3, r2
 800469c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046b4:	f7ff fda5 	bl	8004202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046b8:	f7fc fa72 	bl	8000ba0 <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046be:	e009      	b.n	80046d4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c0:	f7fc fa6e 	bl	8000ba0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	73fb      	strb	r3, [r7, #15]
      break;
 80046d2:	e004      	b.n	80046de <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046d4:	f7ff fda4 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d137      	bne.n	8004754 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046f8:	4313      	orrs	r3, r2
 80046fa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800470e:	4313      	orrs	r3, r2
 8004710:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004712:	f7ff fd67 	bl	80041e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004716:	f7fc fa43 	bl	8000ba0 <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800471c:	e009      	b.n	8004732 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800471e:	f7fc fa3f 	bl	8000ba0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d902      	bls.n	8004732 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	73fb      	strb	r3, [r7, #15]
        break;
 8004730:	e004      	b.n	800473c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004732:	f7ff fd75 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d1f0      	bne.n	800471e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e049      	b.n	8004804 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc f82f 	bl	80007e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f000 f9cb 	bl	8004b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e036      	b.n	8004892 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_TIM_Base_Start_IT+0x94>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x44>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d115      	bne.n	800487c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_TIM_Base_Start_IT+0x98>)
 8004858:	4013      	ands	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b06      	cmp	r3, #6
 8004860:	d015      	beq.n	800488e <HAL_TIM_Base_Start_IT+0x82>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d011      	beq.n	800488e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487a:	e008      	b.n	800488e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e000      	b.n	8004890 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	00010007 	.word	0x00010007

080048a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0202 	mvn.w	r2, #2
 80048d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f905 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8f7 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f908 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b04      	cmp	r3, #4
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0204 	mvn.w	r2, #4
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8db 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8cd 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8de 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b08      	cmp	r3, #8
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b08      	cmp	r3, #8
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0208 	mvn.w	r2, #8
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2204      	movs	r2, #4
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8b1 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8a3 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8b4 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d122      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d11b      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0210 	mvn.w	r2, #16
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2208      	movs	r2, #8
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f887 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f879 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f88a 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10e      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0201 	mvn.w	r2, #1
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fb fd90 	bl	800054c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d10e      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8de 	bl	8004c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a66:	d10e      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d107      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8d1 	bl	8004c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d10e      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f838 	bl	8004b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d10e      	bne.n	8004ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0220 	mvn.w	r2, #32
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f891 	bl	8004c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <TIM_Base_SetConfig+0xbc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0x20>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d108      	bne.n	8004b6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <TIM_Base_SetConfig+0xbc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_Base_SetConfig+0x52>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d007      	beq.n	8004b8a <TIM_Base_SetConfig+0x52>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <TIM_Base_SetConfig+0xc0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_Base_SetConfig+0x52>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <TIM_Base_SetConfig+0xc4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d108      	bne.n	8004b9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <TIM_Base_SetConfig+0xbc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <TIM_Base_SetConfig+0xa0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <TIM_Base_SetConfig+0xc0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_Base_SetConfig+0xa0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <TIM_Base_SetConfig+0xc4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d103      	bne.n	8004be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	615a      	str	r2, [r3, #20]
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c4c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c72:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	4013      	ands	r3, r2
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	f107 0014 	add.w	r0, r7, #20
 8004cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	b004      	add	sp, #16
 8004ce0:	4770      	bx	lr
	...

08004ce4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b09d      	sub	sp, #116	; 0x74
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	78db      	ldrb	r3, [r3, #3]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d81f      	bhi.n	8004d56 <USB_ActivateEndpoint+0x72>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <USB_ActivateEndpoint+0x38>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d5f 	.word	0x08004d5f
 8004d28:	08004d3b 	.word	0x08004d3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d38:	e012      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d46:	e00b      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d54:	e004      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004d5c:	e000      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>
      break;
 8004d5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	441a      	add	r2, r3
 8004d6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	b21b      	sxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	b21a      	sxth	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	b21b      	sxth	r3, r3
 8004da6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	7b1b      	ldrb	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 8178 	bne.w	80050c6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8084 	beq.w	8004ee8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	4413      	add	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	00da      	lsls	r2, r3, #3
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	88db      	ldrh	r3, [r3, #6]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	827b      	strh	r3, [r7, #18]
 8004e22:	8a7b      	ldrh	r3, [r7, #18]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01b      	beq.n	8004e64 <USB_ActivateEndpoint+0x180>
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	823b      	strh	r3, [r7, #16]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	8a3b      	ldrh	r3, [r7, #16]
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d020      	beq.n	8004eae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e82:	81bb      	strh	r3, [r7, #12]
 8004e84:	89bb      	ldrh	r3, [r7, #12]
 8004e86:	f083 0320 	eor.w	r3, r3, #32
 8004e8a:	81bb      	strh	r3, [r7, #12]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	89bb      	ldrh	r3, [r7, #12]
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]
 8004eac:	e2d5      	b.n	800545a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec4:	81fb      	strh	r3, [r7, #14]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
 8004ee6:	e2b8      	b.n	800545a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	4413      	add	r3, r2
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	00da      	lsls	r2, r3, #3
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	4413      	add	r3, r2
 8004f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	88db      	ldrh	r3, [r3, #6]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	4413      	add	r3, r2
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	00da      	lsls	r2, r3, #3
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b3e      	cmp	r3, #62	; 0x3e
 8004f56:	d91d      	bls.n	8004f94 <USB_ActivateEndpoint+0x2b0>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <USB_ActivateEndpoint+0x28e>
 8004f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	029b      	lsls	r3, r3, #10
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e026      	b.n	8004fe2 <USB_ActivateEndpoint+0x2fe>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <USB_ActivateEndpoint+0x2ce>
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	e017      	b.n	8004fe2 <USB_ActivateEndpoint+0x2fe>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <USB_ActivateEndpoint+0x2e8>
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc8:	3301      	adds	r3, #1
 8004fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	029b      	lsls	r3, r3, #10
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01b      	beq.n	8005032 <USB_ActivateEndpoint+0x34e>
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	843b      	strh	r3, [r7, #32]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	8c3b      	ldrh	r3, [r7, #32]
 800501e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800502a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502e:	b29b      	uxth	r3, r3
 8005030:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d124      	bne.n	8005084 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	83bb      	strh	r3, [r7, #28]
 8005052:	8bbb      	ldrh	r3, [r7, #28]
 8005054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005058:	83bb      	strh	r3, [r7, #28]
 800505a:	8bbb      	ldrh	r3, [r7, #28]
 800505c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005060:	83bb      	strh	r3, [r7, #28]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8bbb      	ldrh	r3, [r7, #28]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e1ea      	b.n	800545a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	83fb      	strh	r3, [r7, #30]
 800509c:	8bfb      	ldrh	r3, [r7, #30]
 800509e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050a2:	83fb      	strh	r3, [r7, #30]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8bfb      	ldrh	r3, [r7, #30]
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
 80050c4:	e1c9      	b.n	800545a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	78db      	ldrb	r3, [r3, #3]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d11e      	bne.n	800510c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
 800510a:	e01d      	b.n	8005148 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005144:	b29b      	uxth	r3, r3
 8005146:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005158:	4413      	add	r3, r2
 800515a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	00da      	lsls	r2, r3, #3
 8005162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005164:	4413      	add	r3, r2
 8005166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516a:	65bb      	str	r3, [r7, #88]	; 0x58
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	891b      	ldrh	r3, [r3, #8]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	b29b      	uxth	r3, r3
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518c:	4413      	add	r3, r2
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00da      	lsls	r2, r3, #3
 8005196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005198:	4413      	add	r3, r2
 800519a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	895b      	ldrh	r3, [r3, #10]
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 8093 	bne.w	80052e0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01b      	beq.n	800520e <USB_ActivateEndpoint+0x52a>
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800521c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <USB_ActivateEndpoint+0x57a>
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005274:	873b      	strh	r3, [r7, #56]	; 0x38
 8005276:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005278:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800527c:	873b      	strh	r3, [r7, #56]	; 0x38
 800527e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005280:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005284:	873b      	strh	r3, [r7, #56]	; 0x38
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	441a      	add	r2, r3
 8005290:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800529a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
 80052de:	e0bc      	b.n	800545a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80052f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01d      	beq.n	8005338 <USB_ActivateEndpoint+0x654>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005348:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01d      	beq.n	8005390 <USB_ActivateEndpoint+0x6ac>
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	441a      	add	r2, r3
 8005378:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800537c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d024      	beq.n	80053e2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053b6:	f083 0320 	eor.w	r3, r3, #32
 80053ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
 80053e0:	e01d      	b.n	800541e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800540a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800545a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800545e:	4618      	mov	r0, r3
 8005460:	3774      	adds	r7, #116	; 0x74
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop

0800546c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800546c:	b480      	push	{r7}
 800546e:	b08d      	sub	sp, #52	; 0x34
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	7b1b      	ldrb	r3, [r3, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 808e 	bne.w	800559c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d044      	beq.n	8005512 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	81bb      	strh	r3, [r7, #12]
 8005496:	89bb      	ldrh	r3, [r7, #12]
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <USB_DeactivateEndpoint+0x6c>
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	817b      	strh	r3, [r7, #10]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	813b      	strh	r3, [r7, #8]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	893b      	ldrh	r3, [r7, #8]
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
 8005510:	e192      	b.n	8005838 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	827b      	strh	r3, [r7, #18]
 8005520:	8a7b      	ldrh	r3, [r7, #18]
 8005522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01b      	beq.n	8005562 <USB_DeactivateEndpoint+0xf6>
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	823b      	strh	r3, [r7, #16]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	8a3b      	ldrh	r3, [r7, #16]
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800555a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	81fb      	strh	r3, [r7, #14]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
 800559a:	e14d      	b.n	8005838 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 80a5 	bne.w	80056f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	843b      	strh	r3, [r7, #32]
 80055b4:	8c3b      	ldrh	r3, [r7, #32]
 80055b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01b      	beq.n	80055f6 <USB_DeactivateEndpoint+0x18a>
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	83fb      	strh	r3, [r7, #30]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	441a      	add	r2, r3
 80055e0:	8bfb      	ldrh	r3, [r7, #30]
 80055e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	83bb      	strh	r3, [r7, #28]
 8005604:	8bbb      	ldrh	r3, [r7, #28]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01b      	beq.n	8005646 <USB_DeactivateEndpoint+0x1da>
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	837b      	strh	r3, [r7, #26]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	8b7b      	ldrh	r3, [r7, #26]
 8005632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005642:	b29b      	uxth	r3, r3
 8005644:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565c:	833b      	strh	r3, [r7, #24]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8b3b      	ldrh	r3, [r7, #24]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	82fb      	strh	r3, [r7, #22]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	8afb      	ldrh	r3, [r7, #22]
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056cc:	82bb      	strh	r3, [r7, #20]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8abb      	ldrh	r3, [r7, #20]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]
 80056ee:	e0a3      	b.n	8005838 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01b      	beq.n	8005740 <USB_DeactivateEndpoint+0x2d4>
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800572c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800574e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <USB_DeactivateEndpoint+0x324>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	847b      	strh	r3, [r7, #34]	; 0x22
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3734      	adds	r7, #52	; 0x34
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b0c2      	sub	sp, #264	; 0x108
 800584a:	af00      	add	r7, sp, #0
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005854:	6018      	str	r0, [r3, #0]
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b01      	cmp	r3, #1
 800586e:	f040 86b7 	bne.w	80065e0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	429a      	cmp	r2, r3
 800588c:	d908      	bls.n	80058a0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800589e:	e007      	b.n	80058b0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80058a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	7b1b      	ldrb	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d13a      	bne.n	8005936 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6959      	ldr	r1, [r3, #20]
 80058cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	88da      	ldrh	r2, [r3, #6]
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	f001 fc98 	bl	800721c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00da      	lsls	r2, r3, #3
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	f000 be1f 	b.w	8006574 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	78db      	ldrb	r3, [r3, #3]
 8005942:	2b02      	cmp	r3, #2
 8005944:	f040 8462 	bne.w	800620c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	f240 83df 	bls.w	8006124 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80059c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a1a      	ldr	r2, [r3, #32]
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 81c7 	beq.w	8005d96 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
 8005a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d177      	bne.n	8005b14 <USB_EPStartXfer+0x2ce>
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	4413      	add	r3, r2
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a74:	2b3e      	cmp	r3, #62	; 0x3e
 8005a76:	d921      	bls.n	8005abc <USB_EPStartXfer+0x276>
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <USB_EPStartXfer+0x252>
 8005a8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a92:	3b01      	subs	r3, #1
 8005a94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e050      	b.n	8005b5e <USB_EPStartXfer+0x318>
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <USB_EPStartXfer+0x294>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e041      	b.n	8005b5e <USB_EPStartXfer+0x318>
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <USB_EPStartXfer+0x2b4>
 8005af0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005af4:	3301      	adds	r3, #1
 8005af6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e024      	b.n	8005b5e <USB_EPStartXfer+0x318>
 8005b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d11c      	bne.n	8005b5e <USB_EPStartXfer+0x318>
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	4413      	add	r3, r2
 8005b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	00da      	lsls	r2, r3, #3
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	895b      	ldrh	r3, [r3, #10]
 8005b6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6959      	ldr	r1, [r3, #20]
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f001 fb45 	bl	800721c <USB_WritePMA>
            ep->xfer_buff += len;
 8005b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba2:	441a      	add	r2, r3
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d90f      	bls.n	8005bec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	621a      	str	r2, [r3, #32]
 8005bea:	e00e      	b.n	8005c0a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d177      	bne.n	8005d0a <USB_EPStartXfer+0x4c4>
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	00da      	lsls	r2, r3, #3
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6c:	d921      	bls.n	8005cb2 <USB_EPStartXfer+0x46c>
 8005c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <USB_EPStartXfer+0x448>
 8005c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	e056      	b.n	8005d60 <USB_EPStartXfer+0x51a>
 8005cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <USB_EPStartXfer+0x48a>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	e047      	b.n	8005d60 <USB_EPStartXfer+0x51a>
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <USB_EPStartXfer+0x4aa>
 8005ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cea:	3301      	adds	r3, #1
 8005cec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	029b      	lsls	r3, r3, #10
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e02a      	b.n	8005d60 <USB_EPStartXfer+0x51a>
 8005d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d122      	bne.n	8005d60 <USB_EPStartXfer+0x51a>
 8005d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	00da      	lsls	r2, r3, #3
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	891b      	ldrh	r3, [r3, #8]
 8005d6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6959      	ldr	r1, [r3, #20]
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	f001 fa44 	bl	800721c <USB_WritePMA>
 8005d94:	e3ee      	b.n	8006574 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d177      	bne.n	8005e96 <USB_EPStartXfer+0x650>
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc6:	4413      	add	r3, r2
 8005dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	00da      	lsls	r2, r3, #3
 8005dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005de0:	647b      	str	r3, [r7, #68]	; 0x44
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	2b3e      	cmp	r3, #62	; 0x3e
 8005df8:	d921      	bls.n	8005e3e <USB_EPStartXfer+0x5f8>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <USB_EPStartXfer+0x5d4>
 8005e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e14:	3b01      	subs	r3, #1
 8005e16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e056      	b.n	8005eec <USB_EPStartXfer+0x6a6>
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USB_EPStartXfer+0x616>
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e047      	b.n	8005eec <USB_EPStartXfer+0x6a6>
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <USB_EPStartXfer+0x636>
 8005e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e02a      	b.n	8005eec <USB_EPStartXfer+0x6a6>
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d122      	bne.n	8005eec <USB_EPStartXfer+0x6a6>
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec6:	4413      	add	r3, r2
 8005ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	00da      	lsls	r2, r3, #3
 8005ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	891b      	ldrh	r3, [r3, #8]
 8005ef8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6959      	ldr	r1, [r3, #20]
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	f001 f97e 	bl	800721c <USB_WritePMA>
            ep->xfer_buff += len;
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	441a      	add	r2, r3
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d90f      	bls.n	8005f7a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a1a      	ldr	r2, [r3, #32]
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	621a      	str	r2, [r3, #32]
 8005f78:	e00e      	b.n	8005f98 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2200      	movs	r2, #0
 8005f96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d177      	bne.n	80060a4 <USB_EPStartXfer+0x85e>
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	4413      	add	r3, r2
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00da      	lsls	r2, r3, #3
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	4413      	add	r3, r2
 8005fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006004:	2b3e      	cmp	r3, #62	; 0x3e
 8006006:	d921      	bls.n	800604c <USB_EPStartXfer+0x806>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <USB_EPStartXfer+0x7e2>
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	3b01      	subs	r3, #1
 8006024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29b      	uxth	r3, r3
 8006038:	4313      	orrs	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006044:	b29a      	uxth	r2, r3
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e050      	b.n	80060ee <USB_EPStartXfer+0x8a8>
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <USB_EPStartXfer+0x824>
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e041      	b.n	80060ee <USB_EPStartXfer+0x8a8>
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <USB_EPStartXfer+0x844>
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	b29b      	uxth	r3, r3
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	b29b      	uxth	r3, r3
 800609a:	4313      	orrs	r3, r2
 800609c:	b29a      	uxth	r2, r3
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e024      	b.n	80060ee <USB_EPStartXfer+0x8a8>
 80060a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11c      	bne.n	80060ee <USB_EPStartXfer+0x8a8>
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c8:	4413      	add	r3, r2
 80060ca:	643b      	str	r3, [r7, #64]	; 0x40
 80060cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	00da      	lsls	r2, r3, #3
 80060da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060dc:	4413      	add	r3, r2
 80060de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	895b      	ldrh	r3, [r3, #10]
 80060fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6959      	ldr	r1, [r3, #20]
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610e:	b29b      	uxth	r3, r3
 8006110:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006114:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006118:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800611c:	6800      	ldr	r0, [r0, #0]
 800611e:	f001 f87d 	bl	800721c <USB_WritePMA>
 8006122:	e227      	b.n	8006574 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800619c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b0:	4413      	add	r3, r2
 80061b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00da      	lsls	r2, r3, #3
 80061c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c4:	4413      	add	r3, r2
 80061c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	891b      	ldrh	r3, [r3, #8]
 80061e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6959      	ldr	r1, [r3, #20]
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006200:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006204:	6800      	ldr	r0, [r0, #0]
 8006206:	f001 f809 	bl	800721c <USB_WritePMA>
 800620a:	e1b3      	b.n	8006574 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800620c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80c6 	beq.w	80063de <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	673b      	str	r3, [r7, #112]	; 0x70
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d177      	bne.n	800635e <USB_EPStartXfer+0xb18>
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	66bb      	str	r3, [r7, #104]	; 0x68
 800627a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006288:	b29b      	uxth	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800628e:	4413      	add	r3, r2
 8006290:	66bb      	str	r3, [r7, #104]	; 0x68
 8006292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	00da      	lsls	r2, r3, #3
 80062a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062a8:	667b      	str	r3, [r7, #100]	; 0x64
 80062aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062be:	2b3e      	cmp	r3, #62	; 0x3e
 80062c0:	d921      	bls.n	8006306 <USB_EPStartXfer+0xac0>
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <USB_EPStartXfer+0xa9c>
 80062d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062dc:	3b01      	subs	r3, #1
 80062de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fe:	b29a      	uxth	r2, r3
 8006300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	e050      	b.n	80063a8 <USB_EPStartXfer+0xb62>
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <USB_EPStartXfer+0xade>
 800630e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631c:	b29a      	uxth	r2, r3
 800631e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	e041      	b.n	80063a8 <USB_EPStartXfer+0xb62>
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <USB_EPStartXfer+0xafe>
 800633a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800633e:	3301      	adds	r3, #1
 8006340:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29a      	uxth	r2, r3
 800634a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800634e:	b29b      	uxth	r3, r3
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	b29b      	uxth	r3, r3
 8006354:	4313      	orrs	r3, r2
 8006356:	b29a      	uxth	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e024      	b.n	80063a8 <USB_EPStartXfer+0xb62>
 800635e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d11c      	bne.n	80063a8 <USB_EPStartXfer+0xb62>
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006382:	4413      	add	r3, r2
 8006384:	673b      	str	r3, [r7, #112]	; 0x70
 8006386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	00da      	lsls	r2, r3, #3
 8006394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006396:	4413      	add	r3, r2
 8006398:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800639c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	895b      	ldrh	r3, [r3, #10]
 80063b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6959      	ldr	r1, [r3, #20]
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	f000 ff20 	bl	800721c <USB_WritePMA>
 80063dc:	e0ca      	b.n	8006574 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d177      	bne.n	80064de <USB_EPStartXfer+0xc98>
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640e:	4413      	add	r3, r2
 8006410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006422:	4413      	add	r3, r2
 8006424:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006428:	67bb      	str	r3, [r7, #120]	; 0x78
 800642a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006434:	b29a      	uxth	r2, r3
 8006436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643e:	2b3e      	cmp	r3, #62	; 0x3e
 8006440:	d921      	bls.n	8006486 <USB_EPStartXfer+0xc40>
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <USB_EPStartXfer+0xc1c>
 8006458:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800645c:	3b01      	subs	r3, #1
 800645e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29a      	uxth	r2, r3
 8006468:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800646c:	b29b      	uxth	r3, r3
 800646e:	029b      	lsls	r3, r3, #10
 8006470:	b29b      	uxth	r3, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	b29b      	uxth	r3, r3
 8006476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647e:	b29a      	uxth	r2, r3
 8006480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	e05c      	b.n	8006540 <USB_EPStartXfer+0xcfa>
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <USB_EPStartXfer+0xc5e>
 800648e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e04d      	b.n	8006540 <USB_EPStartXfer+0xcfa>
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <USB_EPStartXfer+0xc7e>
 80064ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064be:	3301      	adds	r3, #1
 80064c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	029b      	lsls	r3, r3, #10
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4313      	orrs	r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e030      	b.n	8006540 <USB_EPStartXfer+0xcfa>
 80064de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d128      	bne.n	8006540 <USB_EPStartXfer+0xcfa>
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006512:	4413      	add	r3, r2
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	00da      	lsls	r2, r3, #3
 8006526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800652a:	4413      	add	r3, r2
 800652c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800653e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	891b      	ldrh	r3, [r3, #8]
 800654c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6959      	ldr	r1, [r3, #20]
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	b29b      	uxth	r3, r3
 8006562:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006566:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800656a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800656e:	6800      	ldr	r0, [r0, #0]
 8006570:	f000 fe54 	bl	800721c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659a:	817b      	strh	r3, [r7, #10]
 800659c:	897b      	ldrh	r3, [r7, #10]
 800659e:	f083 0310 	eor.w	r3, r3, #16
 80065a2:	817b      	strh	r3, [r7, #10]
 80065a4:	897b      	ldrh	r3, [r7, #10]
 80065a6:	f083 0320 	eor.w	r3, r3, #32
 80065aa:	817b      	strh	r3, [r7, #10]
 80065ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	897b      	ldrh	r3, [r7, #10]
 80065c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]
 80065dc:	f000 bcde 	b.w	8006f9c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	7b1b      	ldrb	r3, [r3, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 80bb 	bne.w	8006768 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d917      	bls.n	800663e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800660e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	619a      	str	r2, [r3, #24]
 800663c:	e00e      	b.n	800665c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2200      	movs	r2, #0
 800665a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800665c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800666a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006678:	b29b      	uxth	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006680:	4413      	add	r3, r2
 8006682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	00da      	lsls	r2, r3, #3
 8006694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006698:	4413      	add	r3, r2
 800669a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800669e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	2b3e      	cmp	r3, #62	; 0x3e
 80066bc:	d924      	bls.n	8006708 <USB_EPStartXfer+0xec2>
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <USB_EPStartXfer+0xe98>
 80066d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066d8:	3b01      	subs	r3, #1
 80066da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4313      	orrs	r3, r2
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	f000 bc10 	b.w	8006f28 <USB_EPStartXfer+0x16e2>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10c      	bne.n	800672a <USB_EPStartXfer+0xee4>
 8006710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e3fe      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <USB_EPStartXfer+0xf04>
 8006740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006744:	3301      	adds	r3, #1
 8006746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800674a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e3df      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	78db      	ldrb	r3, [r3, #3]
 8006774:	2b02      	cmp	r3, #2
 8006776:	f040 8218 	bne.w	8006baa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 809d 	bne.w	80068c6 <USB_EPStartXfer+0x1080>
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b0:	4413      	add	r3, r2
 80067b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00da      	lsls	r2, r3, #3
 80067c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c8:	4413      	add	r3, r2
 80067ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b3e      	cmp	r3, #62	; 0x3e
 80067f4:	d92b      	bls.n	800684e <USB_EPStartXfer+0x1008>
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <USB_EPStartXfer+0xfe0>
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006820:	3b01      	subs	r3, #1
 8006822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29a      	uxth	r2, r3
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	b29b      	uxth	r3, r3
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	b29b      	uxth	r3, r3
 8006838:	4313      	orrs	r3, r2
 800683a:	b29b      	uxth	r3, r3
 800683c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	e070      	b.n	8006930 <USB_EPStartXfer+0x10ea>
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10c      	bne.n	8006878 <USB_EPStartXfer+0x1032>
 800685e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	e05b      	b.n	8006930 <USB_EPStartXfer+0x10ea>
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <USB_EPStartXfer+0x1062>
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	3301      	adds	r3, #1
 80068a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	029b      	lsls	r3, r3, #10
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	e034      	b.n	8006930 <USB_EPStartXfer+0x10ea>
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d12c      	bne.n	8006930 <USB_EPStartXfer+0x10ea>
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068fa:	4413      	add	r3, r2
 80068fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	00da      	lsls	r2, r3, #3
 800690e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006912:	4413      	add	r3, r2
 8006914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	b29a      	uxth	r2, r3
 800692a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 809d 	bne.w	8006a8a <USB_EPStartXfer+0x1244>
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696c:	b29b      	uxth	r3, r3
 800696e:	461a      	mov	r2, r3
 8006970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006974:	4413      	add	r3, r2
 8006976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800697a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	00da      	lsls	r2, r3, #3
 8006988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800698c:	4413      	add	r3, r2
 800698e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006992:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b3e      	cmp	r3, #62	; 0x3e
 80069b8:	d92b      	bls.n	8006a12 <USB_EPStartXfer+0x11cc>
 80069ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <USB_EPStartXfer+0x11a4>
 80069e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e4:	3b01      	subs	r3, #1
 80069e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	029b      	lsls	r3, r3, #10
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e069      	b.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10c      	bne.n	8006a3c <USB_EPStartXfer+0x11f6>
 8006a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e054      	b.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	085b      	lsrs	r3, r3, #1
 8006a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <USB_EPStartXfer+0x1226>
 8006a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a66:	3301      	adds	r3, #1
 8006a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	e02d      	b.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d125      	bne.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	00da      	lsls	r2, r3, #3
 8006ac4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ac8:	4413      	add	r3, r2
 8006aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ae4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8218 	beq.w	8006f28 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <USB_EPStartXfer+0x12ea>
 8006b24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10d      	bne.n	8006b4c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 81f5 	bne.w	8006f28 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 81ee 	bne.w	8006f28 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b72:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	441a      	add	r2, r3
 8006b90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
 8006ba8:	e1be      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	78db      	ldrb	r3, [r3, #3]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	f040 81b4 	bne.w	8006f24 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699a      	ldr	r2, [r3, #24]
 8006bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d917      	bls.n	8006c08 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	619a      	str	r2, [r3, #24]
 8006c06:	e00e      	b.n	8006c26 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 8085 	bne.w	8006d42 <USB_EPStartXfer+0x14fc>
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	00da      	lsls	r2, r3, #3
 8006c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	2b3e      	cmp	r3, #62	; 0x3e
 8006c98:	d923      	bls.n	8006ce2 <USB_EPStartXfer+0x149c>
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <USB_EPStartXfer+0x1474>
 8006cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	e060      	b.n	8006da4 <USB_EPStartXfer+0x155e>
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10c      	bne.n	8006d04 <USB_EPStartXfer+0x14be>
 8006cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e04f      	b.n	8006da4 <USB_EPStartXfer+0x155e>
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <USB_EPStartXfer+0x14de>
 8006d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d1e:	3301      	adds	r3, #1
 8006d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e030      	b.n	8006da4 <USB_EPStartXfer+0x155e>
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d128      	bne.n	8006da4 <USB_EPStartXfer+0x155e>
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d76:	4413      	add	r3, r2
 8006d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00da      	lsls	r2, r3, #3
 8006d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8e:	4413      	add	r3, r2
 8006d90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 8085 	bne.w	8006ece <USB_EPStartXfer+0x1688>
 8006dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de8:	4413      	add	r3, r2
 8006dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	00da      	lsls	r2, r3, #3
 8006dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e22:	2b3e      	cmp	r3, #62	; 0x3e
 8006e24:	d923      	bls.n	8006e6e <USB_EPStartXfer+0x1628>
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USB_EPStartXfer+0x1600>
 8006e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e40:	3b01      	subs	r3, #1
 8006e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	e05c      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <USB_EPStartXfer+0x164a>
 8006e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e04b      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <USB_EPStartXfer+0x166a>
 8006ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e02c      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d124      	bne.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	00da      	lsls	r2, r3, #3
 8006f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e001      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e03a      	b.n	8006f9e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d020      	beq.n	8006ffc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd0:	81bb      	strh	r3, [r7, #12]
 8006fd2:	89bb      	ldrh	r3, [r7, #12]
 8006fd4:	f083 0310 	eor.w	r3, r3, #16
 8006fd8:	81bb      	strh	r3, [r7, #12]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	89bb      	ldrh	r3, [r7, #12]
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]
 8006ffa:	e01f      	b.n	800703c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	81fb      	strh	r3, [r7, #14]
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800701a:	81fb      	strh	r3, [r7, #14]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	89fb      	ldrh	r3, [r7, #14]
 8007028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	b29b      	uxth	r3, r3
 800703a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	7b1b      	ldrb	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 809d 	bne.w	8007198 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d04c      	beq.n	8007100 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	823b      	strh	r3, [r7, #16]
 8007074:	8a3b      	ldrh	r3, [r7, #16]
 8007076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01b      	beq.n	80070b6 <USB_EPClearStall+0x6c>
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	81fb      	strh	r3, [r7, #14]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d06c      	beq.n	8007198 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d4:	81bb      	strh	r3, [r7, #12]
 80070d6:	89bb      	ldrh	r3, [r7, #12]
 80070d8:	f083 0320 	eor.w	r3, r3, #32
 80070dc:	81bb      	strh	r3, [r7, #12]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	89bb      	ldrh	r3, [r7, #12]
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]
 80070fe:	e04b      	b.n	8007198 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	82fb      	strh	r3, [r7, #22]
 800710e:	8afb      	ldrh	r3, [r7, #22]
 8007110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01b      	beq.n	8007150 <USB_EPClearStall+0x106>
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	82bb      	strh	r3, [r7, #20]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	8abb      	ldrh	r3, [r7, #20]
 800713c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	b29b      	uxth	r3, r3
 800714e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	827b      	strh	r3, [r7, #18]
 8007168:	8a7b      	ldrh	r3, [r7, #18]
 800716a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800716e:	827b      	strh	r3, [r7, #18]
 8007170:	8a7b      	ldrh	r3, [r7, #18]
 8007172:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007176:	827b      	strh	r3, [r7, #18]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	8a7b      	ldrh	r3, [r7, #18]
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2280      	movs	r2, #128	; 0x80
 80071bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071dc:	b29b      	uxth	r3, r3
 80071de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800720a:	b29b      	uxth	r3, r3
 800720c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800721c:	b480      	push	{r7}
 800721e:	b08b      	sub	sp, #44	; 0x2c
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	460b      	mov	r3, r1
 800722c:	80fb      	strh	r3, [r7, #6]
 800722e:	4613      	mov	r3, r2
 8007230:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007232:	88bb      	ldrh	r3, [r7, #4]
 8007234:	3301      	adds	r3, #1
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800724c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	e01b      	b.n	800728c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3301      	adds	r3, #1
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	b21a      	sxth	r2, r3
 8007264:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007268:	4313      	orrs	r3, r2
 800726a:	b21b      	sxth	r3, r3
 800726c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	8a7a      	ldrh	r2, [r7, #18]
 8007272:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	3302      	adds	r3, #2
 8007278:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	3b01      	subs	r3, #1
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e0      	bne.n	8007254 <USB_WritePMA+0x38>
  }
}
 8007292:	bf00      	nop
 8007294:	bf00      	nop
 8007296:	372c      	adds	r7, #44	; 0x2c
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b08b      	sub	sp, #44	; 0x2c
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	460b      	mov	r3, r1
 80072b0:	80fb      	strh	r3, [r7, #6]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80072b6:	88bb      	ldrh	r3, [r7, #4]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072c6:	88fa      	ldrh	r2, [r7, #6]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	e018      	b.n	800730a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	3302      	adds	r3, #2
 80072e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3301      	adds	r3, #1
 80072f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	3301      	adds	r3, #1
 8007302:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	3b01      	subs	r3, #1
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e3      	bne.n	80072d8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007310:	88bb      	ldrh	r3, [r7, #4]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	701a      	strb	r2, [r3, #0]
  }
}
 800732c:	bf00      	nop
 800732e:	372c      	adds	r7, #44	; 0x2c
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007344:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007348:	f002 fc6e 	bl	8009c28 <USBD_static_malloc>
 800734c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	2100      	movs	r1, #0
 8007360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007364:	2302      	movs	r3, #2
 8007366:	e0d4      	b.n	8007512 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007368:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800736c:	2100      	movs	r1, #0
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f002 fcce 	bl	8009d10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32b0      	adds	r2, #176	; 0xb0
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32b0      	adds	r2, #176	; 0xb0
 800738e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7c1b      	ldrb	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d138      	bne.n	8007412 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073a0:	4b5e      	ldr	r3, [pc, #376]	; (800751c <USBD_CDC_Init+0x1e4>)
 80073a2:	7819      	ldrb	r1, [r3, #0]
 80073a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a8:	2202      	movs	r2, #2
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f002 fae1 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073b0:	4b5a      	ldr	r3, [pc, #360]	; (800751c <USBD_CDC_Init+0x1e4>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 020f 	and.w	r2, r3, #15
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	3324      	adds	r3, #36	; 0x24
 80073c6:	2201      	movs	r2, #1
 80073c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073ca:	4b55      	ldr	r3, [pc, #340]	; (8007520 <USBD_CDC_Init+0x1e8>)
 80073cc:	7819      	ldrb	r1, [r3, #0]
 80073ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073d2:	2202      	movs	r2, #2
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f002 facc 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073da:	4b51      	ldr	r3, [pc, #324]	; (8007520 <USBD_CDC_Init+0x1e8>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f003 020f 	and.w	r2, r3, #15
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073f2:	2201      	movs	r2, #1
 80073f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073f6:	4b4b      	ldr	r3, [pc, #300]	; (8007524 <USBD_CDC_Init+0x1ec>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3326      	adds	r3, #38	; 0x26
 800740c:	2210      	movs	r2, #16
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e035      	b.n	800747e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007412:	4b42      	ldr	r3, [pc, #264]	; (800751c <USBD_CDC_Init+0x1e4>)
 8007414:	7819      	ldrb	r1, [r3, #0]
 8007416:	2340      	movs	r3, #64	; 0x40
 8007418:	2202      	movs	r2, #2
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f002 faa9 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007420:	4b3e      	ldr	r3, [pc, #248]	; (800751c <USBD_CDC_Init+0x1e4>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 020f 	and.w	r2, r3, #15
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	3324      	adds	r3, #36	; 0x24
 8007436:	2201      	movs	r2, #1
 8007438:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800743a:	4b39      	ldr	r3, [pc, #228]	; (8007520 <USBD_CDC_Init+0x1e8>)
 800743c:	7819      	ldrb	r1, [r3, #0]
 800743e:	2340      	movs	r3, #64	; 0x40
 8007440:	2202      	movs	r2, #2
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f002 fa95 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007448:	4b35      	ldr	r3, [pc, #212]	; (8007520 <USBD_CDC_Init+0x1e8>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007460:	2201      	movs	r2, #1
 8007462:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007464:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <USBD_CDC_Init+0x1ec>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f003 020f 	and.w	r2, r3, #15
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	3326      	adds	r3, #38	; 0x26
 800747a:	2210      	movs	r2, #16
 800747c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800747e:	4b29      	ldr	r3, [pc, #164]	; (8007524 <USBD_CDC_Init+0x1ec>)
 8007480:	7819      	ldrb	r1, [r3, #0]
 8007482:	2308      	movs	r3, #8
 8007484:	2203      	movs	r2, #3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f002 fa73 	bl	8009972 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800748c:	4b25      	ldr	r3, [pc, #148]	; (8007524 <USBD_CDC_Init+0x1ec>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 020f 	and.w	r2, r3, #15
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	3324      	adds	r3, #36	; 0x24
 80074a2:	2201      	movs	r2, #1
 80074a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	33b0      	adds	r3, #176	; 0xb0
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80074dc:	2302      	movs	r3, #2
 80074de:	e018      	b.n	8007512 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7c1b      	ldrb	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074e8:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <USBD_CDC_Init+0x1e8>)
 80074ea:	7819      	ldrb	r1, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 fb2b 	bl	8009b52 <USBD_LL_PrepareReceive>
 80074fc:	e008      	b.n	8007510 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <USBD_CDC_Init+0x1e8>)
 8007500:	7819      	ldrb	r1, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f002 fb21 	bl	8009b52 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	200000db 	.word	0x200000db
 8007520:	200000dc 	.word	0x200000dc
 8007524:	200000dd 	.word	0x200000dd

08007528 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007534:	4b3a      	ldr	r3, [pc, #232]	; (8007620 <USBD_CDC_DeInit+0xf8>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f002 fa3f 	bl	80099be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007540:	4b37      	ldr	r3, [pc, #220]	; (8007620 <USBD_CDC_DeInit+0xf8>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 020f 	and.w	r2, r3, #15
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	3324      	adds	r3, #36	; 0x24
 8007556:	2200      	movs	r2, #0
 8007558:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800755a:	4b32      	ldr	r3, [pc, #200]	; (8007624 <USBD_CDC_DeInit+0xfc>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 fa2c 	bl	80099be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007566:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <USBD_CDC_DeInit+0xfc>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f003 020f 	and.w	r2, r3, #15
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800757e:	2200      	movs	r2, #0
 8007580:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007582:	4b29      	ldr	r3, [pc, #164]	; (8007628 <USBD_CDC_DeInit+0x100>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f002 fa18 	bl	80099be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800758e:	4b26      	ldr	r3, [pc, #152]	; (8007628 <USBD_CDC_DeInit+0x100>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f003 020f 	and.w	r2, r3, #15
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	3324      	adds	r3, #36	; 0x24
 80075a4:	2200      	movs	r2, #0
 80075a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80075a8:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <USBD_CDC_DeInit+0x100>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	440b      	add	r3, r1
 80075bc:	3326      	adds	r3, #38	; 0x26
 80075be:	2200      	movs	r2, #0
 80075c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32b0      	adds	r2, #176	; 0xb0
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01f      	beq.n	8007614 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	33b0      	adds	r3, #176	; 0xb0
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32b0      	adds	r2, #176	; 0xb0
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fb24 	bl	8009c44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32b0      	adds	r2, #176	; 0xb0
 8007606:	2100      	movs	r1, #0
 8007608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200000db 	.word	0x200000db
 8007624:	200000dc 	.word	0x200000dc
 8007628:	200000dd 	.word	0x200000dd

0800762c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	32b0      	adds	r2, #176	; 0xb0
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	e0bf      	b.n	80077dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007664:	2b00      	cmp	r3, #0
 8007666:	d050      	beq.n	800770a <USBD_CDC_Setup+0xde>
 8007668:	2b20      	cmp	r3, #32
 800766a:	f040 80af 	bne.w	80077cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d03a      	beq.n	80076ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b25b      	sxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	da1b      	bge.n	80076b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	33b0      	adds	r3, #176	; 0xb0
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007696:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	88d2      	ldrh	r2, [r2, #6]
 800769c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	88db      	ldrh	r3, [r3, #6]
 80076a2:	2b07      	cmp	r3, #7
 80076a4:	bf28      	it	cs
 80076a6:	2307      	movcs	r3, #7
 80076a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	89fa      	ldrh	r2, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 fd21 	bl	80090f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80076b6:	e090      	b.n	80077da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	785a      	ldrb	r2, [r3, #1]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	88db      	ldrh	r3, [r3, #6]
 80076c6:	2b3f      	cmp	r3, #63	; 0x3f
 80076c8:	d803      	bhi.n	80076d2 <USBD_CDC_Setup+0xa6>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88db      	ldrh	r3, [r3, #6]
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	e000      	b.n	80076d4 <USBD_CDC_Setup+0xa8>
 80076d2:	2240      	movs	r2, #64	; 0x40
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80076da:	6939      	ldr	r1, [r7, #16]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80076e2:	461a      	mov	r2, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fd33 	bl	8009150 <USBD_CtlPrepareRx>
      break;
 80076ea:	e076      	b.n	80077da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	33b0      	adds	r3, #176	; 0xb0
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	7850      	ldrb	r0, [r2, #1]
 8007702:	2200      	movs	r2, #0
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	4798      	blx	r3
      break;
 8007708:	e067      	b.n	80077da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b0b      	cmp	r3, #11
 8007710:	d851      	bhi.n	80077b6 <USBD_CDC_Setup+0x18a>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBD_CDC_Setup+0xec>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007749 	.word	0x08007749
 800771c:	080077c5 	.word	0x080077c5
 8007720:	080077b7 	.word	0x080077b7
 8007724:	080077b7 	.word	0x080077b7
 8007728:	080077b7 	.word	0x080077b7
 800772c:	080077b7 	.word	0x080077b7
 8007730:	080077b7 	.word	0x080077b7
 8007734:	080077b7 	.word	0x080077b7
 8007738:	080077b7 	.word	0x080077b7
 800773c:	080077b7 	.word	0x080077b7
 8007740:	08007773 	.word	0x08007773
 8007744:	0800779d 	.word	0x0800779d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d107      	bne.n	8007764 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007754:	f107 030a 	add.w	r3, r7, #10
 8007758:	2202      	movs	r2, #2
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fccb 	bl	80090f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007762:	e032      	b.n	80077ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fc55 	bl	8009016 <USBD_CtlError>
            ret = USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	75fb      	strb	r3, [r7, #23]
          break;
 8007770:	e02b      	b.n	80077ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b03      	cmp	r3, #3
 800777c:	d107      	bne.n	800778e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800777e:	f107 030d 	add.w	r3, r7, #13
 8007782:	2201      	movs	r2, #1
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fcb6 	bl	80090f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800778c:	e01d      	b.n	80077ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 fc40 	bl	8009016 <USBD_CtlError>
            ret = USBD_FAIL;
 8007796:	2303      	movs	r3, #3
 8007798:	75fb      	strb	r3, [r7, #23]
          break;
 800779a:	e016      	b.n	80077ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d00f      	beq.n	80077c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fc33 	bl	8009016 <USBD_CtlError>
            ret = USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077b4:	e008      	b.n	80077c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fc2c 	bl	8009016 <USBD_CtlError>
          ret = USBD_FAIL;
 80077be:	2303      	movs	r3, #3
 80077c0:	75fb      	strb	r3, [r7, #23]
          break;
 80077c2:	e002      	b.n	80077ca <USBD_CDC_Setup+0x19e>
          break;
 80077c4:	bf00      	nop
 80077c6:	e008      	b.n	80077da <USBD_CDC_Setup+0x1ae>
          break;
 80077c8:	bf00      	nop
      }
      break;
 80077ca:	e006      	b.n	80077da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fc21 	bl	8009016 <USBD_CtlError>
      ret = USBD_FAIL;
 80077d4:	2303      	movs	r3, #3
 80077d6:	75fb      	strb	r3, [r7, #23]
      break;
 80077d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32b0      	adds	r2, #176	; 0xb0
 8007802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800780a:	2303      	movs	r3, #3
 800780c:	e065      	b.n	80078da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	32b0      	adds	r2, #176	; 0xb0
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	3318      	adds	r3, #24
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d02f      	beq.n	8007898 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	f003 020f 	and.w	r2, r3, #15
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	3318      	adds	r3, #24
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	f003 010f 	and.w	r1, r3, #15
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	460b      	mov	r3, r1
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4403      	add	r3, r0
 8007860:	3338      	adds	r3, #56	; 0x38
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	fbb2 f1f3 	udiv	r1, r2, r3
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800786e:	2b00      	cmp	r3, #0
 8007870:	d112      	bne.n	8007898 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	3318      	adds	r3, #24
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800788a:	78f9      	ldrb	r1, [r7, #3]
 800788c:	2300      	movs	r3, #0
 800788e:	2200      	movs	r2, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f002 f93d 	bl	8009b10 <USBD_LL_Transmit>
 8007896:	e01f      	b.n	80078d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	33b0      	adds	r3, #176	; 0xb0
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d010      	beq.n	80078d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	33b0      	adds	r3, #176	; 0xb0
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078d4:	78fa      	ldrb	r2, [r7, #3]
 80078d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	32b0      	adds	r2, #176	; 0xb0
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	32b0      	adds	r2, #176	; 0xb0
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e01a      	b.n	800794a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f002 f93b 	bl	8009b94 <USBD_LL_GetRxDataSize>
 800791e:	4602      	mov	r2, r0
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	33b0      	adds	r3, #176	; 0xb0
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007944:	4611      	mov	r1, r2
 8007946:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32b0      	adds	r2, #176	; 0xb0
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	e025      	b.n	80079c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	33b0      	adds	r3, #176	; 0xb0
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01a      	beq.n	80079be <USBD_CDC_EP0_RxReady+0x6c>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800798e:	2bff      	cmp	r3, #255	; 0xff
 8007990:	d015      	beq.n	80079be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	33b0      	adds	r3, #176	; 0xb0
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80079aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079b2:	b292      	uxth	r2, r2
 80079b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	22ff      	movs	r2, #255	; 0xff
 80079ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079d0:	2182      	movs	r1, #130	; 0x82
 80079d2:	4818      	ldr	r0, [pc, #96]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079d4:	f000 fcbd 	bl	8008352 <USBD_GetEpDesc>
 80079d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079da:	2101      	movs	r1, #1
 80079dc:	4815      	ldr	r0, [pc, #84]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079de:	f000 fcb8 	bl	8008352 <USBD_GetEpDesc>
 80079e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079e4:	2181      	movs	r1, #129	; 0x81
 80079e6:	4813      	ldr	r0, [pc, #76]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079e8:	f000 fcb3 	bl	8008352 <USBD_GetEpDesc>
 80079ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2210      	movs	r2, #16
 80079f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a08:	711a      	strb	r2, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d006      	beq.n	8007a22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a1c:	711a      	strb	r2, [r3, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2243      	movs	r2, #67	; 0x43
 8007a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000098 	.word	0x20000098

08007a38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a40:	2182      	movs	r1, #130	; 0x82
 8007a42:	4818      	ldr	r0, [pc, #96]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a44:	f000 fc85 	bl	8008352 <USBD_GetEpDesc>
 8007a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4815      	ldr	r0, [pc, #84]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a4e:	f000 fc80 	bl	8008352 <USBD_GetEpDesc>
 8007a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a54:	2181      	movs	r1, #129	; 0x81
 8007a56:	4813      	ldr	r0, [pc, #76]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a58:	f000 fc7b 	bl	8008352 <USBD_GetEpDesc>
 8007a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2210      	movs	r2, #16
 8007a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d006      	beq.n	8007a7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	711a      	strb	r2, [r3, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f042 0202 	orr.w	r2, r2, #2
 8007a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	711a      	strb	r2, [r3, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f042 0202 	orr.w	r2, r2, #2
 8007a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2243      	movs	r2, #67	; 0x43
 8007a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000098 	.word	0x20000098

08007aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ab0:	2182      	movs	r1, #130	; 0x82
 8007ab2:	4818      	ldr	r0, [pc, #96]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ab4:	f000 fc4d 	bl	8008352 <USBD_GetEpDesc>
 8007ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007aba:	2101      	movs	r1, #1
 8007abc:	4815      	ldr	r0, [pc, #84]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007abe:	f000 fc48 	bl	8008352 <USBD_GetEpDesc>
 8007ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ac4:	2181      	movs	r1, #129	; 0x81
 8007ac6:	4813      	ldr	r0, [pc, #76]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ac8:	f000 fc43 	bl	8008352 <USBD_GetEpDesc>
 8007acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2210      	movs	r2, #16
 8007ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae8:	711a      	strb	r2, [r3, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d006      	beq.n	8007b02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afc:	711a      	strb	r2, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2243      	movs	r2, #67	; 0x43
 8007b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000098 	.word	0x20000098

08007b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	220a      	movs	r2, #10
 8007b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b26:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20000054 	.word	0x20000054

08007b38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e009      	b.n	8007b60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	33b0      	adds	r3, #176	; 0xb0
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	32b0      	adds	r2, #176	; 0xb0
 8007b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e008      	b.n	8007ba4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	32b0      	adds	r2, #176	; 0xb0
 8007bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e004      	b.n	8007bde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	32b0      	adds	r2, #176	; 0xb0
 8007bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c02:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e025      	b.n	8007c5e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d11f      	bne.n	8007c5c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007c24:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <USBD_CDC_TransmitPacket+0x7c>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 020f 	and.w	r2, r3, #15
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4403      	add	r3, r0
 8007c3e:	3318      	adds	r3, #24
 8007c40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <USBD_CDC_TransmitPacket+0x7c>)
 8007c44:	7819      	ldrb	r1, [r3, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 ff5c 	bl	8009b10 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200000db 	.word	0x200000db

08007c6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	32b0      	adds	r2, #176	; 0xb0
 8007c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	32b0      	adds	r2, #176	; 0xb0
 8007c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e018      	b.n	8007ccc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7c1b      	ldrb	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <USBD_CDC_ReceivePacket+0x68>)
 8007ca4:	7819      	ldrb	r1, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 ff4e 	bl	8009b52 <USBD_LL_PrepareReceive>
 8007cb6:	e008      	b.n	8007cca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <USBD_CDC_ReceivePacket+0x68>)
 8007cba:	7819      	ldrb	r1, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 ff44 	bl	8009b52 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200000dc 	.word	0x200000dc

08007cd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e01f      	b.n	8007d30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	79fa      	ldrb	r2, [r7, #7]
 8007d22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f001 fda7 	bl	8009878 <USBD_LL_Init>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e025      	b.n	8007d9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	32ae      	adds	r2, #174	; 0xae
 8007d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00f      	beq.n	8007d8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	32ae      	adds	r2, #174	; 0xae
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f107 020e 	add.w	r2, r7, #14
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	4602      	mov	r2, r0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fdc5 	bl	800993c <USBD_LL_Start>
 8007db2:	4603      	mov	r3, r0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dc4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d009      	beq.n	8007e00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	4611      	mov	r1, r2
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	4611      	mov	r1, r2
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f8a6 	bl	8008fa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e64:	461a      	mov	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d01a      	beq.n	8007eb0 <USBD_LL_SetupStage+0x72>
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d822      	bhi.n	8007ec4 <USBD_LL_SetupStage+0x86>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <USBD_LL_SetupStage+0x4a>
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d00a      	beq.n	8007e9c <USBD_LL_SetupStage+0x5e>
 8007e86:	e01d      	b.n	8007ec4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fad3 	bl	800843c <USBD_StdDevReq>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9a:	e020      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb3b 	bl	8008520 <USBD_StdItfReq>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
      break;
 8007eae:	e016      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fb9d 	bl	80085f8 <USBD_StdEPReq>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec2:	e00c      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fd92 	bl	80099fc <USBD_LL_StallEP>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
      break;
 8007edc:	bf00      	nop
  }

  return ret;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d16e      	bne.n	8007fde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	f040 8098 	bne.w	8008044 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d913      	bls.n	8007f48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bf28      	it	cs
 8007f3a:	4613      	movcs	r3, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 f922 	bl	800918a <USBD_CtlContinueRx>
 8007f46:	e07d      	b.n	8008044 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d014      	beq.n	8007f80 <USBD_LL_DataOutStage+0x98>
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d81d      	bhi.n	8007f96 <USBD_LL_DataOutStage+0xae>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <USBD_LL_DataOutStage+0x7c>
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d003      	beq.n	8007f6a <USBD_LL_DataOutStage+0x82>
 8007f62:	e018      	b.n	8007f96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	75bb      	strb	r3, [r7, #22]
            break;
 8007f68:	e018      	b.n	8007f9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	4619      	mov	r1, r3
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f9d2 	bl	800831e <USBD_CoreFindIF>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007f7e:	e00d      	b.n	8007f9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	4619      	mov	r1, r3
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f9d4 	bl	8008338 <USBD_CoreFindEP>
 8007f90:	4603      	mov	r3, r0
 8007f92:	75bb      	strb	r3, [r7, #22]
            break;
 8007f94:	e002      	b.n	8007f9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75bb      	strb	r3, [r7, #22]
            break;
 8007f9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f9c:	7dbb      	ldrb	r3, [r7, #22]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d119      	bne.n	8007fd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d113      	bne.n	8007fd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007fae:	7dba      	ldrb	r2, [r7, #22]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	32ae      	adds	r2, #174	; 0xae
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007fbe:	7dba      	ldrb	r2, [r7, #22]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007fc6:	7dba      	ldrb	r2, [r7, #22]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	32ae      	adds	r2, #174	; 0xae
 8007fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f001 f8e8 	bl	80091ac <USBD_CtlSendStatus>
 8007fdc:	e032      	b.n	8008044 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007fde:	7afb      	ldrb	r3, [r7, #11]
 8007fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 f9a5 	bl	8008338 <USBD_CoreFindEP>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ff2:	7dbb      	ldrb	r3, [r7, #22]
 8007ff4:	2bff      	cmp	r3, #255	; 0xff
 8007ff6:	d025      	beq.n	8008044 <USBD_LL_DataOutStage+0x15c>
 8007ff8:	7dbb      	ldrb	r3, [r7, #22]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d122      	bne.n	8008044 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b03      	cmp	r3, #3
 8008008:	d117      	bne.n	800803a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800800a:	7dba      	ldrb	r2, [r7, #22]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	32ae      	adds	r2, #174	; 0xae
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00f      	beq.n	800803a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800801a:	7dba      	ldrb	r2, [r7, #22]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008022:	7dba      	ldrb	r2, [r7, #22]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	32ae      	adds	r2, #174	; 0xae
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	7afa      	ldrb	r2, [r7, #11]
 8008030:	4611      	mov	r1, r2
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	4798      	blx	r3
 8008036:	4603      	mov	r3, r0
 8008038:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	e000      	b.n	8008046 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b086      	sub	sp, #24
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	460b      	mov	r3, r1
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d16f      	bne.n	8008142 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3314      	adds	r3, #20
 8008066:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800806e:	2b02      	cmp	r3, #2
 8008070:	d15a      	bne.n	8008128 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	429a      	cmp	r2, r3
 800807c:	d914      	bls.n	80080a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	1ad2      	subs	r2, r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	461a      	mov	r2, r3
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f001 f84a 	bl	800912e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800809a:	2300      	movs	r3, #0
 800809c:	2200      	movs	r2, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f001 fd56 	bl	8009b52 <USBD_LL_PrepareReceive>
 80080a6:	e03f      	b.n	8008128 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d11c      	bne.n	80080ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080bc:	429a      	cmp	r2, r3
 80080be:	d316      	bcc.n	80080ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d20f      	bcs.n	80080ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f001 f82b 	bl	800912e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080e0:	2300      	movs	r3, #0
 80080e2:	2200      	movs	r2, #0
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f001 fd33 	bl	8009b52 <USBD_LL_PrepareReceive>
 80080ec:	e01c      	b.n	8008128 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d10f      	bne.n	800811a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f001 fc6d 	bl	80099fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f001 f855 	bl	80091d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d03a      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff fe42 	bl	8007dbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008140:	e032      	b.n	80081a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008148:	b2db      	uxtb	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f8f3 	bl	8008338 <USBD_CoreFindEP>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	2bff      	cmp	r3, #255	; 0xff
 800815a:	d025      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d122      	bne.n	80081a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b03      	cmp	r3, #3
 800816c:	d11c      	bne.n	80081a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800816e:	7dfa      	ldrb	r2, [r7, #23]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	32ae      	adds	r2, #174	; 0xae
 8008174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d014      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800817e:	7dfa      	ldrb	r2, [r7, #23]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008186:	7dfa      	ldrb	r2, [r7, #23]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	32ae      	adds	r2, #174	; 0xae
 800818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	7afa      	ldrb	r2, [r7, #11]
 8008194:	4611      	mov	r1, r2
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800819e:	7dbb      	ldrb	r3, [r7, #22]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081a4:	7dbb      	ldrb	r3, [r7, #22]
 80081a6:	e000      	b.n	80081aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d014      	beq.n	8008218 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6852      	ldr	r2, [r2, #4]
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	4611      	mov	r1, r2
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008218:	2340      	movs	r3, #64	; 0x40
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 fba7 	bl	8009972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2240      	movs	r2, #64	; 0x40
 8008230:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	2200      	movs	r2, #0
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fb99 	bl	8009972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2240      	movs	r2, #64	; 0x40
 800824a:	621a      	str	r2, [r3, #32]

  return ret;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b04      	cmp	r3, #4
 8008288:	d006      	beq.n	8008298 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2204      	movs	r2, #4
 800829c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d106      	bne.n	80082d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d110      	bne.n	8008314 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800832a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008344:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	429a      	cmp	r2, r3
 8008378:	d920      	bls.n	80083bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008382:	e013      	b.n	80083ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008384:	f107 030a 	add.w	r3, r7, #10
 8008388:	4619      	mov	r1, r3
 800838a:	6978      	ldr	r0, [r7, #20]
 800838c:	f000 f81b 	bl	80083c6 <USBD_GetNextDesc>
 8008390:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b05      	cmp	r3, #5
 8008398:	d108      	bne.n	80083ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	789b      	ldrb	r3, [r3, #2]
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d008      	beq.n	80083ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	885b      	ldrh	r3, [r3, #2]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	897b      	ldrh	r3, [r7, #10]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d8e5      	bhi.n	8008384 <USBD_GetEpDesc+0x32>
 80083b8:	e000      	b.n	80083bc <USBD_GetEpDesc+0x6a>
          break;
 80083ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083bc:	693b      	ldr	r3, [r7, #16]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	881a      	ldrh	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4413      	add	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4413      	add	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	3301      	adds	r3, #1
 8008416:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800841e:	8a3b      	ldrh	r3, [r7, #16]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	b21a      	sxth	r2, r3
 8008424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008428:	4313      	orrs	r3, r2
 800842a:	b21b      	sxth	r3, r3
 800842c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800842e:	89fb      	ldrh	r3, [r7, #14]
}
 8008430:	4618      	mov	r0, r3
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008452:	2b40      	cmp	r3, #64	; 0x40
 8008454:	d005      	beq.n	8008462 <USBD_StdDevReq+0x26>
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d857      	bhi.n	800850a <USBD_StdDevReq+0xce>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00f      	beq.n	800847e <USBD_StdDevReq+0x42>
 800845e:	2b20      	cmp	r3, #32
 8008460:	d153      	bne.n	800850a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	32ae      	adds	r2, #174	; 0xae
 800846c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
      break;
 800847c:	e04a      	b.n	8008514 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b09      	cmp	r3, #9
 8008484:	d83b      	bhi.n	80084fe <USBD_StdDevReq+0xc2>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <USBD_StdDevReq+0x50>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084e1 	.word	0x080084e1
 8008490:	080084f5 	.word	0x080084f5
 8008494:	080084ff 	.word	0x080084ff
 8008498:	080084eb 	.word	0x080084eb
 800849c:	080084ff 	.word	0x080084ff
 80084a0:	080084bf 	.word	0x080084bf
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084ff 	.word	0x080084ff
 80084ac:	080084d7 	.word	0x080084d7
 80084b0:	080084c9 	.word	0x080084c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa3c 	bl	8008934 <USBD_GetDescriptor>
          break;
 80084bc:	e024      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fbcb 	bl	8008c5c <USBD_SetAddress>
          break;
 80084c6:	e01f      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc0a 	bl	8008ce4 <USBD_SetConfig>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
          break;
 80084d4:	e018      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fcad 	bl	8008e38 <USBD_GetConfig>
          break;
 80084de:	e013      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fcde 	bl	8008ea4 <USBD_GetStatus>
          break;
 80084e8:	e00e      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fd0d 	bl	8008f0c <USBD_SetFeature>
          break;
 80084f2:	e009      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fd31 	bl	8008f5e <USBD_ClrFeature>
          break;
 80084fc:	e004      	b.n	8008508 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fd88 	bl	8009016 <USBD_CtlError>
          break;
 8008506:	bf00      	nop
      }
      break;
 8008508:	e004      	b.n	8008514 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fd82 	bl	8009016 <USBD_CtlError>
      break;
 8008512:	bf00      	nop
  }

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop

08008520 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d005      	beq.n	8008546 <USBD_StdItfReq+0x26>
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d852      	bhi.n	80085e4 <USBD_StdItfReq+0xc4>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <USBD_StdItfReq+0x26>
 8008542:	2b20      	cmp	r3, #32
 8008544:	d14e      	bne.n	80085e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854c:	b2db      	uxtb	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	2b02      	cmp	r3, #2
 8008552:	d840      	bhi.n	80085d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	889b      	ldrh	r3, [r3, #4]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	d836      	bhi.n	80085cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	889b      	ldrh	r3, [r3, #4]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff fed9 	bl	800831e <USBD_CoreFindIF>
 800856c:	4603      	mov	r3, r0
 800856e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2bff      	cmp	r3, #255	; 0xff
 8008574:	d01d      	beq.n	80085b2 <USBD_StdItfReq+0x92>
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11a      	bne.n	80085b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800857c:	7bba      	ldrb	r2, [r7, #14]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	32ae      	adds	r2, #174	; 0xae
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00f      	beq.n	80085ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800858c:	7bba      	ldrb	r2, [r7, #14]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008594:	7bba      	ldrb	r2, [r7, #14]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	; 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085aa:	e004      	b.n	80085b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085b0:	e001      	b.n	80085b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085b2:	2303      	movs	r3, #3
 80085b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	88db      	ldrh	r3, [r3, #6]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d110      	bne.n	80085e0 <USBD_StdItfReq+0xc0>
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10d      	bne.n	80085e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fdf1 	bl	80091ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085ca:	e009      	b.n	80085e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fd21 	bl	8009016 <USBD_CtlError>
          break;
 80085d4:	e004      	b.n	80085e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fd1c 	bl	8009016 <USBD_CtlError>
          break;
 80085de:	e000      	b.n	80085e2 <USBD_StdItfReq+0xc2>
          break;
 80085e0:	bf00      	nop
      }
      break;
 80085e2:	e004      	b.n	80085ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fd15 	bl	8009016 <USBD_CtlError>
      break;
 80085ec:	bf00      	nop
  }

  return ret;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	889b      	ldrh	r3, [r3, #4]
 800860a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d007      	beq.n	8008628 <USBD_StdEPReq+0x30>
 8008618:	2b40      	cmp	r3, #64	; 0x40
 800861a:	f200 817f 	bhi.w	800891c <USBD_StdEPReq+0x324>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d02a      	beq.n	8008678 <USBD_StdEPReq+0x80>
 8008622:	2b20      	cmp	r3, #32
 8008624:	f040 817a 	bne.w	800891c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff fe83 	bl	8008338 <USBD_CoreFindEP>
 8008632:	4603      	mov	r3, r0
 8008634:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008636:	7b7b      	ldrb	r3, [r7, #13]
 8008638:	2bff      	cmp	r3, #255	; 0xff
 800863a:	f000 8174 	beq.w	8008926 <USBD_StdEPReq+0x32e>
 800863e:	7b7b      	ldrb	r3, [r7, #13]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f040 8170 	bne.w	8008926 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008646:	7b7a      	ldrb	r2, [r7, #13]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800864e:	7b7a      	ldrb	r2, [r7, #13]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	32ae      	adds	r2, #174	; 0xae
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 8163 	beq.w	8008926 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008660:	7b7a      	ldrb	r2, [r7, #13]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	32ae      	adds	r2, #174	; 0xae
 8008666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008676:	e156      	b.n	8008926 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b03      	cmp	r3, #3
 800867e:	d008      	beq.n	8008692 <USBD_StdEPReq+0x9a>
 8008680:	2b03      	cmp	r3, #3
 8008682:	f300 8145 	bgt.w	8008910 <USBD_StdEPReq+0x318>
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 809b 	beq.w	80087c2 <USBD_StdEPReq+0x1ca>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d03c      	beq.n	800870a <USBD_StdEPReq+0x112>
 8008690:	e13e      	b.n	8008910 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d002      	beq.n	80086a4 <USBD_StdEPReq+0xac>
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d016      	beq.n	80086d0 <USBD_StdEPReq+0xd8>
 80086a2:	e02c      	b.n	80086fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00d      	beq.n	80086c6 <USBD_StdEPReq+0xce>
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d00a      	beq.n	80086c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f9a1 	bl	80099fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ba:	2180      	movs	r1, #128	; 0x80
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 f99d 	bl	80099fc <USBD_LL_StallEP>
 80086c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086c4:	e020      	b.n	8008708 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fca4 	bl	8009016 <USBD_CtlError>
              break;
 80086ce:	e01b      	b.n	8008708 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10e      	bne.n	80086f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <USBD_StdEPReq+0xfe>
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b80      	cmp	r3, #128	; 0x80
 80086e2:	d008      	beq.n	80086f6 <USBD_StdEPReq+0xfe>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f983 	bl	80099fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fd58 	bl	80091ac <USBD_CtlSendStatus>

              break;
 80086fc:	e004      	b.n	8008708 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fc88 	bl	8009016 <USBD_CtlError>
              break;
 8008706:	bf00      	nop
          }
          break;
 8008708:	e107      	b.n	800891a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d002      	beq.n	800871c <USBD_StdEPReq+0x124>
 8008716:	2b03      	cmp	r3, #3
 8008718:	d016      	beq.n	8008748 <USBD_StdEPReq+0x150>
 800871a:	e04b      	b.n	80087b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00d      	beq.n	800873e <USBD_StdEPReq+0x146>
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b80      	cmp	r3, #128	; 0x80
 8008726:	d00a      	beq.n	800873e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 f965 	bl	80099fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008732:	2180      	movs	r1, #128	; 0x80
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f961 	bl	80099fc <USBD_LL_StallEP>
 800873a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800873c:	e040      	b.n	80087c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fc68 	bl	8009016 <USBD_CtlError>
              break;
 8008746:	e03b      	b.n	80087c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	885b      	ldrh	r3, [r3, #2]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d136      	bne.n	80087be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 f96b 	bl	8009a3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fd21 	bl	80091ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fde2 	bl	8008338 <USBD_CoreFindEP>
 8008774:	4603      	mov	r3, r0
 8008776:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008778:	7b7b      	ldrb	r3, [r7, #13]
 800877a:	2bff      	cmp	r3, #255	; 0xff
 800877c:	d01f      	beq.n	80087be <USBD_StdEPReq+0x1c6>
 800877e:	7b7b      	ldrb	r3, [r7, #13]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11c      	bne.n	80087be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008784:	7b7a      	ldrb	r2, [r7, #13]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800878c:	7b7a      	ldrb	r2, [r7, #13]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32ae      	adds	r2, #174	; 0xae
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d010      	beq.n	80087be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800879c:	7b7a      	ldrb	r2, [r7, #13]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	32ae      	adds	r2, #174	; 0xae
 80087a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087b2:	e004      	b.n	80087be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc2d 	bl	8009016 <USBD_CtlError>
              break;
 80087bc:	e000      	b.n	80087c0 <USBD_StdEPReq+0x1c8>
              break;
 80087be:	bf00      	nop
          }
          break;
 80087c0:	e0ab      	b.n	800891a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d002      	beq.n	80087d4 <USBD_StdEPReq+0x1dc>
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d032      	beq.n	8008838 <USBD_StdEPReq+0x240>
 80087d2:	e097      	b.n	8008904 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <USBD_StdEPReq+0x1f2>
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	2b80      	cmp	r3, #128	; 0x80
 80087de:	d004      	beq.n	80087ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fc17 	bl	8009016 <USBD_CtlError>
                break;
 80087e8:	e091      	b.n	800890e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da0b      	bge.n	800880a <USBD_StdEPReq+0x212>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	3310      	adds	r3, #16
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	4413      	add	r3, r2
 8008806:	3304      	adds	r3, #4
 8008808:	e00b      	b.n	8008822 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	4413      	add	r3, r2
 8008820:	3304      	adds	r3, #4
 8008822:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2202      	movs	r2, #2
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fc61 	bl	80090f8 <USBD_CtlSendData>
              break;
 8008836:	e06a      	b.n	800890e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	da11      	bge.n	8008864 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	f003 020f 	and.w	r2, r3, #15
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	3324      	adds	r3, #36	; 0x24
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d117      	bne.n	800888a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fbda 	bl	8009016 <USBD_CtlError>
                  break;
 8008862:	e054      	b.n	800890e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	f003 020f 	and.w	r2, r3, #15
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d104      	bne.n	800888a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fbc7 	bl	8009016 <USBD_CtlError>
                  break;
 8008888:	e041      	b.n	800890e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800888a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800888e:	2b00      	cmp	r3, #0
 8008890:	da0b      	bge.n	80088aa <USBD_StdEPReq+0x2b2>
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	3310      	adds	r3, #16
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	3304      	adds	r3, #4
 80088a8:	e00b      	b.n	80088c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	4413      	add	r3, r2
 80088c0:	3304      	adds	r3, #4
 80088c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <USBD_StdEPReq+0x2d8>
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b80      	cmp	r3, #128	; 0x80
 80088ce:	d103      	bne.n	80088d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e00e      	b.n	80088f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 f8cb 	bl	8009a78 <USBD_LL_IsStallEP>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2201      	movs	r2, #1
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e002      	b.n	80088f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2202      	movs	r2, #2
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fbfb 	bl	80090f8 <USBD_CtlSendData>
              break;
 8008902:	e004      	b.n	800890e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fb85 	bl	8009016 <USBD_CtlError>
              break;
 800890c:	bf00      	nop
          }
          break;
 800890e:	e004      	b.n	800891a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb7f 	bl	8009016 <USBD_CtlError>
          break;
 8008918:	bf00      	nop
      }
      break;
 800891a:	e005      	b.n	8008928 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fb79 	bl	8009016 <USBD_CtlError>
      break;
 8008924:	e000      	b.n	8008928 <USBD_StdEPReq+0x330>
      break;
 8008926:	bf00      	nop
  }

  return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	2b0e      	cmp	r3, #14
 8008956:	f200 8152 	bhi.w	8008bfe <USBD_GetDescriptor+0x2ca>
 800895a:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <USBD_GetDescriptor+0x2c>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	080089d1 	.word	0x080089d1
 8008964:	080089e9 	.word	0x080089e9
 8008968:	08008a29 	.word	0x08008a29
 800896c:	08008bff 	.word	0x08008bff
 8008970:	08008bff 	.word	0x08008bff
 8008974:	08008b9f 	.word	0x08008b9f
 8008978:	08008bcb 	.word	0x08008bcb
 800897c:	08008bff 	.word	0x08008bff
 8008980:	08008bff 	.word	0x08008bff
 8008984:	08008bff 	.word	0x08008bff
 8008988:	08008bff 	.word	0x08008bff
 800898c:	08008bff 	.word	0x08008bff
 8008990:	08008bff 	.word	0x08008bff
 8008994:	08008bff 	.word	0x08008bff
 8008998:	0800899d 	.word	0x0800899d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089be:	e126      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fb27 	bl	8009016 <USBD_CtlError>
        err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
      break;
 80089ce:	e11e      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
      break;
 80089e6:	e112      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	7c1b      	ldrb	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f8:	f107 0208 	add.w	r2, r7, #8
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
 8008a00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3301      	adds	r3, #1
 8008a06:	2202      	movs	r2, #2
 8008a08:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a0a:	e100      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	f107 0208 	add.w	r2, r7, #8
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	2202      	movs	r2, #2
 8008a24:	701a      	strb	r2, [r3, #0]
      break;
 8008a26:	e0f2      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	885b      	ldrh	r3, [r3, #2]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	f200 80ac 	bhi.w	8008b8c <USBD_GetDescriptor+0x258>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <USBD_GetDescriptor+0x108>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a55 	.word	0x08008a55
 8008a40:	08008a89 	.word	0x08008a89
 8008a44:	08008abd 	.word	0x08008abd
 8008a48:	08008af1 	.word	0x08008af1
 8008a4c:	08008b25 	.word	0x08008b25
 8008a50:	08008b59 	.word	0x08008b59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a76:	e091      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 facb 	bl	8009016 <USBD_CtlError>
            err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
          break;
 8008a86:	e089      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	7c12      	ldrb	r2, [r2, #16]
 8008aa0:	f107 0108 	add.w	r1, r7, #8
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aaa:	e077      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fab1 	bl	8009016 <USBD_CtlError>
            err++;
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aba:	e06f      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00b      	beq.n	8008ae0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	7c12      	ldrb	r2, [r2, #16]
 8008ad4:	f107 0108 	add.w	r1, r7, #8
 8008ad8:	4610      	mov	r0, r2
 8008ada:	4798      	blx	r3
 8008adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ade:	e05d      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa97 	bl	8009016 <USBD_CtlError>
            err++;
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	3301      	adds	r3, #1
 8008aec:	72fb      	strb	r3, [r7, #11]
          break;
 8008aee:	e055      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7c12      	ldrb	r2, [r2, #16]
 8008b08:	f107 0108 	add.w	r1, r7, #8
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4798      	blx	r3
 8008b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b12:	e043      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa7d 	bl	8009016 <USBD_CtlError>
            err++;
 8008b1c:	7afb      	ldrb	r3, [r7, #11]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	72fb      	strb	r3, [r7, #11]
          break;
 8008b22:	e03b      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7c12      	ldrb	r2, [r2, #16]
 8008b3c:	f107 0108 	add.w	r1, r7, #8
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b46:	e029      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fa63 	bl	8009016 <USBD_CtlError>
            err++;
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	3301      	adds	r3, #1
 8008b54:	72fb      	strb	r3, [r7, #11]
          break;
 8008b56:	e021      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b7a:	e00f      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa49 	bl	8009016 <USBD_CtlError>
            err++;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	3301      	adds	r3, #1
 8008b88:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8a:	e007      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fa41 	bl	8009016 <USBD_CtlError>
          err++;
 8008b94:	7afb      	ldrb	r3, [r7, #11]
 8008b96:	3301      	adds	r3, #1
 8008b98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b9a:	bf00      	nop
      }
      break;
 8008b9c:	e037      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7c1b      	ldrb	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	f107 0208 	add.w	r2, r7, #8
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	4798      	blx	r3
 8008bb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb8:	e029      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fa2a 	bl	8009016 <USBD_CtlError>
        err++;
 8008bc2:	7afb      	ldrb	r3, [r7, #11]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc8:	e021      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7c1b      	ldrb	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10d      	bne.n	8008bee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	f107 0208 	add.w	r2, r7, #8
 8008bde:	4610      	mov	r0, r2
 8008be0:	4798      	blx	r3
 8008be2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	2207      	movs	r2, #7
 8008bea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bec:	e00f      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fa10 	bl	8009016 <USBD_CtlError>
        err++;
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8008bfc:	e007      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fa08 	bl	8009016 <USBD_CtlError>
      err++;
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c0c:	bf00      	nop
  }

  if (err != 0U)
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11e      	bne.n	8008c52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	88db      	ldrh	r3, [r3, #6]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d016      	beq.n	8008c4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008c1c:	893b      	ldrh	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00e      	beq.n	8008c40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	88da      	ldrh	r2, [r3, #6]
 8008c26:	893b      	ldrh	r3, [r7, #8]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	bf28      	it	cs
 8008c2c:	4613      	movcs	r3, r2
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c32:	893b      	ldrh	r3, [r7, #8]
 8008c34:	461a      	mov	r2, r3
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fa5d 	bl	80090f8 <USBD_CtlSendData>
 8008c3e:	e009      	b.n	8008c54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9e7 	bl	8009016 <USBD_CtlError>
 8008c48:	e004      	b.n	8008c54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 faae 	bl	80091ac <USBD_CtlSendStatus>
 8008c50:	e000      	b.n	8008c54 <USBD_GetDescriptor+0x320>
    return;
 8008c52:	bf00      	nop
  }
}
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop

08008c5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	889b      	ldrh	r3, [r3, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d131      	bne.n	8008cd2 <USBD_SetAddress+0x76>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d12d      	bne.n	8008cd2 <USBD_SetAddress+0x76>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c7c:	d829      	bhi.n	8008cd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	885b      	ldrh	r3, [r3, #2]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d104      	bne.n	8008ca0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f9bc 	bl	8009016 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9e:	e01d      	b.n	8008cdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	7bfa      	ldrb	r2, [r7, #15]
 8008ca4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 ff10 	bl	8009ad2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa7a 	bl	80091ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc6:	e009      	b.n	8008cdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd0:	e004      	b.n	8008cdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f99e 	bl	8009016 <USBD_CtlError>
  }
}
 8008cda:	bf00      	nop
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	885b      	ldrh	r3, [r3, #2]
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	4b4e      	ldr	r3, [pc, #312]	; (8008e34 <USBD_SetConfig+0x150>)
 8008cfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cfc:	4b4d      	ldr	r3, [pc, #308]	; (8008e34 <USBD_SetConfig+0x150>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d905      	bls.n	8008d10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f985 	bl	8009016 <USBD_CtlError>
    return USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e08c      	b.n	8008e2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d002      	beq.n	8008d22 <USBD_SetConfig+0x3e>
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d029      	beq.n	8008d74 <USBD_SetConfig+0x90>
 8008d20:	e075      	b.n	8008e0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d22:	4b44      	ldr	r3, [pc, #272]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d020      	beq.n	8008d6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008d2a:	4b42      	ldr	r3, [pc, #264]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d34:	4b3f      	ldr	r3, [pc, #252]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7ff f849 	bl	8007dd2 <USBD_SetClassConfig>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d008      	beq.n	8008d5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f962 	bl	8009016 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2202      	movs	r2, #2
 8008d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d5a:	e065      	b.n	8008e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa25 	bl	80091ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2203      	movs	r2, #3
 8008d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d6a:	e05d      	b.n	8008e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa1d 	bl	80091ac <USBD_CtlSendStatus>
      break;
 8008d72:	e059      	b.n	8008e28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d74:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d112      	bne.n	8008da2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d84:	4b2b      	ldr	r3, [pc, #172]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d8e:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff f838 	bl	8007e0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa06 	bl	80091ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008da0:	e042      	b.n	8008e28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008da2:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <USBD_SetConfig+0x150>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d02a      	beq.n	8008e06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff f826 	bl	8007e0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008dbe:	4b1d      	ldr	r3, [pc, #116]	; (8008e34 <USBD_SetConfig+0x150>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	; (8008e34 <USBD_SetConfig+0x150>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fe ffff 	bl	8007dd2 <USBD_SetClassConfig>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00f      	beq.n	8008dfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f918 	bl	8009016 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff f80b 	bl	8007e0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dfc:	e014      	b.n	8008e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9d4 	bl	80091ac <USBD_CtlSendStatus>
      break;
 8008e04:	e010      	b.n	8008e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f9d0 	bl	80091ac <USBD_CtlSendStatus>
      break;
 8008e0c:	e00c      	b.n	8008e28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f900 	bl	8009016 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e16:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <USBD_SetConfig+0x150>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7fe fff4 	bl	8007e0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e22:	2303      	movs	r3, #3
 8008e24:	73fb      	strb	r3, [r7, #15]
      break;
 8008e26:	bf00      	nop
  }

  return ret;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000238 	.word	0x20000238

08008e38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88db      	ldrh	r3, [r3, #6]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d004      	beq.n	8008e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f8e2 	bl	8009016 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e52:	e023      	b.n	8008e9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	dc02      	bgt.n	8008e66 <USBD_GetConfig+0x2e>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc03      	bgt.n	8008e6c <USBD_GetConfig+0x34>
 8008e64:	e015      	b.n	8008e92 <USBD_GetConfig+0x5a>
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d00b      	beq.n	8008e82 <USBD_GetConfig+0x4a>
 8008e6a:	e012      	b.n	8008e92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	3308      	adds	r3, #8
 8008e76:	2201      	movs	r2, #1
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f93c 	bl	80090f8 <USBD_CtlSendData>
        break;
 8008e80:	e00c      	b.n	8008e9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3304      	adds	r3, #4
 8008e86:	2201      	movs	r2, #1
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f934 	bl	80090f8 <USBD_CtlSendData>
        break;
 8008e90:	e004      	b.n	8008e9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f8be 	bl	8009016 <USBD_CtlError>
        break;
 8008e9a:	bf00      	nop
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d81e      	bhi.n	8008efa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	88db      	ldrh	r3, [r3, #6]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d004      	beq.n	8008ece <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f8a5 	bl	8009016 <USBD_CtlError>
        break;
 8008ecc:	e01a      	b.n	8008f04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f043 0202 	orr.w	r2, r3, #2
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	330c      	adds	r3, #12
 8008eee:	2202      	movs	r2, #2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f900 	bl	80090f8 <USBD_CtlSendData>
      break;
 8008ef8:	e004      	b.n	8008f04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f88a 	bl	8009016 <USBD_CtlError>
      break;
 8008f02:	bf00      	nop
  }
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	885b      	ldrh	r3, [r3, #2]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d107      	bne.n	8008f2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f940 	bl	80091ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008f2c:	e013      	b.n	8008f56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	885b      	ldrh	r3, [r3, #2]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d10b      	bne.n	8008f4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	889b      	ldrh	r3, [r3, #4]
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f930 	bl	80091ac <USBD_CtlSendStatus>
}
 8008f4c:	e003      	b.n	8008f56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f860 	bl	8009016 <USBD_CtlError>
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	3b01      	subs	r3, #1
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d80b      	bhi.n	8008f8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	885b      	ldrh	r3, [r3, #2]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d10c      	bne.n	8008f98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f910 	bl	80091ac <USBD_CtlSendStatus>
      }
      break;
 8008f8c:	e004      	b.n	8008f98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f840 	bl	8009016 <USBD_CtlError>
      break;
 8008f96:	e000      	b.n	8008f9a <USBD_ClrFeature+0x3c>
      break;
 8008f98:	bf00      	nop
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	781a      	ldrb	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f7ff fa17 	bl	8008400 <SWAPBYTE>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff fa0a 	bl	8008400 <SWAPBYTE>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff f9fd 	bl	8008400 <SWAPBYTE>
 8009006:	4603      	mov	r3, r0
 8009008:	461a      	mov	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	80da      	strh	r2, [r3, #6]
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009020:	2180      	movs	r1, #128	; 0x80
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fcea 	bl	80099fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009028:	2100      	movs	r1, #0
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fce6 	bl	80099fc <USBD_LL_StallEP>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d036      	beq.n	80090bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009052:	6938      	ldr	r0, [r7, #16]
 8009054:	f000 f836 	bl	80090c4 <USBD_GetLen>
 8009058:	4603      	mov	r3, r0
 800905a:	3301      	adds	r3, #1
 800905c:	b29b      	uxth	r3, r3
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	4413      	add	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	701a      	strb	r2, [r3, #0]
  idx++;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	3301      	adds	r3, #1
 8009076:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009078:	7dfb      	ldrb	r3, [r7, #23]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	2203      	movs	r2, #3
 8009080:	701a      	strb	r2, [r3, #0]
  idx++;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	3301      	adds	r3, #1
 8009086:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009088:	e013      	b.n	80090b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	4413      	add	r3, r2
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	7812      	ldrb	r2, [r2, #0]
 8009094:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	3301      	adds	r3, #1
 800909a:	613b      	str	r3, [r7, #16]
    idx++;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	3301      	adds	r3, #1
 80090a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4413      	add	r3, r2
 80090a8:	2200      	movs	r2, #0
 80090aa:	701a      	strb	r2, [r3, #0]
    idx++;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	3301      	adds	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e7      	bne.n	800908a <USBD_GetString+0x52>
 80090ba:	e000      	b.n	80090be <USBD_GetString+0x86>
    return;
 80090bc:	bf00      	nop
  }
}
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090d4:	e005      	b.n	80090e2 <USBD_GetLen+0x1e>
  {
    len++;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	3301      	adds	r3, #1
 80090da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	3301      	adds	r3, #1
 80090e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f5      	bne.n	80090d6 <USBD_GetLen+0x12>
  }

  return len;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2202      	movs	r2, #2
 8009108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	2100      	movs	r1, #0
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fcf6 	bl	8009b10 <USBD_LL_Transmit>

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fce5 	bl	8009b10 <USBD_LL_Transmit>

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2203      	movs	r2, #3
 8009160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	2100      	movs	r1, #0
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 fce9 	bl	8009b52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	2100      	movs	r1, #0
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fcd8 	bl	8009b52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2204      	movs	r2, #4
 80091b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091bc:	2300      	movs	r3, #0
 80091be:	2200      	movs	r2, #0
 80091c0:	2100      	movs	r1, #0
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fca4 	bl	8009b10 <USBD_LL_Transmit>

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2205      	movs	r2, #5
 80091de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091e2:	2300      	movs	r3, #0
 80091e4:	2200      	movs	r2, #0
 80091e6:	2100      	movs	r1, #0
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fcb2 	bl	8009b52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80091fc:	2200      	movs	r2, #0
 80091fe:	4912      	ldr	r1, [pc, #72]	; (8009248 <MX_USB_Device_Init+0x50>)
 8009200:	4812      	ldr	r0, [pc, #72]	; (800924c <MX_USB_Device_Init+0x54>)
 8009202:	f7fe fd69 	bl	8007cd8 <USBD_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800920c:	f7f7 f982 	bl	8000514 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009210:	490f      	ldr	r1, [pc, #60]	; (8009250 <MX_USB_Device_Init+0x58>)
 8009212:	480e      	ldr	r0, [pc, #56]	; (800924c <MX_USB_Device_Init+0x54>)
 8009214:	f7fe fd90 	bl	8007d38 <USBD_RegisterClass>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800921e:	f7f7 f979 	bl	8000514 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009222:	490c      	ldr	r1, [pc, #48]	; (8009254 <MX_USB_Device_Init+0x5c>)
 8009224:	4809      	ldr	r0, [pc, #36]	; (800924c <MX_USB_Device_Init+0x54>)
 8009226:	f7fe fc87 	bl	8007b38 <USBD_CDC_RegisterInterface>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009230:	f7f7 f970 	bl	8000514 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009234:	4805      	ldr	r0, [pc, #20]	; (800924c <MX_USB_Device_Init+0x54>)
 8009236:	f7fe fdb5 	bl	8007da4 <USBD_Start>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009240:	f7f7 f968 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009244:	bf00      	nop
 8009246:	bd80      	pop	{r7, pc}
 8009248:	200000f4 	.word	0x200000f4
 800924c:	2000023c 	.word	0x2000023c
 8009250:	20000060 	.word	0x20000060
 8009254:	200000e0 	.word	0x200000e0

08009258 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800925c:	2200      	movs	r2, #0
 800925e:	4905      	ldr	r1, [pc, #20]	; (8009274 <CDC_Init_FS+0x1c>)
 8009260:	4805      	ldr	r0, [pc, #20]	; (8009278 <CDC_Init_FS+0x20>)
 8009262:	f7fe fc83 	bl	8007b6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009266:	4905      	ldr	r1, [pc, #20]	; (800927c <CDC_Init_FS+0x24>)
 8009268:	4803      	ldr	r0, [pc, #12]	; (8009278 <CDC_Init_FS+0x20>)
 800926a:	f7fe fca1 	bl	8007bb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800926e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009270:	4618      	mov	r0, r3
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000d18 	.word	0x20000d18
 8009278:	2000023c 	.word	0x2000023c
 800927c:	20000518 	.word	0x20000518

08009280 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009284:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009286:	4618      	mov	r0, r3
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
 800929c:	4613      	mov	r3, r2
 800929e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b23      	cmp	r3, #35	; 0x23
 80092a4:	d84a      	bhi.n	800933c <CDC_Control_FS+0xac>
 80092a6:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <CDC_Control_FS+0x1c>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	0800933d 	.word	0x0800933d
 80092b0:	0800933d 	.word	0x0800933d
 80092b4:	0800933d 	.word	0x0800933d
 80092b8:	0800933d 	.word	0x0800933d
 80092bc:	0800933d 	.word	0x0800933d
 80092c0:	0800933d 	.word	0x0800933d
 80092c4:	0800933d 	.word	0x0800933d
 80092c8:	0800933d 	.word	0x0800933d
 80092cc:	0800933d 	.word	0x0800933d
 80092d0:	0800933d 	.word	0x0800933d
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	0800933d 	.word	0x0800933d
 80092dc:	0800933d 	.word	0x0800933d
 80092e0:	0800933d 	.word	0x0800933d
 80092e4:	0800933d 	.word	0x0800933d
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	0800933d 	.word	0x0800933d
 80092f0:	0800933d 	.word	0x0800933d
 80092f4:	0800933d 	.word	0x0800933d
 80092f8:	0800933d 	.word	0x0800933d
 80092fc:	0800933d 	.word	0x0800933d
 8009300:	0800933d 	.word	0x0800933d
 8009304:	0800933d 	.word	0x0800933d
 8009308:	0800933d 	.word	0x0800933d
 800930c:	0800933d 	.word	0x0800933d
 8009310:	0800933d 	.word	0x0800933d
 8009314:	0800933d 	.word	0x0800933d
 8009318:	0800933d 	.word	0x0800933d
 800931c:	0800933d 	.word	0x0800933d
 8009320:	0800933d 	.word	0x0800933d
 8009324:	0800933d 	.word	0x0800933d
 8009328:	0800933d 	.word	0x0800933d
 800932c:	0800933d 	.word	0x0800933d
 8009330:	0800933d 	.word	0x0800933d
 8009334:	0800933d 	.word	0x0800933d
 8009338:	0800933d 	.word	0x0800933d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800933c:	bf00      	nop
  }

  return (USBD_OK);
 800933e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	4805      	ldr	r0, [pc, #20]	; (8009370 <CDC_Receive_FS+0x24>)
 800935a:	f7fe fc29 	bl	8007bb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800935e:	4804      	ldr	r0, [pc, #16]	; (8009370 <CDC_Receive_FS+0x24>)
 8009360:	f7fe fc84 	bl	8007c6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009364:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	2000023c 	.word	0x2000023c

08009374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <CDC_Transmit_FS+0x48>)
 8009386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800938a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009396:	2301      	movs	r3, #1
 8009398:	e00b      	b.n	80093b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800939a:	887b      	ldrh	r3, [r7, #2]
 800939c:	461a      	mov	r2, r3
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4806      	ldr	r0, [pc, #24]	; (80093bc <CDC_Transmit_FS+0x48>)
 80093a2:	f7fe fbe3 	bl	8007b6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093a6:	4805      	ldr	r0, [pc, #20]	; (80093bc <CDC_Transmit_FS+0x48>)
 80093a8:	f7fe fc20 	bl	8007bec <USBD_CDC_TransmitPacket>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000023c 	.word	0x2000023c

080093c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
	...

080093e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2212      	movs	r2, #18
 80093f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80093f6:	4b03      	ldr	r3, [pc, #12]	; (8009404 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	20000114 	.word	0x20000114

08009408 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2204      	movs	r2, #4
 8009418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800941a:	4b03      	ldr	r3, [pc, #12]	; (8009428 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20000128 	.word	0x20000128

0800942c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d105      	bne.n	800944a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4907      	ldr	r1, [pc, #28]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009442:	4808      	ldr	r0, [pc, #32]	; (8009464 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009444:	f7ff fdf8 	bl	8009038 <USBD_GetString>
 8009448:	e004      	b.n	8009454 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4904      	ldr	r1, [pc, #16]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x34>)
 800944e:	4805      	ldr	r0, [pc, #20]	; (8009464 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009450:	f7ff fdf2 	bl	8009038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20001518 	.word	0x20001518
 8009464:	0800ad10 	.word	0x0800ad10

08009468 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	4904      	ldr	r1, [pc, #16]	; (8009488 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009478:	4804      	ldr	r0, [pc, #16]	; (800948c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800947a:	f7ff fddd 	bl	8009038 <USBD_GetString>
  return USBD_StrDesc;
 800947e:	4b02      	ldr	r3, [pc, #8]	; (8009488 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20001518 	.word	0x20001518
 800948c:	0800ad28 	.word	0x0800ad28

08009490 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	221a      	movs	r2, #26
 80094a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094a2:	f000 f843 	bl	800952c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80094a6:	4b02      	ldr	r3, [pc, #8]	; (80094b0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	2000012c 	.word	0x2000012c

080094b4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4603      	mov	r3, r0
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d105      	bne.n	80094d2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	4907      	ldr	r1, [pc, #28]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094ca:	4808      	ldr	r0, [pc, #32]	; (80094ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094cc:	f7ff fdb4 	bl	8009038 <USBD_GetString>
 80094d0:	e004      	b.n	80094dc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4904      	ldr	r1, [pc, #16]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094d6:	4805      	ldr	r0, [pc, #20]	; (80094ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094d8:	f7ff fdae 	bl	8009038 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20001518 	.word	0x20001518
 80094ec:	0800ad3c 	.word	0x0800ad3c

080094f0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d105      	bne.n	800950e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4907      	ldr	r1, [pc, #28]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009506:	4808      	ldr	r0, [pc, #32]	; (8009528 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009508:	f7ff fd96 	bl	8009038 <USBD_GetString>
 800950c:	e004      	b.n	8009518 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	4904      	ldr	r1, [pc, #16]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009512:	4805      	ldr	r0, [pc, #20]	; (8009528 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009514:	f7ff fd90 	bl	8009038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009518:	4b02      	ldr	r3, [pc, #8]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20001518 	.word	0x20001518
 8009528:	0800ad48 	.word	0x0800ad48

0800952c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009532:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <Get_SerialNum+0x44>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009538:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <Get_SerialNum+0x48>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800953e:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <Get_SerialNum+0x4c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d009      	beq.n	8009566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009552:	2208      	movs	r2, #8
 8009554:	4909      	ldr	r1, [pc, #36]	; (800957c <Get_SerialNum+0x50>)
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f814 	bl	8009584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800955c:	2204      	movs	r2, #4
 800955e:	4908      	ldr	r1, [pc, #32]	; (8009580 <Get_SerialNum+0x54>)
 8009560:	68b8      	ldr	r0, [r7, #8]
 8009562:	f000 f80f 	bl	8009584 <IntToUnicode>
  }
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	1fff7590 	.word	0x1fff7590
 8009574:	1fff7594 	.word	0x1fff7594
 8009578:	1fff7598 	.word	0x1fff7598
 800957c:	2000012e 	.word	0x2000012e
 8009580:	2000013e 	.word	0x2000013e

08009584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
 800959a:	e027      	b.n	80095ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	0f1b      	lsrs	r3, r3, #28
 80095a0:	2b09      	cmp	r3, #9
 80095a2:	d80b      	bhi.n	80095bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	0f1b      	lsrs	r3, r3, #28
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	4619      	mov	r1, r3
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	440b      	add	r3, r1
 80095b4:	3230      	adds	r2, #48	; 0x30
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	e00a      	b.n	80095d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	0f1b      	lsrs	r3, r3, #28
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4619      	mov	r1, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	440b      	add	r3, r1
 80095cc:	3237      	adds	r2, #55	; 0x37
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	3301      	adds	r3, #1
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4413      	add	r3, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	3301      	adds	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]
 80095ec:	7dfa      	ldrb	r2, [r7, #23]
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d3d3      	bcc.n	800959c <IntToUnicode+0x18>
  }
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <LL_AHB2_GRP1_EnableClock>:
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800960a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800960e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4313      	orrs	r3, r2
 8009618:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800961a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800961e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4013      	ands	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009626:	68fb      	ldr	r3, [r7, #12]
}
 8009628:	bf00      	nop
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <LL_APB1_GRP1_EnableClock>:
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800963c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4313      	orrs	r3, r2
 800964a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800964c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009650:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4013      	ands	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009658:	68fb      	ldr	r3, [r7, #12]
}
 800965a:	bf00      	nop
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
	...

08009668 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b09c      	sub	sp, #112	; 0x70
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009670:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	605a      	str	r2, [r3, #4]
 800967a:	609a      	str	r2, [r3, #8]
 800967c:	60da      	str	r2, [r3, #12]
 800967e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009680:	f107 030c 	add.w	r3, r7, #12
 8009684:	2250      	movs	r2, #80	; 0x50
 8009686:	2100      	movs	r1, #0
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fb41 	bl	8009d10 <memset>
  if(pcdHandle->Instance==USB)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a23      	ldr	r2, [pc, #140]	; (8009720 <HAL_PCD_MspInit+0xb8>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d13e      	bne.n	8009716 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800969e:	2318      	movs	r3, #24
 80096a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80096a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096a6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80096a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80096ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80096b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80096b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096b8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80096ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80096be:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80096c0:	f107 030c 	add.w	r3, r7, #12
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fa fdbd 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80096d0:	f7f6 ff20 	bl	8000514 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096d4:	2001      	movs	r0, #1
 80096d6:	f7ff ff94 	bl	8009602 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e0:	2302      	movs	r3, #2
 80096e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e8:	2300      	movs	r3, #0
 80096ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80096ec:	230a      	movs	r3, #10
 80096ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80096f4:	4619      	mov	r1, r3
 80096f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096fa:	f7f7 fb9d 	bl	8000e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009702:	f7ff ff97 	bl	8009634 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009706:	2200      	movs	r2, #0
 8009708:	2100      	movs	r1, #0
 800970a:	2014      	movs	r0, #20
 800970c:	f7f7 fb5f 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009710:	2014      	movs	r0, #20
 8009712:	f7f7 fb76 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009716:	bf00      	nop
 8009718:	3770      	adds	r7, #112	; 0x70
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40006800 	.word	0x40006800

08009724 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe fb7f 	bl	8007e3e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	440b      	add	r3, r1
 8009768:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	4619      	mov	r1, r3
 8009772:	f7fe fbb9 	bl	8007ee8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	440b      	add	r3, r1
 800979e:	333c      	adds	r3, #60	; 0x3c
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	4619      	mov	r1, r3
 80097a6:	f7fe fc52 	bl	800804e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fd8c 	bl	80082de <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097d6:	2301      	movs	r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d001      	beq.n	80097e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097e2:	f7f6 fe97 	bl	8000514 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097ec:	7bfa      	ldrb	r2, [r7, #15]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fd30 	bl	8008256 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fcd8 	bl	80081b2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fd2b 	bl	8008276 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <HAL_PCD_SuspendCallback+0x30>)
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	4a03      	ldr	r2, [pc, #12]	; (800983c <HAL_PCD_SuspendCallback+0x30>)
 800982e:	f043 0306 	orr.w	r3, r3, #6
 8009832:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	e000ed00 	.word	0xe000ed00

08009840 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <HAL_PCD_ResumeCallback+0x34>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	4a07      	ldr	r2, [pc, #28]	; (8009874 <HAL_PCD_ResumeCallback+0x34>)
 8009856:	f023 0306 	bic.w	r3, r3, #6
 800985a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800985c:	f000 f9fc 	bl	8009c58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fd21 	bl	80082ae <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009880:	4a2c      	ldr	r2, [pc, #176]	; (8009934 <USBD_LL_Init+0xbc>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a2a      	ldr	r2, [pc, #168]	; (8009934 <USBD_LL_Init+0xbc>)
 800988c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009890:	f7f9 f9d4 	bl	8002c3c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009894:	4b27      	ldr	r3, [pc, #156]	; (8009934 <USBD_LL_Init+0xbc>)
 8009896:	4a28      	ldr	r2, [pc, #160]	; (8009938 <USBD_LL_Init+0xc0>)
 8009898:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800989a:	4b26      	ldr	r3, [pc, #152]	; (8009934 <USBD_LL_Init+0xbc>)
 800989c:	2208      	movs	r2, #8
 800989e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098a0:	4b24      	ldr	r3, [pc, #144]	; (8009934 <USBD_LL_Init+0xbc>)
 80098a2:	2202      	movs	r2, #2
 80098a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098a6:	4b23      	ldr	r3, [pc, #140]	; (8009934 <USBD_LL_Init+0xbc>)
 80098a8:	2202      	movs	r2, #2
 80098aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80098ac:	4b21      	ldr	r3, [pc, #132]	; (8009934 <USBD_LL_Init+0xbc>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098b2:	4b20      	ldr	r3, [pc, #128]	; (8009934 <USBD_LL_Init+0xbc>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098b8:	4b1e      	ldr	r3, [pc, #120]	; (8009934 <USBD_LL_Init+0xbc>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098be:	4b1d      	ldr	r3, [pc, #116]	; (8009934 <USBD_LL_Init+0xbc>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098c4:	481b      	ldr	r0, [pc, #108]	; (8009934 <USBD_LL_Init+0xbc>)
 80098c6:	f7f7 fc57 	bl	8001178 <HAL_PCD_Init>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80098d0:	f7f6 fe20 	bl	8000514 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098da:	2318      	movs	r3, #24
 80098dc:	2200      	movs	r2, #0
 80098de:	2100      	movs	r1, #0
 80098e0:	f7f9 f920 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098ea:	2358      	movs	r3, #88	; 0x58
 80098ec:	2200      	movs	r2, #0
 80098ee:	2180      	movs	r1, #128	; 0x80
 80098f0:	f7f9 f918 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098fa:	23c0      	movs	r3, #192	; 0xc0
 80098fc:	2200      	movs	r2, #0
 80098fe:	2181      	movs	r1, #129	; 0x81
 8009900:	f7f9 f910 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800990a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800990e:	2200      	movs	r2, #0
 8009910:	2101      	movs	r1, #1
 8009912:	f7f9 f907 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800991c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009920:	2200      	movs	r2, #0
 8009922:	2182      	movs	r1, #130	; 0x82
 8009924:	f7f9 f8fe 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20001718 	.word	0x20001718
 8009938:	40006800 	.word	0x40006800

0800993c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009952:	4618      	mov	r0, r3
 8009954:	f7f7 fce9 	bl	800132a <HAL_PCD_Start>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f980 	bl	8009c64 <USBD_Get_USB_Status>
 8009964:	4603      	mov	r3, r0
 8009966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009968:	7bbb      	ldrb	r3, [r7, #14]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	4608      	mov	r0, r1
 800997c:	4611      	mov	r1, r2
 800997e:	461a      	mov	r2, r3
 8009980:	4603      	mov	r3, r0
 8009982:	70fb      	strb	r3, [r7, #3]
 8009984:	460b      	mov	r3, r1
 8009986:	70bb      	strb	r3, [r7, #2]
 8009988:	4613      	mov	r3, r2
 800998a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800999a:	78bb      	ldrb	r3, [r7, #2]
 800999c:	883a      	ldrh	r2, [r7, #0]
 800999e:	78f9      	ldrb	r1, [r7, #3]
 80099a0:	f7f7 fe31 	bl	8001606 <HAL_PCD_EP_Open>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f95a 	bl	8009c64 <USBD_Get_USB_Status>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f7f7 fe6f 	bl	80016c0 <HAL_PCD_EP_Close>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f93b 	bl	8009c64 <USBD_Get_USB_Status>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f7 ff18 	bl	8001850 <HAL_PCD_EP_SetStall>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 f91c 	bl	8009c64 <USBD_Get_USB_Status>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f7 ff4b 	bl	80018f4 <HAL_PCD_EP_ClrStall>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 f8fd 	bl	8009c64 <USBD_Get_USB_Status>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da0c      	bge.n	8009aae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	440b      	add	r3, r1
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	e00b      	b.n	8009ac6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ab4:	68f9      	ldr	r1, [r7, #12]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	440b      	add	r3, r1
 8009ac0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ac4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7f7 fd63 	bl	80015bc <HAL_PCD_SetAddress>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 f8b1 	bl	8009c64 <USBD_Get_USB_Status>
 8009b02:	4603      	mov	r3, r0
 8009b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b2e:	7af9      	ldrb	r1, [r7, #11]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	f7f7 fe55 	bl	80017e2 <HAL_PCD_EP_Transmit>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f890 	bl	8009c64 <USBD_Get_USB_Status>
 8009b44:	4603      	mov	r3, r0
 8009b46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b48:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b70:	7af9      	ldrb	r1, [r7, #11]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	f7f7 fdeb 	bl	8001750 <HAL_PCD_EP_Receive>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f86f 	bl	8009c64 <USBD_Get_USB_Status>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7f7 fe01 	bl	80017b2 <HAL_PCD_EP_GetRxCount>
 8009bb0:	4603      	mov	r3, r0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009bc8:	78fb      	ldrb	r3, [r7, #3]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <HAL_PCDEx_LPM_Callback+0x18>
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d013      	beq.n	8009bfa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009bd2:	e023      	b.n	8009c1c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d007      	beq.n	8009bec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009bdc:	f000 f83c 	bl	8009c58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be0:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4a0f      	ldr	r2, [pc, #60]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009be6:	f023 0306 	bic.w	r3, r3, #6
 8009bea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fb5b 	bl	80082ae <USBD_LL_Resume>
    break;
 8009bf8:	e010      	b.n	8009c1c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fb38 	bl	8008276 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d005      	beq.n	8009c1a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	4a04      	ldr	r2, [pc, #16]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c14:	f043 0306 	orr.w	r3, r3, #6
 8009c18:	6113      	str	r3, [r2, #16]
    break;
 8009c1a:	bf00      	nop
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	e000ed00 	.word	0xe000ed00

08009c28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c30:	4b03      	ldr	r3, [pc, #12]	; (8009c40 <USBD_static_malloc+0x18>)
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20001a0c 	.word	0x20001a0c

08009c44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009c5c:	f7f6 fb4a 	bl	80002f4 <SystemClock_Config>
}
 8009c60:	bf00      	nop
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d817      	bhi.n	8009ca8 <USBD_Get_USB_Status+0x44>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <USBD_Get_USB_Status+0x1c>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009c91 	.word	0x08009c91
 8009c84:	08009c97 	.word	0x08009c97
 8009c88:	08009c9d 	.word	0x08009c9d
 8009c8c:	08009ca3 	.word	0x08009ca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	e00b      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c96:	2303      	movs	r3, #3
 8009c98:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9a:	e008      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca0:	e005      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca6:	e002      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cac:	bf00      	nop
  }
  return usb_status;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <__errno>:
 8009cbc:	4b01      	ldr	r3, [pc, #4]	; (8009cc4 <__errno+0x8>)
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20000148 	.word	0x20000148

08009cc8 <__libc_init_array>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	4d0d      	ldr	r5, [pc, #52]	; (8009d00 <__libc_init_array+0x38>)
 8009ccc:	4c0d      	ldr	r4, [pc, #52]	; (8009d04 <__libc_init_array+0x3c>)
 8009cce:	1b64      	subs	r4, r4, r5
 8009cd0:	10a4      	asrs	r4, r4, #2
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	42a6      	cmp	r6, r4
 8009cd6:	d109      	bne.n	8009cec <__libc_init_array+0x24>
 8009cd8:	4d0b      	ldr	r5, [pc, #44]	; (8009d08 <__libc_init_array+0x40>)
 8009cda:	4c0c      	ldr	r4, [pc, #48]	; (8009d0c <__libc_init_array+0x44>)
 8009cdc:	f000 ffae 	bl	800ac3c <_init>
 8009ce0:	1b64      	subs	r4, r4, r5
 8009ce2:	10a4      	asrs	r4, r4, #2
 8009ce4:	2600      	movs	r6, #0
 8009ce6:	42a6      	cmp	r6, r4
 8009ce8:	d105      	bne.n	8009cf6 <__libc_init_array+0x2e>
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf0:	4798      	blx	r3
 8009cf2:	3601      	adds	r6, #1
 8009cf4:	e7ee      	b.n	8009cd4 <__libc_init_array+0xc>
 8009cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfa:	4798      	blx	r3
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	e7f2      	b.n	8009ce6 <__libc_init_array+0x1e>
 8009d00:	0800ae70 	.word	0x0800ae70
 8009d04:	0800ae70 	.word	0x0800ae70
 8009d08:	0800ae70 	.word	0x0800ae70
 8009d0c:	0800ae74 	.word	0x0800ae74

08009d10 <memset>:
 8009d10:	4402      	add	r2, r0
 8009d12:	4603      	mov	r3, r0
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d100      	bne.n	8009d1a <memset+0xa>
 8009d18:	4770      	bx	lr
 8009d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1e:	e7f9      	b.n	8009d14 <memset+0x4>

08009d20 <iprintf>:
 8009d20:	b40f      	push	{r0, r1, r2, r3}
 8009d22:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <iprintf+0x2c>)
 8009d24:	b513      	push	{r0, r1, r4, lr}
 8009d26:	681c      	ldr	r4, [r3, #0]
 8009d28:	b124      	cbz	r4, 8009d34 <iprintf+0x14>
 8009d2a:	69a3      	ldr	r3, [r4, #24]
 8009d2c:	b913      	cbnz	r3, 8009d34 <iprintf+0x14>
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 f866 	bl	8009e00 <__sinit>
 8009d34:	ab05      	add	r3, sp, #20
 8009d36:	9a04      	ldr	r2, [sp, #16]
 8009d38:	68a1      	ldr	r1, [r4, #8]
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 f9bd 	bl	800a0bc <_vfiprintf_r>
 8009d42:	b002      	add	sp, #8
 8009d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d48:	b004      	add	sp, #16
 8009d4a:	4770      	bx	lr
 8009d4c:	20000148 	.word	0x20000148

08009d50 <std>:
 8009d50:	2300      	movs	r3, #0
 8009d52:	b510      	push	{r4, lr}
 8009d54:	4604      	mov	r4, r0
 8009d56:	e9c0 3300 	strd	r3, r3, [r0]
 8009d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d5e:	6083      	str	r3, [r0, #8]
 8009d60:	8181      	strh	r1, [r0, #12]
 8009d62:	6643      	str	r3, [r0, #100]	; 0x64
 8009d64:	81c2      	strh	r2, [r0, #14]
 8009d66:	6183      	str	r3, [r0, #24]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	2208      	movs	r2, #8
 8009d6c:	305c      	adds	r0, #92	; 0x5c
 8009d6e:	f7ff ffcf 	bl	8009d10 <memset>
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <std+0x38>)
 8009d74:	6263      	str	r3, [r4, #36]	; 0x24
 8009d76:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <std+0x3c>)
 8009d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d7a:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <std+0x40>)
 8009d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <std+0x44>)
 8009d80:	6224      	str	r4, [r4, #32]
 8009d82:	6323      	str	r3, [r4, #48]	; 0x30
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	bf00      	nop
 8009d88:	0800a665 	.word	0x0800a665
 8009d8c:	0800a687 	.word	0x0800a687
 8009d90:	0800a6bf 	.word	0x0800a6bf
 8009d94:	0800a6e3 	.word	0x0800a6e3

08009d98 <_cleanup_r>:
 8009d98:	4901      	ldr	r1, [pc, #4]	; (8009da0 <_cleanup_r+0x8>)
 8009d9a:	f000 b8af 	b.w	8009efc <_fwalk_reent>
 8009d9e:	bf00      	nop
 8009da0:	0800a9bd 	.word	0x0800a9bd

08009da4 <__sfmoreglue>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	2268      	movs	r2, #104	; 0x68
 8009da8:	1e4d      	subs	r5, r1, #1
 8009daa:	4355      	muls	r5, r2
 8009dac:	460e      	mov	r6, r1
 8009dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009db2:	f000 f8e5 	bl	8009f80 <_malloc_r>
 8009db6:	4604      	mov	r4, r0
 8009db8:	b140      	cbz	r0, 8009dcc <__sfmoreglue+0x28>
 8009dba:	2100      	movs	r1, #0
 8009dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8009dc0:	300c      	adds	r0, #12
 8009dc2:	60a0      	str	r0, [r4, #8]
 8009dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dc8:	f7ff ffa2 	bl	8009d10 <memset>
 8009dcc:	4620      	mov	r0, r4
 8009dce:	bd70      	pop	{r4, r5, r6, pc}

08009dd0 <__sfp_lock_acquire>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__sfp_lock_acquire+0x8>)
 8009dd2:	f000 b8b3 	b.w	8009f3c <__retarget_lock_acquire_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	20001c2d 	.word	0x20001c2d

08009ddc <__sfp_lock_release>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__sfp_lock_release+0x8>)
 8009dde:	f000 b8ae 	b.w	8009f3e <__retarget_lock_release_recursive>
 8009de2:	bf00      	nop
 8009de4:	20001c2d 	.word	0x20001c2d

08009de8 <__sinit_lock_acquire>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__sinit_lock_acquire+0x8>)
 8009dea:	f000 b8a7 	b.w	8009f3c <__retarget_lock_acquire_recursive>
 8009dee:	bf00      	nop
 8009df0:	20001c2e 	.word	0x20001c2e

08009df4 <__sinit_lock_release>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sinit_lock_release+0x8>)
 8009df6:	f000 b8a2 	b.w	8009f3e <__retarget_lock_release_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	20001c2e 	.word	0x20001c2e

08009e00 <__sinit>:
 8009e00:	b510      	push	{r4, lr}
 8009e02:	4604      	mov	r4, r0
 8009e04:	f7ff fff0 	bl	8009de8 <__sinit_lock_acquire>
 8009e08:	69a3      	ldr	r3, [r4, #24]
 8009e0a:	b11b      	cbz	r3, 8009e14 <__sinit+0x14>
 8009e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e10:	f7ff bff0 	b.w	8009df4 <__sinit_lock_release>
 8009e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e18:	6523      	str	r3, [r4, #80]	; 0x50
 8009e1a:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <__sinit+0x68>)
 8009e1c:	4a13      	ldr	r2, [pc, #76]	; (8009e6c <__sinit+0x6c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e22:	42a3      	cmp	r3, r4
 8009e24:	bf04      	itt	eq
 8009e26:	2301      	moveq	r3, #1
 8009e28:	61a3      	streq	r3, [r4, #24]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 f820 	bl	8009e70 <__sfp>
 8009e30:	6060      	str	r0, [r4, #4]
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 f81c 	bl	8009e70 <__sfp>
 8009e38:	60a0      	str	r0, [r4, #8]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 f818 	bl	8009e70 <__sfp>
 8009e40:	2200      	movs	r2, #0
 8009e42:	60e0      	str	r0, [r4, #12]
 8009e44:	2104      	movs	r1, #4
 8009e46:	6860      	ldr	r0, [r4, #4]
 8009e48:	f7ff ff82 	bl	8009d50 <std>
 8009e4c:	68a0      	ldr	r0, [r4, #8]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	2109      	movs	r1, #9
 8009e52:	f7ff ff7d 	bl	8009d50 <std>
 8009e56:	68e0      	ldr	r0, [r4, #12]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	2112      	movs	r1, #18
 8009e5c:	f7ff ff78 	bl	8009d50 <std>
 8009e60:	2301      	movs	r3, #1
 8009e62:	61a3      	str	r3, [r4, #24]
 8009e64:	e7d2      	b.n	8009e0c <__sinit+0xc>
 8009e66:	bf00      	nop
 8009e68:	0800add8 	.word	0x0800add8
 8009e6c:	08009d99 	.word	0x08009d99

08009e70 <__sfp>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	4607      	mov	r7, r0
 8009e74:	f7ff ffac 	bl	8009dd0 <__sfp_lock_acquire>
 8009e78:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <__sfp+0x84>)
 8009e7a:	681e      	ldr	r6, [r3, #0]
 8009e7c:	69b3      	ldr	r3, [r6, #24]
 8009e7e:	b913      	cbnz	r3, 8009e86 <__sfp+0x16>
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7ff ffbd 	bl	8009e00 <__sinit>
 8009e86:	3648      	adds	r6, #72	; 0x48
 8009e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	d503      	bpl.n	8009e98 <__sfp+0x28>
 8009e90:	6833      	ldr	r3, [r6, #0]
 8009e92:	b30b      	cbz	r3, 8009ed8 <__sfp+0x68>
 8009e94:	6836      	ldr	r6, [r6, #0]
 8009e96:	e7f7      	b.n	8009e88 <__sfp+0x18>
 8009e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e9c:	b9d5      	cbnz	r5, 8009ed4 <__sfp+0x64>
 8009e9e:	4b16      	ldr	r3, [pc, #88]	; (8009ef8 <__sfp+0x88>)
 8009ea0:	60e3      	str	r3, [r4, #12]
 8009ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ea8:	f000 f847 	bl	8009f3a <__retarget_lock_init_recursive>
 8009eac:	f7ff ff96 	bl	8009ddc <__sfp_lock_release>
 8009eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009eb8:	6025      	str	r5, [r4, #0]
 8009eba:	61a5      	str	r5, [r4, #24]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ec4:	f7ff ff24 	bl	8009d10 <memset>
 8009ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed4:	3468      	adds	r4, #104	; 0x68
 8009ed6:	e7d9      	b.n	8009e8c <__sfp+0x1c>
 8009ed8:	2104      	movs	r1, #4
 8009eda:	4638      	mov	r0, r7
 8009edc:	f7ff ff62 	bl	8009da4 <__sfmoreglue>
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	6030      	str	r0, [r6, #0]
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d1d5      	bne.n	8009e94 <__sfp+0x24>
 8009ee8:	f7ff ff78 	bl	8009ddc <__sfp_lock_release>
 8009eec:	230c      	movs	r3, #12
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	e7ee      	b.n	8009ed0 <__sfp+0x60>
 8009ef2:	bf00      	nop
 8009ef4:	0800add8 	.word	0x0800add8
 8009ef8:	ffff0001 	.word	0xffff0001

08009efc <_fwalk_reent>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	4606      	mov	r6, r0
 8009f02:	4688      	mov	r8, r1
 8009f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f08:	2700      	movs	r7, #0
 8009f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f12:	d505      	bpl.n	8009f20 <_fwalk_reent+0x24>
 8009f14:	6824      	ldr	r4, [r4, #0]
 8009f16:	2c00      	cmp	r4, #0
 8009f18:	d1f7      	bne.n	8009f0a <_fwalk_reent+0xe>
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f20:	89ab      	ldrh	r3, [r5, #12]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d907      	bls.n	8009f36 <_fwalk_reent+0x3a>
 8009f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	d003      	beq.n	8009f36 <_fwalk_reent+0x3a>
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4630      	mov	r0, r6
 8009f32:	47c0      	blx	r8
 8009f34:	4307      	orrs	r7, r0
 8009f36:	3568      	adds	r5, #104	; 0x68
 8009f38:	e7e9      	b.n	8009f0e <_fwalk_reent+0x12>

08009f3a <__retarget_lock_init_recursive>:
 8009f3a:	4770      	bx	lr

08009f3c <__retarget_lock_acquire_recursive>:
 8009f3c:	4770      	bx	lr

08009f3e <__retarget_lock_release_recursive>:
 8009f3e:	4770      	bx	lr

08009f40 <sbrk_aligned>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4e0e      	ldr	r6, [pc, #56]	; (8009f7c <sbrk_aligned+0x3c>)
 8009f44:	460c      	mov	r4, r1
 8009f46:	6831      	ldr	r1, [r6, #0]
 8009f48:	4605      	mov	r5, r0
 8009f4a:	b911      	cbnz	r1, 8009f52 <sbrk_aligned+0x12>
 8009f4c:	f000 fb7a 	bl	800a644 <_sbrk_r>
 8009f50:	6030      	str	r0, [r6, #0]
 8009f52:	4621      	mov	r1, r4
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 fb75 	bl	800a644 <_sbrk_r>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d00a      	beq.n	8009f74 <sbrk_aligned+0x34>
 8009f5e:	1cc4      	adds	r4, r0, #3
 8009f60:	f024 0403 	bic.w	r4, r4, #3
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d007      	beq.n	8009f78 <sbrk_aligned+0x38>
 8009f68:	1a21      	subs	r1, r4, r0
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 fb6a 	bl	800a644 <_sbrk_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d101      	bne.n	8009f78 <sbrk_aligned+0x38>
 8009f74:	f04f 34ff 	mov.w	r4, #4294967295
 8009f78:	4620      	mov	r0, r4
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	20001c34 	.word	0x20001c34

08009f80 <_malloc_r>:
 8009f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	1ccd      	adds	r5, r1, #3
 8009f86:	f025 0503 	bic.w	r5, r5, #3
 8009f8a:	3508      	adds	r5, #8
 8009f8c:	2d0c      	cmp	r5, #12
 8009f8e:	bf38      	it	cc
 8009f90:	250c      	movcc	r5, #12
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	4607      	mov	r7, r0
 8009f96:	db01      	blt.n	8009f9c <_malloc_r+0x1c>
 8009f98:	42a9      	cmp	r1, r5
 8009f9a:	d905      	bls.n	8009fa8 <_malloc_r+0x28>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa8:	4e2e      	ldr	r6, [pc, #184]	; (800a064 <_malloc_r+0xe4>)
 8009faa:	f000 fdbb 	bl	800ab24 <__malloc_lock>
 8009fae:	6833      	ldr	r3, [r6, #0]
 8009fb0:	461c      	mov	r4, r3
 8009fb2:	bb34      	cbnz	r4, 800a002 <_malloc_r+0x82>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7ff ffc2 	bl	8009f40 <sbrk_aligned>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	d14d      	bne.n	800a05e <_malloc_r+0xde>
 8009fc2:	6834      	ldr	r4, [r6, #0]
 8009fc4:	4626      	mov	r6, r4
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	d140      	bne.n	800a04c <_malloc_r+0xcc>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4638      	mov	r0, r7
 8009fd0:	eb04 0803 	add.w	r8, r4, r3
 8009fd4:	f000 fb36 	bl	800a644 <_sbrk_r>
 8009fd8:	4580      	cmp	r8, r0
 8009fda:	d13a      	bne.n	800a052 <_malloc_r+0xd2>
 8009fdc:	6821      	ldr	r1, [r4, #0]
 8009fde:	3503      	adds	r5, #3
 8009fe0:	1a6d      	subs	r5, r5, r1
 8009fe2:	f025 0503 	bic.w	r5, r5, #3
 8009fe6:	3508      	adds	r5, #8
 8009fe8:	2d0c      	cmp	r5, #12
 8009fea:	bf38      	it	cc
 8009fec:	250c      	movcc	r5, #12
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f7ff ffa5 	bl	8009f40 <sbrk_aligned>
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d02b      	beq.n	800a052 <_malloc_r+0xd2>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	442b      	add	r3, r5
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	e00e      	b.n	800a020 <_malloc_r+0xa0>
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	1b52      	subs	r2, r2, r5
 800a006:	d41e      	bmi.n	800a046 <_malloc_r+0xc6>
 800a008:	2a0b      	cmp	r2, #11
 800a00a:	d916      	bls.n	800a03a <_malloc_r+0xba>
 800a00c:	1961      	adds	r1, r4, r5
 800a00e:	42a3      	cmp	r3, r4
 800a010:	6025      	str	r5, [r4, #0]
 800a012:	bf18      	it	ne
 800a014:	6059      	strne	r1, [r3, #4]
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	bf08      	it	eq
 800a01a:	6031      	streq	r1, [r6, #0]
 800a01c:	5162      	str	r2, [r4, r5]
 800a01e:	604b      	str	r3, [r1, #4]
 800a020:	4638      	mov	r0, r7
 800a022:	f104 060b 	add.w	r6, r4, #11
 800a026:	f000 fd83 	bl	800ab30 <__malloc_unlock>
 800a02a:	f026 0607 	bic.w	r6, r6, #7
 800a02e:	1d23      	adds	r3, r4, #4
 800a030:	1af2      	subs	r2, r6, r3
 800a032:	d0b6      	beq.n	8009fa2 <_malloc_r+0x22>
 800a034:	1b9b      	subs	r3, r3, r6
 800a036:	50a3      	str	r3, [r4, r2]
 800a038:	e7b3      	b.n	8009fa2 <_malloc_r+0x22>
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	bf0c      	ite	eq
 800a040:	6032      	streq	r2, [r6, #0]
 800a042:	605a      	strne	r2, [r3, #4]
 800a044:	e7ec      	b.n	800a020 <_malloc_r+0xa0>
 800a046:	4623      	mov	r3, r4
 800a048:	6864      	ldr	r4, [r4, #4]
 800a04a:	e7b2      	b.n	8009fb2 <_malloc_r+0x32>
 800a04c:	4634      	mov	r4, r6
 800a04e:	6876      	ldr	r6, [r6, #4]
 800a050:	e7b9      	b.n	8009fc6 <_malloc_r+0x46>
 800a052:	230c      	movs	r3, #12
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	4638      	mov	r0, r7
 800a058:	f000 fd6a 	bl	800ab30 <__malloc_unlock>
 800a05c:	e7a1      	b.n	8009fa2 <_malloc_r+0x22>
 800a05e:	6025      	str	r5, [r4, #0]
 800a060:	e7de      	b.n	800a020 <_malloc_r+0xa0>
 800a062:	bf00      	nop
 800a064:	20001c30 	.word	0x20001c30

0800a068 <__sfputc_r>:
 800a068:	6893      	ldr	r3, [r2, #8]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	b410      	push	{r4}
 800a070:	6093      	str	r3, [r2, #8]
 800a072:	da08      	bge.n	800a086 <__sfputc_r+0x1e>
 800a074:	6994      	ldr	r4, [r2, #24]
 800a076:	42a3      	cmp	r3, r4
 800a078:	db01      	blt.n	800a07e <__sfputc_r+0x16>
 800a07a:	290a      	cmp	r1, #10
 800a07c:	d103      	bne.n	800a086 <__sfputc_r+0x1e>
 800a07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a082:	f000 bb33 	b.w	800a6ec <__swbuf_r>
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	1c58      	adds	r0, r3, #1
 800a08a:	6010      	str	r0, [r2, #0]
 800a08c:	7019      	strb	r1, [r3, #0]
 800a08e:	4608      	mov	r0, r1
 800a090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <__sfputs_r>:
 800a096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a098:	4606      	mov	r6, r0
 800a09a:	460f      	mov	r7, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	18d5      	adds	r5, r2, r3
 800a0a0:	42ac      	cmp	r4, r5
 800a0a2:	d101      	bne.n	800a0a8 <__sfputs_r+0x12>
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	e007      	b.n	800a0b8 <__sfputs_r+0x22>
 800a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ac:	463a      	mov	r2, r7
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7ff ffda 	bl	800a068 <__sfputc_r>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d1f3      	bne.n	800a0a0 <__sfputs_r+0xa>
 800a0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0bc <_vfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	b09d      	sub	sp, #116	; 0x74
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	4698      	mov	r8, r3
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	b118      	cbz	r0, 800a0d4 <_vfiprintf_r+0x18>
 800a0cc:	6983      	ldr	r3, [r0, #24]
 800a0ce:	b90b      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x18>
 800a0d0:	f7ff fe96 	bl	8009e00 <__sinit>
 800a0d4:	4b89      	ldr	r3, [pc, #548]	; (800a2fc <_vfiprintf_r+0x240>)
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	d11b      	bne.n	800a112 <_vfiprintf_r+0x56>
 800a0da:	6875      	ldr	r5, [r6, #4]
 800a0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0de:	07d9      	lsls	r1, r3, #31
 800a0e0:	d405      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	059a      	lsls	r2, r3, #22
 800a0e6:	d402      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ea:	f7ff ff27 	bl	8009f3c <__retarget_lock_acquire_recursive>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	071b      	lsls	r3, r3, #28
 800a0f2:	d501      	bpl.n	800a0f8 <_vfiprintf_r+0x3c>
 800a0f4:	692b      	ldr	r3, [r5, #16]
 800a0f6:	b9eb      	cbnz	r3, 800a134 <_vfiprintf_r+0x78>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f000 fb5a 	bl	800a7b4 <__swsetup_r>
 800a100:	b1c0      	cbz	r0, 800a134 <_vfiprintf_r+0x78>
 800a102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a104:	07dc      	lsls	r4, r3, #31
 800a106:	d50e      	bpl.n	800a126 <_vfiprintf_r+0x6a>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b01d      	add	sp, #116	; 0x74
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	4b7b      	ldr	r3, [pc, #492]	; (800a300 <_vfiprintf_r+0x244>)
 800a114:	429d      	cmp	r5, r3
 800a116:	d101      	bne.n	800a11c <_vfiprintf_r+0x60>
 800a118:	68b5      	ldr	r5, [r6, #8]
 800a11a:	e7df      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a11c:	4b79      	ldr	r3, [pc, #484]	; (800a304 <_vfiprintf_r+0x248>)
 800a11e:	429d      	cmp	r5, r3
 800a120:	bf08      	it	eq
 800a122:	68f5      	ldreq	r5, [r6, #12]
 800a124:	e7da      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	0598      	lsls	r0, r3, #22
 800a12a:	d4ed      	bmi.n	800a108 <_vfiprintf_r+0x4c>
 800a12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12e:	f7ff ff06 	bl	8009f3e <__retarget_lock_release_recursive>
 800a132:	e7e9      	b.n	800a108 <_vfiprintf_r+0x4c>
 800a134:	2300      	movs	r3, #0
 800a136:	9309      	str	r3, [sp, #36]	; 0x24
 800a138:	2320      	movs	r3, #32
 800a13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a142:	2330      	movs	r3, #48	; 0x30
 800a144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a308 <_vfiprintf_r+0x24c>
 800a148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a14c:	f04f 0901 	mov.w	r9, #1
 800a150:	4623      	mov	r3, r4
 800a152:	469a      	mov	sl, r3
 800a154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a158:	b10a      	cbz	r2, 800a15e <_vfiprintf_r+0xa2>
 800a15a:	2a25      	cmp	r2, #37	; 0x25
 800a15c:	d1f9      	bne.n	800a152 <_vfiprintf_r+0x96>
 800a15e:	ebba 0b04 	subs.w	fp, sl, r4
 800a162:	d00b      	beq.n	800a17c <_vfiprintf_r+0xc0>
 800a164:	465b      	mov	r3, fp
 800a166:	4622      	mov	r2, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ff93 	bl	800a096 <__sfputs_r>
 800a170:	3001      	adds	r0, #1
 800a172:	f000 80aa 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a178:	445a      	add	r2, fp
 800a17a:	9209      	str	r2, [sp, #36]	; 0x24
 800a17c:	f89a 3000 	ldrb.w	r3, [sl]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80a2 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a186:	2300      	movs	r3, #0
 800a188:	f04f 32ff 	mov.w	r2, #4294967295
 800a18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a190:	f10a 0a01 	add.w	sl, sl, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a19c:	931a      	str	r3, [sp, #104]	; 0x68
 800a19e:	4654      	mov	r4, sl
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a6:	4858      	ldr	r0, [pc, #352]	; (800a308 <_vfiprintf_r+0x24c>)
 800a1a8:	f7f5 ffea 	bl	8000180 <memchr>
 800a1ac:	9a04      	ldr	r2, [sp, #16]
 800a1ae:	b9d8      	cbnz	r0, 800a1e8 <_vfiprintf_r+0x12c>
 800a1b0:	06d1      	lsls	r1, r2, #27
 800a1b2:	bf44      	itt	mi
 800a1b4:	2320      	movmi	r3, #32
 800a1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ba:	0713      	lsls	r3, r2, #28
 800a1bc:	bf44      	itt	mi
 800a1be:	232b      	movmi	r3, #43	; 0x2b
 800a1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ca:	d015      	beq.n	800a1f8 <_vfiprintf_r+0x13c>
 800a1cc:	9a07      	ldr	r2, [sp, #28]
 800a1ce:	4654      	mov	r4, sl
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	f04f 0c0a 	mov.w	ip, #10
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1dc:	3b30      	subs	r3, #48	; 0x30
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d94e      	bls.n	800a280 <_vfiprintf_r+0x1c4>
 800a1e2:	b1b0      	cbz	r0, 800a212 <_vfiprintf_r+0x156>
 800a1e4:	9207      	str	r2, [sp, #28]
 800a1e6:	e014      	b.n	800a212 <_vfiprintf_r+0x156>
 800a1e8:	eba0 0308 	sub.w	r3, r0, r8
 800a1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	46a2      	mov	sl, r4
 800a1f6:	e7d2      	b.n	800a19e <_vfiprintf_r+0xe2>
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	1d19      	adds	r1, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9103      	str	r1, [sp, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfbb      	ittet	lt
 800a204:	425b      	neglt	r3, r3
 800a206:	f042 0202 	orrlt.w	r2, r2, #2
 800a20a:	9307      	strge	r3, [sp, #28]
 800a20c:	9307      	strlt	r3, [sp, #28]
 800a20e:	bfb8      	it	lt
 800a210:	9204      	strlt	r2, [sp, #16]
 800a212:	7823      	ldrb	r3, [r4, #0]
 800a214:	2b2e      	cmp	r3, #46	; 0x2e
 800a216:	d10c      	bne.n	800a232 <_vfiprintf_r+0x176>
 800a218:	7863      	ldrb	r3, [r4, #1]
 800a21a:	2b2a      	cmp	r3, #42	; 0x2a
 800a21c:	d135      	bne.n	800a28a <_vfiprintf_r+0x1ce>
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	1d1a      	adds	r2, r3, #4
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	9203      	str	r2, [sp, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	bfb8      	it	lt
 800a22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a22e:	3402      	adds	r4, #2
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a318 <_vfiprintf_r+0x25c>
 800a236:	7821      	ldrb	r1, [r4, #0]
 800a238:	2203      	movs	r2, #3
 800a23a:	4650      	mov	r0, sl
 800a23c:	f7f5 ffa0 	bl	8000180 <memchr>
 800a240:	b140      	cbz	r0, 800a254 <_vfiprintf_r+0x198>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	eba0 000a 	sub.w	r0, r0, sl
 800a248:	fa03 f000 	lsl.w	r0, r3, r0
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	4303      	orrs	r3, r0
 800a250:	3401      	adds	r4, #1
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	482c      	ldr	r0, [pc, #176]	; (800a30c <_vfiprintf_r+0x250>)
 800a25a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25e:	2206      	movs	r2, #6
 800a260:	f7f5 ff8e 	bl	8000180 <memchr>
 800a264:	2800      	cmp	r0, #0
 800a266:	d03f      	beq.n	800a2e8 <_vfiprintf_r+0x22c>
 800a268:	4b29      	ldr	r3, [pc, #164]	; (800a310 <_vfiprintf_r+0x254>)
 800a26a:	bb1b      	cbnz	r3, 800a2b4 <_vfiprintf_r+0x1f8>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	3307      	adds	r3, #7
 800a270:	f023 0307 	bic.w	r3, r3, #7
 800a274:	3308      	adds	r3, #8
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	443b      	add	r3, r7
 800a27c:	9309      	str	r3, [sp, #36]	; 0x24
 800a27e:	e767      	b.n	800a150 <_vfiprintf_r+0x94>
 800a280:	fb0c 3202 	mla	r2, ip, r2, r3
 800a284:	460c      	mov	r4, r1
 800a286:	2001      	movs	r0, #1
 800a288:	e7a5      	b.n	800a1d6 <_vfiprintf_r+0x11a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	3401      	adds	r4, #1
 800a28e:	9305      	str	r3, [sp, #20]
 800a290:	4619      	mov	r1, r3
 800a292:	f04f 0c0a 	mov.w	ip, #10
 800a296:	4620      	mov	r0, r4
 800a298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29c:	3a30      	subs	r2, #48	; 0x30
 800a29e:	2a09      	cmp	r2, #9
 800a2a0:	d903      	bls.n	800a2aa <_vfiprintf_r+0x1ee>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0c5      	beq.n	800a232 <_vfiprintf_r+0x176>
 800a2a6:	9105      	str	r1, [sp, #20]
 800a2a8:	e7c3      	b.n	800a232 <_vfiprintf_r+0x176>
 800a2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e7f0      	b.n	800a296 <_vfiprintf_r+0x1da>
 800a2b4:	ab03      	add	r3, sp, #12
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	4b16      	ldr	r3, [pc, #88]	; (800a314 <_vfiprintf_r+0x258>)
 800a2bc:	a904      	add	r1, sp, #16
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f3af 8000 	nop.w
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	1c78      	adds	r0, r7, #1
 800a2c8:	d1d6      	bne.n	800a278 <_vfiprintf_r+0x1bc>
 800a2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2cc:	07d9      	lsls	r1, r3, #31
 800a2ce:	d405      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d0:	89ab      	ldrh	r3, [r5, #12]
 800a2d2:	059a      	lsls	r2, r3, #22
 800a2d4:	d402      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d8:	f7ff fe31 	bl	8009f3e <__retarget_lock_release_recursive>
 800a2dc:	89ab      	ldrh	r3, [r5, #12]
 800a2de:	065b      	lsls	r3, r3, #25
 800a2e0:	f53f af12 	bmi.w	800a108 <_vfiprintf_r+0x4c>
 800a2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e6:	e711      	b.n	800a10c <_vfiprintf_r+0x50>
 800a2e8:	ab03      	add	r3, sp, #12
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <_vfiprintf_r+0x258>)
 800a2f0:	a904      	add	r1, sp, #16
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f000 f880 	bl	800a3f8 <_printf_i>
 800a2f8:	e7e4      	b.n	800a2c4 <_vfiprintf_r+0x208>
 800a2fa:	bf00      	nop
 800a2fc:	0800adfc 	.word	0x0800adfc
 800a300:	0800ae1c 	.word	0x0800ae1c
 800a304:	0800addc 	.word	0x0800addc
 800a308:	0800ae3c 	.word	0x0800ae3c
 800a30c:	0800ae46 	.word	0x0800ae46
 800a310:	00000000 	.word	0x00000000
 800a314:	0800a097 	.word	0x0800a097
 800a318:	0800ae42 	.word	0x0800ae42

0800a31c <_printf_common>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	4616      	mov	r6, r2
 800a322:	4699      	mov	r9, r3
 800a324:	688a      	ldr	r2, [r1, #8]
 800a326:	690b      	ldr	r3, [r1, #16]
 800a328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	bfb8      	it	lt
 800a330:	4613      	movlt	r3, r2
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a338:	4607      	mov	r7, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	b10a      	cbz	r2, 800a342 <_printf_common+0x26>
 800a33e:	3301      	adds	r3, #1
 800a340:	6033      	str	r3, [r6, #0]
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	0699      	lsls	r1, r3, #26
 800a346:	bf42      	ittt	mi
 800a348:	6833      	ldrmi	r3, [r6, #0]
 800a34a:	3302      	addmi	r3, #2
 800a34c:	6033      	strmi	r3, [r6, #0]
 800a34e:	6825      	ldr	r5, [r4, #0]
 800a350:	f015 0506 	ands.w	r5, r5, #6
 800a354:	d106      	bne.n	800a364 <_printf_common+0x48>
 800a356:	f104 0a19 	add.w	sl, r4, #25
 800a35a:	68e3      	ldr	r3, [r4, #12]
 800a35c:	6832      	ldr	r2, [r6, #0]
 800a35e:	1a9b      	subs	r3, r3, r2
 800a360:	42ab      	cmp	r3, r5
 800a362:	dc26      	bgt.n	800a3b2 <_printf_common+0x96>
 800a364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a368:	1e13      	subs	r3, r2, #0
 800a36a:	6822      	ldr	r2, [r4, #0]
 800a36c:	bf18      	it	ne
 800a36e:	2301      	movne	r3, #1
 800a370:	0692      	lsls	r2, r2, #26
 800a372:	d42b      	bmi.n	800a3cc <_printf_common+0xb0>
 800a374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a378:	4649      	mov	r1, r9
 800a37a:	4638      	mov	r0, r7
 800a37c:	47c0      	blx	r8
 800a37e:	3001      	adds	r0, #1
 800a380:	d01e      	beq.n	800a3c0 <_printf_common+0xa4>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	68e5      	ldr	r5, [r4, #12]
 800a386:	6832      	ldr	r2, [r6, #0]
 800a388:	f003 0306 	and.w	r3, r3, #6
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	bf08      	it	eq
 800a390:	1aad      	subeq	r5, r5, r2
 800a392:	68a3      	ldr	r3, [r4, #8]
 800a394:	6922      	ldr	r2, [r4, #16]
 800a396:	bf0c      	ite	eq
 800a398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a39c:	2500      	movne	r5, #0
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	bfc4      	itt	gt
 800a3a2:	1a9b      	subgt	r3, r3, r2
 800a3a4:	18ed      	addgt	r5, r5, r3
 800a3a6:	2600      	movs	r6, #0
 800a3a8:	341a      	adds	r4, #26
 800a3aa:	42b5      	cmp	r5, r6
 800a3ac:	d11a      	bne.n	800a3e4 <_printf_common+0xc8>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e008      	b.n	800a3c4 <_printf_common+0xa8>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	47c0      	blx	r8
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d103      	bne.n	800a3c8 <_printf_common+0xac>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	e7c6      	b.n	800a35a <_printf_common+0x3e>
 800a3cc:	18e1      	adds	r1, r4, r3
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	2030      	movs	r0, #48	; 0x30
 800a3d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3d6:	4422      	add	r2, r4
 800a3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	e7c7      	b.n	800a374 <_printf_common+0x58>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c0      	blx	r8
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d0e6      	beq.n	800a3c0 <_printf_common+0xa4>
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	e7d9      	b.n	800a3aa <_printf_common+0x8e>
	...

0800a3f8 <_printf_i>:
 800a3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fc:	7e0f      	ldrb	r7, [r1, #24]
 800a3fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a400:	2f78      	cmp	r7, #120	; 0x78
 800a402:	4691      	mov	r9, r2
 800a404:	4680      	mov	r8, r0
 800a406:	460c      	mov	r4, r1
 800a408:	469a      	mov	sl, r3
 800a40a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a40e:	d807      	bhi.n	800a420 <_printf_i+0x28>
 800a410:	2f62      	cmp	r7, #98	; 0x62
 800a412:	d80a      	bhi.n	800a42a <_printf_i+0x32>
 800a414:	2f00      	cmp	r7, #0
 800a416:	f000 80d8 	beq.w	800a5ca <_printf_i+0x1d2>
 800a41a:	2f58      	cmp	r7, #88	; 0x58
 800a41c:	f000 80a3 	beq.w	800a566 <_printf_i+0x16e>
 800a420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a428:	e03a      	b.n	800a4a0 <_printf_i+0xa8>
 800a42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a42e:	2b15      	cmp	r3, #21
 800a430:	d8f6      	bhi.n	800a420 <_printf_i+0x28>
 800a432:	a101      	add	r1, pc, #4	; (adr r1, 800a438 <_printf_i+0x40>)
 800a434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a438:	0800a491 	.word	0x0800a491
 800a43c:	0800a4a5 	.word	0x0800a4a5
 800a440:	0800a421 	.word	0x0800a421
 800a444:	0800a421 	.word	0x0800a421
 800a448:	0800a421 	.word	0x0800a421
 800a44c:	0800a421 	.word	0x0800a421
 800a450:	0800a4a5 	.word	0x0800a4a5
 800a454:	0800a421 	.word	0x0800a421
 800a458:	0800a421 	.word	0x0800a421
 800a45c:	0800a421 	.word	0x0800a421
 800a460:	0800a421 	.word	0x0800a421
 800a464:	0800a5b1 	.word	0x0800a5b1
 800a468:	0800a4d5 	.word	0x0800a4d5
 800a46c:	0800a593 	.word	0x0800a593
 800a470:	0800a421 	.word	0x0800a421
 800a474:	0800a421 	.word	0x0800a421
 800a478:	0800a5d3 	.word	0x0800a5d3
 800a47c:	0800a421 	.word	0x0800a421
 800a480:	0800a4d5 	.word	0x0800a4d5
 800a484:	0800a421 	.word	0x0800a421
 800a488:	0800a421 	.word	0x0800a421
 800a48c:	0800a59b 	.word	0x0800a59b
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	1d1a      	adds	r2, r3, #4
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	602a      	str	r2, [r5, #0]
 800a498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0a3      	b.n	800a5ec <_printf_i+0x1f4>
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	6829      	ldr	r1, [r5, #0]
 800a4a8:	0606      	lsls	r6, r0, #24
 800a4aa:	f101 0304 	add.w	r3, r1, #4
 800a4ae:	d50a      	bpl.n	800a4c6 <_printf_i+0xce>
 800a4b0:	680e      	ldr	r6, [r1, #0]
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	2e00      	cmp	r6, #0
 800a4b6:	da03      	bge.n	800a4c0 <_printf_i+0xc8>
 800a4b8:	232d      	movs	r3, #45	; 0x2d
 800a4ba:	4276      	negs	r6, r6
 800a4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c0:	485e      	ldr	r0, [pc, #376]	; (800a63c <_printf_i+0x244>)
 800a4c2:	230a      	movs	r3, #10
 800a4c4:	e019      	b.n	800a4fa <_printf_i+0x102>
 800a4c6:	680e      	ldr	r6, [r1, #0]
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4ce:	bf18      	it	ne
 800a4d0:	b236      	sxthne	r6, r6
 800a4d2:	e7ef      	b.n	800a4b4 <_printf_i+0xbc>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	6820      	ldr	r0, [r4, #0]
 800a4d8:	1d19      	adds	r1, r3, #4
 800a4da:	6029      	str	r1, [r5, #0]
 800a4dc:	0601      	lsls	r1, r0, #24
 800a4de:	d501      	bpl.n	800a4e4 <_printf_i+0xec>
 800a4e0:	681e      	ldr	r6, [r3, #0]
 800a4e2:	e002      	b.n	800a4ea <_printf_i+0xf2>
 800a4e4:	0646      	lsls	r6, r0, #25
 800a4e6:	d5fb      	bpl.n	800a4e0 <_printf_i+0xe8>
 800a4e8:	881e      	ldrh	r6, [r3, #0]
 800a4ea:	4854      	ldr	r0, [pc, #336]	; (800a63c <_printf_i+0x244>)
 800a4ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2308      	moveq	r3, #8
 800a4f2:	230a      	movne	r3, #10
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4fa:	6865      	ldr	r5, [r4, #4]
 800a4fc:	60a5      	str	r5, [r4, #8]
 800a4fe:	2d00      	cmp	r5, #0
 800a500:	bfa2      	ittt	ge
 800a502:	6821      	ldrge	r1, [r4, #0]
 800a504:	f021 0104 	bicge.w	r1, r1, #4
 800a508:	6021      	strge	r1, [r4, #0]
 800a50a:	b90e      	cbnz	r6, 800a510 <_printf_i+0x118>
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	d04d      	beq.n	800a5ac <_printf_i+0x1b4>
 800a510:	4615      	mov	r5, r2
 800a512:	fbb6 f1f3 	udiv	r1, r6, r3
 800a516:	fb03 6711 	mls	r7, r3, r1, r6
 800a51a:	5dc7      	ldrb	r7, [r0, r7]
 800a51c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a520:	4637      	mov	r7, r6
 800a522:	42bb      	cmp	r3, r7
 800a524:	460e      	mov	r6, r1
 800a526:	d9f4      	bls.n	800a512 <_printf_i+0x11a>
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d10b      	bne.n	800a544 <_printf_i+0x14c>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	07de      	lsls	r6, r3, #31
 800a530:	d508      	bpl.n	800a544 <_printf_i+0x14c>
 800a532:	6923      	ldr	r3, [r4, #16]
 800a534:	6861      	ldr	r1, [r4, #4]
 800a536:	4299      	cmp	r1, r3
 800a538:	bfde      	ittt	le
 800a53a:	2330      	movle	r3, #48	; 0x30
 800a53c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a540:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a544:	1b52      	subs	r2, r2, r5
 800a546:	6122      	str	r2, [r4, #16]
 800a548:	f8cd a000 	str.w	sl, [sp]
 800a54c:	464b      	mov	r3, r9
 800a54e:	aa03      	add	r2, sp, #12
 800a550:	4621      	mov	r1, r4
 800a552:	4640      	mov	r0, r8
 800a554:	f7ff fee2 	bl	800a31c <_printf_common>
 800a558:	3001      	adds	r0, #1
 800a55a:	d14c      	bne.n	800a5f6 <_printf_i+0x1fe>
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	b004      	add	sp, #16
 800a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a566:	4835      	ldr	r0, [pc, #212]	; (800a63c <_printf_i+0x244>)
 800a568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a56c:	6829      	ldr	r1, [r5, #0]
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	f851 6b04 	ldr.w	r6, [r1], #4
 800a574:	6029      	str	r1, [r5, #0]
 800a576:	061d      	lsls	r5, r3, #24
 800a578:	d514      	bpl.n	800a5a4 <_printf_i+0x1ac>
 800a57a:	07df      	lsls	r7, r3, #31
 800a57c:	bf44      	itt	mi
 800a57e:	f043 0320 	orrmi.w	r3, r3, #32
 800a582:	6023      	strmi	r3, [r4, #0]
 800a584:	b91e      	cbnz	r6, 800a58e <_printf_i+0x196>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	f023 0320 	bic.w	r3, r3, #32
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	2310      	movs	r3, #16
 800a590:	e7b0      	b.n	800a4f4 <_printf_i+0xfc>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	f043 0320 	orr.w	r3, r3, #32
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	2378      	movs	r3, #120	; 0x78
 800a59c:	4828      	ldr	r0, [pc, #160]	; (800a640 <_printf_i+0x248>)
 800a59e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5a2:	e7e3      	b.n	800a56c <_printf_i+0x174>
 800a5a4:	0659      	lsls	r1, r3, #25
 800a5a6:	bf48      	it	mi
 800a5a8:	b2b6      	uxthmi	r6, r6
 800a5aa:	e7e6      	b.n	800a57a <_printf_i+0x182>
 800a5ac:	4615      	mov	r5, r2
 800a5ae:	e7bb      	b.n	800a528 <_printf_i+0x130>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	6826      	ldr	r6, [r4, #0]
 800a5b4:	6961      	ldr	r1, [r4, #20]
 800a5b6:	1d18      	adds	r0, r3, #4
 800a5b8:	6028      	str	r0, [r5, #0]
 800a5ba:	0635      	lsls	r5, r6, #24
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	d501      	bpl.n	800a5c4 <_printf_i+0x1cc>
 800a5c0:	6019      	str	r1, [r3, #0]
 800a5c2:	e002      	b.n	800a5ca <_printf_i+0x1d2>
 800a5c4:	0670      	lsls	r0, r6, #25
 800a5c6:	d5fb      	bpl.n	800a5c0 <_printf_i+0x1c8>
 800a5c8:	8019      	strh	r1, [r3, #0]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	4615      	mov	r5, r2
 800a5d0:	e7ba      	b.n	800a548 <_printf_i+0x150>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	1d1a      	adds	r2, r3, #4
 800a5d6:	602a      	str	r2, [r5, #0]
 800a5d8:	681d      	ldr	r5, [r3, #0]
 800a5da:	6862      	ldr	r2, [r4, #4]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f7f5 fdce 	bl	8000180 <memchr>
 800a5e4:	b108      	cbz	r0, 800a5ea <_printf_i+0x1f2>
 800a5e6:	1b40      	subs	r0, r0, r5
 800a5e8:	6060      	str	r0, [r4, #4]
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	6123      	str	r3, [r4, #16]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f4:	e7a8      	b.n	800a548 <_printf_i+0x150>
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	47d0      	blx	sl
 800a600:	3001      	adds	r0, #1
 800a602:	d0ab      	beq.n	800a55c <_printf_i+0x164>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	079b      	lsls	r3, r3, #30
 800a608:	d413      	bmi.n	800a632 <_printf_i+0x23a>
 800a60a:	68e0      	ldr	r0, [r4, #12]
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	4298      	cmp	r0, r3
 800a610:	bfb8      	it	lt
 800a612:	4618      	movlt	r0, r3
 800a614:	e7a4      	b.n	800a560 <_printf_i+0x168>
 800a616:	2301      	movs	r3, #1
 800a618:	4632      	mov	r2, r6
 800a61a:	4649      	mov	r1, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	47d0      	blx	sl
 800a620:	3001      	adds	r0, #1
 800a622:	d09b      	beq.n	800a55c <_printf_i+0x164>
 800a624:	3501      	adds	r5, #1
 800a626:	68e3      	ldr	r3, [r4, #12]
 800a628:	9903      	ldr	r1, [sp, #12]
 800a62a:	1a5b      	subs	r3, r3, r1
 800a62c:	42ab      	cmp	r3, r5
 800a62e:	dcf2      	bgt.n	800a616 <_printf_i+0x21e>
 800a630:	e7eb      	b.n	800a60a <_printf_i+0x212>
 800a632:	2500      	movs	r5, #0
 800a634:	f104 0619 	add.w	r6, r4, #25
 800a638:	e7f5      	b.n	800a626 <_printf_i+0x22e>
 800a63a:	bf00      	nop
 800a63c:	0800ae4d 	.word	0x0800ae4d
 800a640:	0800ae5e 	.word	0x0800ae5e

0800a644 <_sbrk_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d06      	ldr	r5, [pc, #24]	; (800a660 <_sbrk_r+0x1c>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	f7f6 f976 	bl	8000940 <_sbrk>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_sbrk_r+0x1a>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_sbrk_r+0x1a>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20001c38 	.word	0x20001c38

0800a664 <__sread>:
 800a664:	b510      	push	{r4, lr}
 800a666:	460c      	mov	r4, r1
 800a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a66c:	f000 fab2 	bl	800abd4 <_read_r>
 800a670:	2800      	cmp	r0, #0
 800a672:	bfab      	itete	ge
 800a674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a676:	89a3      	ldrhlt	r3, [r4, #12]
 800a678:	181b      	addge	r3, r3, r0
 800a67a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a67e:	bfac      	ite	ge
 800a680:	6563      	strge	r3, [r4, #84]	; 0x54
 800a682:	81a3      	strhlt	r3, [r4, #12]
 800a684:	bd10      	pop	{r4, pc}

0800a686 <__swrite>:
 800a686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68a:	461f      	mov	r7, r3
 800a68c:	898b      	ldrh	r3, [r1, #12]
 800a68e:	05db      	lsls	r3, r3, #23
 800a690:	4605      	mov	r5, r0
 800a692:	460c      	mov	r4, r1
 800a694:	4616      	mov	r6, r2
 800a696:	d505      	bpl.n	800a6a4 <__swrite+0x1e>
 800a698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69c:	2302      	movs	r3, #2
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f000 f9c8 	bl	800aa34 <_lseek_r>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	463b      	mov	r3, r7
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ba:	f000 b869 	b.w	800a790 <_write_r>

0800a6be <__sseek>:
 800a6be:	b510      	push	{r4, lr}
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c6:	f000 f9b5 	bl	800aa34 <_lseek_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	bf15      	itete	ne
 800a6d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6da:	81a3      	strheq	r3, [r4, #12]
 800a6dc:	bf18      	it	ne
 800a6de:	81a3      	strhne	r3, [r4, #12]
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <__sclose>:
 800a6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e6:	f000 b8d3 	b.w	800a890 <_close_r>
	...

0800a6ec <__swbuf_r>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	b118      	cbz	r0, 800a6fe <__swbuf_r+0x12>
 800a6f6:	6983      	ldr	r3, [r0, #24]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <__swbuf_r+0x12>
 800a6fa:	f7ff fb81 	bl	8009e00 <__sinit>
 800a6fe:	4b21      	ldr	r3, [pc, #132]	; (800a784 <__swbuf_r+0x98>)
 800a700:	429c      	cmp	r4, r3
 800a702:	d12b      	bne.n	800a75c <__swbuf_r+0x70>
 800a704:	686c      	ldr	r4, [r5, #4]
 800a706:	69a3      	ldr	r3, [r4, #24]
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	071a      	lsls	r2, r3, #28
 800a70e:	d52f      	bpl.n	800a770 <__swbuf_r+0x84>
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	b36b      	cbz	r3, 800a770 <__swbuf_r+0x84>
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	6820      	ldr	r0, [r4, #0]
 800a718:	1ac0      	subs	r0, r0, r3
 800a71a:	6963      	ldr	r3, [r4, #20]
 800a71c:	b2f6      	uxtb	r6, r6
 800a71e:	4283      	cmp	r3, r0
 800a720:	4637      	mov	r7, r6
 800a722:	dc04      	bgt.n	800a72e <__swbuf_r+0x42>
 800a724:	4621      	mov	r1, r4
 800a726:	4628      	mov	r0, r5
 800a728:	f000 f948 	bl	800a9bc <_fflush_r>
 800a72c:	bb30      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	3b01      	subs	r3, #1
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	6022      	str	r2, [r4, #0]
 800a73a:	701e      	strb	r6, [r3, #0]
 800a73c:	6963      	ldr	r3, [r4, #20]
 800a73e:	3001      	adds	r0, #1
 800a740:	4283      	cmp	r3, r0
 800a742:	d004      	beq.n	800a74e <__swbuf_r+0x62>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	07db      	lsls	r3, r3, #31
 800a748:	d506      	bpl.n	800a758 <__swbuf_r+0x6c>
 800a74a:	2e0a      	cmp	r6, #10
 800a74c:	d104      	bne.n	800a758 <__swbuf_r+0x6c>
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f000 f933 	bl	800a9bc <_fflush_r>
 800a756:	b988      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a758:	4638      	mov	r0, r7
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <__swbuf_r+0x9c>)
 800a75e:	429c      	cmp	r4, r3
 800a760:	d101      	bne.n	800a766 <__swbuf_r+0x7a>
 800a762:	68ac      	ldr	r4, [r5, #8]
 800a764:	e7cf      	b.n	800a706 <__swbuf_r+0x1a>
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <__swbuf_r+0xa0>)
 800a768:	429c      	cmp	r4, r3
 800a76a:	bf08      	it	eq
 800a76c:	68ec      	ldreq	r4, [r5, #12]
 800a76e:	e7ca      	b.n	800a706 <__swbuf_r+0x1a>
 800a770:	4621      	mov	r1, r4
 800a772:	4628      	mov	r0, r5
 800a774:	f000 f81e 	bl	800a7b4 <__swsetup_r>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d0cb      	beq.n	800a714 <__swbuf_r+0x28>
 800a77c:	f04f 37ff 	mov.w	r7, #4294967295
 800a780:	e7ea      	b.n	800a758 <__swbuf_r+0x6c>
 800a782:	bf00      	nop
 800a784:	0800adfc 	.word	0x0800adfc
 800a788:	0800ae1c 	.word	0x0800ae1c
 800a78c:	0800addc 	.word	0x0800addc

0800a790 <_write_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_write_r+0x20>)
 800a794:	4604      	mov	r4, r0
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f5 ff2e 	bl	8000600 <_write>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_write_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_write_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20001c38 	.word	0x20001c38

0800a7b4 <__swsetup_r>:
 800a7b4:	4b32      	ldr	r3, [pc, #200]	; (800a880 <__swsetup_r+0xcc>)
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	681d      	ldr	r5, [r3, #0]
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460c      	mov	r4, r1
 800a7be:	b125      	cbz	r5, 800a7ca <__swsetup_r+0x16>
 800a7c0:	69ab      	ldr	r3, [r5, #24]
 800a7c2:	b913      	cbnz	r3, 800a7ca <__swsetup_r+0x16>
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f7ff fb1b 	bl	8009e00 <__sinit>
 800a7ca:	4b2e      	ldr	r3, [pc, #184]	; (800a884 <__swsetup_r+0xd0>)
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	d10f      	bne.n	800a7f0 <__swsetup_r+0x3c>
 800a7d0:	686c      	ldr	r4, [r5, #4]
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7d8:	0719      	lsls	r1, r3, #28
 800a7da:	d42c      	bmi.n	800a836 <__swsetup_r+0x82>
 800a7dc:	06dd      	lsls	r5, r3, #27
 800a7de:	d411      	bmi.n	800a804 <__swsetup_r+0x50>
 800a7e0:	2309      	movs	r3, #9
 800a7e2:	6033      	str	r3, [r6, #0]
 800a7e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7e8:	81a3      	strh	r3, [r4, #12]
 800a7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ee:	e03e      	b.n	800a86e <__swsetup_r+0xba>
 800a7f0:	4b25      	ldr	r3, [pc, #148]	; (800a888 <__swsetup_r+0xd4>)
 800a7f2:	429c      	cmp	r4, r3
 800a7f4:	d101      	bne.n	800a7fa <__swsetup_r+0x46>
 800a7f6:	68ac      	ldr	r4, [r5, #8]
 800a7f8:	e7eb      	b.n	800a7d2 <__swsetup_r+0x1e>
 800a7fa:	4b24      	ldr	r3, [pc, #144]	; (800a88c <__swsetup_r+0xd8>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	bf08      	it	eq
 800a800:	68ec      	ldreq	r4, [r5, #12]
 800a802:	e7e6      	b.n	800a7d2 <__swsetup_r+0x1e>
 800a804:	0758      	lsls	r0, r3, #29
 800a806:	d512      	bpl.n	800a82e <__swsetup_r+0x7a>
 800a808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a80a:	b141      	cbz	r1, 800a81e <__swsetup_r+0x6a>
 800a80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a810:	4299      	cmp	r1, r3
 800a812:	d002      	beq.n	800a81a <__swsetup_r+0x66>
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f991 	bl	800ab3c <_free_r>
 800a81a:	2300      	movs	r3, #0
 800a81c:	6363      	str	r3, [r4, #52]	; 0x34
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	2300      	movs	r3, #0
 800a828:	6063      	str	r3, [r4, #4]
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	f043 0308 	orr.w	r3, r3, #8
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	b94b      	cbnz	r3, 800a84e <__swsetup_r+0x9a>
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a844:	d003      	beq.n	800a84e <__swsetup_r+0x9a>
 800a846:	4621      	mov	r1, r4
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 f92b 	bl	800aaa4 <__smakebuf_r>
 800a84e:	89a0      	ldrh	r0, [r4, #12]
 800a850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a854:	f010 0301 	ands.w	r3, r0, #1
 800a858:	d00a      	beq.n	800a870 <__swsetup_r+0xbc>
 800a85a:	2300      	movs	r3, #0
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	6963      	ldr	r3, [r4, #20]
 800a860:	425b      	negs	r3, r3
 800a862:	61a3      	str	r3, [r4, #24]
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	b943      	cbnz	r3, 800a87a <__swsetup_r+0xc6>
 800a868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a86c:	d1ba      	bne.n	800a7e4 <__swsetup_r+0x30>
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	0781      	lsls	r1, r0, #30
 800a872:	bf58      	it	pl
 800a874:	6963      	ldrpl	r3, [r4, #20]
 800a876:	60a3      	str	r3, [r4, #8]
 800a878:	e7f4      	b.n	800a864 <__swsetup_r+0xb0>
 800a87a:	2000      	movs	r0, #0
 800a87c:	e7f7      	b.n	800a86e <__swsetup_r+0xba>
 800a87e:	bf00      	nop
 800a880:	20000148 	.word	0x20000148
 800a884:	0800adfc 	.word	0x0800adfc
 800a888:	0800ae1c 	.word	0x0800ae1c
 800a88c:	0800addc 	.word	0x0800addc

0800a890 <_close_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d06      	ldr	r5, [pc, #24]	; (800a8ac <_close_r+0x1c>)
 800a894:	2300      	movs	r3, #0
 800a896:	4604      	mov	r4, r0
 800a898:	4608      	mov	r0, r1
 800a89a:	602b      	str	r3, [r5, #0]
 800a89c:	f7f6 f81b 	bl	80008d6 <_close>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d102      	bne.n	800a8aa <_close_r+0x1a>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b103      	cbz	r3, 800a8aa <_close_r+0x1a>
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	20001c38 	.word	0x20001c38

0800a8b0 <__sflush_r>:
 800a8b0:	898a      	ldrh	r2, [r1, #12]
 800a8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	0710      	lsls	r0, r2, #28
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	d458      	bmi.n	800a970 <__sflush_r+0xc0>
 800a8be:	684b      	ldr	r3, [r1, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dc05      	bgt.n	800a8d0 <__sflush_r+0x20>
 800a8c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dc02      	bgt.n	800a8d0 <__sflush_r+0x20>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	d0f9      	beq.n	800a8ca <__sflush_r+0x1a>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8dc:	682f      	ldr	r7, [r5, #0]
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	d032      	beq.n	800a948 <__sflush_r+0x98>
 800a8e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	075a      	lsls	r2, r3, #29
 800a8e8:	d505      	bpl.n	800a8f6 <__sflush_r+0x46>
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	1ac0      	subs	r0, r0, r3
 800a8ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8f0:	b10b      	cbz	r3, 800a8f6 <__sflush_r+0x46>
 800a8f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8f4:	1ac0      	subs	r0, r0, r3
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fc:	6a21      	ldr	r1, [r4, #32]
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b0      	blx	r6
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	d106      	bne.n	800a916 <__sflush_r+0x66>
 800a908:	6829      	ldr	r1, [r5, #0]
 800a90a:	291d      	cmp	r1, #29
 800a90c:	d82c      	bhi.n	800a968 <__sflush_r+0xb8>
 800a90e:	4a2a      	ldr	r2, [pc, #168]	; (800a9b8 <__sflush_r+0x108>)
 800a910:	40ca      	lsrs	r2, r1
 800a912:	07d6      	lsls	r6, r2, #31
 800a914:	d528      	bpl.n	800a968 <__sflush_r+0xb8>
 800a916:	2200      	movs	r2, #0
 800a918:	6062      	str	r2, [r4, #4]
 800a91a:	04d9      	lsls	r1, r3, #19
 800a91c:	6922      	ldr	r2, [r4, #16]
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	d504      	bpl.n	800a92c <__sflush_r+0x7c>
 800a922:	1c42      	adds	r2, r0, #1
 800a924:	d101      	bne.n	800a92a <__sflush_r+0x7a>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	b903      	cbnz	r3, 800a92c <__sflush_r+0x7c>
 800a92a:	6560      	str	r0, [r4, #84]	; 0x54
 800a92c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a92e:	602f      	str	r7, [r5, #0]
 800a930:	2900      	cmp	r1, #0
 800a932:	d0ca      	beq.n	800a8ca <__sflush_r+0x1a>
 800a934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a938:	4299      	cmp	r1, r3
 800a93a:	d002      	beq.n	800a942 <__sflush_r+0x92>
 800a93c:	4628      	mov	r0, r5
 800a93e:	f000 f8fd 	bl	800ab3c <_free_r>
 800a942:	2000      	movs	r0, #0
 800a944:	6360      	str	r0, [r4, #52]	; 0x34
 800a946:	e7c1      	b.n	800a8cc <__sflush_r+0x1c>
 800a948:	6a21      	ldr	r1, [r4, #32]
 800a94a:	2301      	movs	r3, #1
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b0      	blx	r6
 800a950:	1c41      	adds	r1, r0, #1
 800a952:	d1c7      	bne.n	800a8e4 <__sflush_r+0x34>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0c4      	beq.n	800a8e4 <__sflush_r+0x34>
 800a95a:	2b1d      	cmp	r3, #29
 800a95c:	d001      	beq.n	800a962 <__sflush_r+0xb2>
 800a95e:	2b16      	cmp	r3, #22
 800a960:	d101      	bne.n	800a966 <__sflush_r+0xb6>
 800a962:	602f      	str	r7, [r5, #0]
 800a964:	e7b1      	b.n	800a8ca <__sflush_r+0x1a>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	e7ad      	b.n	800a8cc <__sflush_r+0x1c>
 800a970:	690f      	ldr	r7, [r1, #16]
 800a972:	2f00      	cmp	r7, #0
 800a974:	d0a9      	beq.n	800a8ca <__sflush_r+0x1a>
 800a976:	0793      	lsls	r3, r2, #30
 800a978:	680e      	ldr	r6, [r1, #0]
 800a97a:	bf08      	it	eq
 800a97c:	694b      	ldreq	r3, [r1, #20]
 800a97e:	600f      	str	r7, [r1, #0]
 800a980:	bf18      	it	ne
 800a982:	2300      	movne	r3, #0
 800a984:	eba6 0807 	sub.w	r8, r6, r7
 800a988:	608b      	str	r3, [r1, #8]
 800a98a:	f1b8 0f00 	cmp.w	r8, #0
 800a98e:	dd9c      	ble.n	800a8ca <__sflush_r+0x1a>
 800a990:	6a21      	ldr	r1, [r4, #32]
 800a992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a994:	4643      	mov	r3, r8
 800a996:	463a      	mov	r2, r7
 800a998:	4628      	mov	r0, r5
 800a99a:	47b0      	blx	r6
 800a99c:	2800      	cmp	r0, #0
 800a99e:	dc06      	bgt.n	800a9ae <__sflush_r+0xfe>
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ac:	e78e      	b.n	800a8cc <__sflush_r+0x1c>
 800a9ae:	4407      	add	r7, r0
 800a9b0:	eba8 0800 	sub.w	r8, r8, r0
 800a9b4:	e7e9      	b.n	800a98a <__sflush_r+0xda>
 800a9b6:	bf00      	nop
 800a9b8:	20400001 	.word	0x20400001

0800a9bc <_fflush_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	690b      	ldr	r3, [r1, #16]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	b913      	cbnz	r3, 800a9cc <_fflush_r+0x10>
 800a9c6:	2500      	movs	r5, #0
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	b118      	cbz	r0, 800a9d6 <_fflush_r+0x1a>
 800a9ce:	6983      	ldr	r3, [r0, #24]
 800a9d0:	b90b      	cbnz	r3, 800a9d6 <_fflush_r+0x1a>
 800a9d2:	f7ff fa15 	bl	8009e00 <__sinit>
 800a9d6:	4b14      	ldr	r3, [pc, #80]	; (800aa28 <_fflush_r+0x6c>)
 800a9d8:	429c      	cmp	r4, r3
 800a9da:	d11b      	bne.n	800aa14 <_fflush_r+0x58>
 800a9dc:	686c      	ldr	r4, [r5, #4]
 800a9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0ef      	beq.n	800a9c6 <_fflush_r+0xa>
 800a9e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9e8:	07d0      	lsls	r0, r2, #31
 800a9ea:	d404      	bmi.n	800a9f6 <_fflush_r+0x3a>
 800a9ec:	0599      	lsls	r1, r3, #22
 800a9ee:	d402      	bmi.n	800a9f6 <_fflush_r+0x3a>
 800a9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9f2:	f7ff faa3 	bl	8009f3c <__retarget_lock_acquire_recursive>
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	f7ff ff59 	bl	800a8b0 <__sflush_r>
 800a9fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa00:	07da      	lsls	r2, r3, #31
 800aa02:	4605      	mov	r5, r0
 800aa04:	d4e0      	bmi.n	800a9c8 <_fflush_r+0xc>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	059b      	lsls	r3, r3, #22
 800aa0a:	d4dd      	bmi.n	800a9c8 <_fflush_r+0xc>
 800aa0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa0e:	f7ff fa96 	bl	8009f3e <__retarget_lock_release_recursive>
 800aa12:	e7d9      	b.n	800a9c8 <_fflush_r+0xc>
 800aa14:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <_fflush_r+0x70>)
 800aa16:	429c      	cmp	r4, r3
 800aa18:	d101      	bne.n	800aa1e <_fflush_r+0x62>
 800aa1a:	68ac      	ldr	r4, [r5, #8]
 800aa1c:	e7df      	b.n	800a9de <_fflush_r+0x22>
 800aa1e:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <_fflush_r+0x74>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	bf08      	it	eq
 800aa24:	68ec      	ldreq	r4, [r5, #12]
 800aa26:	e7da      	b.n	800a9de <_fflush_r+0x22>
 800aa28:	0800adfc 	.word	0x0800adfc
 800aa2c:	0800ae1c 	.word	0x0800ae1c
 800aa30:	0800addc 	.word	0x0800addc

0800aa34 <_lseek_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	; (800aa54 <_lseek_r+0x20>)
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	2200      	movs	r2, #0
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7f5 ff6e 	bl	8000924 <_lseek>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_lseek_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_lseek_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20001c38 	.word	0x20001c38

0800aa58 <__swhatbuf_r>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	460e      	mov	r6, r1
 800aa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa60:	2900      	cmp	r1, #0
 800aa62:	b096      	sub	sp, #88	; 0x58
 800aa64:	4614      	mov	r4, r2
 800aa66:	461d      	mov	r5, r3
 800aa68:	da08      	bge.n	800aa7c <__swhatbuf_r+0x24>
 800aa6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	602a      	str	r2, [r5, #0]
 800aa72:	061a      	lsls	r2, r3, #24
 800aa74:	d410      	bmi.n	800aa98 <__swhatbuf_r+0x40>
 800aa76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7a:	e00e      	b.n	800aa9a <__swhatbuf_r+0x42>
 800aa7c:	466a      	mov	r2, sp
 800aa7e:	f000 f8bb 	bl	800abf8 <_fstat_r>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	dbf1      	blt.n	800aa6a <__swhatbuf_r+0x12>
 800aa86:	9a01      	ldr	r2, [sp, #4]
 800aa88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa90:	425a      	negs	r2, r3
 800aa92:	415a      	adcs	r2, r3
 800aa94:	602a      	str	r2, [r5, #0]
 800aa96:	e7ee      	b.n	800aa76 <__swhatbuf_r+0x1e>
 800aa98:	2340      	movs	r3, #64	; 0x40
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	b016      	add	sp, #88	; 0x58
 800aaa0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aaa4 <__smakebuf_r>:
 800aaa4:	898b      	ldrh	r3, [r1, #12]
 800aaa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaa8:	079d      	lsls	r5, r3, #30
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460c      	mov	r4, r1
 800aaae:	d507      	bpl.n	800aac0 <__smakebuf_r+0x1c>
 800aab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	6123      	str	r3, [r4, #16]
 800aab8:	2301      	movs	r3, #1
 800aaba:	6163      	str	r3, [r4, #20]
 800aabc:	b002      	add	sp, #8
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	ab01      	add	r3, sp, #4
 800aac2:	466a      	mov	r2, sp
 800aac4:	f7ff ffc8 	bl	800aa58 <__swhatbuf_r>
 800aac8:	9900      	ldr	r1, [sp, #0]
 800aaca:	4605      	mov	r5, r0
 800aacc:	4630      	mov	r0, r6
 800aace:	f7ff fa57 	bl	8009f80 <_malloc_r>
 800aad2:	b948      	cbnz	r0, 800aae8 <__smakebuf_r+0x44>
 800aad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad8:	059a      	lsls	r2, r3, #22
 800aada:	d4ef      	bmi.n	800aabc <__smakebuf_r+0x18>
 800aadc:	f023 0303 	bic.w	r3, r3, #3
 800aae0:	f043 0302 	orr.w	r3, r3, #2
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	e7e3      	b.n	800aab0 <__smakebuf_r+0xc>
 800aae8:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <__smakebuf_r+0x7c>)
 800aaea:	62b3      	str	r3, [r6, #40]	; 0x28
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	6020      	str	r0, [r4, #0]
 800aaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf4:	81a3      	strh	r3, [r4, #12]
 800aaf6:	9b00      	ldr	r3, [sp, #0]
 800aaf8:	6163      	str	r3, [r4, #20]
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	6120      	str	r0, [r4, #16]
 800aafe:	b15b      	cbz	r3, 800ab18 <__smakebuf_r+0x74>
 800ab00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab04:	4630      	mov	r0, r6
 800ab06:	f000 f889 	bl	800ac1c <_isatty_r>
 800ab0a:	b128      	cbz	r0, 800ab18 <__smakebuf_r+0x74>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	f043 0301 	orr.w	r3, r3, #1
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	89a0      	ldrh	r0, [r4, #12]
 800ab1a:	4305      	orrs	r5, r0
 800ab1c:	81a5      	strh	r5, [r4, #12]
 800ab1e:	e7cd      	b.n	800aabc <__smakebuf_r+0x18>
 800ab20:	08009d99 	.word	0x08009d99

0800ab24 <__malloc_lock>:
 800ab24:	4801      	ldr	r0, [pc, #4]	; (800ab2c <__malloc_lock+0x8>)
 800ab26:	f7ff ba09 	b.w	8009f3c <__retarget_lock_acquire_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	20001c2c 	.word	0x20001c2c

0800ab30 <__malloc_unlock>:
 800ab30:	4801      	ldr	r0, [pc, #4]	; (800ab38 <__malloc_unlock+0x8>)
 800ab32:	f7ff ba04 	b.w	8009f3e <__retarget_lock_release_recursive>
 800ab36:	bf00      	nop
 800ab38:	20001c2c 	.word	0x20001c2c

0800ab3c <_free_r>:
 800ab3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	d044      	beq.n	800abcc <_free_r+0x90>
 800ab42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab46:	9001      	str	r0, [sp, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab4e:	bfb8      	it	lt
 800ab50:	18e4      	addlt	r4, r4, r3
 800ab52:	f7ff ffe7 	bl	800ab24 <__malloc_lock>
 800ab56:	4a1e      	ldr	r2, [pc, #120]	; (800abd0 <_free_r+0x94>)
 800ab58:	9801      	ldr	r0, [sp, #4]
 800ab5a:	6813      	ldr	r3, [r2, #0]
 800ab5c:	b933      	cbnz	r3, 800ab6c <_free_r+0x30>
 800ab5e:	6063      	str	r3, [r4, #4]
 800ab60:	6014      	str	r4, [r2, #0]
 800ab62:	b003      	add	sp, #12
 800ab64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab68:	f7ff bfe2 	b.w	800ab30 <__malloc_unlock>
 800ab6c:	42a3      	cmp	r3, r4
 800ab6e:	d908      	bls.n	800ab82 <_free_r+0x46>
 800ab70:	6825      	ldr	r5, [r4, #0]
 800ab72:	1961      	adds	r1, r4, r5
 800ab74:	428b      	cmp	r3, r1
 800ab76:	bf01      	itttt	eq
 800ab78:	6819      	ldreq	r1, [r3, #0]
 800ab7a:	685b      	ldreq	r3, [r3, #4]
 800ab7c:	1949      	addeq	r1, r1, r5
 800ab7e:	6021      	streq	r1, [r4, #0]
 800ab80:	e7ed      	b.n	800ab5e <_free_r+0x22>
 800ab82:	461a      	mov	r2, r3
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	b10b      	cbz	r3, 800ab8c <_free_r+0x50>
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	d9fa      	bls.n	800ab82 <_free_r+0x46>
 800ab8c:	6811      	ldr	r1, [r2, #0]
 800ab8e:	1855      	adds	r5, r2, r1
 800ab90:	42a5      	cmp	r5, r4
 800ab92:	d10b      	bne.n	800abac <_free_r+0x70>
 800ab94:	6824      	ldr	r4, [r4, #0]
 800ab96:	4421      	add	r1, r4
 800ab98:	1854      	adds	r4, r2, r1
 800ab9a:	42a3      	cmp	r3, r4
 800ab9c:	6011      	str	r1, [r2, #0]
 800ab9e:	d1e0      	bne.n	800ab62 <_free_r+0x26>
 800aba0:	681c      	ldr	r4, [r3, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	6053      	str	r3, [r2, #4]
 800aba6:	4421      	add	r1, r4
 800aba8:	6011      	str	r1, [r2, #0]
 800abaa:	e7da      	b.n	800ab62 <_free_r+0x26>
 800abac:	d902      	bls.n	800abb4 <_free_r+0x78>
 800abae:	230c      	movs	r3, #12
 800abb0:	6003      	str	r3, [r0, #0]
 800abb2:	e7d6      	b.n	800ab62 <_free_r+0x26>
 800abb4:	6825      	ldr	r5, [r4, #0]
 800abb6:	1961      	adds	r1, r4, r5
 800abb8:	428b      	cmp	r3, r1
 800abba:	bf04      	itt	eq
 800abbc:	6819      	ldreq	r1, [r3, #0]
 800abbe:	685b      	ldreq	r3, [r3, #4]
 800abc0:	6063      	str	r3, [r4, #4]
 800abc2:	bf04      	itt	eq
 800abc4:	1949      	addeq	r1, r1, r5
 800abc6:	6021      	streq	r1, [r4, #0]
 800abc8:	6054      	str	r4, [r2, #4]
 800abca:	e7ca      	b.n	800ab62 <_free_r+0x26>
 800abcc:	b003      	add	sp, #12
 800abce:	bd30      	pop	{r4, r5, pc}
 800abd0:	20001c30 	.word	0x20001c30

0800abd4 <_read_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d07      	ldr	r5, [pc, #28]	; (800abf4 <_read_r+0x20>)
 800abd8:	4604      	mov	r4, r0
 800abda:	4608      	mov	r0, r1
 800abdc:	4611      	mov	r1, r2
 800abde:	2200      	movs	r2, #0
 800abe0:	602a      	str	r2, [r5, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f7f5 fe5a 	bl	800089c <_read>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_read_r+0x1e>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_read_r+0x1e>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20001c38 	.word	0x20001c38

0800abf8 <_fstat_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d07      	ldr	r5, [pc, #28]	; (800ac18 <_fstat_r+0x20>)
 800abfc:	2300      	movs	r3, #0
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	4611      	mov	r1, r2
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f7f5 fe72 	bl	80008ee <_fstat>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d102      	bne.n	800ac14 <_fstat_r+0x1c>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	b103      	cbz	r3, 800ac14 <_fstat_r+0x1c>
 800ac12:	6023      	str	r3, [r4, #0]
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	bf00      	nop
 800ac18:	20001c38 	.word	0x20001c38

0800ac1c <_isatty_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d06      	ldr	r5, [pc, #24]	; (800ac38 <_isatty_r+0x1c>)
 800ac20:	2300      	movs	r3, #0
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	f7f5 fe71 	bl	800090e <_isatty>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_isatty_r+0x1a>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_isatty_r+0x1a>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	20001c38 	.word	0x20001c38

0800ac3c <_init>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	bf00      	nop
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr

0800ac48 <_fini>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	bf00      	nop
 800ac4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4e:	bc08      	pop	{r3}
 800ac50:	469e      	mov	lr, r3
 800ac52:	4770      	bx	lr
