
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c14c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800c28c  0800c28c  0001c28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c7c0  0800c7c0  0001c7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c7cc  0800c7cc  0001c7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  20000008  0800c7d0  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a6c  20000210  0800c9d8  00020210  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001c7c  0800c9d8  00021c7c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001437a  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003914  00000000  00000000  000345ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  00037ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001488  00000000  00000000  00039510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000699d  00000000  00000000  0003a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015f22  00000000  00000000  00041335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d70b1  00000000  00000000  00057257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0012e308  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b3c  00000000  00000000  0012e358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  00134e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  00134eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c274 	.word	0x0800c274

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0800c274 	.word	0x0800c274

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_ldivmod>:
 8000250:	b97b      	cbnz	r3, 8000272 <__aeabi_ldivmod+0x22>
 8000252:	b972      	cbnz	r2, 8000272 <__aeabi_ldivmod+0x22>
 8000254:	2900      	cmp	r1, #0
 8000256:	bfbe      	ittt	lt
 8000258:	2000      	movlt	r0, #0
 800025a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800025e:	e006      	blt.n	800026e <__aeabi_ldivmod+0x1e>
 8000260:	bf08      	it	eq
 8000262:	2800      	cmpeq	r0, #0
 8000264:	bf1c      	itt	ne
 8000266:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800026a:	f04f 30ff 	movne.w	r0, #4294967295
 800026e:	f000 b9a7 	b.w	80005c0 <__aeabi_idiv0>
 8000272:	f1ad 0c08 	sub.w	ip, sp, #8
 8000276:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027a:	2900      	cmp	r1, #0
 800027c:	db09      	blt.n	8000292 <__aeabi_ldivmod+0x42>
 800027e:	2b00      	cmp	r3, #0
 8000280:	db1a      	blt.n	80002b8 <__aeabi_ldivmod+0x68>
 8000282:	f000 f835 	bl	80002f0 <__udivmoddi4>
 8000286:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800028e:	b004      	add	sp, #16
 8000290:	4770      	bx	lr
 8000292:	4240      	negs	r0, r0
 8000294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000298:	2b00      	cmp	r3, #0
 800029a:	db1b      	blt.n	80002d4 <__aeabi_ldivmod+0x84>
 800029c:	f000 f828 	bl	80002f0 <__udivmoddi4>
 80002a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a8:	b004      	add	sp, #16
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	f000 f817 	bl	80002f0 <__udivmoddi4>
 80002c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ca:	b004      	add	sp, #16
 80002cc:	4240      	negs	r0, r0
 80002ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d2:	4770      	bx	lr
 80002d4:	4252      	negs	r2, r2
 80002d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002da:	f000 f809 	bl	80002f0 <__udivmoddi4>
 80002de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e6:	b004      	add	sp, #16
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4313      	orrs	r3, r2
 80005da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4013      	ands	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e8:	68fb      	ldr	r3, [r7, #12]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fbf5 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f80d 	bl	800061c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000602:	f000 f877 	bl	80006f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f893 	bl	8000730 <MX_GPIO_Init>
  MX_USB_Device_Init();
 800060a:	f008 fcf3 	bl	8008ff4 <MX_USB_Device_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Relay_On();
 800060e:	f000 f99b 	bl	8000948 <Relay_On>
	//Play_Buzzer();
    Read_Rotary();
 8000612:	f000 f9b3 	bl	800097c <Read_Rotary>
    Read_Reed();
 8000616:	f000 f961 	bl	80008dc <Read_Reed>
	Relay_On();
 800061a:	e7f8      	b.n	800060e <main+0x18>

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09a      	sub	sp, #104	; 0x68
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2248      	movs	r2, #72	; 0x48
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f009 fb98 	bl	8009d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800064a:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <SystemClock_Config+0xd4>)
 800064c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xd4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800065e:	2326      	movs	r3, #38	; 0x26
 8000660:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000678:	2360      	movs	r3, #96	; 0x60
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000680:	2301      	movs	r3, #1
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000688:	2320      	movs	r3, #32
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000690:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000696:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800069c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ffa6 	bl	80035f4 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ae:	f000 f8b3 	bl	8000818 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006b2:	236f      	movs	r3, #111	; 0x6f
 80006b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fb02 	bl	8003cdc <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f000 f89b 	bl	8000818 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006e2:	f004 f893 	bl	800480c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006e6:	bf00      	nop
 80006e8:	3768      	adds	r7, #104	; 0x68
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58000400 	.word	0x58000400

080006f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2250      	movs	r2, #80	; 0x50
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f009 fb2d 	bl	8009d60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000710:	2310      	movs	r3, #16
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4618      	mov	r0, r3
 8000718:	f003 ff02 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000722:	f000 f879 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	2004      	movs	r0, #4
 8000746:	f7ff ff3d 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff ff3a 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff37 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2008      	movs	r0, #8
 8000758:	f7ff ff34 	bl	80005c4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	482a      	ldr	r0, [pc, #168]	; (800080c <MX_GPIO_Init+0xdc>)
 8000764:	f000 fe5e 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4828      	ldr	r0, [pc, #160]	; (8000810 <MX_GPIO_Init+0xe0>)
 800076e:	f000 fe59 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f000 fe52 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	481d      	ldr	r0, [pc, #116]	; (800080c <MX_GPIO_Init+0xdc>)
 8000798:	f000 fcbc 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 800079c:	f641 030a 	movw	r3, #6154	; 0x180a
 80007a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <MX_GPIO_Init+0xdc>)
 80007b0:	f000 fcb0 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 80007b4:	2301      	movs	r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_GPIO_Init+0xe0>)
 80007ca:	f000 fca3 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 fc94 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80007ec:	2301      	movs	r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_GPIO_Init+0xe4>)
 80007fe:	f000 fc89 	bl	8001114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	48000800 	.word	0x48000800
 8000810:	48000400 	.word	0x48000400
 8000814:	48000c00 	.word	0x48000c00

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <REED_status>:

bool bHasContact = false;
bool isTimerOn = false;

GPIO_PinState REED_status()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 8000828:	2108      	movs	r1, #8
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <REED_status+0x14>)
 800082c:	f000 fde2 	bl	80013f4 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	48000800 	.word	0x48000800

0800083c <SetTimer>:

void SetTimer() {
 800083c:	b5b0      	push	{r4, r5, r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
	time_t endwait;
	time_t start = time(NULL);
 8000842:	2000      	movs	r0, #0
 8000844:	f009 fb9c 	bl	8009f80 <time>
 8000848:	4602      	mov	r2, r0
 800084a:	460b      	mov	r3, r1
 800084c:	e9c7 2300 	strd	r2, r3, [r7]
	time_t seconds = 10; // end loop after this time has elapsed
 8000850:	f04f 020a 	mov.w	r2, #10
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e9c7 2304 	strd	r2, r3, [r7, #16]

	endwait = start + seconds;
 800085c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000860:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000864:	1884      	adds	r4, r0, r2
 8000866:	eb41 0503 	adc.w	r5, r1, r3
 800086a:	e9c7 4502 	strd	r4, r5, [r7, #8]

	printf("start time is : %s", ctime(&start));
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f009 f921 	bl	8009ab8 <ctime>
 8000876:	4603      	mov	r3, r0
 8000878:	4619      	mov	r1, r3
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <SetTimer+0x94>)
 800087c:	f009 fb58 	bl	8009f30 <iprintf>

	while (start < endwait)
 8000880:	e00f      	b.n	80008a2 <SetTimer+0x66>
	{
	    /* Do stuff while waiting */
        start = time(NULL);
 8000882:	2000      	movs	r0, #0
 8000884:	f009 fb7c 	bl	8009f80 <time>
 8000888:	4602      	mov	r2, r0
 800088a:	460b      	mov	r3, r1
 800088c:	e9c7 2300 	strd	r2, r3, [r7]
        printf("loop time is : %s", ctime(&start));
 8000890:	463b      	mov	r3, r7
 8000892:	4618      	mov	r0, r3
 8000894:	f009 f910 	bl	8009ab8 <ctime>
 8000898:	4603      	mov	r3, r0
 800089a:	4619      	mov	r1, r3
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <SetTimer+0x98>)
 800089e:	f009 fb47 	bl	8009f30 <iprintf>
	while (start < endwait)
 80008a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008aa:	4290      	cmp	r0, r2
 80008ac:	eb71 0303 	sbcs.w	r3, r1, r3
 80008b0:	dbe7      	blt.n	8000882 <SetTimer+0x46>
	}

	printf("end time is %s", ctime(&endwait));
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f009 f8fe 	bl	8009ab8 <ctime>
 80008bc:	4603      	mov	r3, r0
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <SetTimer+0x9c>)
 80008c2:	f009 fb35 	bl	8009f30 <iprintf>

}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bdb0      	pop	{r4, r5, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	0800c28c 	.word	0x0800c28c
 80008d4:	0800c2a0 	.word	0x0800c2a0
 80008d8:	0800c2b4 	.word	0x0800c2b4

080008dc <Read_Reed>:


void Read_Reed()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	if (!REED_status() && !bHasContact)
 80008e0:	f7ff ffa0 	bl	8000824 <REED_status>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d110      	bne.n	800090c <Read_Reed+0x30>
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <Read_Reed+0x5c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f083 0301 	eor.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d009      	beq.n	800090c <Read_Reed+0x30>
	{
		printf("Reed heeft nu contact");
 80008f8:	4810      	ldr	r0, [pc, #64]	; (800093c <Read_Reed+0x60>)
 80008fa:	f009 fb19 	bl	8009f30 <iprintf>
		bHasContact = true;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <Read_Reed+0x5c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
		isTimerOn = false;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <Read_Reed+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]

		printf("Reed heeft geen contact");
		bHasContact = false;
	}

}
 800090a:	e013      	b.n	8000934 <Read_Reed+0x58>
	else if (REED_status() && bHasContact)
 800090c:	f7ff ff8a 	bl	8000824 <REED_status>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00e      	beq.n	8000934 <Read_Reed+0x58>
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <Read_Reed+0x5c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00a      	beq.n	8000934 <Read_Reed+0x58>
		isTimerOn = true;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <Read_Reed+0x64>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
		SetTimer();
 8000924:	f7ff ff8a 	bl	800083c <SetTimer>
		printf("Reed heeft geen contact");
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <Read_Reed+0x68>)
 800092a:	f009 fb01 	bl	8009f30 <iprintf>
		bHasContact = false;
 800092e:	4b02      	ldr	r3, [pc, #8]	; (8000938 <Read_Reed+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000022c 	.word	0x2000022c
 800093c:	0800c2c4 	.word	0x0800c2c4
 8000940:	2000022d 	.word	0x2000022d
 8000944:	0800c2dc 	.word	0x0800c2dc

08000948 <Relay_On>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Relay_On()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f000 fd65 	bl	8001424 <HAL_GPIO_WritePin>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}

0800095e <_write>:

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	68b8      	ldr	r0, [r7, #8]
 800096e:	f008 fbff 	bl	8009170 <CDC_Transmit_FS>
  return len;
 8000972:	687b      	ldr	r3, [r7, #4]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <Read_Rotary>:

void Read_Rotary()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 8000982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000986:	4855      	ldr	r0, [pc, #340]	; (8000adc <Read_Rotary+0x160>)
 8000988:	f000 fd34 	bl	80013f4 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 8000990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000994:	4851      	ldr	r0, [pc, #324]	; (8000adc <Read_Rotary+0x160>)
 8000996:	f000 fd2d 	bl	80013f4 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	005a      	lsls	r2, r3, #1
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a4e      	ldr	r2, [pc, #312]	; (8000ae0 <Read_Rotary+0x164>)
 80009a8:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 80009aa:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <Read_Rotary+0x168>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b4c      	ldr	r3, [pc, #304]	; (8000ae0 <Read_Rotary+0x164>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	494d      	ldr	r1, [pc, #308]	; (8000ae8 <Read_Rotary+0x16c>)
 80009b4:	0092      	lsls	r2, r2, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009bc:	607b      	str	r3, [r7, #4]

    if (info == 1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d109      	bne.n	80009d8 <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 80009c4:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <Read_Rotary+0x164>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2201      	movs	r2, #1
 80009ca:	409a      	lsls	r2, r3
 80009cc:	4b47      	ldr	r3, [pc, #284]	; (8000aec <Read_Rotary+0x170>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	4a46      	ldr	r2, [pc, #280]	; (8000aec <Read_Rotary+0x170>)
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e00c      	b.n	80009f2 <Read_Rotary+0x76>
    }
    else if (info == -1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009de:	d108      	bne.n	80009f2 <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 80009e0:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <Read_Rotary+0x164>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2201      	movs	r2, #1
 80009e6:	409a      	lsls	r2, r3
 80009e8:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <Read_Rotary+0x174>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	4a40      	ldr	r2, [pc, #256]	; (8000af0 <Read_Rotary+0x174>)
 80009f0:	6013      	str	r3, [r2, #0]
    else if (info == 2)
    {
        // skipped a value
    }

    if (prevVal != newVal && newVal == 3)
 80009f2:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <Read_Rotary+0x168>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <Read_Rotary+0x164>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d047      	beq.n	8000a8e <Read_Rotary+0x112>
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <Read_Rotary+0x164>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d143      	bne.n	8000a8e <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <Read_Rotary+0x170>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b0b      	cmp	r3, #11
 8000a0c:	d00b      	beq.n	8000a26 <Read_Rotary+0xaa>
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <Read_Rotary+0x170>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b0d      	cmp	r3, #13
 8000a14:	d007      	beq.n	8000a26 <Read_Rotary+0xaa>
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <Read_Rotary+0x170>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b0e      	cmp	r3, #14
 8000a1c:	d003      	beq.n	8000a26 <Read_Rotary+0xaa>
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <Read_Rotary+0x170>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d10e      	bne.n	8000a44 <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <Read_Rotary+0x178>)
 8000a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <Read_Rotary+0x178>)
 8000a36:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	4827      	ldr	r0, [pc, #156]	; (8000adc <Read_Rotary+0x160>)
 8000a40:	f000 fcf0 	bl	8001424 <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <Read_Rotary+0x174>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b0b      	cmp	r3, #11
 8000a4a:	d00b      	beq.n	8000a64 <Read_Rotary+0xe8>
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <Read_Rotary+0x174>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b0d      	cmp	r3, #13
 8000a52:	d007      	beq.n	8000a64 <Read_Rotary+0xe8>
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <Read_Rotary+0x174>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b0e      	cmp	r3, #14
 8000a5a:	d003      	beq.n	8000a64 <Read_Rotary+0xe8>
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <Read_Rotary+0x174>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d10e      	bne.n	8000a82 <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <Read_Rotary+0x178>)
 8000a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <Read_Rotary+0x178>)
 8000a74:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <Read_Rotary+0x160>)
 8000a7e:	f000 fcd1 	bl	8001424 <HAL_GPIO_WritePin>
        }
        clockState = 0;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <Read_Rotary+0x170>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <Read_Rotary+0x174>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <Read_Rotary+0x164>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <Read_Rotary+0x168>)
 8000a94:	6013      	str	r3, [r2, #0]

    if (iTimer > 20000)
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <Read_Rotary+0x17c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	dd09      	ble.n	8000ab6 <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <Read_Rotary+0x178>)
 8000aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <Read_Rotary+0x180>)
 8000aac:	f009 fa40 	bl	8009f30 <iprintf>
        iTimer = 0;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Read_Rotary+0x17c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <Read_Rotary+0x17c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <Read_Rotary+0x17c>)
 8000abe:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <Read_Rotary+0x184>)
 8000ac4:	f000 fc96 	bl	80013f4 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <Read_Rotary+0x158>
        {
          readValue = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <Read_Rotary+0x178>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
        }
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	20000238 	.word	0x20000238
 8000ae4:	20000230 	.word	0x20000230
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	2000023c 	.word	0x2000023c
 8000af0:	20000240 	.word	0x20000240
 8000af4:	2000022e 	.word	0x2000022e
 8000af8:	20000234 	.word	0x20000234
 8000afc:	0800c2f4 	.word	0x0800c2f4
 8000b00:	48000c00 	.word	0x48000c00

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <HardFault_Handler+0x4>

08000b1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f99d 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <USB_LP_IRQHandler+0x10>)
 8000b6e:	f000 fd6c 	bl	800164a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20001730 	.word	0x20001730

08000b7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return 1;
 8000b80:	2301      	movs	r3, #1
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_kill>:

int _kill(int pid, int sig)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b96:	f008 ff97 	bl	8009ac8 <__errno>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2216      	movs	r2, #22
 8000b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_exit>:

void _exit (int status)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffe7 	bl	8000b8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bbe:	e7fe      	b.n	8000bbe <_exit+0x12>

08000bc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
  return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f008 ff18 	bl	8009ac8 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20030000 	.word	0x20030000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	20000248 	.word	0x20000248
 8000ccc:	20001c80 	.word	0x20001c80

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <SystemInit+0x98>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <SystemInit+0x98>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000cfc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <SystemInit+0x9c>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d1a:	f023 0305 	bic.w	r3, r3, #5
 8000d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3a:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <SystemInit+0xa0>)
 8000d3c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <SystemInit+0xa0>)
 8000d44:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	faf6fefb 	.word	0xfaf6fefb
 8000d70:	22041000 	.word	0x22041000

08000d74 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d74:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d76:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d78:	3304      	adds	r3, #4

08000d7a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d7e:	d3f9      	bcc.n	8000d74 <CopyDataInit>
  bx lr
 8000d80:	4770      	bx	lr

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d82:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d84:	3004      	adds	r0, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d86:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>
  bx lr
 8000d8a:	4770      	bx	lr

08000d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d90:	f7ff ff9e 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <LoopForever+0x6>)
 8000d96:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <LoopForever+0xa>)
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <LoopForever+0xe>)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f7ff ffed 	bl	8000d7a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <LoopForever+0x12>)
 8000da2:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <LoopForever+0x16>)
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <LoopForever+0x1a>)
 8000da6:	2300      	movs	r3, #0
 8000da8:	f7ff ffe7 	bl	8000d7a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <LoopForever+0x1e>)
 8000dae:	490c      	ldr	r1, [pc, #48]	; (8000de0 <LoopForever+0x22>)
 8000db0:	2300      	movs	r3, #0
 8000db2:	f7ff ffe8 	bl	8000d86 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000db6:	f008 fe8d 	bl	8009ad4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000dba:	f7ff fc1c 	bl	80005f6 <main>

08000dbe <LoopForever>:

LoopForever:
  b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000210 	.word	0x20000210
 8000dcc:	0800c7d0 	.word	0x0800c7d0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000dd0:	20030000 	.word	0x20030000
 8000dd4:	20030000 	.word	0x20030000
 8000dd8:	0800c9d8 	.word	0x0800c9d8
  INIT_BSS _sbss, _ebss
 8000ddc:	20000210 	.word	0x20000210
 8000de0:	20001c7c 	.word	0x20001c7c

08000de4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_Init+0x3c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_Init+0x3c>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f948 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e04:	200f      	movs	r0, #15
 8000e06:	f000 f80f 	bl	8000e28 <HAL_InitTick>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	e001      	b.n	8000e1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e16:	f7ff fe75 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58004000 	.word	0x58004000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_InitTick+0x6c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d024      	beq.n	8000e86 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e3c:	f003 f8fc 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_InitTick+0x6c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4619      	mov	r1, r3
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f950 	bl	80010fa <HAL_SYSTICK_Config>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10f      	bne.n	8000e80 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d809      	bhi.n	8000e7a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	f000 f91c 	bl	80010aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_InitTick+0x70>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e004      	b.n	8000e8a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000054 	.word	0x20000054
 8000e98:	20000050 	.word	0x20000050

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000054 	.word	0x20000054
 8000ec0:	2000024c 	.word	0x2000024c

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000024c 	.word	0x2000024c

08000edc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTickPrio+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000050 	.word	0x20000050

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff40 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff33 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa4 	bl	8001050 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e14c      	b.n	80013be <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 813e 	beq.w	80013b8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	f003 0201 	and.w	r2, r3, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d017      	beq.n	80011f2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d123      	bne.n	8001246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	6939      	ldr	r1, [r7, #16]
 8001242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8098 	beq.w	80013b8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001288:	4a54      	ldr	r2, [pc, #336]	; (80013dc <HAL_GPIO_Init+0x2c8>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b2:	d019      	beq.n	80012e8 <HAL_GPIO_Init+0x1d4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x2cc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d013      	beq.n	80012e4 <HAL_GPIO_Init+0x1d0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a49      	ldr	r2, [pc, #292]	; (80013e4 <HAL_GPIO_Init+0x2d0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1cc>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_GPIO_Init+0x2d4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1c8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a47      	ldr	r2, [pc, #284]	; (80013ec <HAL_GPIO_Init+0x2d8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1c4>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e008      	b.n	80012ea <HAL_GPIO_Init+0x1d6>
 80012d8:	2307      	movs	r3, #7
 80012da:	e006      	b.n	80012ea <HAL_GPIO_Init+0x1d6>
 80012dc:	2303      	movs	r3, #3
 80012de:	e004      	b.n	80012ea <HAL_GPIO_Init+0x1d6>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x1d6>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_GPIO_Init+0x1d6>
 80012e8:	2300      	movs	r3, #0
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012fa:	4938      	ldr	r1, [pc, #224]	; (80013dc <HAL_GPIO_Init+0x2c8>)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800132c:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001356:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 800135e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 800138c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f47f aeab 	bne.w	8001124 <HAL_GPIO_Init+0x10>
  }
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40010000 	.word	0x40010000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	48001000 	.word	0x48001000
 80013f0:	58000800 	.word	0x58000800

080013f4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001440:	e002      	b.n	8001448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af06      	add	r7, sp, #24
 800145a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0cb      	b.n	80015fe <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f007 fff2 	bl	8009464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2203      	movs	r2, #3
 8001484:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 faeb 	bl	8004a68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e040      	b.n	800151a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3301      	adds	r3, #1
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	3303      	adds	r3, #3
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3338      	adds	r3, #56	; 0x38
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	333c      	adds	r3, #60	; 0x3c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	3340      	adds	r3, #64	; 0x40
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	3301      	adds	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d3b9      	bcc.n	8001498 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e044      	b.n	80015b4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	f203 1369 	addw	r3, r3, #361	; 0x169
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	3301      	adds	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3b5      	bcc.n	800152a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	687e      	ldr	r6, [r7, #4]
 80015c6:	466d      	mov	r5, sp
 80015c8:	f106 0410 	add.w	r4, r6, #16
 80015cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	602b      	str	r3, [r5, #0]
 80015d4:	1d33      	adds	r3, r6, #4
 80015d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f003 fa60 	bl	8004a9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f001 fc45 	bl	8002e86 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001606 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_PCD_Start+0x16>
 8001618:	2302      	movs	r3, #2
 800161a:	e012      	b.n	8001642 <HAL_PCD_Start+0x3c>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fa06 	bl	8004a3a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f005 fcc9 	bl	8006fca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f005 fcce 	bl	8006ff8 <USB_ReadInterrupts>
 800165c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fb05 	bl	8001c78 <PCD_EP_ISR_Handler>

    return;
 800166e:	e110      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001676:	2b00      	cmp	r3, #0
 8001678:	d013      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800168c:	b292      	uxth	r2, r2
 800168e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f007 ff99 	bl	80095ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8fc 	bl	8001898 <HAL_PCD_SetAddress>

    return;
 80016a0:	e0f7      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016be:	b292      	uxth	r2, r2
 80016c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016c4:	e0e5      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00c      	beq.n	80016ea <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016e2:	b292      	uxth	r2, r2
 80016e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016e8:	e0d3      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d034      	beq.n	800175e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0204 	bic.w	r2, r2, #4
 8001706:	b292      	uxth	r2, r2
 8001708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001714:	b29a      	uxth	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0208 	bic.w	r2, r2, #8
 800171e:	b292      	uxth	r2, r2
 8001720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f008 f93d 	bl	80099b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f007 ff7c 	bl	800963c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800175c:	e099      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001764:	2b00      	cmp	r3, #0
 8001766:	d027      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001770:	b29a      	uxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	b292      	uxth	r2, r2
 800177c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001792:	b292      	uxth	r2, r2
 8001794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0204 	orr.w	r2, r2, #4
 80017aa:	b292      	uxth	r2, r2
 80017ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f007 ff29 	bl	8009608 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017b6:	e06c      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d040      	beq.n	8001844 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	b292      	uxth	r2, r2
 80017d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d12b      	bne.n	800183c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0204 	orr.w	r2, r2, #4
 80017f6:	b292      	uxth	r2, r2
 80017f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	b292      	uxth	r2, r2
 8001810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001824:	b29b      	uxth	r3, r3
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001832:	2101      	movs	r1, #1
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f008 f8bf 	bl	80099b8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800183a:	e02a      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f007 fee3 	bl	8009608 <HAL_PCD_SuspendCallback>
    return;
 8001842:	e026      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00f      	beq.n	800186e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001856:	b29a      	uxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001860:	b292      	uxth	r2, r2
 8001862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f007 fea1 	bl	80095ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800186c:	e011      	b.n	8001892 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00c      	beq.n	8001892 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188a:	b292      	uxth	r2, r2
 800188c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001890:	bf00      	nop
  }
}
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_PCD_SetAddress+0x1a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e013      	b.n	80018da <HAL_PCD_SetAddress+0x42>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f005 fb69 	bl	8006fa2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	4608      	mov	r0, r1
 80018ec:	4611      	mov	r1, r2
 80018ee:	461a      	mov	r2, r3
 80018f0:	4603      	mov	r3, r0
 80018f2:	70fb      	strb	r3, [r7, #3]
 80018f4:	460b      	mov	r3, r1
 80018f6:	803b      	strh	r3, [r7, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001904:	2b00      	cmp	r3, #0
 8001906:	da0e      	bge.n	8001926 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	705a      	strb	r2, [r3, #1]
 8001924:	e00e      	b.n	8001944 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	f003 0207 	and.w	r2, r3, #7
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001950:	883a      	ldrh	r2, [r7, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	78ba      	ldrb	r2, [r7, #2]
 800195a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800195c:	78bb      	ldrb	r3, [r7, #2]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d102      	bne.n	8001968 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_PCD_EP_Open+0x94>
 8001972:	2302      	movs	r3, #2
 8001974:	e00e      	b.n	8001994 <HAL_PCD_EP_Open+0xb2>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 f8ab 	bl	8004ae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001992:	7afb      	ldrb	r3, [r7, #11]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da0e      	bge.n	80019ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	705a      	strb	r2, [r3, #1]
 80019cc:	e00e      	b.n	80019ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 0207 	and.w	r2, r3, #7
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_PCD_EP_Close+0x6a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e00e      	b.n	8001a24 <HAL_PCD_EP_Close+0x88>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fc27 	bl	8005268 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 0207 	and.w	r2, r3, #7
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6979      	ldr	r1, [r7, #20]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fddf 	bl	8005642 <USB_EPStartXfer>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 0207 	and.w	r2, r3, #7
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ab0:	681b      	ldr	r3, [r3, #0]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	460b      	mov	r3, r1
 8001acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2200      	movs	r2, #0
 8001b02:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2201      	movs	r2, #1
 8001b08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6979      	ldr	r1, [r7, #20]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fd90 	bl	8005642 <USB_EPStartXfer>

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 0207 	and.w	r2, r3, #7
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d901      	bls.n	8001b4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e03e      	b.n	8001bc8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da0e      	bge.n	8001b70 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	705a      	strb	r2, [r3, #1]
 8001b6e:	e00c      	b.n	8001b8a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_EP_SetStall+0x7e>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e00e      	b.n	8001bc8 <HAL_PCD_EP_SetStall+0x9c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f005 f8f3 	bl	8006da4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d901      	bls.n	8001bee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e040      	b.n	8001c70 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da0e      	bge.n	8001c14 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	705a      	strb	r2, [r3, #1]
 8001c12:	e00e      	b.n	8001c32 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_PCD_EP_ClrStall+0x82>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e00e      	b.n	8001c70 <HAL_PCD_EP_ClrStall+0xa0>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f005 f8f0 	bl	8006e46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b096      	sub	sp, #88	; 0x58
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c80:	e3b1      	b.n	80023e6 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001c9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 8173 	bne.w	8001f8c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d150      	bne.n	8001d54 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc2:	81fb      	strh	r3, [r7, #14]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3328      	adds	r3, #40	; 0x28
 8001cda:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d12:	2100      	movs	r1, #0
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f007 fc30 	bl	800957a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 835f 	beq.w	80023e6 <PCD_EP_ISR_Handler+0x76e>
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 835a 	bne.w	80023e6 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b292      	uxth	r2, r2
 8001d46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d52:	e348      	b.n	80023e6 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d032      	beq.n	8001dd8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f005 f975 	bl	800709c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	823b      	strh	r3, [r7, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	8a3a      	ldrh	r2, [r7, #16]
 8001dc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f007 fba5 	bl	8009520 <HAL_PCD_SetupStageCallback>
 8001dd6:	e306      	b.n	80023e6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dd8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f280 8302 	bge.w	80023e6 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dee:	4013      	ands	r3, r2
 8001df0:	83fb      	strh	r3, [r7, #30]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	8bfa      	ldrh	r2, [r7, #30]
 8001df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dfc:	b292      	uxth	r2, r2
 8001dfe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d019      	beq.n	8001e64 <PCD_EP_ISR_Handler+0x1ec>
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d015      	beq.n	8001e64 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	6959      	ldr	r1, [r3, #20]
 8001e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e42:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e46:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f005 f927 	bl	800709c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	441a      	add	r2, r3
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f007 fb70 	bl	8009544 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 82b5 	bne.w	80023e6 <PCD_EP_ISR_Handler+0x76e>
 8001e7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e88:	f000 82ad 	beq.w	80023e6 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	801a      	strh	r2, [r3, #0]
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec2:	d91d      	bls.n	8001f00 <PCD_EP_ISR_Handler+0x288>
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <PCD_EP_ISR_Handler+0x266>
 8001ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eda:	3b01      	subs	r3, #1
 8001edc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	801a      	strh	r2, [r3, #0]
 8001efe:	e026      	b.n	8001f4e <PCD_EP_ISR_Handler+0x2d6>
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <PCD_EP_ISR_Handler+0x2a6>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	801a      	strh	r2, [r3, #0]
 8001f1c:	e017      	b.n	8001f4e <PCD_EP_ISR_Handler+0x2d6>
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <PCD_EP_ISR_Handler+0x2c0>
 8001f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f34:	3301      	adds	r3, #1
 8001f36:	647b      	str	r3, [r7, #68]	; 0x44
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5e:	827b      	strh	r3, [r7, #18]
 8001f60:	8a7b      	ldrh	r3, [r7, #18]
 8001f62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f66:	827b      	strh	r3, [r7, #18]
 8001f68:	8a7b      	ldrh	r3, [r7, #18]
 8001f6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f6e:	827b      	strh	r3, [r7, #18]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	8a7b      	ldrh	r3, [r7, #18]
 8001f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	8013      	strh	r3, [r2, #0]
 8001f8a:	e22c      	b.n	80023e6 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fa0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f280 80f6 	bge.w	8002196 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fe0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	7b1b      	ldrb	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d123      	bne.n	8002046 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	4413      	add	r3, r2
 8002018:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002022:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002026:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 808e 	beq.w	800214c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	6959      	ldr	r1, [r3, #20]
 8002038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203a:	88da      	ldrh	r2, [r3, #6]
 800203c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002040:	f005 f82c 	bl	800709c <USB_ReadPMA>
 8002044:	e082      	b.n	800214c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002048:	78db      	ldrb	r3, [r3, #3]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d10a      	bne.n	8002064 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800204e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002052:	461a      	mov	r2, r3
 8002054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f9d3 	bl	8002402 <HAL_PCD_EP_DB_Receive>
 800205c:	4603      	mov	r3, r0
 800205e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002062:	e073      	b.n	800214c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800207a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d022      	beq.n	8002108 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80020ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02c      	beq.n	800214c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f8:	6959      	ldr	r1, [r3, #20]
 80020fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fc:	891a      	ldrh	r2, [r3, #8]
 80020fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002102:	f004 ffcb 	bl	800709c <USB_ReadPMA>
 8002106:	e021      	b.n	800214c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002110:	b29b      	uxth	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	4413      	add	r3, r2
 8002122:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002130:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213e:	6959      	ldr	r1, [r3, #20]
 8002140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002142:	895a      	ldrh	r2, [r3, #10]
 8002144:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002148:	f004 ffa8 	bl	800709c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800214c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002154:	441a      	add	r2, r3
 8002156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002158:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800215a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002162:	441a      	add	r2, r3
 8002164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002166:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <PCD_EP_ISR_Handler+0x504>
 8002170:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d206      	bcs.n	800218a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800217c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f007 f9de 	bl	8009544 <HAL_PCD_DataOutStageCallback>
 8002188:	e005      	b.n	8002196 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002190:	4618      	mov	r0, r3
 8002192:	f003 fa56 	bl	8005642 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002196:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8121 	beq.w	80023e6 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80021a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	441a      	add	r2, r3
 80021e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f6:	78db      	ldrb	r3, [r3, #3]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 80a2 	bne.w	8002342 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 80021fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002206:	7b1b      	ldrb	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8093 	beq.w	8002334 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800220e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d046      	beq.n	80022a8 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d126      	bne.n	8002270 <PCD_EP_ISR_Handler+0x5f8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	4413      	add	r3, r2
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	00da      	lsls	r2, r3, #3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	4413      	add	r3, r2
 8002244:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002248:	623b      	str	r3, [r7, #32]
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002254:	b29a      	uxth	r2, r3
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002268:	b29a      	uxth	r2, r3
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	e061      	b.n	8002334 <PCD_EP_ISR_Handler+0x6bc>
 8002270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d15d      	bne.n	8002334 <PCD_EP_ISR_Handler+0x6bc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	4413      	add	r3, r2
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	00da      	lsls	r2, r3, #3
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	4413      	add	r3, r2
 800229a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	2200      	movs	r2, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	e045      	b.n	8002334 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b0:	785b      	ldrb	r3, [r3, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d126      	bne.n	8002304 <PCD_EP_ISR_Handler+0x68c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	4413      	add	r3, r2
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
 80022ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00da      	lsls	r2, r3, #3
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	4413      	add	r3, r2
 80022d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	e017      	b.n	8002334 <PCD_EP_ISR_Handler+0x6bc>
 8002304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002306:	785b      	ldrb	r3, [r3, #1]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d113      	bne.n	8002334 <PCD_EP_ISR_Handler+0x6bc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	4413      	add	r3, r2
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800231e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	00da      	lsls	r2, r3, #3
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002326:	4413      	add	r3, r2
 8002328:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800232c:	63bb      	str	r3, [r7, #56]	; 0x38
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	2200      	movs	r2, #0
 8002332:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f007 f91d 	bl	800957a <HAL_PCD_DataInStageCallback>
 8002340:	e051      	b.n	80023e6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002342:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d144      	bne.n	80023d8 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4413      	add	r3, r2
 8002368:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800237e:	429a      	cmp	r2, r3
 8002380:	d907      	bls.n	8002392 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800238a:	1ad2      	subs	r2, r2, r3
 800238c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238e:	619a      	str	r2, [r3, #24]
 8002390:	e002      	b.n	8002398 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d106      	bne.n	80023ae <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f007 f8e7 	bl	800957a <HAL_PCD_DataInStageCallback>
 80023ac:	e01b      	b.n	80023e6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023b6:	441a      	add	r2, r3
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023c4:	441a      	add	r2, r3
 80023c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 f936 	bl	8005642 <USB_EPStartXfer>
 80023d6:	e006      	b.n	80023e6 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023dc:	461a      	mov	r2, r3
 80023de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f917 	bl	8002614 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f6ff ac45 	blt.w	8001c82 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3758      	adds	r7, #88	; 0x58
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	4613      	mov	r3, r2
 800240e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d07c      	beq.n	8002514 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4413      	add	r3, r2
 8002434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	8b7b      	ldrh	r3, [r7, #26]
 8002446:	429a      	cmp	r2, r3
 8002448:	d306      	bcc.n	8002458 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	8b7b      	ldrh	r3, [r7, #26]
 8002450:	1ad2      	subs	r2, r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	e002      	b.n	800245e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d123      	bne.n	80024ae <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002480:	833b      	strh	r3, [r7, #24]
 8002482:	8b3b      	ldrh	r3, [r7, #24]
 8002484:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002488:	833b      	strh	r3, [r7, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	441a      	add	r2, r3
 8002498:	8b3b      	ldrh	r3, [r7, #24]
 800249a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800249e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01f      	beq.n	80024f8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d2:	82fb      	strh	r3, [r7, #22]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	441a      	add	r2, r3
 80024e2:	8afb      	ldrh	r3, [r7, #22]
 80024e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024f8:	8b7b      	ldrh	r3, [r7, #26]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8085 	beq.w	800260a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	6959      	ldr	r1, [r3, #20]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	891a      	ldrh	r2, [r3, #8]
 800250c:	8b7b      	ldrh	r3, [r7, #26]
 800250e:	f004 fdc5 	bl	800709c <USB_ReadPMA>
 8002512:	e07a      	b.n	800260a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4413      	add	r3, r2
 800252e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002538:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	8b7b      	ldrh	r3, [r7, #26]
 8002540:	429a      	cmp	r2, r3
 8002542:	d306      	bcc.n	8002552 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	8b7b      	ldrh	r3, [r7, #26]
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	619a      	str	r2, [r3, #24]
 8002550:	e002      	b.n	8002558 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d123      	bne.n	80025a8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257a:	83fb      	strh	r3, [r7, #30]
 800257c:	8bfb      	ldrh	r3, [r7, #30]
 800257e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002582:	83fb      	strh	r3, [r7, #30]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	8bfb      	ldrh	r3, [r7, #30]
 8002594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11f      	bne.n	80025f2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025cc:	83bb      	strh	r3, [r7, #28]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	441a      	add	r2, r3
 80025dc:	8bbb      	ldrh	r3, [r7, #28]
 80025de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025f2:	8b7b      	ldrh	r3, [r7, #26]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	6959      	ldr	r1, [r3, #20]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	895a      	ldrh	r2, [r3, #10]
 8002604:	8b7b      	ldrh	r3, [r7, #26]
 8002606:	f004 fd49 	bl	800709c <USB_ReadPMA>
    }
  }

  return count;
 800260a:	8b7b      	ldrh	r3, [r7, #26]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0a4      	sub	sp, #144	; 0x90
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 81db 	beq.w	80029e4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4413      	add	r3, r2
 8002648:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002652:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800265e:	429a      	cmp	r2, r3
 8002660:	d907      	bls.n	8002672 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800266a:	1ad2      	subs	r2, r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	619a      	str	r2, [r3, #24]
 8002670:	e002      	b.n	8002678 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 80b9 	bne.w	80027f4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d126      	bne.n	80026d8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	4413      	add	r3, r2
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	00da      	lsls	r2, r3, #3
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	4413      	add	r3, r2
 80026ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	e01a      	b.n	800270e <HAL_PCD_EP_DB_Transmit+0xfa>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d116      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0xfa>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	4413      	add	r3, r2
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	00da      	lsls	r2, r3, #3
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	4413      	add	r3, r2
 8002702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	2200      	movs	r2, #0
 800270c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d126      	bne.n	800276a <HAL_PCD_EP_DB_Transmit+0x156>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	00da      	lsls	r2, r3, #3
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274e:	b29a      	uxth	r2, r3
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800275e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002762:	b29a      	uxth	r2, r3
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	801a      	strh	r2, [r3, #0]
 8002768:	e017      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x186>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d113      	bne.n	800279a <HAL_PCD_EP_DB_Transmit+0x186>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	4413      	add	r3, r2
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	00da      	lsls	r2, r3, #3
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	4413      	add	r3, r2
 800278e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f006 feea 	bl	800957a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 82fa 	beq.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027cc:	82fb      	strh	r3, [r7, #22]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	441a      	add	r2, r3
 80027dc:	8afb      	ldrh	r3, [r7, #22]
 80027de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8013      	strh	r3, [r2, #0]
 80027f2:	e2d8      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d021      	beq.n	8002842 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	441a      	add	r2, r3
 800282a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 82ac 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002856:	441a      	add	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002864:	441a      	add	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d30b      	bcc.n	800288e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002886:	1ad2      	subs	r2, r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	621a      	str	r2, [r3, #32]
 800288c:	e017      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002896:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800289a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a6:	e00a      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d165      	bne.n	8002992 <HAL_PCD_EP_DB_Transmit+0x37e>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028da:	4413      	add	r3, r2
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	00da      	lsls	r2, r3, #3
 80028e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e6:	4413      	add	r3, r2
 80028e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002902:	2b3e      	cmp	r3, #62	; 0x3e
 8002904:	d91d      	bls.n	8002942 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	64bb      	str	r3, [r7, #72]	; 0x48
 800290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_PCD_EP_DB_Transmit+0x30c>
 800291a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291c:	3b01      	subs	r3, #1
 800291e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29a      	uxth	r2, r3
 8002926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002928:	b29b      	uxth	r3, r3
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	b29b      	uxth	r3, r3
 800292e:	4313      	orrs	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293a:	b29a      	uxth	r2, r3
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	e044      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <HAL_PCD_EP_DB_Transmit+0x34c>
 800294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002958:	b29a      	uxth	r2, r3
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	e035      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	64bb      	str	r3, [r7, #72]	; 0x48
 8002968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_PCD_EP_DB_Transmit+0x366>
 8002974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002976:	3301      	adds	r3, #1
 8002978:	64bb      	str	r3, [r7, #72]	; 0x48
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29a      	uxth	r2, r3
 8002980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002982:	b29b      	uxth	r3, r3
 8002984:	029b      	lsls	r3, r3, #10
 8002986:	b29b      	uxth	r3, r3
 8002988:	4313      	orrs	r3, r2
 800298a:	b29a      	uxth	r2, r3
 800298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	e01c      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d118      	bne.n	80029cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	4413      	add	r3, r2
 80029b0:	647b      	str	r3, [r7, #68]	; 0x44
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	00da      	lsls	r2, r3, #3
 80029b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ba:	4413      	add	r3, r2
 80029bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029c0:	643b      	str	r3, [r7, #64]	; 0x40
 80029c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	891a      	ldrh	r2, [r3, #8]
 80029d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f004 fb1b 	bl	8007018 <USB_WritePMA>
 80029e2:	e1e0      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d307      	bcc.n	8002a28 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	e002      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 80c0 	bne.w	8002bb8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d126      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x47a>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a54:	4413      	add	r3, r2
 8002a56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	00da      	lsls	r2, r3, #3
 8002a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a60:	4413      	add	r3, r2
 8002a62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e01a      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d116      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aaa:	4413      	add	r3, r2
 8002aac:	667b      	str	r3, [r7, #100]	; 0x64
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00da      	lsls	r2, r3, #3
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002abc:	663b      	str	r3, [r7, #96]	; 0x60
 8002abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	677b      	str	r3, [r7, #116]	; 0x74
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d12b      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x516>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	4413      	add	r3, r2
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00da      	lsls	r2, r3, #3
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	e017      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x546>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	785b      	ldrb	r3, [r3, #1]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d113      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x546>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	4413      	add	r3, r2
 8002b42:	677b      	str	r3, [r7, #116]	; 0x74
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	00da      	lsls	r2, r3, #3
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b52:	673b      	str	r3, [r7, #112]	; 0x70
 8002b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f006 fd0a 	bl	800957a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 811a 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	441a      	add	r2, r3
 8002b9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8013      	strh	r3, [r2, #0]
 8002bb6:	e0f6      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d121      	bne.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 80ca 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c28:	441a      	add	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d30b      	bcc.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	621a      	str	r2, [r3, #32]
 8002c50:	e017      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002c5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c6a:	e00a      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	657b      	str	r3, [r7, #84]	; 0x54
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d165      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x748>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	4413      	add	r3, r2
 8002ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00da      	lsls	r2, r3, #3
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8002cce:	d91d      	bls.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	e041      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x716>
 8002d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	e032      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x730>
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d40:	3301      	adds	r3, #1
 8002d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e019      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d115      	bne.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d72:	4413      	add	r3, r2
 8002d74:	657b      	str	r3, [r7, #84]	; 0x54
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	00da      	lsls	r2, r3, #3
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	4413      	add	r3, r2
 8002d80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
 8002d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6959      	ldr	r1, [r3, #20]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	895a      	ldrh	r2, [r3, #10]
 8002d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f004 f939 	bl	8007018 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc0:	82bb      	strh	r3, [r7, #20]
 8002dc2:	8abb      	ldrh	r3, [r7, #20]
 8002dc4:	f083 0310 	eor.w	r3, r3, #16
 8002dc8:	82bb      	strh	r3, [r7, #20]
 8002dca:	8abb      	ldrh	r3, [r7, #20]
 8002dcc:	f083 0320 	eor.w	r3, r3, #32
 8002dd0:	82bb      	strh	r3, [r7, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	8abb      	ldrh	r3, [r7, #20]
 8002de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3790      	adds	r7, #144	; 0x90
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1e:	897b      	ldrh	r3, [r7, #10]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e009      	b.n	8002e4a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e36:	897a      	ldrh	r2, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	80da      	strh	r2, [r3, #6]
 8002e5e:	e00b      	b.n	8002e78 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2201      	movs	r2, #1
 8002e64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	58000400 	.word	0x58000400

08002efc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	58000400 	.word	0x58000400

08002f18 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f26:	6053      	str	r3, [r2, #4]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	58000400 	.word	0x58000400

08002f38 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f4a:	d101      	bne.n	8002f50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002faa:	d101      	bne.n	8002fb0 <LL_RCC_HSE_IsReady+0x18>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <LL_RCC_HSE_IsReady+0x1a>
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300a:	d101      	bne.n	8003010 <LL_RCC_HSI_IsReady+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_RCC_HSI_IsReady+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d101      	bne.n	80030a2 <LL_RCC_HSI48_IsReady+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_RCC_HSI48_IsReady+0x1a>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800313a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d101      	bne.n	800314e <LL_RCC_LSE_IsReady+0x18>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <LL_RCC_LSE_IsReady+0x1a>
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d101      	bne.n	80031b6 <LL_RCC_LSI1_IsReady+0x18>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_RCC_LSI1_IsReady+0x1a>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d101      	bne.n	800321e <LL_RCC_LSI2_IsReady+0x18>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_RCC_LSI2_IsReady+0x1a>
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6013      	str	r3, [r2, #0]
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d101      	bne.n	80032aa <LL_RCC_MSI_IsReady+0x16>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_RCC_MSI_IsReady+0x18>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2bb0      	cmp	r3, #176	; 0xb0
 80032f4:	d901      	bls.n	80032fa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80032f6:	23b0      	movs	r3, #176	; 0xb0
 80032f8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80032fa:	687b      	ldr	r3, [r7, #4]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 0203 	bic.w	r2, r3, #3
 8003344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80033ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033d6:	f023 020f 	bic.w	r2, r3, #15
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800342e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	6013      	str	r3, [r2, #0]
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a8:	6013      	str	r3, [r2, #0]
}
 80034aa:	bf00      	nop
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c6:	d101      	bne.n	80034cc <LL_RCC_PLL_IsReady+0x18>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <LL_RCC_PLL_IsReady+0x1a>
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80034f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0303 	and.w	r3, r3, #3
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d101      	bne.n	8003552 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003572:	d101      	bne.n	8003578 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d101      	bne.n	800359e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035bc:	d101      	bne.n	80035c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80035d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035e0:	d101      	bne.n	80035e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b08d      	sub	sp, #52	; 0x34
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e363      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 808d 	beq.w	800372e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003614:	f7ff fea1 	bl	800335a <LL_RCC_GetSysClkSource>
 8003618:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800361a:	f7ff ff82 	bl	8003522 <LL_RCC_PLL_GetMainSource>
 800361e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x3e>
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d147      	bne.n	80036bc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	2b01      	cmp	r3, #1
 8003630:	d144      	bne.n	80036bc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e347      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003642:	f7ff fe4c 	bl	80032de <LL_RCC_MSI_GetRange>
 8003646:	4603      	mov	r3, r0
 8003648:	429c      	cmp	r4, r3
 800364a:	d914      	bls.n	8003676 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd05 	bl	8004060 <RCC_SetFlashLatencyFromMSIRange>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e336      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fe26 	bl	80032b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fe4a 	bl	8003308 <LL_RCC_MSI_SetCalibTrimming>
 8003674:	e013      	b.n	800369e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fe1b 	bl	80032b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fe3f 	bl	8003308 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fce6 	bl	8004060 <RCC_SetFlashLatencyFromMSIRange>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e317      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800369e:	f000 fccb 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4aa4      	ldr	r2, [pc, #656]	; (8003938 <HAL_RCC_OscConfig+0x344>)
 80036a6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036a8:	4ba4      	ldr	r3, [pc, #656]	; (800393c <HAL_RCC_OscConfig+0x348>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fbbb 	bl	8000e28 <HAL_InitTick>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d039      	beq.n	800372c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e308      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01e      	beq.n	8003702 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036c4:	f7ff fdc8 	bl	8003258 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c8:	f7fd fbfc 	bl	8000ec4 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d0:	f7fd fbf8 	bl	8000ec4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e2f5      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80036e2:	f7ff fdd7 	bl	8003294 <LL_RCC_MSI_IsReady>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f1      	beq.n	80036d0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fde0 	bl	80032b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fe04 	bl	8003308 <LL_RCC_MSI_SetCalibTrimming>
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003702:	f7ff fdb8 	bl	8003276 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003706:	f7fd fbdd 	bl	8000ec4 <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370e:	f7fd fbd9 	bl	8000ec4 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e2d6      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003720:	f7ff fdb8 	bl	8003294 <LL_RCC_MSI_IsReady>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f1      	bne.n	800370e <HAL_RCC_OscConfig+0x11a>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800372c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d047      	beq.n	80037ca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	f7ff fe0e 	bl	800335a <LL_RCC_GetSysClkSource>
 800373e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003740:	f7ff feef 	bl	8003522 <LL_RCC_PLL_GetMainSource>
 8003744:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d005      	beq.n	8003758 <HAL_RCC_OscConfig+0x164>
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d108      	bne.n	8003764 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d134      	bne.n	80037ca <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e2b4      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0x180>
 800376e:	f7ff fbf5 	bl	8002f5c <LL_RCC_HSE_Enable>
 8003772:	e001      	b.n	8003778 <HAL_RCC_OscConfig+0x184>
 8003774:	f7ff fc01 	bl	8002f7a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fd fba0 	bl	8000ec4 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fd fb9c 	bl	8000ec4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e299      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800379a:	f7ff fbfd 	bl	8002f98 <LL_RCC_HSE_IsReady>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f1      	beq.n	8003788 <HAL_RCC_OscConfig+0x194>
 80037a4:	e011      	b.n	80037ca <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd fb8d 	bl	8000ec4 <HAL_GetTick>
 80037aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ae:	f7fd fb89 	bl	8000ec4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e286      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80037c0:	f7ff fbea 	bl	8002f98 <LL_RCC_HSE_IsReady>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f1      	bne.n	80037ae <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04c      	beq.n	8003870 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d6:	f7ff fdc0 	bl	800335a <LL_RCC_GetSysClkSource>
 80037da:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037dc:	f7ff fea1 	bl	8003522 <LL_RCC_PLL_GetMainSource>
 80037e0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_OscConfig+0x200>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d10e      	bne.n	800380c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d10b      	bne.n	800380c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e266      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fc09 	bl	800301c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800380a:	e031      	b.n	8003870 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d019      	beq.n	8003848 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	f7ff fbd2 	bl	8002fbc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fd fb54 	bl	8000ec4 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003820:	f7fd fb50 	bl	8000ec4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e24d      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003832:	f7ff fbe1 	bl	8002ff8 <LL_RCC_HSI_IsReady>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f1      	beq.n	8003820 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fbeb 	bl	800301c <LL_RCC_HSI_SetCalibTrimming>
 8003846:	e013      	b.n	8003870 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003848:	f7ff fbc7 	bl	8002fda <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fd fb3a 	bl	8000ec4 <HAL_GetTick>
 8003850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003854:	f7fd fb36 	bl	8000ec4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e233      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003866:	f7ff fbc7 	bl	8002ff8 <LL_RCC_HSI_IsReady>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f1      	bne.n	8003854 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a3 	beq.w	80039d0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d076      	beq.n	8003980 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d046      	beq.n	800392c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800389e:	f7ff fc7e 	bl	800319e <LL_RCC_LSI1_IsReady>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d113      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80038a8:	f7ff fc57 	bl	800315a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038ac:	f7fd fb0a 	bl	8000ec4 <HAL_GetTick>
 80038b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80038b4:	f7fd fb06 	bl	8000ec4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e203      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80038c6:	f7ff fc6a 	bl	800319e <LL_RCC_LSI1_IsReady>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f1      	beq.n	80038b4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80038d0:	f7ff fc77 	bl	80031c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd faf6 	bl	8000ec4 <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80038dc:	f7fd faf2 	bl	8000ec4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e1ef      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80038ee:	f7ff fc8a 	bl	8003206 <LL_RCC_LSI2_IsReady>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f1      	beq.n	80038dc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fc94 	bl	800322a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003902:	f7ff fc3b 	bl	800317c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fd fadd 	bl	8000ec4 <HAL_GetTick>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800390e:	f7fd fad9 	bl	8000ec4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e1d6      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003920:	f7ff fc3d 	bl	800319e <LL_RCC_LSI1_IsReady>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f1      	bne.n	800390e <HAL_RCC_OscConfig+0x31a>
 800392a:	e051      	b.n	80039d0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800392c:	f7ff fc15 	bl	800315a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fac8 	bl	8000ec4 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003936:	e00c      	b.n	8003952 <HAL_RCC_OscConfig+0x35e>
 8003938:	2000004c 	.word	0x2000004c
 800393c:	20000050 	.word	0x20000050
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003940:	f7fd fac0 	bl	8000ec4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1bd      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003952:	f7ff fc24 	bl	800319e <LL_RCC_LSI1_IsReady>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f1      	beq.n	8003940 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800395c:	f7ff fc42 	bl	80031e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003962:	f7fd faaf 	bl	8000ec4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e1ac      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003974:	f7ff fc47 	bl	8003206 <LL_RCC_LSI2_IsReady>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f1      	bne.n	8003962 <HAL_RCC_OscConfig+0x36e>
 800397e:	e027      	b.n	80039d0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003980:	f7ff fc30 	bl	80031e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fd fa9e 	bl	8000ec4 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800398c:	f7fd fa9a 	bl	8000ec4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b03      	cmp	r3, #3
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e197      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800399e:	f7ff fc32 	bl	8003206 <LL_RCC_LSI2_IsReady>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f1      	bne.n	800398c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80039a8:	f7ff fbe8 	bl	800317c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd fa8a 	bl	8000ec4 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80039b4:	f7fd fa86 	bl	8000ec4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e183      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80039c6:	f7ff fbea 	bl	800319e <LL_RCC_LSI1_IsReady>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f1      	bne.n	80039b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05b      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	4ba7      	ldr	r3, [pc, #668]	; (8003c7c <HAL_RCC_OscConfig+0x688>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d114      	bne.n	8003a12 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80039e8:	f7ff fa78 	bl	8002edc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ec:	f7fd fa6a 	bl	8000ec4 <HAL_GetTick>
 80039f0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fd fa66 	bl	8000ec4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e163      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a06:	4b9d      	ldr	r3, [pc, #628]	; (8003c7c <HAL_RCC_OscConfig+0x688>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d102      	bne.n	8003a20 <HAL_RCC_OscConfig+0x42c>
 8003a1a:	f7ff fb48 	bl	80030ae <LL_RCC_LSE_Enable>
 8003a1e:	e00c      	b.n	8003a3a <HAL_RCC_OscConfig+0x446>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d104      	bne.n	8003a32 <HAL_RCC_OscConfig+0x43e>
 8003a28:	f7ff fb63 	bl	80030f2 <LL_RCC_LSE_EnableBypass>
 8003a2c:	f7ff fb3f 	bl	80030ae <LL_RCC_LSE_Enable>
 8003a30:	e003      	b.n	8003a3a <HAL_RCC_OscConfig+0x446>
 8003a32:	f7ff fb4d 	bl	80030d0 <LL_RCC_LSE_Disable>
 8003a36:	f7ff fb6d 	bl	8003114 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d014      	beq.n	8003a6c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a42:	f7fd fa3f 	bl	8000ec4 <HAL_GetTick>
 8003a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd fa3b 	bl	8000ec4 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e136      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a60:	f7ff fb69 	bl	8003136 <LL_RCC_LSE_IsReady>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ef      	beq.n	8003a4a <HAL_RCC_OscConfig+0x456>
 8003a6a:	e013      	b.n	8003a94 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fa2a 	bl	8000ec4 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fa26 	bl	8000ec4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e121      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003a8a:	f7ff fb54 	bl	8003136 <LL_RCC_LSE_IsReady>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ef      	bne.n	8003a74 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02c      	beq.n	8003afa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d014      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aa8:	f7ff facd 	bl	8003046 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fa0a 	bl	8000ec4 <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab4:	f7fd fa06 	bl	8000ec4 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e103      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003ac6:	f7ff fae0 	bl	800308a <LL_RCC_HSI48_IsReady>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f1      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4c0>
 8003ad0:	e013      	b.n	8003afa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ad2:	f7ff fac9 	bl	8003068 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fd f9f5 	bl	8000ec4 <HAL_GetTick>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ade:	f7fd f9f1 	bl	8000ec4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0ee      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003af0:	f7ff facb 	bl	800308a <LL_RCC_HSI48_IsReady>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f1      	bne.n	8003ade <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80e4 	beq.w	8003ccc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b04:	f7ff fc29 	bl	800335a <LL_RCC_GetSysClkSource>
 8003b08:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	f040 80b4 	bne.w	8003c84 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0203 	and.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d123      	bne.n	8003b72 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d11c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d114      	bne.n	8003b72 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d10d      	bne.n	8003b72 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d05d      	beq.n	8003c2e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d058      	beq.n	8003c2a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0a1      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b8a:	f7ff fc84 	bl	8003496 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b8e:	f7fd f999 	bl	8000ec4 <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fd f995 	bl	8000ec4 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e092      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ef      	bne.n	8003b96 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_OscConfig+0x68c>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bc8:	4311      	orrs	r1, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bce:	0212      	lsls	r2, r2, #8
 8003bd0:	4311      	orrs	r1, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bdc:	4311      	orrs	r1, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003be2:	430a      	orrs	r2, r1
 8003be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bec:	f7ff fc44 	bl	8003478 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c00:	f7fd f960 	bl	8000ec4 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd f95c 	bl	8000ec4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e059      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ef      	beq.n	8003c08 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c28:	e050      	b.n	8003ccc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e04f      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d147      	bne.n	8003ccc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c3c:	f7ff fc1c 	bl	8003478 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c50:	f7fd f938 	bl	8000ec4 <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fd f934 	bl	8000ec4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e031      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0ef      	beq.n	8003c58 <HAL_RCC_OscConfig+0x664>
 8003c78:	e028      	b.n	8003ccc <HAL_RCC_OscConfig+0x6d8>
 8003c7a:	bf00      	nop
 8003c7c:	58000400 	.word	0x58000400
 8003c80:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d01e      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	f7ff fc04 	bl	8003496 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd f919 	bl	8000ec4 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fd f915 	bl	8000ec4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e012      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ef      	bne.n	8003c96 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_OscConfig+0x6e4>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60cb      	str	r3, [r1, #12]
 8003cc6:	e001      	b.n	8003ccc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3734      	adds	r7, #52	; 0x34
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	eefefffc 	.word	0xeefefffc

08003cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e12d      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b98      	ldr	r3, [pc, #608]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d91b      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b95      	ldr	r3, [pc, #596]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 0207 	bic.w	r2, r3, #7
 8003d06:	4993      	ldr	r1, [pc, #588]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0e:	f7fd f8d9 	bl	8000ec4 <HAL_GetTick>
 8003d12:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d16:	f7fd f8d5 	bl	8000ec4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e111      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d28:	4b8a      	ldr	r3, [pc, #552]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d1ef      	bne.n	8003d16 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fb13 	bl	8003372 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d4c:	f7fd f8ba 	bl	8000ec4 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d54:	f7fd f8b6 	bl	8000ec4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e0f2      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d66:	f7ff fbe8 	bl	800353a <LL_RCC_IsActiveFlag_HPRE>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f1      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d016      	beq.n	8003daa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fb0a 	bl	800339a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d86:	f7fd f89d 	bl	8000ec4 <HAL_GetTick>
 8003d8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d8e:	f7fd f899 	bl	8000ec4 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0d5      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003da0:	f7ff fbdd 	bl	800355e <LL_RCC_IsActiveFlag_C2HPRE>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f1      	beq.n	8003d8e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fb03 	bl	80033c6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dc0:	f7fd f880 	bl	8000ec4 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dc8:	f7fd f87c 	bl	8000ec4 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0b8      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003dda:	f7ff fbd3 	bl	8003584 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f1      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d016      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fafd 	bl	80033f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dfa:	f7fd f863 	bl	8000ec4 <HAL_GetTick>
 8003dfe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e02:	f7fd f85f 	bl	8000ec4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e09b      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003e14:	f7ff fbc9 	bl	80035aa <LL_RCC_IsActiveFlag_PPRE1>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f1      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d017      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff faf3 	bl	800341c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e36:	f7fd f845 	bl	8000ec4 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e3e:	f7fd f841 	bl	8000ec4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e07d      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003e50:	f7ff fbbd 	bl	80035ce <LL_RCC_IsActiveFlag_PPRE2>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f1      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d043      	beq.n	8003eee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003e6e:	f7ff f893 	bl	8002f98 <LL_RCC_HSE_IsReady>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11e      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e067      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003e84:	f7ff fb16 	bl	80034b4 <LL_RCC_PLL_IsReady>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d113      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e05c      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003e9a:	f7ff f9fb 	bl	8003294 <LL_RCC_MSI_IsReady>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e051      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003ea8:	f7ff f8a6 	bl	8002ff8 <LL_RCC_HSI_IsReady>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e04a      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fa39 	bl	8003332 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd f800 	bl	8000ec4 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fc fffc 	bl	8000ec4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e036      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	f7ff fa3c 	bl	800335a <LL_RCC_GetSysClkSource>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d1ec      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d21b      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 0207 	bic.w	r2, r3, #7
 8003f04:	4913      	ldr	r1, [pc, #76]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0c:	f7fc ffda 	bl	8000ec4 <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f14:	f7fc ffd6 	bl	8000ec4 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e012      	b.n	8003f4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_ClockConfig+0x278>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d1ef      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f34:	f000 f880 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4a07      	ldr	r2, [pc, #28]	; (8003f58 <HAL_RCC_ClockConfig+0x27c>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003f3e:	f7fc ffcd 	bl	8000edc <HAL_GetTickPrio>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc ff6f 	bl	8000e28 <HAL_InitTick>
 8003f4a:	4603      	mov	r3, r0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	58004000 	.word	0x58004000
 8003f58:	2000004c 	.word	0x2000004c

08003f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f62:	f7ff f9fa 	bl	800335a <LL_RCC_GetSysClkSource>
 8003f66:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003f6e:	f7ff f9b6 	bl	80032de <LL_RCC_MSI_GetRange>
 8003f72:	4603      	mov	r3, r0
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	4a2b      	ldr	r2, [pc, #172]	; (8004028 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	e04b      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d102      	bne.n	8003f90 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f8a:	4b28      	ldr	r3, [pc, #160]	; (800402c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e045      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d10a      	bne.n	8003fac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f96:	f7fe ffcf 	bl	8002f38 <LL_RCC_HSE_IsEnabledDiv2>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003fa0:	4b23      	ldr	r3, [pc, #140]	; (8004030 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e03a      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e037      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003fac:	f7ff fab9 	bl	8003522 <LL_RCC_PLL_GetMainSource>
 8003fb0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x64>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x6a>
 8003fbe:	e00d      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fc2:	60bb      	str	r3, [r7, #8]
        break;
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003fc6:	f7fe ffb7 	bl	8002f38 <LL_RCC_HSE_IsEnabledDiv2>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d102      	bne.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003fd2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003fd4:	e00d      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003fd8:	60bb      	str	r3, [r7, #8]
        break;
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003fdc:	f7ff f97f 	bl	80032de <LL_RCC_MSI_GetRange>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fee:	60bb      	str	r3, [r7, #8]
        break;
 8003ff0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003ff2:	f7ff fa71 	bl	80034d8 <LL_RCC_PLL_GetN>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	fb03 f402 	mul.w	r4, r3, r2
 8003ffe:	f7ff fa84 	bl	800350a <LL_RCC_PLL_GetDivider>
 8004002:	4603      	mov	r3, r0
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	3301      	adds	r3, #1
 8004008:	fbb4 f4f3 	udiv	r4, r4, r3
 800400c:	f7ff fa71 	bl	80034f2 <LL_RCC_PLL_GetR>
 8004010:	4603      	mov	r3, r0
 8004012:	0f5b      	lsrs	r3, r3, #29
 8004014:	3301      	adds	r3, #1
 8004016:	fbb4 f3f3 	udiv	r3, r4, r3
 800401a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800401c:	68fb      	ldr	r3, [r7, #12]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
 8004026:	bf00      	nop
 8004028:	0800c3c8 	.word	0x0800c3c8
 800402c:	00f42400 	.word	0x00f42400
 8004030:	003d0900 	.word	0x003d0900
 8004034:	007a1200 	.word	0x007a1200

08004038 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b598      	push	{r3, r4, r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800403c:	f7ff ff8e 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8004040:	4604      	mov	r4, r0
 8004042:	f7ff f9ff 	bl	8003444 <LL_RCC_GetAHBPrescaler>
 8004046:	4603      	mov	r3, r0
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	4a03      	ldr	r2, [pc, #12]	; (800405c <HAL_RCC_GetHCLKFreq+0x24>)
 8004050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004054:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd98      	pop	{r3, r4, r7, pc}
 800405c:	0800c388 	.word	0x0800c388

08004060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2bb0      	cmp	r3, #176	; 0xb0
 800406c:	d903      	bls.n	8004076 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e007      	b.n	8004086 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004086:	f7ff f9e9 	bl	800345c <LL_RCC_GetAHB4Prescaler>
 800408a:	4603      	mov	r3, r0
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	0c9c      	lsrs	r4, r3, #18
 80040aa:	f7fe ff27 	bl	8002efc <HAL_PWREx_GetVoltageRange>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4619      	mov	r1, r3
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 f80c 	bl	80040d0 <RCC_SetFlashLatency>
 80040b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	0800c3c8 	.word	0x0800c3c8
 80040c8:	0800c388 	.word	0x0800c388
 80040cc:	431bde83 	.word	0x431bde83

080040d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b093      	sub	sp, #76	; 0x4c
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <RCC_SetFlashLatency+0xe8>)
 80040dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80040e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80040e6:	4a35      	ldr	r2, [pc, #212]	; (80041bc <RCC_SetFlashLatency+0xec>)
 80040e8:	f107 031c 	add.w	r3, r7, #28
 80040ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80040ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80040f2:	4b33      	ldr	r3, [pc, #204]	; (80041c0 <RCC_SetFlashLatency+0xf0>)
 80040f4:	f107 040c 	add.w	r4, r7, #12
 80040f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80040fe:	2300      	movs	r3, #0
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d11a      	bne.n	8004140 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800410a:	2300      	movs	r3, #0
 800410c:	643b      	str	r3, [r7, #64]	; 0x40
 800410e:	e013      	b.n	8004138 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	3348      	adds	r3, #72	; 0x48
 8004116:	443b      	add	r3, r7
 8004118:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d807      	bhi.n	8004132 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3348      	adds	r3, #72	; 0x48
 8004128:	443b      	add	r3, r7
 800412a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004130:	e020      	b.n	8004174 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004134:	3301      	adds	r3, #1
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
 8004138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413a:	2b03      	cmp	r3, #3
 800413c:	d9e8      	bls.n	8004110 <RCC_SetFlashLatency+0x40>
 800413e:	e019      	b.n	8004174 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004140:	2300      	movs	r3, #0
 8004142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004144:	e013      	b.n	800416e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3348      	adds	r3, #72	; 0x48
 800414c:	443b      	add	r3, r7
 800414e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d807      	bhi.n	8004168 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	3348      	adds	r3, #72	; 0x48
 800415e:	443b      	add	r3, r7
 8004160:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004166:	e005      	b.n	8004174 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416a:	3301      	adds	r3, #1
 800416c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004170:	2b02      	cmp	r3, #2
 8004172:	d9e8      	bls.n	8004146 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <RCC_SetFlashLatency+0xf4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 0207 	bic.w	r2, r3, #7
 800417c:	4911      	ldr	r1, [pc, #68]	; (80041c4 <RCC_SetFlashLatency+0xf4>)
 800417e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004184:	f7fc fe9e 	bl	8000ec4 <HAL_GetTick>
 8004188:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800418a:	e008      	b.n	800419e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800418c:	f7fc fe9a 	bl	8000ec4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e007      	b.n	80041ae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <RCC_SetFlashLatency+0xf4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1ef      	bne.n	800418c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	374c      	adds	r7, #76	; 0x4c
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd90      	pop	{r4, r7, pc}
 80041b6:	bf00      	nop
 80041b8:	0800c308 	.word	0x0800c308
 80041bc:	0800c318 	.word	0x0800c318
 80041c0:	0800c324 	.word	0x0800c324
 80041c4:	58004000 	.word	0x58004000

080041c8 <LL_RCC_LSE_IsEnabled>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <LL_RCC_LSE_IsEnabled+0x18>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_RCC_LSE_IsReady>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d101      	bne.n	8004204 <LL_RCC_LSE_IsReady+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_RCC_LSE_IsReady+0x1a>
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_RCC_MSI_EnablePLLMode>:
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_RCC_SetRFWKPClockSource>:
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_RCC_SetSMPSClockSource>:
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f023 0203 	bic.w	r2, r3, #3
 800426c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4313      	orrs	r3, r2
 8004274:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LL_RCC_SetSMPSPrescaler>:
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800428a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4313      	orrs	r3, r2
 800429c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_RCC_SetUSARTClockSource>:
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_SetLPUARTClockSource>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_RCC_SetI2CClockSource>:
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800430a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800431a:	43db      	mvns	r3, r3
 800431c:	401a      	ands	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_RCC_SetLPTIMClockSource>:
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	43db      	mvns	r3, r3
 8004354:	401a      	ands	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <LL_RCC_SetSAIClockSource>:
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_RCC_SetRNGClockSource>:
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80043a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80043b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LL_RCC_SetCLK48ClockSource>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <LL_RCC_SetUSBClockSource>:
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ffe3 	bl	80043c8 <LL_RCC_SetCLK48ClockSource>
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <LL_RCC_SetADCClockSource>:
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800441e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <LL_RCC_SetRTCClockSource>:
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800444a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_RCC_GetRTCClockSource>:
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_RCC_ForceBackupDomainReset>:
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_RCC_ReleaseBackupDomainReset>:
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044b6:	bf00      	nop
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_RCC_PLLSAI1_Enable>:
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_RCC_PLLSAI1_Disable>:
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_RCC_PLLSAI1_IsReady>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450e:	d101      	bne.n	8004514 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004528:	2300      	movs	r3, #0
 800452a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800452c:	2300      	movs	r3, #0
 800452e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d034      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004544:	d021      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004546:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800454a:	d81b      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800454c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004550:	d01d      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004556:	d815      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800455c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004560:	d110      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004572:	e00d      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f000 f94d 	bl	8004818 <RCCEx_PLLSAI1_ConfigNP>
 800457e:	4603      	mov	r3, r0
 8004580:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004582:	e005      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
        break;
 8004588:	e002      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800458e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004590:	7ffb      	ldrb	r3, [r7, #31]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fee8 	bl	8004370 <LL_RCC_SetSAIClockSource>
 80045a0:	e001      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	7ffb      	ldrb	r3, [r7, #31]
 80045a4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d046      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80045b2:	f7ff ff56 	bl	8004462 <LL_RCC_GetRTCClockSource>
 80045b6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d03c      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80045c2:	f7fe fc8b 	bl	8002edc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff30 	bl	8004436 <LL_RCC_SetRTCClockSource>
 80045d6:	e02e      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80045e2:	f7ff ff4b 	bl	800447c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80045e6:	f7ff ff5a 	bl	800449e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80045f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004602:	f7ff fde1 	bl	80041c8 <LL_RCC_LSE_IsEnabled>
 8004606:	4603      	mov	r3, r0
 8004608:	2b01      	cmp	r3, #1
 800460a:	d114      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800460c:	f7fc fc5a 	bl	8000ec4 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004612:	e00b      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fc fc56 	bl	8000ec4 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d902      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	77fb      	strb	r3, [r7, #31]
              break;
 800462a:	e004      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800462c:	f7ff fdde 	bl	80041ec <LL_RCC_LSE_IsReady>
 8004630:	4603      	mov	r3, r0
 8004632:	2b01      	cmp	r3, #1
 8004634:	d1ee      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	77bb      	strb	r3, [r7, #30]
 800463a:	e001      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7ffb      	ldrb	r3, [r7, #31]
 800463e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fe2a 	bl	80042aa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fe35 	bl	80042d6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fe5d 	bl	800433c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fe52 	bl	800433c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fe2a 	bl	8004302 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d004      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fe1f 	bl	8004302 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d022      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fe8d 	bl	80043f4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046e2:	d107      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046fc:	d10b      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f8e3 	bl	80048ce <RCCEx_PLLSAI1_ConfigNQ>
 8004708:	4603      	mov	r3, r0
 800470a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800470c:	7ffb      	ldrb	r3, [r7, #31]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02b      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472a:	d008      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	2b00      	cmp	r3, #0
 800473c:	d105      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fe2a 	bl	800439c <LL_RCC_SetRNGClockSource>
 8004748:	e00a      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	2000      	movs	r0, #0
 8004756:	f7ff fe21 	bl	800439c <LL_RCC_SetRNGClockSource>
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fe34 	bl	80043c8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004768:	d107      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004778:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	2b00      	cmp	r3, #0
 8004784:	d022      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fe3d 	bl	800440a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004798:	d107      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b2:	d10b      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f8e3 	bl	8004984 <RCCEx_PLLSAI1_ConfigNR>
 80047be:	4603      	mov	r3, r0
 80047c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80047c8:	7ffb      	ldrb	r3, [r7, #31]
 80047ca:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fd26 	bl	800422e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fd45 	bl	8004282 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fd2c 	bl	800425a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004802:	7fbb      	ldrb	r3, [r7, #30]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004810:	f7ff fcfe 	bl	8004210 <LL_RCC_MSI_EnablePLLMode>
}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}

08004818 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004824:	f7ff fe5b 	bl	80044de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004828:	f7fc fb4c 	bl	8000ec4 <HAL_GetTick>
 800482c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800482e:	e009      	b.n	8004844 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004830:	f7fc fb48 	bl	8000ec4 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d902      	bls.n	8004844 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	73fb      	strb	r3, [r7, #15]
      break;
 8004842:	e004      	b.n	800484e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004844:	f7ff fe5a 	bl	80044fc <LL_RCC_PLLSAI1_IsReady>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d137      	bne.n	80048c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004868:	4313      	orrs	r3, r2
 800486a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800487e:	4313      	orrs	r3, r2
 8004880:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004882:	f7ff fe1d 	bl	80044c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004886:	f7fc fb1d 	bl	8000ec4 <HAL_GetTick>
 800488a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800488c:	e009      	b.n	80048a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800488e:	f7fc fb19 	bl	8000ec4 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d902      	bls.n	80048a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	73fb      	strb	r3, [r7, #15]
        break;
 80048a0:	e004      	b.n	80048ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80048a2:	f7ff fe2b 	bl	80044fc <LL_RCC_PLLSAI1_IsReady>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d1f0      	bne.n	800488e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80048da:	f7ff fe00 	bl	80044de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048de:	f7fc faf1 	bl	8000ec4 <HAL_GetTick>
 80048e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80048e4:	e009      	b.n	80048fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048e6:	f7fc faed 	bl	8000ec4 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d902      	bls.n	80048fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e004      	b.n	8004904 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80048fa:	f7ff fdff 	bl	80044fc <LL_RCC_PLLSAI1_IsReady>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d137      	bne.n	800497a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491e:	4313      	orrs	r3, r2
 8004920:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004934:	4313      	orrs	r3, r2
 8004936:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004938:	f7ff fdc2 	bl	80044c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493c:	f7fc fac2 	bl	8000ec4 <HAL_GetTick>
 8004940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004942:	e009      	b.n	8004958 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004944:	f7fc fabe 	bl	8000ec4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d902      	bls.n	8004958 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	73fb      	strb	r3, [r7, #15]
        break;
 8004956:	e004      	b.n	8004962 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004958:	f7ff fdd0 	bl	80044fc <LL_RCC_PLLSAI1_IsReady>
 800495c:	4603      	mov	r3, r0
 800495e:	2b01      	cmp	r3, #1
 8004960:	d1f0      	bne.n	8004944 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004976:	4313      	orrs	r3, r2
 8004978:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004990:	f7ff fda5 	bl	80044de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004994:	f7fc fa96 	bl	8000ec4 <HAL_GetTick>
 8004998:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800499a:	e009      	b.n	80049b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800499c:	f7fc fa92 	bl	8000ec4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d902      	bls.n	80049b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	73fb      	strb	r3, [r7, #15]
      break;
 80049ae:	e004      	b.n	80049ba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049b0:	f7ff fda4 	bl	80044fc <LL_RCC_PLLSAI1_IsReady>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d137      	bne.n	8004a30 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d4:	4313      	orrs	r3, r2
 80049d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ea:	4313      	orrs	r3, r2
 80049ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80049ee:	f7ff fd67 	bl	80044c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f2:	f7fc fa67 	bl	8000ec4 <HAL_GetTick>
 80049f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049f8:	e009      	b.n	8004a0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fa:	f7fc fa63 	bl	8000ec4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d902      	bls.n	8004a0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a0c:	e004      	b.n	8004a18 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a0e:	f7ff fd75 	bl	80044fc <LL_RCC_PLLSAI1_IsReady>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d1f0      	bne.n	80049fa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a4a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a70:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4013      	ands	r3, r2
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	f107 0014 	add.w	r0, r7, #20
 8004aac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	b004      	add	sp, #16
 8004ade:	4770      	bx	lr

08004ae0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b09d      	sub	sp, #116	; 0x74
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	78db      	ldrb	r3, [r3, #3]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d81f      	bhi.n	8004b52 <USB_ActivateEndpoint+0x72>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <USB_ActivateEndpoint+0x38>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b5b 	.word	0x08004b5b
 8004b24:	08004b37 	.word	0x08004b37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b34:	e012      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b3a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b42:	e00b      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b50:	e004      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004b58:	e000      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>
      break;
 8004b5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	b21a      	sxth	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b21b      	sxth	r3, r3
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	b21b      	sxth	r3, r3
 8004ba2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	7b1b      	ldrb	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 8178 	bne.w	8004ec2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8084 	beq.w	8004ce4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4413      	add	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	00da      	lsls	r2, r3, #3
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	88db      	ldrh	r3, [r3, #6]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	827b      	strh	r3, [r7, #18]
 8004c1e:	8a7b      	ldrh	r3, [r7, #18]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <USB_ActivateEndpoint+0x180>
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	823b      	strh	r3, [r7, #16]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	8a3b      	ldrh	r3, [r7, #16]
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	78db      	ldrb	r3, [r3, #3]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d020      	beq.n	8004caa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7e:	81bb      	strh	r3, [r7, #12]
 8004c80:	89bb      	ldrh	r3, [r7, #12]
 8004c82:	f083 0320 	eor.w	r3, r3, #32
 8004c86:	81bb      	strh	r3, [r7, #12]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	89bb      	ldrh	r3, [r7, #12]
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
 8004ca8:	e2d5      	b.n	8005256 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc0:	81fb      	strh	r3, [r7, #14]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
 8004ce2:	e2b8      	b.n	8005256 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	4413      	add	r3, r2
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	00da      	lsls	r2, r3, #3
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	4413      	add	r3, r2
 8004d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	88db      	ldrh	r3, [r3, #6]
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	4413      	add	r3, r2
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	00da      	lsls	r2, r3, #3
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	4413      	add	r3, r2
 8004d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b3e      	cmp	r3, #62	; 0x3e
 8004d52:	d91d      	bls.n	8004d90 <USB_ActivateEndpoint+0x2b0>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <USB_ActivateEndpoint+0x28e>
 8004d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	e026      	b.n	8004dde <USB_ActivateEndpoint+0x2fe>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <USB_ActivateEndpoint+0x2ce>
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	e017      	b.n	8004dde <USB_ActivateEndpoint+0x2fe>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <USB_ActivateEndpoint+0x2e8>
 8004dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	029b      	lsls	r3, r3, #10
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01b      	beq.n	8004e2e <USB_ActivateEndpoint+0x34e>
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0c:	843b      	strh	r3, [r7, #32]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	8c3b      	ldrh	r3, [r7, #32]
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d124      	bne.n	8004e80 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	83bb      	strh	r3, [r7, #28]
 8004e4e:	8bbb      	ldrh	r3, [r7, #28]
 8004e50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e54:	83bb      	strh	r3, [r7, #28]
 8004e56:	8bbb      	ldrh	r3, [r7, #28]
 8004e58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e5c:	83bb      	strh	r3, [r7, #28]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8bbb      	ldrh	r3, [r7, #28]
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
 8004e7e:	e1ea      	b.n	8005256 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	83fb      	strh	r3, [r7, #30]
 8004e98:	8bfb      	ldrh	r3, [r7, #30]
 8004e9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e9e:	83fb      	strh	r3, [r7, #30]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	8bfb      	ldrh	r3, [r7, #30]
 8004eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	8013      	strh	r3, [r2, #0]
 8004ec0:	e1c9      	b.n	8005256 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	78db      	ldrb	r3, [r3, #3]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d11e      	bne.n	8004f08 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8013      	strh	r3, [r2, #0]
 8004f06:	e01d      	b.n	8004f44 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f54:	4413      	add	r3, r2
 8004f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	00da      	lsls	r2, r3, #3
 8004f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	891b      	ldrh	r3, [r3, #8]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f88:	4413      	add	r3, r2
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	00da      	lsls	r2, r3, #3
 8004f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f94:	4413      	add	r3, r2
 8004f96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	895b      	ldrh	r3, [r3, #10]
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004faa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8093 	bne.w	80050dc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01b      	beq.n	800500a <USB_ActivateEndpoint+0x52a>
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005018:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01b      	beq.n	800505a <USB_ActivateEndpoint+0x57a>
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	877b      	strh	r3, [r7, #58]	; 0x3a
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	873b      	strh	r3, [r7, #56]	; 0x38
 8005072:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005074:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005078:	873b      	strh	r3, [r7, #56]	; 0x38
 800507a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800507c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005080:	873b      	strh	r3, [r7, #56]	; 0x38
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800508e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8013      	strh	r3, [r2, #0]
 80050da:	e0bc      	b.n	8005256 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80050ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01d      	beq.n	8005134 <USB_ActivateEndpoint+0x654>
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005144:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01d      	beq.n	800518c <USB_ActivateEndpoint+0x6ac>
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005184:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005188:	b29b      	uxth	r3, r3
 800518a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	78db      	ldrb	r3, [r3, #3]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d024      	beq.n	80051de <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051b2:	f083 0320 	eor.w	r3, r3, #32
 80051b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	b29b      	uxth	r3, r3
 80051da:	8013      	strh	r3, [r2, #0]
 80051dc:	e01d      	b.n	800521a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005230:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005256:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800525a:	4618      	mov	r0, r3
 800525c:	3774      	adds	r7, #116	; 0x74
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005268:	b480      	push	{r7}
 800526a:	b08d      	sub	sp, #52	; 0x34
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	7b1b      	ldrb	r3, [r3, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f040 808e 	bne.w	8005398 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d044      	beq.n	800530e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	81bb      	strh	r3, [r7, #12]
 8005292:	89bb      	ldrh	r3, [r7, #12]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <USB_DeactivateEndpoint+0x6c>
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	817b      	strh	r3, [r7, #10]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	441a      	add	r2, r3
 80052be:	897b      	ldrh	r3, [r7, #10]
 80052c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	813b      	strh	r3, [r7, #8]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	893b      	ldrh	r3, [r7, #8]
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]
 800530c:	e192      	b.n	8005634 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	827b      	strh	r3, [r7, #18]
 800531c:	8a7b      	ldrh	r3, [r7, #18]
 800531e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01b      	beq.n	800535e <USB_DeactivateEndpoint+0xf6>
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	823b      	strh	r3, [r7, #16]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	8a3b      	ldrh	r3, [r7, #16]
 800534a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535a:	b29b      	uxth	r3, r3
 800535c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005374:	81fb      	strh	r3, [r7, #14]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	89fb      	ldrh	r3, [r7, #14]
 8005382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005392:	b29b      	uxth	r3, r3
 8005394:	8013      	strh	r3, [r2, #0]
 8005396:	e14d      	b.n	8005634 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 80a5 	bne.w	80054ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	843b      	strh	r3, [r7, #32]
 80053b0:	8c3b      	ldrh	r3, [r7, #32]
 80053b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01b      	beq.n	80053f2 <USB_DeactivateEndpoint+0x18a>
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d0:	83fb      	strh	r3, [r7, #30]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	441a      	add	r2, r3
 80053dc:	8bfb      	ldrh	r3, [r7, #30]
 80053de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	83bb      	strh	r3, [r7, #28]
 8005400:	8bbb      	ldrh	r3, [r7, #28]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01b      	beq.n	8005442 <USB_DeactivateEndpoint+0x1da>
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	837b      	strh	r3, [r7, #26]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	441a      	add	r2, r3
 800542c:	8b7b      	ldrh	r3, [r7, #26]
 800542e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800543e:	b29b      	uxth	r3, r3
 8005440:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	833b      	strh	r3, [r7, #24]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	8b3b      	ldrh	r3, [r7, #24]
 8005466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005476:	b29b      	uxth	r3, r3
 8005478:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	82fb      	strh	r3, [r7, #22]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	8afb      	ldrh	r3, [r7, #22]
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c8:	82bb      	strh	r3, [r7, #20]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8abb      	ldrh	r3, [r7, #20]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
 80054ea:	e0a3      	b.n	8005634 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01b      	beq.n	800553c <USB_DeactivateEndpoint+0x2d4>
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005538:	b29b      	uxth	r3, r3
 800553a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	857b      	strh	r3, [r7, #42]	; 0x2a
 800554a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01b      	beq.n	800558c <USB_DeactivateEndpoint+0x324>
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	853b      	strh	r3, [r7, #40]	; 0x28
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005588:	b29b      	uxth	r3, r3
 800558a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	441a      	add	r2, r3
 80055ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	847b      	strh	r3, [r7, #34]	; 0x22
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3734      	adds	r7, #52	; 0x34
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b0c2      	sub	sp, #264	; 0x108
 8005646:	af00      	add	r7, sp, #0
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005650:	6018      	str	r0, [r3, #0]
 8005652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800565c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b01      	cmp	r3, #1
 800566a:	f040 86b7 	bne.w	80063dc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800566e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d908      	bls.n	800569c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800568a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800569a:	e007      	b.n	80056ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800569c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	7b1b      	ldrb	r3, [r3, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d13a      	bne.n	8005732 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6959      	ldr	r1, [r3, #20]
 80056c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	88da      	ldrh	r2, [r3, #6]
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056e2:	6800      	ldr	r0, [r0, #0]
 80056e4:	f001 fc98 	bl	8007018 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	00da      	lsls	r2, r3, #3
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	f000 be1f 	b.w	8006370 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	78db      	ldrb	r3, [r3, #3]
 800573e:	2b02      	cmp	r3, #2
 8005740:	f040 8462 	bne.w	8006008 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	f240 83df 	bls.w	8005f20 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 81c7 	beq.w	8005b92 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	633b      	str	r3, [r7, #48]	; 0x30
 8005810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d177      	bne.n	8005910 <USB_EPStartXfer+0x2ce>
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
 800582c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	4413      	add	r3, r2
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	00da      	lsls	r2, r3, #3
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	4413      	add	r3, r2
 8005856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005866:	b29a      	uxth	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005870:	2b3e      	cmp	r3, #62	; 0x3e
 8005872:	d921      	bls.n	80058b8 <USB_EPStartXfer+0x276>
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <USB_EPStartXfer+0x252>
 800588a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800588e:	3b01      	subs	r3, #1
 8005890:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29a      	uxth	r2, r3
 800589a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800589e:	b29b      	uxth	r3, r3
 80058a0:	029b      	lsls	r3, r3, #10
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4313      	orrs	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e050      	b.n	800595a <USB_EPStartXfer+0x318>
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <USB_EPStartXfer+0x294>
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e041      	b.n	800595a <USB_EPStartXfer+0x318>
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <USB_EPStartXfer+0x2b4>
 80058ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005900:	b29b      	uxth	r3, r3
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	b29b      	uxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	b29a      	uxth	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e024      	b.n	800595a <USB_EPStartXfer+0x318>
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d11c      	bne.n	800595a <USB_EPStartXfer+0x318>
 8005920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592e:	b29b      	uxth	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	4413      	add	r3, r2
 8005936:	633b      	str	r3, [r7, #48]	; 0x30
 8005938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	00da      	lsls	r2, r3, #3
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	4413      	add	r3, r2
 800594a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005954:	b29a      	uxth	r2, r3
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800595a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	895b      	ldrh	r3, [r3, #10]
 8005966:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6959      	ldr	r1, [r3, #20]
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597a:	b29b      	uxth	r3, r3
 800597c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005980:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005984:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005988:	6800      	ldr	r0, [r0, #0]
 800598a:	f001 fb45 	bl	8007018 <USB_WritePMA>
            ep->xfer_buff += len;
 800598e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599e:	441a      	add	r2, r3
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d90f      	bls.n	80059e8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80059c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d8:	1ad2      	subs	r2, r2, r3
 80059da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	621a      	str	r2, [r3, #32]
 80059e6:	e00e      	b.n	8005a06 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80059e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d177      	bne.n	8005b06 <USB_EPStartXfer+0x4c4>
 8005a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	4413      	add	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	00da      	lsls	r2, r3, #3
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a66:	2b3e      	cmp	r3, #62	; 0x3e
 8005a68:	d921      	bls.n	8005aae <USB_EPStartXfer+0x46c>
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <USB_EPStartXfer+0x448>
 8005a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e056      	b.n	8005b5c <USB_EPStartXfer+0x51a>
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <USB_EPStartXfer+0x48a>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	e047      	b.n	8005b5c <USB_EPStartXfer+0x51a>
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <USB_EPStartXfer+0x4aa>
 8005ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e02a      	b.n	8005b5c <USB_EPStartXfer+0x51a>
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d122      	bne.n	8005b5c <USB_EPStartXfer+0x51a>
 8005b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	623b      	str	r3, [r7, #32]
 8005b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	4413      	add	r3, r2
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	00da      	lsls	r2, r3, #3
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	891b      	ldrh	r3, [r3, #8]
 8005b68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6959      	ldr	r1, [r3, #20]
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	f001 fa44 	bl	8007018 <USB_WritePMA>
 8005b90:	e3ee      	b.n	8006370 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d177      	bne.n	8005c92 <USB_EPStartXfer+0x650>
 8005ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc2:	4413      	add	r3, r2
 8005bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	00da      	lsls	r2, r3, #3
 8005bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf4:	d921      	bls.n	8005c3a <USB_EPStartXfer+0x5f8>
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <USB_EPStartXfer+0x5d4>
 8005c0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c10:	3b01      	subs	r3, #1
 8005c12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e056      	b.n	8005ce8 <USB_EPStartXfer+0x6a6>
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <USB_EPStartXfer+0x616>
 8005c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e047      	b.n	8005ce8 <USB_EPStartXfer+0x6a6>
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <USB_EPStartXfer+0x636>
 8005c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c72:	3301      	adds	r3, #1
 8005c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	029b      	lsls	r3, r3, #10
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e02a      	b.n	8005ce8 <USB_EPStartXfer+0x6a6>
 8005c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d122      	bne.n	8005ce8 <USB_EPStartXfer+0x6a6>
 8005ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	653b      	str	r3, [r7, #80]	; 0x50
 8005cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc2:	4413      	add	r3, r2
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	00da      	lsls	r2, r3, #3
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	891b      	ldrh	r3, [r3, #8]
 8005cf4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6959      	ldr	r1, [r3, #20]
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	f001 f97e 	bl	8007018 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	441a      	add	r2, r3
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d90f      	bls.n	8005d76 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a1a      	ldr	r2, [r3, #32]
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	621a      	str	r2, [r3, #32]
 8005d74:	e00e      	b.n	8005d94 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2200      	movs	r2, #0
 8005d92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d177      	bne.n	8005ea0 <USB_EPStartXfer+0x85e>
 8005db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	4413      	add	r3, r2
 8005dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	00da      	lsls	r2, r3, #3
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	2b3e      	cmp	r3, #62	; 0x3e
 8005e02:	d921      	bls.n	8005e48 <USB_EPStartXfer+0x806>
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <USB_EPStartXfer+0x7e2>
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	4313      	orrs	r3, r2
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	e050      	b.n	8005eea <USB_EPStartXfer+0x8a8>
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <USB_EPStartXfer+0x824>
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	e041      	b.n	8005eea <USB_EPStartXfer+0x8a8>
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <USB_EPStartXfer+0x844>
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	029b      	lsls	r3, r3, #10
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	4313      	orrs	r3, r2
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	e024      	b.n	8005eea <USB_EPStartXfer+0x8a8>
 8005ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d11c      	bne.n	8005eea <USB_EPStartXfer+0x8a8>
 8005eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec4:	4413      	add	r3, r2
 8005ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	00da      	lsls	r2, r3, #3
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed8:	4413      	add	r3, r2
 8005eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	895b      	ldrh	r3, [r3, #10]
 8005ef6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6959      	ldr	r1, [r3, #20]
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f18:	6800      	ldr	r0, [r0, #0]
 8005f1a:	f001 f87d 	bl	8007018 <USB_WritePMA>
 8005f1e:	e227      	b.n	8006370 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fac:	4413      	add	r3, r2
 8005fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	00da      	lsls	r2, r3, #3
 8005fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	891b      	ldrh	r3, [r3, #8]
 8005fde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6959      	ldr	r1, [r3, #20]
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ff8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ffc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006000:	6800      	ldr	r0, [r0, #0]
 8006002:	f001 f809 	bl	8007018 <USB_WritePMA>
 8006006:	e1b3      	b.n	8006370 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a1a      	ldr	r2, [r3, #32]
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80c6 	beq.w	80061da <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	673b      	str	r3, [r7, #112]	; 0x70
 800605a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d177      	bne.n	800615a <USB_EPStartXfer+0xb18>
 800606a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	66bb      	str	r3, [r7, #104]	; 0x68
 8006076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006084:	b29b      	uxth	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800608a:	4413      	add	r3, r2
 800608c:	66bb      	str	r3, [r7, #104]	; 0x68
 800608e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	00da      	lsls	r2, r3, #3
 800609c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800609e:	4413      	add	r3, r2
 80060a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060a4:	667b      	str	r3, [r7, #100]	; 0x64
 80060a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ba:	2b3e      	cmp	r3, #62	; 0x3e
 80060bc:	d921      	bls.n	8006102 <USB_EPStartXfer+0xac0>
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <USB_EPStartXfer+0xa9c>
 80060d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060d8:	3b01      	subs	r3, #1
 80060da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	e050      	b.n	80061a4 <USB_EPStartXfer+0xb62>
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <USB_EPStartXfer+0xade>
 800610a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006118:	b29a      	uxth	r2, r3
 800611a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	e041      	b.n	80061a4 <USB_EPStartXfer+0xb62>
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d004      	beq.n	8006140 <USB_EPStartXfer+0xafe>
 8006136:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800613a:	3301      	adds	r3, #1
 800613c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29a      	uxth	r2, r3
 8006146:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800614a:	b29b      	uxth	r3, r3
 800614c:	029b      	lsls	r3, r3, #10
 800614e:	b29b      	uxth	r3, r3
 8006150:	4313      	orrs	r3, r2
 8006152:	b29a      	uxth	r2, r3
 8006154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	e024      	b.n	80061a4 <USB_EPStartXfer+0xb62>
 800615a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d11c      	bne.n	80061a4 <USB_EPStartXfer+0xb62>
 800616a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006178:	b29b      	uxth	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800617e:	4413      	add	r3, r2
 8006180:	673b      	str	r3, [r7, #112]	; 0x70
 8006182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006192:	4413      	add	r3, r2
 8006194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	895b      	ldrh	r3, [r3, #10]
 80061b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6959      	ldr	r1, [r3, #20]
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061d2:	6800      	ldr	r0, [r0, #0]
 80061d4:	f000 ff20 	bl	8007018 <USB_WritePMA>
 80061d8:	e0ca      	b.n	8006370 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d177      	bne.n	80062da <USB_EPStartXfer+0xc98>
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006204:	b29b      	uxth	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800620a:	4413      	add	r3, r2
 800620c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800620e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	00da      	lsls	r2, r3, #3
 800621c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800621e:	4413      	add	r3, r2
 8006220:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006224:	67bb      	str	r3, [r7, #120]	; 0x78
 8006226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006230:	b29a      	uxth	r2, r3
 8006232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623a:	2b3e      	cmp	r3, #62	; 0x3e
 800623c:	d921      	bls.n	8006282 <USB_EPStartXfer+0xc40>
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <USB_EPStartXfer+0xc1c>
 8006254:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006258:	3b01      	subs	r3, #1
 800625a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800625e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29a      	uxth	r2, r3
 8006264:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006268:	b29b      	uxth	r3, r3
 800626a:	029b      	lsls	r3, r3, #10
 800626c:	b29b      	uxth	r3, r3
 800626e:	4313      	orrs	r3, r2
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627a:	b29a      	uxth	r2, r3
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	e05c      	b.n	800633c <USB_EPStartXfer+0xcfa>
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <USB_EPStartXfer+0xc5e>
 800628a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006298:	b29a      	uxth	r2, r3
 800629a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e04d      	b.n	800633c <USB_EPStartXfer+0xcfa>
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <USB_EPStartXfer+0xc7e>
 80062b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062ba:	3301      	adds	r3, #1
 80062bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	029b      	lsls	r3, r3, #10
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	e030      	b.n	800633c <USB_EPStartXfer+0xcfa>
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d128      	bne.n	800633c <USB_EPStartXfer+0xcfa>
 80062ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800630e:	4413      	add	r3, r2
 8006310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	00da      	lsls	r2, r3, #3
 8006322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006326:	4413      	add	r3, r2
 8006328:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800632c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800633a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	891b      	ldrh	r3, [r3, #8]
 8006348:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800634c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6959      	ldr	r1, [r3, #20]
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635c:	b29b      	uxth	r3, r3
 800635e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006362:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006366:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	f000 fe54 	bl	8007018 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006396:	817b      	strh	r3, [r7, #10]
 8006398:	897b      	ldrh	r3, [r7, #10]
 800639a:	f083 0310 	eor.w	r3, r3, #16
 800639e:	817b      	strh	r3, [r7, #10]
 80063a0:	897b      	ldrh	r3, [r7, #10]
 80063a2:	f083 0320 	eor.w	r3, r3, #32
 80063a6:	817b      	strh	r3, [r7, #10]
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	897b      	ldrh	r3, [r7, #10]
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
 80063d8:	f000 bcde 	b.w	8006d98 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	7b1b      	ldrb	r3, [r3, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 80bb 	bne.w	8006564 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d917      	bls.n	800643a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	619a      	str	r2, [r3, #24]
 8006438:	e00e      	b.n	8006458 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800644a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800647c:	4413      	add	r3, r2
 800647e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	00da      	lsls	r2, r3, #3
 8006490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006494:	4413      	add	r3, r2
 8006496:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800649a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800649e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b6:	2b3e      	cmp	r3, #62	; 0x3e
 80064b8:	d924      	bls.n	8006504 <USB_EPStartXfer+0xec2>
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <USB_EPStartXfer+0xe98>
 80064d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	029b      	lsls	r3, r3, #10
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	4313      	orrs	r3, r2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	f000 bc10 	b.w	8006d24 <USB_EPStartXfer+0x16e2>
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10c      	bne.n	8006526 <USB_EPStartXfer+0xee4>
 800650c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651c:	b29a      	uxth	r2, r3
 800651e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	e3fe      	b.n	8006d24 <USB_EPStartXfer+0x16e2>
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <USB_EPStartXfer+0xf04>
 800653c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006540:	3301      	adds	r3, #1
 8006542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006552:	b29b      	uxth	r3, r3
 8006554:	029b      	lsls	r3, r3, #10
 8006556:	b29b      	uxth	r3, r3
 8006558:	4313      	orrs	r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e3df      	b.n	8006d24 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b02      	cmp	r3, #2
 8006572:	f040 8218 	bne.w	80069a6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f040 809d 	bne.w	80066c2 <USB_EPStartXfer+0x1080>
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065ac:	4413      	add	r3, r2
 80065ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	00da      	lsls	r2, r3, #3
 80065c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b3e      	cmp	r3, #62	; 0x3e
 80065f0:	d92b      	bls.n	800664a <USB_EPStartXfer+0x1008>
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <USB_EPStartXfer+0xfe0>
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661c:	3b01      	subs	r3, #1
 800661e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662e:	b29b      	uxth	r3, r3
 8006630:	029b      	lsls	r3, r3, #10
 8006632:	b29b      	uxth	r3, r3
 8006634:	4313      	orrs	r3, r2
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006640:	b29a      	uxth	r2, r3
 8006642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e070      	b.n	800672c <USB_EPStartXfer+0x10ea>
 800664a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10c      	bne.n	8006674 <USB_EPStartXfer+0x1032>
 800665a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	e05b      	b.n	800672c <USB_EPStartXfer+0x10ea>
 8006674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <USB_EPStartXfer+0x1062>
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	3301      	adds	r3, #1
 80066a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	029b      	lsls	r3, r3, #10
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	4313      	orrs	r3, r2
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	e034      	b.n	800672c <USB_EPStartXfer+0x10ea>
 80066c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d12c      	bne.n	800672c <USB_EPStartXfer+0x10ea>
 80066d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066f6:	4413      	add	r3, r2
 80066f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	00da      	lsls	r2, r3, #3
 800670a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800670e:	4413      	add	r3, r2
 8006710:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800673a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f040 809d 	bne.w	8006886 <USB_EPStartXfer+0x1244>
 800674c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006768:	b29b      	uxth	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006770:	4413      	add	r3, r2
 8006772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	00da      	lsls	r2, r3, #3
 8006784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006788:	4413      	add	r3, r2
 800678a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800678e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b3e      	cmp	r3, #62	; 0x3e
 80067b4:	d92b      	bls.n	800680e <USB_EPStartXfer+0x11cc>
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USB_EPStartXfer+0x11a4>
 80067dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e0:	3b01      	subs	r3, #1
 80067e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006804:	b29a      	uxth	r2, r3
 8006806:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e069      	b.n	80068e2 <USB_EPStartXfer+0x12a0>
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10c      	bne.n	8006838 <USB_EPStartXfer+0x11f6>
 800681e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682e:	b29a      	uxth	r2, r3
 8006830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	e054      	b.n	80068e2 <USB_EPStartXfer+0x12a0>
 8006838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	085b      	lsrs	r3, r3, #1
 8006846:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800684a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <USB_EPStartXfer+0x1226>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006862:	3301      	adds	r3, #1
 8006864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29b      	uxth	r3, r3
 800687a:	4313      	orrs	r3, r2
 800687c:	b29a      	uxth	r2, r3
 800687e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e02d      	b.n	80068e2 <USB_EPStartXfer+0x12a0>
 8006886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d125      	bne.n	80068e2 <USB_EPStartXfer+0x12a0>
 8006896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068ac:	4413      	add	r3, r2
 80068ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	00da      	lsls	r2, r3, #3
 80068c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068c4:	4413      	add	r3, r2
 80068c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8218 	beq.w	8006d24 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006914:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <USB_EPStartXfer+0x12ea>
 8006920:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10d      	bne.n	8006948 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800692c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006934:	2b00      	cmp	r3, #0
 8006936:	f040 81f5 	bne.w	8006d24 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800693a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	f040 81ee 	bne.w	8006d24 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	441a      	add	r2, r3
 800698c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8013      	strh	r3, [r2, #0]
 80069a4:	e1be      	b.n	8006d24 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80069a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	f040 81b4 	bne.w	8006d20 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80069b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d917      	bls.n	8006a04 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80069d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f4:	1ad2      	subs	r2, r2, r3
 80069f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	619a      	str	r2, [r3, #24]
 8006a02:	e00e      	b.n	8006a22 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f040 8085 	bne.w	8006b3e <USB_EPStartXfer+0x14fc>
 8006a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a58:	4413      	add	r3, r2
 8006a5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	00da      	lsls	r2, r3, #3
 8006a6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a70:	4413      	add	r3, r2
 8006a72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a92:	2b3e      	cmp	r3, #62	; 0x3e
 8006a94:	d923      	bls.n	8006ade <USB_EPStartXfer+0x149c>
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d104      	bne.n	8006ab6 <USB_EPStartXfer+0x1474>
 8006aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ada:	801a      	strh	r2, [r3, #0]
 8006adc:	e060      	b.n	8006ba0 <USB_EPStartXfer+0x155e>
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <USB_EPStartXfer+0x14be>
 8006ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006afc:	801a      	strh	r2, [r3, #0]
 8006afe:	e04f      	b.n	8006ba0 <USB_EPStartXfer+0x155e>
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <USB_EPStartXfer+0x14de>
 8006b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	029b      	lsls	r3, r3, #10
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e030      	b.n	8006ba0 <USB_EPStartXfer+0x155e>
 8006b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d128      	bne.n	8006ba0 <USB_EPStartXfer+0x155e>
 8006b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b72:	4413      	add	r3, r2
 8006b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	00da      	lsls	r2, r3, #3
 8006b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f040 8085 	bne.w	8006cca <USB_EPStartXfer+0x1688>
 8006bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006be4:	4413      	add	r3, r2
 8006be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	00da      	lsls	r2, r3, #3
 8006bf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c18:	801a      	strh	r2, [r3, #0]
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c20:	d923      	bls.n	8006c6a <USB_EPStartXfer+0x1628>
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <USB_EPStartXfer+0x1600>
 8006c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	4313      	orrs	r3, r2
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e05c      	b.n	8006d24 <USB_EPStartXfer+0x16e2>
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10c      	bne.n	8006c8c <USB_EPStartXfer+0x164a>
 8006c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c88:	801a      	strh	r2, [r3, #0]
 8006c8a:	e04b      	b.n	8006d24 <USB_EPStartXfer+0x16e2>
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <USB_EPStartXfer+0x166a>
 8006ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	e02c      	b.n	8006d24 <USB_EPStartXfer+0x16e2>
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d124      	bne.n	8006d24 <USB_EPStartXfer+0x16e2>
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	00da      	lsls	r2, r3, #3
 8006d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d08:	4413      	add	r3, r2
 8006d0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	e001      	b.n	8006d24 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e03a      	b.n	8006d9a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d56:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d62:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d020      	beq.n	8006df8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dcc:	81bb      	strh	r3, [r7, #12]
 8006dce:	89bb      	ldrh	r3, [r7, #12]
 8006dd0:	f083 0310 	eor.w	r3, r3, #16
 8006dd4:	81bb      	strh	r3, [r7, #12]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	441a      	add	r2, r3
 8006de0:	89bb      	ldrh	r3, [r7, #12]
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
 8006df6:	e01f      	b.n	8006e38 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	81fb      	strh	r3, [r7, #14]
 8006e10:	89fb      	ldrh	r3, [r7, #14]
 8006e12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e16:	81fb      	strh	r3, [r7, #14]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	89fb      	ldrh	r3, [r7, #14]
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	7b1b      	ldrb	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 809d 	bne.w	8006f94 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d04c      	beq.n	8006efc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	823b      	strh	r3, [r7, #16]
 8006e70:	8a3b      	ldrh	r3, [r7, #16]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01b      	beq.n	8006eb2 <USB_EPClearStall+0x6c>
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e90:	81fb      	strh	r3, [r7, #14]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	78db      	ldrb	r3, [r3, #3]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d06c      	beq.n	8006f94 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed0:	81bb      	strh	r3, [r7, #12]
 8006ed2:	89bb      	ldrh	r3, [r7, #12]
 8006ed4:	f083 0320 	eor.w	r3, r3, #32
 8006ed8:	81bb      	strh	r3, [r7, #12]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	89bb      	ldrh	r3, [r7, #12]
 8006ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]
 8006efa:	e04b      	b.n	8006f94 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	82fb      	strh	r3, [r7, #22]
 8006f0a:	8afb      	ldrh	r3, [r7, #22]
 8006f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <USB_EPClearStall+0x106>
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	82bb      	strh	r3, [r7, #20]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	8abb      	ldrh	r3, [r7, #20]
 8006f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	827b      	strh	r3, [r7, #18]
 8006f64:	8a7b      	ldrh	r3, [r7, #18]
 8006f66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f6a:	827b      	strh	r3, [r7, #18]
 8006f6c:	8a7b      	ldrh	r3, [r7, #18]
 8006f6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f72:	827b      	strh	r3, [r7, #18]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	441a      	add	r2, r3
 8006f7e:	8a7b      	ldrh	r3, [r7, #18]
 8006f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006fae:	78fb      	ldrb	r3, [r7, #3]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2280      	movs	r2, #128	; 0x80
 8006fb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007006:	b29b      	uxth	r3, r3
 8007008:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800700a:	68fb      	ldr	r3, [r7, #12]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007018:	b480      	push	{r7}
 800701a:	b08b      	sub	sp, #44	; 0x2c
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	460b      	mov	r3, r1
 8007028:	80fb      	strh	r3, [r7, #6]
 800702a:	4613      	mov	r3, r2
 800702c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800702e:	88bb      	ldrh	r3, [r7, #4]
 8007030:	3301      	adds	r3, #1
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007048:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
 800704e:	e01b      	b.n	8007088 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	3301      	adds	r3, #1
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	b21a      	sxth	r2, r3
 8007060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007064:	4313      	orrs	r3, r2
 8007066:	b21b      	sxth	r3, r3
 8007068:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	8a7a      	ldrh	r2, [r7, #18]
 800706e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	3302      	adds	r3, #2
 8007074:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	3301      	adds	r3, #1
 800707a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	3301      	adds	r3, #1
 8007080:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	3b01      	subs	r3, #1
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e0      	bne.n	8007050 <USB_WritePMA+0x38>
  }
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	372c      	adds	r7, #44	; 0x2c
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800709c:	b480      	push	{r7}
 800709e:	b08b      	sub	sp, #44	; 0x2c
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	460b      	mov	r3, r1
 80070ac:	80fb      	strh	r3, [r7, #6]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80070b2:	88bb      	ldrh	r3, [r7, #4]
 80070b4:	085b      	lsrs	r3, r3, #1
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
 80070d2:	e018      	b.n	8007106 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	3302      	adds	r3, #2
 80070e0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	3301      	adds	r3, #1
 80070ee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	3301      	adds	r3, #1
 80070fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	3b01      	subs	r3, #1
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e3      	bne.n	80070d4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800710c:	88bb      	ldrh	r3, [r7, #4]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	701a      	strb	r2, [r3, #0]
  }
}
 8007128:	bf00      	nop
 800712a:	372c      	adds	r7, #44	; 0x2c
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007140:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007144:	f002 fc6e 	bl	8009a24 <USBD_static_malloc>
 8007148:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	32b0      	adds	r2, #176	; 0xb0
 800715a:	2100      	movs	r1, #0
 800715c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007160:	2302      	movs	r3, #2
 8007162:	e0d4      	b.n	800730e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007164:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007168:	2100      	movs	r1, #0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f002 fdf8 	bl	8009d60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	32b0      	adds	r2, #176	; 0xb0
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	32b0      	adds	r2, #176	; 0xb0
 800718a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7c1b      	ldrb	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d138      	bne.n	800720e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800719c:	4b5e      	ldr	r3, [pc, #376]	; (8007318 <USBD_CDC_Init+0x1e4>)
 800719e:	7819      	ldrb	r1, [r3, #0]
 80071a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071a4:	2202      	movs	r2, #2
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fae1 	bl	800976e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071ac:	4b5a      	ldr	r3, [pc, #360]	; (8007318 <USBD_CDC_Init+0x1e4>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3324      	adds	r3, #36	; 0x24
 80071c2:	2201      	movs	r2, #1
 80071c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071c6:	4b55      	ldr	r3, [pc, #340]	; (800731c <USBD_CDC_Init+0x1e8>)
 80071c8:	7819      	ldrb	r1, [r3, #0]
 80071ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ce:	2202      	movs	r2, #2
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f002 facc 	bl	800976e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071d6:	4b51      	ldr	r3, [pc, #324]	; (800731c <USBD_CDC_Init+0x1e8>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071ee:	2201      	movs	r2, #1
 80071f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071f2:	4b4b      	ldr	r3, [pc, #300]	; (8007320 <USBD_CDC_Init+0x1ec>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	3326      	adds	r3, #38	; 0x26
 8007208:	2210      	movs	r2, #16
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e035      	b.n	800727a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800720e:	4b42      	ldr	r3, [pc, #264]	; (8007318 <USBD_CDC_Init+0x1e4>)
 8007210:	7819      	ldrb	r1, [r3, #0]
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	2202      	movs	r2, #2
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f002 faa9 	bl	800976e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800721c:	4b3e      	ldr	r3, [pc, #248]	; (8007318 <USBD_CDC_Init+0x1e4>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3324      	adds	r3, #36	; 0x24
 8007232:	2201      	movs	r2, #1
 8007234:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <USBD_CDC_Init+0x1e8>)
 8007238:	7819      	ldrb	r1, [r3, #0]
 800723a:	2340      	movs	r3, #64	; 0x40
 800723c:	2202      	movs	r2, #2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f002 fa95 	bl	800976e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007244:	4b35      	ldr	r3, [pc, #212]	; (800731c <USBD_CDC_Init+0x1e8>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800725c:	2201      	movs	r2, #1
 800725e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007260:	4b2f      	ldr	r3, [pc, #188]	; (8007320 <USBD_CDC_Init+0x1ec>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	3326      	adds	r3, #38	; 0x26
 8007276:	2210      	movs	r2, #16
 8007278:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800727a:	4b29      	ldr	r3, [pc, #164]	; (8007320 <USBD_CDC_Init+0x1ec>)
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	2308      	movs	r3, #8
 8007280:	2203      	movs	r2, #3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f002 fa73 	bl	800976e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007288:	4b25      	ldr	r3, [pc, #148]	; (8007320 <USBD_CDC_Init+0x1ec>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	3324      	adds	r3, #36	; 0x24
 800729e:	2201      	movs	r2, #1
 80072a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	33b0      	adds	r3, #176	; 0xb0
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072d8:	2302      	movs	r3, #2
 80072da:	e018      	b.n	800730e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7c1b      	ldrb	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072e4:	4b0d      	ldr	r3, [pc, #52]	; (800731c <USBD_CDC_Init+0x1e8>)
 80072e6:	7819      	ldrb	r1, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f002 fb2b 	bl	800994e <USBD_LL_PrepareReceive>
 80072f8:	e008      	b.n	800730c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <USBD_CDC_Init+0x1e8>)
 80072fc:	7819      	ldrb	r1, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f002 fb21 	bl	800994e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200000df 	.word	0x200000df
 800731c:	200000e0 	.word	0x200000e0
 8007320:	200000e1 	.word	0x200000e1

08007324 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007330:	4b3a      	ldr	r3, [pc, #232]	; (800741c <USBD_CDC_DeInit+0xf8>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f002 fa3f 	bl	80097ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800733c:	4b37      	ldr	r3, [pc, #220]	; (800741c <USBD_CDC_DeInit+0xf8>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	3324      	adds	r3, #36	; 0x24
 8007352:	2200      	movs	r2, #0
 8007354:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007356:	4b32      	ldr	r3, [pc, #200]	; (8007420 <USBD_CDC_DeInit+0xfc>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f002 fa2c 	bl	80097ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <USBD_CDC_DeInit+0xfc>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	f003 020f 	and.w	r2, r3, #15
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800737a:	2200      	movs	r2, #0
 800737c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800737e:	4b29      	ldr	r3, [pc, #164]	; (8007424 <USBD_CDC_DeInit+0x100>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f002 fa18 	bl	80097ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800738a:	4b26      	ldr	r3, [pc, #152]	; (8007424 <USBD_CDC_DeInit+0x100>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	f003 020f 	and.w	r2, r3, #15
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	3324      	adds	r3, #36	; 0x24
 80073a0:	2200      	movs	r2, #0
 80073a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80073a4:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <USBD_CDC_DeInit+0x100>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	f003 020f 	and.w	r2, r3, #15
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	3326      	adds	r3, #38	; 0x26
 80073ba:	2200      	movs	r2, #0
 80073bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	32b0      	adds	r2, #176	; 0xb0
 80073c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01f      	beq.n	8007410 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	33b0      	adds	r3, #176	; 0xb0
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	32b0      	adds	r2, #176	; 0xb0
 80073ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f002 fb24 	bl	8009a40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32b0      	adds	r2, #176	; 0xb0
 8007402:	2100      	movs	r1, #0
 8007404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200000df 	.word	0x200000df
 8007420:	200000e0 	.word	0x200000e0
 8007424:	200000e1 	.word	0x200000e1

08007428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	32b0      	adds	r2, #176	; 0xb0
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e0bf      	b.n	80075d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007460:	2b00      	cmp	r3, #0
 8007462:	d050      	beq.n	8007506 <USBD_CDC_Setup+0xde>
 8007464:	2b20      	cmp	r3, #32
 8007466:	f040 80af 	bne.w	80075c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	88db      	ldrh	r3, [r3, #6]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03a      	beq.n	80074e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b25b      	sxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	da1b      	bge.n	80074b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	33b0      	adds	r3, #176	; 0xb0
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007492:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	88d2      	ldrh	r2, [r2, #6]
 8007498:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88db      	ldrh	r3, [r3, #6]
 800749e:	2b07      	cmp	r3, #7
 80074a0:	bf28      	it	cs
 80074a2:	2307      	movcs	r3, #7
 80074a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	89fa      	ldrh	r2, [r7, #14]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fd21 	bl	8008ef4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074b2:	e090      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	785a      	ldrb	r2, [r3, #1]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b3f      	cmp	r3, #63	; 0x3f
 80074c4:	d803      	bhi.n	80074ce <USBD_CDC_Setup+0xa6>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	e000      	b.n	80074d0 <USBD_CDC_Setup+0xa8>
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074d6:	6939      	ldr	r1, [r7, #16]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80074de:	461a      	mov	r2, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fd33 	bl	8008f4c <USBD_CtlPrepareRx>
      break;
 80074e6:	e076      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	33b0      	adds	r3, #176	; 0xb0
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	7850      	ldrb	r0, [r2, #1]
 80074fe:	2200      	movs	r2, #0
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	4798      	blx	r3
      break;
 8007504:	e067      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b0b      	cmp	r3, #11
 800750c:	d851      	bhi.n	80075b2 <USBD_CDC_Setup+0x18a>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <USBD_CDC_Setup+0xec>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007545 	.word	0x08007545
 8007518:	080075c1 	.word	0x080075c1
 800751c:	080075b3 	.word	0x080075b3
 8007520:	080075b3 	.word	0x080075b3
 8007524:	080075b3 	.word	0x080075b3
 8007528:	080075b3 	.word	0x080075b3
 800752c:	080075b3 	.word	0x080075b3
 8007530:	080075b3 	.word	0x080075b3
 8007534:	080075b3 	.word	0x080075b3
 8007538:	080075b3 	.word	0x080075b3
 800753c:	0800756f 	.word	0x0800756f
 8007540:	08007599 	.word	0x08007599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b03      	cmp	r3, #3
 800754e:	d107      	bne.n	8007560 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007550:	f107 030a 	add.w	r3, r7, #10
 8007554:	2202      	movs	r2, #2
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fccb 	bl	8008ef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800755e:	e032      	b.n	80075c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 fc55 	bl	8008e12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007568:	2303      	movs	r3, #3
 800756a:	75fb      	strb	r3, [r7, #23]
          break;
 800756c:	e02b      	b.n	80075c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b03      	cmp	r3, #3
 8007578:	d107      	bne.n	800758a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800757a:	f107 030d 	add.w	r3, r7, #13
 800757e:	2201      	movs	r2, #1
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fcb6 	bl	8008ef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007588:	e01d      	b.n	80075c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 fc40 	bl	8008e12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	75fb      	strb	r3, [r7, #23]
          break;
 8007596:	e016      	b.n	80075c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d00f      	beq.n	80075c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fc33 	bl	8008e12 <USBD_CtlError>
            ret = USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075b0:	e008      	b.n	80075c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fc2c 	bl	8008e12 <USBD_CtlError>
          ret = USBD_FAIL;
 80075ba:	2303      	movs	r3, #3
 80075bc:	75fb      	strb	r3, [r7, #23]
          break;
 80075be:	e002      	b.n	80075c6 <USBD_CDC_Setup+0x19e>
          break;
 80075c0:	bf00      	nop
 80075c2:	e008      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e006      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fc21 	bl	8008e12 <USBD_CtlError>
      ret = USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	75fb      	strb	r3, [r7, #23]
      break;
 80075d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32b0      	adds	r2, #176	; 0xb0
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	e065      	b.n	80076d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	32b0      	adds	r2, #176	; 0xb0
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3318      	adds	r3, #24
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02f      	beq.n	8007694 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	f003 020f 	and.w	r2, r3, #15
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3318      	adds	r3, #24
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	f003 010f 	and.w	r1, r3, #15
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	460b      	mov	r3, r1
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4403      	add	r3, r0
 800765c:	3338      	adds	r3, #56	; 0x38
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	fbb2 f1f3 	udiv	r1, r2, r3
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800766a:	2b00      	cmp	r3, #0
 800766c:	d112      	bne.n	8007694 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3318      	adds	r3, #24
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007686:	78f9      	ldrb	r1, [r7, #3]
 8007688:	2300      	movs	r3, #0
 800768a:	2200      	movs	r2, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f002 f93d 	bl	800990c <USBD_LL_Transmit>
 8007692:	e01f      	b.n	80076d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	33b0      	adds	r3, #176	; 0xb0
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d010      	beq.n	80076d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	33b0      	adds	r3, #176	; 0xb0
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	32b0      	adds	r2, #176	; 0xb0
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	32b0      	adds	r2, #176	; 0xb0
 8007704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	e01a      	b.n	8007746 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f002 f93b 	bl	8009990 <USBD_LL_GetRxDataSize>
 800771a:	4602      	mov	r2, r0
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	33b0      	adds	r3, #176	; 0xb0
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007740:	4611      	mov	r1, r2
 8007742:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	32b0      	adds	r2, #176	; 0xb0
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	e025      	b.n	80077bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	33b0      	adds	r3, #176	; 0xb0
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01a      	beq.n	80077ba <USBD_CDC_EP0_RxReady+0x6c>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800778a:	2bff      	cmp	r3, #255	; 0xff
 800778c:	d015      	beq.n	80077ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	33b0      	adds	r3, #176	; 0xb0
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80077a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077ae:	b292      	uxth	r2, r2
 80077b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077cc:	2182      	movs	r1, #130	; 0x82
 80077ce:	4818      	ldr	r0, [pc, #96]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077d0:	f000 fcbd 	bl	800814e <USBD_GetEpDesc>
 80077d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077d6:	2101      	movs	r1, #1
 80077d8:	4815      	ldr	r0, [pc, #84]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077da:	f000 fcb8 	bl	800814e <USBD_GetEpDesc>
 80077de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077e0:	2181      	movs	r1, #129	; 0x81
 80077e2:	4813      	ldr	r0, [pc, #76]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077e4:	f000 fcb3 	bl	800814e <USBD_GetEpDesc>
 80077e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2210      	movs	r2, #16
 80077f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2200      	movs	r2, #0
 8007800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007804:	711a      	strb	r2, [r3, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007818:	711a      	strb	r2, [r3, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2243      	movs	r2, #67	; 0x43
 8007822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	2000009c 	.word	0x2000009c

08007834 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800783c:	2182      	movs	r1, #130	; 0x82
 800783e:	4818      	ldr	r0, [pc, #96]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007840:	f000 fc85 	bl	800814e <USBD_GetEpDesc>
 8007844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007846:	2101      	movs	r1, #1
 8007848:	4815      	ldr	r0, [pc, #84]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800784a:	f000 fc80 	bl	800814e <USBD_GetEpDesc>
 800784e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007850:	2181      	movs	r1, #129	; 0x81
 8007852:	4813      	ldr	r0, [pc, #76]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007854:	f000 fc7b 	bl	800814e <USBD_GetEpDesc>
 8007858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2210      	movs	r2, #16
 8007864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2200      	movs	r2, #0
 8007870:	711a      	strb	r2, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f042 0202 	orr.w	r2, r2, #2
 8007878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	711a      	strb	r2, [r3, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f042 0202 	orr.w	r2, r2, #2
 800788c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2243      	movs	r2, #67	; 0x43
 8007892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	2000009c 	.word	0x2000009c

080078a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078ac:	2182      	movs	r1, #130	; 0x82
 80078ae:	4818      	ldr	r0, [pc, #96]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078b0:	f000 fc4d 	bl	800814e <USBD_GetEpDesc>
 80078b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078b6:	2101      	movs	r1, #1
 80078b8:	4815      	ldr	r0, [pc, #84]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078ba:	f000 fc48 	bl	800814e <USBD_GetEpDesc>
 80078be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078c0:	2181      	movs	r1, #129	; 0x81
 80078c2:	4813      	ldr	r0, [pc, #76]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078c4:	f000 fc43 	bl	800814e <USBD_GetEpDesc>
 80078c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2210      	movs	r2, #16
 80078d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d006      	beq.n	80078ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2200      	movs	r2, #0
 80078e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e4:	711a      	strb	r2, [r3, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f8:	711a      	strb	r2, [r3, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2243      	movs	r2, #67	; 0x43
 8007902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000009c 	.word	0x2000009c

08007914 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	220a      	movs	r2, #10
 8007920:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007922:	4b03      	ldr	r3, [pc, #12]	; (8007930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20000058 	.word	0x20000058

08007934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	e009      	b.n	800795c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	33b0      	adds	r3, #176	; 0xb0
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	32b0      	adds	r2, #176	; 0xb0
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800798a:	2303      	movs	r3, #3
 800798c:	e008      	b.n	80079a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	371c      	adds	r7, #28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	32b0      	adds	r2, #176	; 0xb0
 80079c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e004      	b.n	80079da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	32b0      	adds	r2, #176	; 0xb0
 80079fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a00:	2301      	movs	r3, #1
 8007a02:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e025      	b.n	8007a5a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11f      	bne.n	8007a58 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007a20:	4b10      	ldr	r3, [pc, #64]	; (8007a64 <USBD_CDC_TransmitPacket+0x7c>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4613      	mov	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4403      	add	r3, r0
 8007a3a:	3318      	adds	r3, #24
 8007a3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <USBD_CDC_TransmitPacket+0x7c>)
 8007a40:	7819      	ldrb	r1, [r3, #0]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 ff5c 	bl	800990c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	200000df 	.word	0x200000df

08007a68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	32b0      	adds	r2, #176	; 0xb0
 8007a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32b0      	adds	r2, #176	; 0xb0
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e018      	b.n	8007ac8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7c1b      	ldrb	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <USBD_CDC_ReceivePacket+0x68>)
 8007aa0:	7819      	ldrb	r1, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 ff4e 	bl	800994e <USBD_LL_PrepareReceive>
 8007ab2:	e008      	b.n	8007ac6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <USBD_CDC_ReceivePacket+0x68>)
 8007ab6:	7819      	ldrb	r1, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007abe:	2340      	movs	r3, #64	; 0x40
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 ff44 	bl	800994e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	200000e0 	.word	0x200000e0

08007ad4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e01f      	b.n	8007b2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f001 fda7 	bl	8009674 <USBD_LL_Init>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e025      	b.n	8007b98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32ae      	adds	r2, #174	; 0xae
 8007b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00f      	beq.n	8007b88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32ae      	adds	r2, #174	; 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	f107 020e 	add.w	r2, r7, #14
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fdc5 	bl	8009738 <USBD_LL_Start>
 8007bae:	4603      	mov	r3, r0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d009      	beq.n	8007bfc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	78fa      	ldrb	r2, [r7, #3]
 8007c20:	4611      	mov	r1, r2
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 f8a6 	bl	8008d9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c60:	461a      	mov	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d01a      	beq.n	8007cac <USBD_LL_SetupStage+0x72>
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d822      	bhi.n	8007cc0 <USBD_LL_SetupStage+0x86>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <USBD_LL_SetupStage+0x4a>
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d00a      	beq.n	8007c98 <USBD_LL_SetupStage+0x5e>
 8007c82:	e01d      	b.n	8007cc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fad3 	bl	8008238 <USBD_StdDevReq>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73fb      	strb	r3, [r7, #15]
      break;
 8007c96:	e020      	b.n	8007cda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb3b 	bl	800831c <USBD_StdItfReq>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8007caa:	e016      	b.n	8007cda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fb9d 	bl	80083f4 <USBD_StdEPReq>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	e00c      	b.n	8007cda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fd92 	bl	80097f8 <USBD_LL_StallEP>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd8:	bf00      	nop
  }

  return ret;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	460b      	mov	r3, r1
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d16e      	bne.n	8007dda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	f040 8098 	bne.w	8007e40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d913      	bls.n	8007d44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	4293      	cmp	r3, r2
 8007d34:	bf28      	it	cs
 8007d36:	4613      	movcs	r3, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f001 f922 	bl	8008f86 <USBD_CtlContinueRx>
 8007d42:	e07d      	b.n	8007e40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d4a:	f003 031f 	and.w	r3, r3, #31
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d014      	beq.n	8007d7c <USBD_LL_DataOutStage+0x98>
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d81d      	bhi.n	8007d92 <USBD_LL_DataOutStage+0xae>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <USBD_LL_DataOutStage+0x7c>
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d003      	beq.n	8007d66 <USBD_LL_DataOutStage+0x82>
 8007d5e:	e018      	b.n	8007d92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75bb      	strb	r3, [r7, #22]
            break;
 8007d64:	e018      	b.n	8007d98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	4619      	mov	r1, r3
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f9d2 	bl	800811a <USBD_CoreFindIF>
 8007d76:	4603      	mov	r3, r0
 8007d78:	75bb      	strb	r3, [r7, #22]
            break;
 8007d7a:	e00d      	b.n	8007d98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	4619      	mov	r1, r3
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f9d4 	bl	8008134 <USBD_CoreFindEP>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75bb      	strb	r3, [r7, #22]
            break;
 8007d90:	e002      	b.n	8007d98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75bb      	strb	r3, [r7, #22]
            break;
 8007d96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d98:	7dbb      	ldrb	r3, [r7, #22]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d119      	bne.n	8007dd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d113      	bne.n	8007dd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007daa:	7dba      	ldrb	r2, [r7, #22]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	32ae      	adds	r2, #174	; 0xae
 8007db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dba:	7dba      	ldrb	r2, [r7, #22]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dc2:	7dba      	ldrb	r2, [r7, #22]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	32ae      	adds	r2, #174	; 0xae
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f001 f8e8 	bl	8008fa8 <USBD_CtlSendStatus>
 8007dd8:	e032      	b.n	8007e40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	4619      	mov	r1, r3
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f9a5 	bl	8008134 <USBD_CoreFindEP>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dee:	7dbb      	ldrb	r3, [r7, #22]
 8007df0:	2bff      	cmp	r3, #255	; 0xff
 8007df2:	d025      	beq.n	8007e40 <USBD_LL_DataOutStage+0x15c>
 8007df4:	7dbb      	ldrb	r3, [r7, #22]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d122      	bne.n	8007e40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d117      	bne.n	8007e36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e06:	7dba      	ldrb	r2, [r7, #22]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	32ae      	adds	r2, #174	; 0xae
 8007e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00f      	beq.n	8007e36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e16:	7dba      	ldrb	r2, [r7, #22]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e1e:	7dba      	ldrb	r2, [r7, #22]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	32ae      	adds	r2, #174	; 0xae
 8007e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	7afa      	ldrb	r2, [r7, #11]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	4798      	blx	r3
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	e000      	b.n	8007e42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	460b      	mov	r3, r1
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e58:	7afb      	ldrb	r3, [r7, #11]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d16f      	bne.n	8007f3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3314      	adds	r3, #20
 8007e62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d15a      	bne.n	8007f24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d914      	bls.n	8007ea4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	1ad2      	subs	r2, r2, r3
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f001 f84a 	bl	8008f2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e96:	2300      	movs	r3, #0
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f001 fd56 	bl	800994e <USBD_LL_PrepareReceive>
 8007ea2:	e03f      	b.n	8007f24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d11c      	bne.n	8007eea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d316      	bcc.n	8007eea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d20f      	bcs.n	8007eea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f001 f82b 	bl	8008f2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007edc:	2300      	movs	r3, #0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f001 fd33 	bl	800994e <USBD_LL_PrepareReceive>
 8007ee8:	e01c      	b.n	8007f24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d10f      	bne.n	8007f16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f001 fc6d 	bl	80097f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f001 f855 	bl	8008fce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d03a      	beq.n	8007fa4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff fe42 	bl	8007bb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f3c:	e032      	b.n	8007fa4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f8f3 	bl	8008134 <USBD_CoreFindEP>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2bff      	cmp	r3, #255	; 0xff
 8007f56:	d025      	beq.n	8007fa4 <USBD_LL_DataInStage+0x15a>
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d122      	bne.n	8007fa4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d11c      	bne.n	8007fa4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f6a:	7dfa      	ldrb	r2, [r7, #23]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	32ae      	adds	r2, #174	; 0xae
 8007f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d014      	beq.n	8007fa4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f7a:	7dfa      	ldrb	r2, [r7, #23]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f82:	7dfa      	ldrb	r2, [r7, #23]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	32ae      	adds	r2, #174	; 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	7afa      	ldrb	r2, [r7, #11]
 8007f90:	4611      	mov	r1, r2
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f9a:	7dbb      	ldrb	r3, [r7, #22]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fa0:	7dbb      	ldrb	r3, [r7, #22]
 8007fa2:	e000      	b.n	8007fa6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d014      	beq.n	8008014 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00e      	beq.n	8008014 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6852      	ldr	r2, [r2, #4]
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	2200      	movs	r2, #0
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fba7 	bl	800976e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2240      	movs	r2, #64	; 0x40
 800802c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	2200      	movs	r2, #0
 8008034:	2180      	movs	r1, #128	; 0x80
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fb99 	bl	800976e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2240      	movs	r2, #64	; 0x40
 8008046:	621a      	str	r2, [r3, #32]

  return ret;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b04      	cmp	r3, #4
 8008084:	d006      	beq.n	8008094 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	b2da      	uxtb	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2204      	movs	r2, #4
 8008098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d106      	bne.n	80080cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d110      	bne.n	8008110 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	460b      	mov	r3, r1
 8008124:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008126:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008140:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b086      	sub	sp, #24
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	885b      	ldrh	r3, [r3, #2]
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	429a      	cmp	r2, r3
 8008174:	d920      	bls.n	80081b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800817e:	e013      	b.n	80081a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008180:	f107 030a 	add.w	r3, r7, #10
 8008184:	4619      	mov	r1, r3
 8008186:	6978      	ldr	r0, [r7, #20]
 8008188:	f000 f81b 	bl	80081c2 <USBD_GetNextDesc>
 800818c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	2b05      	cmp	r3, #5
 8008194:	d108      	bne.n	80081a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	789b      	ldrb	r3, [r3, #2]
 800819e:	78fa      	ldrb	r2, [r7, #3]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d008      	beq.n	80081b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	885b      	ldrh	r3, [r3, #2]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	897b      	ldrh	r3, [r7, #10]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d8e5      	bhi.n	8008180 <USBD_GetEpDesc+0x32>
 80081b4:	e000      	b.n	80081b8 <USBD_GetEpDesc+0x6a>
          break;
 80081b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081b8:	693b      	ldr	r3, [r7, #16]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	881a      	ldrh	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4413      	add	r3, r2
 80081dc:	b29a      	uxth	r2, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4413      	add	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081ee:	68fb      	ldr	r3, [r7, #12]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	3301      	adds	r3, #1
 8008212:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800821a:	8a3b      	ldrh	r3, [r7, #16]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	b21a      	sxth	r2, r3
 8008220:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008224:	4313      	orrs	r3, r2
 8008226:	b21b      	sxth	r3, r3
 8008228:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800822a:	89fb      	ldrh	r3, [r7, #14]
}
 800822c:	4618      	mov	r0, r3
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d005      	beq.n	800825e <USBD_StdDevReq+0x26>
 8008252:	2b40      	cmp	r3, #64	; 0x40
 8008254:	d857      	bhi.n	8008306 <USBD_StdDevReq+0xce>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00f      	beq.n	800827a <USBD_StdDevReq+0x42>
 800825a:	2b20      	cmp	r3, #32
 800825c:	d153      	bne.n	8008306 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	32ae      	adds	r2, #174	; 0xae
 8008268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4798      	blx	r3
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]
      break;
 8008278:	e04a      	b.n	8008310 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b09      	cmp	r3, #9
 8008280:	d83b      	bhi.n	80082fa <USBD_StdDevReq+0xc2>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <USBD_StdDevReq+0x50>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082dd 	.word	0x080082dd
 800828c:	080082f1 	.word	0x080082f1
 8008290:	080082fb 	.word	0x080082fb
 8008294:	080082e7 	.word	0x080082e7
 8008298:	080082fb 	.word	0x080082fb
 800829c:	080082bb 	.word	0x080082bb
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082fb 	.word	0x080082fb
 80082a8:	080082d3 	.word	0x080082d3
 80082ac:	080082c5 	.word	0x080082c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa3c 	bl	8008730 <USBD_GetDescriptor>
          break;
 80082b8:	e024      	b.n	8008304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fbcb 	bl	8008a58 <USBD_SetAddress>
          break;
 80082c2:	e01f      	b.n	8008304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fc0a 	bl	8008ae0 <USBD_SetConfig>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
          break;
 80082d0:	e018      	b.n	8008304 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fcad 	bl	8008c34 <USBD_GetConfig>
          break;
 80082da:	e013      	b.n	8008304 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fcde 	bl	8008ca0 <USBD_GetStatus>
          break;
 80082e4:	e00e      	b.n	8008304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fd0d 	bl	8008d08 <USBD_SetFeature>
          break;
 80082ee:	e009      	b.n	8008304 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fd31 	bl	8008d5a <USBD_ClrFeature>
          break;
 80082f8:	e004      	b.n	8008304 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fd88 	bl	8008e12 <USBD_CtlError>
          break;
 8008302:	bf00      	nop
      }
      break;
 8008304:	e004      	b.n	8008310 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fd82 	bl	8008e12 <USBD_CtlError>
      break;
 800830e:	bf00      	nop
  }

  return ret;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop

0800831c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d005      	beq.n	8008342 <USBD_StdItfReq+0x26>
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d852      	bhi.n	80083e0 <USBD_StdItfReq+0xc4>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <USBD_StdItfReq+0x26>
 800833e:	2b20      	cmp	r3, #32
 8008340:	d14e      	bne.n	80083e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	2b02      	cmp	r3, #2
 800834e:	d840      	bhi.n	80083d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	889b      	ldrh	r3, [r3, #4]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b01      	cmp	r3, #1
 8008358:	d836      	bhi.n	80083c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	889b      	ldrh	r3, [r3, #4]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff fed9 	bl	800811a <USBD_CoreFindIF>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2bff      	cmp	r3, #255	; 0xff
 8008370:	d01d      	beq.n	80083ae <USBD_StdItfReq+0x92>
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11a      	bne.n	80083ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008378:	7bba      	ldrb	r2, [r7, #14]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	32ae      	adds	r2, #174	; 0xae
 800837e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00f      	beq.n	80083a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008388:	7bba      	ldrb	r2, [r7, #14]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008390:	7bba      	ldrb	r2, [r7, #14]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	32ae      	adds	r2, #174	; 0xae
 8008396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083a6:	e004      	b.n	80083b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083a8:	2303      	movs	r3, #3
 80083aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083ac:	e001      	b.n	80083b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083ae:	2303      	movs	r3, #3
 80083b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	88db      	ldrh	r3, [r3, #6]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d110      	bne.n	80083dc <USBD_StdItfReq+0xc0>
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10d      	bne.n	80083dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fdf1 	bl	8008fa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083c6:	e009      	b.n	80083dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fd21 	bl	8008e12 <USBD_CtlError>
          break;
 80083d0:	e004      	b.n	80083dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fd1c 	bl	8008e12 <USBD_CtlError>
          break;
 80083da:	e000      	b.n	80083de <USBD_StdItfReq+0xc2>
          break;
 80083dc:	bf00      	nop
      }
      break;
 80083de:	e004      	b.n	80083ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fd15 	bl	8008e12 <USBD_CtlError>
      break;
 80083e8:	bf00      	nop
  }

  return ret;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	889b      	ldrh	r3, [r3, #4]
 8008406:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	d007      	beq.n	8008424 <USBD_StdEPReq+0x30>
 8008414:	2b40      	cmp	r3, #64	; 0x40
 8008416:	f200 817f 	bhi.w	8008718 <USBD_StdEPReq+0x324>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d02a      	beq.n	8008474 <USBD_StdEPReq+0x80>
 800841e:	2b20      	cmp	r3, #32
 8008420:	f040 817a 	bne.w	8008718 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff fe83 	bl	8008134 <USBD_CoreFindEP>
 800842e:	4603      	mov	r3, r0
 8008430:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008432:	7b7b      	ldrb	r3, [r7, #13]
 8008434:	2bff      	cmp	r3, #255	; 0xff
 8008436:	f000 8174 	beq.w	8008722 <USBD_StdEPReq+0x32e>
 800843a:	7b7b      	ldrb	r3, [r7, #13]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 8170 	bne.w	8008722 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008442:	7b7a      	ldrb	r2, [r7, #13]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800844a:	7b7a      	ldrb	r2, [r7, #13]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	32ae      	adds	r2, #174	; 0xae
 8008450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8163 	beq.w	8008722 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800845c:	7b7a      	ldrb	r2, [r7, #13]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	32ae      	adds	r2, #174	; 0xae
 8008462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008472:	e156      	b.n	8008722 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b03      	cmp	r3, #3
 800847a:	d008      	beq.n	800848e <USBD_StdEPReq+0x9a>
 800847c:	2b03      	cmp	r3, #3
 800847e:	f300 8145 	bgt.w	800870c <USBD_StdEPReq+0x318>
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 809b 	beq.w	80085be <USBD_StdEPReq+0x1ca>
 8008488:	2b01      	cmp	r3, #1
 800848a:	d03c      	beq.n	8008506 <USBD_StdEPReq+0x112>
 800848c:	e13e      	b.n	800870c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d002      	beq.n	80084a0 <USBD_StdEPReq+0xac>
 800849a:	2b03      	cmp	r3, #3
 800849c:	d016      	beq.n	80084cc <USBD_StdEPReq+0xd8>
 800849e:	e02c      	b.n	80084fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00d      	beq.n	80084c2 <USBD_StdEPReq+0xce>
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b80      	cmp	r3, #128	; 0x80
 80084aa:	d00a      	beq.n	80084c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f9a1 	bl	80097f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084b6:	2180      	movs	r1, #128	; 0x80
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f99d 	bl	80097f8 <USBD_LL_StallEP>
 80084be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084c0:	e020      	b.n	8008504 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fca4 	bl	8008e12 <USBD_CtlError>
              break;
 80084ca:	e01b      	b.n	8008504 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	885b      	ldrh	r3, [r3, #2]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10e      	bne.n	80084f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <USBD_StdEPReq+0xfe>
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	2b80      	cmp	r3, #128	; 0x80
 80084de:	d008      	beq.n	80084f2 <USBD_StdEPReq+0xfe>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	88db      	ldrh	r3, [r3, #6]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 f983 	bl	80097f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fd58 	bl	8008fa8 <USBD_CtlSendStatus>

              break;
 80084f8:	e004      	b.n	8008504 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc88 	bl	8008e12 <USBD_CtlError>
              break;
 8008502:	bf00      	nop
          }
          break;
 8008504:	e107      	b.n	8008716 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d002      	beq.n	8008518 <USBD_StdEPReq+0x124>
 8008512:	2b03      	cmp	r3, #3
 8008514:	d016      	beq.n	8008544 <USBD_StdEPReq+0x150>
 8008516:	e04b      	b.n	80085b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00d      	beq.n	800853a <USBD_StdEPReq+0x146>
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	2b80      	cmp	r3, #128	; 0x80
 8008522:	d00a      	beq.n	800853a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f965 	bl	80097f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800852e:	2180      	movs	r1, #128	; 0x80
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f961 	bl	80097f8 <USBD_LL_StallEP>
 8008536:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008538:	e040      	b.n	80085bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fc68 	bl	8008e12 <USBD_CtlError>
              break;
 8008542:	e03b      	b.n	80085bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	885b      	ldrh	r3, [r3, #2]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d136      	bne.n	80085ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 f96b 	bl	8009836 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fd21 	bl	8008fa8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fde2 	bl	8008134 <USBD_CoreFindEP>
 8008570:	4603      	mov	r3, r0
 8008572:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008574:	7b7b      	ldrb	r3, [r7, #13]
 8008576:	2bff      	cmp	r3, #255	; 0xff
 8008578:	d01f      	beq.n	80085ba <USBD_StdEPReq+0x1c6>
 800857a:	7b7b      	ldrb	r3, [r7, #13]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11c      	bne.n	80085ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008580:	7b7a      	ldrb	r2, [r7, #13]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008588:	7b7a      	ldrb	r2, [r7, #13]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	; 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d010      	beq.n	80085ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008598:	7b7a      	ldrb	r2, [r7, #13]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	32ae      	adds	r2, #174	; 0xae
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085ae:	e004      	b.n	80085ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fc2d 	bl	8008e12 <USBD_CtlError>
              break;
 80085b8:	e000      	b.n	80085bc <USBD_StdEPReq+0x1c8>
              break;
 80085ba:	bf00      	nop
          }
          break;
 80085bc:	e0ab      	b.n	8008716 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d002      	beq.n	80085d0 <USBD_StdEPReq+0x1dc>
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d032      	beq.n	8008634 <USBD_StdEPReq+0x240>
 80085ce:	e097      	b.n	8008700 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <USBD_StdEPReq+0x1f2>
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b80      	cmp	r3, #128	; 0x80
 80085da:	d004      	beq.n	80085e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fc17 	bl	8008e12 <USBD_CtlError>
                break;
 80085e4:	e091      	b.n	800870a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	da0b      	bge.n	8008606 <USBD_StdEPReq+0x212>
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	3310      	adds	r3, #16
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	4413      	add	r3, r2
 8008602:	3304      	adds	r3, #4
 8008604:	e00b      	b.n	800861e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	3304      	adds	r3, #4
 800861e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2202      	movs	r2, #2
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fc61 	bl	8008ef4 <USBD_CtlSendData>
              break;
 8008632:	e06a      	b.n	800870a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008638:	2b00      	cmp	r3, #0
 800863a:	da11      	bge.n	8008660 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	f003 020f 	and.w	r2, r3, #15
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	3324      	adds	r3, #36	; 0x24
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d117      	bne.n	8008686 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fbda 	bl	8008e12 <USBD_CtlError>
                  break;
 800865e:	e054      	b.n	800870a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	f003 020f 	and.w	r2, r3, #15
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	440b      	add	r3, r1
 8008672:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fbc7 	bl	8008e12 <USBD_CtlError>
                  break;
 8008684:	e041      	b.n	800870a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da0b      	bge.n	80086a6 <USBD_StdEPReq+0x2b2>
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	3310      	adds	r3, #16
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	3304      	adds	r3, #4
 80086a4:	e00b      	b.n	80086be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	3304      	adds	r3, #4
 80086be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <USBD_StdEPReq+0x2d8>
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b80      	cmp	r3, #128	; 0x80
 80086ca:	d103      	bne.n	80086d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	e00e      	b.n	80086f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 f8cb 	bl	8009874 <USBD_LL_IsStallEP>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2201      	movs	r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	e002      	b.n	80086f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2202      	movs	r2, #2
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fbfb 	bl	8008ef4 <USBD_CtlSendData>
              break;
 80086fe:	e004      	b.n	800870a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fb85 	bl	8008e12 <USBD_CtlError>
              break;
 8008708:	bf00      	nop
          }
          break;
 800870a:	e004      	b.n	8008716 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fb7f 	bl	8008e12 <USBD_CtlError>
          break;
 8008714:	bf00      	nop
      }
      break;
 8008716:	e005      	b.n	8008724 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fb79 	bl	8008e12 <USBD_CtlError>
      break;
 8008720:	e000      	b.n	8008724 <USBD_StdEPReq+0x330>
      break;
 8008722:	bf00      	nop
  }

  return ret;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	885b      	ldrh	r3, [r3, #2]
 800874a:	0a1b      	lsrs	r3, r3, #8
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	2b0e      	cmp	r3, #14
 8008752:	f200 8152 	bhi.w	80089fa <USBD_GetDescriptor+0x2ca>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <USBD_GetDescriptor+0x2c>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	080087cd 	.word	0x080087cd
 8008760:	080087e5 	.word	0x080087e5
 8008764:	08008825 	.word	0x08008825
 8008768:	080089fb 	.word	0x080089fb
 800876c:	080089fb 	.word	0x080089fb
 8008770:	0800899b 	.word	0x0800899b
 8008774:	080089c7 	.word	0x080089c7
 8008778:	080089fb 	.word	0x080089fb
 800877c:	080089fb 	.word	0x080089fb
 8008780:	080089fb 	.word	0x080089fb
 8008784:	080089fb 	.word	0x080089fb
 8008788:	080089fb 	.word	0x080089fb
 800878c:	080089fb 	.word	0x080089fb
 8008790:	080089fb 	.word	0x080089fb
 8008794:	08008799 	.word	0x08008799
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	7c12      	ldrb	r2, [r2, #16]
 80087b0:	f107 0108 	add.w	r1, r7, #8
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087ba:	e126      	b.n	8008a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fb27 	bl	8008e12 <USBD_CtlError>
        err++;
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	3301      	adds	r3, #1
 80087c8:	72fb      	strb	r3, [r7, #11]
      break;
 80087ca:	e11e      	b.n	8008a0a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7c12      	ldrb	r2, [r2, #16]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
      break;
 80087e2:	e112      	b.n	8008a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	7c1b      	ldrb	r3, [r3, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	f107 0208 	add.w	r2, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	2202      	movs	r2, #2
 8008804:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008806:	e100      	b.n	8008a0a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	f107 0208 	add.w	r2, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	2202      	movs	r2, #2
 8008820:	701a      	strb	r2, [r3, #0]
      break;
 8008822:	e0f2      	b.n	8008a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	885b      	ldrh	r3, [r3, #2]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b05      	cmp	r3, #5
 800882c:	f200 80ac 	bhi.w	8008988 <USBD_GetDescriptor+0x258>
 8008830:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <USBD_GetDescriptor+0x108>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	08008851 	.word	0x08008851
 800883c:	08008885 	.word	0x08008885
 8008840:	080088b9 	.word	0x080088b9
 8008844:	080088ed 	.word	0x080088ed
 8008848:	08008921 	.word	0x08008921
 800884c:	08008955 	.word	0x08008955
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	f107 0108 	add.w	r1, r7, #8
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008872:	e091      	b.n	8008998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 facb 	bl	8008e12 <USBD_CtlError>
            err++;
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	3301      	adds	r3, #1
 8008880:	72fb      	strb	r3, [r7, #11]
          break;
 8008882:	e089      	b.n	8008998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	7c12      	ldrb	r2, [r2, #16]
 800889c:	f107 0108 	add.w	r1, r7, #8
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
 80088a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088a6:	e077      	b.n	8008998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fab1 	bl	8008e12 <USBD_CtlError>
            err++;
 80088b0:	7afb      	ldrb	r3, [r7, #11]
 80088b2:	3301      	adds	r3, #1
 80088b4:	72fb      	strb	r3, [r7, #11]
          break;
 80088b6:	e06f      	b.n	8008998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	7c12      	ldrb	r2, [r2, #16]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088da:	e05d      	b.n	8008998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa97 	bl	8008e12 <USBD_CtlError>
            err++;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	3301      	adds	r3, #1
 80088e8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ea:	e055      	b.n	8008998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890e:	e043      	b.n	8008998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa7d 	bl	8008e12 <USBD_CtlError>
            err++;
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	3301      	adds	r3, #1
 800891c:	72fb      	strb	r3, [r7, #11]
          break;
 800891e:	e03b      	b.n	8008998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008942:	e029      	b.n	8008998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa63 	bl	8008e12 <USBD_CtlError>
            err++;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	3301      	adds	r3, #1
 8008950:	72fb      	strb	r3, [r7, #11]
          break;
 8008952:	e021      	b.n	8008998 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008976:	e00f      	b.n	8008998 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa49 	bl	8008e12 <USBD_CtlError>
            err++;
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	3301      	adds	r3, #1
 8008984:	72fb      	strb	r3, [r7, #11]
          break;
 8008986:	e007      	b.n	8008998 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa41 	bl	8008e12 <USBD_CtlError>
          err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008996:	bf00      	nop
      }
      break;
 8008998:	e037      	b.n	8008a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7c1b      	ldrb	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	f107 0208 	add.w	r2, r7, #8
 80089ae:	4610      	mov	r0, r2
 80089b0:	4798      	blx	r3
 80089b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b4:	e029      	b.n	8008a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fa2a 	bl	8008e12 <USBD_CtlError>
        err++;
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	3301      	adds	r3, #1
 80089c2:	72fb      	strb	r3, [r7, #11]
      break;
 80089c4:	e021      	b.n	8008a0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7c1b      	ldrb	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10d      	bne.n	80089ea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f107 0208 	add.w	r2, r7, #8
 80089da:	4610      	mov	r0, r2
 80089dc:	4798      	blx	r3
 80089de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3301      	adds	r3, #1
 80089e4:	2207      	movs	r2, #7
 80089e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e8:	e00f      	b.n	8008a0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa10 	bl	8008e12 <USBD_CtlError>
        err++;
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	3301      	adds	r3, #1
 80089f6:	72fb      	strb	r3, [r7, #11]
      break;
 80089f8:	e007      	b.n	8008a0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa08 	bl	8008e12 <USBD_CtlError>
      err++;
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	3301      	adds	r3, #1
 8008a06:	72fb      	strb	r3, [r7, #11]
      break;
 8008a08:	bf00      	nop
  }

  if (err != 0U)
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11e      	bne.n	8008a4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	88db      	ldrh	r3, [r3, #6]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d016      	beq.n	8008a46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008a18:	893b      	ldrh	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00e      	beq.n	8008a3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88da      	ldrh	r2, [r3, #6]
 8008a22:	893b      	ldrh	r3, [r7, #8]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	bf28      	it	cs
 8008a28:	4613      	movcs	r3, r2
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a2e:	893b      	ldrh	r3, [r7, #8]
 8008a30:	461a      	mov	r2, r3
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fa5d 	bl	8008ef4 <USBD_CtlSendData>
 8008a3a:	e009      	b.n	8008a50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f9e7 	bl	8008e12 <USBD_CtlError>
 8008a44:	e004      	b.n	8008a50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 faae 	bl	8008fa8 <USBD_CtlSendStatus>
 8008a4c:	e000      	b.n	8008a50 <USBD_GetDescriptor+0x320>
    return;
 8008a4e:	bf00      	nop
  }
}
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop

08008a58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	889b      	ldrh	r3, [r3, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d131      	bne.n	8008ace <USBD_SetAddress+0x76>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	88db      	ldrh	r3, [r3, #6]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d12d      	bne.n	8008ace <USBD_SetAddress+0x76>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	885b      	ldrh	r3, [r3, #2]
 8008a76:	2b7f      	cmp	r3, #127	; 0x7f
 8008a78:	d829      	bhi.n	8008ace <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d104      	bne.n	8008a9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f9bc 	bl	8008e12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9a:	e01d      	b.n	8008ad8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7bfa      	ldrb	r2, [r7, #15]
 8008aa0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 ff10 	bl	80098ce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa7a 	bl	8008fa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac2:	e009      	b.n	8008ad8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008acc:	e004      	b.n	8008ad8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f99e 	bl	8008e12 <USBD_CtlError>
  }
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	4b4e      	ldr	r3, [pc, #312]	; (8008c30 <USBD_SetConfig+0x150>)
 8008af6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008af8:	4b4d      	ldr	r3, [pc, #308]	; (8008c30 <USBD_SetConfig+0x150>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d905      	bls.n	8008b0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f985 	bl	8008e12 <USBD_CtlError>
    return USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e08c      	b.n	8008c26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d002      	beq.n	8008b1e <USBD_SetConfig+0x3e>
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d029      	beq.n	8008b70 <USBD_SetConfig+0x90>
 8008b1c:	e075      	b.n	8008c0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b1e:	4b44      	ldr	r3, [pc, #272]	; (8008c30 <USBD_SetConfig+0x150>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d020      	beq.n	8008b68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b26:	4b42      	ldr	r3, [pc, #264]	; (8008c30 <USBD_SetConfig+0x150>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b30:	4b3f      	ldr	r3, [pc, #252]	; (8008c30 <USBD_SetConfig+0x150>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff f849 	bl	8007bce <USBD_SetClassConfig>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f962 	bl	8008e12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2202      	movs	r2, #2
 8008b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b56:	e065      	b.n	8008c24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fa25 	bl	8008fa8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2203      	movs	r2, #3
 8008b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b66:	e05d      	b.n	8008c24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa1d 	bl	8008fa8 <USBD_CtlSendStatus>
      break;
 8008b6e:	e059      	b.n	8008c24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b70:	4b2f      	ldr	r3, [pc, #188]	; (8008c30 <USBD_SetConfig+0x150>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d112      	bne.n	8008b9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b80:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <USBD_SetConfig+0x150>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b8a:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <USBD_SetConfig+0x150>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff f838 	bl	8007c06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa06 	bl	8008fa8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b9c:	e042      	b.n	8008c24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b9e:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <USBD_SetConfig+0x150>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d02a      	beq.n	8008c02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff f826 	bl	8007c06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bba:	4b1d      	ldr	r3, [pc, #116]	; (8008c30 <USBD_SetConfig+0x150>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	; (8008c30 <USBD_SetConfig+0x150>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fe ffff 	bl	8007bce <USBD_SetClassConfig>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00f      	beq.n	8008bfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f918 	bl	8008e12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff f80b 	bl	8007c06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bf8:	e014      	b.n	8008c24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f9d4 	bl	8008fa8 <USBD_CtlSendStatus>
      break;
 8008c00:	e010      	b.n	8008c24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f9d0 	bl	8008fa8 <USBD_CtlSendStatus>
      break;
 8008c08:	e00c      	b.n	8008c24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f900 	bl	8008e12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <USBD_SetConfig+0x150>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fe fff4 	bl	8007c06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	73fb      	strb	r3, [r7, #15]
      break;
 8008c22:	bf00      	nop
  }

  return ret;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000250 	.word	0x20000250

08008c34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d004      	beq.n	8008c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f8e2 	bl	8008e12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c4e:	e023      	b.n	8008c98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	dc02      	bgt.n	8008c62 <USBD_GetConfig+0x2e>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dc03      	bgt.n	8008c68 <USBD_GetConfig+0x34>
 8008c60:	e015      	b.n	8008c8e <USBD_GetConfig+0x5a>
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d00b      	beq.n	8008c7e <USBD_GetConfig+0x4a>
 8008c66:	e012      	b.n	8008c8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3308      	adds	r3, #8
 8008c72:	2201      	movs	r2, #1
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f93c 	bl	8008ef4 <USBD_CtlSendData>
        break;
 8008c7c:	e00c      	b.n	8008c98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3304      	adds	r3, #4
 8008c82:	2201      	movs	r2, #1
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f934 	bl	8008ef4 <USBD_CtlSendData>
        break;
 8008c8c:	e004      	b.n	8008c98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f8be 	bl	8008e12 <USBD_CtlError>
        break;
 8008c96:	bf00      	nop
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d81e      	bhi.n	8008cf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	88db      	ldrh	r3, [r3, #6]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d004      	beq.n	8008cca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f8a5 	bl	8008e12 <USBD_CtlError>
        break;
 8008cc8:	e01a      	b.n	8008d00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d005      	beq.n	8008ce6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f043 0202 	orr.w	r2, r3, #2
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	330c      	adds	r3, #12
 8008cea:	2202      	movs	r2, #2
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f900 	bl	8008ef4 <USBD_CtlSendData>
      break;
 8008cf4:	e004      	b.n	8008d00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f88a 	bl	8008e12 <USBD_CtlError>
      break;
 8008cfe:	bf00      	nop
  }
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d107      	bne.n	8008d2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f940 	bl	8008fa8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d28:	e013      	b.n	8008d52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	885b      	ldrh	r3, [r3, #2]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d10b      	bne.n	8008d4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	889b      	ldrh	r3, [r3, #4]
 8008d36:	0a1b      	lsrs	r3, r3, #8
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f930 	bl	8008fa8 <USBD_CtlSendStatus>
}
 8008d48:	e003      	b.n	8008d52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f860 	bl	8008e12 <USBD_CtlError>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d80b      	bhi.n	8008d8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d10c      	bne.n	8008d94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f910 	bl	8008fa8 <USBD_CtlSendStatus>
      }
      break;
 8008d88:	e004      	b.n	8008d94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f840 	bl	8008e12 <USBD_CtlError>
      break;
 8008d92:	e000      	b.n	8008d96 <USBD_ClrFeature+0x3c>
      break;
 8008d94:	bf00      	nop
  }
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	781a      	ldrb	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fa17 	bl	80081fc <SWAPBYTE>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fa0a 	bl	80081fc <SWAPBYTE>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f7ff f9fd 	bl	80081fc <SWAPBYTE>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	80da      	strh	r2, [r3, #6]
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1c:	2180      	movs	r1, #128	; 0x80
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fcea 	bl	80097f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e24:	2100      	movs	r1, #0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fce6 	bl	80097f8 <USBD_LL_StallEP>
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d036      	beq.n	8008eb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e4e:	6938      	ldr	r0, [r7, #16]
 8008e50:	f000 f836 	bl	8008ec0 <USBD_GetLen>
 8008e54:	4603      	mov	r3, r0
 8008e56:	3301      	adds	r3, #1
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	4413      	add	r3, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	7812      	ldrb	r2, [r2, #0]
 8008e6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	3301      	adds	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4413      	add	r3, r2
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	3301      	adds	r3, #1
 8008e82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e84:	e013      	b.n	8008eae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	7812      	ldrb	r2, [r2, #0]
 8008e90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	3301      	adds	r3, #1
 8008e96:	613b      	str	r3, [r7, #16]
    idx++;
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e7      	bne.n	8008e86 <USBD_GetString+0x52>
 8008eb6:	e000      	b.n	8008eba <USBD_GetString+0x86>
    return;
 8008eb8:	bf00      	nop
  }
}
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ed0:	e005      	b.n	8008ede <USBD_GetLen+0x1e>
  {
    len++;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	3301      	adds	r3, #1
 8008edc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1f5      	bne.n	8008ed2 <USBD_GetLen+0x12>
  }

  return len;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2202      	movs	r2, #2
 8008f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	2100      	movs	r1, #0
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fcf6 	bl	800990c <USBD_LL_Transmit>

  return USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fce5 	bl	800990c <USBD_LL_Transmit>

  return USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	2100      	movs	r1, #0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 fce9 	bl	800994e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	2100      	movs	r1, #0
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 fcd8 	bl	800994e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fca4 	bl	800990c <USBD_LL_Transmit>

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2205      	movs	r2, #5
 8008fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fcb2 	bl	800994e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4912      	ldr	r1, [pc, #72]	; (8009044 <MX_USB_Device_Init+0x50>)
 8008ffc:	4812      	ldr	r0, [pc, #72]	; (8009048 <MX_USB_Device_Init+0x54>)
 8008ffe:	f7fe fd69 	bl	8007ad4 <USBD_Init>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009008:	f7f7 fc06 	bl	8000818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800900c:	490f      	ldr	r1, [pc, #60]	; (800904c <MX_USB_Device_Init+0x58>)
 800900e:	480e      	ldr	r0, [pc, #56]	; (8009048 <MX_USB_Device_Init+0x54>)
 8009010:	f7fe fd90 	bl	8007b34 <USBD_RegisterClass>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800901a:	f7f7 fbfd 	bl	8000818 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800901e:	490c      	ldr	r1, [pc, #48]	; (8009050 <MX_USB_Device_Init+0x5c>)
 8009020:	4809      	ldr	r0, [pc, #36]	; (8009048 <MX_USB_Device_Init+0x54>)
 8009022:	f7fe fc87 	bl	8007934 <USBD_CDC_RegisterInterface>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800902c:	f7f7 fbf4 	bl	8000818 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009030:	4805      	ldr	r0, [pc, #20]	; (8009048 <MX_USB_Device_Init+0x54>)
 8009032:	f7fe fdb5 	bl	8007ba0 <USBD_Start>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800903c:	f7f7 fbec 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}
 8009044:	200000f8 	.word	0x200000f8
 8009048:	20000254 	.word	0x20000254
 800904c:	20000064 	.word	0x20000064
 8009050:	200000e4 	.word	0x200000e4

08009054 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009058:	2200      	movs	r2, #0
 800905a:	4905      	ldr	r1, [pc, #20]	; (8009070 <CDC_Init_FS+0x1c>)
 800905c:	4805      	ldr	r0, [pc, #20]	; (8009074 <CDC_Init_FS+0x20>)
 800905e:	f7fe fc83 	bl	8007968 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009062:	4905      	ldr	r1, [pc, #20]	; (8009078 <CDC_Init_FS+0x24>)
 8009064:	4803      	ldr	r0, [pc, #12]	; (8009074 <CDC_Init_FS+0x20>)
 8009066:	f7fe fca1 	bl	80079ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800906a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800906c:	4618      	mov	r0, r3
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000d30 	.word	0x20000d30
 8009074:	20000254 	.word	0x20000254
 8009078:	20000530 	.word	0x20000530

0800907c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009080:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009082:	4618      	mov	r0, r3
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	6039      	str	r1, [r7, #0]
 8009096:	71fb      	strb	r3, [r7, #7]
 8009098:	4613      	mov	r3, r2
 800909a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b23      	cmp	r3, #35	; 0x23
 80090a0:	d84a      	bhi.n	8009138 <CDC_Control_FS+0xac>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <CDC_Control_FS+0x1c>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	08009139 	.word	0x08009139
 80090ac:	08009139 	.word	0x08009139
 80090b0:	08009139 	.word	0x08009139
 80090b4:	08009139 	.word	0x08009139
 80090b8:	08009139 	.word	0x08009139
 80090bc:	08009139 	.word	0x08009139
 80090c0:	08009139 	.word	0x08009139
 80090c4:	08009139 	.word	0x08009139
 80090c8:	08009139 	.word	0x08009139
 80090cc:	08009139 	.word	0x08009139
 80090d0:	08009139 	.word	0x08009139
 80090d4:	08009139 	.word	0x08009139
 80090d8:	08009139 	.word	0x08009139
 80090dc:	08009139 	.word	0x08009139
 80090e0:	08009139 	.word	0x08009139
 80090e4:	08009139 	.word	0x08009139
 80090e8:	08009139 	.word	0x08009139
 80090ec:	08009139 	.word	0x08009139
 80090f0:	08009139 	.word	0x08009139
 80090f4:	08009139 	.word	0x08009139
 80090f8:	08009139 	.word	0x08009139
 80090fc:	08009139 	.word	0x08009139
 8009100:	08009139 	.word	0x08009139
 8009104:	08009139 	.word	0x08009139
 8009108:	08009139 	.word	0x08009139
 800910c:	08009139 	.word	0x08009139
 8009110:	08009139 	.word	0x08009139
 8009114:	08009139 	.word	0x08009139
 8009118:	08009139 	.word	0x08009139
 800911c:	08009139 	.word	0x08009139
 8009120:	08009139 	.word	0x08009139
 8009124:	08009139 	.word	0x08009139
 8009128:	08009139 	.word	0x08009139
 800912c:	08009139 	.word	0x08009139
 8009130:	08009139 	.word	0x08009139
 8009134:	08009139 	.word	0x08009139
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009138:	bf00      	nop
  }

  return (USBD_OK);
 800913a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009152:	6879      	ldr	r1, [r7, #4]
 8009154:	4805      	ldr	r0, [pc, #20]	; (800916c <CDC_Receive_FS+0x24>)
 8009156:	f7fe fc29 	bl	80079ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800915a:	4804      	ldr	r0, [pc, #16]	; (800916c <CDC_Receive_FS+0x24>)
 800915c:	f7fe fc84 	bl	8007a68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009160:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000254 	.word	0x20000254

08009170 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009180:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <CDC_Transmit_FS+0x48>)
 8009182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009186:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009192:	2301      	movs	r3, #1
 8009194:	e00b      	b.n	80091ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009196:	887b      	ldrh	r3, [r7, #2]
 8009198:	461a      	mov	r2, r3
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	4806      	ldr	r0, [pc, #24]	; (80091b8 <CDC_Transmit_FS+0x48>)
 800919e:	f7fe fbe3 	bl	8007968 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091a2:	4805      	ldr	r0, [pc, #20]	; (80091b8 <CDC_Transmit_FS+0x48>)
 80091a4:	f7fe fc20 	bl	80079e8 <USBD_CDC_TransmitPacket>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000254 	.word	0x20000254

080091bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
	...

080091e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2212      	movs	r2, #18
 80091f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	; (8009200 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000118 	.word	0x20000118

08009204 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2204      	movs	r2, #4
 8009214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009216:	4b03      	ldr	r3, [pc, #12]	; (8009224 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	2000012c 	.word	0x2000012c

08009228 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d105      	bne.n	8009246 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4907      	ldr	r1, [pc, #28]	; (800925c <USBD_CDC_ProductStrDescriptor+0x34>)
 800923e:	4808      	ldr	r0, [pc, #32]	; (8009260 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009240:	f7ff fdf8 	bl	8008e34 <USBD_GetString>
 8009244:	e004      	b.n	8009250 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4904      	ldr	r1, [pc, #16]	; (800925c <USBD_CDC_ProductStrDescriptor+0x34>)
 800924a:	4805      	ldr	r0, [pc, #20]	; (8009260 <USBD_CDC_ProductStrDescriptor+0x38>)
 800924c:	f7ff fdf2 	bl	8008e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009250:	4b02      	ldr	r3, [pc, #8]	; (800925c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20001530 	.word	0x20001530
 8009260:	0800c334 	.word	0x0800c334

08009264 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	6039      	str	r1, [r7, #0]
 800926e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	4904      	ldr	r1, [pc, #16]	; (8009284 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009274:	4804      	ldr	r0, [pc, #16]	; (8009288 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009276:	f7ff fddd 	bl	8008e34 <USBD_GetString>
  return USBD_StrDesc;
 800927a:	4b02      	ldr	r3, [pc, #8]	; (8009284 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20001530 	.word	0x20001530
 8009288:	0800c34c 	.word	0x0800c34c

0800928c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	221a      	movs	r2, #26
 800929c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800929e:	f000 f843 	bl	8009328 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80092a2:	4b02      	ldr	r3, [pc, #8]	; (80092ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20000130 	.word	0x20000130

080092b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d105      	bne.n	80092ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	4907      	ldr	r1, [pc, #28]	; (80092e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092c6:	4808      	ldr	r0, [pc, #32]	; (80092e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80092c8:	f7ff fdb4 	bl	8008e34 <USBD_GetString>
 80092cc:	e004      	b.n	80092d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80092d4:	f7ff fdae 	bl	8008e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d8:	4b02      	ldr	r3, [pc, #8]	; (80092e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20001530 	.word	0x20001530
 80092e8:	0800c360 	.word	0x0800c360

080092ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d105      	bne.n	800930a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4907      	ldr	r1, [pc, #28]	; (8009320 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009302:	4808      	ldr	r0, [pc, #32]	; (8009324 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009304:	f7ff fd96 	bl	8008e34 <USBD_GetString>
 8009308:	e004      	b.n	8009314 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4904      	ldr	r1, [pc, #16]	; (8009320 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800930e:	4805      	ldr	r0, [pc, #20]	; (8009324 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009310:	f7ff fd90 	bl	8008e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20001530 	.word	0x20001530
 8009324:	0800c36c 	.word	0x0800c36c

08009328 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <Get_SerialNum+0x44>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009334:	4b0e      	ldr	r3, [pc, #56]	; (8009370 <Get_SerialNum+0x48>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800933a:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <Get_SerialNum+0x4c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4413      	add	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800934e:	2208      	movs	r2, #8
 8009350:	4909      	ldr	r1, [pc, #36]	; (8009378 <Get_SerialNum+0x50>)
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f814 	bl	8009380 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009358:	2204      	movs	r2, #4
 800935a:	4908      	ldr	r1, [pc, #32]	; (800937c <Get_SerialNum+0x54>)
 800935c:	68b8      	ldr	r0, [r7, #8]
 800935e:	f000 f80f 	bl	8009380 <IntToUnicode>
  }
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	1fff7590 	.word	0x1fff7590
 8009370:	1fff7594 	.word	0x1fff7594
 8009374:	1fff7598 	.word	0x1fff7598
 8009378:	20000132 	.word	0x20000132
 800937c:	20000142 	.word	0x20000142

08009380 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]
 8009396:	e027      	b.n	80093e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	0f1b      	lsrs	r3, r3, #28
 800939c:	2b09      	cmp	r3, #9
 800939e:	d80b      	bhi.n	80093b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	0f1b      	lsrs	r3, r3, #28
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	4619      	mov	r1, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	440b      	add	r3, r1
 80093b0:	3230      	adds	r2, #48	; 0x30
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e00a      	b.n	80093ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	0f1b      	lsrs	r3, r3, #28
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	4619      	mov	r1, r3
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	440b      	add	r3, r1
 80093c8:	3237      	adds	r2, #55	; 0x37
 80093ca:	b2d2      	uxtb	r2, r2
 80093cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	3301      	adds	r3, #1
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	2200      	movs	r2, #0
 80093e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	3301      	adds	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
 80093e8:	7dfa      	ldrb	r2, [r7, #23]
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d3d3      	bcc.n	8009398 <IntToUnicode+0x18>
  }
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <LL_AHB2_GRP1_EnableClock>:
{
 80093fe:	b480      	push	{r7}
 8009400:	b085      	sub	sp, #20
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800940a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800940c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4313      	orrs	r3, r2
 8009414:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800941a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4013      	ands	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009422:	68fb      	ldr	r3, [r7, #12]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800943c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800943e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4313      	orrs	r3, r2
 8009446:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800944c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4013      	ands	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009454:	68fb      	ldr	r3, [r7, #12]
}
 8009456:	bf00      	nop
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
	...

08009464 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b09c      	sub	sp, #112	; 0x70
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800946c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	609a      	str	r2, [r3, #8]
 8009478:	60da      	str	r2, [r3, #12]
 800947a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	2250      	movs	r2, #80	; 0x50
 8009482:	2100      	movs	r1, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f000 fc6b 	bl	8009d60 <memset>
  if(pcdHandle->Instance==USB)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a23      	ldr	r2, [pc, #140]	; (800951c <HAL_PCD_MspInit+0xb8>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d13e      	bne.n	8009512 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009498:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800949a:	2318      	movs	r3, #24
 800949c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800949e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80094a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80094aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80094ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80094b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80094b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094ba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80094bc:	f107 030c 	add.w	r3, r7, #12
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fb f82d 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80094cc:	f7f7 f9a4 	bl	8000818 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094d0:	2001      	movs	r0, #1
 80094d2:	f7ff ff94 	bl	80093fe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094dc:	2302      	movs	r3, #2
 80094de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094e4:	2300      	movs	r3, #0
 80094e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80094e8:	230a      	movs	r3, #10
 80094ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80094f0:	4619      	mov	r1, r3
 80094f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094f6:	f7f7 fe0d 	bl	8001114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80094fe:	f7ff ff97 	bl	8009430 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	2014      	movs	r0, #20
 8009508:	f7f7 fdcf 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800950c:	2014      	movs	r0, #20
 800950e:	f7f7 fde6 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009512:	bf00      	nop
 8009514:	3770      	adds	r7, #112	; 0x70
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	40006800 	.word	0x40006800

08009520 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f7fe fb7f 	bl	8007c3a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	440b      	add	r3, r1
 8009564:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	4619      	mov	r1, r3
 800956e:	f7fe fbb9 	bl	8007ce4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b082      	sub	sp, #8
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	440b      	add	r3, r1
 800959a:	333c      	adds	r3, #60	; 0x3c
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	4619      	mov	r1, r3
 80095a2:	f7fe fc52 	bl	8007e4a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fd8c 	bl	80080da <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095d2:	2301      	movs	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d001      	beq.n	80095e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095de:	f7f7 f91b 	bl	8000818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095e8:	7bfa      	ldrb	r2, [r7, #15]
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fd30 	bl	8008052 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fcd8 	bl	8007fae <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe fd2b 	bl	8008072 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <HAL_PCD_SuspendCallback+0x30>)
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	4a03      	ldr	r2, [pc, #12]	; (8009638 <HAL_PCD_SuspendCallback+0x30>)
 800962a:	f043 0306 	orr.w	r3, r3, #6
 800962e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	e000ed00 	.word	0xe000ed00

0800963c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d007      	beq.n	800965c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <HAL_PCD_ResumeCallback+0x34>)
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	4a07      	ldr	r2, [pc, #28]	; (8009670 <HAL_PCD_ResumeCallback+0x34>)
 8009652:	f023 0306 	bic.w	r3, r3, #6
 8009656:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009658:	f000 f9fc 	bl	8009a54 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fd21 	bl	80080aa <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009668:	bf00      	nop
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	e000ed00 	.word	0xe000ed00

08009674 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800967c:	4a2c      	ldr	r2, [pc, #176]	; (8009730 <USBD_LL_Init+0xbc>)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a2a      	ldr	r2, [pc, #168]	; (8009730 <USBD_LL_Init+0xbc>)
 8009688:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800968c:	f7f9 fc44 	bl	8002f18 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009690:	4b27      	ldr	r3, [pc, #156]	; (8009730 <USBD_LL_Init+0xbc>)
 8009692:	4a28      	ldr	r2, [pc, #160]	; (8009734 <USBD_LL_Init+0xc0>)
 8009694:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009696:	4b26      	ldr	r3, [pc, #152]	; (8009730 <USBD_LL_Init+0xbc>)
 8009698:	2208      	movs	r2, #8
 800969a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800969c:	4b24      	ldr	r3, [pc, #144]	; (8009730 <USBD_LL_Init+0xbc>)
 800969e:	2202      	movs	r2, #2
 80096a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096a2:	4b23      	ldr	r3, [pc, #140]	; (8009730 <USBD_LL_Init+0xbc>)
 80096a4:	2202      	movs	r2, #2
 80096a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096a8:	4b21      	ldr	r3, [pc, #132]	; (8009730 <USBD_LL_Init+0xbc>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ae:	4b20      	ldr	r3, [pc, #128]	; (8009730 <USBD_LL_Init+0xbc>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096b4:	4b1e      	ldr	r3, [pc, #120]	; (8009730 <USBD_LL_Init+0xbc>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096ba:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <USBD_LL_Init+0xbc>)
 80096bc:	2200      	movs	r2, #0
 80096be:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096c0:	481b      	ldr	r0, [pc, #108]	; (8009730 <USBD_LL_Init+0xbc>)
 80096c2:	f7f7 fec7 	bl	8001454 <HAL_PCD_Init>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80096cc:	f7f7 f8a4 	bl	8000818 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096d6:	2318      	movs	r3, #24
 80096d8:	2200      	movs	r2, #0
 80096da:	2100      	movs	r1, #0
 80096dc:	f7f9 fb90 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096e6:	2358      	movs	r3, #88	; 0x58
 80096e8:	2200      	movs	r2, #0
 80096ea:	2180      	movs	r1, #128	; 0x80
 80096ec:	f7f9 fb88 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096f6:	23c0      	movs	r3, #192	; 0xc0
 80096f8:	2200      	movs	r2, #0
 80096fa:	2181      	movs	r1, #129	; 0x81
 80096fc:	f7f9 fb80 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009706:	f44f 7388 	mov.w	r3, #272	; 0x110
 800970a:	2200      	movs	r2, #0
 800970c:	2101      	movs	r1, #1
 800970e:	f7f9 fb77 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800971c:	2200      	movs	r2, #0
 800971e:	2182      	movs	r1, #130	; 0x82
 8009720:	f7f9 fb6e 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20001730 	.word	0x20001730
 8009734:	40006800 	.word	0x40006800

08009738 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800974e:	4618      	mov	r0, r3
 8009750:	f7f7 ff59 	bl	8001606 <HAL_PCD_Start>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4618      	mov	r0, r3
 800975c:	f000 f980 	bl	8009a60 <USBD_Get_USB_Status>
 8009760:	4603      	mov	r3, r0
 8009762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009764:	7bbb      	ldrb	r3, [r7, #14]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	4608      	mov	r0, r1
 8009778:	4611      	mov	r1, r2
 800977a:	461a      	mov	r2, r3
 800977c:	4603      	mov	r3, r0
 800977e:	70fb      	strb	r3, [r7, #3]
 8009780:	460b      	mov	r3, r1
 8009782:	70bb      	strb	r3, [r7, #2]
 8009784:	4613      	mov	r3, r2
 8009786:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009796:	78bb      	ldrb	r3, [r7, #2]
 8009798:	883a      	ldrh	r2, [r7, #0]
 800979a:	78f9      	ldrb	r1, [r7, #3]
 800979c:	f7f8 f8a1 	bl	80018e2 <HAL_PCD_EP_Open>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f95a 	bl	8009a60 <USBD_Get_USB_Status>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097d4:	78fa      	ldrb	r2, [r7, #3]
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f8 f8df 	bl	800199c <HAL_PCD_EP_Close>
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 f93b 	bl	8009a60 <USBD_Get_USB_Status>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009812:	78fa      	ldrb	r2, [r7, #3]
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f7f8 f988 	bl	8001b2c <HAL_PCD_EP_SetStall>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f91c 	bl	8009a60 <USBD_Get_USB_Status>
 8009828:	4603      	mov	r3, r0
 800982a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982c:	7bbb      	ldrb	r3, [r7, #14]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	4611      	mov	r1, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f7f8 f9bb 	bl	8001bd0 <HAL_PCD_EP_ClrStall>
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f8fd 	bl	8009a60 <USBD_Get_USB_Status>
 8009866:	4603      	mov	r3, r0
 8009868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986a:	7bbb      	ldrb	r3, [r7, #14]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009886:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800988c:	2b00      	cmp	r3, #0
 800988e:	da0c      	bge.n	80098aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	440b      	add	r3, r1
 80098a4:	3302      	adds	r3, #2
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	e00b      	b.n	80098c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b0:	68f9      	ldr	r1, [r7, #12]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	440b      	add	r3, r1
 80098bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80098c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098e8:	78fa      	ldrb	r2, [r7, #3]
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7f7 ffd3 	bl	8001898 <HAL_PCD_SetAddress>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 f8b1 	bl	8009a60 <USBD_Get_USB_Status>
 80098fe:	4603      	mov	r3, r0
 8009900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009902:	7bbb      	ldrb	r3, [r7, #14]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	460b      	mov	r3, r1
 800991a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800992a:	7af9      	ldrb	r1, [r7, #11]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	f7f8 f8c5 	bl	8001abe <HAL_PCD_EP_Transmit>
 8009934:	4603      	mov	r3, r0
 8009936:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	4618      	mov	r0, r3
 800993c:	f000 f890 	bl	8009a60 <USBD_Get_USB_Status>
 8009940:	4603      	mov	r3, r0
 8009942:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009944:	7dbb      	ldrb	r3, [r7, #22]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	460b      	mov	r3, r1
 800995c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800996c:	7af9      	ldrb	r1, [r7, #11]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f7f8 f85b 	bl	8001a2c <HAL_PCD_EP_Receive>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f86f 	bl	8009a60 <USBD_Get_USB_Status>
 8009982:	4603      	mov	r3, r0
 8009984:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009986:	7dbb      	ldrb	r3, [r7, #22]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7f8 f871 	bl	8001a8e <HAL_PCD_EP_GetRxCount>
 80099ac:	4603      	mov	r3, r0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <HAL_PCDEx_LPM_Callback+0x18>
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d013      	beq.n	80099f6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80099ce:	e023      	b.n	8009a18 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d007      	beq.n	80099e8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099d8:	f000 f83c 	bl	8009a54 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099dc:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <HAL_PCDEx_LPM_Callback+0x68>)
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	4a0f      	ldr	r2, [pc, #60]	; (8009a20 <HAL_PCDEx_LPM_Callback+0x68>)
 80099e2:	f023 0306 	bic.w	r3, r3, #6
 80099e6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fb5b 	bl	80080aa <USBD_LL_Resume>
    break;
 80099f4:	e010      	b.n	8009a18 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fb38 	bl	8008072 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a0a:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	4a04      	ldr	r2, [pc, #16]	; (8009a20 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a10:	f043 0306 	orr.w	r3, r3, #6
 8009a14:	6113      	str	r3, [r2, #16]
    break;
 8009a16:	bf00      	nop
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	e000ed00 	.word	0xe000ed00

08009a24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a2c:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <USBD_static_malloc+0x18>)
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	20001a24 	.word	0x20001a24

08009a40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a58:	f7f6 fde0 	bl	800061c <SystemClock_Config>
}
 8009a5c:	bf00      	nop
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d817      	bhi.n	8009aa4 <USBD_Get_USB_Status+0x44>
 8009a74:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <USBD_Get_USB_Status+0x1c>)
 8009a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7a:	bf00      	nop
 8009a7c:	08009a8d 	.word	0x08009a8d
 8009a80:	08009a93 	.word	0x08009a93
 8009a84:	08009a99 	.word	0x08009a99
 8009a88:	08009a9f 	.word	0x08009a9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a90:	e00b      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a92:	2303      	movs	r3, #3
 8009a94:	73fb      	strb	r3, [r7, #15]
    break;
 8009a96:	e008      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9c:	e005      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa2:	e002      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa8:	bf00      	nop
  }
  return usb_status;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <ctime>:
 8009ab8:	b508      	push	{r3, lr}
 8009aba:	f000 f82f 	bl	8009b1c <localtime>
 8009abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ac2:	f000 bcb3 	b.w	800a42c <asctime>
	...

08009ac8 <__errno>:
 8009ac8:	4b01      	ldr	r3, [pc, #4]	; (8009ad0 <__errno+0x8>)
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	2000014c 	.word	0x2000014c

08009ad4 <__libc_init_array>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4d0d      	ldr	r5, [pc, #52]	; (8009b0c <__libc_init_array+0x38>)
 8009ad8:	4c0d      	ldr	r4, [pc, #52]	; (8009b10 <__libc_init_array+0x3c>)
 8009ada:	1b64      	subs	r4, r4, r5
 8009adc:	10a4      	asrs	r4, r4, #2
 8009ade:	2600      	movs	r6, #0
 8009ae0:	42a6      	cmp	r6, r4
 8009ae2:	d109      	bne.n	8009af8 <__libc_init_array+0x24>
 8009ae4:	4d0b      	ldr	r5, [pc, #44]	; (8009b14 <__libc_init_array+0x40>)
 8009ae6:	4c0c      	ldr	r4, [pc, #48]	; (8009b18 <__libc_init_array+0x44>)
 8009ae8:	f002 fbc4 	bl	800c274 <_init>
 8009aec:	1b64      	subs	r4, r4, r5
 8009aee:	10a4      	asrs	r4, r4, #2
 8009af0:	2600      	movs	r6, #0
 8009af2:	42a6      	cmp	r6, r4
 8009af4:	d105      	bne.n	8009b02 <__libc_init_array+0x2e>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afc:	4798      	blx	r3
 8009afe:	3601      	adds	r6, #1
 8009b00:	e7ee      	b.n	8009ae0 <__libc_init_array+0xc>
 8009b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b06:	4798      	blx	r3
 8009b08:	3601      	adds	r6, #1
 8009b0a:	e7f2      	b.n	8009af2 <__libc_init_array+0x1e>
 8009b0c:	0800c7c8 	.word	0x0800c7c8
 8009b10:	0800c7c8 	.word	0x0800c7c8
 8009b14:	0800c7c8 	.word	0x0800c7c8
 8009b18:	0800c7cc 	.word	0x0800c7cc

08009b1c <localtime>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <localtime+0x30>)
 8009b20:	681d      	ldr	r5, [r3, #0]
 8009b22:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009b24:	4604      	mov	r4, r0
 8009b26:	b953      	cbnz	r3, 8009b3e <localtime+0x22>
 8009b28:	2024      	movs	r0, #36	; 0x24
 8009b2a:	f000 f909 	bl	8009d40 <malloc>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	63e8      	str	r0, [r5, #60]	; 0x3c
 8009b32:	b920      	cbnz	r0, 8009b3e <localtime+0x22>
 8009b34:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <localtime+0x34>)
 8009b36:	4807      	ldr	r0, [pc, #28]	; (8009b54 <localtime+0x38>)
 8009b38:	2132      	movs	r1, #50	; 0x32
 8009b3a:	f000 fcbf 	bl	800a4bc <__assert_func>
 8009b3e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8009b40:	4620      	mov	r0, r4
 8009b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b46:	f000 b807 	b.w	8009b58 <localtime_r>
 8009b4a:	bf00      	nop
 8009b4c:	2000014c 	.word	0x2000014c
 8009b50:	0800c40c 	.word	0x0800c40c
 8009b54:	0800c423 	.word	0x0800c423

08009b58 <localtime_r>:
 8009b58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	9101      	str	r1, [sp, #4]
 8009b60:	f000 fe28 	bl	800a7b4 <__gettzinfo>
 8009b64:	9901      	ldr	r1, [sp, #4]
 8009b66:	4605      	mov	r5, r0
 8009b68:	4640      	mov	r0, r8
 8009b6a:	f000 fe27 	bl	800a7bc <gmtime_r>
 8009b6e:	6943      	ldr	r3, [r0, #20]
 8009b70:	0799      	lsls	r1, r3, #30
 8009b72:	4604      	mov	r4, r0
 8009b74:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8009b78:	d105      	bne.n	8009b86 <localtime_r+0x2e>
 8009b7a:	2264      	movs	r2, #100	; 0x64
 8009b7c:	fb97 f3f2 	sdiv	r3, r7, r2
 8009b80:	fb02 7313 	mls	r3, r2, r3, r7
 8009b84:	bb73      	cbnz	r3, 8009be4 <localtime_r+0x8c>
 8009b86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009b8a:	fb97 f6f3 	sdiv	r6, r7, r3
 8009b8e:	fb03 7616 	mls	r6, r3, r6, r7
 8009b92:	fab6 f386 	clz	r3, r6
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	4e67      	ldr	r6, [pc, #412]	; (8009d38 <localtime_r+0x1e0>)
 8009b9a:	2230      	movs	r2, #48	; 0x30
 8009b9c:	fb02 6603 	mla	r6, r2, r3, r6
 8009ba0:	f000 fab2 	bl	800a108 <__tz_lock>
 8009ba4:	f000 fabc 	bl	800a120 <_tzset_unlocked>
 8009ba8:	4b64      	ldr	r3, [pc, #400]	; (8009d3c <localtime_r+0x1e4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	b34b      	cbz	r3, 8009c02 <localtime_r+0xaa>
 8009bae:	686b      	ldr	r3, [r5, #4]
 8009bb0:	42bb      	cmp	r3, r7
 8009bb2:	d119      	bne.n	8009be8 <localtime_r+0x90>
 8009bb4:	682f      	ldr	r7, [r5, #0]
 8009bb6:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009bba:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8009bbe:	b9df      	cbnz	r7, 8009bf8 <localtime_r+0xa0>
 8009bc0:	4282      	cmp	r2, r0
 8009bc2:	eb73 0101 	sbcs.w	r1, r3, r1
 8009bc6:	da23      	bge.n	8009c10 <localtime_r+0xb8>
 8009bc8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009bcc:	4282      	cmp	r2, r0
 8009bce:	eb73 0701 	sbcs.w	r7, r3, r1
 8009bd2:	bfb4      	ite	lt
 8009bd4:	2701      	movlt	r7, #1
 8009bd6:	2700      	movge	r7, #0
 8009bd8:	4282      	cmp	r2, r0
 8009bda:	418b      	sbcs	r3, r1
 8009bdc:	6227      	str	r7, [r4, #32]
 8009bde:	db19      	blt.n	8009c14 <localtime_r+0xbc>
 8009be0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009be2:	e018      	b.n	8009c16 <localtime_r+0xbe>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e7d7      	b.n	8009b98 <localtime_r+0x40>
 8009be8:	4638      	mov	r0, r7
 8009bea:	f000 f9e3 	bl	8009fb4 <__tzcalc_limits>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d1e0      	bne.n	8009bb4 <localtime_r+0x5c>
 8009bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf6:	e004      	b.n	8009c02 <localtime_r+0xaa>
 8009bf8:	4282      	cmp	r2, r0
 8009bfa:	eb73 0101 	sbcs.w	r1, r3, r1
 8009bfe:	da02      	bge.n	8009c06 <localtime_r+0xae>
 8009c00:	2300      	movs	r3, #0
 8009c02:	6223      	str	r3, [r4, #32]
 8009c04:	e7ec      	b.n	8009be0 <localtime_r+0x88>
 8009c06:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009c0a:	4282      	cmp	r2, r0
 8009c0c:	418b      	sbcs	r3, r1
 8009c0e:	daf7      	bge.n	8009c00 <localtime_r+0xa8>
 8009c10:	2301      	movs	r3, #1
 8009c12:	6223      	str	r3, [r4, #32]
 8009c14:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009c16:	6861      	ldr	r1, [r4, #4]
 8009c18:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8009c1c:	203c      	movs	r0, #60	; 0x3c
 8009c1e:	fb93 f5f2 	sdiv	r5, r3, r2
 8009c22:	fb02 3315 	mls	r3, r2, r5, r3
 8009c26:	fb93 f2f0 	sdiv	r2, r3, r0
 8009c2a:	fb00 3012 	mls	r0, r0, r2, r3
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	1a89      	subs	r1, r1, r2
 8009c32:	68a2      	ldr	r2, [r4, #8]
 8009c34:	6061      	str	r1, [r4, #4]
 8009c36:	1a1b      	subs	r3, r3, r0
 8009c38:	1b52      	subs	r2, r2, r5
 8009c3a:	2b3b      	cmp	r3, #59	; 0x3b
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	60a2      	str	r2, [r4, #8]
 8009c40:	dd35      	ble.n	8009cae <localtime_r+0x156>
 8009c42:	3101      	adds	r1, #1
 8009c44:	6061      	str	r1, [r4, #4]
 8009c46:	3b3c      	subs	r3, #60	; 0x3c
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	2b3b      	cmp	r3, #59	; 0x3b
 8009c4e:	dd34      	ble.n	8009cba <localtime_r+0x162>
 8009c50:	3201      	adds	r2, #1
 8009c52:	60a2      	str	r2, [r4, #8]
 8009c54:	3b3c      	subs	r3, #60	; 0x3c
 8009c56:	6063      	str	r3, [r4, #4]
 8009c58:	68a3      	ldr	r3, [r4, #8]
 8009c5a:	2b17      	cmp	r3, #23
 8009c5c:	dd33      	ble.n	8009cc6 <localtime_r+0x16e>
 8009c5e:	69e2      	ldr	r2, [r4, #28]
 8009c60:	3201      	adds	r2, #1
 8009c62:	61e2      	str	r2, [r4, #28]
 8009c64:	69a2      	ldr	r2, [r4, #24]
 8009c66:	3201      	adds	r2, #1
 8009c68:	2a06      	cmp	r2, #6
 8009c6a:	bfc8      	it	gt
 8009c6c:	2200      	movgt	r2, #0
 8009c6e:	61a2      	str	r2, [r4, #24]
 8009c70:	68e2      	ldr	r2, [r4, #12]
 8009c72:	3b18      	subs	r3, #24
 8009c74:	3201      	adds	r2, #1
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	60e2      	str	r2, [r4, #12]
 8009c7c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009c80:	428a      	cmp	r2, r1
 8009c82:	dd0e      	ble.n	8009ca2 <localtime_r+0x14a>
 8009c84:	2b0b      	cmp	r3, #11
 8009c86:	eba2 0201 	sub.w	r2, r2, r1
 8009c8a:	60e2      	str	r2, [r4, #12]
 8009c8c:	f103 0201 	add.w	r2, r3, #1
 8009c90:	bf09      	itett	eq
 8009c92:	6963      	ldreq	r3, [r4, #20]
 8009c94:	6122      	strne	r2, [r4, #16]
 8009c96:	2200      	moveq	r2, #0
 8009c98:	3301      	addeq	r3, #1
 8009c9a:	bf02      	ittt	eq
 8009c9c:	6122      	streq	r2, [r4, #16]
 8009c9e:	6163      	streq	r3, [r4, #20]
 8009ca0:	61e2      	streq	r2, [r4, #28]
 8009ca2:	f000 fa37 	bl	800a114 <__tz_unlock>
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	b002      	add	sp, #8
 8009caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	dacb      	bge.n	8009c4a <localtime_r+0xf2>
 8009cb2:	3901      	subs	r1, #1
 8009cb4:	6061      	str	r1, [r4, #4]
 8009cb6:	333c      	adds	r3, #60	; 0x3c
 8009cb8:	e7c6      	b.n	8009c48 <localtime_r+0xf0>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	dacc      	bge.n	8009c58 <localtime_r+0x100>
 8009cbe:	3a01      	subs	r2, #1
 8009cc0:	60a2      	str	r2, [r4, #8]
 8009cc2:	333c      	adds	r3, #60	; 0x3c
 8009cc4:	e7c7      	b.n	8009c56 <localtime_r+0xfe>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	daeb      	bge.n	8009ca2 <localtime_r+0x14a>
 8009cca:	69e2      	ldr	r2, [r4, #28]
 8009ccc:	3a01      	subs	r2, #1
 8009cce:	61e2      	str	r2, [r4, #28]
 8009cd0:	69a2      	ldr	r2, [r4, #24]
 8009cd2:	3a01      	subs	r2, #1
 8009cd4:	bf48      	it	mi
 8009cd6:	2206      	movmi	r2, #6
 8009cd8:	61a2      	str	r2, [r4, #24]
 8009cda:	68e2      	ldr	r2, [r4, #12]
 8009cdc:	3318      	adds	r3, #24
 8009cde:	3a01      	subs	r2, #1
 8009ce0:	60e2      	str	r2, [r4, #12]
 8009ce2:	60a3      	str	r3, [r4, #8]
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	d1dc      	bne.n	8009ca2 <localtime_r+0x14a>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	d405      	bmi.n	8009cfa <localtime_r+0x1a2>
 8009cee:	6123      	str	r3, [r4, #16]
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009cf6:	60e3      	str	r3, [r4, #12]
 8009cf8:	e7d3      	b.n	8009ca2 <localtime_r+0x14a>
 8009cfa:	230b      	movs	r3, #11
 8009cfc:	6123      	str	r3, [r4, #16]
 8009cfe:	6963      	ldr	r3, [r4, #20]
 8009d00:	1e5a      	subs	r2, r3, #1
 8009d02:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009d06:	6162      	str	r2, [r4, #20]
 8009d08:	079a      	lsls	r2, r3, #30
 8009d0a:	d105      	bne.n	8009d18 <localtime_r+0x1c0>
 8009d0c:	2164      	movs	r1, #100	; 0x64
 8009d0e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009d12:	fb01 3212 	mls	r2, r1, r2, r3
 8009d16:	b962      	cbnz	r2, 8009d32 <localtime_r+0x1da>
 8009d18:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8009d20:	fb02 3311 	mls	r3, r2, r1, r3
 8009d24:	fab3 f383 	clz	r3, r3
 8009d28:	095b      	lsrs	r3, r3, #5
 8009d2a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009d2e:	61e3      	str	r3, [r4, #28]
 8009d30:	e7de      	b.n	8009cf0 <localtime_r+0x198>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e7f9      	b.n	8009d2a <localtime_r+0x1d2>
 8009d36:	bf00      	nop
 8009d38:	0800c480 	.word	0x0800c480
 8009d3c:	20001c68 	.word	0x20001c68

08009d40 <malloc>:
 8009d40:	4b02      	ldr	r3, [pc, #8]	; (8009d4c <malloc+0xc>)
 8009d42:	4601      	mov	r1, r0
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	f000 b87f 	b.w	8009e48 <_malloc_r>
 8009d4a:	bf00      	nop
 8009d4c:	2000014c 	.word	0x2000014c

08009d50 <free>:
 8009d50:	4b02      	ldr	r3, [pc, #8]	; (8009d5c <free+0xc>)
 8009d52:	4601      	mov	r1, r0
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	f000 b80b 	b.w	8009d70 <_free_r>
 8009d5a:	bf00      	nop
 8009d5c:	2000014c 	.word	0x2000014c

08009d60 <memset>:
 8009d60:	4402      	add	r2, r0
 8009d62:	4603      	mov	r3, r0
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d100      	bne.n	8009d6a <memset+0xa>
 8009d68:	4770      	bx	lr
 8009d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d6e:	e7f9      	b.n	8009d64 <memset+0x4>

08009d70 <_free_r>:
 8009d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d044      	beq.n	8009e00 <_free_r+0x90>
 8009d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d7a:	9001      	str	r0, [sp, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009d82:	bfb8      	it	lt
 8009d84:	18e4      	addlt	r4, r4, r3
 8009d86:	f000 fdcb 	bl	800a920 <__malloc_lock>
 8009d8a:	4a1e      	ldr	r2, [pc, #120]	; (8009e04 <_free_r+0x94>)
 8009d8c:	9801      	ldr	r0, [sp, #4]
 8009d8e:	6813      	ldr	r3, [r2, #0]
 8009d90:	b933      	cbnz	r3, 8009da0 <_free_r+0x30>
 8009d92:	6063      	str	r3, [r4, #4]
 8009d94:	6014      	str	r4, [r2, #0]
 8009d96:	b003      	add	sp, #12
 8009d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d9c:	f000 bdc6 	b.w	800a92c <__malloc_unlock>
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	d908      	bls.n	8009db6 <_free_r+0x46>
 8009da4:	6825      	ldr	r5, [r4, #0]
 8009da6:	1961      	adds	r1, r4, r5
 8009da8:	428b      	cmp	r3, r1
 8009daa:	bf01      	itttt	eq
 8009dac:	6819      	ldreq	r1, [r3, #0]
 8009dae:	685b      	ldreq	r3, [r3, #4]
 8009db0:	1949      	addeq	r1, r1, r5
 8009db2:	6021      	streq	r1, [r4, #0]
 8009db4:	e7ed      	b.n	8009d92 <_free_r+0x22>
 8009db6:	461a      	mov	r2, r3
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	b10b      	cbz	r3, 8009dc0 <_free_r+0x50>
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	d9fa      	bls.n	8009db6 <_free_r+0x46>
 8009dc0:	6811      	ldr	r1, [r2, #0]
 8009dc2:	1855      	adds	r5, r2, r1
 8009dc4:	42a5      	cmp	r5, r4
 8009dc6:	d10b      	bne.n	8009de0 <_free_r+0x70>
 8009dc8:	6824      	ldr	r4, [r4, #0]
 8009dca:	4421      	add	r1, r4
 8009dcc:	1854      	adds	r4, r2, r1
 8009dce:	42a3      	cmp	r3, r4
 8009dd0:	6011      	str	r1, [r2, #0]
 8009dd2:	d1e0      	bne.n	8009d96 <_free_r+0x26>
 8009dd4:	681c      	ldr	r4, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	6053      	str	r3, [r2, #4]
 8009dda:	4421      	add	r1, r4
 8009ddc:	6011      	str	r1, [r2, #0]
 8009dde:	e7da      	b.n	8009d96 <_free_r+0x26>
 8009de0:	d902      	bls.n	8009de8 <_free_r+0x78>
 8009de2:	230c      	movs	r3, #12
 8009de4:	6003      	str	r3, [r0, #0]
 8009de6:	e7d6      	b.n	8009d96 <_free_r+0x26>
 8009de8:	6825      	ldr	r5, [r4, #0]
 8009dea:	1961      	adds	r1, r4, r5
 8009dec:	428b      	cmp	r3, r1
 8009dee:	bf04      	itt	eq
 8009df0:	6819      	ldreq	r1, [r3, #0]
 8009df2:	685b      	ldreq	r3, [r3, #4]
 8009df4:	6063      	str	r3, [r4, #4]
 8009df6:	bf04      	itt	eq
 8009df8:	1949      	addeq	r1, r1, r5
 8009dfa:	6021      	streq	r1, [r4, #0]
 8009dfc:	6054      	str	r4, [r2, #4]
 8009dfe:	e7ca      	b.n	8009d96 <_free_r+0x26>
 8009e00:	b003      	add	sp, #12
 8009e02:	bd30      	pop	{r4, r5, pc}
 8009e04:	20001c44 	.word	0x20001c44

08009e08 <sbrk_aligned>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	4e0e      	ldr	r6, [pc, #56]	; (8009e44 <sbrk_aligned+0x3c>)
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	6831      	ldr	r1, [r6, #0]
 8009e10:	4605      	mov	r5, r0
 8009e12:	b911      	cbnz	r1, 8009e1a <sbrk_aligned+0x12>
 8009e14:	f000 f8a4 	bl	8009f60 <_sbrk_r>
 8009e18:	6030      	str	r0, [r6, #0]
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f000 f89f 	bl	8009f60 <_sbrk_r>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	d00a      	beq.n	8009e3c <sbrk_aligned+0x34>
 8009e26:	1cc4      	adds	r4, r0, #3
 8009e28:	f024 0403 	bic.w	r4, r4, #3
 8009e2c:	42a0      	cmp	r0, r4
 8009e2e:	d007      	beq.n	8009e40 <sbrk_aligned+0x38>
 8009e30:	1a21      	subs	r1, r4, r0
 8009e32:	4628      	mov	r0, r5
 8009e34:	f000 f894 	bl	8009f60 <_sbrk_r>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d101      	bne.n	8009e40 <sbrk_aligned+0x38>
 8009e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e40:	4620      	mov	r0, r4
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	20001c48 	.word	0x20001c48

08009e48 <_malloc_r>:
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	1ccd      	adds	r5, r1, #3
 8009e4e:	f025 0503 	bic.w	r5, r5, #3
 8009e52:	3508      	adds	r5, #8
 8009e54:	2d0c      	cmp	r5, #12
 8009e56:	bf38      	it	cc
 8009e58:	250c      	movcc	r5, #12
 8009e5a:	2d00      	cmp	r5, #0
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	db01      	blt.n	8009e64 <_malloc_r+0x1c>
 8009e60:	42a9      	cmp	r1, r5
 8009e62:	d905      	bls.n	8009e70 <_malloc_r+0x28>
 8009e64:	230c      	movs	r3, #12
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	2600      	movs	r6, #0
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e70:	4e2e      	ldr	r6, [pc, #184]	; (8009f2c <_malloc_r+0xe4>)
 8009e72:	f000 fd55 	bl	800a920 <__malloc_lock>
 8009e76:	6833      	ldr	r3, [r6, #0]
 8009e78:	461c      	mov	r4, r3
 8009e7a:	bb34      	cbnz	r4, 8009eca <_malloc_r+0x82>
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7ff ffc2 	bl	8009e08 <sbrk_aligned>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	4604      	mov	r4, r0
 8009e88:	d14d      	bne.n	8009f26 <_malloc_r+0xde>
 8009e8a:	6834      	ldr	r4, [r6, #0]
 8009e8c:	4626      	mov	r6, r4
 8009e8e:	2e00      	cmp	r6, #0
 8009e90:	d140      	bne.n	8009f14 <_malloc_r+0xcc>
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	4631      	mov	r1, r6
 8009e96:	4638      	mov	r0, r7
 8009e98:	eb04 0803 	add.w	r8, r4, r3
 8009e9c:	f000 f860 	bl	8009f60 <_sbrk_r>
 8009ea0:	4580      	cmp	r8, r0
 8009ea2:	d13a      	bne.n	8009f1a <_malloc_r+0xd2>
 8009ea4:	6821      	ldr	r1, [r4, #0]
 8009ea6:	3503      	adds	r5, #3
 8009ea8:	1a6d      	subs	r5, r5, r1
 8009eaa:	f025 0503 	bic.w	r5, r5, #3
 8009eae:	3508      	adds	r5, #8
 8009eb0:	2d0c      	cmp	r5, #12
 8009eb2:	bf38      	it	cc
 8009eb4:	250c      	movcc	r5, #12
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7ff ffa5 	bl	8009e08 <sbrk_aligned>
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d02b      	beq.n	8009f1a <_malloc_r+0xd2>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	442b      	add	r3, r5
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	e00e      	b.n	8009ee8 <_malloc_r+0xa0>
 8009eca:	6822      	ldr	r2, [r4, #0]
 8009ecc:	1b52      	subs	r2, r2, r5
 8009ece:	d41e      	bmi.n	8009f0e <_malloc_r+0xc6>
 8009ed0:	2a0b      	cmp	r2, #11
 8009ed2:	d916      	bls.n	8009f02 <_malloc_r+0xba>
 8009ed4:	1961      	adds	r1, r4, r5
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	6025      	str	r5, [r4, #0]
 8009eda:	bf18      	it	ne
 8009edc:	6059      	strne	r1, [r3, #4]
 8009ede:	6863      	ldr	r3, [r4, #4]
 8009ee0:	bf08      	it	eq
 8009ee2:	6031      	streq	r1, [r6, #0]
 8009ee4:	5162      	str	r2, [r4, r5]
 8009ee6:	604b      	str	r3, [r1, #4]
 8009ee8:	4638      	mov	r0, r7
 8009eea:	f104 060b 	add.w	r6, r4, #11
 8009eee:	f000 fd1d 	bl	800a92c <__malloc_unlock>
 8009ef2:	f026 0607 	bic.w	r6, r6, #7
 8009ef6:	1d23      	adds	r3, r4, #4
 8009ef8:	1af2      	subs	r2, r6, r3
 8009efa:	d0b6      	beq.n	8009e6a <_malloc_r+0x22>
 8009efc:	1b9b      	subs	r3, r3, r6
 8009efe:	50a3      	str	r3, [r4, r2]
 8009f00:	e7b3      	b.n	8009e6a <_malloc_r+0x22>
 8009f02:	6862      	ldr	r2, [r4, #4]
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	bf0c      	ite	eq
 8009f08:	6032      	streq	r2, [r6, #0]
 8009f0a:	605a      	strne	r2, [r3, #4]
 8009f0c:	e7ec      	b.n	8009ee8 <_malloc_r+0xa0>
 8009f0e:	4623      	mov	r3, r4
 8009f10:	6864      	ldr	r4, [r4, #4]
 8009f12:	e7b2      	b.n	8009e7a <_malloc_r+0x32>
 8009f14:	4634      	mov	r4, r6
 8009f16:	6876      	ldr	r6, [r6, #4]
 8009f18:	e7b9      	b.n	8009e8e <_malloc_r+0x46>
 8009f1a:	230c      	movs	r3, #12
 8009f1c:	603b      	str	r3, [r7, #0]
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f000 fd04 	bl	800a92c <__malloc_unlock>
 8009f24:	e7a1      	b.n	8009e6a <_malloc_r+0x22>
 8009f26:	6025      	str	r5, [r4, #0]
 8009f28:	e7de      	b.n	8009ee8 <_malloc_r+0xa0>
 8009f2a:	bf00      	nop
 8009f2c:	20001c44 	.word	0x20001c44

08009f30 <iprintf>:
 8009f30:	b40f      	push	{r0, r1, r2, r3}
 8009f32:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <iprintf+0x2c>)
 8009f34:	b513      	push	{r0, r1, r4, lr}
 8009f36:	681c      	ldr	r4, [r3, #0]
 8009f38:	b124      	cbz	r4, 8009f44 <iprintf+0x14>
 8009f3a:	69a3      	ldr	r3, [r4, #24]
 8009f3c:	b913      	cbnz	r3, 8009f44 <iprintf+0x14>
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 fb32 	bl	800a5a8 <__sinit>
 8009f44:	ab05      	add	r3, sp, #20
 8009f46:	9a04      	ldr	r2, [sp, #16]
 8009f48:	68a1      	ldr	r1, [r4, #8]
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fd1d 	bl	800a98c <_vfiprintf_r>
 8009f52:	b002      	add	sp, #8
 8009f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f58:	b004      	add	sp, #16
 8009f5a:	4770      	bx	lr
 8009f5c:	2000014c 	.word	0x2000014c

08009f60 <_sbrk_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d06      	ldr	r5, [pc, #24]	; (8009f7c <_sbrk_r+0x1c>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f6 fe7a 	bl	8000c64 <_sbrk>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_sbrk_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_sbrk_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20001c78 	.word	0x20001c78

08009f80 <time>:
 8009f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f82:	4b0b      	ldr	r3, [pc, #44]	; (8009fb0 <time+0x30>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	4669      	mov	r1, sp
 8009f88:	4604      	mov	r4, r0
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	f000 fc00 	bl	800a790 <_gettimeofday_r>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	bfbe      	ittt	lt
 8009f94:	f04f 32ff 	movlt.w	r2, #4294967295
 8009f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f9c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8009fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fa4:	b10c      	cbz	r4, 8009faa <time+0x2a>
 8009fa6:	e9c4 0100 	strd	r0, r1, [r4]
 8009faa:	b004      	add	sp, #16
 8009fac:	bd10      	pop	{r4, pc}
 8009fae:	bf00      	nop
 8009fb0:	2000014c 	.word	0x2000014c

08009fb4 <__tzcalc_limits>:
 8009fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	4605      	mov	r5, r0
 8009fba:	f000 fbfb 	bl	800a7b4 <__gettzinfo>
 8009fbe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009fc2:	429d      	cmp	r5, r3
 8009fc4:	f340 8099 	ble.w	800a0fa <__tzcalc_limits+0x146>
 8009fc8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8009fcc:	18ac      	adds	r4, r5, r2
 8009fce:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8009fd2:	f240 126d 	movw	r2, #365	; 0x16d
 8009fd6:	10a4      	asrs	r4, r4, #2
 8009fd8:	fb02 4403 	mla	r4, r2, r3, r4
 8009fdc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009fe0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fe8:	441c      	add	r4, r3
 8009fea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009fee:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8009ff2:	fb95 fcf3 	sdiv	ip, r5, r3
 8009ff6:	fb03 5c1c 	mls	ip, r3, ip, r5
 8009ffa:	186a      	adds	r2, r5, r1
 8009ffc:	fabc f68c 	clz	r6, ip
 800a000:	fbb2 f2f3 	udiv	r2, r2, r3
 800a004:	f005 0303 	and.w	r3, r5, #3
 800a008:	4414      	add	r4, r2
 800a00a:	2264      	movs	r2, #100	; 0x64
 800a00c:	6045      	str	r5, [r0, #4]
 800a00e:	fb95 f7f2 	sdiv	r7, r5, r2
 800a012:	0976      	lsrs	r6, r6, #5
 800a014:	fb02 5717 	mls	r7, r2, r7, r5
 800a018:	4601      	mov	r1, r0
 800a01a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	f04f 0a07 	mov.w	sl, #7
 800a024:	7a0d      	ldrb	r5, [r1, #8]
 800a026:	694b      	ldr	r3, [r1, #20]
 800a028:	2d4a      	cmp	r5, #74	; 0x4a
 800a02a:	d12d      	bne.n	800a088 <__tzcalc_limits+0xd4>
 800a02c:	9a00      	ldr	r2, [sp, #0]
 800a02e:	eb04 0e03 	add.w	lr, r4, r3
 800a032:	b902      	cbnz	r2, 800a036 <__tzcalc_limits+0x82>
 800a034:	b917      	cbnz	r7, 800a03c <__tzcalc_limits+0x88>
 800a036:	f1bc 0f00 	cmp.w	ip, #0
 800a03a:	d123      	bne.n	800a084 <__tzcalc_limits+0xd0>
 800a03c:	2b3b      	cmp	r3, #59	; 0x3b
 800a03e:	bfd4      	ite	le
 800a040:	2300      	movle	r3, #0
 800a042:	2301      	movgt	r3, #1
 800a044:	4473      	add	r3, lr
 800a046:	3b01      	subs	r3, #1
 800a048:	698d      	ldr	r5, [r1, #24]
 800a04a:	4a2d      	ldr	r2, [pc, #180]	; (800a100 <__tzcalc_limits+0x14c>)
 800a04c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800a050:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800a054:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a056:	18ed      	adds	r5, r5, r3
 800a058:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800a05c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800a060:	3128      	adds	r1, #40	; 0x28
 800a062:	458b      	cmp	fp, r1
 800a064:	d1de      	bne.n	800a024 <__tzcalc_limits+0x70>
 800a066:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800a06a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800a06e:	428c      	cmp	r4, r1
 800a070:	eb72 0303 	sbcs.w	r3, r2, r3
 800a074:	bfb4      	ite	lt
 800a076:	2301      	movlt	r3, #1
 800a078:	2300      	movge	r3, #0
 800a07a:	6003      	str	r3, [r0, #0]
 800a07c:	2001      	movs	r0, #1
 800a07e:	b003      	add	sp, #12
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	2300      	movs	r3, #0
 800a086:	e7dd      	b.n	800a044 <__tzcalc_limits+0x90>
 800a088:	2d44      	cmp	r5, #68	; 0x44
 800a08a:	d101      	bne.n	800a090 <__tzcalc_limits+0xdc>
 800a08c:	4423      	add	r3, r4
 800a08e:	e7db      	b.n	800a048 <__tzcalc_limits+0x94>
 800a090:	9a00      	ldr	r2, [sp, #0]
 800a092:	bb62      	cbnz	r2, 800a0ee <__tzcalc_limits+0x13a>
 800a094:	2f00      	cmp	r7, #0
 800a096:	bf0c      	ite	eq
 800a098:	4635      	moveq	r5, r6
 800a09a:	2501      	movne	r5, #1
 800a09c:	68ca      	ldr	r2, [r1, #12]
 800a09e:	9201      	str	r2, [sp, #4]
 800a0a0:	4a18      	ldr	r2, [pc, #96]	; (800a104 <__tzcalc_limits+0x150>)
 800a0a2:	f04f 0930 	mov.w	r9, #48	; 0x30
 800a0a6:	fb09 2505 	mla	r5, r9, r5, r2
 800a0aa:	46a6      	mov	lr, r4
 800a0ac:	f04f 0800 	mov.w	r8, #0
 800a0b0:	3d04      	subs	r5, #4
 800a0b2:	9a01      	ldr	r2, [sp, #4]
 800a0b4:	f108 0801 	add.w	r8, r8, #1
 800a0b8:	4542      	cmp	r2, r8
 800a0ba:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800a0be:	dc18      	bgt.n	800a0f2 <__tzcalc_limits+0x13e>
 800a0c0:	f10e 0504 	add.w	r5, lr, #4
 800a0c4:	fb95 f8fa 	sdiv	r8, r5, sl
 800a0c8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800a0cc:	eba5 0808 	sub.w	r8, r5, r8
 800a0d0:	ebb3 0808 	subs.w	r8, r3, r8
 800a0d4:	690b      	ldr	r3, [r1, #16]
 800a0d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0da:	bf48      	it	mi
 800a0dc:	f108 0807 	addmi.w	r8, r8, #7
 800a0e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a0e4:	4443      	add	r3, r8
 800a0e6:	454b      	cmp	r3, r9
 800a0e8:	da05      	bge.n	800a0f6 <__tzcalc_limits+0x142>
 800a0ea:	4473      	add	r3, lr
 800a0ec:	e7ac      	b.n	800a048 <__tzcalc_limits+0x94>
 800a0ee:	4635      	mov	r5, r6
 800a0f0:	e7d4      	b.n	800a09c <__tzcalc_limits+0xe8>
 800a0f2:	44ce      	add	lr, r9
 800a0f4:	e7dd      	b.n	800a0b2 <__tzcalc_limits+0xfe>
 800a0f6:	3b07      	subs	r3, #7
 800a0f8:	e7f5      	b.n	800a0e6 <__tzcalc_limits+0x132>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	e7bf      	b.n	800a07e <__tzcalc_limits+0xca>
 800a0fe:	bf00      	nop
 800a100:	00015180 	.word	0x00015180
 800a104:	0800c480 	.word	0x0800c480

0800a108 <__tz_lock>:
 800a108:	4801      	ldr	r0, [pc, #4]	; (800a110 <__tz_lock+0x8>)
 800a10a:	f000 bc04 	b.w	800a916 <__retarget_lock_acquire>
 800a10e:	bf00      	nop
 800a110:	20001c74 	.word	0x20001c74

0800a114 <__tz_unlock>:
 800a114:	4801      	ldr	r0, [pc, #4]	; (800a11c <__tz_unlock+0x8>)
 800a116:	f000 bc00 	b.w	800a91a <__retarget_lock_release>
 800a11a:	bf00      	nop
 800a11c:	20001c74 	.word	0x20001c74

0800a120 <_tzset_unlocked>:
 800a120:	4b01      	ldr	r3, [pc, #4]	; (800a128 <_tzset_unlocked+0x8>)
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	f000 b802 	b.w	800a12c <_tzset_unlocked_r>
 800a128:	2000014c 	.word	0x2000014c

0800a12c <_tzset_unlocked_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	b08d      	sub	sp, #52	; 0x34
 800a132:	4607      	mov	r7, r0
 800a134:	f000 fb3e 	bl	800a7b4 <__gettzinfo>
 800a138:	49b0      	ldr	r1, [pc, #704]	; (800a3fc <_tzset_unlocked_r+0x2d0>)
 800a13a:	4eb1      	ldr	r6, [pc, #708]	; (800a400 <_tzset_unlocked_r+0x2d4>)
 800a13c:	4605      	mov	r5, r0
 800a13e:	4638      	mov	r0, r7
 800a140:	f000 fb1e 	bl	800a780 <_getenv_r>
 800a144:	4604      	mov	r4, r0
 800a146:	b970      	cbnz	r0, 800a166 <_tzset_unlocked_r+0x3a>
 800a148:	4bae      	ldr	r3, [pc, #696]	; (800a404 <_tzset_unlocked_r+0x2d8>)
 800a14a:	4aaf      	ldr	r2, [pc, #700]	; (800a408 <_tzset_unlocked_r+0x2dc>)
 800a14c:	6018      	str	r0, [r3, #0]
 800a14e:	4baf      	ldr	r3, [pc, #700]	; (800a40c <_tzset_unlocked_r+0x2e0>)
 800a150:	6018      	str	r0, [r3, #0]
 800a152:	4baf      	ldr	r3, [pc, #700]	; (800a410 <_tzset_unlocked_r+0x2e4>)
 800a154:	6830      	ldr	r0, [r6, #0]
 800a156:	e9c3 2200 	strd	r2, r2, [r3]
 800a15a:	f7ff fdf9 	bl	8009d50 <free>
 800a15e:	6034      	str	r4, [r6, #0]
 800a160:	b00d      	add	sp, #52	; 0x34
 800a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a166:	6831      	ldr	r1, [r6, #0]
 800a168:	2900      	cmp	r1, #0
 800a16a:	d162      	bne.n	800a232 <_tzset_unlocked_r+0x106>
 800a16c:	6830      	ldr	r0, [r6, #0]
 800a16e:	f7ff fdef 	bl	8009d50 <free>
 800a172:	4620      	mov	r0, r4
 800a174:	f7f6 f80e 	bl	8000194 <strlen>
 800a178:	1c41      	adds	r1, r0, #1
 800a17a:	4638      	mov	r0, r7
 800a17c:	f7ff fe64 	bl	8009e48 <_malloc_r>
 800a180:	6030      	str	r0, [r6, #0]
 800a182:	2800      	cmp	r0, #0
 800a184:	d15a      	bne.n	800a23c <_tzset_unlocked_r+0x110>
 800a186:	7823      	ldrb	r3, [r4, #0]
 800a188:	4aa2      	ldr	r2, [pc, #648]	; (800a414 <_tzset_unlocked_r+0x2e8>)
 800a18a:	49a3      	ldr	r1, [pc, #652]	; (800a418 <_tzset_unlocked_r+0x2ec>)
 800a18c:	2b3a      	cmp	r3, #58	; 0x3a
 800a18e:	bf08      	it	eq
 800a190:	3401      	addeq	r4, #1
 800a192:	ae0a      	add	r6, sp, #40	; 0x28
 800a194:	4633      	mov	r3, r6
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fedc 	bl	800af54 <siscanf>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	dddf      	ble.n	800a160 <_tzset_unlocked_r+0x34>
 800a1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a2:	18e7      	adds	r7, r4, r3
 800a1a4:	5ce3      	ldrb	r3, [r4, r3]
 800a1a6:	2b2d      	cmp	r3, #45	; 0x2d
 800a1a8:	d14c      	bne.n	800a244 <_tzset_unlocked_r+0x118>
 800a1aa:	3701      	adds	r7, #1
 800a1ac:	f04f 38ff 	mov.w	r8, #4294967295
 800a1b0:	f10d 0a20 	add.w	sl, sp, #32
 800a1b4:	f10d 0b1e 	add.w	fp, sp, #30
 800a1b8:	2400      	movs	r4, #0
 800a1ba:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a1be:	4997      	ldr	r1, [pc, #604]	; (800a41c <_tzset_unlocked_r+0x2f0>)
 800a1c0:	9603      	str	r6, [sp, #12]
 800a1c2:	f8cd b000 	str.w	fp, [sp]
 800a1c6:	4633      	mov	r3, r6
 800a1c8:	aa07      	add	r2, sp, #28
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	f8ad 401e 	strh.w	r4, [sp, #30]
 800a1d0:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a1d4:	f000 febe 	bl	800af54 <siscanf>
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	ddc1      	ble.n	800a160 <_tzset_unlocked_r+0x34>
 800a1dc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a1e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a1e4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800a428 <_tzset_unlocked_r+0x2fc>
 800a1e8:	213c      	movs	r1, #60	; 0x3c
 800a1ea:	fb01 3302 	mla	r3, r1, r2, r3
 800a1ee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a1f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a1f6:	fb01 3302 	mla	r3, r1, r2, r3
 800a1fa:	fb08 f303 	mul.w	r3, r8, r3
 800a1fe:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800a410 <_tzset_unlocked_r+0x2e4>
 800a202:	62ab      	str	r3, [r5, #40]	; 0x28
 800a204:	4b83      	ldr	r3, [pc, #524]	; (800a414 <_tzset_unlocked_r+0x2e8>)
 800a206:	f8c8 3000 	str.w	r3, [r8]
 800a20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a20c:	4982      	ldr	r1, [pc, #520]	; (800a418 <_tzset_unlocked_r+0x2ec>)
 800a20e:	441f      	add	r7, r3
 800a210:	464a      	mov	r2, r9
 800a212:	4633      	mov	r3, r6
 800a214:	4638      	mov	r0, r7
 800a216:	f000 fe9d 	bl	800af54 <siscanf>
 800a21a:	42a0      	cmp	r0, r4
 800a21c:	dc18      	bgt.n	800a250 <_tzset_unlocked_r+0x124>
 800a21e:	f8d8 3000 	ldr.w	r3, [r8]
 800a222:	f8c8 3004 	str.w	r3, [r8, #4]
 800a226:	4b77      	ldr	r3, [pc, #476]	; (800a404 <_tzset_unlocked_r+0x2d8>)
 800a228:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	4b77      	ldr	r3, [pc, #476]	; (800a40c <_tzset_unlocked_r+0x2e0>)
 800a22e:	601c      	str	r4, [r3, #0]
 800a230:	e796      	b.n	800a160 <_tzset_unlocked_r+0x34>
 800a232:	f7f5 ffa5 	bl	8000180 <strcmp>
 800a236:	2800      	cmp	r0, #0
 800a238:	d198      	bne.n	800a16c <_tzset_unlocked_r+0x40>
 800a23a:	e791      	b.n	800a160 <_tzset_unlocked_r+0x34>
 800a23c:	4621      	mov	r1, r4
 800a23e:	f000 fefa 	bl	800b036 <strcpy>
 800a242:	e7a0      	b.n	800a186 <_tzset_unlocked_r+0x5a>
 800a244:	2b2b      	cmp	r3, #43	; 0x2b
 800a246:	bf08      	it	eq
 800a248:	3701      	addeq	r7, #1
 800a24a:	f04f 0801 	mov.w	r8, #1
 800a24e:	e7af      	b.n	800a1b0 <_tzset_unlocked_r+0x84>
 800a250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a252:	f8c8 9004 	str.w	r9, [r8, #4]
 800a256:	18fc      	adds	r4, r7, r3
 800a258:	5cfb      	ldrb	r3, [r7, r3]
 800a25a:	2b2d      	cmp	r3, #45	; 0x2d
 800a25c:	f040 808b 	bne.w	800a376 <_tzset_unlocked_r+0x24a>
 800a260:	3401      	adds	r4, #1
 800a262:	f04f 37ff 	mov.w	r7, #4294967295
 800a266:	2300      	movs	r3, #0
 800a268:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a26c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a270:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a274:	930a      	str	r3, [sp, #40]	; 0x28
 800a276:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a27a:	e9cd b600 	strd	fp, r6, [sp]
 800a27e:	4967      	ldr	r1, [pc, #412]	; (800a41c <_tzset_unlocked_r+0x2f0>)
 800a280:	4633      	mov	r3, r6
 800a282:	aa07      	add	r2, sp, #28
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fe65 	bl	800af54 <siscanf>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	dc78      	bgt.n	800a380 <_tzset_unlocked_r+0x254>
 800a28e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a290:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800a294:	652b      	str	r3, [r5, #80]	; 0x50
 800a296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a298:	462f      	mov	r7, r5
 800a29a:	441c      	add	r4, r3
 800a29c:	f04f 0900 	mov.w	r9, #0
 800a2a0:	7823      	ldrb	r3, [r4, #0]
 800a2a2:	2b2c      	cmp	r3, #44	; 0x2c
 800a2a4:	bf08      	it	eq
 800a2a6:	3401      	addeq	r4, #1
 800a2a8:	f894 8000 	ldrb.w	r8, [r4]
 800a2ac:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800a2b0:	d178      	bne.n	800a3a4 <_tzset_unlocked_r+0x278>
 800a2b2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800a2b6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a2ba:	ab09      	add	r3, sp, #36	; 0x24
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	4958      	ldr	r1, [pc, #352]	; (800a420 <_tzset_unlocked_r+0x2f4>)
 800a2c0:	9603      	str	r6, [sp, #12]
 800a2c2:	4633      	mov	r3, r6
 800a2c4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 fe43 	bl	800af54 <siscanf>
 800a2ce:	2803      	cmp	r0, #3
 800a2d0:	f47f af46 	bne.w	800a160 <_tzset_unlocked_r+0x34>
 800a2d4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800a2d8:	1e4b      	subs	r3, r1, #1
 800a2da:	2b0b      	cmp	r3, #11
 800a2dc:	f63f af40 	bhi.w	800a160 <_tzset_unlocked_r+0x34>
 800a2e0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800a2e4:	1e53      	subs	r3, r2, #1
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	f63f af3a 	bhi.w	800a160 <_tzset_unlocked_r+0x34>
 800a2ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a2f0:	2b06      	cmp	r3, #6
 800a2f2:	f63f af35 	bhi.w	800a160 <_tzset_unlocked_r+0x34>
 800a2f6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a2fa:	f887 8008 	strb.w	r8, [r7, #8]
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a302:	eb04 0803 	add.w	r8, r4, r3
 800a306:	2302      	movs	r3, #2
 800a308:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a312:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a316:	930a      	str	r3, [sp, #40]	; 0x28
 800a318:	f898 3000 	ldrb.w	r3, [r8]
 800a31c:	2b2f      	cmp	r3, #47	; 0x2f
 800a31e:	d109      	bne.n	800a334 <_tzset_unlocked_r+0x208>
 800a320:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a324:	e9cd b600 	strd	fp, r6, [sp]
 800a328:	493e      	ldr	r1, [pc, #248]	; (800a424 <_tzset_unlocked_r+0x2f8>)
 800a32a:	4633      	mov	r3, r6
 800a32c:	aa07      	add	r2, sp, #28
 800a32e:	4640      	mov	r0, r8
 800a330:	f000 fe10 	bl	800af54 <siscanf>
 800a334:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a338:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a33c:	213c      	movs	r1, #60	; 0x3c
 800a33e:	fb01 3302 	mla	r3, r1, r2, r3
 800a342:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a346:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a34a:	fb01 3302 	mla	r3, r1, r2, r3
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a352:	3728      	adds	r7, #40	; 0x28
 800a354:	4444      	add	r4, r8
 800a356:	f1b9 0f00 	cmp.w	r9, #0
 800a35a:	d020      	beq.n	800a39e <_tzset_unlocked_r+0x272>
 800a35c:	6868      	ldr	r0, [r5, #4]
 800a35e:	f7ff fe29 	bl	8009fb4 <__tzcalc_limits>
 800a362:	4b28      	ldr	r3, [pc, #160]	; (800a404 <_tzset_unlocked_r+0x2d8>)
 800a364:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	4a27      	ldr	r2, [pc, #156]	; (800a40c <_tzset_unlocked_r+0x2e0>)
 800a36e:	bf18      	it	ne
 800a370:	2301      	movne	r3, #1
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	e6f4      	b.n	800a160 <_tzset_unlocked_r+0x34>
 800a376:	2b2b      	cmp	r3, #43	; 0x2b
 800a378:	bf08      	it	eq
 800a37a:	3401      	addeq	r4, #1
 800a37c:	2701      	movs	r7, #1
 800a37e:	e772      	b.n	800a266 <_tzset_unlocked_r+0x13a>
 800a380:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a384:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a388:	213c      	movs	r1, #60	; 0x3c
 800a38a:	fb01 3302 	mla	r3, r1, r2, r3
 800a38e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a392:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a396:	fb01 3302 	mla	r3, r1, r2, r3
 800a39a:	437b      	muls	r3, r7
 800a39c:	e77a      	b.n	800a294 <_tzset_unlocked_r+0x168>
 800a39e:	f04f 0901 	mov.w	r9, #1
 800a3a2:	e77d      	b.n	800a2a0 <_tzset_unlocked_r+0x174>
 800a3a4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a3a8:	bf06      	itte	eq
 800a3aa:	3401      	addeq	r4, #1
 800a3ac:	4643      	moveq	r3, r8
 800a3ae:	2344      	movne	r3, #68	; 0x44
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	a90b      	add	r1, sp, #44	; 0x2c
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	9305      	str	r3, [sp, #20]
 800a3b8:	f000 fece 	bl	800b158 <strtoul>
 800a3bc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a3c0:	9b05      	ldr	r3, [sp, #20]
 800a3c2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a3c6:	45a0      	cmp	r8, r4
 800a3c8:	d114      	bne.n	800a3f4 <_tzset_unlocked_r+0x2c8>
 800a3ca:	234d      	movs	r3, #77	; 0x4d
 800a3cc:	f1b9 0f00 	cmp.w	r9, #0
 800a3d0:	d107      	bne.n	800a3e2 <_tzset_unlocked_r+0x2b6>
 800a3d2:	722b      	strb	r3, [r5, #8]
 800a3d4:	2103      	movs	r1, #3
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a3dc:	f8c5 9014 	str.w	r9, [r5, #20]
 800a3e0:	e791      	b.n	800a306 <_tzset_unlocked_r+0x1da>
 800a3e2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a3e6:	220b      	movs	r2, #11
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a3f2:	e788      	b.n	800a306 <_tzset_unlocked_r+0x1da>
 800a3f4:	b280      	uxth	r0, r0
 800a3f6:	723b      	strb	r3, [r7, #8]
 800a3f8:	6178      	str	r0, [r7, #20]
 800a3fa:	e784      	b.n	800a306 <_tzset_unlocked_r+0x1da>
 800a3fc:	0800c4e0 	.word	0x0800c4e0
 800a400:	20001c64 	.word	0x20001c64
 800a404:	20001c6c 	.word	0x20001c6c
 800a408:	0800c4e3 	.word	0x0800c4e3
 800a40c:	20001c68 	.word	0x20001c68
 800a410:	200001b0 	.word	0x200001b0
 800a414:	20001c57 	.word	0x20001c57
 800a418:	0800c4e7 	.word	0x0800c4e7
 800a41c:	0800c50a 	.word	0x0800c50a
 800a420:	0800c4f6 	.word	0x0800c4f6
 800a424:	0800c509 	.word	0x0800c509
 800a428:	20001c4c 	.word	0x20001c4c

0800a42c <asctime>:
 800a42c:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <asctime+0x38>)
 800a42e:	b570      	push	{r4, r5, r6, lr}
 800a430:	681d      	ldr	r5, [r3, #0]
 800a432:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800a434:	4604      	mov	r4, r0
 800a436:	b976      	cbnz	r6, 800a456 <asctime+0x2a>
 800a438:	201a      	movs	r0, #26
 800a43a:	f7ff fc81 	bl	8009d40 <malloc>
 800a43e:	4602      	mov	r2, r0
 800a440:	6428      	str	r0, [r5, #64]	; 0x40
 800a442:	b920      	cbnz	r0, 800a44e <asctime+0x22>
 800a444:	4b08      	ldr	r3, [pc, #32]	; (800a468 <asctime+0x3c>)
 800a446:	4809      	ldr	r0, [pc, #36]	; (800a46c <asctime+0x40>)
 800a448:	2137      	movs	r1, #55	; 0x37
 800a44a:	f000 f837 	bl	800a4bc <__assert_func>
 800a44e:	221a      	movs	r2, #26
 800a450:	4631      	mov	r1, r6
 800a452:	f7ff fc85 	bl	8009d60 <memset>
 800a456:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800a458:	4620      	mov	r0, r4
 800a45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a45e:	f000 b807 	b.w	800a470 <asctime_r>
 800a462:	bf00      	nop
 800a464:	2000014c 	.word	0x2000014c
 800a468:	0800c40c 	.word	0x0800c40c
 800a46c:	0800c51c 	.word	0x0800c51c

0800a470 <asctime_r>:
 800a470:	b510      	push	{r4, lr}
 800a472:	460c      	mov	r4, r1
 800a474:	6941      	ldr	r1, [r0, #20]
 800a476:	6903      	ldr	r3, [r0, #16]
 800a478:	6982      	ldr	r2, [r0, #24]
 800a47a:	b086      	sub	sp, #24
 800a47c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800a480:	9104      	str	r1, [sp, #16]
 800a482:	6801      	ldr	r1, [r0, #0]
 800a484:	9103      	str	r1, [sp, #12]
 800a486:	6841      	ldr	r1, [r0, #4]
 800a488:	9102      	str	r1, [sp, #8]
 800a48a:	6881      	ldr	r1, [r0, #8]
 800a48c:	9101      	str	r1, [sp, #4]
 800a48e:	68c1      	ldr	r1, [r0, #12]
 800a490:	9100      	str	r1, [sp, #0]
 800a492:	4907      	ldr	r1, [pc, #28]	; (800a4b0 <asctime_r+0x40>)
 800a494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a498:	440b      	add	r3, r1
 800a49a:	4906      	ldr	r1, [pc, #24]	; (800a4b4 <asctime_r+0x44>)
 800a49c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a4a0:	440a      	add	r2, r1
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	4904      	ldr	r1, [pc, #16]	; (800a4b8 <asctime_r+0x48>)
 800a4a6:	f000 fd35 	bl	800af14 <siprintf>
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	b006      	add	sp, #24
 800a4ae:	bd10      	pop	{r4, pc}
 800a4b0:	0800c5ad 	.word	0x0800c5ad
 800a4b4:	0800c598 	.word	0x0800c598
 800a4b8:	0800c578 	.word	0x0800c578

0800a4bc <__assert_func>:
 800a4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4be:	4614      	mov	r4, r2
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <__assert_func+0x2c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	68d8      	ldr	r0, [r3, #12]
 800a4ca:	b14c      	cbz	r4, 800a4e0 <__assert_func+0x24>
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <__assert_func+0x30>)
 800a4ce:	9100      	str	r1, [sp, #0]
 800a4d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4d4:	4906      	ldr	r1, [pc, #24]	; (800a4f0 <__assert_func+0x34>)
 800a4d6:	462b      	mov	r3, r5
 800a4d8:	f000 f8e4 	bl	800a6a4 <fiprintf>
 800a4dc:	f000 ff18 	bl	800b310 <abort>
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <__assert_func+0x38>)
 800a4e2:	461c      	mov	r4, r3
 800a4e4:	e7f3      	b.n	800a4ce <__assert_func+0x12>
 800a4e6:	bf00      	nop
 800a4e8:	2000014c 	.word	0x2000014c
 800a4ec:	0800c5d1 	.word	0x0800c5d1
 800a4f0:	0800c5de 	.word	0x0800c5de
 800a4f4:	0800c597 	.word	0x0800c597

0800a4f8 <std>:
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a506:	6083      	str	r3, [r0, #8]
 800a508:	8181      	strh	r1, [r0, #12]
 800a50a:	6643      	str	r3, [r0, #100]	; 0x64
 800a50c:	81c2      	strh	r2, [r0, #14]
 800a50e:	6183      	str	r3, [r0, #24]
 800a510:	4619      	mov	r1, r3
 800a512:	2208      	movs	r2, #8
 800a514:	305c      	adds	r0, #92	; 0x5c
 800a516:	f7ff fc23 	bl	8009d60 <memset>
 800a51a:	4b05      	ldr	r3, [pc, #20]	; (800a530 <std+0x38>)
 800a51c:	6263      	str	r3, [r4, #36]	; 0x24
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <std+0x3c>)
 800a520:	62a3      	str	r3, [r4, #40]	; 0x28
 800a522:	4b05      	ldr	r3, [pc, #20]	; (800a538 <std+0x40>)
 800a524:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <std+0x44>)
 800a528:	6224      	str	r4, [r4, #32]
 800a52a:	6323      	str	r3, [r4, #48]	; 0x30
 800a52c:	bd10      	pop	{r4, pc}
 800a52e:	bf00      	nop
 800a530:	0800afad 	.word	0x0800afad
 800a534:	0800afd3 	.word	0x0800afd3
 800a538:	0800b00b 	.word	0x0800b00b
 800a53c:	0800b02f 	.word	0x0800b02f

0800a540 <_cleanup_r>:
 800a540:	4901      	ldr	r1, [pc, #4]	; (800a548 <_cleanup_r+0x8>)
 800a542:	f000 b8c1 	b.w	800a6c8 <_fwalk_reent>
 800a546:	bf00      	nop
 800a548:	0800b465 	.word	0x0800b465

0800a54c <__sfmoreglue>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	2268      	movs	r2, #104	; 0x68
 800a550:	1e4d      	subs	r5, r1, #1
 800a552:	4355      	muls	r5, r2
 800a554:	460e      	mov	r6, r1
 800a556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a55a:	f7ff fc75 	bl	8009e48 <_malloc_r>
 800a55e:	4604      	mov	r4, r0
 800a560:	b140      	cbz	r0, 800a574 <__sfmoreglue+0x28>
 800a562:	2100      	movs	r1, #0
 800a564:	e9c0 1600 	strd	r1, r6, [r0]
 800a568:	300c      	adds	r0, #12
 800a56a:	60a0      	str	r0, [r4, #8]
 800a56c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a570:	f7ff fbf6 	bl	8009d60 <memset>
 800a574:	4620      	mov	r0, r4
 800a576:	bd70      	pop	{r4, r5, r6, pc}

0800a578 <__sfp_lock_acquire>:
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <__sfp_lock_acquire+0x8>)
 800a57a:	f000 b9cd 	b.w	800a918 <__retarget_lock_acquire_recursive>
 800a57e:	bf00      	nop
 800a580:	20001c72 	.word	0x20001c72

0800a584 <__sfp_lock_release>:
 800a584:	4801      	ldr	r0, [pc, #4]	; (800a58c <__sfp_lock_release+0x8>)
 800a586:	f000 b9c9 	b.w	800a91c <__retarget_lock_release_recursive>
 800a58a:	bf00      	nop
 800a58c:	20001c72 	.word	0x20001c72

0800a590 <__sinit_lock_acquire>:
 800a590:	4801      	ldr	r0, [pc, #4]	; (800a598 <__sinit_lock_acquire+0x8>)
 800a592:	f000 b9c1 	b.w	800a918 <__retarget_lock_acquire_recursive>
 800a596:	bf00      	nop
 800a598:	20001c73 	.word	0x20001c73

0800a59c <__sinit_lock_release>:
 800a59c:	4801      	ldr	r0, [pc, #4]	; (800a5a4 <__sinit_lock_release+0x8>)
 800a59e:	f000 b9bd 	b.w	800a91c <__retarget_lock_release_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	20001c73 	.word	0x20001c73

0800a5a8 <__sinit>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	f7ff fff0 	bl	800a590 <__sinit_lock_acquire>
 800a5b0:	69a3      	ldr	r3, [r4, #24]
 800a5b2:	b11b      	cbz	r3, 800a5bc <__sinit+0x14>
 800a5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b8:	f7ff bff0 	b.w	800a59c <__sinit_lock_release>
 800a5bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5c0:	6523      	str	r3, [r4, #80]	; 0x50
 800a5c2:	4b13      	ldr	r3, [pc, #76]	; (800a610 <__sinit+0x68>)
 800a5c4:	4a13      	ldr	r2, [pc, #76]	; (800a614 <__sinit+0x6c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	bf04      	itt	eq
 800a5ce:	2301      	moveq	r3, #1
 800a5d0:	61a3      	streq	r3, [r4, #24]
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 f820 	bl	800a618 <__sfp>
 800a5d8:	6060      	str	r0, [r4, #4]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 f81c 	bl	800a618 <__sfp>
 800a5e0:	60a0      	str	r0, [r4, #8]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 f818 	bl	800a618 <__sfp>
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	60e0      	str	r0, [r4, #12]
 800a5ec:	2104      	movs	r1, #4
 800a5ee:	6860      	ldr	r0, [r4, #4]
 800a5f0:	f7ff ff82 	bl	800a4f8 <std>
 800a5f4:	68a0      	ldr	r0, [r4, #8]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	2109      	movs	r1, #9
 800a5fa:	f7ff ff7d 	bl	800a4f8 <std>
 800a5fe:	68e0      	ldr	r0, [r4, #12]
 800a600:	2202      	movs	r2, #2
 800a602:	2112      	movs	r1, #18
 800a604:	f7ff ff78 	bl	800a4f8 <std>
 800a608:	2301      	movs	r3, #1
 800a60a:	61a3      	str	r3, [r4, #24]
 800a60c:	e7d2      	b.n	800a5b4 <__sinit+0xc>
 800a60e:	bf00      	nop
 800a610:	0800c408 	.word	0x0800c408
 800a614:	0800a541 	.word	0x0800a541

0800a618 <__sfp>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	4607      	mov	r7, r0
 800a61c:	f7ff ffac 	bl	800a578 <__sfp_lock_acquire>
 800a620:	4b1e      	ldr	r3, [pc, #120]	; (800a69c <__sfp+0x84>)
 800a622:	681e      	ldr	r6, [r3, #0]
 800a624:	69b3      	ldr	r3, [r6, #24]
 800a626:	b913      	cbnz	r3, 800a62e <__sfp+0x16>
 800a628:	4630      	mov	r0, r6
 800a62a:	f7ff ffbd 	bl	800a5a8 <__sinit>
 800a62e:	3648      	adds	r6, #72	; 0x48
 800a630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a634:	3b01      	subs	r3, #1
 800a636:	d503      	bpl.n	800a640 <__sfp+0x28>
 800a638:	6833      	ldr	r3, [r6, #0]
 800a63a:	b30b      	cbz	r3, 800a680 <__sfp+0x68>
 800a63c:	6836      	ldr	r6, [r6, #0]
 800a63e:	e7f7      	b.n	800a630 <__sfp+0x18>
 800a640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a644:	b9d5      	cbnz	r5, 800a67c <__sfp+0x64>
 800a646:	4b16      	ldr	r3, [pc, #88]	; (800a6a0 <__sfp+0x88>)
 800a648:	60e3      	str	r3, [r4, #12]
 800a64a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a64e:	6665      	str	r5, [r4, #100]	; 0x64
 800a650:	f000 f960 	bl	800a914 <__retarget_lock_init_recursive>
 800a654:	f7ff ff96 	bl	800a584 <__sfp_lock_release>
 800a658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a65c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a660:	6025      	str	r5, [r4, #0]
 800a662:	61a5      	str	r5, [r4, #24]
 800a664:	2208      	movs	r2, #8
 800a666:	4629      	mov	r1, r5
 800a668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a66c:	f7ff fb78 	bl	8009d60 <memset>
 800a670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a678:	4620      	mov	r0, r4
 800a67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a67c:	3468      	adds	r4, #104	; 0x68
 800a67e:	e7d9      	b.n	800a634 <__sfp+0x1c>
 800a680:	2104      	movs	r1, #4
 800a682:	4638      	mov	r0, r7
 800a684:	f7ff ff62 	bl	800a54c <__sfmoreglue>
 800a688:	4604      	mov	r4, r0
 800a68a:	6030      	str	r0, [r6, #0]
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d1d5      	bne.n	800a63c <__sfp+0x24>
 800a690:	f7ff ff78 	bl	800a584 <__sfp_lock_release>
 800a694:	230c      	movs	r3, #12
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	e7ee      	b.n	800a678 <__sfp+0x60>
 800a69a:	bf00      	nop
 800a69c:	0800c408 	.word	0x0800c408
 800a6a0:	ffff0001 	.word	0xffff0001

0800a6a4 <fiprintf>:
 800a6a4:	b40e      	push	{r1, r2, r3}
 800a6a6:	b503      	push	{r0, r1, lr}
 800a6a8:	4601      	mov	r1, r0
 800a6aa:	ab03      	add	r3, sp, #12
 800a6ac:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <fiprintf+0x20>)
 800a6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b2:	6800      	ldr	r0, [r0, #0]
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	f000 f969 	bl	800a98c <_vfiprintf_r>
 800a6ba:	b002      	add	sp, #8
 800a6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c0:	b003      	add	sp, #12
 800a6c2:	4770      	bx	lr
 800a6c4:	2000014c 	.word	0x2000014c

0800a6c8 <_fwalk_reent>:
 800a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	4688      	mov	r8, r1
 800a6d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6d4:	2700      	movs	r7, #0
 800a6d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6da:	f1b9 0901 	subs.w	r9, r9, #1
 800a6de:	d505      	bpl.n	800a6ec <_fwalk_reent+0x24>
 800a6e0:	6824      	ldr	r4, [r4, #0]
 800a6e2:	2c00      	cmp	r4, #0
 800a6e4:	d1f7      	bne.n	800a6d6 <_fwalk_reent+0xe>
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ec:	89ab      	ldrh	r3, [r5, #12]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d907      	bls.n	800a702 <_fwalk_reent+0x3a>
 800a6f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	d003      	beq.n	800a702 <_fwalk_reent+0x3a>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	47c0      	blx	r8
 800a700:	4307      	orrs	r7, r0
 800a702:	3568      	adds	r5, #104	; 0x68
 800a704:	e7e9      	b.n	800a6da <_fwalk_reent+0x12>
	...

0800a708 <_findenv_r>:
 800a708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a77c <_findenv_r+0x74>
 800a710:	4607      	mov	r7, r0
 800a712:	4689      	mov	r9, r1
 800a714:	4616      	mov	r6, r2
 800a716:	f000 fe13 	bl	800b340 <__env_lock>
 800a71a:	f8da 4000 	ldr.w	r4, [sl]
 800a71e:	b134      	cbz	r4, 800a72e <_findenv_r+0x26>
 800a720:	464b      	mov	r3, r9
 800a722:	4698      	mov	r8, r3
 800a724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a728:	b13a      	cbz	r2, 800a73a <_findenv_r+0x32>
 800a72a:	2a3d      	cmp	r2, #61	; 0x3d
 800a72c:	d1f9      	bne.n	800a722 <_findenv_r+0x1a>
 800a72e:	4638      	mov	r0, r7
 800a730:	f000 fe0c 	bl	800b34c <__env_unlock>
 800a734:	2000      	movs	r0, #0
 800a736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73a:	eba8 0809 	sub.w	r8, r8, r9
 800a73e:	46a3      	mov	fp, r4
 800a740:	f854 0b04 	ldr.w	r0, [r4], #4
 800a744:	2800      	cmp	r0, #0
 800a746:	d0f2      	beq.n	800a72e <_findenv_r+0x26>
 800a748:	4642      	mov	r2, r8
 800a74a:	4649      	mov	r1, r9
 800a74c:	f000 fc7b 	bl	800b046 <strncmp>
 800a750:	2800      	cmp	r0, #0
 800a752:	d1f4      	bne.n	800a73e <_findenv_r+0x36>
 800a754:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a758:	eb03 0508 	add.w	r5, r3, r8
 800a75c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a760:	2b3d      	cmp	r3, #61	; 0x3d
 800a762:	d1ec      	bne.n	800a73e <_findenv_r+0x36>
 800a764:	f8da 3000 	ldr.w	r3, [sl]
 800a768:	ebab 0303 	sub.w	r3, fp, r3
 800a76c:	109b      	asrs	r3, r3, #2
 800a76e:	4638      	mov	r0, r7
 800a770:	6033      	str	r3, [r6, #0]
 800a772:	f000 fdeb 	bl	800b34c <__env_unlock>
 800a776:	1c68      	adds	r0, r5, #1
 800a778:	e7dd      	b.n	800a736 <_findenv_r+0x2e>
 800a77a:	bf00      	nop
 800a77c:	20000048 	.word	0x20000048

0800a780 <_getenv_r>:
 800a780:	b507      	push	{r0, r1, r2, lr}
 800a782:	aa01      	add	r2, sp, #4
 800a784:	f7ff ffc0 	bl	800a708 <_findenv_r>
 800a788:	b003      	add	sp, #12
 800a78a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a790 <_gettimeofday_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_gettimeofday_r+0x20>)
 800a794:	2300      	movs	r3, #0
 800a796:	4604      	mov	r4, r0
 800a798:	4608      	mov	r0, r1
 800a79a:	4611      	mov	r1, r2
 800a79c:	602b      	str	r3, [r5, #0]
 800a79e:	f001 fd61 	bl	800c264 <_gettimeofday>
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	d102      	bne.n	800a7ac <_gettimeofday_r+0x1c>
 800a7a6:	682b      	ldr	r3, [r5, #0]
 800a7a8:	b103      	cbz	r3, 800a7ac <_gettimeofday_r+0x1c>
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	bd38      	pop	{r3, r4, r5, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20001c78 	.word	0x20001c78

0800a7b4 <__gettzinfo>:
 800a7b4:	4800      	ldr	r0, [pc, #0]	; (800a7b8 <__gettzinfo+0x4>)
 800a7b6:	4770      	bx	lr
 800a7b8:	200001b8 	.word	0x200001b8

0800a7bc <gmtime_r>:
 800a7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	4a4f      	ldr	r2, [pc, #316]	; (800a904 <gmtime_r+0x148>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	f7f5 fd3f 	bl	8000250 <__aeabi_ldivmod>
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	4a4b      	ldr	r2, [pc, #300]	; (800a904 <gmtime_r+0x148>)
 800a7d8:	4630      	mov	r0, r6
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f7f5 fd38 	bl	8000250 <__aeabi_ldivmod>
 800a7e0:	2a00      	cmp	r2, #0
 800a7e2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a7e6:	bfb7      	itett	lt
 800a7e8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a7ec:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a7f0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a7f4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a7f8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a7fc:	fbb2 f1f0 	udiv	r1, r2, r0
 800a800:	fb00 2211 	mls	r2, r0, r1, r2
 800a804:	203c      	movs	r0, #60	; 0x3c
 800a806:	60a1      	str	r1, [r4, #8]
 800a808:	fbb2 f1f0 	udiv	r1, r2, r0
 800a80c:	fb00 2211 	mls	r2, r0, r1, r2
 800a810:	6061      	str	r1, [r4, #4]
 800a812:	6022      	str	r2, [r4, #0]
 800a814:	2107      	movs	r1, #7
 800a816:	1cda      	adds	r2, r3, #3
 800a818:	fb92 f1f1 	sdiv	r1, r2, r1
 800a81c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a820:	1a52      	subs	r2, r2, r1
 800a822:	bf48      	it	mi
 800a824:	3207      	addmi	r2, #7
 800a826:	4d38      	ldr	r5, [pc, #224]	; (800a908 <gmtime_r+0x14c>)
 800a828:	4838      	ldr	r0, [pc, #224]	; (800a90c <gmtime_r+0x150>)
 800a82a:	61a2      	str	r2, [r4, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	bfb7      	itett	lt
 800a830:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a834:	fb93 f5f5 	sdivge	r5, r3, r5
 800a838:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a83c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a840:	fb00 3005 	mla	r0, r0, r5, r3
 800a844:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a848:	fbb0 f2f2 	udiv	r2, r0, r2
 800a84c:	4402      	add	r2, r0
 800a84e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a852:	fbb0 f1f3 	udiv	r1, r0, r3
 800a856:	1a52      	subs	r2, r2, r1
 800a858:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a85c:	492c      	ldr	r1, [pc, #176]	; (800a910 <gmtime_r+0x154>)
 800a85e:	fbb0 f1f1 	udiv	r1, r0, r1
 800a862:	2764      	movs	r7, #100	; 0x64
 800a864:	1a52      	subs	r2, r2, r1
 800a866:	fbb2 f1fc 	udiv	r1, r2, ip
 800a86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a86e:	fbb1 f6f7 	udiv	r6, r1, r7
 800a872:	1af3      	subs	r3, r6, r3
 800a874:	4403      	add	r3, r0
 800a876:	fb0c 3311 	mls	r3, ip, r1, r3
 800a87a:	2299      	movs	r2, #153	; 0x99
 800a87c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a880:	f10e 0e02 	add.w	lr, lr, #2
 800a884:	f103 0c01 	add.w	ip, r3, #1
 800a888:	fbbe f0f2 	udiv	r0, lr, r2
 800a88c:	4342      	muls	r2, r0
 800a88e:	3202      	adds	r2, #2
 800a890:	f04f 0805 	mov.w	r8, #5
 800a894:	fbb2 f2f8 	udiv	r2, r2, r8
 800a898:	ebac 0c02 	sub.w	ip, ip, r2
 800a89c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a8a0:	4596      	cmp	lr, r2
 800a8a2:	bf94      	ite	ls
 800a8a4:	2202      	movls	r2, #2
 800a8a6:	f06f 0209 	mvnhi.w	r2, #9
 800a8aa:	4410      	add	r0, r2
 800a8ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a8b0:	fb02 1505 	mla	r5, r2, r5, r1
 800a8b4:	2801      	cmp	r0, #1
 800a8b6:	bf98      	it	ls
 800a8b8:	3501      	addls	r5, #1
 800a8ba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a8be:	d30d      	bcc.n	800a8dc <gmtime_r+0x120>
 800a8c0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a8c4:	61e3      	str	r3, [r4, #28]
 800a8c6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a8d0:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a8d4:	6223      	str	r3, [r4, #32]
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8dc:	078a      	lsls	r2, r1, #30
 800a8de:	d102      	bne.n	800a8e6 <gmtime_r+0x12a>
 800a8e0:	fb07 1616 	mls	r6, r7, r6, r1
 800a8e4:	b95e      	cbnz	r6, 800a8fe <gmtime_r+0x142>
 800a8e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a8ea:	fbb1 f6f2 	udiv	r6, r1, r2
 800a8ee:	fb02 1216 	mls	r2, r2, r6, r1
 800a8f2:	fab2 f282 	clz	r2, r2
 800a8f6:	0952      	lsrs	r2, r2, #5
 800a8f8:	333b      	adds	r3, #59	; 0x3b
 800a8fa:	4413      	add	r3, r2
 800a8fc:	e7e2      	b.n	800a8c4 <gmtime_r+0x108>
 800a8fe:	2201      	movs	r2, #1
 800a900:	e7fa      	b.n	800a8f8 <gmtime_r+0x13c>
 800a902:	bf00      	nop
 800a904:	00015180 	.word	0x00015180
 800a908:	00023ab1 	.word	0x00023ab1
 800a90c:	fffdc54f 	.word	0xfffdc54f
 800a910:	00023ab0 	.word	0x00023ab0

0800a914 <__retarget_lock_init_recursive>:
 800a914:	4770      	bx	lr

0800a916 <__retarget_lock_acquire>:
 800a916:	4770      	bx	lr

0800a918 <__retarget_lock_acquire_recursive>:
 800a918:	4770      	bx	lr

0800a91a <__retarget_lock_release>:
 800a91a:	4770      	bx	lr

0800a91c <__retarget_lock_release_recursive>:
 800a91c:	4770      	bx	lr
	...

0800a920 <__malloc_lock>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__malloc_lock+0x8>)
 800a922:	f7ff bff9 	b.w	800a918 <__retarget_lock_acquire_recursive>
 800a926:	bf00      	nop
 800a928:	20001c71 	.word	0x20001c71

0800a92c <__malloc_unlock>:
 800a92c:	4801      	ldr	r0, [pc, #4]	; (800a934 <__malloc_unlock+0x8>)
 800a92e:	f7ff bff5 	b.w	800a91c <__retarget_lock_release_recursive>
 800a932:	bf00      	nop
 800a934:	20001c71 	.word	0x20001c71

0800a938 <__sfputc_r>:
 800a938:	6893      	ldr	r3, [r2, #8]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	b410      	push	{r4}
 800a940:	6093      	str	r3, [r2, #8]
 800a942:	da08      	bge.n	800a956 <__sfputc_r+0x1e>
 800a944:	6994      	ldr	r4, [r2, #24]
 800a946:	42a3      	cmp	r3, r4
 800a948:	db01      	blt.n	800a94e <__sfputc_r+0x16>
 800a94a:	290a      	cmp	r1, #10
 800a94c:	d103      	bne.n	800a956 <__sfputc_r+0x1e>
 800a94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a952:	f000 bc0b 	b.w	800b16c <__swbuf_r>
 800a956:	6813      	ldr	r3, [r2, #0]
 800a958:	1c58      	adds	r0, r3, #1
 800a95a:	6010      	str	r0, [r2, #0]
 800a95c:	7019      	strb	r1, [r3, #0]
 800a95e:	4608      	mov	r0, r1
 800a960:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <__sfputs_r>:
 800a966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a968:	4606      	mov	r6, r0
 800a96a:	460f      	mov	r7, r1
 800a96c:	4614      	mov	r4, r2
 800a96e:	18d5      	adds	r5, r2, r3
 800a970:	42ac      	cmp	r4, r5
 800a972:	d101      	bne.n	800a978 <__sfputs_r+0x12>
 800a974:	2000      	movs	r0, #0
 800a976:	e007      	b.n	800a988 <__sfputs_r+0x22>
 800a978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a97c:	463a      	mov	r2, r7
 800a97e:	4630      	mov	r0, r6
 800a980:	f7ff ffda 	bl	800a938 <__sfputc_r>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d1f3      	bne.n	800a970 <__sfputs_r+0xa>
 800a988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a98c <_vfiprintf_r>:
 800a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a990:	460d      	mov	r5, r1
 800a992:	b09d      	sub	sp, #116	; 0x74
 800a994:	4614      	mov	r4, r2
 800a996:	4698      	mov	r8, r3
 800a998:	4606      	mov	r6, r0
 800a99a:	b118      	cbz	r0, 800a9a4 <_vfiprintf_r+0x18>
 800a99c:	6983      	ldr	r3, [r0, #24]
 800a99e:	b90b      	cbnz	r3, 800a9a4 <_vfiprintf_r+0x18>
 800a9a0:	f7ff fe02 	bl	800a5a8 <__sinit>
 800a9a4:	4b89      	ldr	r3, [pc, #548]	; (800abcc <_vfiprintf_r+0x240>)
 800a9a6:	429d      	cmp	r5, r3
 800a9a8:	d11b      	bne.n	800a9e2 <_vfiprintf_r+0x56>
 800a9aa:	6875      	ldr	r5, [r6, #4]
 800a9ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	d405      	bmi.n	800a9be <_vfiprintf_r+0x32>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	059a      	lsls	r2, r3, #22
 800a9b6:	d402      	bmi.n	800a9be <_vfiprintf_r+0x32>
 800a9b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ba:	f7ff ffad 	bl	800a918 <__retarget_lock_acquire_recursive>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	071b      	lsls	r3, r3, #28
 800a9c2:	d501      	bpl.n	800a9c8 <_vfiprintf_r+0x3c>
 800a9c4:	692b      	ldr	r3, [r5, #16]
 800a9c6:	b9eb      	cbnz	r3, 800aa04 <_vfiprintf_r+0x78>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f000 fc32 	bl	800b234 <__swsetup_r>
 800a9d0:	b1c0      	cbz	r0, 800aa04 <_vfiprintf_r+0x78>
 800a9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d4:	07dc      	lsls	r4, r3, #31
 800a9d6:	d50e      	bpl.n	800a9f6 <_vfiprintf_r+0x6a>
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9dc:	b01d      	add	sp, #116	; 0x74
 800a9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e2:	4b7b      	ldr	r3, [pc, #492]	; (800abd0 <_vfiprintf_r+0x244>)
 800a9e4:	429d      	cmp	r5, r3
 800a9e6:	d101      	bne.n	800a9ec <_vfiprintf_r+0x60>
 800a9e8:	68b5      	ldr	r5, [r6, #8]
 800a9ea:	e7df      	b.n	800a9ac <_vfiprintf_r+0x20>
 800a9ec:	4b79      	ldr	r3, [pc, #484]	; (800abd4 <_vfiprintf_r+0x248>)
 800a9ee:	429d      	cmp	r5, r3
 800a9f0:	bf08      	it	eq
 800a9f2:	68f5      	ldreq	r5, [r6, #12]
 800a9f4:	e7da      	b.n	800a9ac <_vfiprintf_r+0x20>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	0598      	lsls	r0, r3, #22
 800a9fa:	d4ed      	bmi.n	800a9d8 <_vfiprintf_r+0x4c>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fe:	f7ff ff8d 	bl	800a91c <__retarget_lock_release_recursive>
 800aa02:	e7e9      	b.n	800a9d8 <_vfiprintf_r+0x4c>
 800aa04:	2300      	movs	r3, #0
 800aa06:	9309      	str	r3, [sp, #36]	; 0x24
 800aa08:	2320      	movs	r3, #32
 800aa0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa12:	2330      	movs	r3, #48	; 0x30
 800aa14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abd8 <_vfiprintf_r+0x24c>
 800aa18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa1c:	f04f 0901 	mov.w	r9, #1
 800aa20:	4623      	mov	r3, r4
 800aa22:	469a      	mov	sl, r3
 800aa24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa28:	b10a      	cbz	r2, 800aa2e <_vfiprintf_r+0xa2>
 800aa2a:	2a25      	cmp	r2, #37	; 0x25
 800aa2c:	d1f9      	bne.n	800aa22 <_vfiprintf_r+0x96>
 800aa2e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa32:	d00b      	beq.n	800aa4c <_vfiprintf_r+0xc0>
 800aa34:	465b      	mov	r3, fp
 800aa36:	4622      	mov	r2, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f7ff ff93 	bl	800a966 <__sfputs_r>
 800aa40:	3001      	adds	r0, #1
 800aa42:	f000 80aa 	beq.w	800ab9a <_vfiprintf_r+0x20e>
 800aa46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa48:	445a      	add	r2, fp
 800aa4a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa4c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80a2 	beq.w	800ab9a <_vfiprintf_r+0x20e>
 800aa56:	2300      	movs	r3, #0
 800aa58:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa60:	f10a 0a01 	add.w	sl, sl, #1
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	9307      	str	r3, [sp, #28]
 800aa68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa6c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa6e:	4654      	mov	r4, sl
 800aa70:	2205      	movs	r2, #5
 800aa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa76:	4858      	ldr	r0, [pc, #352]	; (800abd8 <_vfiprintf_r+0x24c>)
 800aa78:	f7f5 fb9a 	bl	80001b0 <memchr>
 800aa7c:	9a04      	ldr	r2, [sp, #16]
 800aa7e:	b9d8      	cbnz	r0, 800aab8 <_vfiprintf_r+0x12c>
 800aa80:	06d1      	lsls	r1, r2, #27
 800aa82:	bf44      	itt	mi
 800aa84:	2320      	movmi	r3, #32
 800aa86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa8a:	0713      	lsls	r3, r2, #28
 800aa8c:	bf44      	itt	mi
 800aa8e:	232b      	movmi	r3, #43	; 0x2b
 800aa90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa94:	f89a 3000 	ldrb.w	r3, [sl]
 800aa98:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9a:	d015      	beq.n	800aac8 <_vfiprintf_r+0x13c>
 800aa9c:	9a07      	ldr	r2, [sp, #28]
 800aa9e:	4654      	mov	r4, sl
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	f04f 0c0a 	mov.w	ip, #10
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaac:	3b30      	subs	r3, #48	; 0x30
 800aaae:	2b09      	cmp	r3, #9
 800aab0:	d94e      	bls.n	800ab50 <_vfiprintf_r+0x1c4>
 800aab2:	b1b0      	cbz	r0, 800aae2 <_vfiprintf_r+0x156>
 800aab4:	9207      	str	r2, [sp, #28]
 800aab6:	e014      	b.n	800aae2 <_vfiprintf_r+0x156>
 800aab8:	eba0 0308 	sub.w	r3, r0, r8
 800aabc:	fa09 f303 	lsl.w	r3, r9, r3
 800aac0:	4313      	orrs	r3, r2
 800aac2:	9304      	str	r3, [sp, #16]
 800aac4:	46a2      	mov	sl, r4
 800aac6:	e7d2      	b.n	800aa6e <_vfiprintf_r+0xe2>
 800aac8:	9b03      	ldr	r3, [sp, #12]
 800aaca:	1d19      	adds	r1, r3, #4
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	9103      	str	r1, [sp, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	bfbb      	ittet	lt
 800aad4:	425b      	neglt	r3, r3
 800aad6:	f042 0202 	orrlt.w	r2, r2, #2
 800aada:	9307      	strge	r3, [sp, #28]
 800aadc:	9307      	strlt	r3, [sp, #28]
 800aade:	bfb8      	it	lt
 800aae0:	9204      	strlt	r2, [sp, #16]
 800aae2:	7823      	ldrb	r3, [r4, #0]
 800aae4:	2b2e      	cmp	r3, #46	; 0x2e
 800aae6:	d10c      	bne.n	800ab02 <_vfiprintf_r+0x176>
 800aae8:	7863      	ldrb	r3, [r4, #1]
 800aaea:	2b2a      	cmp	r3, #42	; 0x2a
 800aaec:	d135      	bne.n	800ab5a <_vfiprintf_r+0x1ce>
 800aaee:	9b03      	ldr	r3, [sp, #12]
 800aaf0:	1d1a      	adds	r2, r3, #4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	9203      	str	r2, [sp, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	bfb8      	it	lt
 800aafa:	f04f 33ff 	movlt.w	r3, #4294967295
 800aafe:	3402      	adds	r4, #2
 800ab00:	9305      	str	r3, [sp, #20]
 800ab02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abe8 <_vfiprintf_r+0x25c>
 800ab06:	7821      	ldrb	r1, [r4, #0]
 800ab08:	2203      	movs	r2, #3
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	f7f5 fb50 	bl	80001b0 <memchr>
 800ab10:	b140      	cbz	r0, 800ab24 <_vfiprintf_r+0x198>
 800ab12:	2340      	movs	r3, #64	; 0x40
 800ab14:	eba0 000a 	sub.w	r0, r0, sl
 800ab18:	fa03 f000 	lsl.w	r0, r3, r0
 800ab1c:	9b04      	ldr	r3, [sp, #16]
 800ab1e:	4303      	orrs	r3, r0
 800ab20:	3401      	adds	r4, #1
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab28:	482c      	ldr	r0, [pc, #176]	; (800abdc <_vfiprintf_r+0x250>)
 800ab2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab2e:	2206      	movs	r2, #6
 800ab30:	f7f5 fb3e 	bl	80001b0 <memchr>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d03f      	beq.n	800abb8 <_vfiprintf_r+0x22c>
 800ab38:	4b29      	ldr	r3, [pc, #164]	; (800abe0 <_vfiprintf_r+0x254>)
 800ab3a:	bb1b      	cbnz	r3, 800ab84 <_vfiprintf_r+0x1f8>
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	3307      	adds	r3, #7
 800ab40:	f023 0307 	bic.w	r3, r3, #7
 800ab44:	3308      	adds	r3, #8
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4a:	443b      	add	r3, r7
 800ab4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab4e:	e767      	b.n	800aa20 <_vfiprintf_r+0x94>
 800ab50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab54:	460c      	mov	r4, r1
 800ab56:	2001      	movs	r0, #1
 800ab58:	e7a5      	b.n	800aaa6 <_vfiprintf_r+0x11a>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	3401      	adds	r4, #1
 800ab5e:	9305      	str	r3, [sp, #20]
 800ab60:	4619      	mov	r1, r3
 800ab62:	f04f 0c0a 	mov.w	ip, #10
 800ab66:	4620      	mov	r0, r4
 800ab68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab6c:	3a30      	subs	r2, #48	; 0x30
 800ab6e:	2a09      	cmp	r2, #9
 800ab70:	d903      	bls.n	800ab7a <_vfiprintf_r+0x1ee>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0c5      	beq.n	800ab02 <_vfiprintf_r+0x176>
 800ab76:	9105      	str	r1, [sp, #20]
 800ab78:	e7c3      	b.n	800ab02 <_vfiprintf_r+0x176>
 800ab7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab7e:	4604      	mov	r4, r0
 800ab80:	2301      	movs	r3, #1
 800ab82:	e7f0      	b.n	800ab66 <_vfiprintf_r+0x1da>
 800ab84:	ab03      	add	r3, sp, #12
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	462a      	mov	r2, r5
 800ab8a:	4b16      	ldr	r3, [pc, #88]	; (800abe4 <_vfiprintf_r+0x258>)
 800ab8c:	a904      	add	r1, sp, #16
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f3af 8000 	nop.w
 800ab94:	4607      	mov	r7, r0
 800ab96:	1c78      	adds	r0, r7, #1
 800ab98:	d1d6      	bne.n	800ab48 <_vfiprintf_r+0x1bc>
 800ab9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab9c:	07d9      	lsls	r1, r3, #31
 800ab9e:	d405      	bmi.n	800abac <_vfiprintf_r+0x220>
 800aba0:	89ab      	ldrh	r3, [r5, #12]
 800aba2:	059a      	lsls	r2, r3, #22
 800aba4:	d402      	bmi.n	800abac <_vfiprintf_r+0x220>
 800aba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aba8:	f7ff feb8 	bl	800a91c <__retarget_lock_release_recursive>
 800abac:	89ab      	ldrh	r3, [r5, #12]
 800abae:	065b      	lsls	r3, r3, #25
 800abb0:	f53f af12 	bmi.w	800a9d8 <_vfiprintf_r+0x4c>
 800abb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abb6:	e711      	b.n	800a9dc <_vfiprintf_r+0x50>
 800abb8:	ab03      	add	r3, sp, #12
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	462a      	mov	r2, r5
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <_vfiprintf_r+0x258>)
 800abc0:	a904      	add	r1, sp, #16
 800abc2:	4630      	mov	r0, r6
 800abc4:	f000 f880 	bl	800acc8 <_printf_i>
 800abc8:	e7e4      	b.n	800ab94 <_vfiprintf_r+0x208>
 800abca:	bf00      	nop
 800abcc:	0800c630 	.word	0x0800c630
 800abd0:	0800c650 	.word	0x0800c650
 800abd4:	0800c610 	.word	0x0800c610
 800abd8:	0800c670 	.word	0x0800c670
 800abdc:	0800c67a 	.word	0x0800c67a
 800abe0:	00000000 	.word	0x00000000
 800abe4:	0800a967 	.word	0x0800a967
 800abe8:	0800c676 	.word	0x0800c676

0800abec <_printf_common>:
 800abec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf0:	4616      	mov	r6, r2
 800abf2:	4699      	mov	r9, r3
 800abf4:	688a      	ldr	r2, [r1, #8]
 800abf6:	690b      	ldr	r3, [r1, #16]
 800abf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abfc:	4293      	cmp	r3, r2
 800abfe:	bfb8      	it	lt
 800ac00:	4613      	movlt	r3, r2
 800ac02:	6033      	str	r3, [r6, #0]
 800ac04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac08:	4607      	mov	r7, r0
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	b10a      	cbz	r2, 800ac12 <_printf_common+0x26>
 800ac0e:	3301      	adds	r3, #1
 800ac10:	6033      	str	r3, [r6, #0]
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	0699      	lsls	r1, r3, #26
 800ac16:	bf42      	ittt	mi
 800ac18:	6833      	ldrmi	r3, [r6, #0]
 800ac1a:	3302      	addmi	r3, #2
 800ac1c:	6033      	strmi	r3, [r6, #0]
 800ac1e:	6825      	ldr	r5, [r4, #0]
 800ac20:	f015 0506 	ands.w	r5, r5, #6
 800ac24:	d106      	bne.n	800ac34 <_printf_common+0x48>
 800ac26:	f104 0a19 	add.w	sl, r4, #25
 800ac2a:	68e3      	ldr	r3, [r4, #12]
 800ac2c:	6832      	ldr	r2, [r6, #0]
 800ac2e:	1a9b      	subs	r3, r3, r2
 800ac30:	42ab      	cmp	r3, r5
 800ac32:	dc26      	bgt.n	800ac82 <_printf_common+0x96>
 800ac34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac38:	1e13      	subs	r3, r2, #0
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	bf18      	it	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	0692      	lsls	r2, r2, #26
 800ac42:	d42b      	bmi.n	800ac9c <_printf_common+0xb0>
 800ac44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac48:	4649      	mov	r1, r9
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	47c0      	blx	r8
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d01e      	beq.n	800ac90 <_printf_common+0xa4>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	68e5      	ldr	r5, [r4, #12]
 800ac56:	6832      	ldr	r2, [r6, #0]
 800ac58:	f003 0306 	and.w	r3, r3, #6
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	bf08      	it	eq
 800ac60:	1aad      	subeq	r5, r5, r2
 800ac62:	68a3      	ldr	r3, [r4, #8]
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	bf0c      	ite	eq
 800ac68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac6c:	2500      	movne	r5, #0
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	bfc4      	itt	gt
 800ac72:	1a9b      	subgt	r3, r3, r2
 800ac74:	18ed      	addgt	r5, r5, r3
 800ac76:	2600      	movs	r6, #0
 800ac78:	341a      	adds	r4, #26
 800ac7a:	42b5      	cmp	r5, r6
 800ac7c:	d11a      	bne.n	800acb4 <_printf_common+0xc8>
 800ac7e:	2000      	movs	r0, #0
 800ac80:	e008      	b.n	800ac94 <_printf_common+0xa8>
 800ac82:	2301      	movs	r3, #1
 800ac84:	4652      	mov	r2, sl
 800ac86:	4649      	mov	r1, r9
 800ac88:	4638      	mov	r0, r7
 800ac8a:	47c0      	blx	r8
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	d103      	bne.n	800ac98 <_printf_common+0xac>
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac98:	3501      	adds	r5, #1
 800ac9a:	e7c6      	b.n	800ac2a <_printf_common+0x3e>
 800ac9c:	18e1      	adds	r1, r4, r3
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	2030      	movs	r0, #48	; 0x30
 800aca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aca6:	4422      	add	r2, r4
 800aca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acb0:	3302      	adds	r3, #2
 800acb2:	e7c7      	b.n	800ac44 <_printf_common+0x58>
 800acb4:	2301      	movs	r3, #1
 800acb6:	4622      	mov	r2, r4
 800acb8:	4649      	mov	r1, r9
 800acba:	4638      	mov	r0, r7
 800acbc:	47c0      	blx	r8
 800acbe:	3001      	adds	r0, #1
 800acc0:	d0e6      	beq.n	800ac90 <_printf_common+0xa4>
 800acc2:	3601      	adds	r6, #1
 800acc4:	e7d9      	b.n	800ac7a <_printf_common+0x8e>
	...

0800acc8 <_printf_i>:
 800acc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800accc:	7e0f      	ldrb	r7, [r1, #24]
 800acce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acd0:	2f78      	cmp	r7, #120	; 0x78
 800acd2:	4691      	mov	r9, r2
 800acd4:	4680      	mov	r8, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	469a      	mov	sl, r3
 800acda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acde:	d807      	bhi.n	800acf0 <_printf_i+0x28>
 800ace0:	2f62      	cmp	r7, #98	; 0x62
 800ace2:	d80a      	bhi.n	800acfa <_printf_i+0x32>
 800ace4:	2f00      	cmp	r7, #0
 800ace6:	f000 80d8 	beq.w	800ae9a <_printf_i+0x1d2>
 800acea:	2f58      	cmp	r7, #88	; 0x58
 800acec:	f000 80a3 	beq.w	800ae36 <_printf_i+0x16e>
 800acf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acf8:	e03a      	b.n	800ad70 <_printf_i+0xa8>
 800acfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acfe:	2b15      	cmp	r3, #21
 800ad00:	d8f6      	bhi.n	800acf0 <_printf_i+0x28>
 800ad02:	a101      	add	r1, pc, #4	; (adr r1, 800ad08 <_printf_i+0x40>)
 800ad04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad08:	0800ad61 	.word	0x0800ad61
 800ad0c:	0800ad75 	.word	0x0800ad75
 800ad10:	0800acf1 	.word	0x0800acf1
 800ad14:	0800acf1 	.word	0x0800acf1
 800ad18:	0800acf1 	.word	0x0800acf1
 800ad1c:	0800acf1 	.word	0x0800acf1
 800ad20:	0800ad75 	.word	0x0800ad75
 800ad24:	0800acf1 	.word	0x0800acf1
 800ad28:	0800acf1 	.word	0x0800acf1
 800ad2c:	0800acf1 	.word	0x0800acf1
 800ad30:	0800acf1 	.word	0x0800acf1
 800ad34:	0800ae81 	.word	0x0800ae81
 800ad38:	0800ada5 	.word	0x0800ada5
 800ad3c:	0800ae63 	.word	0x0800ae63
 800ad40:	0800acf1 	.word	0x0800acf1
 800ad44:	0800acf1 	.word	0x0800acf1
 800ad48:	0800aea3 	.word	0x0800aea3
 800ad4c:	0800acf1 	.word	0x0800acf1
 800ad50:	0800ada5 	.word	0x0800ada5
 800ad54:	0800acf1 	.word	0x0800acf1
 800ad58:	0800acf1 	.word	0x0800acf1
 800ad5c:	0800ae6b 	.word	0x0800ae6b
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	1d1a      	adds	r2, r3, #4
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	602a      	str	r2, [r5, #0]
 800ad68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad70:	2301      	movs	r3, #1
 800ad72:	e0a3      	b.n	800aebc <_printf_i+0x1f4>
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	6829      	ldr	r1, [r5, #0]
 800ad78:	0606      	lsls	r6, r0, #24
 800ad7a:	f101 0304 	add.w	r3, r1, #4
 800ad7e:	d50a      	bpl.n	800ad96 <_printf_i+0xce>
 800ad80:	680e      	ldr	r6, [r1, #0]
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	da03      	bge.n	800ad90 <_printf_i+0xc8>
 800ad88:	232d      	movs	r3, #45	; 0x2d
 800ad8a:	4276      	negs	r6, r6
 800ad8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad90:	485e      	ldr	r0, [pc, #376]	; (800af0c <_printf_i+0x244>)
 800ad92:	230a      	movs	r3, #10
 800ad94:	e019      	b.n	800adca <_printf_i+0x102>
 800ad96:	680e      	ldr	r6, [r1, #0]
 800ad98:	602b      	str	r3, [r5, #0]
 800ad9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad9e:	bf18      	it	ne
 800ada0:	b236      	sxthne	r6, r6
 800ada2:	e7ef      	b.n	800ad84 <_printf_i+0xbc>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	6820      	ldr	r0, [r4, #0]
 800ada8:	1d19      	adds	r1, r3, #4
 800adaa:	6029      	str	r1, [r5, #0]
 800adac:	0601      	lsls	r1, r0, #24
 800adae:	d501      	bpl.n	800adb4 <_printf_i+0xec>
 800adb0:	681e      	ldr	r6, [r3, #0]
 800adb2:	e002      	b.n	800adba <_printf_i+0xf2>
 800adb4:	0646      	lsls	r6, r0, #25
 800adb6:	d5fb      	bpl.n	800adb0 <_printf_i+0xe8>
 800adb8:	881e      	ldrh	r6, [r3, #0]
 800adba:	4854      	ldr	r0, [pc, #336]	; (800af0c <_printf_i+0x244>)
 800adbc:	2f6f      	cmp	r7, #111	; 0x6f
 800adbe:	bf0c      	ite	eq
 800adc0:	2308      	moveq	r3, #8
 800adc2:	230a      	movne	r3, #10
 800adc4:	2100      	movs	r1, #0
 800adc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adca:	6865      	ldr	r5, [r4, #4]
 800adcc:	60a5      	str	r5, [r4, #8]
 800adce:	2d00      	cmp	r5, #0
 800add0:	bfa2      	ittt	ge
 800add2:	6821      	ldrge	r1, [r4, #0]
 800add4:	f021 0104 	bicge.w	r1, r1, #4
 800add8:	6021      	strge	r1, [r4, #0]
 800adda:	b90e      	cbnz	r6, 800ade0 <_printf_i+0x118>
 800addc:	2d00      	cmp	r5, #0
 800adde:	d04d      	beq.n	800ae7c <_printf_i+0x1b4>
 800ade0:	4615      	mov	r5, r2
 800ade2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ade6:	fb03 6711 	mls	r7, r3, r1, r6
 800adea:	5dc7      	ldrb	r7, [r0, r7]
 800adec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adf0:	4637      	mov	r7, r6
 800adf2:	42bb      	cmp	r3, r7
 800adf4:	460e      	mov	r6, r1
 800adf6:	d9f4      	bls.n	800ade2 <_printf_i+0x11a>
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d10b      	bne.n	800ae14 <_printf_i+0x14c>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	07de      	lsls	r6, r3, #31
 800ae00:	d508      	bpl.n	800ae14 <_printf_i+0x14c>
 800ae02:	6923      	ldr	r3, [r4, #16]
 800ae04:	6861      	ldr	r1, [r4, #4]
 800ae06:	4299      	cmp	r1, r3
 800ae08:	bfde      	ittt	le
 800ae0a:	2330      	movle	r3, #48	; 0x30
 800ae0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae14:	1b52      	subs	r2, r2, r5
 800ae16:	6122      	str	r2, [r4, #16]
 800ae18:	f8cd a000 	str.w	sl, [sp]
 800ae1c:	464b      	mov	r3, r9
 800ae1e:	aa03      	add	r2, sp, #12
 800ae20:	4621      	mov	r1, r4
 800ae22:	4640      	mov	r0, r8
 800ae24:	f7ff fee2 	bl	800abec <_printf_common>
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d14c      	bne.n	800aec6 <_printf_i+0x1fe>
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	b004      	add	sp, #16
 800ae32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae36:	4835      	ldr	r0, [pc, #212]	; (800af0c <_printf_i+0x244>)
 800ae38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae3c:	6829      	ldr	r1, [r5, #0]
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae44:	6029      	str	r1, [r5, #0]
 800ae46:	061d      	lsls	r5, r3, #24
 800ae48:	d514      	bpl.n	800ae74 <_printf_i+0x1ac>
 800ae4a:	07df      	lsls	r7, r3, #31
 800ae4c:	bf44      	itt	mi
 800ae4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae52:	6023      	strmi	r3, [r4, #0]
 800ae54:	b91e      	cbnz	r6, 800ae5e <_printf_i+0x196>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	f023 0320 	bic.w	r3, r3, #32
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	2310      	movs	r3, #16
 800ae60:	e7b0      	b.n	800adc4 <_printf_i+0xfc>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	f043 0320 	orr.w	r3, r3, #32
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	2378      	movs	r3, #120	; 0x78
 800ae6c:	4828      	ldr	r0, [pc, #160]	; (800af10 <_printf_i+0x248>)
 800ae6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae72:	e7e3      	b.n	800ae3c <_printf_i+0x174>
 800ae74:	0659      	lsls	r1, r3, #25
 800ae76:	bf48      	it	mi
 800ae78:	b2b6      	uxthmi	r6, r6
 800ae7a:	e7e6      	b.n	800ae4a <_printf_i+0x182>
 800ae7c:	4615      	mov	r5, r2
 800ae7e:	e7bb      	b.n	800adf8 <_printf_i+0x130>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	6826      	ldr	r6, [r4, #0]
 800ae84:	6961      	ldr	r1, [r4, #20]
 800ae86:	1d18      	adds	r0, r3, #4
 800ae88:	6028      	str	r0, [r5, #0]
 800ae8a:	0635      	lsls	r5, r6, #24
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	d501      	bpl.n	800ae94 <_printf_i+0x1cc>
 800ae90:	6019      	str	r1, [r3, #0]
 800ae92:	e002      	b.n	800ae9a <_printf_i+0x1d2>
 800ae94:	0670      	lsls	r0, r6, #25
 800ae96:	d5fb      	bpl.n	800ae90 <_printf_i+0x1c8>
 800ae98:	8019      	strh	r1, [r3, #0]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	6123      	str	r3, [r4, #16]
 800ae9e:	4615      	mov	r5, r2
 800aea0:	e7ba      	b.n	800ae18 <_printf_i+0x150>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	1d1a      	adds	r2, r3, #4
 800aea6:	602a      	str	r2, [r5, #0]
 800aea8:	681d      	ldr	r5, [r3, #0]
 800aeaa:	6862      	ldr	r2, [r4, #4]
 800aeac:	2100      	movs	r1, #0
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f7f5 f97e 	bl	80001b0 <memchr>
 800aeb4:	b108      	cbz	r0, 800aeba <_printf_i+0x1f2>
 800aeb6:	1b40      	subs	r0, r0, r5
 800aeb8:	6060      	str	r0, [r4, #4]
 800aeba:	6863      	ldr	r3, [r4, #4]
 800aebc:	6123      	str	r3, [r4, #16]
 800aebe:	2300      	movs	r3, #0
 800aec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aec4:	e7a8      	b.n	800ae18 <_printf_i+0x150>
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	462a      	mov	r2, r5
 800aeca:	4649      	mov	r1, r9
 800aecc:	4640      	mov	r0, r8
 800aece:	47d0      	blx	sl
 800aed0:	3001      	adds	r0, #1
 800aed2:	d0ab      	beq.n	800ae2c <_printf_i+0x164>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	079b      	lsls	r3, r3, #30
 800aed8:	d413      	bmi.n	800af02 <_printf_i+0x23a>
 800aeda:	68e0      	ldr	r0, [r4, #12]
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	4298      	cmp	r0, r3
 800aee0:	bfb8      	it	lt
 800aee2:	4618      	movlt	r0, r3
 800aee4:	e7a4      	b.n	800ae30 <_printf_i+0x168>
 800aee6:	2301      	movs	r3, #1
 800aee8:	4632      	mov	r2, r6
 800aeea:	4649      	mov	r1, r9
 800aeec:	4640      	mov	r0, r8
 800aeee:	47d0      	blx	sl
 800aef0:	3001      	adds	r0, #1
 800aef2:	d09b      	beq.n	800ae2c <_printf_i+0x164>
 800aef4:	3501      	adds	r5, #1
 800aef6:	68e3      	ldr	r3, [r4, #12]
 800aef8:	9903      	ldr	r1, [sp, #12]
 800aefa:	1a5b      	subs	r3, r3, r1
 800aefc:	42ab      	cmp	r3, r5
 800aefe:	dcf2      	bgt.n	800aee6 <_printf_i+0x21e>
 800af00:	e7eb      	b.n	800aeda <_printf_i+0x212>
 800af02:	2500      	movs	r5, #0
 800af04:	f104 0619 	add.w	r6, r4, #25
 800af08:	e7f5      	b.n	800aef6 <_printf_i+0x22e>
 800af0a:	bf00      	nop
 800af0c:	0800c681 	.word	0x0800c681
 800af10:	0800c692 	.word	0x0800c692

0800af14 <siprintf>:
 800af14:	b40e      	push	{r1, r2, r3}
 800af16:	b500      	push	{lr}
 800af18:	b09c      	sub	sp, #112	; 0x70
 800af1a:	ab1d      	add	r3, sp, #116	; 0x74
 800af1c:	9002      	str	r0, [sp, #8]
 800af1e:	9006      	str	r0, [sp, #24]
 800af20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af24:	4809      	ldr	r0, [pc, #36]	; (800af4c <siprintf+0x38>)
 800af26:	9107      	str	r1, [sp, #28]
 800af28:	9104      	str	r1, [sp, #16]
 800af2a:	4909      	ldr	r1, [pc, #36]	; (800af50 <siprintf+0x3c>)
 800af2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af30:	9105      	str	r1, [sp, #20]
 800af32:	6800      	ldr	r0, [r0, #0]
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	a902      	add	r1, sp, #8
 800af38:	f000 fbfa 	bl	800b730 <_svfiprintf_r>
 800af3c:	9b02      	ldr	r3, [sp, #8]
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	b01c      	add	sp, #112	; 0x70
 800af44:	f85d eb04 	ldr.w	lr, [sp], #4
 800af48:	b003      	add	sp, #12
 800af4a:	4770      	bx	lr
 800af4c:	2000014c 	.word	0x2000014c
 800af50:	ffff0208 	.word	0xffff0208

0800af54 <siscanf>:
 800af54:	b40e      	push	{r1, r2, r3}
 800af56:	b510      	push	{r4, lr}
 800af58:	b09f      	sub	sp, #124	; 0x7c
 800af5a:	ac21      	add	r4, sp, #132	; 0x84
 800af5c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800af60:	f854 2b04 	ldr.w	r2, [r4], #4
 800af64:	9201      	str	r2, [sp, #4]
 800af66:	f8ad 101c 	strh.w	r1, [sp, #28]
 800af6a:	9004      	str	r0, [sp, #16]
 800af6c:	9008      	str	r0, [sp, #32]
 800af6e:	f7f5 f911 	bl	8000194 <strlen>
 800af72:	4b0c      	ldr	r3, [pc, #48]	; (800afa4 <siscanf+0x50>)
 800af74:	9005      	str	r0, [sp, #20]
 800af76:	9009      	str	r0, [sp, #36]	; 0x24
 800af78:	930d      	str	r3, [sp, #52]	; 0x34
 800af7a:	480b      	ldr	r0, [pc, #44]	; (800afa8 <siscanf+0x54>)
 800af7c:	9a01      	ldr	r2, [sp, #4]
 800af7e:	6800      	ldr	r0, [r0, #0]
 800af80:	9403      	str	r4, [sp, #12]
 800af82:	2300      	movs	r3, #0
 800af84:	9311      	str	r3, [sp, #68]	; 0x44
 800af86:	9316      	str	r3, [sp, #88]	; 0x58
 800af88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800af90:	a904      	add	r1, sp, #16
 800af92:	4623      	mov	r3, r4
 800af94:	f000 fd26 	bl	800b9e4 <__ssvfiscanf_r>
 800af98:	b01f      	add	sp, #124	; 0x7c
 800af9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af9e:	b003      	add	sp, #12
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	0800afcf 	.word	0x0800afcf
 800afa8:	2000014c 	.word	0x2000014c

0800afac <__sread>:
 800afac:	b510      	push	{r4, lr}
 800afae:	460c      	mov	r4, r1
 800afb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb4:	f000 ffe0 	bl	800bf78 <_read_r>
 800afb8:	2800      	cmp	r0, #0
 800afba:	bfab      	itete	ge
 800afbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afbe:	89a3      	ldrhlt	r3, [r4, #12]
 800afc0:	181b      	addge	r3, r3, r0
 800afc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afc6:	bfac      	ite	ge
 800afc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800afca:	81a3      	strhlt	r3, [r4, #12]
 800afcc:	bd10      	pop	{r4, pc}

0800afce <__seofread>:
 800afce:	2000      	movs	r0, #0
 800afd0:	4770      	bx	lr

0800afd2 <__swrite>:
 800afd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd6:	461f      	mov	r7, r3
 800afd8:	898b      	ldrh	r3, [r1, #12]
 800afda:	05db      	lsls	r3, r3, #23
 800afdc:	4605      	mov	r5, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	4616      	mov	r6, r2
 800afe2:	d505      	bpl.n	800aff0 <__swrite+0x1e>
 800afe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe8:	2302      	movs	r3, #2
 800afea:	2200      	movs	r2, #0
 800afec:	f000 fa76 	bl	800b4dc <_lseek_r>
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800affa:	81a3      	strh	r3, [r4, #12]
 800affc:	4632      	mov	r2, r6
 800affe:	463b      	mov	r3, r7
 800b000:	4628      	mov	r0, r5
 800b002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b006:	f000 b903 	b.w	800b210 <_write_r>

0800b00a <__sseek>:
 800b00a:	b510      	push	{r4, lr}
 800b00c:	460c      	mov	r4, r1
 800b00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b012:	f000 fa63 	bl	800b4dc <_lseek_r>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	bf15      	itete	ne
 800b01c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b01e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b026:	81a3      	strheq	r3, [r4, #12]
 800b028:	bf18      	it	ne
 800b02a:	81a3      	strhne	r3, [r4, #12]
 800b02c:	bd10      	pop	{r4, pc}

0800b02e <__sclose>:
 800b02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b032:	f000 b975 	b.w	800b320 <_close_r>

0800b036 <strcpy>:
 800b036:	4603      	mov	r3, r0
 800b038:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b03c:	f803 2b01 	strb.w	r2, [r3], #1
 800b040:	2a00      	cmp	r2, #0
 800b042:	d1f9      	bne.n	800b038 <strcpy+0x2>
 800b044:	4770      	bx	lr

0800b046 <strncmp>:
 800b046:	b510      	push	{r4, lr}
 800b048:	b17a      	cbz	r2, 800b06a <strncmp+0x24>
 800b04a:	4603      	mov	r3, r0
 800b04c:	3901      	subs	r1, #1
 800b04e:	1884      	adds	r4, r0, r2
 800b050:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b054:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b058:	4290      	cmp	r0, r2
 800b05a:	d101      	bne.n	800b060 <strncmp+0x1a>
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	d101      	bne.n	800b064 <strncmp+0x1e>
 800b060:	1a80      	subs	r0, r0, r2
 800b062:	bd10      	pop	{r4, pc}
 800b064:	2800      	cmp	r0, #0
 800b066:	d1f3      	bne.n	800b050 <strncmp+0xa>
 800b068:	e7fa      	b.n	800b060 <strncmp+0x1a>
 800b06a:	4610      	mov	r0, r2
 800b06c:	e7f9      	b.n	800b062 <strncmp+0x1c>
	...

0800b070 <_strtoul_l.constprop.0>:
 800b070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b074:	4f36      	ldr	r7, [pc, #216]	; (800b150 <_strtoul_l.constprop.0+0xe0>)
 800b076:	4686      	mov	lr, r0
 800b078:	460d      	mov	r5, r1
 800b07a:	4628      	mov	r0, r5
 800b07c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b080:	5de6      	ldrb	r6, [r4, r7]
 800b082:	f016 0608 	ands.w	r6, r6, #8
 800b086:	d1f8      	bne.n	800b07a <_strtoul_l.constprop.0+0xa>
 800b088:	2c2d      	cmp	r4, #45	; 0x2d
 800b08a:	d12f      	bne.n	800b0ec <_strtoul_l.constprop.0+0x7c>
 800b08c:	782c      	ldrb	r4, [r5, #0]
 800b08e:	2601      	movs	r6, #1
 800b090:	1c85      	adds	r5, r0, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d057      	beq.n	800b146 <_strtoul_l.constprop.0+0xd6>
 800b096:	2b10      	cmp	r3, #16
 800b098:	d109      	bne.n	800b0ae <_strtoul_l.constprop.0+0x3e>
 800b09a:	2c30      	cmp	r4, #48	; 0x30
 800b09c:	d107      	bne.n	800b0ae <_strtoul_l.constprop.0+0x3e>
 800b09e:	7828      	ldrb	r0, [r5, #0]
 800b0a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b0a4:	2858      	cmp	r0, #88	; 0x58
 800b0a6:	d149      	bne.n	800b13c <_strtoul_l.constprop.0+0xcc>
 800b0a8:	786c      	ldrb	r4, [r5, #1]
 800b0aa:	2310      	movs	r3, #16
 800b0ac:	3502      	adds	r5, #2
 800b0ae:	f04f 38ff 	mov.w	r8, #4294967295
 800b0b2:	2700      	movs	r7, #0
 800b0b4:	fbb8 f8f3 	udiv	r8, r8, r3
 800b0b8:	fb03 f908 	mul.w	r9, r3, r8
 800b0bc:	ea6f 0909 	mvn.w	r9, r9
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b0c6:	f1bc 0f09 	cmp.w	ip, #9
 800b0ca:	d814      	bhi.n	800b0f6 <_strtoul_l.constprop.0+0x86>
 800b0cc:	4664      	mov	r4, ip
 800b0ce:	42a3      	cmp	r3, r4
 800b0d0:	dd22      	ble.n	800b118 <_strtoul_l.constprop.0+0xa8>
 800b0d2:	2f00      	cmp	r7, #0
 800b0d4:	db1d      	blt.n	800b112 <_strtoul_l.constprop.0+0xa2>
 800b0d6:	4580      	cmp	r8, r0
 800b0d8:	d31b      	bcc.n	800b112 <_strtoul_l.constprop.0+0xa2>
 800b0da:	d101      	bne.n	800b0e0 <_strtoul_l.constprop.0+0x70>
 800b0dc:	45a1      	cmp	r9, r4
 800b0de:	db18      	blt.n	800b112 <_strtoul_l.constprop.0+0xa2>
 800b0e0:	fb00 4003 	mla	r0, r0, r3, r4
 800b0e4:	2701      	movs	r7, #1
 800b0e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0ea:	e7ea      	b.n	800b0c2 <_strtoul_l.constprop.0+0x52>
 800b0ec:	2c2b      	cmp	r4, #43	; 0x2b
 800b0ee:	bf04      	itt	eq
 800b0f0:	782c      	ldrbeq	r4, [r5, #0]
 800b0f2:	1c85      	addeq	r5, r0, #2
 800b0f4:	e7cd      	b.n	800b092 <_strtoul_l.constprop.0+0x22>
 800b0f6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b0fa:	f1bc 0f19 	cmp.w	ip, #25
 800b0fe:	d801      	bhi.n	800b104 <_strtoul_l.constprop.0+0x94>
 800b100:	3c37      	subs	r4, #55	; 0x37
 800b102:	e7e4      	b.n	800b0ce <_strtoul_l.constprop.0+0x5e>
 800b104:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b108:	f1bc 0f19 	cmp.w	ip, #25
 800b10c:	d804      	bhi.n	800b118 <_strtoul_l.constprop.0+0xa8>
 800b10e:	3c57      	subs	r4, #87	; 0x57
 800b110:	e7dd      	b.n	800b0ce <_strtoul_l.constprop.0+0x5e>
 800b112:	f04f 37ff 	mov.w	r7, #4294967295
 800b116:	e7e6      	b.n	800b0e6 <_strtoul_l.constprop.0+0x76>
 800b118:	2f00      	cmp	r7, #0
 800b11a:	da07      	bge.n	800b12c <_strtoul_l.constprop.0+0xbc>
 800b11c:	2322      	movs	r3, #34	; 0x22
 800b11e:	f8ce 3000 	str.w	r3, [lr]
 800b122:	f04f 30ff 	mov.w	r0, #4294967295
 800b126:	b932      	cbnz	r2, 800b136 <_strtoul_l.constprop.0+0xc6>
 800b128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b12c:	b106      	cbz	r6, 800b130 <_strtoul_l.constprop.0+0xc0>
 800b12e:	4240      	negs	r0, r0
 800b130:	2a00      	cmp	r2, #0
 800b132:	d0f9      	beq.n	800b128 <_strtoul_l.constprop.0+0xb8>
 800b134:	b107      	cbz	r7, 800b138 <_strtoul_l.constprop.0+0xc8>
 800b136:	1e69      	subs	r1, r5, #1
 800b138:	6011      	str	r1, [r2, #0]
 800b13a:	e7f5      	b.n	800b128 <_strtoul_l.constprop.0+0xb8>
 800b13c:	2430      	movs	r4, #48	; 0x30
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1b5      	bne.n	800b0ae <_strtoul_l.constprop.0+0x3e>
 800b142:	2308      	movs	r3, #8
 800b144:	e7b3      	b.n	800b0ae <_strtoul_l.constprop.0+0x3e>
 800b146:	2c30      	cmp	r4, #48	; 0x30
 800b148:	d0a9      	beq.n	800b09e <_strtoul_l.constprop.0+0x2e>
 800b14a:	230a      	movs	r3, #10
 800b14c:	e7af      	b.n	800b0ae <_strtoul_l.constprop.0+0x3e>
 800b14e:	bf00      	nop
 800b150:	0800c6a4 	.word	0x0800c6a4

0800b154 <_strtoul_r>:
 800b154:	f7ff bf8c 	b.w	800b070 <_strtoul_l.constprop.0>

0800b158 <strtoul>:
 800b158:	4613      	mov	r3, r2
 800b15a:	460a      	mov	r2, r1
 800b15c:	4601      	mov	r1, r0
 800b15e:	4802      	ldr	r0, [pc, #8]	; (800b168 <strtoul+0x10>)
 800b160:	6800      	ldr	r0, [r0, #0]
 800b162:	f7ff bf85 	b.w	800b070 <_strtoul_l.constprop.0>
 800b166:	bf00      	nop
 800b168:	2000014c 	.word	0x2000014c

0800b16c <__swbuf_r>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	460e      	mov	r6, r1
 800b170:	4614      	mov	r4, r2
 800b172:	4605      	mov	r5, r0
 800b174:	b118      	cbz	r0, 800b17e <__swbuf_r+0x12>
 800b176:	6983      	ldr	r3, [r0, #24]
 800b178:	b90b      	cbnz	r3, 800b17e <__swbuf_r+0x12>
 800b17a:	f7ff fa15 	bl	800a5a8 <__sinit>
 800b17e:	4b21      	ldr	r3, [pc, #132]	; (800b204 <__swbuf_r+0x98>)
 800b180:	429c      	cmp	r4, r3
 800b182:	d12b      	bne.n	800b1dc <__swbuf_r+0x70>
 800b184:	686c      	ldr	r4, [r5, #4]
 800b186:	69a3      	ldr	r3, [r4, #24]
 800b188:	60a3      	str	r3, [r4, #8]
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	071a      	lsls	r2, r3, #28
 800b18e:	d52f      	bpl.n	800b1f0 <__swbuf_r+0x84>
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	b36b      	cbz	r3, 800b1f0 <__swbuf_r+0x84>
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	6820      	ldr	r0, [r4, #0]
 800b198:	1ac0      	subs	r0, r0, r3
 800b19a:	6963      	ldr	r3, [r4, #20]
 800b19c:	b2f6      	uxtb	r6, r6
 800b19e:	4283      	cmp	r3, r0
 800b1a0:	4637      	mov	r7, r6
 800b1a2:	dc04      	bgt.n	800b1ae <__swbuf_r+0x42>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f000 f95c 	bl	800b464 <_fflush_r>
 800b1ac:	bb30      	cbnz	r0, 800b1fc <__swbuf_r+0x90>
 800b1ae:	68a3      	ldr	r3, [r4, #8]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	60a3      	str	r3, [r4, #8]
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	6022      	str	r2, [r4, #0]
 800b1ba:	701e      	strb	r6, [r3, #0]
 800b1bc:	6963      	ldr	r3, [r4, #20]
 800b1be:	3001      	adds	r0, #1
 800b1c0:	4283      	cmp	r3, r0
 800b1c2:	d004      	beq.n	800b1ce <__swbuf_r+0x62>
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	07db      	lsls	r3, r3, #31
 800b1c8:	d506      	bpl.n	800b1d8 <__swbuf_r+0x6c>
 800b1ca:	2e0a      	cmp	r6, #10
 800b1cc:	d104      	bne.n	800b1d8 <__swbuf_r+0x6c>
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 f947 	bl	800b464 <_fflush_r>
 800b1d6:	b988      	cbnz	r0, 800b1fc <__swbuf_r+0x90>
 800b1d8:	4638      	mov	r0, r7
 800b1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <__swbuf_r+0x9c>)
 800b1de:	429c      	cmp	r4, r3
 800b1e0:	d101      	bne.n	800b1e6 <__swbuf_r+0x7a>
 800b1e2:	68ac      	ldr	r4, [r5, #8]
 800b1e4:	e7cf      	b.n	800b186 <__swbuf_r+0x1a>
 800b1e6:	4b09      	ldr	r3, [pc, #36]	; (800b20c <__swbuf_r+0xa0>)
 800b1e8:	429c      	cmp	r4, r3
 800b1ea:	bf08      	it	eq
 800b1ec:	68ec      	ldreq	r4, [r5, #12]
 800b1ee:	e7ca      	b.n	800b186 <__swbuf_r+0x1a>
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f81e 	bl	800b234 <__swsetup_r>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d0cb      	beq.n	800b194 <__swbuf_r+0x28>
 800b1fc:	f04f 37ff 	mov.w	r7, #4294967295
 800b200:	e7ea      	b.n	800b1d8 <__swbuf_r+0x6c>
 800b202:	bf00      	nop
 800b204:	0800c630 	.word	0x0800c630
 800b208:	0800c650 	.word	0x0800c650
 800b20c:	0800c610 	.word	0x0800c610

0800b210 <_write_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d07      	ldr	r5, [pc, #28]	; (800b230 <_write_r+0x20>)
 800b214:	4604      	mov	r4, r0
 800b216:	4608      	mov	r0, r1
 800b218:	4611      	mov	r1, r2
 800b21a:	2200      	movs	r2, #0
 800b21c:	602a      	str	r2, [r5, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	f7f5 fb9d 	bl	800095e <_write>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_write_r+0x1e>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_write_r+0x1e>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20001c78 	.word	0x20001c78

0800b234 <__swsetup_r>:
 800b234:	4b32      	ldr	r3, [pc, #200]	; (800b300 <__swsetup_r+0xcc>)
 800b236:	b570      	push	{r4, r5, r6, lr}
 800b238:	681d      	ldr	r5, [r3, #0]
 800b23a:	4606      	mov	r6, r0
 800b23c:	460c      	mov	r4, r1
 800b23e:	b125      	cbz	r5, 800b24a <__swsetup_r+0x16>
 800b240:	69ab      	ldr	r3, [r5, #24]
 800b242:	b913      	cbnz	r3, 800b24a <__swsetup_r+0x16>
 800b244:	4628      	mov	r0, r5
 800b246:	f7ff f9af 	bl	800a5a8 <__sinit>
 800b24a:	4b2e      	ldr	r3, [pc, #184]	; (800b304 <__swsetup_r+0xd0>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	d10f      	bne.n	800b270 <__swsetup_r+0x3c>
 800b250:	686c      	ldr	r4, [r5, #4]
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b258:	0719      	lsls	r1, r3, #28
 800b25a:	d42c      	bmi.n	800b2b6 <__swsetup_r+0x82>
 800b25c:	06dd      	lsls	r5, r3, #27
 800b25e:	d411      	bmi.n	800b284 <__swsetup_r+0x50>
 800b260:	2309      	movs	r3, #9
 800b262:	6033      	str	r3, [r6, #0]
 800b264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b268:	81a3      	strh	r3, [r4, #12]
 800b26a:	f04f 30ff 	mov.w	r0, #4294967295
 800b26e:	e03e      	b.n	800b2ee <__swsetup_r+0xba>
 800b270:	4b25      	ldr	r3, [pc, #148]	; (800b308 <__swsetup_r+0xd4>)
 800b272:	429c      	cmp	r4, r3
 800b274:	d101      	bne.n	800b27a <__swsetup_r+0x46>
 800b276:	68ac      	ldr	r4, [r5, #8]
 800b278:	e7eb      	b.n	800b252 <__swsetup_r+0x1e>
 800b27a:	4b24      	ldr	r3, [pc, #144]	; (800b30c <__swsetup_r+0xd8>)
 800b27c:	429c      	cmp	r4, r3
 800b27e:	bf08      	it	eq
 800b280:	68ec      	ldreq	r4, [r5, #12]
 800b282:	e7e6      	b.n	800b252 <__swsetup_r+0x1e>
 800b284:	0758      	lsls	r0, r3, #29
 800b286:	d512      	bpl.n	800b2ae <__swsetup_r+0x7a>
 800b288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b28a:	b141      	cbz	r1, 800b29e <__swsetup_r+0x6a>
 800b28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b290:	4299      	cmp	r1, r3
 800b292:	d002      	beq.n	800b29a <__swsetup_r+0x66>
 800b294:	4630      	mov	r0, r6
 800b296:	f7fe fd6b 	bl	8009d70 <_free_r>
 800b29a:	2300      	movs	r3, #0
 800b29c:	6363      	str	r3, [r4, #52]	; 0x34
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	6063      	str	r3, [r4, #4]
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	f043 0308 	orr.w	r3, r3, #8
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	b94b      	cbnz	r3, 800b2ce <__swsetup_r+0x9a>
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2c4:	d003      	beq.n	800b2ce <__swsetup_r+0x9a>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f000 f93f 	bl	800b54c <__smakebuf_r>
 800b2ce:	89a0      	ldrh	r0, [r4, #12]
 800b2d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2d4:	f010 0301 	ands.w	r3, r0, #1
 800b2d8:	d00a      	beq.n	800b2f0 <__swsetup_r+0xbc>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	60a3      	str	r3, [r4, #8]
 800b2de:	6963      	ldr	r3, [r4, #20]
 800b2e0:	425b      	negs	r3, r3
 800b2e2:	61a3      	str	r3, [r4, #24]
 800b2e4:	6923      	ldr	r3, [r4, #16]
 800b2e6:	b943      	cbnz	r3, 800b2fa <__swsetup_r+0xc6>
 800b2e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2ec:	d1ba      	bne.n	800b264 <__swsetup_r+0x30>
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	0781      	lsls	r1, r0, #30
 800b2f2:	bf58      	it	pl
 800b2f4:	6963      	ldrpl	r3, [r4, #20]
 800b2f6:	60a3      	str	r3, [r4, #8]
 800b2f8:	e7f4      	b.n	800b2e4 <__swsetup_r+0xb0>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e7f7      	b.n	800b2ee <__swsetup_r+0xba>
 800b2fe:	bf00      	nop
 800b300:	2000014c 	.word	0x2000014c
 800b304:	0800c630 	.word	0x0800c630
 800b308:	0800c650 	.word	0x0800c650
 800b30c:	0800c610 	.word	0x0800c610

0800b310 <abort>:
 800b310:	b508      	push	{r3, lr}
 800b312:	2006      	movs	r0, #6
 800b314:	f000 fea2 	bl	800c05c <raise>
 800b318:	2001      	movs	r0, #1
 800b31a:	f7f5 fc47 	bl	8000bac <_exit>
	...

0800b320 <_close_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d06      	ldr	r5, [pc, #24]	; (800b33c <_close_r+0x1c>)
 800b324:	2300      	movs	r3, #0
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	f7f5 fc65 	bl	8000bfa <_close>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_close_r+0x1a>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_close_r+0x1a>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	20001c78 	.word	0x20001c78

0800b340 <__env_lock>:
 800b340:	4801      	ldr	r0, [pc, #4]	; (800b348 <__env_lock+0x8>)
 800b342:	f7ff bae9 	b.w	800a918 <__retarget_lock_acquire_recursive>
 800b346:	bf00      	nop
 800b348:	20001c70 	.word	0x20001c70

0800b34c <__env_unlock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__env_unlock+0x8>)
 800b34e:	f7ff bae5 	b.w	800a91c <__retarget_lock_release_recursive>
 800b352:	bf00      	nop
 800b354:	20001c70 	.word	0x20001c70

0800b358 <__sflush_r>:
 800b358:	898a      	ldrh	r2, [r1, #12]
 800b35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35e:	4605      	mov	r5, r0
 800b360:	0710      	lsls	r0, r2, #28
 800b362:	460c      	mov	r4, r1
 800b364:	d458      	bmi.n	800b418 <__sflush_r+0xc0>
 800b366:	684b      	ldr	r3, [r1, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dc05      	bgt.n	800b378 <__sflush_r+0x20>
 800b36c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b36e:	2b00      	cmp	r3, #0
 800b370:	dc02      	bgt.n	800b378 <__sflush_r+0x20>
 800b372:	2000      	movs	r0, #0
 800b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b37a:	2e00      	cmp	r6, #0
 800b37c:	d0f9      	beq.n	800b372 <__sflush_r+0x1a>
 800b37e:	2300      	movs	r3, #0
 800b380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b384:	682f      	ldr	r7, [r5, #0]
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	d032      	beq.n	800b3f0 <__sflush_r+0x98>
 800b38a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	075a      	lsls	r2, r3, #29
 800b390:	d505      	bpl.n	800b39e <__sflush_r+0x46>
 800b392:	6863      	ldr	r3, [r4, #4]
 800b394:	1ac0      	subs	r0, r0, r3
 800b396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b398:	b10b      	cbz	r3, 800b39e <__sflush_r+0x46>
 800b39a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b39c:	1ac0      	subs	r0, r0, r3
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3a4:	6a21      	ldr	r1, [r4, #32]
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b0      	blx	r6
 800b3aa:	1c43      	adds	r3, r0, #1
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	d106      	bne.n	800b3be <__sflush_r+0x66>
 800b3b0:	6829      	ldr	r1, [r5, #0]
 800b3b2:	291d      	cmp	r1, #29
 800b3b4:	d82c      	bhi.n	800b410 <__sflush_r+0xb8>
 800b3b6:	4a2a      	ldr	r2, [pc, #168]	; (800b460 <__sflush_r+0x108>)
 800b3b8:	40ca      	lsrs	r2, r1
 800b3ba:	07d6      	lsls	r6, r2, #31
 800b3bc:	d528      	bpl.n	800b410 <__sflush_r+0xb8>
 800b3be:	2200      	movs	r2, #0
 800b3c0:	6062      	str	r2, [r4, #4]
 800b3c2:	04d9      	lsls	r1, r3, #19
 800b3c4:	6922      	ldr	r2, [r4, #16]
 800b3c6:	6022      	str	r2, [r4, #0]
 800b3c8:	d504      	bpl.n	800b3d4 <__sflush_r+0x7c>
 800b3ca:	1c42      	adds	r2, r0, #1
 800b3cc:	d101      	bne.n	800b3d2 <__sflush_r+0x7a>
 800b3ce:	682b      	ldr	r3, [r5, #0]
 800b3d0:	b903      	cbnz	r3, 800b3d4 <__sflush_r+0x7c>
 800b3d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b3d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3d6:	602f      	str	r7, [r5, #0]
 800b3d8:	2900      	cmp	r1, #0
 800b3da:	d0ca      	beq.n	800b372 <__sflush_r+0x1a>
 800b3dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3e0:	4299      	cmp	r1, r3
 800b3e2:	d002      	beq.n	800b3ea <__sflush_r+0x92>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f7fe fcc3 	bl	8009d70 <_free_r>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b3ee:	e7c1      	b.n	800b374 <__sflush_r+0x1c>
 800b3f0:	6a21      	ldr	r1, [r4, #32]
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b0      	blx	r6
 800b3f8:	1c41      	adds	r1, r0, #1
 800b3fa:	d1c7      	bne.n	800b38c <__sflush_r+0x34>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0c4      	beq.n	800b38c <__sflush_r+0x34>
 800b402:	2b1d      	cmp	r3, #29
 800b404:	d001      	beq.n	800b40a <__sflush_r+0xb2>
 800b406:	2b16      	cmp	r3, #22
 800b408:	d101      	bne.n	800b40e <__sflush_r+0xb6>
 800b40a:	602f      	str	r7, [r5, #0]
 800b40c:	e7b1      	b.n	800b372 <__sflush_r+0x1a>
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	e7ad      	b.n	800b374 <__sflush_r+0x1c>
 800b418:	690f      	ldr	r7, [r1, #16]
 800b41a:	2f00      	cmp	r7, #0
 800b41c:	d0a9      	beq.n	800b372 <__sflush_r+0x1a>
 800b41e:	0793      	lsls	r3, r2, #30
 800b420:	680e      	ldr	r6, [r1, #0]
 800b422:	bf08      	it	eq
 800b424:	694b      	ldreq	r3, [r1, #20]
 800b426:	600f      	str	r7, [r1, #0]
 800b428:	bf18      	it	ne
 800b42a:	2300      	movne	r3, #0
 800b42c:	eba6 0807 	sub.w	r8, r6, r7
 800b430:	608b      	str	r3, [r1, #8]
 800b432:	f1b8 0f00 	cmp.w	r8, #0
 800b436:	dd9c      	ble.n	800b372 <__sflush_r+0x1a>
 800b438:	6a21      	ldr	r1, [r4, #32]
 800b43a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b43c:	4643      	mov	r3, r8
 800b43e:	463a      	mov	r2, r7
 800b440:	4628      	mov	r0, r5
 800b442:	47b0      	blx	r6
 800b444:	2800      	cmp	r0, #0
 800b446:	dc06      	bgt.n	800b456 <__sflush_r+0xfe>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b44e:	81a3      	strh	r3, [r4, #12]
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e78e      	b.n	800b374 <__sflush_r+0x1c>
 800b456:	4407      	add	r7, r0
 800b458:	eba8 0800 	sub.w	r8, r8, r0
 800b45c:	e7e9      	b.n	800b432 <__sflush_r+0xda>
 800b45e:	bf00      	nop
 800b460:	20400001 	.word	0x20400001

0800b464 <_fflush_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	690b      	ldr	r3, [r1, #16]
 800b468:	4605      	mov	r5, r0
 800b46a:	460c      	mov	r4, r1
 800b46c:	b913      	cbnz	r3, 800b474 <_fflush_r+0x10>
 800b46e:	2500      	movs	r5, #0
 800b470:	4628      	mov	r0, r5
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	b118      	cbz	r0, 800b47e <_fflush_r+0x1a>
 800b476:	6983      	ldr	r3, [r0, #24]
 800b478:	b90b      	cbnz	r3, 800b47e <_fflush_r+0x1a>
 800b47a:	f7ff f895 	bl	800a5a8 <__sinit>
 800b47e:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <_fflush_r+0x6c>)
 800b480:	429c      	cmp	r4, r3
 800b482:	d11b      	bne.n	800b4bc <_fflush_r+0x58>
 800b484:	686c      	ldr	r4, [r5, #4]
 800b486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0ef      	beq.n	800b46e <_fflush_r+0xa>
 800b48e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b490:	07d0      	lsls	r0, r2, #31
 800b492:	d404      	bmi.n	800b49e <_fflush_r+0x3a>
 800b494:	0599      	lsls	r1, r3, #22
 800b496:	d402      	bmi.n	800b49e <_fflush_r+0x3a>
 800b498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b49a:	f7ff fa3d 	bl	800a918 <__retarget_lock_acquire_recursive>
 800b49e:	4628      	mov	r0, r5
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	f7ff ff59 	bl	800b358 <__sflush_r>
 800b4a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4a8:	07da      	lsls	r2, r3, #31
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	d4e0      	bmi.n	800b470 <_fflush_r+0xc>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	059b      	lsls	r3, r3, #22
 800b4b2:	d4dd      	bmi.n	800b470 <_fflush_r+0xc>
 800b4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4b6:	f7ff fa31 	bl	800a91c <__retarget_lock_release_recursive>
 800b4ba:	e7d9      	b.n	800b470 <_fflush_r+0xc>
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <_fflush_r+0x70>)
 800b4be:	429c      	cmp	r4, r3
 800b4c0:	d101      	bne.n	800b4c6 <_fflush_r+0x62>
 800b4c2:	68ac      	ldr	r4, [r5, #8]
 800b4c4:	e7df      	b.n	800b486 <_fflush_r+0x22>
 800b4c6:	4b04      	ldr	r3, [pc, #16]	; (800b4d8 <_fflush_r+0x74>)
 800b4c8:	429c      	cmp	r4, r3
 800b4ca:	bf08      	it	eq
 800b4cc:	68ec      	ldreq	r4, [r5, #12]
 800b4ce:	e7da      	b.n	800b486 <_fflush_r+0x22>
 800b4d0:	0800c630 	.word	0x0800c630
 800b4d4:	0800c650 	.word	0x0800c650
 800b4d8:	0800c610 	.word	0x0800c610

0800b4dc <_lseek_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d07      	ldr	r5, [pc, #28]	; (800b4fc <_lseek_r+0x20>)
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	4608      	mov	r0, r1
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	602a      	str	r2, [r5, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f7f5 fbac 	bl	8000c48 <_lseek>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_lseek_r+0x1e>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_lseek_r+0x1e>
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	20001c78 	.word	0x20001c78

0800b500 <__swhatbuf_r>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	460e      	mov	r6, r1
 800b504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b508:	2900      	cmp	r1, #0
 800b50a:	b096      	sub	sp, #88	; 0x58
 800b50c:	4614      	mov	r4, r2
 800b50e:	461d      	mov	r5, r3
 800b510:	da08      	bge.n	800b524 <__swhatbuf_r+0x24>
 800b512:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	602a      	str	r2, [r5, #0]
 800b51a:	061a      	lsls	r2, r3, #24
 800b51c:	d410      	bmi.n	800b540 <__swhatbuf_r+0x40>
 800b51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b522:	e00e      	b.n	800b542 <__swhatbuf_r+0x42>
 800b524:	466a      	mov	r2, sp
 800b526:	f000 fe73 	bl	800c210 <_fstat_r>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	dbf1      	blt.n	800b512 <__swhatbuf_r+0x12>
 800b52e:	9a01      	ldr	r2, [sp, #4]
 800b530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b538:	425a      	negs	r2, r3
 800b53a:	415a      	adcs	r2, r3
 800b53c:	602a      	str	r2, [r5, #0]
 800b53e:	e7ee      	b.n	800b51e <__swhatbuf_r+0x1e>
 800b540:	2340      	movs	r3, #64	; 0x40
 800b542:	2000      	movs	r0, #0
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	b016      	add	sp, #88	; 0x58
 800b548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b54c <__smakebuf_r>:
 800b54c:	898b      	ldrh	r3, [r1, #12]
 800b54e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b550:	079d      	lsls	r5, r3, #30
 800b552:	4606      	mov	r6, r0
 800b554:	460c      	mov	r4, r1
 800b556:	d507      	bpl.n	800b568 <__smakebuf_r+0x1c>
 800b558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	6123      	str	r3, [r4, #16]
 800b560:	2301      	movs	r3, #1
 800b562:	6163      	str	r3, [r4, #20]
 800b564:	b002      	add	sp, #8
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	ab01      	add	r3, sp, #4
 800b56a:	466a      	mov	r2, sp
 800b56c:	f7ff ffc8 	bl	800b500 <__swhatbuf_r>
 800b570:	9900      	ldr	r1, [sp, #0]
 800b572:	4605      	mov	r5, r0
 800b574:	4630      	mov	r0, r6
 800b576:	f7fe fc67 	bl	8009e48 <_malloc_r>
 800b57a:	b948      	cbnz	r0, 800b590 <__smakebuf_r+0x44>
 800b57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b580:	059a      	lsls	r2, r3, #22
 800b582:	d4ef      	bmi.n	800b564 <__smakebuf_r+0x18>
 800b584:	f023 0303 	bic.w	r3, r3, #3
 800b588:	f043 0302 	orr.w	r3, r3, #2
 800b58c:	81a3      	strh	r3, [r4, #12]
 800b58e:	e7e3      	b.n	800b558 <__smakebuf_r+0xc>
 800b590:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <__smakebuf_r+0x7c>)
 800b592:	62b3      	str	r3, [r6, #40]	; 0x28
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	6020      	str	r0, [r4, #0]
 800b598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	9b00      	ldr	r3, [sp, #0]
 800b5a0:	6163      	str	r3, [r4, #20]
 800b5a2:	9b01      	ldr	r3, [sp, #4]
 800b5a4:	6120      	str	r0, [r4, #16]
 800b5a6:	b15b      	cbz	r3, 800b5c0 <__smakebuf_r+0x74>
 800b5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f000 fe41 	bl	800c234 <_isatty_r>
 800b5b2:	b128      	cbz	r0, 800b5c0 <__smakebuf_r+0x74>
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	f023 0303 	bic.w	r3, r3, #3
 800b5ba:	f043 0301 	orr.w	r3, r3, #1
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	89a0      	ldrh	r0, [r4, #12]
 800b5c2:	4305      	orrs	r5, r0
 800b5c4:	81a5      	strh	r5, [r4, #12]
 800b5c6:	e7cd      	b.n	800b564 <__smakebuf_r+0x18>
 800b5c8:	0800a541 	.word	0x0800a541

0800b5cc <memcpy>:
 800b5cc:	440a      	add	r2, r1
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5d4:	d100      	bne.n	800b5d8 <memcpy+0xc>
 800b5d6:	4770      	bx	lr
 800b5d8:	b510      	push	{r4, lr}
 800b5da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5e2:	4291      	cmp	r1, r2
 800b5e4:	d1f9      	bne.n	800b5da <memcpy+0xe>
 800b5e6:	bd10      	pop	{r4, pc}

0800b5e8 <memmove>:
 800b5e8:	4288      	cmp	r0, r1
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	eb01 0402 	add.w	r4, r1, r2
 800b5f0:	d902      	bls.n	800b5f8 <memmove+0x10>
 800b5f2:	4284      	cmp	r4, r0
 800b5f4:	4623      	mov	r3, r4
 800b5f6:	d807      	bhi.n	800b608 <memmove+0x20>
 800b5f8:	1e43      	subs	r3, r0, #1
 800b5fa:	42a1      	cmp	r1, r4
 800b5fc:	d008      	beq.n	800b610 <memmove+0x28>
 800b5fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b602:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b606:	e7f8      	b.n	800b5fa <memmove+0x12>
 800b608:	4402      	add	r2, r0
 800b60a:	4601      	mov	r1, r0
 800b60c:	428a      	cmp	r2, r1
 800b60e:	d100      	bne.n	800b612 <memmove+0x2a>
 800b610:	bd10      	pop	{r4, pc}
 800b612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b61a:	e7f7      	b.n	800b60c <memmove+0x24>

0800b61c <_realloc_r>:
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	4680      	mov	r8, r0
 800b622:	4614      	mov	r4, r2
 800b624:	460e      	mov	r6, r1
 800b626:	b921      	cbnz	r1, 800b632 <_realloc_r+0x16>
 800b628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	4611      	mov	r1, r2
 800b62e:	f7fe bc0b 	b.w	8009e48 <_malloc_r>
 800b632:	b92a      	cbnz	r2, 800b640 <_realloc_r+0x24>
 800b634:	f7fe fb9c 	bl	8009d70 <_free_r>
 800b638:	4625      	mov	r5, r4
 800b63a:	4628      	mov	r0, r5
 800b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b640:	f000 fe08 	bl	800c254 <_malloc_usable_size_r>
 800b644:	4284      	cmp	r4, r0
 800b646:	4607      	mov	r7, r0
 800b648:	d802      	bhi.n	800b650 <_realloc_r+0x34>
 800b64a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b64e:	d812      	bhi.n	800b676 <_realloc_r+0x5a>
 800b650:	4621      	mov	r1, r4
 800b652:	4640      	mov	r0, r8
 800b654:	f7fe fbf8 	bl	8009e48 <_malloc_r>
 800b658:	4605      	mov	r5, r0
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d0ed      	beq.n	800b63a <_realloc_r+0x1e>
 800b65e:	42bc      	cmp	r4, r7
 800b660:	4622      	mov	r2, r4
 800b662:	4631      	mov	r1, r6
 800b664:	bf28      	it	cs
 800b666:	463a      	movcs	r2, r7
 800b668:	f7ff ffb0 	bl	800b5cc <memcpy>
 800b66c:	4631      	mov	r1, r6
 800b66e:	4640      	mov	r0, r8
 800b670:	f7fe fb7e 	bl	8009d70 <_free_r>
 800b674:	e7e1      	b.n	800b63a <_realloc_r+0x1e>
 800b676:	4635      	mov	r5, r6
 800b678:	e7df      	b.n	800b63a <_realloc_r+0x1e>

0800b67a <__ssputs_r>:
 800b67a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b67e:	688e      	ldr	r6, [r1, #8]
 800b680:	429e      	cmp	r6, r3
 800b682:	4682      	mov	sl, r0
 800b684:	460c      	mov	r4, r1
 800b686:	4690      	mov	r8, r2
 800b688:	461f      	mov	r7, r3
 800b68a:	d838      	bhi.n	800b6fe <__ssputs_r+0x84>
 800b68c:	898a      	ldrh	r2, [r1, #12]
 800b68e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b692:	d032      	beq.n	800b6fa <__ssputs_r+0x80>
 800b694:	6825      	ldr	r5, [r4, #0]
 800b696:	6909      	ldr	r1, [r1, #16]
 800b698:	eba5 0901 	sub.w	r9, r5, r1
 800b69c:	6965      	ldr	r5, [r4, #20]
 800b69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	444b      	add	r3, r9
 800b6aa:	106d      	asrs	r5, r5, #1
 800b6ac:	429d      	cmp	r5, r3
 800b6ae:	bf38      	it	cc
 800b6b0:	461d      	movcc	r5, r3
 800b6b2:	0553      	lsls	r3, r2, #21
 800b6b4:	d531      	bpl.n	800b71a <__ssputs_r+0xa0>
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7fe fbc6 	bl	8009e48 <_malloc_r>
 800b6bc:	4606      	mov	r6, r0
 800b6be:	b950      	cbnz	r0, 800b6d6 <__ssputs_r+0x5c>
 800b6c0:	230c      	movs	r3, #12
 800b6c2:	f8ca 3000 	str.w	r3, [sl]
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d6:	6921      	ldr	r1, [r4, #16]
 800b6d8:	464a      	mov	r2, r9
 800b6da:	f7ff ff77 	bl	800b5cc <memcpy>
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e8:	81a3      	strh	r3, [r4, #12]
 800b6ea:	6126      	str	r6, [r4, #16]
 800b6ec:	6165      	str	r5, [r4, #20]
 800b6ee:	444e      	add	r6, r9
 800b6f0:	eba5 0509 	sub.w	r5, r5, r9
 800b6f4:	6026      	str	r6, [r4, #0]
 800b6f6:	60a5      	str	r5, [r4, #8]
 800b6f8:	463e      	mov	r6, r7
 800b6fa:	42be      	cmp	r6, r7
 800b6fc:	d900      	bls.n	800b700 <__ssputs_r+0x86>
 800b6fe:	463e      	mov	r6, r7
 800b700:	6820      	ldr	r0, [r4, #0]
 800b702:	4632      	mov	r2, r6
 800b704:	4641      	mov	r1, r8
 800b706:	f7ff ff6f 	bl	800b5e8 <memmove>
 800b70a:	68a3      	ldr	r3, [r4, #8]
 800b70c:	1b9b      	subs	r3, r3, r6
 800b70e:	60a3      	str	r3, [r4, #8]
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	4433      	add	r3, r6
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	2000      	movs	r0, #0
 800b718:	e7db      	b.n	800b6d2 <__ssputs_r+0x58>
 800b71a:	462a      	mov	r2, r5
 800b71c:	f7ff ff7e 	bl	800b61c <_realloc_r>
 800b720:	4606      	mov	r6, r0
 800b722:	2800      	cmp	r0, #0
 800b724:	d1e1      	bne.n	800b6ea <__ssputs_r+0x70>
 800b726:	6921      	ldr	r1, [r4, #16]
 800b728:	4650      	mov	r0, sl
 800b72a:	f7fe fb21 	bl	8009d70 <_free_r>
 800b72e:	e7c7      	b.n	800b6c0 <__ssputs_r+0x46>

0800b730 <_svfiprintf_r>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	4698      	mov	r8, r3
 800b736:	898b      	ldrh	r3, [r1, #12]
 800b738:	061b      	lsls	r3, r3, #24
 800b73a:	b09d      	sub	sp, #116	; 0x74
 800b73c:	4607      	mov	r7, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	4614      	mov	r4, r2
 800b742:	d50e      	bpl.n	800b762 <_svfiprintf_r+0x32>
 800b744:	690b      	ldr	r3, [r1, #16]
 800b746:	b963      	cbnz	r3, 800b762 <_svfiprintf_r+0x32>
 800b748:	2140      	movs	r1, #64	; 0x40
 800b74a:	f7fe fb7d 	bl	8009e48 <_malloc_r>
 800b74e:	6028      	str	r0, [r5, #0]
 800b750:	6128      	str	r0, [r5, #16]
 800b752:	b920      	cbnz	r0, 800b75e <_svfiprintf_r+0x2e>
 800b754:	230c      	movs	r3, #12
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	f04f 30ff 	mov.w	r0, #4294967295
 800b75c:	e0d1      	b.n	800b902 <_svfiprintf_r+0x1d2>
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	616b      	str	r3, [r5, #20]
 800b762:	2300      	movs	r3, #0
 800b764:	9309      	str	r3, [sp, #36]	; 0x24
 800b766:	2320      	movs	r3, #32
 800b768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b76c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b770:	2330      	movs	r3, #48	; 0x30
 800b772:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b91c <_svfiprintf_r+0x1ec>
 800b776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b77a:	f04f 0901 	mov.w	r9, #1
 800b77e:	4623      	mov	r3, r4
 800b780:	469a      	mov	sl, r3
 800b782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b786:	b10a      	cbz	r2, 800b78c <_svfiprintf_r+0x5c>
 800b788:	2a25      	cmp	r2, #37	; 0x25
 800b78a:	d1f9      	bne.n	800b780 <_svfiprintf_r+0x50>
 800b78c:	ebba 0b04 	subs.w	fp, sl, r4
 800b790:	d00b      	beq.n	800b7aa <_svfiprintf_r+0x7a>
 800b792:	465b      	mov	r3, fp
 800b794:	4622      	mov	r2, r4
 800b796:	4629      	mov	r1, r5
 800b798:	4638      	mov	r0, r7
 800b79a:	f7ff ff6e 	bl	800b67a <__ssputs_r>
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f000 80aa 	beq.w	800b8f8 <_svfiprintf_r+0x1c8>
 800b7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a6:	445a      	add	r2, fp
 800b7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 80a2 	beq.w	800b8f8 <_svfiprintf_r+0x1c8>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7be:	f10a 0a01 	add.w	sl, sl, #1
 800b7c2:	9304      	str	r3, [sp, #16]
 800b7c4:	9307      	str	r3, [sp, #28]
 800b7c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b7cc:	4654      	mov	r4, sl
 800b7ce:	2205      	movs	r2, #5
 800b7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d4:	4851      	ldr	r0, [pc, #324]	; (800b91c <_svfiprintf_r+0x1ec>)
 800b7d6:	f7f4 fceb 	bl	80001b0 <memchr>
 800b7da:	9a04      	ldr	r2, [sp, #16]
 800b7dc:	b9d8      	cbnz	r0, 800b816 <_svfiprintf_r+0xe6>
 800b7de:	06d0      	lsls	r0, r2, #27
 800b7e0:	bf44      	itt	mi
 800b7e2:	2320      	movmi	r3, #32
 800b7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e8:	0711      	lsls	r1, r2, #28
 800b7ea:	bf44      	itt	mi
 800b7ec:	232b      	movmi	r3, #43	; 0x2b
 800b7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f8:	d015      	beq.n	800b826 <_svfiprintf_r+0xf6>
 800b7fa:	9a07      	ldr	r2, [sp, #28]
 800b7fc:	4654      	mov	r4, sl
 800b7fe:	2000      	movs	r0, #0
 800b800:	f04f 0c0a 	mov.w	ip, #10
 800b804:	4621      	mov	r1, r4
 800b806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80a:	3b30      	subs	r3, #48	; 0x30
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d94e      	bls.n	800b8ae <_svfiprintf_r+0x17e>
 800b810:	b1b0      	cbz	r0, 800b840 <_svfiprintf_r+0x110>
 800b812:	9207      	str	r2, [sp, #28]
 800b814:	e014      	b.n	800b840 <_svfiprintf_r+0x110>
 800b816:	eba0 0308 	sub.w	r3, r0, r8
 800b81a:	fa09 f303 	lsl.w	r3, r9, r3
 800b81e:	4313      	orrs	r3, r2
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	46a2      	mov	sl, r4
 800b824:	e7d2      	b.n	800b7cc <_svfiprintf_r+0x9c>
 800b826:	9b03      	ldr	r3, [sp, #12]
 800b828:	1d19      	adds	r1, r3, #4
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	9103      	str	r1, [sp, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bfbb      	ittet	lt
 800b832:	425b      	neglt	r3, r3
 800b834:	f042 0202 	orrlt.w	r2, r2, #2
 800b838:	9307      	strge	r3, [sp, #28]
 800b83a:	9307      	strlt	r3, [sp, #28]
 800b83c:	bfb8      	it	lt
 800b83e:	9204      	strlt	r2, [sp, #16]
 800b840:	7823      	ldrb	r3, [r4, #0]
 800b842:	2b2e      	cmp	r3, #46	; 0x2e
 800b844:	d10c      	bne.n	800b860 <_svfiprintf_r+0x130>
 800b846:	7863      	ldrb	r3, [r4, #1]
 800b848:	2b2a      	cmp	r3, #42	; 0x2a
 800b84a:	d135      	bne.n	800b8b8 <_svfiprintf_r+0x188>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	1d1a      	adds	r2, r3, #4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	9203      	str	r2, [sp, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfb8      	it	lt
 800b858:	f04f 33ff 	movlt.w	r3, #4294967295
 800b85c:	3402      	adds	r4, #2
 800b85e:	9305      	str	r3, [sp, #20]
 800b860:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b92c <_svfiprintf_r+0x1fc>
 800b864:	7821      	ldrb	r1, [r4, #0]
 800b866:	2203      	movs	r2, #3
 800b868:	4650      	mov	r0, sl
 800b86a:	f7f4 fca1 	bl	80001b0 <memchr>
 800b86e:	b140      	cbz	r0, 800b882 <_svfiprintf_r+0x152>
 800b870:	2340      	movs	r3, #64	; 0x40
 800b872:	eba0 000a 	sub.w	r0, r0, sl
 800b876:	fa03 f000 	lsl.w	r0, r3, r0
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	4303      	orrs	r3, r0
 800b87e:	3401      	adds	r4, #1
 800b880:	9304      	str	r3, [sp, #16]
 800b882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b886:	4826      	ldr	r0, [pc, #152]	; (800b920 <_svfiprintf_r+0x1f0>)
 800b888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b88c:	2206      	movs	r2, #6
 800b88e:	f7f4 fc8f 	bl	80001b0 <memchr>
 800b892:	2800      	cmp	r0, #0
 800b894:	d038      	beq.n	800b908 <_svfiprintf_r+0x1d8>
 800b896:	4b23      	ldr	r3, [pc, #140]	; (800b924 <_svfiprintf_r+0x1f4>)
 800b898:	bb1b      	cbnz	r3, 800b8e2 <_svfiprintf_r+0x1b2>
 800b89a:	9b03      	ldr	r3, [sp, #12]
 800b89c:	3307      	adds	r3, #7
 800b89e:	f023 0307 	bic.w	r3, r3, #7
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	9303      	str	r3, [sp, #12]
 800b8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a8:	4433      	add	r3, r6
 800b8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ac:	e767      	b.n	800b77e <_svfiprintf_r+0x4e>
 800b8ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	e7a5      	b.n	800b804 <_svfiprintf_r+0xd4>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	3401      	adds	r4, #1
 800b8bc:	9305      	str	r3, [sp, #20]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	f04f 0c0a 	mov.w	ip, #10
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ca:	3a30      	subs	r2, #48	; 0x30
 800b8cc:	2a09      	cmp	r2, #9
 800b8ce:	d903      	bls.n	800b8d8 <_svfiprintf_r+0x1a8>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0c5      	beq.n	800b860 <_svfiprintf_r+0x130>
 800b8d4:	9105      	str	r1, [sp, #20]
 800b8d6:	e7c3      	b.n	800b860 <_svfiprintf_r+0x130>
 800b8d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8dc:	4604      	mov	r4, r0
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7f0      	b.n	800b8c4 <_svfiprintf_r+0x194>
 800b8e2:	ab03      	add	r3, sp, #12
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <_svfiprintf_r+0x1f8>)
 800b8ea:	a904      	add	r1, sp, #16
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f3af 8000 	nop.w
 800b8f2:	1c42      	adds	r2, r0, #1
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	d1d6      	bne.n	800b8a6 <_svfiprintf_r+0x176>
 800b8f8:	89ab      	ldrh	r3, [r5, #12]
 800b8fa:	065b      	lsls	r3, r3, #25
 800b8fc:	f53f af2c 	bmi.w	800b758 <_svfiprintf_r+0x28>
 800b900:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b902:	b01d      	add	sp, #116	; 0x74
 800b904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <_svfiprintf_r+0x1f8>)
 800b910:	a904      	add	r1, sp, #16
 800b912:	4638      	mov	r0, r7
 800b914:	f7ff f9d8 	bl	800acc8 <_printf_i>
 800b918:	e7eb      	b.n	800b8f2 <_svfiprintf_r+0x1c2>
 800b91a:	bf00      	nop
 800b91c:	0800c670 	.word	0x0800c670
 800b920:	0800c67a 	.word	0x0800c67a
 800b924:	00000000 	.word	0x00000000
 800b928:	0800b67b 	.word	0x0800b67b
 800b92c:	0800c676 	.word	0x0800c676

0800b930 <_sungetc_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	1c4b      	adds	r3, r1, #1
 800b934:	4614      	mov	r4, r2
 800b936:	d103      	bne.n	800b940 <_sungetc_r+0x10>
 800b938:	f04f 35ff 	mov.w	r5, #4294967295
 800b93c:	4628      	mov	r0, r5
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	8993      	ldrh	r3, [r2, #12]
 800b942:	f023 0320 	bic.w	r3, r3, #32
 800b946:	8193      	strh	r3, [r2, #12]
 800b948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b94a:	6852      	ldr	r2, [r2, #4]
 800b94c:	b2cd      	uxtb	r5, r1
 800b94e:	b18b      	cbz	r3, 800b974 <_sungetc_r+0x44>
 800b950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b952:	4293      	cmp	r3, r2
 800b954:	dd08      	ble.n	800b968 <_sungetc_r+0x38>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	1e5a      	subs	r2, r3, #1
 800b95a:	6022      	str	r2, [r4, #0]
 800b95c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b960:	6863      	ldr	r3, [r4, #4]
 800b962:	3301      	adds	r3, #1
 800b964:	6063      	str	r3, [r4, #4]
 800b966:	e7e9      	b.n	800b93c <_sungetc_r+0xc>
 800b968:	4621      	mov	r1, r4
 800b96a:	f000 fc17 	bl	800c19c <__submore>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d0f1      	beq.n	800b956 <_sungetc_r+0x26>
 800b972:	e7e1      	b.n	800b938 <_sungetc_r+0x8>
 800b974:	6921      	ldr	r1, [r4, #16]
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	b151      	cbz	r1, 800b990 <_sungetc_r+0x60>
 800b97a:	4299      	cmp	r1, r3
 800b97c:	d208      	bcs.n	800b990 <_sungetc_r+0x60>
 800b97e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b982:	42a9      	cmp	r1, r5
 800b984:	d104      	bne.n	800b990 <_sungetc_r+0x60>
 800b986:	3b01      	subs	r3, #1
 800b988:	3201      	adds	r2, #1
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	6062      	str	r2, [r4, #4]
 800b98e:	e7d5      	b.n	800b93c <_sungetc_r+0xc>
 800b990:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b998:	6363      	str	r3, [r4, #52]	; 0x34
 800b99a:	2303      	movs	r3, #3
 800b99c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b99e:	4623      	mov	r3, r4
 800b9a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e7dc      	b.n	800b964 <_sungetc_r+0x34>

0800b9aa <__ssrefill_r>:
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9b0:	b169      	cbz	r1, 800b9ce <__ssrefill_r+0x24>
 800b9b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9b6:	4299      	cmp	r1, r3
 800b9b8:	d001      	beq.n	800b9be <__ssrefill_r+0x14>
 800b9ba:	f7fe f9d9 	bl	8009d70 <_free_r>
 800b9be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9c0:	6063      	str	r3, [r4, #4]
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b9c6:	b113      	cbz	r3, 800b9ce <__ssrefill_r+0x24>
 800b9c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9ca:	6023      	str	r3, [r4, #0]
 800b9cc:	bd10      	pop	{r4, pc}
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	6063      	str	r3, [r4, #4]
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e2:	e7f3      	b.n	800b9cc <__ssrefill_r+0x22>

0800b9e4 <__ssvfiscanf_r>:
 800b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b9f4:	49a6      	ldr	r1, [pc, #664]	; (800bc90 <__ssvfiscanf_r+0x2ac>)
 800b9f6:	91a0      	str	r1, [sp, #640]	; 0x280
 800b9f8:	f10d 0804 	add.w	r8, sp, #4
 800b9fc:	49a5      	ldr	r1, [pc, #660]	; (800bc94 <__ssvfiscanf_r+0x2b0>)
 800b9fe:	4fa6      	ldr	r7, [pc, #664]	; (800bc98 <__ssvfiscanf_r+0x2b4>)
 800ba00:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bc9c <__ssvfiscanf_r+0x2b8>
 800ba04:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ba08:	4606      	mov	r6, r0
 800ba0a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	7813      	ldrb	r3, [r2, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 815a 	beq.w	800bcca <__ssvfiscanf_r+0x2e6>
 800ba16:	5dd9      	ldrb	r1, [r3, r7]
 800ba18:	f011 0108 	ands.w	r1, r1, #8
 800ba1c:	f102 0501 	add.w	r5, r2, #1
 800ba20:	d019      	beq.n	800ba56 <__ssvfiscanf_r+0x72>
 800ba22:	6863      	ldr	r3, [r4, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dd0f      	ble.n	800ba48 <__ssvfiscanf_r+0x64>
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	781a      	ldrb	r2, [r3, #0]
 800ba2c:	5cba      	ldrb	r2, [r7, r2]
 800ba2e:	0712      	lsls	r2, r2, #28
 800ba30:	d401      	bmi.n	800ba36 <__ssvfiscanf_r+0x52>
 800ba32:	462a      	mov	r2, r5
 800ba34:	e7eb      	b.n	800ba0e <__ssvfiscanf_r+0x2a>
 800ba36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba38:	3201      	adds	r2, #1
 800ba3a:	9245      	str	r2, [sp, #276]	; 0x114
 800ba3c:	6862      	ldr	r2, [r4, #4]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	3a01      	subs	r2, #1
 800ba42:	6062      	str	r2, [r4, #4]
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	e7ec      	b.n	800ba22 <__ssvfiscanf_r+0x3e>
 800ba48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4798      	blx	r3
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d0e9      	beq.n	800ba28 <__ssvfiscanf_r+0x44>
 800ba54:	e7ed      	b.n	800ba32 <__ssvfiscanf_r+0x4e>
 800ba56:	2b25      	cmp	r3, #37	; 0x25
 800ba58:	d012      	beq.n	800ba80 <__ssvfiscanf_r+0x9c>
 800ba5a:	469a      	mov	sl, r3
 800ba5c:	6863      	ldr	r3, [r4, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f340 8091 	ble.w	800bb86 <__ssvfiscanf_r+0x1a2>
 800ba64:	6822      	ldr	r2, [r4, #0]
 800ba66:	7813      	ldrb	r3, [r2, #0]
 800ba68:	4553      	cmp	r3, sl
 800ba6a:	f040 812e 	bne.w	800bcca <__ssvfiscanf_r+0x2e6>
 800ba6e:	6863      	ldr	r3, [r4, #4]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	6063      	str	r3, [r4, #4]
 800ba74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ba76:	3201      	adds	r2, #1
 800ba78:	3301      	adds	r3, #1
 800ba7a:	6022      	str	r2, [r4, #0]
 800ba7c:	9345      	str	r3, [sp, #276]	; 0x114
 800ba7e:	e7d8      	b.n	800ba32 <__ssvfiscanf_r+0x4e>
 800ba80:	9141      	str	r1, [sp, #260]	; 0x104
 800ba82:	9143      	str	r1, [sp, #268]	; 0x10c
 800ba84:	7853      	ldrb	r3, [r2, #1]
 800ba86:	2b2a      	cmp	r3, #42	; 0x2a
 800ba88:	bf02      	ittt	eq
 800ba8a:	2310      	moveq	r3, #16
 800ba8c:	1c95      	addeq	r5, r2, #2
 800ba8e:	9341      	streq	r3, [sp, #260]	; 0x104
 800ba90:	220a      	movs	r2, #10
 800ba92:	46aa      	mov	sl, r5
 800ba94:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ba98:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d91d      	bls.n	800badc <__ssvfiscanf_r+0xf8>
 800baa0:	487e      	ldr	r0, [pc, #504]	; (800bc9c <__ssvfiscanf_r+0x2b8>)
 800baa2:	2203      	movs	r2, #3
 800baa4:	f7f4 fb84 	bl	80001b0 <memchr>
 800baa8:	b140      	cbz	r0, 800babc <__ssvfiscanf_r+0xd8>
 800baaa:	2301      	movs	r3, #1
 800baac:	eba0 0009 	sub.w	r0, r0, r9
 800bab0:	fa03 f000 	lsl.w	r0, r3, r0
 800bab4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bab6:	4318      	orrs	r0, r3
 800bab8:	9041      	str	r0, [sp, #260]	; 0x104
 800baba:	4655      	mov	r5, sl
 800babc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bac0:	2b78      	cmp	r3, #120	; 0x78
 800bac2:	d806      	bhi.n	800bad2 <__ssvfiscanf_r+0xee>
 800bac4:	2b57      	cmp	r3, #87	; 0x57
 800bac6:	d810      	bhi.n	800baea <__ssvfiscanf_r+0x106>
 800bac8:	2b25      	cmp	r3, #37	; 0x25
 800baca:	d0c6      	beq.n	800ba5a <__ssvfiscanf_r+0x76>
 800bacc:	d856      	bhi.n	800bb7c <__ssvfiscanf_r+0x198>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d064      	beq.n	800bb9c <__ssvfiscanf_r+0x1b8>
 800bad2:	2303      	movs	r3, #3
 800bad4:	9347      	str	r3, [sp, #284]	; 0x11c
 800bad6:	230a      	movs	r3, #10
 800bad8:	9342      	str	r3, [sp, #264]	; 0x108
 800bada:	e071      	b.n	800bbc0 <__ssvfiscanf_r+0x1dc>
 800badc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bade:	fb02 1103 	mla	r1, r2, r3, r1
 800bae2:	3930      	subs	r1, #48	; 0x30
 800bae4:	9143      	str	r1, [sp, #268]	; 0x10c
 800bae6:	4655      	mov	r5, sl
 800bae8:	e7d3      	b.n	800ba92 <__ssvfiscanf_r+0xae>
 800baea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800baee:	2a20      	cmp	r2, #32
 800baf0:	d8ef      	bhi.n	800bad2 <__ssvfiscanf_r+0xee>
 800baf2:	a101      	add	r1, pc, #4	; (adr r1, 800baf8 <__ssvfiscanf_r+0x114>)
 800baf4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800baf8:	0800bbab 	.word	0x0800bbab
 800bafc:	0800bad3 	.word	0x0800bad3
 800bb00:	0800bad3 	.word	0x0800bad3
 800bb04:	0800bc09 	.word	0x0800bc09
 800bb08:	0800bad3 	.word	0x0800bad3
 800bb0c:	0800bad3 	.word	0x0800bad3
 800bb10:	0800bad3 	.word	0x0800bad3
 800bb14:	0800bad3 	.word	0x0800bad3
 800bb18:	0800bad3 	.word	0x0800bad3
 800bb1c:	0800bad3 	.word	0x0800bad3
 800bb20:	0800bad3 	.word	0x0800bad3
 800bb24:	0800bc1f 	.word	0x0800bc1f
 800bb28:	0800bbf5 	.word	0x0800bbf5
 800bb2c:	0800bb83 	.word	0x0800bb83
 800bb30:	0800bb83 	.word	0x0800bb83
 800bb34:	0800bb83 	.word	0x0800bb83
 800bb38:	0800bad3 	.word	0x0800bad3
 800bb3c:	0800bbf9 	.word	0x0800bbf9
 800bb40:	0800bad3 	.word	0x0800bad3
 800bb44:	0800bad3 	.word	0x0800bad3
 800bb48:	0800bad3 	.word	0x0800bad3
 800bb4c:	0800bad3 	.word	0x0800bad3
 800bb50:	0800bc2f 	.word	0x0800bc2f
 800bb54:	0800bc01 	.word	0x0800bc01
 800bb58:	0800bba3 	.word	0x0800bba3
 800bb5c:	0800bad3 	.word	0x0800bad3
 800bb60:	0800bad3 	.word	0x0800bad3
 800bb64:	0800bc2b 	.word	0x0800bc2b
 800bb68:	0800bad3 	.word	0x0800bad3
 800bb6c:	0800bbf5 	.word	0x0800bbf5
 800bb70:	0800bad3 	.word	0x0800bad3
 800bb74:	0800bad3 	.word	0x0800bad3
 800bb78:	0800bbab 	.word	0x0800bbab
 800bb7c:	3b45      	subs	r3, #69	; 0x45
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d8a7      	bhi.n	800bad2 <__ssvfiscanf_r+0xee>
 800bb82:	2305      	movs	r3, #5
 800bb84:	e01b      	b.n	800bbbe <__ssvfiscanf_r+0x1da>
 800bb86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	4798      	blx	r3
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f af68 	beq.w	800ba64 <__ssvfiscanf_r+0x80>
 800bb94:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f040 808d 	bne.w	800bcb6 <__ssvfiscanf_r+0x2d2>
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bba0:	e08f      	b.n	800bcc2 <__ssvfiscanf_r+0x2de>
 800bba2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bba4:	f042 0220 	orr.w	r2, r2, #32
 800bba8:	9241      	str	r2, [sp, #260]	; 0x104
 800bbaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bbac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbb0:	9241      	str	r2, [sp, #260]	; 0x104
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	2b6f      	cmp	r3, #111	; 0x6f
 800bbb6:	9242      	str	r2, [sp, #264]	; 0x108
 800bbb8:	bf34      	ite	cc
 800bbba:	2303      	movcc	r3, #3
 800bbbc:	2304      	movcs	r3, #4
 800bbbe:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	dd42      	ble.n	800bc4c <__ssvfiscanf_r+0x268>
 800bbc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbc8:	0659      	lsls	r1, r3, #25
 800bbca:	d404      	bmi.n	800bbd6 <__ssvfiscanf_r+0x1f2>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	781a      	ldrb	r2, [r3, #0]
 800bbd0:	5cba      	ldrb	r2, [r7, r2]
 800bbd2:	0712      	lsls	r2, r2, #28
 800bbd4:	d441      	bmi.n	800bc5a <__ssvfiscanf_r+0x276>
 800bbd6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	dc50      	bgt.n	800bc7e <__ssvfiscanf_r+0x29a>
 800bbdc:	466b      	mov	r3, sp
 800bbde:	4622      	mov	r2, r4
 800bbe0:	a941      	add	r1, sp, #260	; 0x104
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f000 f876 	bl	800bcd4 <_scanf_chars>
 800bbe8:	2801      	cmp	r0, #1
 800bbea:	d06e      	beq.n	800bcca <__ssvfiscanf_r+0x2e6>
 800bbec:	2802      	cmp	r0, #2
 800bbee:	f47f af20 	bne.w	800ba32 <__ssvfiscanf_r+0x4e>
 800bbf2:	e7cf      	b.n	800bb94 <__ssvfiscanf_r+0x1b0>
 800bbf4:	220a      	movs	r2, #10
 800bbf6:	e7dd      	b.n	800bbb4 <__ssvfiscanf_r+0x1d0>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9342      	str	r3, [sp, #264]	; 0x108
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e7de      	b.n	800bbbe <__ssvfiscanf_r+0x1da>
 800bc00:	2308      	movs	r3, #8
 800bc02:	9342      	str	r3, [sp, #264]	; 0x108
 800bc04:	2304      	movs	r3, #4
 800bc06:	e7da      	b.n	800bbbe <__ssvfiscanf_r+0x1da>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	f000 f9c6 	bl	800bf9c <__sccl>
 800bc10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc16:	9341      	str	r3, [sp, #260]	; 0x104
 800bc18:	4605      	mov	r5, r0
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e7cf      	b.n	800bbbe <__ssvfiscanf_r+0x1da>
 800bc1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc24:	9341      	str	r3, [sp, #260]	; 0x104
 800bc26:	2300      	movs	r3, #0
 800bc28:	e7c9      	b.n	800bbbe <__ssvfiscanf_r+0x1da>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e7c7      	b.n	800bbbe <__ssvfiscanf_r+0x1da>
 800bc2e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bc30:	06c3      	lsls	r3, r0, #27
 800bc32:	f53f aefe 	bmi.w	800ba32 <__ssvfiscanf_r+0x4e>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc3a:	1d19      	adds	r1, r3, #4
 800bc3c:	9100      	str	r1, [sp, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f010 0f01 	tst.w	r0, #1
 800bc44:	bf14      	ite	ne
 800bc46:	801a      	strhne	r2, [r3, #0]
 800bc48:	601a      	streq	r2, [r3, #0]
 800bc4a:	e6f2      	b.n	800ba32 <__ssvfiscanf_r+0x4e>
 800bc4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4630      	mov	r0, r6
 800bc52:	4798      	blx	r3
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d0b6      	beq.n	800bbc6 <__ssvfiscanf_r+0x1e2>
 800bc58:	e79c      	b.n	800bb94 <__ssvfiscanf_r+0x1b0>
 800bc5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc5c:	3201      	adds	r2, #1
 800bc5e:	9245      	str	r2, [sp, #276]	; 0x114
 800bc60:	6862      	ldr	r2, [r4, #4]
 800bc62:	3a01      	subs	r2, #1
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	6062      	str	r2, [r4, #4]
 800bc68:	dd02      	ble.n	800bc70 <__ssvfiscanf_r+0x28c>
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	e7ad      	b.n	800bbcc <__ssvfiscanf_r+0x1e8>
 800bc70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc72:	4621      	mov	r1, r4
 800bc74:	4630      	mov	r0, r6
 800bc76:	4798      	blx	r3
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d0a7      	beq.n	800bbcc <__ssvfiscanf_r+0x1e8>
 800bc7c:	e78a      	b.n	800bb94 <__ssvfiscanf_r+0x1b0>
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	dc0e      	bgt.n	800bca0 <__ssvfiscanf_r+0x2bc>
 800bc82:	466b      	mov	r3, sp
 800bc84:	4622      	mov	r2, r4
 800bc86:	a941      	add	r1, sp, #260	; 0x104
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f000 f87d 	bl	800bd88 <_scanf_i>
 800bc8e:	e7ab      	b.n	800bbe8 <__ssvfiscanf_r+0x204>
 800bc90:	0800b931 	.word	0x0800b931
 800bc94:	0800b9ab 	.word	0x0800b9ab
 800bc98:	0800c6a4 	.word	0x0800c6a4
 800bc9c:	0800c676 	.word	0x0800c676
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <__ssvfiscanf_r+0x2ec>)
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f43f aec5 	beq.w	800ba32 <__ssvfiscanf_r+0x4e>
 800bca8:	466b      	mov	r3, sp
 800bcaa:	4622      	mov	r2, r4
 800bcac:	a941      	add	r1, sp, #260	; 0x104
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f3af 8000 	nop.w
 800bcb4:	e798      	b.n	800bbe8 <__ssvfiscanf_r+0x204>
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bcbc:	bf18      	it	ne
 800bcbe:	f04f 30ff 	movne.w	r0, #4294967295
 800bcc2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bccc:	e7f9      	b.n	800bcc2 <__ssvfiscanf_r+0x2de>
 800bcce:	bf00      	nop
 800bcd0:	00000000 	.word	0x00000000

0800bcd4 <_scanf_chars>:
 800bcd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd8:	4615      	mov	r5, r2
 800bcda:	688a      	ldr	r2, [r1, #8]
 800bcdc:	4680      	mov	r8, r0
 800bcde:	460c      	mov	r4, r1
 800bce0:	b932      	cbnz	r2, 800bcf0 <_scanf_chars+0x1c>
 800bce2:	698a      	ldr	r2, [r1, #24]
 800bce4:	2a00      	cmp	r2, #0
 800bce6:	bf0c      	ite	eq
 800bce8:	2201      	moveq	r2, #1
 800bcea:	f04f 32ff 	movne.w	r2, #4294967295
 800bcee:	608a      	str	r2, [r1, #8]
 800bcf0:	6822      	ldr	r2, [r4, #0]
 800bcf2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800bd84 <_scanf_chars+0xb0>
 800bcf6:	06d1      	lsls	r1, r2, #27
 800bcf8:	bf5f      	itttt	pl
 800bcfa:	681a      	ldrpl	r2, [r3, #0]
 800bcfc:	1d11      	addpl	r1, r2, #4
 800bcfe:	6019      	strpl	r1, [r3, #0]
 800bd00:	6816      	ldrpl	r6, [r2, #0]
 800bd02:	2700      	movs	r7, #0
 800bd04:	69a0      	ldr	r0, [r4, #24]
 800bd06:	b188      	cbz	r0, 800bd2c <_scanf_chars+0x58>
 800bd08:	2801      	cmp	r0, #1
 800bd0a:	d107      	bne.n	800bd1c <_scanf_chars+0x48>
 800bd0c:	682a      	ldr	r2, [r5, #0]
 800bd0e:	7811      	ldrb	r1, [r2, #0]
 800bd10:	6962      	ldr	r2, [r4, #20]
 800bd12:	5c52      	ldrb	r2, [r2, r1]
 800bd14:	b952      	cbnz	r2, 800bd2c <_scanf_chars+0x58>
 800bd16:	2f00      	cmp	r7, #0
 800bd18:	d031      	beq.n	800bd7e <_scanf_chars+0xaa>
 800bd1a:	e022      	b.n	800bd62 <_scanf_chars+0x8e>
 800bd1c:	2802      	cmp	r0, #2
 800bd1e:	d120      	bne.n	800bd62 <_scanf_chars+0x8e>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bd28:	071b      	lsls	r3, r3, #28
 800bd2a:	d41a      	bmi.n	800bd62 <_scanf_chars+0x8e>
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	06da      	lsls	r2, r3, #27
 800bd30:	bf5e      	ittt	pl
 800bd32:	682b      	ldrpl	r3, [r5, #0]
 800bd34:	781b      	ldrbpl	r3, [r3, #0]
 800bd36:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd3a:	682a      	ldr	r2, [r5, #0]
 800bd3c:	686b      	ldr	r3, [r5, #4]
 800bd3e:	3201      	adds	r2, #1
 800bd40:	602a      	str	r2, [r5, #0]
 800bd42:	68a2      	ldr	r2, [r4, #8]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	3a01      	subs	r2, #1
 800bd48:	606b      	str	r3, [r5, #4]
 800bd4a:	3701      	adds	r7, #1
 800bd4c:	60a2      	str	r2, [r4, #8]
 800bd4e:	b142      	cbz	r2, 800bd62 <_scanf_chars+0x8e>
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dcd7      	bgt.n	800bd04 <_scanf_chars+0x30>
 800bd54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4798      	blx	r3
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d0d0      	beq.n	800bd04 <_scanf_chars+0x30>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	f013 0310 	ands.w	r3, r3, #16
 800bd68:	d105      	bne.n	800bd76 <_scanf_chars+0xa2>
 800bd6a:	68e2      	ldr	r2, [r4, #12]
 800bd6c:	3201      	adds	r2, #1
 800bd6e:	60e2      	str	r2, [r4, #12]
 800bd70:	69a2      	ldr	r2, [r4, #24]
 800bd72:	b102      	cbz	r2, 800bd76 <_scanf_chars+0xa2>
 800bd74:	7033      	strb	r3, [r6, #0]
 800bd76:	6923      	ldr	r3, [r4, #16]
 800bd78:	443b      	add	r3, r7
 800bd7a:	6123      	str	r3, [r4, #16]
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd82:	bf00      	nop
 800bd84:	0800c6a4 	.word	0x0800c6a4

0800bd88 <_scanf_i>:
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	4698      	mov	r8, r3
 800bd8e:	4b76      	ldr	r3, [pc, #472]	; (800bf68 <_scanf_i+0x1e0>)
 800bd90:	460c      	mov	r4, r1
 800bd92:	4682      	mov	sl, r0
 800bd94:	4616      	mov	r6, r2
 800bd96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd9a:	b087      	sub	sp, #28
 800bd9c:	ab03      	add	r3, sp, #12
 800bd9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bda2:	4b72      	ldr	r3, [pc, #456]	; (800bf6c <_scanf_i+0x1e4>)
 800bda4:	69a1      	ldr	r1, [r4, #24]
 800bda6:	4a72      	ldr	r2, [pc, #456]	; (800bf70 <_scanf_i+0x1e8>)
 800bda8:	2903      	cmp	r1, #3
 800bdaa:	bf18      	it	ne
 800bdac:	461a      	movne	r2, r3
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	9201      	str	r2, [sp, #4]
 800bdb2:	1e5a      	subs	r2, r3, #1
 800bdb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdb8:	bf88      	it	hi
 800bdba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bdbe:	4627      	mov	r7, r4
 800bdc0:	bf82      	ittt	hi
 800bdc2:	eb03 0905 	addhi.w	r9, r3, r5
 800bdc6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bdca:	60a3      	strhi	r3, [r4, #8]
 800bdcc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bdd0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bdd4:	bf98      	it	ls
 800bdd6:	f04f 0900 	movls.w	r9, #0
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	463d      	mov	r5, r7
 800bdde:	f04f 0b00 	mov.w	fp, #0
 800bde2:	6831      	ldr	r1, [r6, #0]
 800bde4:	ab03      	add	r3, sp, #12
 800bde6:	7809      	ldrb	r1, [r1, #0]
 800bde8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bdec:	2202      	movs	r2, #2
 800bdee:	f7f4 f9df 	bl	80001b0 <memchr>
 800bdf2:	b328      	cbz	r0, 800be40 <_scanf_i+0xb8>
 800bdf4:	f1bb 0f01 	cmp.w	fp, #1
 800bdf8:	d159      	bne.n	800beae <_scanf_i+0x126>
 800bdfa:	6862      	ldr	r2, [r4, #4]
 800bdfc:	b92a      	cbnz	r2, 800be0a <_scanf_i+0x82>
 800bdfe:	6822      	ldr	r2, [r4, #0]
 800be00:	2308      	movs	r3, #8
 800be02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be06:	6063      	str	r3, [r4, #4]
 800be08:	6022      	str	r2, [r4, #0]
 800be0a:	6822      	ldr	r2, [r4, #0]
 800be0c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800be10:	6022      	str	r2, [r4, #0]
 800be12:	68a2      	ldr	r2, [r4, #8]
 800be14:	1e51      	subs	r1, r2, #1
 800be16:	60a1      	str	r1, [r4, #8]
 800be18:	b192      	cbz	r2, 800be40 <_scanf_i+0xb8>
 800be1a:	6832      	ldr	r2, [r6, #0]
 800be1c:	1c51      	adds	r1, r2, #1
 800be1e:	6031      	str	r1, [r6, #0]
 800be20:	7812      	ldrb	r2, [r2, #0]
 800be22:	f805 2b01 	strb.w	r2, [r5], #1
 800be26:	6872      	ldr	r2, [r6, #4]
 800be28:	3a01      	subs	r2, #1
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	6072      	str	r2, [r6, #4]
 800be2e:	dc07      	bgt.n	800be40 <_scanf_i+0xb8>
 800be30:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800be34:	4631      	mov	r1, r6
 800be36:	4650      	mov	r0, sl
 800be38:	4790      	blx	r2
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f040 8085 	bne.w	800bf4a <_scanf_i+0x1c2>
 800be40:	f10b 0b01 	add.w	fp, fp, #1
 800be44:	f1bb 0f03 	cmp.w	fp, #3
 800be48:	d1cb      	bne.n	800bde2 <_scanf_i+0x5a>
 800be4a:	6863      	ldr	r3, [r4, #4]
 800be4c:	b90b      	cbnz	r3, 800be52 <_scanf_i+0xca>
 800be4e:	230a      	movs	r3, #10
 800be50:	6063      	str	r3, [r4, #4]
 800be52:	6863      	ldr	r3, [r4, #4]
 800be54:	4947      	ldr	r1, [pc, #284]	; (800bf74 <_scanf_i+0x1ec>)
 800be56:	6960      	ldr	r0, [r4, #20]
 800be58:	1ac9      	subs	r1, r1, r3
 800be5a:	f000 f89f 	bl	800bf9c <__sccl>
 800be5e:	f04f 0b00 	mov.w	fp, #0
 800be62:	68a3      	ldr	r3, [r4, #8]
 800be64:	6822      	ldr	r2, [r4, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d03d      	beq.n	800bee6 <_scanf_i+0x15e>
 800be6a:	6831      	ldr	r1, [r6, #0]
 800be6c:	6960      	ldr	r0, [r4, #20]
 800be6e:	f891 c000 	ldrb.w	ip, [r1]
 800be72:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be76:	2800      	cmp	r0, #0
 800be78:	d035      	beq.n	800bee6 <_scanf_i+0x15e>
 800be7a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be7e:	d124      	bne.n	800beca <_scanf_i+0x142>
 800be80:	0510      	lsls	r0, r2, #20
 800be82:	d522      	bpl.n	800beca <_scanf_i+0x142>
 800be84:	f10b 0b01 	add.w	fp, fp, #1
 800be88:	f1b9 0f00 	cmp.w	r9, #0
 800be8c:	d003      	beq.n	800be96 <_scanf_i+0x10e>
 800be8e:	3301      	adds	r3, #1
 800be90:	f109 39ff 	add.w	r9, r9, #4294967295
 800be94:	60a3      	str	r3, [r4, #8]
 800be96:	6873      	ldr	r3, [r6, #4]
 800be98:	3b01      	subs	r3, #1
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	6073      	str	r3, [r6, #4]
 800be9e:	dd1b      	ble.n	800bed8 <_scanf_i+0x150>
 800bea0:	6833      	ldr	r3, [r6, #0]
 800bea2:	3301      	adds	r3, #1
 800bea4:	6033      	str	r3, [r6, #0]
 800bea6:	68a3      	ldr	r3, [r4, #8]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	60a3      	str	r3, [r4, #8]
 800beac:	e7d9      	b.n	800be62 <_scanf_i+0xda>
 800beae:	f1bb 0f02 	cmp.w	fp, #2
 800beb2:	d1ae      	bne.n	800be12 <_scanf_i+0x8a>
 800beb4:	6822      	ldr	r2, [r4, #0]
 800beb6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800beba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bebe:	d1bf      	bne.n	800be40 <_scanf_i+0xb8>
 800bec0:	2310      	movs	r3, #16
 800bec2:	6063      	str	r3, [r4, #4]
 800bec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bec8:	e7a2      	b.n	800be10 <_scanf_i+0x88>
 800beca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bece:	6022      	str	r2, [r4, #0]
 800bed0:	780b      	ldrb	r3, [r1, #0]
 800bed2:	f805 3b01 	strb.w	r3, [r5], #1
 800bed6:	e7de      	b.n	800be96 <_scanf_i+0x10e>
 800bed8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bedc:	4631      	mov	r1, r6
 800bede:	4650      	mov	r0, sl
 800bee0:	4798      	blx	r3
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d0df      	beq.n	800bea6 <_scanf_i+0x11e>
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	05db      	lsls	r3, r3, #23
 800beea:	d50d      	bpl.n	800bf08 <_scanf_i+0x180>
 800beec:	42bd      	cmp	r5, r7
 800beee:	d909      	bls.n	800bf04 <_scanf_i+0x17c>
 800bef0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bef8:	4632      	mov	r2, r6
 800befa:	4650      	mov	r0, sl
 800befc:	4798      	blx	r3
 800befe:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf02:	464d      	mov	r5, r9
 800bf04:	42bd      	cmp	r5, r7
 800bf06:	d02d      	beq.n	800bf64 <_scanf_i+0x1dc>
 800bf08:	6822      	ldr	r2, [r4, #0]
 800bf0a:	f012 0210 	ands.w	r2, r2, #16
 800bf0e:	d113      	bne.n	800bf38 <_scanf_i+0x1b0>
 800bf10:	702a      	strb	r2, [r5, #0]
 800bf12:	6863      	ldr	r3, [r4, #4]
 800bf14:	9e01      	ldr	r6, [sp, #4]
 800bf16:	4639      	mov	r1, r7
 800bf18:	4650      	mov	r0, sl
 800bf1a:	47b0      	blx	r6
 800bf1c:	6821      	ldr	r1, [r4, #0]
 800bf1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf22:	f011 0f20 	tst.w	r1, #32
 800bf26:	d013      	beq.n	800bf50 <_scanf_i+0x1c8>
 800bf28:	1d1a      	adds	r2, r3, #4
 800bf2a:	f8c8 2000 	str.w	r2, [r8]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6018      	str	r0, [r3, #0]
 800bf32:	68e3      	ldr	r3, [r4, #12]
 800bf34:	3301      	adds	r3, #1
 800bf36:	60e3      	str	r3, [r4, #12]
 800bf38:	1bed      	subs	r5, r5, r7
 800bf3a:	44ab      	add	fp, r5
 800bf3c:	6925      	ldr	r5, [r4, #16]
 800bf3e:	445d      	add	r5, fp
 800bf40:	6125      	str	r5, [r4, #16]
 800bf42:	2000      	movs	r0, #0
 800bf44:	b007      	add	sp, #28
 800bf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4a:	f04f 0b00 	mov.w	fp, #0
 800bf4e:	e7ca      	b.n	800bee6 <_scanf_i+0x15e>
 800bf50:	1d1a      	adds	r2, r3, #4
 800bf52:	f8c8 2000 	str.w	r2, [r8]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f011 0f01 	tst.w	r1, #1
 800bf5c:	bf14      	ite	ne
 800bf5e:	8018      	strhne	r0, [r3, #0]
 800bf60:	6018      	streq	r0, [r3, #0]
 800bf62:	e7e6      	b.n	800bf32 <_scanf_i+0x1aa>
 800bf64:	2001      	movs	r0, #1
 800bf66:	e7ed      	b.n	800bf44 <_scanf_i+0x1bc>
 800bf68:	0800c37c 	.word	0x0800c37c
 800bf6c:	0800b155 	.word	0x0800b155
 800bf70:	0800c199 	.word	0x0800c199
 800bf74:	0800c7bd 	.word	0x0800c7bd

0800bf78 <_read_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d07      	ldr	r5, [pc, #28]	; (800bf98 <_read_r+0x20>)
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	4608      	mov	r0, r1
 800bf80:	4611      	mov	r1, r2
 800bf82:	2200      	movs	r2, #0
 800bf84:	602a      	str	r2, [r5, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	f7f4 fe1a 	bl	8000bc0 <_read>
 800bf8c:	1c43      	adds	r3, r0, #1
 800bf8e:	d102      	bne.n	800bf96 <_read_r+0x1e>
 800bf90:	682b      	ldr	r3, [r5, #0]
 800bf92:	b103      	cbz	r3, 800bf96 <_read_r+0x1e>
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	bd38      	pop	{r3, r4, r5, pc}
 800bf98:	20001c78 	.word	0x20001c78

0800bf9c <__sccl>:
 800bf9c:	b570      	push	{r4, r5, r6, lr}
 800bf9e:	780b      	ldrb	r3, [r1, #0]
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	2b5e      	cmp	r3, #94	; 0x5e
 800bfa4:	bf0b      	itete	eq
 800bfa6:	784b      	ldrbeq	r3, [r1, #1]
 800bfa8:	1c48      	addne	r0, r1, #1
 800bfaa:	1c88      	addeq	r0, r1, #2
 800bfac:	2200      	movne	r2, #0
 800bfae:	bf08      	it	eq
 800bfb0:	2201      	moveq	r2, #1
 800bfb2:	1e61      	subs	r1, r4, #1
 800bfb4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bfb8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bfbc:	42a9      	cmp	r1, r5
 800bfbe:	d1fb      	bne.n	800bfb8 <__sccl+0x1c>
 800bfc0:	b90b      	cbnz	r3, 800bfc6 <__sccl+0x2a>
 800bfc2:	3801      	subs	r0, #1
 800bfc4:	bd70      	pop	{r4, r5, r6, pc}
 800bfc6:	f082 0201 	eor.w	r2, r2, #1
 800bfca:	54e2      	strb	r2, [r4, r3]
 800bfcc:	4605      	mov	r5, r0
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bfd4:	292d      	cmp	r1, #45	; 0x2d
 800bfd6:	d006      	beq.n	800bfe6 <__sccl+0x4a>
 800bfd8:	295d      	cmp	r1, #93	; 0x5d
 800bfda:	d0f3      	beq.n	800bfc4 <__sccl+0x28>
 800bfdc:	b909      	cbnz	r1, 800bfe2 <__sccl+0x46>
 800bfde:	4628      	mov	r0, r5
 800bfe0:	e7f0      	b.n	800bfc4 <__sccl+0x28>
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	e7f1      	b.n	800bfca <__sccl+0x2e>
 800bfe6:	786e      	ldrb	r6, [r5, #1]
 800bfe8:	2e5d      	cmp	r6, #93	; 0x5d
 800bfea:	d0fa      	beq.n	800bfe2 <__sccl+0x46>
 800bfec:	42b3      	cmp	r3, r6
 800bfee:	dcf8      	bgt.n	800bfe2 <__sccl+0x46>
 800bff0:	3502      	adds	r5, #2
 800bff2:	4619      	mov	r1, r3
 800bff4:	3101      	adds	r1, #1
 800bff6:	428e      	cmp	r6, r1
 800bff8:	5462      	strb	r2, [r4, r1]
 800bffa:	dcfb      	bgt.n	800bff4 <__sccl+0x58>
 800bffc:	1af1      	subs	r1, r6, r3
 800bffe:	3901      	subs	r1, #1
 800c000:	1c58      	adds	r0, r3, #1
 800c002:	42b3      	cmp	r3, r6
 800c004:	bfa8      	it	ge
 800c006:	2100      	movge	r1, #0
 800c008:	1843      	adds	r3, r0, r1
 800c00a:	e7e0      	b.n	800bfce <__sccl+0x32>

0800c00c <_raise_r>:
 800c00c:	291f      	cmp	r1, #31
 800c00e:	b538      	push	{r3, r4, r5, lr}
 800c010:	4604      	mov	r4, r0
 800c012:	460d      	mov	r5, r1
 800c014:	d904      	bls.n	800c020 <_raise_r+0x14>
 800c016:	2316      	movs	r3, #22
 800c018:	6003      	str	r3, [r0, #0]
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c022:	b112      	cbz	r2, 800c02a <_raise_r+0x1e>
 800c024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c028:	b94b      	cbnz	r3, 800c03e <_raise_r+0x32>
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 f830 	bl	800c090 <_getpid_r>
 800c030:	462a      	mov	r2, r5
 800c032:	4601      	mov	r1, r0
 800c034:	4620      	mov	r0, r4
 800c036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c03a:	f000 b817 	b.w	800c06c <_kill_r>
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d00a      	beq.n	800c058 <_raise_r+0x4c>
 800c042:	1c59      	adds	r1, r3, #1
 800c044:	d103      	bne.n	800c04e <_raise_r+0x42>
 800c046:	2316      	movs	r3, #22
 800c048:	6003      	str	r3, [r0, #0]
 800c04a:	2001      	movs	r0, #1
 800c04c:	e7e7      	b.n	800c01e <_raise_r+0x12>
 800c04e:	2400      	movs	r4, #0
 800c050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c054:	4628      	mov	r0, r5
 800c056:	4798      	blx	r3
 800c058:	2000      	movs	r0, #0
 800c05a:	e7e0      	b.n	800c01e <_raise_r+0x12>

0800c05c <raise>:
 800c05c:	4b02      	ldr	r3, [pc, #8]	; (800c068 <raise+0xc>)
 800c05e:	4601      	mov	r1, r0
 800c060:	6818      	ldr	r0, [r3, #0]
 800c062:	f7ff bfd3 	b.w	800c00c <_raise_r>
 800c066:	bf00      	nop
 800c068:	2000014c 	.word	0x2000014c

0800c06c <_kill_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4d07      	ldr	r5, [pc, #28]	; (800c08c <_kill_r+0x20>)
 800c070:	2300      	movs	r3, #0
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	4611      	mov	r1, r2
 800c078:	602b      	str	r3, [r5, #0]
 800c07a:	f7f4 fd87 	bl	8000b8c <_kill>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d102      	bne.n	800c088 <_kill_r+0x1c>
 800c082:	682b      	ldr	r3, [r5, #0]
 800c084:	b103      	cbz	r3, 800c088 <_kill_r+0x1c>
 800c086:	6023      	str	r3, [r4, #0]
 800c088:	bd38      	pop	{r3, r4, r5, pc}
 800c08a:	bf00      	nop
 800c08c:	20001c78 	.word	0x20001c78

0800c090 <_getpid_r>:
 800c090:	f7f4 bd74 	b.w	8000b7c <_getpid>

0800c094 <_strtol_l.constprop.0>:
 800c094:	2b01      	cmp	r3, #1
 800c096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c09a:	d001      	beq.n	800c0a0 <_strtol_l.constprop.0+0xc>
 800c09c:	2b24      	cmp	r3, #36	; 0x24
 800c09e:	d906      	bls.n	800c0ae <_strtol_l.constprop.0+0x1a>
 800c0a0:	f7fd fd12 	bl	8009ac8 <__errno>
 800c0a4:	2316      	movs	r3, #22
 800c0a6:	6003      	str	r3, [r0, #0]
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c194 <_strtol_l.constprop.0+0x100>
 800c0b2:	460d      	mov	r5, r1
 800c0b4:	462e      	mov	r6, r5
 800c0b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c0be:	f017 0708 	ands.w	r7, r7, #8
 800c0c2:	d1f7      	bne.n	800c0b4 <_strtol_l.constprop.0+0x20>
 800c0c4:	2c2d      	cmp	r4, #45	; 0x2d
 800c0c6:	d132      	bne.n	800c12e <_strtol_l.constprop.0+0x9a>
 800c0c8:	782c      	ldrb	r4, [r5, #0]
 800c0ca:	2701      	movs	r7, #1
 800c0cc:	1cb5      	adds	r5, r6, #2
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d05b      	beq.n	800c18a <_strtol_l.constprop.0+0xf6>
 800c0d2:	2b10      	cmp	r3, #16
 800c0d4:	d109      	bne.n	800c0ea <_strtol_l.constprop.0+0x56>
 800c0d6:	2c30      	cmp	r4, #48	; 0x30
 800c0d8:	d107      	bne.n	800c0ea <_strtol_l.constprop.0+0x56>
 800c0da:	782c      	ldrb	r4, [r5, #0]
 800c0dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c0e0:	2c58      	cmp	r4, #88	; 0x58
 800c0e2:	d14d      	bne.n	800c180 <_strtol_l.constprop.0+0xec>
 800c0e4:	786c      	ldrb	r4, [r5, #1]
 800c0e6:	2310      	movs	r3, #16
 800c0e8:	3502      	adds	r5, #2
 800c0ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c0ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0f2:	f04f 0c00 	mov.w	ip, #0
 800c0f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c0fa:	4666      	mov	r6, ip
 800c0fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800c100:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c104:	f1be 0f09 	cmp.w	lr, #9
 800c108:	d816      	bhi.n	800c138 <_strtol_l.constprop.0+0xa4>
 800c10a:	4674      	mov	r4, lr
 800c10c:	42a3      	cmp	r3, r4
 800c10e:	dd24      	ble.n	800c15a <_strtol_l.constprop.0+0xc6>
 800c110:	f1bc 0f00 	cmp.w	ip, #0
 800c114:	db1e      	blt.n	800c154 <_strtol_l.constprop.0+0xc0>
 800c116:	45b1      	cmp	r9, r6
 800c118:	d31c      	bcc.n	800c154 <_strtol_l.constprop.0+0xc0>
 800c11a:	d101      	bne.n	800c120 <_strtol_l.constprop.0+0x8c>
 800c11c:	45a2      	cmp	sl, r4
 800c11e:	db19      	blt.n	800c154 <_strtol_l.constprop.0+0xc0>
 800c120:	fb06 4603 	mla	r6, r6, r3, r4
 800c124:	f04f 0c01 	mov.w	ip, #1
 800c128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c12c:	e7e8      	b.n	800c100 <_strtol_l.constprop.0+0x6c>
 800c12e:	2c2b      	cmp	r4, #43	; 0x2b
 800c130:	bf04      	itt	eq
 800c132:	782c      	ldrbeq	r4, [r5, #0]
 800c134:	1cb5      	addeq	r5, r6, #2
 800c136:	e7ca      	b.n	800c0ce <_strtol_l.constprop.0+0x3a>
 800c138:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c13c:	f1be 0f19 	cmp.w	lr, #25
 800c140:	d801      	bhi.n	800c146 <_strtol_l.constprop.0+0xb2>
 800c142:	3c37      	subs	r4, #55	; 0x37
 800c144:	e7e2      	b.n	800c10c <_strtol_l.constprop.0+0x78>
 800c146:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c14a:	f1be 0f19 	cmp.w	lr, #25
 800c14e:	d804      	bhi.n	800c15a <_strtol_l.constprop.0+0xc6>
 800c150:	3c57      	subs	r4, #87	; 0x57
 800c152:	e7db      	b.n	800c10c <_strtol_l.constprop.0+0x78>
 800c154:	f04f 3cff 	mov.w	ip, #4294967295
 800c158:	e7e6      	b.n	800c128 <_strtol_l.constprop.0+0x94>
 800c15a:	f1bc 0f00 	cmp.w	ip, #0
 800c15e:	da05      	bge.n	800c16c <_strtol_l.constprop.0+0xd8>
 800c160:	2322      	movs	r3, #34	; 0x22
 800c162:	6003      	str	r3, [r0, #0]
 800c164:	4646      	mov	r6, r8
 800c166:	b942      	cbnz	r2, 800c17a <_strtol_l.constprop.0+0xe6>
 800c168:	4630      	mov	r0, r6
 800c16a:	e79e      	b.n	800c0aa <_strtol_l.constprop.0+0x16>
 800c16c:	b107      	cbz	r7, 800c170 <_strtol_l.constprop.0+0xdc>
 800c16e:	4276      	negs	r6, r6
 800c170:	2a00      	cmp	r2, #0
 800c172:	d0f9      	beq.n	800c168 <_strtol_l.constprop.0+0xd4>
 800c174:	f1bc 0f00 	cmp.w	ip, #0
 800c178:	d000      	beq.n	800c17c <_strtol_l.constprop.0+0xe8>
 800c17a:	1e69      	subs	r1, r5, #1
 800c17c:	6011      	str	r1, [r2, #0]
 800c17e:	e7f3      	b.n	800c168 <_strtol_l.constprop.0+0xd4>
 800c180:	2430      	movs	r4, #48	; 0x30
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1b1      	bne.n	800c0ea <_strtol_l.constprop.0+0x56>
 800c186:	2308      	movs	r3, #8
 800c188:	e7af      	b.n	800c0ea <_strtol_l.constprop.0+0x56>
 800c18a:	2c30      	cmp	r4, #48	; 0x30
 800c18c:	d0a5      	beq.n	800c0da <_strtol_l.constprop.0+0x46>
 800c18e:	230a      	movs	r3, #10
 800c190:	e7ab      	b.n	800c0ea <_strtol_l.constprop.0+0x56>
 800c192:	bf00      	nop
 800c194:	0800c6a4 	.word	0x0800c6a4

0800c198 <_strtol_r>:
 800c198:	f7ff bf7c 	b.w	800c094 <_strtol_l.constprop.0>

0800c19c <__submore>:
 800c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1a8:	4299      	cmp	r1, r3
 800c1aa:	d11d      	bne.n	800c1e8 <__submore+0x4c>
 800c1ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c1b0:	f7fd fe4a 	bl	8009e48 <_malloc_r>
 800c1b4:	b918      	cbnz	r0, 800c1be <__submore+0x22>
 800c1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1c2:	63a3      	str	r3, [r4, #56]	; 0x38
 800c1c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c1c8:	6360      	str	r0, [r4, #52]	; 0x34
 800c1ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c1ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c1d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c1d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c1da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c1de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c1e2:	6020      	str	r0, [r4, #0]
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e7e8      	b.n	800c1ba <__submore+0x1e>
 800c1e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c1ea:	0077      	lsls	r7, r6, #1
 800c1ec:	463a      	mov	r2, r7
 800c1ee:	f7ff fa15 	bl	800b61c <_realloc_r>
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d0de      	beq.n	800c1b6 <__submore+0x1a>
 800c1f8:	eb00 0806 	add.w	r8, r0, r6
 800c1fc:	4601      	mov	r1, r0
 800c1fe:	4632      	mov	r2, r6
 800c200:	4640      	mov	r0, r8
 800c202:	f7ff f9e3 	bl	800b5cc <memcpy>
 800c206:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c20a:	f8c4 8000 	str.w	r8, [r4]
 800c20e:	e7e9      	b.n	800c1e4 <__submore+0x48>

0800c210 <_fstat_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4d07      	ldr	r5, [pc, #28]	; (800c230 <_fstat_r+0x20>)
 800c214:	2300      	movs	r3, #0
 800c216:	4604      	mov	r4, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	4611      	mov	r1, r2
 800c21c:	602b      	str	r3, [r5, #0]
 800c21e:	f7f4 fcf8 	bl	8000c12 <_fstat>
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	d102      	bne.n	800c22c <_fstat_r+0x1c>
 800c226:	682b      	ldr	r3, [r5, #0]
 800c228:	b103      	cbz	r3, 800c22c <_fstat_r+0x1c>
 800c22a:	6023      	str	r3, [r4, #0]
 800c22c:	bd38      	pop	{r3, r4, r5, pc}
 800c22e:	bf00      	nop
 800c230:	20001c78 	.word	0x20001c78

0800c234 <_isatty_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d06      	ldr	r5, [pc, #24]	; (800c250 <_isatty_r+0x1c>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f4 fcf7 	bl	8000c32 <_isatty>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_isatty_r+0x1a>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_isatty_r+0x1a>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	20001c78 	.word	0x20001c78

0800c254 <_malloc_usable_size_r>:
 800c254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c258:	1f18      	subs	r0, r3, #4
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	bfbc      	itt	lt
 800c25e:	580b      	ldrlt	r3, [r1, r0]
 800c260:	18c0      	addlt	r0, r0, r3
 800c262:	4770      	bx	lr

0800c264 <_gettimeofday>:
 800c264:	4b02      	ldr	r3, [pc, #8]	; (800c270 <_gettimeofday+0xc>)
 800c266:	2258      	movs	r2, #88	; 0x58
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	4770      	bx	lr
 800c270:	20001c78 	.word	0x20001c78

0800c274 <_init>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr

0800c280 <_fini>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr
