
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa40  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800ab80  0800ab80  0001ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ad64  0800ad64  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ad68  0800ad68  0001ad68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000008  0800ad6c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a8c  200001ac  0800af10  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001c38  0800af10  00021c38  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ae8f  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004095  00000000  00000000  0003b06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001be8  00000000  00000000  0003f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a10  00000000  00000000  00040ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00007009  00000000  00000000  000426f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001bc6d  00000000  00000000  00049701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e1e9f  00000000  00000000  0006536e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0014720d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007ac8  00000000  00000000  00147260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ac 	.word	0x200001ac
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ab68 	.word	0x0800ab68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b0 	.word	0x200001b0
 800017c:	0800ab68 	.word	0x0800ab68

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fbef 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f80f 	bl	800027c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800025e:	f000 f879 	bl	8000354 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000262:	f000 f8bd 	bl	80003e0 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000266:	f008 ff5d 	bl	8009124 <MX_USB_Device_Init>
  MX_TIM16_Init();
 800026a:	f000 f891 	bl	8000390 <MX_TIM16_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Relay_On();
 800026e:	f000 f975 	bl	800055c <Relay_On>
//	Play_Buzzer();
    Read_Rotary();
 8000272:	f000 f98f 	bl	8000594 <Read_Rotary>
    Read_Reed();
 8000276:	f000 f93b 	bl	80004f0 <Read_Reed>
	Relay_On();
 800027a:	e7f8      	b.n	800026e <main+0x1c>

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b09a      	sub	sp, #104	; 0x68
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0320 	add.w	r3, r7, #32
 8000286:	2248      	movs	r2, #72	; 0x48
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f009 fcd6 	bl	8009c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a2:	4b2b      	ldr	r3, [pc, #172]	; (8000350 <SystemClock_Config+0xd4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002aa:	4a29      	ldr	r2, [pc, #164]	; (8000350 <SystemClock_Config+0xd4>)
 80002ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b0:	6013      	str	r3, [r2, #0]
 80002b2:	4b27      	ldr	r3, [pc, #156]	; (8000350 <SystemClock_Config+0xd4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80002be:	2326      	movs	r3, #38	; 0x26
 80002c0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80002c2:	2300      	movs	r3, #0
 80002c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	2340      	movs	r3, #64	; 0x40
 80002d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002d4:	2300      	movs	r3, #0
 80002d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d8:	2360      	movs	r3, #96	; 0x60
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002e0:	2301      	movs	r3, #1
 80002e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002e8:	2320      	movs	r3, #32
 80002ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80002fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0320 	add.w	r3, r7, #32
 8000302:	4618      	mov	r0, r3
 8000304:	f002 ff9e 	bl	8003244 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030e:	f000 f8c5 	bl	800049c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000312:	236f      	movs	r3, #111	; 0x6f
 8000314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	2303      	movs	r3, #3
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2103      	movs	r1, #3
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fafa 	bl	800392c <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800033e:	f000 f8ad 	bl	800049c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000342:	f004 f88b 	bl	800445c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000346:	bf00      	nop
 8000348:	3768      	adds	r7, #104	; 0x68
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	58000400 	.word	0x58000400

08000354 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b094      	sub	sp, #80	; 0x50
 8000358:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800035a:	463b      	mov	r3, r7
 800035c:	2250      	movs	r2, #80	; 0x50
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f009 fc6b 	bl	8009c3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800036a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800036c:	2300      	movs	r3, #0
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000370:	2310      	movs	r3, #16
 8000372:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000374:	463b      	mov	r3, r7
 8000376:	4618      	mov	r0, r3
 8000378:	f003 fefa 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000382:	f000 f88b 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000386:	bf00      	nop
 8000388:	3750      	adds	r7, #80	; 0x50
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_TIM16_Init+0x48>)
 8000396:	4a11      	ldr	r2, [pc, #68]	; (80003dc <MX_TIM16_Init+0x4c>)
 8000398:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63998;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_TIM16_Init+0x48>)
 800039c:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 80003a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <MX_TIM16_Init+0x48>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_TIM16_Init+0x48>)
 80003aa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80003ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_TIM16_Init+0x48>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_TIM16_Init+0x48>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_TIM16_Init+0x48>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_TIM16_Init+0x48>)
 80003c4:	f004 f961 	bl	800468a <HAL_TIM_Base_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80003ce:	f000 f865 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200001c8 	.word	0x200001c8
 80003dc:	40014400 	.word	0x40014400

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	2004      	movs	r0, #4
 80003f6:	f7ff ff13 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fa:	2002      	movs	r0, #2
 80003fc:	f7ff ff10 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	2001      	movs	r0, #1
 8000402:	f7ff ff0d 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000406:	2008      	movs	r0, #8
 8000408:	f7ff ff0a 	bl	8000220 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000412:	481f      	ldr	r0, [pc, #124]	; (8000490 <MX_GPIO_Init+0xb0>)
 8000414:	f000 fe2e 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	481d      	ldr	r0, [pc, #116]	; (8000494 <MX_GPIO_Init+0xb4>)
 800041e:	f000 fe29 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RELAY_Pin;
 8000422:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4815      	ldr	r0, [pc, #84]	; (8000490 <MX_GPIO_Init+0xb0>)
 800043a:	f000 fc93 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 800043e:	f641 030a 	movw	r3, #6154	; 0x180a
 8000442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	480f      	ldr	r0, [pc, #60]	; (8000490 <MX_GPIO_Init+0xb0>)
 8000452:	f000 fc87 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 8000456:	2301      	movs	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4619      	mov	r1, r3
 800046a:	480a      	ldr	r0, [pc, #40]	; (8000494 <MX_GPIO_Init+0xb4>)
 800046c:	f000 fc7a 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 8000470:	2301      	movs	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_GPIO_Init+0xb8>)
 8000482:	f000 fc6f 	bl	8000d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	48000800 	.word	0x48000800
 8000494:	48000400 	.word	0x48000400
 8000498:	48000c00 	.word	0x48000c00

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <REED_status>:
bool bHasContact = false;
bool isTimerOn = false;
extern TIM_HandleTypeDef htim16;

GPIO_PinState REED_status()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 80004ac:	2108      	movs	r1, #8
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <REED_status+0x14>)
 80004b0:	f000 fdc8 	bl	8001044 <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	48000800 	.word	0x48000800

080004c0 <SetTimer>:

void SetTimer() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim16);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <SetTimer+0x10>)
 80004c6:	f004 f937 	bl	8004738 <HAL_TIM_Base_Start_IT>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200001c8 	.word	0x200001c8

080004d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	printf("Timer is gestart!");
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x18>)
 80004de:	f009 fbb5 	bl	8009c4c <iprintf>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	0800ab80 	.word	0x0800ab80

080004f0 <Read_Reed>:


void Read_Reed()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

	if (!REED_status() && !bHasContact)
 80004f4:	f7ff ffd8 	bl	80004a8 <REED_status>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d110      	bne.n	8000520 <Read_Reed+0x30>
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <Read_Reed+0x5c>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	f083 0301 	eor.w	r3, r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d009      	beq.n	8000520 <Read_Reed+0x30>
	{
		printf("Reed heeft nu contact");
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <Read_Reed+0x60>)
 800050e:	f009 fb9d 	bl	8009c4c <iprintf>
		bHasContact = true;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <Read_Reed+0x5c>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
		isTimerOn = false;
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <Read_Reed+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]

		printf("Reed heeft geen contact");
		bHasContact = false;
	}

}
 800051e:	e013      	b.n	8000548 <Read_Reed+0x58>
	else if (REED_status() && bHasContact)
 8000520:	f7ff ffc2 	bl	80004a8 <REED_status>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00e      	beq.n	8000548 <Read_Reed+0x58>
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <Read_Reed+0x5c>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00a      	beq.n	8000548 <Read_Reed+0x58>
		isTimerOn = true;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <Read_Reed+0x64>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
		SetTimer();
 8000538:	f7ff ffc2 	bl	80004c0 <SetTimer>
		printf("Reed heeft geen contact");
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <Read_Reed+0x68>)
 800053e:	f009 fb85 	bl	8009c4c <iprintf>
		bHasContact = false;
 8000542:	4b02      	ldr	r3, [pc, #8]	; (800054c <Read_Reed+0x5c>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000214 	.word	0x20000214
 8000550:	0800ab94 	.word	0x0800ab94
 8000554:	20000215 	.word	0x20000215
 8000558:	0800abac 	.word	0x0800abac

0800055c <Relay_On>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Relay_On()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2140      	movs	r1, #64	; 0x40
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <Relay_On+0x14>)
 8000566:	f000 fd85 	bl	8001074 <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	48000800 	.word	0x48000800

08000574 <_write>:

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	68b8      	ldr	r0, [r7, #8]
 8000584:	f008 fe8c 	bl	80092a0 <CDC_Transmit_FS>
  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Read_Rotary>:

void Read_Rotary()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 800059a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059e:	4855      	ldr	r0, [pc, #340]	; (80006f4 <Read_Rotary+0x160>)
 80005a0:	f000 fd50 	bl	8001044 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	4851      	ldr	r0, [pc, #324]	; (80006f4 <Read_Rotary+0x160>)
 80005ae:	f000 fd49 	bl	8001044 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	005a      	lsls	r2, r3, #1
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4413      	add	r3, r2
 80005be:	4a4e      	ldr	r2, [pc, #312]	; (80006f8 <Read_Rotary+0x164>)
 80005c0:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 80005c2:	4b4e      	ldr	r3, [pc, #312]	; (80006fc <Read_Rotary+0x168>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <Read_Rotary+0x164>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	494d      	ldr	r1, [pc, #308]	; (8000700 <Read_Rotary+0x16c>)
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d4:	607b      	str	r3, [r7, #4]

    if (info == 1)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d109      	bne.n	80005f0 <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <Read_Rotary+0x164>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2201      	movs	r2, #1
 80005e2:	409a      	lsls	r2, r3
 80005e4:	4b47      	ldr	r3, [pc, #284]	; (8000704 <Read_Rotary+0x170>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	4a46      	ldr	r2, [pc, #280]	; (8000704 <Read_Rotary+0x170>)
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e00c      	b.n	800060a <Read_Rotary+0x76>
    }
    else if (info == -1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f6:	d108      	bne.n	800060a <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <Read_Rotary+0x164>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2201      	movs	r2, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <Read_Rotary+0x174>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4313      	orrs	r3, r2
 8000606:	4a40      	ldr	r2, [pc, #256]	; (8000708 <Read_Rotary+0x174>)
 8000608:	6013      	str	r3, [r2, #0]
    else if (info == 2)
    {
        // skipped a value
    }

    if (prevVal != newVal && newVal == 3)
 800060a:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <Read_Rotary+0x168>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b3a      	ldr	r3, [pc, #232]	; (80006f8 <Read_Rotary+0x164>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d047      	beq.n	80006a6 <Read_Rotary+0x112>
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <Read_Rotary+0x164>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d143      	bne.n	80006a6 <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 800061e:	4b39      	ldr	r3, [pc, #228]	; (8000704 <Read_Rotary+0x170>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b0b      	cmp	r3, #11
 8000624:	d00b      	beq.n	800063e <Read_Rotary+0xaa>
 8000626:	4b37      	ldr	r3, [pc, #220]	; (8000704 <Read_Rotary+0x170>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b0d      	cmp	r3, #13
 800062c:	d007      	beq.n	800063e <Read_Rotary+0xaa>
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <Read_Rotary+0x170>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b0e      	cmp	r3, #14
 8000634:	d003      	beq.n	800063e <Read_Rotary+0xaa>
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <Read_Rotary+0x170>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b0f      	cmp	r3, #15
 800063c:	d10e      	bne.n	800065c <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <Read_Rotary+0x178>)
 8000640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000644:	b29b      	uxth	r3, r3
 8000646:	3301      	adds	r3, #1
 8000648:	b29b      	uxth	r3, r3
 800064a:	b21a      	sxth	r2, r3
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <Read_Rotary+0x178>)
 800064e:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4827      	ldr	r0, [pc, #156]	; (80006f4 <Read_Rotary+0x160>)
 8000658:	f000 fd0c 	bl	8001074 <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <Read_Rotary+0x174>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b0b      	cmp	r3, #11
 8000662:	d00b      	beq.n	800067c <Read_Rotary+0xe8>
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <Read_Rotary+0x174>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b0d      	cmp	r3, #13
 800066a:	d007      	beq.n	800067c <Read_Rotary+0xe8>
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <Read_Rotary+0x174>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b0e      	cmp	r3, #14
 8000672:	d003      	beq.n	800067c <Read_Rotary+0xe8>
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <Read_Rotary+0x174>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d10e      	bne.n	800069a <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <Read_Rotary+0x178>)
 800067e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000682:	b29b      	uxth	r3, r3
 8000684:	3b01      	subs	r3, #1
 8000686:	b29b      	uxth	r3, r3
 8000688:	b21a      	sxth	r2, r3
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <Read_Rotary+0x178>)
 800068c:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <Read_Rotary+0x160>)
 8000696:	f000 fced 	bl	8001074 <HAL_GPIO_WritePin>
        }
        clockState = 0;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <Read_Rotary+0x170>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <Read_Rotary+0x174>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <Read_Rotary+0x164>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <Read_Rotary+0x168>)
 80006ac:	6013      	str	r3, [r2, #0]

    if (iTimer > 20000)
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <Read_Rotary+0x17c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80006b6:	4293      	cmp	r3, r2
 80006b8:	dd09      	ble.n	80006ce <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <Read_Rotary+0x178>)
 80006bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <Read_Rotary+0x180>)
 80006c4:	f009 fac2 	bl	8009c4c <iprintf>
        iTimer = 0;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <Read_Rotary+0x17c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <Read_Rotary+0x17c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <Read_Rotary+0x17c>)
 80006d6:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 80006d8:	2101      	movs	r1, #1
 80006da:	480f      	ldr	r0, [pc, #60]	; (8000718 <Read_Rotary+0x184>)
 80006dc:	f000 fcb2 	bl	8001044 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <Read_Rotary+0x158>
        {
          readValue = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <Read_Rotary+0x178>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	801a      	strh	r2, [r3, #0]
        }
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	48000800 	.word	0x48000800
 80006f8:	20000220 	.word	0x20000220
 80006fc:	20000218 	.word	0x20000218
 8000700:	20000008 	.word	0x20000008
 8000704:	20000224 	.word	0x20000224
 8000708:	20000228 	.word	0x20000228
 800070c:	20000216 	.word	0x20000216
 8000710:	2000021c 	.word	0x2000021c
 8000714:	0800abc4 	.word	0x0800abc4
 8000718:	48000c00 	.word	0x48000c00

0800071c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000728:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800072a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000738:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000740:	68fb      	ldr	r3, [r7, #12]
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a09      	ldr	r2, [pc, #36]	; (8000790 <HAL_TIM_Base_MspInit+0x34>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10b      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800076e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000772:	f7ff ffd3 	bl	800071c <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2019      	movs	r0, #25
 800077c:	f000 fabd 	bl	8000cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000780:	2019      	movs	r0, #25
 8000782:	f000 fad4 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40014400 	.word	0x40014400

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f984 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <USB_LP_IRQHandler+0x10>)
 80007ee:	f000 fd54 	bl	800129a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20001714 	.word	0x20001714

080007fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000802:	f003 ffe7 	bl	80047d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001c8 	.word	0x200001c8

08000810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	e00a      	b.n	8000838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000822:	f3af 8000 	nop.w
 8000826:	4601      	mov	r1, r0
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	60ba      	str	r2, [r7, #8]
 800082e:	b2ca      	uxtb	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbf0      	blt.n	8000822 <_read+0x12>
  }

  return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <_close>:
  }
  return len;
}

int _close(int file)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000872:	605a      	str	r2, [r3, #4]
  return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_isatty>:

int _isatty(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f009 f980 	bl	8009be8 <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20030000 	.word	0x20030000
 8000914:	00000400 	.word	0x00000400
 8000918:	2000022c 	.word	0x2000022c
 800091c:	20001c38 	.word	0x20001c38

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <SystemInit+0x98>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <SystemInit+0x98>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800094c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800094e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <SystemInit+0x9c>)
 800095a:	4013      	ands	r3, r2
 800095c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800095e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800096a:	f023 0305 	bic.w	r3, r3, #5
 800096e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800097a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800097e:	f023 0301 	bic.w	r3, r3, #1
 8000982:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <SystemInit+0xa0>)
 800098c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800098e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <SystemInit+0xa0>)
 8000994:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	faf6fefb 	.word	0xfaf6fefb
 80009c0:	22041000 	.word	0x22041000

080009c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80009c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c8:	3304      	adds	r3, #4

080009ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80009ce:	d3f9      	bcc.n	80009c4 <CopyDataInit>
  bx lr
 80009d0:	4770      	bx	lr

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80009d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80009d4:	3004      	adds	r0, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80009d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>
  bx lr
 80009da:	4770      	bx	lr

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e0:	f7ff ff9e 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <LoopForever+0x6>)
 80009e6:	490c      	ldr	r1, [pc, #48]	; (8000a18 <LoopForever+0xa>)
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <LoopForever+0xe>)
 80009ea:	2300      	movs	r3, #0
 80009ec:	f7ff ffed 	bl	80009ca <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <LoopForever+0x12>)
 80009f2:	490c      	ldr	r1, [pc, #48]	; (8000a24 <LoopForever+0x16>)
 80009f4:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <LoopForever+0x1a>)
 80009f6:	2300      	movs	r3, #0
 80009f8:	f7ff ffe7 	bl	80009ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <LoopForever+0x1e>)
 80009fe:	490c      	ldr	r1, [pc, #48]	; (8000a30 <LoopForever+0x22>)
 8000a00:	2300      	movs	r3, #0
 8000a02:	f7ff ffe8 	bl	80009d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f009 f8f5 	bl	8009bf4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a0a:	f7ff fc22 	bl	8000252 <main>

08000a0e <LoopForever>:

LoopForever:
  b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000a14:	20000008 	.word	0x20000008
 8000a18:	200001ac 	.word	0x200001ac
 8000a1c:	0800ad6c 	.word	0x0800ad6c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000a20:	20030000 	.word	0x20030000
 8000a24:	20030000 	.word	0x20030000
 8000a28:	0800af10 	.word	0x0800af10
  INIT_BSS _sbss, _ebss
 8000a2c:	200001ac 	.word	0x200001ac
 8000a30:	20001c38 	.word	0x20001c38

08000a34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_Init+0x3c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <HAL_Init+0x3c>)
 8000a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4e:	2003      	movs	r0, #3
 8000a50:	f000 f948 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a54:	200f      	movs	r0, #15
 8000a56:	f000 f80f 	bl	8000a78 <HAL_InitTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	e001      	b.n	8000a6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a66:	f7ff fe72 	bl	800074e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58004000 	.word	0x58004000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d024      	beq.n	8000ad6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a8c:	f003 f8fc 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8000a90:	4602      	mov	r2, r0
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_InitTick+0x6c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f950 	bl	8000d4a <HAL_SYSTICK_Config>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10f      	bne.n	8000ad0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	d809      	bhi.n	8000aca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	f04f 30ff 	mov.w	r0, #4294967295
 8000abe:	f000 f91c 	bl	8000cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <HAL_InitTick+0x70>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e007      	b.n	8000ada <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	73fb      	strb	r3, [r7, #15]
 8000ace:	e004      	b.n	8000ada <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e001      	b.n	8000ada <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000050 	.word	0x20000050
 8000ae8:	2000004c 	.word	0x2000004c

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000050 	.word	0x20000050
 8000b10:	20000230 	.word	0x20000230

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000230 	.word	0x20000230

08000b2c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTickPrio+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000004c 	.word	0x2000004c

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <__NVIC_EnableIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff8e 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff29 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff40 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff33 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffa4 	bl	8000ca0 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e14c      	b.n	800100e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 813e 	beq.w	8001008 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 0201 	and.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d017      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d123      	bne.n	8000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	6939      	ldr	r1, [r7, #16]
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0203 	and.w	r2, r3, #3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8098 	beq.w	8001008 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed8:	4a54      	ldr	r2, [pc, #336]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f02:	d019      	beq.n	8000f38 <HAL_GPIO_Init+0x1d4>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <HAL_GPIO_Init+0x2cc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d013      	beq.n	8000f34 <HAL_GPIO_Init+0x1d0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a49      	ldr	r2, [pc, #292]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1cc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a48      	ldr	r2, [pc, #288]	; (8001038 <HAL_GPIO_Init+0x2d4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1c8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a47      	ldr	r2, [pc, #284]	; (800103c <HAL_GPIO_Init+0x2d8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1c4>
 8000f24:	2304      	movs	r3, #4
 8000f26:	e008      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f28:	2307      	movs	r3, #7
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4a:	4938      	ldr	r1, [pc, #224]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7c:	4a30      	ldr	r2, [pc, #192]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa6:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	f47f aeab 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40010000 	.word	0x40010000
 8001030:	48000400 	.word	0x48000400
 8001034:	48000800 	.word	0x48000800
 8001038:	48000c00 	.word	0x48000c00
 800103c:	48001000 	.word	0x48001000
 8001040:	58000800 	.word	0x58000800

08001044 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001090:	e002      	b.n	8001098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	b08b      	sub	sp, #44	; 0x2c
 80010a8:	af06      	add	r7, sp, #24
 80010aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0cb      	b.n	800124e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f008 fa62 	bl	8009594 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fd5a 	bl	8004b96 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e040      	b.n	800116a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	3301      	adds	r3, #1
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	3303      	adds	r3, #3
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	3338      	adds	r3, #56	; 0x38
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	333c      	adds	r3, #60	; 0x3c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	3340      	adds	r3, #64	; 0x40
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	3301      	adds	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3b9      	bcc.n	80010e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e044      	b.n	8001204 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	f203 1369 	addw	r3, r3, #361	; 0x169
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	3301      	adds	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3b5      	bcc.n	800117a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	687e      	ldr	r6, [r7, #4]
 8001216:	466d      	mov	r5, sp
 8001218:	f106 0410 	add.w	r4, r6, #16
 800121c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	602b      	str	r3, [r5, #0]
 8001224:	1d33      	adds	r3, r6, #4
 8001226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f003 fccf 	bl	8004bcc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f001 fc45 	bl	8002ad6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001256 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_PCD_Start+0x16>
 8001268:	2302      	movs	r3, #2
 800126a:	e012      	b.n	8001292 <HAL_PCD_Start+0x3c>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fc75 	bl	8004b68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f005 ff39 	bl	80070fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 ff3e 	bl	8007128 <USB_ReadInterrupts>
 80012ac:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fb05 	bl	80018c8 <PCD_EP_ISR_Handler>

    return;
 80012be:	e110      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d013      	beq.n	80012f2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012dc:	b292      	uxth	r2, r2
 80012de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f008 fa09 	bl	80096fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f8fc 	bl	80014e8 <HAL_PCD_SetAddress>

    return;
 80012f0:	e0f7      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00c      	beq.n	8001316 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800130e:	b292      	uxth	r2, r2
 8001310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001314:	e0e5      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00c      	beq.n	800133a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001332:	b292      	uxth	r2, r2
 8001334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001338:	e0d3      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d034      	beq.n	80013ae <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0204 	bic.w	r2, r2, #4
 8001356:	b292      	uxth	r2, r2
 8001358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0208 	bic.w	r2, r2, #8
 800136e:	b292      	uxth	r2, r2
 8001370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001386:	2100      	movs	r1, #0
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f008 fbad 	bl	8009ae8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f008 f9ec 	bl	800976c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013a6:	b292      	uxth	r2, r2
 80013a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013ac:	e099      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d027      	beq.n	8001408 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0208 	orr.w	r2, r2, #8
 80013ca:	b292      	uxth	r2, r2
 80013cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e2:	b292      	uxth	r2, r2
 80013e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0204 	orr.w	r2, r2, #4
 80013fa:	b292      	uxth	r2, r2
 80013fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f008 f999 	bl	8009738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001406:	e06c      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	2b00      	cmp	r3, #0
 8001410:	d040      	beq.n	8001494 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001424:	b292      	uxth	r2, r2
 8001426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d12b      	bne.n	800148c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0204 	orr.w	r2, r2, #4
 8001446:	b292      	uxth	r2, r2
 8001448:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001454:	b29a      	uxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0208 	orr.w	r2, r2, #8
 800145e:	b292      	uxth	r2, r2
 8001460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001474:	b29b      	uxth	r3, r3
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001482:	2101      	movs	r1, #1
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f008 fb2f 	bl	8009ae8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800148a:	e02a      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f008 f953 	bl	8009738 <HAL_PCD_SuspendCallback>
    return;
 8001492:	e026      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00f      	beq.n	80014be <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f008 f911 	bl	80096de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014bc:	e011      	b.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00c      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014da:	b292      	uxth	r2, r2
 80014dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014e0:	bf00      	nop
  }
}
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_PCD_SetAddress+0x1a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e013      	b.n	800152a <HAL_PCD_SetAddress+0x42>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f005 fdd9 	bl	80070d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	4608      	mov	r0, r1
 800153c:	4611      	mov	r1, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4603      	mov	r3, r0
 8001542:	70fb      	strb	r3, [r7, #3]
 8001544:	460b      	mov	r3, r1
 8001546:	803b      	strh	r3, [r7, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da0e      	bge.n	8001576 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	705a      	strb	r2, [r3, #1]
 8001574:	e00e      	b.n	8001594 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	b2da      	uxtb	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015a0:	883a      	ldrh	r2, [r7, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	78ba      	ldrb	r2, [r7, #2]
 80015aa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015ac:	78bb      	ldrb	r3, [r7, #2]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d102      	bne.n	80015b8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_PCD_EP_Open+0x94>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e00e      	b.n	80015e4 <HAL_PCD_EP_Open+0xb2>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fb1b 	bl	8004c10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da0e      	bge.n	800161e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	705a      	strb	r2, [r3, #1]
 800161c:	e00e      	b.n	800163c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	f003 0207 	and.w	r2, r3, #7
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	b2da      	uxtb	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_PCD_EP_Close+0x6a>
 8001652:	2302      	movs	r3, #2
 8001654:	e00e      	b.n	8001674 <HAL_PCD_EP_Close+0x88>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68f9      	ldr	r1, [r7, #12]
 8001664:	4618      	mov	r0, r3
 8001666:	f003 fe97 	bl	8005398 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	460b      	mov	r3, r1
 800168a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	f003 0207 	and.w	r2, r3, #7
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2200      	movs	r2, #0
 80016ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6979      	ldr	r1, [r7, #20]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f84f 	bl	8005772 <USB_EPStartXfer>

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	f003 0207 	and.w	r2, r3, #7
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001700:	681b      	ldr	r3, [r3, #0]
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	460b      	mov	r3, r1
 800171c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171e:	7afb      	ldrb	r3, [r7, #11]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2201      	movs	r2, #1
 8001758:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6979      	ldr	r1, [r7, #20]
 800176c:	4618      	mov	r0, r3
 800176e:	f004 f800 	bl	8005772 <USB_EPStartXfer>

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	f003 0207 	and.w	r2, r3, #7
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	d901      	bls.n	800179a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e03e      	b.n	8001818 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800179a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da0e      	bge.n	80017c0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	705a      	strb	r2, [r3, #1]
 80017be:	e00c      	b.n	80017da <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_EP_SetStall+0x7e>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e00e      	b.n	8001818 <HAL_PCD_EP_SetStall+0x9c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	4618      	mov	r0, r3
 800180a:	f005 fb63 	bl	8006ed4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 020f 	and.w	r2, r3, #15
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d901      	bls.n	800183e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e040      	b.n	80018c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800183e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da0e      	bge.n	8001864 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	705a      	strb	r2, [r3, #1]
 8001862:	e00e      	b.n	8001882 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2da      	uxtb	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_PCD_EP_ClrStall+0x82>
 800189e:	2302      	movs	r3, #2
 80018a0:	e00e      	b.n	80018c0 <HAL_PCD_EP_ClrStall+0xa0>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68f9      	ldr	r1, [r7, #12]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 fb60 	bl	8006f76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b096      	sub	sp, #88	; 0x58
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018d0:	e3b1      	b.n	8002036 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80018ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f040 8173 	bne.w	8001bdc <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d150      	bne.n	80019a4 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001912:	81fb      	strh	r3, [r7, #14]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	89fb      	ldrh	r3, [r7, #14]
 800191a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800191e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001922:	b29b      	uxth	r3, r3
 8001924:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3328      	adds	r3, #40	; 0x28
 800192a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4413      	add	r3, r2
 8001946:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001952:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	441a      	add	r2, r3
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f007 fea0 	bl	80096aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 835f 	beq.w	8002036 <PCD_EP_ISR_Handler+0x76e>
 8001978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 835a 	bne.w	8002036 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800198e:	b2da      	uxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b292      	uxth	r2, r2
 8001996:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019a2:	e348      	b.n	8002036 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d032      	beq.n	8001a28 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	f005 fbe5 	bl	80071cc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a0e:	4013      	ands	r3, r2
 8001a10:	823b      	strh	r3, [r7, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	8a3a      	ldrh	r2, [r7, #16]
 8001a18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a1c:	b292      	uxth	r2, r2
 8001a1e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f007 fe15 	bl	8009650 <HAL_PCD_SetupStageCallback>
 8001a26:	e306      	b.n	8002036 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a28:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f280 8302 	bge.w	8002036 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a3e:	4013      	ands	r3, r2
 8001a40:	83fb      	strh	r3, [r7, #30]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	8bfa      	ldrh	r2, [r7, #30]
 8001a48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a4c:	b292      	uxth	r2, r2
 8001a4e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d019      	beq.n	8001ab4 <PCD_EP_ISR_Handler+0x1ec>
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d015      	beq.n	8001ab4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8e:	6959      	ldr	r1, [r3, #20]
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a96:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f005 fb97 	bl	80071cc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aaa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001aac:	2100      	movs	r1, #0
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f007 fde0 	bl	8009674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001abe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 82b5 	bne.w	8002036 <PCD_EP_ISR_Handler+0x76e>
 8001acc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ad0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ad4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ad8:	f000 82ad 	beq.w	8002036 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4413      	add	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b3e      	cmp	r3, #62	; 0x3e
 8001b12:	d91d      	bls.n	8001b50 <PCD_EP_ISR_Handler+0x288>
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <PCD_EP_ISR_Handler+0x266>
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	029b      	lsls	r3, r3, #10
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	e026      	b.n	8001b9e <PCD_EP_ISR_Handler+0x2d6>
 8001b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <PCD_EP_ISR_Handler+0x2a6>
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	801a      	strh	r2, [r3, #0]
 8001b6c:	e017      	b.n	8001b9e <PCD_EP_ISR_Handler+0x2d6>
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
 8001b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <PCD_EP_ISR_Handler+0x2c0>
 8001b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b84:	3301      	adds	r3, #1
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	029b      	lsls	r3, r3, #10
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bae:	827b      	strh	r3, [r7, #18]
 8001bb0:	8a7b      	ldrh	r3, [r7, #18]
 8001bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bb6:	827b      	strh	r3, [r7, #18]
 8001bb8:	8a7b      	ldrh	r3, [r7, #18]
 8001bba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bbe:	827b      	strh	r3, [r7, #18]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	8a7b      	ldrh	r3, [r7, #18]
 8001bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8013      	strh	r3, [r2, #0]
 8001bda:	e22c      	b.n	8002036 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f280 80f6 	bge.w	8001de6 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c10:	4013      	ands	r3, r2
 8001c12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c30:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	7b1b      	ldrb	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d123      	bne.n	8001c96 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c72:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001c76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 808e 	beq.w	8001d9c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c86:	6959      	ldr	r1, [r3, #20]
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	88da      	ldrh	r2, [r3, #6]
 8001c8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c90:	f005 fa9c 	bl	80071cc <USB_ReadPMA>
 8001c94:	e082      	b.n	8001d9c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	78db      	ldrb	r3, [r3, #3]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d10a      	bne.n	8001cb4 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f9d3 	bl	8002052 <HAL_PCD_EP_DB_Receive>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001cb2:	e073      	b.n	8001d9c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	441a      	add	r2, r3
 8001ce0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d022      	beq.n	8001d58 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d36:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d02c      	beq.n	8001d9c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d48:	6959      	ldr	r1, [r3, #20]
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	891a      	ldrh	r2, [r3, #8]
 8001d4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d52:	f005 fa3b 	bl	80071cc <USB_ReadPMA>
 8001d56:	e021      	b.n	8001d9c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8e:	6959      	ldr	r1, [r3, #20]
 8001d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d92:	895a      	ldrh	r2, [r3, #10]
 8001d94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d98:	f005 fa18 	bl	80071cc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001da4:	441a      	add	r2, r3
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001db2:	441a      	add	r2, r3
 8001db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <PCD_EP_ISR_Handler+0x504>
 8001dc0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d206      	bcs.n	8001dda <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f007 fc4e 	bl	8009674 <HAL_PCD_DataOutStageCallback>
 8001dd8:	e005      	b.n	8001de6 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fcc6 	bl	8005772 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001de6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8121 	beq.w	8002036 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001df4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	441a      	add	r2, r3
 8001e34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e46:	78db      	ldrb	r3, [r3, #3]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 80a2 	bne.w	8001f92 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	7b1b      	ldrb	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8093 	beq.w	8001f84 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d046      	beq.n	8001ef8 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d126      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0x5f8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	4413      	add	r3, r2
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	00da      	lsls	r2, r3, #3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	4413      	add	r3, r2
 8001e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e98:	623b      	str	r3, [r7, #32]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	801a      	strh	r2, [r3, #0]
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	e061      	b.n	8001f84 <PCD_EP_ISR_Handler+0x6bc>
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec2:	785b      	ldrb	r3, [r3, #1]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d15d      	bne.n	8001f84 <PCD_EP_ISR_Handler+0x6bc>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	4413      	add	r3, r2
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	00da      	lsls	r2, r3, #3
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	4413      	add	r3, r2
 8001eea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	801a      	strh	r2, [r3, #0]
 8001ef6:	e045      	b.n	8001f84 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d126      	bne.n	8001f54 <PCD_EP_ISR_Handler+0x68c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	4413      	add	r3, r2
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	00da      	lsls	r2, r3, #3
 8001f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f26:	4413      	add	r3, r2
 8001f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	801a      	strh	r2, [r3, #0]
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	801a      	strh	r2, [r3, #0]
 8001f52:	e017      	b.n	8001f84 <PCD_EP_ISR_Handler+0x6bc>
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d113      	bne.n	8001f84 <PCD_EP_ISR_Handler+0x6bc>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6a:	4413      	add	r3, r2
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	00da      	lsls	r2, r3, #3
 8001f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f76:	4413      	add	r3, r2
 8001f78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f80:	2200      	movs	r2, #0
 8001f82:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f007 fb8d 	bl	80096aa <HAL_PCD_DataInStageCallback>
 8001f90:	e051      	b.n	8002036 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d144      	bne.n	8002028 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d907      	bls.n	8001fe2 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fda:	1ad2      	subs	r2, r2, r3
 8001fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fde:	619a      	str	r2, [r3, #24]
 8001fe0:	e002      	b.n	8001fe8 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d106      	bne.n	8001ffe <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f007 fb57 	bl	80096aa <HAL_PCD_DataInStageCallback>
 8001ffc:	e01b      	b.n	8002036 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002006:	441a      	add	r2, r3
 8002008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002014:	441a      	add	r2, r3
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fba6 	bl	8005772 <USB_EPStartXfer>
 8002026:	e006      	b.n	8002036 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800202c:	461a      	mov	r2, r3
 800202e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f917 	bl	8002264 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800203e:	b29b      	uxth	r3, r3
 8002040:	b21b      	sxth	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	f6ff ac45 	blt.w	80018d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3758      	adds	r7, #88	; 0x58
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b088      	sub	sp, #32
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	4613      	mov	r3, r2
 800205e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d07c      	beq.n	8002164 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	8b7b      	ldrh	r3, [r7, #26]
 8002096:	429a      	cmp	r2, r3
 8002098:	d306      	bcc.n	80020a8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	e002      	b.n	80020ae <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d123      	bne.n	80020fe <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d0:	833b      	strh	r3, [r7, #24]
 80020d2:	8b3b      	ldrh	r3, [r7, #24]
 80020d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020d8:	833b      	strh	r3, [r7, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	8b3b      	ldrh	r3, [r7, #24]
 80020ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01f      	beq.n	8002148 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	82fb      	strh	r3, [r7, #22]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002144:	b29b      	uxth	r3, r3
 8002146:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002148:	8b7b      	ldrh	r3, [r7, #26]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8085 	beq.w	800225a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6959      	ldr	r1, [r3, #20]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	891a      	ldrh	r2, [r3, #8]
 800215c:	8b7b      	ldrh	r3, [r7, #26]
 800215e:	f005 f835 	bl	80071cc <USB_ReadPMA>
 8002162:	e07a      	b.n	800225a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	4413      	add	r3, r2
 800217e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002188:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	8b7b      	ldrh	r3, [r7, #26]
 8002190:	429a      	cmp	r2, r3
 8002192:	d306      	bcc.n	80021a2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	8b7b      	ldrh	r3, [r7, #26]
 800219a:	1ad2      	subs	r2, r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	619a      	str	r2, [r3, #24]
 80021a0:	e002      	b.n	80021a8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d123      	bne.n	80021f8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	83fb      	strh	r3, [r7, #30]
 80021cc:	8bfb      	ldrh	r3, [r7, #30]
 80021ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021d2:	83fb      	strh	r3, [r7, #30]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	441a      	add	r2, r3
 80021e2:	8bfb      	ldrh	r3, [r7, #30]
 80021e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d11f      	bne.n	8002242 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221c:	83bb      	strh	r3, [r7, #28]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	441a      	add	r2, r3
 800222c:	8bbb      	ldrh	r3, [r7, #28]
 800222e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800223e:	b29b      	uxth	r3, r3
 8002240:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002242:	8b7b      	ldrh	r3, [r7, #26]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6959      	ldr	r1, [r3, #20]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	895a      	ldrh	r2, [r3, #10]
 8002254:	8b7b      	ldrh	r3, [r7, #26]
 8002256:	f004 ffb9 	bl	80071cc <USB_ReadPMA>
    }
  }

  return count;
 800225a:	8b7b      	ldrh	r3, [r7, #26]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0a4      	sub	sp, #144	; 0x90
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 81db 	beq.w	8002634 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	4413      	add	r3, r2
 8002298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d907      	bls.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022ba:	1ad2      	subs	r2, r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	e002      	b.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 80b9 	bne.w	8002444 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d126      	bne.n	8002328 <HAL_PCD_EP_DB_Transmit+0xc4>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	4413      	add	r3, r2
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	00da      	lsls	r2, r3, #3
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	4413      	add	r3, r2
 80022fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800230c:	b29a      	uxth	r2, r3
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	801a      	strh	r2, [r3, #0]
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800231c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002320:	b29a      	uxth	r2, r3
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	e01a      	b.n	800235e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d116      	bne.n	800235e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002344:	4413      	add	r3, r2
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	00da      	lsls	r2, r3, #3
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	4413      	add	r3, r2
 8002352:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	2200      	movs	r2, #0
 800235c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	785b      	ldrb	r3, [r3, #1]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d126      	bne.n	80023ba <HAL_PCD_EP_DB_Transmit+0x156>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	00da      	lsls	r2, r3, #3
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239e:	b29a      	uxth	r2, r3
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	801a      	strh	r2, [r3, #0]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	e017      	b.n	80023ea <HAL_PCD_EP_DB_Transmit+0x186>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d113      	bne.n	80023ea <HAL_PCD_EP_DB_Transmit+0x186>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	4413      	add	r3, r2
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00da      	lsls	r2, r3, #3
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	4413      	add	r3, r2
 80023de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023e2:	623b      	str	r3, [r7, #32]
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	2200      	movs	r2, #0
 80023e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f007 f95a 	bl	80096aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 82fa 	beq.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241c:	82fb      	strh	r3, [r7, #22]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	8afb      	ldrh	r3, [r7, #22]
 800242e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800243a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]
 8002442:	e2d8      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d021      	beq.n	8002492 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002468:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	441a      	add	r2, r3
 800247a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800247e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800248a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248e:	b29b      	uxth	r3, r3
 8002490:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 82ac 	bne.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024a6:	441a      	add	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024b4:	441a      	add	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6a1a      	ldr	r2, [r3, #32]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d30b      	bcc.n	80024de <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6a1a      	ldr	r2, [r3, #32]
 80024d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	621a      	str	r2, [r3, #32]
 80024dc:	e017      	b.n	800250e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80024e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024f6:	e00a      	b.n	800250e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	785b      	ldrb	r3, [r3, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d165      	bne.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252a:	4413      	add	r3, r2
 800252c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	00da      	lsls	r2, r3, #3
 8002534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002536:	4413      	add	r3, r2
 8002538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002548:	b29a      	uxth	r2, r3
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002552:	2b3e      	cmp	r3, #62	; 0x3e
 8002554:	d91d      	bls.n	8002592 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
 800255e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <HAL_PCD_EP_DB_Transmit+0x30c>
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	3b01      	subs	r3, #1
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002578:	b29b      	uxth	r3, r3
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	b29b      	uxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258a:	b29a      	uxth	r2, r3
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	e044      	b.n	800261c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <HAL_PCD_EP_DB_Transmit+0x34c>
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	e035      	b.n	800261c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80025b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_PCD_EP_DB_Transmit+0x366>
 80025c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c6:	3301      	adds	r3, #1
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b29a      	uxth	r2, r3
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e01c      	b.n	800261c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d118      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fe:	4413      	add	r3, r2
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	00da      	lsls	r2, r3, #3
 8002608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260a:	4413      	add	r3, r2
 800260c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002610:	643b      	str	r3, [r7, #64]	; 0x40
 8002612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002616:	b29a      	uxth	r2, r3
 8002618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6959      	ldr	r1, [r3, #20]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	891a      	ldrh	r2, [r3, #8]
 8002628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800262c:	b29b      	uxth	r3, r3
 800262e:	f004 fd8b 	bl	8007148 <USB_WritePMA>
 8002632:	e1e0      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4413      	add	r3, r2
 800264e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002664:	429a      	cmp	r2, r3
 8002666:	d307      	bcc.n	8002678 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002670:	1ad2      	subs	r2, r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	619a      	str	r2, [r3, #24]
 8002676:	e002      	b.n	800267e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 80c0 	bne.w	8002808 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d126      	bne.n	80026de <HAL_PCD_EP_DB_Transmit+0x47a>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026a4:	4413      	add	r3, r2
 80026a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	00da      	lsls	r2, r3, #3
 80026ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b0:	4413      	add	r3, r2
 80026b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80026b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	e01a      	b.n	8002714 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d116      	bne.n	8002714 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	667b      	str	r3, [r7, #100]	; 0x64
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026fa:	4413      	add	r3, r2
 80026fc:	667b      	str	r3, [r7, #100]	; 0x64
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	00da      	lsls	r2, r3, #3
 8002704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002706:	4413      	add	r3, r2
 8002708:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800270c:	663b      	str	r3, [r7, #96]	; 0x60
 800270e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002710:	2200      	movs	r2, #0
 8002712:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	677b      	str	r3, [r7, #116]	; 0x74
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d12b      	bne.n	800277a <HAL_PCD_EP_DB_Transmit+0x516>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	4413      	add	r3, r2
 8002738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00da      	lsls	r2, r3, #3
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	4413      	add	r3, r2
 8002744:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800274c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	b29a      	uxth	r2, r3
 800275a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275e:	801a      	strh	r2, [r3, #0]
 8002760:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002770:	b29a      	uxth	r2, r3
 8002772:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	e017      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x546>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d113      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x546>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002790:	4413      	add	r3, r2
 8002792:	677b      	str	r3, [r7, #116]	; 0x74
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	00da      	lsls	r2, r3, #3
 800279a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279c:	4413      	add	r3, r2
 800279e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027a2:	673b      	str	r3, [r7, #112]	; 0x70
 80027a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027a6:	2200      	movs	r2, #0
 80027a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f006 ff7a 	bl	80096aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 811a 	bne.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80027f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002802:	b29b      	uxth	r3, r3
 8002804:	8013      	strh	r3, [r2, #0]
 8002806:	e0f6      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d121      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800284a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800284e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002852:	b29b      	uxth	r3, r3
 8002854:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	f040 80ca 	bne.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800286a:	441a      	add	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002878:	441a      	add	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d30b      	bcc.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289a:	1ad2      	subs	r2, r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	621a      	str	r2, [r3, #32]
 80028a0:	e017      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80028aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028ba:	e00a      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	657b      	str	r3, [r7, #84]	; 0x54
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d165      	bne.n	80029ac <HAL_PCD_EP_DB_Transmit+0x748>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f4:	4413      	add	r3, r2
 80028f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	00da      	lsls	r2, r3, #3
 80028fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002900:	4413      	add	r3, r2
 8002902:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002906:	65bb      	str	r3, [r7, #88]	; 0x58
 8002908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002912:	b29a      	uxth	r2, r3
 8002914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291c:	2b3e      	cmp	r3, #62	; 0x3e
 800291e:	d91d      	bls.n	800295c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	66bb      	str	r3, [r7, #104]	; 0x68
 8002928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002936:	3b01      	subs	r3, #1
 8002938:	66bb      	str	r3, [r7, #104]	; 0x68
 800293a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29a      	uxth	r2, r3
 8002940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002942:	b29b      	uxth	r3, r3
 8002944:	029b      	lsls	r3, r3, #10
 8002946:	b29b      	uxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b29b      	uxth	r3, r3
 800294c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002954:	b29a      	uxth	r2, r3
 8002956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	e041      	b.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800295c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <HAL_PCD_EP_DB_Transmit+0x716>
 8002964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002972:	b29a      	uxth	r2, r3
 8002974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	e032      	b.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800297a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	66bb      	str	r3, [r7, #104]	; 0x68
 8002982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_PCD_EP_DB_Transmit+0x730>
 800298e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002990:	3301      	adds	r3, #1
 8002992:	66bb      	str	r3, [r7, #104]	; 0x68
 8002994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29a      	uxth	r2, r3
 800299a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800299c:	b29b      	uxth	r3, r3
 800299e:	029b      	lsls	r3, r3, #10
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	4313      	orrs	r3, r2
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a8:	801a      	strh	r2, [r3, #0]
 80029aa:	e019      	b.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x77c>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d115      	bne.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x77c>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c2:	4413      	add	r3, r2
 80029c4:	657b      	str	r3, [r7, #84]	; 0x54
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00da      	lsls	r2, r3, #3
 80029cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ce:	4413      	add	r3, r2
 80029d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d4:	653b      	str	r3, [r7, #80]	; 0x50
 80029d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029da:	b29a      	uxth	r2, r3
 80029dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6959      	ldr	r1, [r3, #20]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	895a      	ldrh	r2, [r3, #10]
 80029ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f004 fba9 	bl	8007148 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a10:	82bb      	strh	r3, [r7, #20]
 8002a12:	8abb      	ldrh	r3, [r7, #20]
 8002a14:	f083 0310 	eor.w	r3, r3, #16
 8002a18:	82bb      	strh	r3, [r7, #20]
 8002a1a:	8abb      	ldrh	r3, [r7, #20]
 8002a1c:	f083 0320 	eor.w	r3, r3, #32
 8002a20:	82bb      	strh	r3, [r7, #20]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	441a      	add	r2, r3
 8002a30:	8abb      	ldrh	r3, [r7, #20]
 8002a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3790      	adds	r7, #144	; 0x90
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4413      	add	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e009      	b.n	8002a9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a86:	897a      	ldrh	r2, [r7, #10]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a9a:	893b      	ldrh	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	80da      	strh	r2, [r3, #6]
 8002aae:	e00b      	b.n	8002ac8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	58000400 	.word	0x58000400

08002b4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	58000400 	.word	0x58000400

08002b68 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b76:	6053      	str	r3, [r2, #4]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	58000400 	.word	0x58000400

08002b88 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9a:	d101      	bne.n	8002ba0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfa:	d101      	bne.n	8002c00 <LL_RCC_HSE_IsReady+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_RCC_HSE_IsReady+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5a:	d101      	bne.n	8002c60 <LL_RCC_HSI_IsReady+0x18>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_RCC_HSI_IsReady+0x1a>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d101      	bne.n	8002cf2 <LL_RCC_HSI48_IsReady+0x18>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <LL_RCC_HSI48_IsReady+0x1a>
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d101      	bne.n	8002d9e <LL_RCC_LSE_IsReady+0x18>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <LL_RCC_LSE_IsReady+0x1a>
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d101      	bne.n	8002e06 <LL_RCC_LSI1_IsReady+0x18>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <LL_RCC_LSI1_IsReady+0x1a>
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d101      	bne.n	8002e6e <LL_RCC_LSI2_IsReady+0x18>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <LL_RCC_LSI2_IsReady+0x1a>
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d101      	bne.n	8002efa <LL_RCC_MSI_IsReady+0x16>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_RCC_MSI_IsReady+0x18>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2bb0      	cmp	r3, #176	; 0xb0
 8002f44:	d901      	bls.n	8002f4a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002f46:	23b0      	movs	r3, #176	; 0xb0
 8002f48:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002f4a:	687b      	ldr	r3, [r7, #4]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f023 0203 	bic.w	r2, r3, #3
 8002f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f8:	6013      	str	r3, [r2, #0]
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003116:	d101      	bne.n	800311c <LL_RCC_PLL_IsReady+0x18>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <LL_RCC_PLL_IsReady+0x1a>
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0303 	and.w	r3, r3, #3
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d101      	bne.n	80031a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031c2:	d101      	bne.n	80031c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d101      	bne.n	80031ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800320c:	d101      	bne.n	8003212 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003230:	d101      	bne.n	8003236 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b08d      	sub	sp, #52	; 0x34
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e363      	b.n	800391e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 808d 	beq.w	800337e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003264:	f7ff fea1 	bl	8002faa <LL_RCC_GetSysClkSource>
 8003268:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326a:	f7ff ff82 	bl	8003172 <LL_RCC_PLL_GetMainSource>
 800326e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x3e>
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d147      	bne.n	800330c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	2b01      	cmp	r3, #1
 8003280:	d144      	bne.n	800330c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e347      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003292:	f7ff fe4c 	bl	8002f2e <LL_RCC_MSI_GetRange>
 8003296:	4603      	mov	r3, r0
 8003298:	429c      	cmp	r4, r3
 800329a:	d914      	bls.n	80032c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fd05 	bl	8003cb0 <RCC_SetFlashLatencyFromMSIRange>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e336      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fe26 	bl	8002f06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fe4a 	bl	8002f58 <LL_RCC_MSI_SetCalibTrimming>
 80032c4:	e013      	b.n	80032ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fe1b 	bl	8002f06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fe3f 	bl	8002f58 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fce6 	bl	8003cb0 <RCC_SetFlashLatencyFromMSIRange>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e317      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032ee:	f000 fccb 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4aa4      	ldr	r2, [pc, #656]	; (8003588 <HAL_RCC_OscConfig+0x344>)
 80032f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032f8:	4ba4      	ldr	r3, [pc, #656]	; (800358c <HAL_RCC_OscConfig+0x348>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd fbbb 	bl	8000a78 <HAL_InitTick>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d039      	beq.n	800337c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e308      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01e      	beq.n	8003352 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003314:	f7ff fdc8 	bl	8002ea8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003318:	f7fd fbfc 	bl	8000b14 <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003320:	f7fd fbf8 	bl	8000b14 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e2f5      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003332:	f7ff fdd7 	bl	8002ee4 <LL_RCC_MSI_IsReady>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f1      	beq.n	8003320 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fde0 	bl	8002f06 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fe04 	bl	8002f58 <LL_RCC_MSI_SetCalibTrimming>
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003352:	f7ff fdb8 	bl	8002ec6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003356:	f7fd fbdd 	bl	8000b14 <HAL_GetTick>
 800335a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800335e:	f7fd fbd9 	bl	8000b14 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e2d6      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003370:	f7ff fdb8 	bl	8002ee4 <LL_RCC_MSI_IsReady>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f1      	bne.n	800335e <HAL_RCC_OscConfig+0x11a>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800337c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d047      	beq.n	800341a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338a:	f7ff fe0e 	bl	8002faa <LL_RCC_GetSysClkSource>
 800338e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	f7ff feef 	bl	8003172 <LL_RCC_PLL_GetMainSource>
 8003394:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x164>
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d108      	bne.n	80033b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d105      	bne.n	80033b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d134      	bne.n	800341a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e2b4      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_OscConfig+0x180>
 80033be:	f7ff fbf5 	bl	8002bac <LL_RCC_HSE_Enable>
 80033c2:	e001      	b.n	80033c8 <HAL_RCC_OscConfig+0x184>
 80033c4:	f7ff fc01 	bl	8002bca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fba0 	bl	8000b14 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fd fb9c 	bl	8000b14 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e299      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80033ea:	f7ff fbfd 	bl	8002be8 <LL_RCC_HSE_IsReady>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f1      	beq.n	80033d8 <HAL_RCC_OscConfig+0x194>
 80033f4:	e011      	b.n	800341a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fd fb8d 	bl	8000b14 <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fe:	f7fd fb89 	bl	8000b14 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	; 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e286      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003410:	f7ff fbea 	bl	8002be8 <LL_RCC_HSE_IsReady>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f1      	bne.n	80033fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d04c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003426:	f7ff fdc0 	bl	8002faa <LL_RCC_GetSysClkSource>
 800342a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800342c:	f7ff fea1 	bl	8003172 <LL_RCC_PLL_GetMainSource>
 8003430:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d005      	beq.n	8003444 <HAL_RCC_OscConfig+0x200>
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d10e      	bne.n	800345c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d10b      	bne.n	800345c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e266      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fc09 	bl	8002c6c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800345a:	e031      	b.n	80034c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	f7ff fbd2 	bl	8002c0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fd fb54 	bl	8000b14 <HAL_GetTick>
 800346c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fd fb50 	bl	8000b14 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e24d      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003482:	f7ff fbe1 	bl	8002c48 <LL_RCC_HSI_IsReady>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f1      	beq.n	8003470 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fbeb 	bl	8002c6c <LL_RCC_HSI_SetCalibTrimming>
 8003496:	e013      	b.n	80034c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003498:	f7ff fbc7 	bl	8002c2a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd fb3a 	bl	8000b14 <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a4:	f7fd fb36 	bl	8000b14 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e233      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80034b6:	f7ff fbc7 	bl	8002c48 <LL_RCC_HSI_IsReady>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f1      	bne.n	80034a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a3 	beq.w	8003620 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d076      	beq.n	80035d0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d046      	beq.n	800357c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80034ee:	f7ff fc7e 	bl	8002dee <LL_RCC_LSI1_IsReady>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d113      	bne.n	8003520 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80034f8:	f7ff fc57 	bl	8002daa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034fc:	f7fd fb0a 	bl	8000b14 <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003504:	f7fd fb06 	bl	8000b14 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e203      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003516:	f7ff fc6a 	bl	8002dee <LL_RCC_LSI1_IsReady>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f1      	beq.n	8003504 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003520:	f7ff fc77 	bl	8002e12 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd faf6 	bl	8000b14 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800352c:	f7fd faf2 	bl	8000b14 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b03      	cmp	r3, #3
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1ef      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800353e:	f7ff fc8a 	bl	8002e56 <LL_RCC_LSI2_IsReady>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f1      	beq.n	800352c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fc94 	bl	8002e7a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003552:	f7ff fc3b 	bl	8002dcc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd fadd 	bl	8000b14 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800355e:	f7fd fad9 	bl	8000b14 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e1d6      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003570:	f7ff fc3d 	bl	8002dee <LL_RCC_LSI1_IsReady>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f1      	bne.n	800355e <HAL_RCC_OscConfig+0x31a>
 800357a:	e051      	b.n	8003620 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800357c:	f7ff fc15 	bl	8002daa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fac8 	bl	8000b14 <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003586:	e00c      	b.n	80035a2 <HAL_RCC_OscConfig+0x35e>
 8003588:	20000048 	.word	0x20000048
 800358c:	2000004c 	.word	0x2000004c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003590:	f7fd fac0 	bl	8000b14 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1bd      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80035a2:	f7ff fc24 	bl	8002dee <LL_RCC_LSI1_IsReady>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f1      	beq.n	8003590 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80035ac:	f7ff fc42 	bl	8002e34 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80035b2:	f7fd faaf 	bl	8000b14 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1ac      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80035c4:	f7ff fc47 	bl	8002e56 <LL_RCC_LSI2_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f1      	bne.n	80035b2 <HAL_RCC_OscConfig+0x36e>
 80035ce:	e027      	b.n	8003620 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80035d0:	f7ff fc30 	bl	8002e34 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fd fa9e 	bl	8000b14 <HAL_GetTick>
 80035d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80035dc:	f7fd fa9a 	bl	8000b14 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e197      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80035ee:	f7ff fc32 	bl	8002e56 <LL_RCC_LSI2_IsReady>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f1      	bne.n	80035dc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80035f8:	f7ff fbe8 	bl	8002dcc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fd fa8a 	bl	8000b14 <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003604:	f7fd fa86 	bl	8000b14 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e183      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003616:	f7ff fbea 	bl	8002dee <LL_RCC_LSI1_IsReady>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f1      	bne.n	8003604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d05b      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362c:	4ba7      	ldr	r3, [pc, #668]	; (80038cc <HAL_RCC_OscConfig+0x688>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d114      	bne.n	8003662 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003638:	f7ff fa78 	bl	8002b2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363c:	f7fd fa6a 	bl	8000b14 <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003644:	f7fd fa66 	bl	8000b14 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e163      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003656:	4b9d      	ldr	r3, [pc, #628]	; (80038cc <HAL_RCC_OscConfig+0x688>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_RCC_OscConfig+0x42c>
 800366a:	f7ff fb48 	bl	8002cfe <LL_RCC_LSE_Enable>
 800366e:	e00c      	b.n	800368a <HAL_RCC_OscConfig+0x446>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d104      	bne.n	8003682 <HAL_RCC_OscConfig+0x43e>
 8003678:	f7ff fb63 	bl	8002d42 <LL_RCC_LSE_EnableBypass>
 800367c:	f7ff fb3f 	bl	8002cfe <LL_RCC_LSE_Enable>
 8003680:	e003      	b.n	800368a <HAL_RCC_OscConfig+0x446>
 8003682:	f7ff fb4d 	bl	8002d20 <LL_RCC_LSE_Disable>
 8003686:	f7ff fb6d 	bl	8002d64 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d014      	beq.n	80036bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd fa3f 	bl	8000b14 <HAL_GetTick>
 8003696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd fa3b 	bl	8000b14 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e136      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80036b0:	f7ff fb69 	bl	8002d86 <LL_RCC_LSE_IsReady>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ef      	beq.n	800369a <HAL_RCC_OscConfig+0x456>
 80036ba:	e013      	b.n	80036e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fd fa2a 	bl	8000b14 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fd fa26 	bl	8000b14 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e121      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80036da:	f7ff fb54 	bl	8002d86 <LL_RCC_LSE_IsReady>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ef      	bne.n	80036c4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02c      	beq.n	800374a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d014      	beq.n	8003722 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036f8:	f7ff facd 	bl	8002c96 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fa0a 	bl	8000b14 <HAL_GetTick>
 8003700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003704:	f7fd fa06 	bl	8000b14 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e103      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003716:	f7ff fae0 	bl	8002cda <LL_RCC_HSI48_IsReady>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f1      	beq.n	8003704 <HAL_RCC_OscConfig+0x4c0>
 8003720:	e013      	b.n	800374a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003722:	f7ff fac9 	bl	8002cb8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fd f9f5 	bl	8000b14 <HAL_GetTick>
 800372a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372e:	f7fd f9f1 	bl	8000b14 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0ee      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003740:	f7ff facb 	bl	8002cda <LL_RCC_HSI48_IsReady>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f1      	bne.n	800372e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80e4 	beq.w	800391c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003754:	f7ff fc29 	bl	8002faa <LL_RCC_GetSysClkSource>
 8003758:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800375a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	2b02      	cmp	r3, #2
 8003768:	f040 80b4 	bne.w	80038d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	429a      	cmp	r2, r3
 8003778:	d123      	bne.n	80037c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d11c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d114      	bne.n	80037c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d10d      	bne.n	80037c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d05d      	beq.n	800387e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d058      	beq.n	800387a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0a1      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037da:	f7ff fc84 	bl	80030e6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037de:	f7fd f999 	bl	8000b14 <HAL_GetTick>
 80037e2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd f995 	bl	8000b14 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e092      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ef      	bne.n	80037e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HAL_RCC_OscConfig+0x68c>)
 800380e:	4013      	ands	r3, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800381e:	0212      	lsls	r2, r2, #8
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003832:	430a      	orrs	r2, r1
 8003834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003838:	4313      	orrs	r3, r2
 800383a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800383c:	f7ff fc44 	bl	80030c8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003850:	f7fd f960 	bl	8000b14 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd f95c 	bl	8000b14 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e059      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0ef      	beq.n	8003858 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003878:	e050      	b.n	800391c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e04f      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d147      	bne.n	800391c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800388c:	f7ff fc1c 	bl	80030c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038a0:	f7fd f938 	bl	8000b14 <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fd f934 	bl	8000b14 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e031      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <HAL_RCC_OscConfig+0x664>
 80038c8:	e028      	b.n	800391c <HAL_RCC_OscConfig+0x6d8>
 80038ca:	bf00      	nop
 80038cc:	58000400 	.word	0x58000400
 80038d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d01e      	beq.n	8003918 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	f7ff fc04 	bl	80030e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fd f919 	bl	8000b14 <HAL_GetTick>
 80038e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fd f915 	bl	8000b14 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e012      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ef      	bne.n	80038e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_OscConfig+0x6e4>)
 8003912:	4013      	ands	r3, r2
 8003914:	60cb      	str	r3, [r1, #12]
 8003916:	e001      	b.n	800391c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3734      	adds	r7, #52	; 0x34
 8003922:	46bd      	mov	sp, r7
 8003924:	bd90      	pop	{r4, r7, pc}
 8003926:	bf00      	nop
 8003928:	eefefffc 	.word	0xeefefffc

0800392c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e12d      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b98      	ldr	r3, [pc, #608]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d91b      	bls.n	8003986 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b95      	ldr	r3, [pc, #596]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	4993      	ldr	r1, [pc, #588]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395e:	f7fd f8d9 	bl	8000b14 <HAL_GetTick>
 8003962:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003964:	e008      	b.n	8003978 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003966:	f7fd f8d5 	bl	8000b14 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e111      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003978:	4b8a      	ldr	r3, [pc, #552]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d1ef      	bne.n	8003966 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fb13 	bl	8002fc2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800399c:	f7fd f8ba 	bl	8000b14 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039a4:	f7fd f8b6 	bl	8000b14 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0f2      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039b6:	f7ff fbe8 	bl	800318a <LL_RCC_IsActiveFlag_HPRE>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f1      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d016      	beq.n	80039fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fb0a 	bl	8002fea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039d6:	f7fd f89d 	bl	8000b14 <HAL_GetTick>
 80039da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039de:	f7fd f899 	bl	8000b14 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0d5      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039f0:	f7ff fbdd 	bl	80031ae <LL_RCC_IsActiveFlag_C2HPRE>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f1      	beq.n	80039de <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fb03 	bl	8003016 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a10:	f7fd f880 	bl	8000b14 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a18:	f7fd f87c 	bl	8000b14 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0b8      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a2a:	f7ff fbd3 	bl	80031d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f1      	beq.n	8003a18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d016      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fafd 	bl	8003044 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a4a:	f7fd f863 	bl	8000b14 <HAL_GetTick>
 8003a4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a52:	f7fd f85f 	bl	8000b14 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e09b      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a64:	f7ff fbc9 	bl	80031fa <LL_RCC_IsActiveFlag_PPRE1>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f1      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d017      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff faf3 	bl	800306c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a86:	f7fd f845 	bl	8000b14 <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a8e:	f7fd f841 	bl	8000b14 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e07d      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003aa0:	f7ff fbbd 	bl	800321e <LL_RCC_IsActiveFlag_PPRE2>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f1      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d043      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d106      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003abe:	f7ff f893 	bl	8002be8 <LL_RCC_HSE_IsReady>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11e      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e067      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ad4:	f7ff fb16 	bl	8003104 <LL_RCC_PLL_IsReady>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d113      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e05c      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003aea:	f7ff f9fb 	bl	8002ee4 <LL_RCC_MSI_IsReady>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d108      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e051      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003af8:	f7ff f8a6 	bl	8002c48 <LL_RCC_HSI_IsReady>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e04a      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fa39 	bl	8002f82 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fd f800 	bl	8000b14 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fc fffc 	bl	8000b14 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e036      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	f7ff fa3c 	bl	8002faa <LL_RCC_GetSysClkSource>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d1ec      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d21b      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 0207 	bic.w	r2, r3, #7
 8003b54:	4913      	ldr	r1, [pc, #76]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5c:	f7fc ffda 	bl	8000b14 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b64:	f7fc ffd6 	bl	8000b14 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e012      	b.n	8003b9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x278>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1ef      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b84:	f000 f880 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_RCC_ClockConfig+0x27c>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003b8e:	f7fc ffcd 	bl	8000b2c <HAL_GetTickPrio>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc ff6f 	bl	8000a78 <HAL_InitTick>
 8003b9a:	4603      	mov	r3, r0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	58004000 	.word	0x58004000
 8003ba8:	20000048 	.word	0x20000048

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb2:	f7ff f9fa 	bl	8002faa <LL_RCC_GetSysClkSource>
 8003bb6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003bbe:	f7ff f9b6 	bl	8002f2e <LL_RCC_MSI_GetRange>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e04b      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bda:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e045      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d10a      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003be6:	f7fe ffcf 	bl	8002b88 <LL_RCC_HSE_IsEnabledDiv2>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d102      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003bf0:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e03a      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e037      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003bfc:	f7ff fab9 	bl	8003172 <LL_RCC_PLL_GetMainSource>
 8003c00:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d003      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x64>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x6a>
 8003c0e:	e00d      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c12:	60bb      	str	r3, [r7, #8]
        break;
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c16:	f7fe ffb7 	bl	8002b88 <LL_RCC_HSE_IsEnabledDiv2>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d102      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003c20:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c22:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003c24:	e00d      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003c28:	60bb      	str	r3, [r7, #8]
        break;
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c2c:	f7ff f97f 	bl	8002f2e <LL_RCC_MSI_GetRange>
 8003c30:	4603      	mov	r3, r0
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	60bb      	str	r3, [r7, #8]
        break;
 8003c40:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003c42:	f7ff fa71 	bl	8003128 <LL_RCC_PLL_GetN>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	fb03 f402 	mul.w	r4, r3, r2
 8003c4e:	f7ff fa84 	bl	800315a <LL_RCC_PLL_GetDivider>
 8003c52:	4603      	mov	r3, r0
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	3301      	adds	r3, #1
 8003c58:	fbb4 f4f3 	udiv	r4, r4, r3
 8003c5c:	f7ff fa71 	bl	8003142 <LL_RCC_PLL_GetR>
 8003c60:	4603      	mov	r3, r0
 8003c62:	0f5b      	lsrs	r3, r3, #29
 8003c64:	3301      	adds	r3, #1
 8003c66:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c6a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}
 8003c76:	bf00      	nop
 8003c78:	0800ac8c 	.word	0x0800ac8c
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	003d0900 	.word	0x003d0900
 8003c84:	007a1200 	.word	0x007a1200

08003c88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b598      	push	{r3, r4, r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003c8c:	f7ff ff8e 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003c90:	4604      	mov	r4, r0
 8003c92:	f7ff f9ff 	bl	8003094 <LL_RCC_GetAHBPrescaler>
 8003c96:	4603      	mov	r3, r0
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a03      	ldr	r2, [pc, #12]	; (8003cac <HAL_RCC_GetHCLKFreq+0x24>)
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd98      	pop	{r3, r4, r7, pc}
 8003cac:	0800ac4c 	.word	0x0800ac4c

08003cb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2bb0      	cmp	r3, #176	; 0xb0
 8003cbc:	d903      	bls.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e007      	b.n	8003cd6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003cd6:	f7ff f9e9 	bl	80030ac <LL_RCC_GetAHB4Prescaler>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	0c9c      	lsrs	r4, r3, #18
 8003cfa:	f7fe ff27 	bl	8002b4c <HAL_PWREx_GetVoltageRange>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4619      	mov	r1, r3
 8003d02:	4620      	mov	r0, r4
 8003d04:	f000 f80c 	bl	8003d20 <RCC_SetFlashLatency>
 8003d08:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	0800ac8c 	.word	0x0800ac8c
 8003d18:	0800ac4c 	.word	0x0800ac4c
 8003d1c:	431bde83 	.word	0x431bde83

08003d20 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b093      	sub	sp, #76	; 0x4c
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003d2a:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <RCC_SetFlashLatency+0xe8>)
 8003d2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003d36:	4a35      	ldr	r2, [pc, #212]	; (8003e0c <RCC_SetFlashLatency+0xec>)
 8003d38:	f107 031c 	add.w	r3, r7, #28
 8003d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <RCC_SetFlashLatency+0xf0>)
 8003d44:	f107 040c 	add.w	r4, r7, #12
 8003d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d4e:	2300      	movs	r3, #0
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	d11a      	bne.n	8003d90 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d5e:	e013      	b.n	8003d88 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3348      	adds	r3, #72	; 0x48
 8003d66:	443b      	add	r3, r7
 8003d68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d807      	bhi.n	8003d82 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	3348      	adds	r3, #72	; 0x48
 8003d78:	443b      	add	r3, r7
 8003d7a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003d80:	e020      	b.n	8003dc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	3301      	adds	r3, #1
 8003d86:	643b      	str	r3, [r7, #64]	; 0x40
 8003d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d9e8      	bls.n	8003d60 <RCC_SetFlashLatency+0x40>
 8003d8e:	e019      	b.n	8003dc4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d94:	e013      	b.n	8003dbe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	3348      	adds	r3, #72	; 0x48
 8003d9c:	443b      	add	r3, r7
 8003d9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d807      	bhi.n	8003db8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	3348      	adds	r3, #72	; 0x48
 8003dae:	443b      	add	r3, r7
 8003db0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003db6:	e005      	b.n	8003dc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dba:	3301      	adds	r3, #1
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d9e8      	bls.n	8003d96 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <RCC_SetFlashLatency+0xf4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 0207 	bic.w	r2, r3, #7
 8003dcc:	4911      	ldr	r1, [pc, #68]	; (8003e14 <RCC_SetFlashLatency+0xf4>)
 8003dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003dd4:	f7fc fe9e 	bl	8000b14 <HAL_GetTick>
 8003dd8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003dda:	e008      	b.n	8003dee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ddc:	f7fc fe9a 	bl	8000b14 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e007      	b.n	8003dfe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <RCC_SetFlashLatency+0xf4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1ef      	bne.n	8003ddc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	374c      	adds	r7, #76	; 0x4c
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	0800abd8 	.word	0x0800abd8
 8003e0c:	0800abe8 	.word	0x0800abe8
 8003e10:	0800abf4 	.word	0x0800abf4
 8003e14:	58004000 	.word	0x58004000

08003e18 <LL_RCC_LSE_IsEnabled>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <LL_RCC_LSE_IsEnabled+0x18>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <LL_RCC_LSE_IsEnabled+0x1a>
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_RCC_LSE_IsReady>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d101      	bne.n	8003e54 <LL_RCC_LSE_IsReady+0x18>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <LL_RCC_LSE_IsReady+0x1a>
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_RCC_MSI_EnablePLLMode>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_SetRFWKPClockSource>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_SetSMPSClockSource>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f023 0203 	bic.w	r2, r3, #3
 8003ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_RCC_SetSMPSPrescaler>:
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_SetUSARTClockSource>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f023 0203 	bic.w	r2, r3, #3
 8003f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_SetLPUARTClockSource>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_SetI2CClockSource>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_RCC_SetLPTIMClockSource>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_RCC_SetSAIClockSource>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_SetRNGClockSource>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_SetCLK48ClockSource>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800402c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_RCC_SetUSBClockSource>:
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ffe3 	bl	8004018 <LL_RCC_SetCLK48ClockSource>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <LL_RCC_SetADCClockSource>:
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800406e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_RCC_SetRTCClockSource>:
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_GetRTCClockSource>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_RCC_ForceBackupDomainReset>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_RCC_PLLSAI1_Enable>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_RCC_PLLSAI1_Disable>:
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800413c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004140:	6013      	str	r3, [r2, #0]
}
 8004142:	bf00      	nop
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_PLLSAI1_IsReady>:
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415e:	d101      	bne.n	8004164 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800417c:	2300      	movs	r3, #0
 800417e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d034      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004194:	d021      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004196:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800419a:	d81b      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800419c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a0:	d01d      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80041a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a6:	d815      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00b      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b0:	d110      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80041c2:	e00d      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f94d 	bl	8004468 <RCCEx_PLLSAI1_ConfigNP>
 80041ce:	4603      	mov	r3, r0
 80041d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041d2:	e005      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	77fb      	strb	r3, [r7, #31]
        break;
 80041d8:	e002      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80041de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e0:	7ffb      	ldrb	r3, [r7, #31]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fee8 	bl	8003fc0 <LL_RCC_SetSAIClockSource>
 80041f0:	e001      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f2:	7ffb      	ldrb	r3, [r7, #31]
 80041f4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d046      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004202:	f7ff ff56 	bl	80040b2 <LL_RCC_GetRTCClockSource>
 8004206:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	429a      	cmp	r2, r3
 8004210:	d03c      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004212:	f7fe fc8b 	bl	8002b2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff30 	bl	8004086 <LL_RCC_SetRTCClockSource>
 8004226:	e02e      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004232:	f7ff ff4b 	bl	80040cc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004236:	f7ff ff5a 	bl	80040ee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004252:	f7ff fde1 	bl	8003e18 <LL_RCC_LSE_IsEnabled>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d114      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800425c:	f7fc fc5a 	bl	8000b14 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004262:	e00b      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fc fc56 	bl	8000b14 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d902      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	77fb      	strb	r3, [r7, #31]
              break;
 800427a:	e004      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800427c:	f7ff fdde 	bl	8003e3c <LL_RCC_LSE_IsReady>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d1ee      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004286:	7ffb      	ldrb	r3, [r7, #31]
 8004288:	77bb      	strb	r3, [r7, #30]
 800428a:	e001      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7ffb      	ldrb	r3, [r7, #31]
 800428e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fe2a 	bl	8003efa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fe35 	bl	8003f26 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fe5d 	bl	8003f8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fe52 	bl	8003f8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fe2a 	bl	8003f52 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe1f 	bl	8003f52 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d022      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fe8d 	bl	8004044 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004332:	d107      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434c:	d10b      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f8e3 	bl	800451e <RCCEx_PLLSAI1_ConfigNQ>
 8004358:	4603      	mov	r3, r0
 800435a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800435c:	7ffb      	ldrb	r3, [r7, #31]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436e:	2b00      	cmp	r3, #0
 8004370:	d02b      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d008      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fe2a 	bl	8003fec <LL_RCC_SetRNGClockSource>
 8004398:	e00a      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	2000      	movs	r0, #0
 80043a6:	f7ff fe21 	bl	8003fec <LL_RCC_SetRNGClockSource>
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fe34 	bl	8004018 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80043b8:	d107      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d022      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fe3d 	bl	800405a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e8:	d107      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004402:	d10b      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f000 f8e3 	bl	80045d4 <RCCEx_PLLSAI1_ConfigNR>
 800440e:	4603      	mov	r3, r0
 8004410:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004412:	7ffb      	ldrb	r3, [r7, #31]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004418:	7ffb      	ldrb	r3, [r7, #31]
 800441a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fd26 	bl	8003e7e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fd45 	bl	8003ed2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fd2c 	bl	8003eaa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004452:	7fbb      	ldrb	r3, [r7, #30]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004460:	f7ff fcfe 	bl	8003e60 <LL_RCC_MSI_EnablePLLMode>
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}

08004468 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004474:	f7ff fe5b 	bl	800412e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004478:	f7fc fb4c 	bl	8000b14 <HAL_GetTick>
 800447c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800447e:	e009      	b.n	8004494 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004480:	f7fc fb48 	bl	8000b14 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d902      	bls.n	8004494 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	73fb      	strb	r3, [r7, #15]
      break;
 8004492:	e004      	b.n	800449e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004494:	f7ff fe5a 	bl	800414c <LL_RCC_PLLSAI1_IsReady>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d137      	bne.n	8004514 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80044bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044d2:	f7ff fe1d 	bl	8004110 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d6:	f7fc fb1d 	bl	8000b14 <HAL_GetTick>
 80044da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044dc:	e009      	b.n	80044f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044de:	f7fc fb19 	bl	8000b14 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d902      	bls.n	80044f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	73fb      	strb	r3, [r7, #15]
        break;
 80044f0:	e004      	b.n	80044fc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044f2:	f7ff fe2b 	bl	800414c <LL_RCC_PLLSAI1_IsReady>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d1f0      	bne.n	80044de <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004510:	4313      	orrs	r3, r2
 8004512:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800452a:	f7ff fe00 	bl	800412e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800452e:	f7fc faf1 	bl	8000b14 <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004534:	e009      	b.n	800454a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004536:	f7fc faed 	bl	8000b14 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d902      	bls.n	800454a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e004      	b.n	8004554 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800454a:	f7ff fdff 	bl	800414c <LL_RCC_PLLSAI1_IsReady>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d137      	bne.n	80045ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800455a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004588:	f7ff fdc2 	bl	8004110 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fc fac2 	bl	8000b14 <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004594:	f7fc fabe 	bl	8000b14 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
        break;
 80045a6:	e004      	b.n	80045b2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045a8:	f7ff fdd0 	bl	800414c <LL_RCC_PLLSAI1_IsReady>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d1f0      	bne.n	8004594 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045c6:	4313      	orrs	r3, r2
 80045c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045e0:	f7ff fda5 	bl	800412e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045e4:	f7fc fa96 	bl	8000b14 <HAL_GetTick>
 80045e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045ea:	e009      	b.n	8004600 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ec:	f7fc fa92 	bl	8000b14 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d902      	bls.n	8004600 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	73fb      	strb	r3, [r7, #15]
      break;
 80045fe:	e004      	b.n	800460a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004600:	f7ff fda4 	bl	800414c <LL_RCC_PLLSAI1_IsReady>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d137      	bne.n	8004680 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800463a:	4313      	orrs	r3, r2
 800463c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800463e:	f7ff fd67 	bl	8004110 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004642:	f7fc fa67 	bl	8000b14 <HAL_GetTick>
 8004646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004648:	e009      	b.n	800465e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800464a:	f7fc fa63 	bl	8000b14 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d902      	bls.n	800465e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	73fb      	strb	r3, [r7, #15]
        break;
 800465c:	e004      	b.n	8004668 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800465e:	f7ff fd75 	bl	800414c <LL_RCC_PLLSAI1_IsReady>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d1f0      	bne.n	800464a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800467c:	4313      	orrs	r3, r2
 800467e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e049      	b.n	8004730 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fc f853 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f000 f9cb 	bl	8004a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e036      	b.n	80047be <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_TIM_Base_Start_IT+0x94>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x44>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d115      	bne.n	80047a8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_TIM_Base_Start_IT+0x98>)
 8004784:	4013      	ands	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b06      	cmp	r3, #6
 800478c:	d015      	beq.n	80047ba <HAL_TIM_Base_Start_IT+0x82>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d011      	beq.n	80047ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a6:	e008      	b.n	80047ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e000      	b.n	80047bc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	00010007 	.word	0x00010007

080047d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d122      	bne.n	8004830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d11b      	bne.n	8004830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0202 	mvn.w	r2, #2
 8004800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f905 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f8f7 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f908 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b04      	cmp	r3, #4
 800483c:	d122      	bne.n	8004884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	d11b      	bne.n	8004884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0204 	mvn.w	r2, #4
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8db 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8cd 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8de 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d122      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d11b      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0208 	mvn.w	r2, #8
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8b1 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8a3 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8b4 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d122      	bne.n	800492c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d11b      	bne.n	800492c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0210 	mvn.w	r2, #16
 80048fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2208      	movs	r2, #8
 8004902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f887 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 8004918:	e005      	b.n	8004926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f879 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f88a 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10e      	bne.n	8004958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0201 	mvn.w	r2, #1
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fb fdbe 	bl	80004d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d10e      	bne.n	8004984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	d107      	bne.n	8004984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8de 	bl	8004b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004992:	d10e      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d107      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f8d1 	bl	8004b54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d10e      	bne.n	80049de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f838 	bl	8004a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d10e      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0220 	mvn.w	r2, #32
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f891 	bl	8004b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a2a      	ldr	r2, [pc, #168]	; (8004b20 <TIM_Base_SetConfig+0xbc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0x20>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d108      	bne.n	8004a96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <TIM_Base_SetConfig+0xbc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_Base_SetConfig+0x52>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d007      	beq.n	8004ab6 <TIM_Base_SetConfig+0x52>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <TIM_Base_SetConfig+0xc0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_Base_SetConfig+0x52>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <TIM_Base_SetConfig+0xc4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d108      	bne.n	8004ac8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <TIM_Base_SetConfig+0xbc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_Base_SetConfig+0xa0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <TIM_Base_SetConfig+0xc0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0xa0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <TIM_Base_SetConfig+0xc4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	615a      	str	r2, [r3, #20]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800

08004b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b78:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004b7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b9e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ba2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bcc:	b084      	sub	sp, #16
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	f107 0014 	add.w	r0, r7, #20
 8004bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	b004      	add	sp, #16
 8004c0c:	4770      	bx	lr
	...

08004c10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b09d      	sub	sp, #116	; 0x74
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	78db      	ldrb	r3, [r3, #3]
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d81f      	bhi.n	8004c82 <USB_ActivateEndpoint+0x72>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <USB_ActivateEndpoint+0x38>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c75 	.word	0x08004c75
 8004c50:	08004c8b 	.word	0x08004c8b
 8004c54:	08004c67 	.word	0x08004c67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004c64:	e012      	b.n	8004c8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004c6a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c6e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004c72:	e00b      	b.n	8004c8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004c80:	e004      	b.n	8004c8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004c88:	e000      	b.n	8004c8c <USB_ActivateEndpoint+0x7c>
      break;
 8004c8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	b21b      	sxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	b21a      	sxth	r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	b21b      	sxth	r3, r3
 8004cd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	7b1b      	ldrb	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 8178 	bne.w	8004ff2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8084 	beq.w	8004e14 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	00da      	lsls	r2, r3, #3
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	88db      	ldrh	r3, [r3, #6]
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	827b      	strh	r3, [r7, #18]
 8004d4e:	8a7b      	ldrh	r3, [r7, #18]
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <USB_ActivateEndpoint+0x180>
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	823b      	strh	r3, [r7, #16]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	8a3b      	ldrh	r3, [r7, #16]
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	78db      	ldrb	r3, [r3, #3]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d020      	beq.n	8004dda <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dae:	81bb      	strh	r3, [r7, #12]
 8004db0:	89bb      	ldrh	r3, [r7, #12]
 8004db2:	f083 0320 	eor.w	r3, r3, #32
 8004db6:	81bb      	strh	r3, [r7, #12]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	89bb      	ldrh	r3, [r7, #12]
 8004dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	8013      	strh	r3, [r2, #0]
 8004dd8:	e2d5      	b.n	8005386 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df0:	81fb      	strh	r3, [r7, #14]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	89fb      	ldrh	r3, [r7, #14]
 8004dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]
 8004e12:	e2b8      	b.n	8005386 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	4413      	add	r3, r2
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	00da      	lsls	r2, r3, #3
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	4413      	add	r3, r2
 8004e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	88db      	ldrh	r3, [r3, #6]
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	4413      	add	r3, r2
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00da      	lsls	r2, r3, #3
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	4413      	add	r3, r2
 8004e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b3e      	cmp	r3, #62	; 0x3e
 8004e82:	d91d      	bls.n	8004ec0 <USB_ActivateEndpoint+0x2b0>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <USB_ActivateEndpoint+0x28e>
 8004e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	029b      	lsls	r3, r3, #10
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4313      	orrs	r3, r2
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e026      	b.n	8004f0e <USB_ActivateEndpoint+0x2fe>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <USB_ActivateEndpoint+0x2ce>
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	e017      	b.n	8004f0e <USB_ActivateEndpoint+0x2fe>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <USB_ActivateEndpoint+0x2e8>
 8004ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	029b      	lsls	r3, r3, #10
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01b      	beq.n	8004f5e <USB_ActivateEndpoint+0x34e>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	843b      	strh	r3, [r7, #32]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	8c3b      	ldrh	r3, [r7, #32]
 8004f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d124      	bne.n	8004fb0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7c:	83bb      	strh	r3, [r7, #28]
 8004f7e:	8bbb      	ldrh	r3, [r7, #28]
 8004f80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f84:	83bb      	strh	r3, [r7, #28]
 8004f86:	8bbb      	ldrh	r3, [r7, #28]
 8004f88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f8c:	83bb      	strh	r3, [r7, #28]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	441a      	add	r2, r3
 8004f98:	8bbb      	ldrh	r3, [r7, #28]
 8004f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	8013      	strh	r3, [r2, #0]
 8004fae:	e1ea      	b.n	8005386 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	83fb      	strh	r3, [r7, #30]
 8004fc8:	8bfb      	ldrh	r3, [r7, #30]
 8004fca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fce:	83fb      	strh	r3, [r7, #30]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	8bfb      	ldrh	r3, [r7, #30]
 8004fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	8013      	strh	r3, [r2, #0]
 8004ff0:	e1c9      	b.n	8005386 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	78db      	ldrb	r3, [r3, #3]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d11e      	bne.n	8005038 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800502e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005032:	b29b      	uxth	r3, r3
 8005034:	8013      	strh	r3, [r2, #0]
 8005036:	e01d      	b.n	8005074 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005084:	4413      	add	r3, r2
 8005086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	00da      	lsls	r2, r3, #3
 800508e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005090:	4413      	add	r3, r2
 8005092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005096:	65bb      	str	r3, [r7, #88]	; 0x58
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	891b      	ldrh	r3, [r3, #8]
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	b29b      	uxth	r3, r3
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	657b      	str	r3, [r7, #84]	; 0x54
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b8:	4413      	add	r3, r2
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	00da      	lsls	r2, r3, #3
 80050c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c4:	4413      	add	r3, r2
 80050c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ca:	653b      	str	r3, [r7, #80]	; 0x50
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	895b      	ldrh	r3, [r3, #10]
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f040 8093 	bne.w	800520c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01b      	beq.n	800513a <USB_ActivateEndpoint+0x52a>
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005148:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01b      	beq.n	800518a <USB_ActivateEndpoint+0x57a>
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	877b      	strh	r3, [r7, #58]	; 0x3a
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80051a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80051a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80051aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80051ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]
 800520a:	e0bc      	b.n	8005386 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800521c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01d      	beq.n	8005264 <USB_ActivateEndpoint+0x654>
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005274:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01d      	beq.n	80052bc <USB_ActivateEndpoint+0x6ac>
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	78db      	ldrb	r3, [r3, #3]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d024      	beq.n	800530e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052e2:	f083 0320 	eor.w	r3, r3, #32
 80052e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]
 800530c:	e01d      	b.n	800534a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005386:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800538a:	4618      	mov	r0, r3
 800538c:	3774      	adds	r7, #116	; 0x74
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop

08005398 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005398:	b480      	push	{r7}
 800539a:	b08d      	sub	sp, #52	; 0x34
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	7b1b      	ldrb	r3, [r3, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 808e 	bne.w	80054c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d044      	beq.n	800543e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	81bb      	strh	r3, [r7, #12]
 80053c2:	89bb      	ldrh	r3, [r7, #12]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01b      	beq.n	8005404 <USB_DeactivateEndpoint+0x6c>
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	817b      	strh	r3, [r7, #10]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541a:	813b      	strh	r3, [r7, #8]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	893b      	ldrh	r3, [r7, #8]
 8005428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005438:	b29b      	uxth	r3, r3
 800543a:	8013      	strh	r3, [r2, #0]
 800543c:	e192      	b.n	8005764 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	827b      	strh	r3, [r7, #18]
 800544c:	8a7b      	ldrh	r3, [r7, #18]
 800544e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01b      	beq.n	800548e <USB_DeactivateEndpoint+0xf6>
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	823b      	strh	r3, [r7, #16]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	8a3b      	ldrh	r3, [r7, #16]
 800547a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a4:	81fb      	strh	r3, [r7, #14]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	89fb      	ldrh	r3, [r7, #14]
 80054b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]
 80054c6:	e14d      	b.n	8005764 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 80a5 	bne.w	800561c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	843b      	strh	r3, [r7, #32]
 80054e0:	8c3b      	ldrh	r3, [r7, #32]
 80054e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01b      	beq.n	8005522 <USB_DeactivateEndpoint+0x18a>
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005500:	83fb      	strh	r3, [r7, #30]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	8bfb      	ldrh	r3, [r7, #30]
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	83bb      	strh	r3, [r7, #28]
 8005530:	8bbb      	ldrh	r3, [r7, #28]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01b      	beq.n	8005572 <USB_DeactivateEndpoint+0x1da>
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005550:	837b      	strh	r3, [r7, #26]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	8b7b      	ldrh	r3, [r7, #26]
 800555e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800556e:	b29b      	uxth	r3, r3
 8005570:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	833b      	strh	r3, [r7, #24]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	441a      	add	r2, r3
 8005594:	8b3b      	ldrh	r3, [r7, #24]
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	82fb      	strh	r3, [r7, #22]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	8afb      	ldrh	r3, [r7, #22]
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	82bb      	strh	r3, [r7, #20]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	441a      	add	r2, r3
 8005604:	8abb      	ldrh	r3, [r7, #20]
 8005606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800560e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005616:	b29b      	uxth	r3, r3
 8005618:	8013      	strh	r3, [r2, #0]
 800561a:	e0a3      	b.n	8005764 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800562a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800562c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01b      	beq.n	800566c <USB_DeactivateEndpoint+0x2d4>
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005668:	b29b      	uxth	r3, r3
 800566a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	857b      	strh	r3, [r7, #42]	; 0x2a
 800567a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01b      	beq.n	80056bc <USB_DeactivateEndpoint+0x324>
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	853b      	strh	r3, [r7, #40]	; 0x28
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	847b      	strh	r3, [r7, #34]	; 0x22
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	441a      	add	r2, r3
 800574e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	b29b      	uxth	r3, r3
 8005762:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3734      	adds	r7, #52	; 0x34
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b0c2      	sub	sp, #264	; 0x108
 8005776:	af00      	add	r7, sp, #0
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005780:	6018      	str	r0, [r3, #0]
 8005782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 86b7 	bne.w	800650c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d908      	bls.n	80057cc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80057ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057ca:	e007      	b.n	80057dc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80057cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d13a      	bne.n	8005862 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6959      	ldr	r1, [r3, #20]
 80057f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	88da      	ldrh	r2, [r3, #6]
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005808:	b29b      	uxth	r3, r3
 800580a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800580e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005812:	6800      	ldr	r0, [r0, #0]
 8005814:	f001 fc98 	bl	8007148 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005832:	b29b      	uxth	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	00da      	lsls	r2, r3, #3
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	f000 be1f 	b.w	80064a0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	2b02      	cmp	r3, #2
 8005870:	f040 8462 	bne.w	8006138 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	f240 83df 	bls.w	8006050 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	441a      	add	r2, r3
 80058d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80058e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800590c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 81c7 	beq.w	8005cc2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d177      	bne.n	8005a40 <USB_EPStartXfer+0x2ce>
 8005950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	4413      	add	r3, r2
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00da      	lsls	r2, r3, #3
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	4413      	add	r3, r2
 8005986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005996:	b29a      	uxth	r2, r3
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a0:	2b3e      	cmp	r3, #62	; 0x3e
 80059a2:	d921      	bls.n	80059e8 <USB_EPStartXfer+0x276>
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <USB_EPStartXfer+0x252>
 80059ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059be:	3b01      	subs	r3, #1
 80059c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4313      	orrs	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e050      	b.n	8005a8a <USB_EPStartXfer+0x318>
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <USB_EPStartXfer+0x294>
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e041      	b.n	8005a8a <USB_EPStartXfer+0x318>
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <USB_EPStartXfer+0x2b4>
 8005a1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a20:	3301      	adds	r3, #1
 8005a22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	e024      	b.n	8005a8a <USB_EPStartXfer+0x318>
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d11c      	bne.n	8005a8a <USB_EPStartXfer+0x318>
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	4413      	add	r3, r2
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
 8005a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	00da      	lsls	r2, r3, #3
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	895b      	ldrh	r3, [r3, #10]
 8005a96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ab0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ab4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	f001 fb45 	bl	8007148 <USB_WritePMA>
            ep->xfer_buff += len;
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695a      	ldr	r2, [r3, #20]
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ace:	441a      	add	r2, r3
 8005ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d90f      	bls.n	8005b18 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a1a      	ldr	r2, [r3, #32]
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	621a      	str	r2, [r3, #32]
 8005b16:	e00e      	b.n	8005b36 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d177      	bne.n	8005c36 <USB_EPStartXfer+0x4c4>
 8005b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	4413      	add	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	00da      	lsls	r2, r3, #3
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b96:	2b3e      	cmp	r3, #62	; 0x3e
 8005b98:	d921      	bls.n	8005bde <USB_EPStartXfer+0x46c>
 8005b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <USB_EPStartXfer+0x448>
 8005bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	029b      	lsls	r3, r3, #10
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	e056      	b.n	8005c8c <USB_EPStartXfer+0x51a>
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <USB_EPStartXfer+0x48a>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	e047      	b.n	8005c8c <USB_EPStartXfer+0x51a>
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c00:	085b      	lsrs	r3, r3, #1
 8005c02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <USB_EPStartXfer+0x4aa>
 8005c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c16:	3301      	adds	r3, #1
 8005c18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	e02a      	b.n	8005c8c <USB_EPStartXfer+0x51a>
 8005c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d122      	bne.n	8005c8c <USB_EPStartXfer+0x51a>
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	4413      	add	r3, r2
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	00da      	lsls	r2, r3, #3
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	891b      	ldrh	r3, [r3, #8]
 8005c98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6959      	ldr	r1, [r3, #20]
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cb6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	f001 fa44 	bl	8007148 <USB_WritePMA>
 8005cc0:	e3ee      	b.n	80064a0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d177      	bne.n	8005dc2 <USB_EPStartXfer+0x650>
 8005cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf2:	4413      	add	r3, r2
 8005cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	00da      	lsls	r2, r3, #3
 8005d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d06:	4413      	add	r3, r2
 8005d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d22:	2b3e      	cmp	r3, #62	; 0x3e
 8005d24:	d921      	bls.n	8005d6a <USB_EPStartXfer+0x5f8>
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <USB_EPStartXfer+0x5d4>
 8005d3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d40:	3b01      	subs	r3, #1
 8005d42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	029b      	lsls	r3, r3, #10
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	4313      	orrs	r3, r2
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e056      	b.n	8005e18 <USB_EPStartXfer+0x6a6>
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <USB_EPStartXfer+0x616>
 8005d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	e047      	b.n	8005e18 <USB_EPStartXfer+0x6a6>
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <USB_EPStartXfer+0x636>
 8005d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005da2:	3301      	adds	r3, #1
 8005da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4313      	orrs	r3, r2
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	e02a      	b.n	8005e18 <USB_EPStartXfer+0x6a6>
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d122      	bne.n	8005e18 <USB_EPStartXfer+0x6a6>
 8005dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	653b      	str	r3, [r7, #80]	; 0x50
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df2:	4413      	add	r3, r2
 8005df4:	653b      	str	r3, [r7, #80]	; 0x50
 8005df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	00da      	lsls	r2, r3, #3
 8005e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e06:	4413      	add	r3, r2
 8005e08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	891b      	ldrh	r3, [r3, #8]
 8005e24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6959      	ldr	r1, [r3, #20]
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e46:	6800      	ldr	r0, [r0, #0]
 8005e48:	f001 f97e 	bl	8007148 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5c:	441a      	add	r2, r3
 8005e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d90f      	bls.n	8005ea6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e96:	1ad2      	subs	r2, r2, r3
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	621a      	str	r2, [r3, #32]
 8005ea4:	e00e      	b.n	8005ec4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d177      	bne.n	8005fd0 <USB_EPStartXfer+0x85e>
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	461a      	mov	r2, r3
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	4413      	add	r3, r2
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	00da      	lsls	r2, r3, #3
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	4413      	add	r3, r2
 8005f16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	2b3e      	cmp	r3, #62	; 0x3e
 8005f32:	d921      	bls.n	8005f78 <USB_EPStartXfer+0x806>
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <USB_EPStartXfer+0x7e2>
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	029b      	lsls	r3, r3, #10
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	e050      	b.n	800601a <USB_EPStartXfer+0x8a8>
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <USB_EPStartXfer+0x824>
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	e041      	b.n	800601a <USB_EPStartXfer+0x8a8>
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <USB_EPStartXfer+0x844>
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	029b      	lsls	r3, r3, #10
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	e024      	b.n	800601a <USB_EPStartXfer+0x8a8>
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d11c      	bne.n	800601a <USB_EPStartXfer+0x8a8>
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff4:	4413      	add	r3, r2
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	00da      	lsls	r2, r3, #3
 8006006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006008:	4413      	add	r3, r2
 800600a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006014:	b29a      	uxth	r2, r3
 8006016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006018:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800601a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	895b      	ldrh	r3, [r3, #10]
 8006026:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6959      	ldr	r1, [r3, #20]
 8006036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603a:	b29b      	uxth	r3, r3
 800603c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006040:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006044:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006048:	6800      	ldr	r0, [r0, #0]
 800604a:	f001 f87d 	bl	8007148 <USB_WritePMA>
 800604e:	e227      	b.n	80064a0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800608a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	441a      	add	r2, r3
 80060a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060dc:	4413      	add	r3, r2
 80060de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	00da      	lsls	r2, r3, #3
 80060ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006100:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	891b      	ldrh	r3, [r3, #8]
 800610e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6959      	ldr	r1, [r3, #20]
 800611e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006122:	b29b      	uxth	r3, r3
 8006124:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006128:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800612c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006130:	6800      	ldr	r0, [r0, #0]
 8006132:	f001 f809 	bl	8007148 <USB_WritePMA>
 8006136:	e1b3      	b.n	80064a0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a1a      	ldr	r2, [r3, #32]
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006148:	1ad2      	subs	r2, r2, r3
 800614a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80c6 	beq.w	800630a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	673b      	str	r3, [r7, #112]	; 0x70
 800618a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d177      	bne.n	800628a <USB_EPStartXfer+0xb18>
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ba:	4413      	add	r3, r2
 80061bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	00da      	lsls	r2, r3, #3
 80061cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061d4:	667b      	str	r3, [r7, #100]	; 0x64
 80061d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ea:	2b3e      	cmp	r3, #62	; 0x3e
 80061ec:	d921      	bls.n	8006232 <USB_EPStartXfer+0xac0>
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	2b00      	cmp	r3, #0
 8006202:	d104      	bne.n	800620e <USB_EPStartXfer+0xa9c>
 8006204:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006208:	3b01      	subs	r3, #1
 800620a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800620e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29b      	uxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b29b      	uxth	r3, r3
 8006222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622a:	b29a      	uxth	r2, r3
 800622c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e050      	b.n	80062d4 <USB_EPStartXfer+0xb62>
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <USB_EPStartXfer+0xade>
 800623a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006248:	b29a      	uxth	r2, r3
 800624a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	e041      	b.n	80062d4 <USB_EPStartXfer+0xb62>
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <USB_EPStartXfer+0xafe>
 8006266:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800626a:	3301      	adds	r3, #1
 800626c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29a      	uxth	r2, r3
 8006276:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800627a:	b29b      	uxth	r3, r3
 800627c:	029b      	lsls	r3, r3, #10
 800627e:	b29b      	uxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e024      	b.n	80062d4 <USB_EPStartXfer+0xb62>
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d11c      	bne.n	80062d4 <USB_EPStartXfer+0xb62>
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ae:	4413      	add	r3, r2
 80062b0:	673b      	str	r3, [r7, #112]	; 0x70
 80062b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	00da      	lsls	r2, r3, #3
 80062c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062c2:	4413      	add	r3, r2
 80062c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	895b      	ldrh	r3, [r3, #10]
 80062e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6959      	ldr	r1, [r3, #20]
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006302:	6800      	ldr	r0, [r0, #0]
 8006304:	f000 ff20 	bl	8007148 <USB_WritePMA>
 8006308:	e0ca      	b.n	80064a0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d177      	bne.n	800640a <USB_EPStartXfer+0xc98>
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800633a:	4413      	add	r3, r2
 800633c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	00da      	lsls	r2, r3, #3
 800634c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800634e:	4413      	add	r3, r2
 8006350:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006354:	67bb      	str	r3, [r7, #120]	; 0x78
 8006356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006360:	b29a      	uxth	r2, r3
 8006362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636a:	2b3e      	cmp	r3, #62	; 0x3e
 800636c:	d921      	bls.n	80063b2 <USB_EPStartXfer+0xc40>
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <USB_EPStartXfer+0xc1c>
 8006384:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006388:	3b01      	subs	r3, #1
 800638a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800638e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29b      	uxth	r3, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e05c      	b.n	800646c <USB_EPStartXfer+0xcfa>
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <USB_EPStartXfer+0xc5e>
 80063ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	e04d      	b.n	800646c <USB_EPStartXfer+0xcfa>
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <USB_EPStartXfer+0xc7e>
 80063e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063ea:	3301      	adds	r3, #1
 80063ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	029b      	lsls	r3, r3, #10
 80063fe:	b29b      	uxth	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b29a      	uxth	r2, r3
 8006404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e030      	b.n	800646c <USB_EPStartXfer+0xcfa>
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d128      	bne.n	800646c <USB_EPStartXfer+0xcfa>
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800643e:	4413      	add	r3, r2
 8006440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	00da      	lsls	r2, r3, #3
 8006452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006456:	4413      	add	r3, r2
 8006458:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800645c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800646a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800646c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	891b      	ldrh	r3, [r3, #8]
 8006478:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6959      	ldr	r1, [r3, #20]
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	b29b      	uxth	r3, r3
 800648e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006492:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006496:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	f000 fe54 	bl	8007148 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	817b      	strh	r3, [r7, #10]
 80064c8:	897b      	ldrh	r3, [r7, #10]
 80064ca:	f083 0310 	eor.w	r3, r3, #16
 80064ce:	817b      	strh	r3, [r7, #10]
 80064d0:	897b      	ldrh	r3, [r7, #10]
 80064d2:	f083 0320 	eor.w	r3, r3, #32
 80064d6:	817b      	strh	r3, [r7, #10]
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]
 8006508:	f000 bcde 	b.w	8006ec8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800650c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	7b1b      	ldrb	r3, [r3, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 80bb 	bne.w	8006694 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d917      	bls.n	800656a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800654a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	619a      	str	r2, [r3, #24]
 8006568:	e00e      	b.n	8006588 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2200      	movs	r2, #0
 8006586:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065ac:	4413      	add	r3, r2
 80065ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	00da      	lsls	r2, r3, #3
 80065c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e6:	2b3e      	cmp	r3, #62	; 0x3e
 80065e8:	d924      	bls.n	8006634 <USB_EPStartXfer+0xec2>
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <USB_EPStartXfer+0xe98>
 8006600:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006604:	3b01      	subs	r3, #1
 8006606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006616:	b29b      	uxth	r3, r3
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	b29b      	uxth	r3, r3
 800661c:	4313      	orrs	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	f000 bc10 	b.w	8006e54 <USB_EPStartXfer+0x16e2>
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10c      	bne.n	8006656 <USB_EPStartXfer+0xee4>
 800663c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664c:	b29a      	uxth	r2, r3
 800664e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e3fe      	b.n	8006e54 <USB_EPStartXfer+0x16e2>
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <USB_EPStartXfer+0xf04>
 800666c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006670:	3301      	adds	r3, #1
 8006672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29a      	uxth	r2, r3
 800667e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006682:	b29b      	uxth	r3, r3
 8006684:	029b      	lsls	r3, r3, #10
 8006686:	b29b      	uxth	r3, r3
 8006688:	4313      	orrs	r3, r2
 800668a:	b29a      	uxth	r2, r3
 800668c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e3df      	b.n	8006e54 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	78db      	ldrb	r3, [r3, #3]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	f040 8218 	bne.w	8006ad6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 809d 	bne.w	80067f2 <USB_EPStartXfer+0x1080>
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066dc:	4413      	add	r3, r2
 80066de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066f4:	4413      	add	r3, r2
 80066f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b3e      	cmp	r3, #62	; 0x3e
 8006720:	d92b      	bls.n	800677a <USB_EPStartXfer+0x1008>
 8006722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <USB_EPStartXfer+0xfe0>
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674c:	3b01      	subs	r3, #1
 800674e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	4313      	orrs	r3, r2
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006770:	b29a      	uxth	r2, r3
 8006772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	e070      	b.n	800685c <USB_EPStartXfer+0x10ea>
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10c      	bne.n	80067a4 <USB_EPStartXfer+0x1032>
 800678a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e05b      	b.n	800685c <USB_EPStartXfer+0x10ea>
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <USB_EPStartXfer+0x1062>
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	3301      	adds	r3, #1
 80067d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	029b      	lsls	r3, r3, #10
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	4313      	orrs	r3, r2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e034      	b.n	800685c <USB_EPStartXfer+0x10ea>
 80067f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d12c      	bne.n	800685c <USB_EPStartXfer+0x10ea>
 8006802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681e:	b29b      	uxth	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006826:	4413      	add	r3, r2
 8006828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	00da      	lsls	r2, r3, #3
 800683a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800683e:	4413      	add	r3, r2
 8006840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	b29a      	uxth	r2, r3
 8006856:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 809d 	bne.w	80069b6 <USB_EPStartXfer+0x1244>
 800687c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006898:	b29b      	uxth	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068a0:	4413      	add	r3, r2
 80068a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	00da      	lsls	r2, r3, #3
 80068b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b3e      	cmp	r3, #62	; 0x3e
 80068e4:	d92b      	bls.n	800693e <USB_EPStartXfer+0x11cc>
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <USB_EPStartXfer+0x11a4>
 800690c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006910:	3b01      	subs	r3, #1
 8006912:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006916:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29a      	uxth	r2, r3
 800691e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006922:	b29b      	uxth	r3, r3
 8006924:	029b      	lsls	r3, r3, #10
 8006926:	b29b      	uxth	r3, r3
 8006928:	4313      	orrs	r3, r2
 800692a:	b29b      	uxth	r3, r3
 800692c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006934:	b29a      	uxth	r2, r3
 8006936:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e069      	b.n	8006a12 <USB_EPStartXfer+0x12a0>
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10c      	bne.n	8006968 <USB_EPStartXfer+0x11f6>
 800694e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695e:	b29a      	uxth	r2, r3
 8006960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006964:	801a      	strh	r2, [r3, #0]
 8006966:	e054      	b.n	8006a12 <USB_EPStartXfer+0x12a0>
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	085b      	lsrs	r3, r3, #1
 8006976:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800697a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <USB_EPStartXfer+0x1226>
 800698e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006992:	3301      	adds	r3, #1
 8006994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	029b      	lsls	r3, r3, #10
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4313      	orrs	r3, r2
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	e02d      	b.n	8006a12 <USB_EPStartXfer+0x12a0>
 80069b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d125      	bne.n	8006a12 <USB_EPStartXfer+0x12a0>
 80069c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069dc:	4413      	add	r3, r2
 80069de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	00da      	lsls	r2, r3, #3
 80069f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a10:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8218 	beq.w	8006e54 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <USB_EPStartXfer+0x12ea>
 8006a50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10d      	bne.n	8006a78 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f040 81f5 	bne.w	8006e54 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 81ee 	bne.w	8006e54 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006acc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	8013      	strh	r3, [r2, #0]
 8006ad4:	e1be      	b.n	8006e54 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	78db      	ldrb	r3, [r3, #3]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	f040 81b4 	bne.w	8006e50 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699a      	ldr	r2, [r3, #24]
 8006af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d917      	bls.n	8006b34 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	619a      	str	r2, [r3, #24]
 8006b32:	e00e      	b.n	8006b52 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f040 8085 	bne.w	8006c6e <USB_EPStartXfer+0x14fc>
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b88:	4413      	add	r3, r2
 8006b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	00da      	lsls	r2, r3, #3
 8006b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8006bc4:	d923      	bls.n	8006c0e <USB_EPStartXfer+0x149c>
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <USB_EPStartXfer+0x1474>
 8006bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006be0:	3b01      	subs	r3, #1
 8006be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e060      	b.n	8006cd0 <USB_EPStartXfer+0x155e>
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10c      	bne.n	8006c30 <USB_EPStartXfer+0x14be>
 8006c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	e04f      	b.n	8006cd0 <USB_EPStartXfer+0x155e>
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <USB_EPStartXfer+0x14de>
 8006c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	029b      	lsls	r3, r3, #10
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4313      	orrs	r3, r2
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e030      	b.n	8006cd0 <USB_EPStartXfer+0x155e>
 8006c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d128      	bne.n	8006cd0 <USB_EPStartXfer+0x155e>
 8006c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	00da      	lsls	r2, r3, #3
 8006cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cba:	4413      	add	r3, r2
 8006cbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 8085 	bne.w	8006dfa <USB_EPStartXfer+0x1688>
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d14:	4413      	add	r3, r2
 8006d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	00da      	lsls	r2, r3, #3
 8006d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d50:	d923      	bls.n	8006d9a <USB_EPStartXfer+0x1628>
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <USB_EPStartXfer+0x1600>
 8006d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	029b      	lsls	r3, r3, #10
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e05c      	b.n	8006e54 <USB_EPStartXfer+0x16e2>
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10c      	bne.n	8006dbc <USB_EPStartXfer+0x164a>
 8006da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	e04b      	b.n	8006e54 <USB_EPStartXfer+0x16e2>
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <USB_EPStartXfer+0x166a>
 8006dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	029b      	lsls	r3, r3, #10
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	e02c      	b.n	8006e54 <USB_EPStartXfer+0x16e2>
 8006dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d124      	bne.n	8006e54 <USB_EPStartXfer+0x16e2>
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e20:	4413      	add	r3, r2
 8006e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	00da      	lsls	r2, r3, #3
 8006e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e38:	4413      	add	r3, r2
 8006e3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e001      	b.n	8006e54 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e03a      	b.n	8006eca <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e86:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	441a      	add	r2, r3
 8006eb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d020      	beq.n	8006f28 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efc:	81bb      	strh	r3, [r7, #12]
 8006efe:	89bb      	ldrh	r3, [r7, #12]
 8006f00:	f083 0310 	eor.w	r3, r3, #16
 8006f04:	81bb      	strh	r3, [r7, #12]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	89bb      	ldrh	r3, [r7, #12]
 8006f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]
 8006f26:	e01f      	b.n	8006f68 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	81fb      	strh	r3, [r7, #14]
 8006f40:	89fb      	ldrh	r3, [r7, #14]
 8006f42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f46:	81fb      	strh	r3, [r7, #14]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	441a      	add	r2, r3
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b087      	sub	sp, #28
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	7b1b      	ldrb	r3, [r3, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 809d 	bne.w	80070c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	785b      	ldrb	r3, [r3, #1]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d04c      	beq.n	800702c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	823b      	strh	r3, [r7, #16]
 8006fa0:	8a3b      	ldrh	r3, [r7, #16]
 8006fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01b      	beq.n	8006fe2 <USB_EPClearStall+0x6c>
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	81fb      	strh	r3, [r7, #14]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	441a      	add	r2, r3
 8006fcc:	89fb      	ldrh	r3, [r7, #14]
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	78db      	ldrb	r3, [r3, #3]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d06c      	beq.n	80070c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007000:	81bb      	strh	r3, [r7, #12]
 8007002:	89bb      	ldrh	r3, [r7, #12]
 8007004:	f083 0320 	eor.w	r3, r3, #32
 8007008:	81bb      	strh	r3, [r7, #12]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	89bb      	ldrh	r3, [r7, #12]
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
 800702a:	e04b      	b.n	80070c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	82fb      	strh	r3, [r7, #22]
 800703a:	8afb      	ldrh	r3, [r7, #22]
 800703c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01b      	beq.n	800707c <USB_EPClearStall+0x106>
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	82bb      	strh	r3, [r7, #20]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	8abb      	ldrh	r3, [r7, #20]
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	827b      	strh	r3, [r7, #18]
 8007094:	8a7b      	ldrh	r3, [r7, #18]
 8007096:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800709a:	827b      	strh	r3, [r7, #18]
 800709c:	8a7b      	ldrh	r3, [r7, #18]
 800709e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a2:	827b      	strh	r3, [r7, #18]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	441a      	add	r2, r3
 80070ae:	8a7b      	ldrh	r3, [r7, #18]
 80070b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d103      	bne.n	80070ec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007136:	b29b      	uxth	r3, r3
 8007138:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007148:	b480      	push	{r7}
 800714a:	b08b      	sub	sp, #44	; 0x2c
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	460b      	mov	r3, r1
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	4613      	mov	r3, r2
 800715c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800715e:	88bb      	ldrh	r3, [r7, #4]
 8007160:	3301      	adds	r3, #1
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007178:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
 800717e:	e01b      	b.n	80071b8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3301      	adds	r3, #1
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	b21a      	sxth	r2, r3
 8007190:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007194:	4313      	orrs	r3, r2
 8007196:	b21b      	sxth	r3, r3
 8007198:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	8a7a      	ldrh	r2, [r7, #18]
 800719e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	3302      	adds	r3, #2
 80071a4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	3301      	adds	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	3b01      	subs	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e0      	bne.n	8007180 <USB_WritePMA+0x38>
  }
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	372c      	adds	r7, #44	; 0x2c
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b08b      	sub	sp, #44	; 0x2c
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4611      	mov	r1, r2
 80071d8:	461a      	mov	r2, r3
 80071da:	460b      	mov	r3, r1
 80071dc:	80fb      	strh	r3, [r7, #6]
 80071de:	4613      	mov	r3, r2
 80071e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80071e2:	88bb      	ldrh	r3, [r7, #4]
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071f2:	88fa      	ldrh	r2, [r7, #6]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
 8007202:	e018      	b.n	8007236 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	3302      	adds	r3, #2
 8007210:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	3301      	adds	r3, #1
 800721e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	b2da      	uxtb	r2, r3
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	3301      	adds	r3, #1
 800722e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	3b01      	subs	r3, #1
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e3      	bne.n	8007204 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800723c:	88bb      	ldrh	r3, [r7, #4]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d007      	beq.n	8007258 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	b2da      	uxtb	r2, r3
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	701a      	strb	r2, [r3, #0]
  }
}
 8007258:	bf00      	nop
 800725a:	372c      	adds	r7, #44	; 0x2c
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007270:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007274:	f002 fc6e 	bl	8009b54 <USBD_static_malloc>
 8007278:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32b0      	adds	r2, #176	; 0xb0
 800728a:	2100      	movs	r1, #0
 800728c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007290:	2302      	movs	r3, #2
 8007292:	e0d4      	b.n	800743e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007294:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007298:	2100      	movs	r1, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f002 fcce 	bl	8009c3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	32b0      	adds	r2, #176	; 0xb0
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32b0      	adds	r2, #176	; 0xb0
 80072ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	7c1b      	ldrb	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d138      	bne.n	800733e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072cc:	4b5e      	ldr	r3, [pc, #376]	; (8007448 <USBD_CDC_Init+0x1e4>)
 80072ce:	7819      	ldrb	r1, [r3, #0]
 80072d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d4:	2202      	movs	r2, #2
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f002 fae1 	bl	800989e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072dc:	4b5a      	ldr	r3, [pc, #360]	; (8007448 <USBD_CDC_Init+0x1e4>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	3324      	adds	r3, #36	; 0x24
 80072f2:	2201      	movs	r2, #1
 80072f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072f6:	4b55      	ldr	r3, [pc, #340]	; (800744c <USBD_CDC_Init+0x1e8>)
 80072f8:	7819      	ldrb	r1, [r3, #0]
 80072fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072fe:	2202      	movs	r2, #2
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 facc 	bl	800989e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007306:	4b51      	ldr	r3, [pc, #324]	; (800744c <USBD_CDC_Init+0x1e8>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	f003 020f 	and.w	r2, r3, #15
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800731e:	2201      	movs	r2, #1
 8007320:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007322:	4b4b      	ldr	r3, [pc, #300]	; (8007450 <USBD_CDC_Init+0x1ec>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	f003 020f 	and.w	r2, r3, #15
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	3326      	adds	r3, #38	; 0x26
 8007338:	2210      	movs	r2, #16
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e035      	b.n	80073aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800733e:	4b42      	ldr	r3, [pc, #264]	; (8007448 <USBD_CDC_Init+0x1e4>)
 8007340:	7819      	ldrb	r1, [r3, #0]
 8007342:	2340      	movs	r3, #64	; 0x40
 8007344:	2202      	movs	r2, #2
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f002 faa9 	bl	800989e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800734c:	4b3e      	ldr	r3, [pc, #248]	; (8007448 <USBD_CDC_Init+0x1e4>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	f003 020f 	and.w	r2, r3, #15
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	3324      	adds	r3, #36	; 0x24
 8007362:	2201      	movs	r2, #1
 8007364:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007366:	4b39      	ldr	r3, [pc, #228]	; (800744c <USBD_CDC_Init+0x1e8>)
 8007368:	7819      	ldrb	r1, [r3, #0]
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2202      	movs	r2, #2
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f002 fa95 	bl	800989e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007374:	4b35      	ldr	r3, [pc, #212]	; (800744c <USBD_CDC_Init+0x1e8>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	f003 020f 	and.w	r2, r3, #15
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	440b      	add	r3, r1
 8007388:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800738c:	2201      	movs	r2, #1
 800738e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007390:	4b2f      	ldr	r3, [pc, #188]	; (8007450 <USBD_CDC_Init+0x1ec>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 020f 	and.w	r2, r3, #15
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	3326      	adds	r3, #38	; 0x26
 80073a6:	2210      	movs	r2, #16
 80073a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073aa:	4b29      	ldr	r3, [pc, #164]	; (8007450 <USBD_CDC_Init+0x1ec>)
 80073ac:	7819      	ldrb	r1, [r3, #0]
 80073ae:	2308      	movs	r3, #8
 80073b0:	2203      	movs	r2, #3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f002 fa73 	bl	800989e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80073b8:	4b25      	ldr	r3, [pc, #148]	; (8007450 <USBD_CDC_Init+0x1ec>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 020f 	and.w	r2, r3, #15
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	3324      	adds	r3, #36	; 0x24
 80073ce:	2201      	movs	r2, #1
 80073d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	33b0      	adds	r3, #176	; 0xb0
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007408:	2302      	movs	r3, #2
 800740a:	e018      	b.n	800743e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7c1b      	ldrb	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007414:	4b0d      	ldr	r3, [pc, #52]	; (800744c <USBD_CDC_Init+0x1e8>)
 8007416:	7819      	ldrb	r1, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800741e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f002 fb2b 	bl	8009a7e <USBD_LL_PrepareReceive>
 8007428:	e008      	b.n	800743c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800742a:	4b08      	ldr	r3, [pc, #32]	; (800744c <USBD_CDC_Init+0x1e8>)
 800742c:	7819      	ldrb	r1, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007434:	2340      	movs	r3, #64	; 0x40
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f002 fb21 	bl	8009a7e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200000db 	.word	0x200000db
 800744c:	200000dc 	.word	0x200000dc
 8007450:	200000dd 	.word	0x200000dd

08007454 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007460:	4b3a      	ldr	r3, [pc, #232]	; (800754c <USBD_CDC_DeInit+0xf8>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f002 fa3f 	bl	80098ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800746c:	4b37      	ldr	r3, [pc, #220]	; (800754c <USBD_CDC_DeInit+0xf8>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 020f 	and.w	r2, r3, #15
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	3324      	adds	r3, #36	; 0x24
 8007482:	2200      	movs	r2, #0
 8007484:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007486:	4b32      	ldr	r3, [pc, #200]	; (8007550 <USBD_CDC_DeInit+0xfc>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f002 fa2c 	bl	80098ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007492:	4b2f      	ldr	r3, [pc, #188]	; (8007550 <USBD_CDC_DeInit+0xfc>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f003 020f 	and.w	r2, r3, #15
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074aa:	2200      	movs	r2, #0
 80074ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80074ae:	4b29      	ldr	r3, [pc, #164]	; (8007554 <USBD_CDC_DeInit+0x100>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f002 fa18 	bl	80098ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80074ba:	4b26      	ldr	r3, [pc, #152]	; (8007554 <USBD_CDC_DeInit+0x100>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	3324      	adds	r3, #36	; 0x24
 80074d0:	2200      	movs	r2, #0
 80074d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80074d4:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <USBD_CDC_DeInit+0x100>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	3326      	adds	r3, #38	; 0x26
 80074ea:	2200      	movs	r2, #0
 80074ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	32b0      	adds	r2, #176	; 0xb0
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01f      	beq.n	8007540 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	33b0      	adds	r3, #176	; 0xb0
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32b0      	adds	r2, #176	; 0xb0
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	4618      	mov	r0, r3
 8007524:	f002 fb24 	bl	8009b70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32b0      	adds	r2, #176	; 0xb0
 8007532:	2100      	movs	r1, #0
 8007534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200000db 	.word	0x200000db
 8007550:	200000dc 	.word	0x200000dc
 8007554:	200000dd 	.word	0x200000dd

08007558 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32b0      	adds	r2, #176	; 0xb0
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	e0bf      	b.n	8007708 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007590:	2b00      	cmp	r3, #0
 8007592:	d050      	beq.n	8007636 <USBD_CDC_Setup+0xde>
 8007594:	2b20      	cmp	r3, #32
 8007596:	f040 80af 	bne.w	80076f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03a      	beq.n	8007618 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da1b      	bge.n	80075e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	33b0      	adds	r3, #176	; 0xb0
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80075c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	88d2      	ldrh	r2, [r2, #6]
 80075c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b07      	cmp	r3, #7
 80075d0:	bf28      	it	cs
 80075d2:	2307      	movcs	r3, #7
 80075d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	89fa      	ldrh	r2, [r7, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fd21 	bl	8009024 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80075e2:	e090      	b.n	8007706 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	785a      	ldrb	r2, [r3, #1]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	2b3f      	cmp	r3, #63	; 0x3f
 80075f4:	d803      	bhi.n	80075fe <USBD_CDC_Setup+0xa6>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	e000      	b.n	8007600 <USBD_CDC_Setup+0xa8>
 80075fe:	2240      	movs	r2, #64	; 0x40
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007606:	6939      	ldr	r1, [r7, #16]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800760e:	461a      	mov	r2, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fd33 	bl	800907c <USBD_CtlPrepareRx>
      break;
 8007616:	e076      	b.n	8007706 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	33b0      	adds	r3, #176	; 0xb0
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	7850      	ldrb	r0, [r2, #1]
 800762e:	2200      	movs	r2, #0
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	4798      	blx	r3
      break;
 8007634:	e067      	b.n	8007706 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b0b      	cmp	r3, #11
 800763c:	d851      	bhi.n	80076e2 <USBD_CDC_Setup+0x18a>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <USBD_CDC_Setup+0xec>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007675 	.word	0x08007675
 8007648:	080076f1 	.word	0x080076f1
 800764c:	080076e3 	.word	0x080076e3
 8007650:	080076e3 	.word	0x080076e3
 8007654:	080076e3 	.word	0x080076e3
 8007658:	080076e3 	.word	0x080076e3
 800765c:	080076e3 	.word	0x080076e3
 8007660:	080076e3 	.word	0x080076e3
 8007664:	080076e3 	.word	0x080076e3
 8007668:	080076e3 	.word	0x080076e3
 800766c:	0800769f 	.word	0x0800769f
 8007670:	080076c9 	.word	0x080076c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b03      	cmp	r3, #3
 800767e:	d107      	bne.n	8007690 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007680:	f107 030a 	add.w	r3, r7, #10
 8007684:	2202      	movs	r2, #2
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 fccb 	bl	8009024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800768e:	e032      	b.n	80076f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fc55 	bl	8008f42 <USBD_CtlError>
            ret = USBD_FAIL;
 8007698:	2303      	movs	r3, #3
 800769a:	75fb      	strb	r3, [r7, #23]
          break;
 800769c:	e02b      	b.n	80076f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d107      	bne.n	80076ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076aa:	f107 030d 	add.w	r3, r7, #13
 80076ae:	2201      	movs	r2, #1
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fcb6 	bl	8009024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076b8:	e01d      	b.n	80076f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fc40 	bl	8008f42 <USBD_CtlError>
            ret = USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	75fb      	strb	r3, [r7, #23]
          break;
 80076c6:	e016      	b.n	80076f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d00f      	beq.n	80076f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fc33 	bl	8008f42 <USBD_CtlError>
            ret = USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076e0:	e008      	b.n	80076f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fc2c 	bl	8008f42 <USBD_CtlError>
          ret = USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	75fb      	strb	r3, [r7, #23]
          break;
 80076ee:	e002      	b.n	80076f6 <USBD_CDC_Setup+0x19e>
          break;
 80076f0:	bf00      	nop
 80076f2:	e008      	b.n	8007706 <USBD_CDC_Setup+0x1ae>
          break;
 80076f4:	bf00      	nop
      }
      break;
 80076f6:	e006      	b.n	8007706 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fc21 	bl	8008f42 <USBD_CtlError>
      ret = USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }

  return (uint8_t)ret;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32b0      	adds	r2, #176	; 0xb0
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007736:	2303      	movs	r3, #3
 8007738:	e065      	b.n	8007806 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	32b0      	adds	r2, #176	; 0xb0
 8007744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007748:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3318      	adds	r3, #24
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d02f      	beq.n	80077c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	f003 020f 	and.w	r2, r3, #15
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	4613      	mov	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	3318      	adds	r3, #24
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	f003 010f 	and.w	r1, r3, #15
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	460b      	mov	r3, r1
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	4403      	add	r3, r0
 800778c:	3338      	adds	r3, #56	; 0x38
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	fbb2 f1f3 	udiv	r1, r2, r3
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800779a:	2b00      	cmp	r3, #0
 800779c:	d112      	bne.n	80077c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	f003 020f 	and.w	r2, r3, #15
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	3318      	adds	r3, #24
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077b6:	78f9      	ldrb	r1, [r7, #3]
 80077b8:	2300      	movs	r3, #0
 80077ba:	2200      	movs	r2, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f002 f93d 	bl	8009a3c <USBD_LL_Transmit>
 80077c2:	e01f      	b.n	8007804 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	33b0      	adds	r3, #176	; 0xb0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d010      	beq.n	8007804 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	33b0      	adds	r3, #176	; 0xb0
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	32b0      	adds	r2, #176	; 0xb0
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32b0      	adds	r2, #176	; 0xb0
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e01a      	b.n	8007876 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f002 f93b 	bl	8009ac0 <USBD_LL_GetRxDataSize>
 800784a:	4602      	mov	r2, r0
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	33b0      	adds	r3, #176	; 0xb0
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007870:	4611      	mov	r1, r2
 8007872:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	32b0      	adds	r2, #176	; 0xb0
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	e025      	b.n	80078ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	33b0      	adds	r3, #176	; 0xb0
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01a      	beq.n	80078ea <USBD_CDC_EP0_RxReady+0x6c>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078ba:	2bff      	cmp	r3, #255	; 0xff
 80078bc:	d015      	beq.n	80078ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	33b0      	adds	r3, #176	; 0xb0
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80078d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078de:	b292      	uxth	r2, r2
 80078e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	22ff      	movs	r2, #255	; 0xff
 80078e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078fc:	2182      	movs	r1, #130	; 0x82
 80078fe:	4818      	ldr	r0, [pc, #96]	; (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007900:	f000 fcbd 	bl	800827e <USBD_GetEpDesc>
 8007904:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007906:	2101      	movs	r1, #1
 8007908:	4815      	ldr	r0, [pc, #84]	; (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800790a:	f000 fcb8 	bl	800827e <USBD_GetEpDesc>
 800790e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007910:	2181      	movs	r1, #129	; 0x81
 8007912:	4813      	ldr	r0, [pc, #76]	; (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007914:	f000 fcb3 	bl	800827e <USBD_GetEpDesc>
 8007918:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2210      	movs	r2, #16
 8007924:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d006      	beq.n	800793a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2200      	movs	r2, #0
 8007930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007934:	711a      	strb	r2, [r3, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d006      	beq.n	800794e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007948:	711a      	strb	r2, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2243      	movs	r2, #67	; 0x43
 8007952:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007954:	4b02      	ldr	r3, [pc, #8]	; (8007960 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000098 	.word	0x20000098

08007964 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800796c:	2182      	movs	r1, #130	; 0x82
 800796e:	4818      	ldr	r0, [pc, #96]	; (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007970:	f000 fc85 	bl	800827e <USBD_GetEpDesc>
 8007974:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007976:	2101      	movs	r1, #1
 8007978:	4815      	ldr	r0, [pc, #84]	; (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800797a:	f000 fc80 	bl	800827e <USBD_GetEpDesc>
 800797e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007980:	2181      	movs	r1, #129	; 0x81
 8007982:	4813      	ldr	r0, [pc, #76]	; (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007984:	f000 fc7b 	bl	800827e <USBD_GetEpDesc>
 8007988:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2210      	movs	r2, #16
 8007994:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d006      	beq.n	80079aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2200      	movs	r2, #0
 80079a0:	711a      	strb	r2, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f042 0202 	orr.w	r2, r2, #2
 80079a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d006      	beq.n	80079be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	711a      	strb	r2, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f042 0202 	orr.w	r2, r2, #2
 80079bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2243      	movs	r2, #67	; 0x43
 80079c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000098 	.word	0x20000098

080079d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079dc:	2182      	movs	r1, #130	; 0x82
 80079de:	4818      	ldr	r0, [pc, #96]	; (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079e0:	f000 fc4d 	bl	800827e <USBD_GetEpDesc>
 80079e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079e6:	2101      	movs	r1, #1
 80079e8:	4815      	ldr	r0, [pc, #84]	; (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079ea:	f000 fc48 	bl	800827e <USBD_GetEpDesc>
 80079ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079f0:	2181      	movs	r1, #129	; 0x81
 80079f2:	4813      	ldr	r0, [pc, #76]	; (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079f4:	f000 fc43 	bl	800827e <USBD_GetEpDesc>
 80079f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2210      	movs	r2, #16
 8007a04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d006      	beq.n	8007a1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a14:	711a      	strb	r2, [r3, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a28:	711a      	strb	r2, [r3, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2243      	movs	r2, #67	; 0x43
 8007a32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000098 	.word	0x20000098

08007a44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220a      	movs	r2, #10
 8007a50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a52:	4b03      	ldr	r3, [pc, #12]	; (8007a60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	20000054 	.word	0x20000054

08007a64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e009      	b.n	8007a8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	33b0      	adds	r3, #176	; 0xb0
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	32b0      	adds	r2, #176	; 0xb0
 8007aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e008      	b.n	8007ad0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	32b0      	adds	r2, #176	; 0xb0
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e004      	b.n	8007b0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32b0      	adds	r2, #176	; 0xb0
 8007b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b30:	2301      	movs	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e025      	b.n	8007b8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11f      	bne.n	8007b88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007b50:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <USBD_CDC_TransmitPacket+0x7c>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4403      	add	r3, r0
 8007b6a:	3318      	adds	r3, #24
 8007b6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007b6e:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <USBD_CDC_TransmitPacket+0x7c>)
 8007b70:	7819      	ldrb	r1, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 ff5c 	bl	8009a3c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200000db 	.word	0x200000db

08007b98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	32b0      	adds	r2, #176	; 0xb0
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	32b0      	adds	r2, #176	; 0xb0
 8007bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e018      	b.n	8007bf8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <USBD_CDC_ReceivePacket+0x68>)
 8007bd0:	7819      	ldrb	r1, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 ff4e 	bl	8009a7e <USBD_LL_PrepareReceive>
 8007be2:	e008      	b.n	8007bf6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <USBD_CDC_ReceivePacket+0x68>)
 8007be6:	7819      	ldrb	r1, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 ff44 	bl	8009a7e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	200000dc 	.word	0x200000dc

08007c04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e01f      	b.n	8007c5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	79fa      	ldrb	r2, [r7, #7]
 8007c4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f001 fda7 	bl	80097a4 <USBD_LL_Init>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e025      	b.n	8007cc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	32ae      	adds	r2, #174	; 0xae
 8007c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00f      	beq.n	8007cb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	32ae      	adds	r2, #174	; 0xae
 8007ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	f107 020e 	add.w	r2, r7, #14
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 fdc5 	bl	8009868 <USBD_LL_Start>
 8007cde:	4603      	mov	r3, r0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	4611      	mov	r1, r2
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	4611      	mov	r1, r2
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f8a6 	bl	8008ece <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d9e:	f003 031f 	and.w	r3, r3, #31
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d01a      	beq.n	8007ddc <USBD_LL_SetupStage+0x72>
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d822      	bhi.n	8007df0 <USBD_LL_SetupStage+0x86>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <USBD_LL_SetupStage+0x4a>
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d00a      	beq.n	8007dc8 <USBD_LL_SetupStage+0x5e>
 8007db2:	e01d      	b.n	8007df0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fad3 	bl	8008368 <USBD_StdDevReq>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc6:	e020      	b.n	8007e0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fb3b 	bl	800844c <USBD_StdItfReq>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dda:	e016      	b.n	8007e0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fb9d 	bl	8008524 <USBD_StdEPReq>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
      break;
 8007dee:	e00c      	b.n	8007e0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007df6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 fd92 	bl	8009928 <USBD_LL_StallEP>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
      break;
 8007e08:	bf00      	nop
  }

  return ret;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d16e      	bne.n	8007f0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	f040 8098 	bne.w	8007f70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d913      	bls.n	8007e74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	1ad2      	subs	r2, r2, r3
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bf28      	it	cs
 8007e66:	4613      	movcs	r3, r2
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f001 f922 	bl	80090b6 <USBD_CtlContinueRx>
 8007e72:	e07d      	b.n	8007f70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e7a:	f003 031f 	and.w	r3, r3, #31
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d014      	beq.n	8007eac <USBD_LL_DataOutStage+0x98>
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d81d      	bhi.n	8007ec2 <USBD_LL_DataOutStage+0xae>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <USBD_LL_DataOutStage+0x7c>
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d003      	beq.n	8007e96 <USBD_LL_DataOutStage+0x82>
 8007e8e:	e018      	b.n	8007ec2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	75bb      	strb	r3, [r7, #22]
            break;
 8007e94:	e018      	b.n	8007ec8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f9d2 	bl	800824a <USBD_CoreFindIF>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75bb      	strb	r3, [r7, #22]
            break;
 8007eaa:	e00d      	b.n	8007ec8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f9d4 	bl	8008264 <USBD_CoreFindEP>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75bb      	strb	r3, [r7, #22]
            break;
 8007ec0:	e002      	b.n	8007ec8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75bb      	strb	r3, [r7, #22]
            break;
 8007ec6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ec8:	7dbb      	ldrb	r3, [r7, #22]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d119      	bne.n	8007f02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d113      	bne.n	8007f02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007eda:	7dba      	ldrb	r2, [r7, #22]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	32ae      	adds	r2, #174	; 0xae
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007eea:	7dba      	ldrb	r2, [r7, #22]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ef2:	7dba      	ldrb	r2, [r7, #22]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	32ae      	adds	r2, #174	; 0xae
 8007ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f001 f8e8 	bl	80090d8 <USBD_CtlSendStatus>
 8007f08:	e032      	b.n	8007f70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	4619      	mov	r1, r3
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f9a5 	bl	8008264 <USBD_CoreFindEP>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f1e:	7dbb      	ldrb	r3, [r7, #22]
 8007f20:	2bff      	cmp	r3, #255	; 0xff
 8007f22:	d025      	beq.n	8007f70 <USBD_LL_DataOutStage+0x15c>
 8007f24:	7dbb      	ldrb	r3, [r7, #22]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d122      	bne.n	8007f70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d117      	bne.n	8007f66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007f36:	7dba      	ldrb	r2, [r7, #22]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	32ae      	adds	r2, #174	; 0xae
 8007f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007f46:	7dba      	ldrb	r2, [r7, #22]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007f4e:	7dba      	ldrb	r2, [r7, #22]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	32ae      	adds	r2, #174	; 0xae
 8007f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	7afa      	ldrb	r2, [r7, #11]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	4798      	blx	r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	e000      	b.n	8007f72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	460b      	mov	r3, r1
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d16f      	bne.n	800806e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3314      	adds	r3, #20
 8007f92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d15a      	bne.n	8008054 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d914      	bls.n	8007fd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f001 f84a 	bl	800905a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f001 fd56 	bl	8009a7e <USBD_LL_PrepareReceive>
 8007fd2:	e03f      	b.n	8008054 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d11c      	bne.n	800801a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d316      	bcc.n	800801a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d20f      	bcs.n	800801a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f001 f82b 	bl	800905a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800800c:	2300      	movs	r3, #0
 800800e:	2200      	movs	r2, #0
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f001 fd33 	bl	8009a7e <USBD_LL_PrepareReceive>
 8008018:	e01c      	b.n	8008054 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d10f      	bne.n	8008046 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008046:	2180      	movs	r1, #128	; 0x80
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 fc6d 	bl	8009928 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f001 f855 	bl	80090fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03a      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff fe42 	bl	8007ce8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800806c:	e032      	b.n	80080d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800806e:	7afb      	ldrb	r3, [r7, #11]
 8008070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008074:	b2db      	uxtb	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f8f3 	bl	8008264 <USBD_CoreFindEP>
 800807e:	4603      	mov	r3, r0
 8008080:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2bff      	cmp	r3, #255	; 0xff
 8008086:	d025      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d122      	bne.n	80080d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d11c      	bne.n	80080d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800809a:	7dfa      	ldrb	r2, [r7, #23]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	32ae      	adds	r2, #174	; 0xae
 80080a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d014      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80080aa:	7dfa      	ldrb	r2, [r7, #23]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80080b2:	7dfa      	ldrb	r2, [r7, #23]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	32ae      	adds	r2, #174	; 0xae
 80080b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	7afa      	ldrb	r2, [r7, #11]
 80080c0:	4611      	mov	r1, r2
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	4798      	blx	r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80080ca:	7dbb      	ldrb	r3, [r7, #22]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80080d0:	7dbb      	ldrb	r3, [r7, #22]
 80080d2:	e000      	b.n	80080d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d014      	beq.n	8008144 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00e      	beq.n	8008144 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6852      	ldr	r2, [r2, #4]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	4611      	mov	r1, r2
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f001 fba7 	bl	800989e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2240      	movs	r2, #64	; 0x40
 800815c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	2200      	movs	r2, #0
 8008164:	2180      	movs	r1, #128	; 0x80
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fb99 	bl	800989e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2240      	movs	r2, #64	; 0x40
 8008176:	621a      	str	r2, [r3, #32]

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d006      	beq.n	80081c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2204      	movs	r2, #4
 80081c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d106      	bne.n	80081fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b03      	cmp	r3, #3
 800821c:	d110      	bne.n	8008240 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008256:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d920      	bls.n	80082e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082ae:	e013      	b.n	80082d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082b0:	f107 030a 	add.w	r3, r7, #10
 80082b4:	4619      	mov	r1, r3
 80082b6:	6978      	ldr	r0, [r7, #20]
 80082b8:	f000 f81b 	bl	80082f2 <USBD_GetNextDesc>
 80082bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d108      	bne.n	80082d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	789b      	ldrb	r3, [r3, #2]
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d008      	beq.n	80082e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	b29a      	uxth	r2, r3
 80082de:	897b      	ldrh	r3, [r7, #10]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d8e5      	bhi.n	80082b0 <USBD_GetEpDesc+0x32>
 80082e4:	e000      	b.n	80082e8 <USBD_GetEpDesc+0x6a>
          break;
 80082e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082e8:	693b      	ldr	r3, [r7, #16]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	881a      	ldrh	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b29b      	uxth	r3, r3
 800830a:	4413      	add	r3, r2
 800830c:	b29a      	uxth	r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4413      	add	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	3301      	adds	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800834a:	8a3b      	ldrh	r3, [r7, #16]
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	b21a      	sxth	r2, r3
 8008350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008354:	4313      	orrs	r3, r2
 8008356:	b21b      	sxth	r3, r3
 8008358:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800835a:	89fb      	ldrh	r3, [r7, #14]
}
 800835c:	4618      	mov	r0, r3
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d005      	beq.n	800838e <USBD_StdDevReq+0x26>
 8008382:	2b40      	cmp	r3, #64	; 0x40
 8008384:	d857      	bhi.n	8008436 <USBD_StdDevReq+0xce>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00f      	beq.n	80083aa <USBD_StdDevReq+0x42>
 800838a:	2b20      	cmp	r3, #32
 800838c:	d153      	bne.n	8008436 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	32ae      	adds	r2, #174	; 0xae
 8008398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
      break;
 80083a8:	e04a      	b.n	8008440 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b09      	cmp	r3, #9
 80083b0:	d83b      	bhi.n	800842a <USBD_StdDevReq+0xc2>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <USBD_StdDevReq+0x50>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	08008421 	.word	0x08008421
 80083c0:	0800842b 	.word	0x0800842b
 80083c4:	08008417 	.word	0x08008417
 80083c8:	0800842b 	.word	0x0800842b
 80083cc:	080083eb 	.word	0x080083eb
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	0800842b 	.word	0x0800842b
 80083d8:	08008403 	.word	0x08008403
 80083dc:	080083f5 	.word	0x080083f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa3c 	bl	8008860 <USBD_GetDescriptor>
          break;
 80083e8:	e024      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fbcb 	bl	8008b88 <USBD_SetAddress>
          break;
 80083f2:	e01f      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fc0a 	bl	8008c10 <USBD_SetConfig>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]
          break;
 8008400:	e018      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fcad 	bl	8008d64 <USBD_GetConfig>
          break;
 800840a:	e013      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fcde 	bl	8008dd0 <USBD_GetStatus>
          break;
 8008414:	e00e      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fd0d 	bl	8008e38 <USBD_SetFeature>
          break;
 800841e:	e009      	b.n	8008434 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fd31 	bl	8008e8a <USBD_ClrFeature>
          break;
 8008428:	e004      	b.n	8008434 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fd88 	bl	8008f42 <USBD_CtlError>
          break;
 8008432:	bf00      	nop
      }
      break;
 8008434:	e004      	b.n	8008440 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fd82 	bl	8008f42 <USBD_CtlError>
      break;
 800843e:	bf00      	nop
  }

  return ret;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop

0800844c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d005      	beq.n	8008472 <USBD_StdItfReq+0x26>
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d852      	bhi.n	8008510 <USBD_StdItfReq+0xc4>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <USBD_StdItfReq+0x26>
 800846e:	2b20      	cmp	r3, #32
 8008470:	d14e      	bne.n	8008510 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008478:	b2db      	uxtb	r3, r3
 800847a:	3b01      	subs	r3, #1
 800847c:	2b02      	cmp	r3, #2
 800847e:	d840      	bhi.n	8008502 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	889b      	ldrh	r3, [r3, #4]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d836      	bhi.n	80084f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	889b      	ldrh	r3, [r3, #4]
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fed9 	bl	800824a <USBD_CoreFindIF>
 8008498:	4603      	mov	r3, r0
 800849a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2bff      	cmp	r3, #255	; 0xff
 80084a0:	d01d      	beq.n	80084de <USBD_StdItfReq+0x92>
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11a      	bne.n	80084de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084a8:	7bba      	ldrb	r2, [r7, #14]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32ae      	adds	r2, #174	; 0xae
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00f      	beq.n	80084d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084b8:	7bba      	ldrb	r2, [r7, #14]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084c0:	7bba      	ldrb	r2, [r7, #14]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	32ae      	adds	r2, #174	; 0xae
 80084c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d6:	e004      	b.n	80084e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084d8:	2303      	movs	r3, #3
 80084da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084dc:	e001      	b.n	80084e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084de:	2303      	movs	r3, #3
 80084e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d110      	bne.n	800850c <USBD_StdItfReq+0xc0>
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10d      	bne.n	800850c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fdf1 	bl	80090d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084f6:	e009      	b.n	800850c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fd21 	bl	8008f42 <USBD_CtlError>
          break;
 8008500:	e004      	b.n	800850c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fd1c 	bl	8008f42 <USBD_CtlError>
          break;
 800850a:	e000      	b.n	800850e <USBD_StdItfReq+0xc2>
          break;
 800850c:	bf00      	nop
      }
      break;
 800850e:	e004      	b.n	800851a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fd15 	bl	8008f42 <USBD_CtlError>
      break;
 8008518:	bf00      	nop
  }

  return ret;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d007      	beq.n	8008554 <USBD_StdEPReq+0x30>
 8008544:	2b40      	cmp	r3, #64	; 0x40
 8008546:	f200 817f 	bhi.w	8008848 <USBD_StdEPReq+0x324>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d02a      	beq.n	80085a4 <USBD_StdEPReq+0x80>
 800854e:	2b20      	cmp	r3, #32
 8008550:	f040 817a 	bne.w	8008848 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff fe83 	bl	8008264 <USBD_CoreFindEP>
 800855e:	4603      	mov	r3, r0
 8008560:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008562:	7b7b      	ldrb	r3, [r7, #13]
 8008564:	2bff      	cmp	r3, #255	; 0xff
 8008566:	f000 8174 	beq.w	8008852 <USBD_StdEPReq+0x32e>
 800856a:	7b7b      	ldrb	r3, [r7, #13]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 8170 	bne.w	8008852 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008572:	7b7a      	ldrb	r2, [r7, #13]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800857a:	7b7a      	ldrb	r2, [r7, #13]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	32ae      	adds	r2, #174	; 0xae
 8008580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 8163 	beq.w	8008852 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800858c:	7b7a      	ldrb	r2, [r7, #13]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	32ae      	adds	r2, #174	; 0xae
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085a2:	e156      	b.n	8008852 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d008      	beq.n	80085be <USBD_StdEPReq+0x9a>
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	f300 8145 	bgt.w	800883c <USBD_StdEPReq+0x318>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 809b 	beq.w	80086ee <USBD_StdEPReq+0x1ca>
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d03c      	beq.n	8008636 <USBD_StdEPReq+0x112>
 80085bc:	e13e      	b.n	800883c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d002      	beq.n	80085d0 <USBD_StdEPReq+0xac>
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d016      	beq.n	80085fc <USBD_StdEPReq+0xd8>
 80085ce:	e02c      	b.n	800862a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <USBD_StdEPReq+0xce>
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b80      	cmp	r3, #128	; 0x80
 80085da:	d00a      	beq.n	80085f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 f9a1 	bl	8009928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085e6:	2180      	movs	r1, #128	; 0x80
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f99d 	bl	8009928 <USBD_LL_StallEP>
 80085ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f0:	e020      	b.n	8008634 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fca4 	bl	8008f42 <USBD_CtlError>
              break;
 80085fa:	e01b      	b.n	8008634 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10e      	bne.n	8008622 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <USBD_StdEPReq+0xfe>
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d008      	beq.n	8008622 <USBD_StdEPReq+0xfe>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	88db      	ldrh	r3, [r3, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f983 	bl	8009928 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fd58 	bl	80090d8 <USBD_CtlSendStatus>

              break;
 8008628:	e004      	b.n	8008634 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fc88 	bl	8008f42 <USBD_CtlError>
              break;
 8008632:	bf00      	nop
          }
          break;
 8008634:	e107      	b.n	8008846 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d002      	beq.n	8008648 <USBD_StdEPReq+0x124>
 8008642:	2b03      	cmp	r3, #3
 8008644:	d016      	beq.n	8008674 <USBD_StdEPReq+0x150>
 8008646:	e04b      	b.n	80086e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00d      	beq.n	800866a <USBD_StdEPReq+0x146>
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b80      	cmp	r3, #128	; 0x80
 8008652:	d00a      	beq.n	800866a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f965 	bl	8009928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f961 	bl	8009928 <USBD_LL_StallEP>
 8008666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008668:	e040      	b.n	80086ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc68 	bl	8008f42 <USBD_CtlError>
              break;
 8008672:	e03b      	b.n	80086ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	885b      	ldrh	r3, [r3, #2]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d136      	bne.n	80086ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 f96b 	bl	8009966 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fd21 	bl	80090d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fde2 	bl	8008264 <USBD_CoreFindEP>
 80086a0:	4603      	mov	r3, r0
 80086a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086a4:	7b7b      	ldrb	r3, [r7, #13]
 80086a6:	2bff      	cmp	r3, #255	; 0xff
 80086a8:	d01f      	beq.n	80086ea <USBD_StdEPReq+0x1c6>
 80086aa:	7b7b      	ldrb	r3, [r7, #13]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11c      	bne.n	80086ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086b0:	7b7a      	ldrb	r2, [r7, #13]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086b8:	7b7a      	ldrb	r2, [r7, #13]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	32ae      	adds	r2, #174	; 0xae
 80086be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32ae      	adds	r2, #174	; 0xae
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086de:	e004      	b.n	80086ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fc2d 	bl	8008f42 <USBD_CtlError>
              break;
 80086e8:	e000      	b.n	80086ec <USBD_StdEPReq+0x1c8>
              break;
 80086ea:	bf00      	nop
          }
          break;
 80086ec:	e0ab      	b.n	8008846 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d002      	beq.n	8008700 <USBD_StdEPReq+0x1dc>
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d032      	beq.n	8008764 <USBD_StdEPReq+0x240>
 80086fe:	e097      	b.n	8008830 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <USBD_StdEPReq+0x1f2>
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b80      	cmp	r3, #128	; 0x80
 800870a:	d004      	beq.n	8008716 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fc17 	bl	8008f42 <USBD_CtlError>
                break;
 8008714:	e091      	b.n	800883a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871a:	2b00      	cmp	r3, #0
 800871c:	da0b      	bge.n	8008736 <USBD_StdEPReq+0x212>
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	3310      	adds	r3, #16
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	3304      	adds	r3, #4
 8008734:	e00b      	b.n	800874e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	4413      	add	r3, r2
 800874c:	3304      	adds	r3, #4
 800874e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2202      	movs	r2, #2
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fc61 	bl	8009024 <USBD_CtlSendData>
              break;
 8008762:	e06a      	b.n	800883a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	da11      	bge.n	8008790 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	f003 020f 	and.w	r2, r3, #15
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	3324      	adds	r3, #36	; 0x24
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d117      	bne.n	80087b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fbda 	bl	8008f42 <USBD_CtlError>
                  break;
 800878e:	e054      	b.n	800883a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fbc7 	bl	8008f42 <USBD_CtlError>
                  break;
 80087b4:	e041      	b.n	800883a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da0b      	bge.n	80087d6 <USBD_StdEPReq+0x2b2>
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	3310      	adds	r3, #16
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	3304      	adds	r3, #4
 80087d4:	e00b      	b.n	80087ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4413      	add	r3, r2
 80087ec:	3304      	adds	r3, #4
 80087ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <USBD_StdEPReq+0x2d8>
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d103      	bne.n	8008804 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e00e      	b.n	8008822 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f8cb 	bl	80099a4 <USBD_LL_IsStallEP>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2201      	movs	r2, #1
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	e002      	b.n	8008822 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2202      	movs	r2, #2
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fbfb 	bl	8009024 <USBD_CtlSendData>
              break;
 800882e:	e004      	b.n	800883a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fb85 	bl	8008f42 <USBD_CtlError>
              break;
 8008838:	bf00      	nop
          }
          break;
 800883a:	e004      	b.n	8008846 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fb7f 	bl	8008f42 <USBD_CtlError>
          break;
 8008844:	bf00      	nop
      }
      break;
 8008846:	e005      	b.n	8008854 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fb79 	bl	8008f42 <USBD_CtlError>
      break;
 8008850:	e000      	b.n	8008854 <USBD_StdEPReq+0x330>
      break;
 8008852:	bf00      	nop
  }

  return ret;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	2b0e      	cmp	r3, #14
 8008882:	f200 8152 	bhi.w	8008b2a <USBD_GetDescriptor+0x2ca>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBD_GetDescriptor+0x2c>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088fd 	.word	0x080088fd
 8008890:	08008915 	.word	0x08008915
 8008894:	08008955 	.word	0x08008955
 8008898:	08008b2b 	.word	0x08008b2b
 800889c:	08008b2b 	.word	0x08008b2b
 80088a0:	08008acb 	.word	0x08008acb
 80088a4:	08008af7 	.word	0x08008af7
 80088a8:	08008b2b 	.word	0x08008b2b
 80088ac:	08008b2b 	.word	0x08008b2b
 80088b0:	08008b2b 	.word	0x08008b2b
 80088b4:	08008b2b 	.word	0x08008b2b
 80088b8:	08008b2b 	.word	0x08008b2b
 80088bc:	08008b2b 	.word	0x08008b2b
 80088c0:	08008b2b 	.word	0x08008b2b
 80088c4:	080088c9 	.word	0x080088c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	7c12      	ldrb	r2, [r2, #16]
 80088e0:	f107 0108 	add.w	r1, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088ea:	e126      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb27 	bl	8008f42 <USBD_CtlError>
        err++;
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	3301      	adds	r3, #1
 80088f8:	72fb      	strb	r3, [r7, #11]
      break;
 80088fa:	e11e      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
      break;
 8008912:	e112      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7c1b      	ldrb	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10d      	bne.n	8008938 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008924:	f107 0208 	add.w	r2, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	2202      	movs	r2, #2
 8008934:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008936:	e100      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	f107 0208 	add.w	r2, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
      break;
 8008952:	e0f2      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	885b      	ldrh	r3, [r3, #2]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b05      	cmp	r3, #5
 800895c:	f200 80ac 	bhi.w	8008ab8 <USBD_GetDescriptor+0x258>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <USBD_GetDescriptor+0x108>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	08008981 	.word	0x08008981
 800896c:	080089b5 	.word	0x080089b5
 8008970:	080089e9 	.word	0x080089e9
 8008974:	08008a1d 	.word	0x08008a1d
 8008978:	08008a51 	.word	0x08008a51
 800897c:	08008a85 	.word	0x08008a85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a2:	e091      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 facb 	bl	8008f42 <USBD_CtlError>
            err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
          break;
 80089b2:	e089      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d6:	e077      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fab1 	bl	8008f42 <USBD_CtlError>
            err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
          break;
 80089e6:	e06f      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0a:	e05d      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa97 	bl	8008f42 <USBD_CtlError>
            err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1a:	e055      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3e:	e043      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa7d 	bl	8008f42 <USBD_CtlError>
            err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4e:	e03b      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a72:	e029      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa63 	bl	8008f42 <USBD_CtlError>
            err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
          break;
 8008a82:	e021      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7c12      	ldrb	r2, [r2, #16]
 8008a9c:	f107 0108 	add.w	r1, r7, #8
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4798      	blx	r3
 8008aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa6:	e00f      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa49 	bl	8008f42 <USBD_CtlError>
            err++;
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab6:	e007      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa41 	bl	8008f42 <USBD_CtlError>
          err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ac6:	bf00      	nop
      }
      break;
 8008ac8:	e037      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7c1b      	ldrb	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	f107 0208 	add.w	r2, r7, #8
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4798      	blx	r3
 8008ae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae4:	e029      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa2a 	bl	8008f42 <USBD_CtlError>
        err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
      break;
 8008af4:	e021      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7c1b      	ldrb	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10d      	bne.n	8008b1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f107 0208 	add.w	r2, r7, #8
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4798      	blx	r3
 8008b0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	2207      	movs	r2, #7
 8008b16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b18:	e00f      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa10 	bl	8008f42 <USBD_CtlError>
        err++;
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	3301      	adds	r3, #1
 8008b26:	72fb      	strb	r3, [r7, #11]
      break;
 8008b28:	e007      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fa08 	bl	8008f42 <USBD_CtlError>
      err++;
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	3301      	adds	r3, #1
 8008b36:	72fb      	strb	r3, [r7, #11]
      break;
 8008b38:	bf00      	nop
  }

  if (err != 0U)
 8008b3a:	7afb      	ldrb	r3, [r7, #11]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11e      	bne.n	8008b7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	88db      	ldrh	r3, [r3, #6]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d016      	beq.n	8008b76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b48:	893b      	ldrh	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88da      	ldrh	r2, [r3, #6]
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bf28      	it	cs
 8008b58:	4613      	movcs	r3, r2
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b5e:	893b      	ldrh	r3, [r7, #8]
 8008b60:	461a      	mov	r2, r3
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa5d 	bl	8009024 <USBD_CtlSendData>
 8008b6a:	e009      	b.n	8008b80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9e7 	bl	8008f42 <USBD_CtlError>
 8008b74:	e004      	b.n	8008b80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 faae 	bl	80090d8 <USBD_CtlSendStatus>
 8008b7c:	e000      	b.n	8008b80 <USBD_GetDescriptor+0x320>
    return;
 8008b7e:	bf00      	nop
  }
}
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop

08008b88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	889b      	ldrh	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d131      	bne.n	8008bfe <USBD_SetAddress+0x76>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d12d      	bne.n	8008bfe <USBD_SetAddress+0x76>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ba8:	d829      	bhi.n	8008bfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	885b      	ldrh	r3, [r3, #2]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d104      	bne.n	8008bcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f9bc 	bl	8008f42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	e01d      	b.n	8008c08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	7bfa      	ldrb	r2, [r7, #15]
 8008bd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 ff10 	bl	80099fe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa7a 	bl	80090d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf2:	e009      	b.n	8008c08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfc:	e004      	b.n	8008c08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f99e 	bl	8008f42 <USBD_CtlError>
  }
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	4b4e      	ldr	r3, [pc, #312]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c28:	4b4d      	ldr	r3, [pc, #308]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d905      	bls.n	8008c3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f985 	bl	8008f42 <USBD_CtlError>
    return USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e08c      	b.n	8008d56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d002      	beq.n	8008c4e <USBD_SetConfig+0x3e>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d029      	beq.n	8008ca0 <USBD_SetConfig+0x90>
 8008c4c:	e075      	b.n	8008d3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c4e:	4b44      	ldr	r3, [pc, #272]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d020      	beq.n	8008c98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c56:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c60:	4b3f      	ldr	r3, [pc, #252]	; (8008d60 <USBD_SetConfig+0x150>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff f849 	bl	8007cfe <USBD_SetClassConfig>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f962 	bl	8008f42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c86:	e065      	b.n	8008d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa25 	bl	80090d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2203      	movs	r2, #3
 8008c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c96:	e05d      	b.n	8008d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa1d 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008c9e:	e059      	b.n	8008d54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ca0:	4b2f      	ldr	r3, [pc, #188]	; (8008d60 <USBD_SetConfig+0x150>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d112      	bne.n	8008cce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cba:	4b29      	ldr	r3, [pc, #164]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff f838 	bl	8007d36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa06 	bl	80090d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ccc:	e042      	b.n	8008d54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008cce:	4b24      	ldr	r3, [pc, #144]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d02a      	beq.n	8008d32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff f826 	bl	8007d36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cea:	4b1d      	ldr	r3, [pc, #116]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <USBD_SetConfig+0x150>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7fe ffff 	bl	8007cfe <USBD_SetClassConfig>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00f      	beq.n	8008d2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f918 	bl	8008f42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff f80b 	bl	8007d36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d28:	e014      	b.n	8008d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f9d4 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008d30:	e010      	b.n	8008d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f9d0 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008d38:	e00c      	b.n	8008d54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f900 	bl	8008f42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <USBD_SetConfig+0x150>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7fe fff4 	bl	8007d36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	73fb      	strb	r3, [r7, #15]
      break;
 8008d52:	bf00      	nop
  }

  return ret;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000234 	.word	0x20000234

08008d64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	88db      	ldrh	r3, [r3, #6]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d004      	beq.n	8008d80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8e2 	bl	8008f42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d7e:	e023      	b.n	8008dc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	dc02      	bgt.n	8008d92 <USBD_GetConfig+0x2e>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc03      	bgt.n	8008d98 <USBD_GetConfig+0x34>
 8008d90:	e015      	b.n	8008dbe <USBD_GetConfig+0x5a>
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d00b      	beq.n	8008dae <USBD_GetConfig+0x4a>
 8008d96:	e012      	b.n	8008dbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3308      	adds	r3, #8
 8008da2:	2201      	movs	r2, #1
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f93c 	bl	8009024 <USBD_CtlSendData>
        break;
 8008dac:	e00c      	b.n	8008dc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3304      	adds	r3, #4
 8008db2:	2201      	movs	r2, #1
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f934 	bl	8009024 <USBD_CtlSendData>
        break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8be 	bl	8008f42 <USBD_CtlError>
        break;
 8008dc6:	bf00      	nop
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d81e      	bhi.n	8008e26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	88db      	ldrh	r3, [r3, #6]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d004      	beq.n	8008dfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f8a5 	bl	8008f42 <USBD_CtlError>
        break;
 8008df8:	e01a      	b.n	8008e30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f043 0202 	orr.w	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f900 	bl	8009024 <USBD_CtlSendData>
      break;
 8008e24:	e004      	b.n	8008e30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f88a 	bl	8008f42 <USBD_CtlError>
      break;
 8008e2e:	bf00      	nop
  }
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	885b      	ldrh	r3, [r3, #2]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d107      	bne.n	8008e5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f940 	bl	80090d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e58:	e013      	b.n	8008e82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d10b      	bne.n	8008e7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	889b      	ldrh	r3, [r3, #4]
 8008e66:	0a1b      	lsrs	r3, r3, #8
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f930 	bl	80090d8 <USBD_CtlSendStatus>
}
 8008e78:	e003      	b.n	8008e82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f860 	bl	8008f42 <USBD_CtlError>
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d80b      	bhi.n	8008eba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	885b      	ldrh	r3, [r3, #2]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d10c      	bne.n	8008ec4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f910 	bl	80090d8 <USBD_CtlSendStatus>
      }
      break;
 8008eb8:	e004      	b.n	8008ec4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f840 	bl	8008f42 <USBD_CtlError>
      break;
 8008ec2:	e000      	b.n	8008ec6 <USBD_ClrFeature+0x3c>
      break;
 8008ec4:	bf00      	nop
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	781a      	ldrb	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fa17 	bl	800832c <SWAPBYTE>
 8008efe:	4603      	mov	r3, r0
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff fa0a 	bl	800832c <SWAPBYTE>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3301      	adds	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7ff f9fd 	bl	800832c <SWAPBYTE>
 8008f32:	4603      	mov	r3, r0
 8008f34:	461a      	mov	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	80da      	strh	r2, [r3, #6]
}
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f4c:	2180      	movs	r1, #128	; 0x80
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fcea 	bl	8009928 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f54:	2100      	movs	r1, #0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fce6 	bl	8009928 <USBD_LL_StallEP>
}
 8008f5c:	bf00      	nop
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d036      	beq.n	8008fe8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f7e:	6938      	ldr	r0, [r7, #16]
 8008f80:	f000 f836 	bl	8008ff0 <USBD_GetLen>
 8008f84:	4603      	mov	r3, r0
 8008f86:	3301      	adds	r3, #1
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	4413      	add	r3, r2
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	7812      	ldrb	r2, [r2, #0]
 8008f9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2203      	movs	r2, #3
 8008fac:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fb4:	e013      	b.n	8008fde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	4413      	add	r3, r2
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	7812      	ldrb	r2, [r2, #0]
 8008fc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
    idx++;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e7      	bne.n	8008fb6 <USBD_GetString+0x52>
 8008fe6:	e000      	b.n	8008fea <USBD_GetString+0x86>
    return;
 8008fe8:	bf00      	nop
  }
}
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009000:	e005      	b.n	800900e <USBD_GetLen+0x1e>
  {
    len++;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	3301      	adds	r3, #1
 8009006:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3301      	adds	r3, #1
 800900c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1f5      	bne.n	8009002 <USBD_GetLen+0x12>
  }

  return len;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2202      	movs	r2, #2
 8009034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	2100      	movs	r1, #0
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f000 fcf6 	bl	8009a3c <USBD_LL_Transmit>

  return USBD_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	2100      	movs	r1, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 fce5 	bl	8009a3c <USBD_LL_Transmit>

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2203      	movs	r2, #3
 800908c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	2100      	movs	r1, #0
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fce9 	bl	8009a7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	2100      	movs	r1, #0
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fcd8 	bl	8009a7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2204      	movs	r2, #4
 80090e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090e8:	2300      	movs	r3, #0
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fca4 	bl	8009a3c <USBD_LL_Transmit>

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2205      	movs	r2, #5
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800910e:	2300      	movs	r3, #0
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fcb2 	bl	8009a7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009128:	2200      	movs	r2, #0
 800912a:	4912      	ldr	r1, [pc, #72]	; (8009174 <MX_USB_Device_Init+0x50>)
 800912c:	4812      	ldr	r0, [pc, #72]	; (8009178 <MX_USB_Device_Init+0x54>)
 800912e:	f7fe fd69 	bl	8007c04 <USBD_Init>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009138:	f7f7 f9b0 	bl	800049c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800913c:	490f      	ldr	r1, [pc, #60]	; (800917c <MX_USB_Device_Init+0x58>)
 800913e:	480e      	ldr	r0, [pc, #56]	; (8009178 <MX_USB_Device_Init+0x54>)
 8009140:	f7fe fd90 	bl	8007c64 <USBD_RegisterClass>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800914a:	f7f7 f9a7 	bl	800049c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800914e:	490c      	ldr	r1, [pc, #48]	; (8009180 <MX_USB_Device_Init+0x5c>)
 8009150:	4809      	ldr	r0, [pc, #36]	; (8009178 <MX_USB_Device_Init+0x54>)
 8009152:	f7fe fc87 	bl	8007a64 <USBD_CDC_RegisterInterface>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800915c:	f7f7 f99e 	bl	800049c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009160:	4805      	ldr	r0, [pc, #20]	; (8009178 <MX_USB_Device_Init+0x54>)
 8009162:	f7fe fdb5 	bl	8007cd0 <USBD_Start>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800916c:	f7f7 f996 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009170:	bf00      	nop
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200000f4 	.word	0x200000f4
 8009178:	20000238 	.word	0x20000238
 800917c:	20000060 	.word	0x20000060
 8009180:	200000e0 	.word	0x200000e0

08009184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009188:	2200      	movs	r2, #0
 800918a:	4905      	ldr	r1, [pc, #20]	; (80091a0 <CDC_Init_FS+0x1c>)
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <CDC_Init_FS+0x20>)
 800918e:	f7fe fc83 	bl	8007a98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009192:	4905      	ldr	r1, [pc, #20]	; (80091a8 <CDC_Init_FS+0x24>)
 8009194:	4803      	ldr	r0, [pc, #12]	; (80091a4 <CDC_Init_FS+0x20>)
 8009196:	f7fe fca1 	bl	8007adc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800919a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800919c:	4618      	mov	r0, r3
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000d14 	.word	0x20000d14
 80091a4:	20000238 	.word	0x20000238
 80091a8:	20000514 	.word	0x20000514

080091ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
 80091c8:	4613      	mov	r3, r2
 80091ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	2b23      	cmp	r3, #35	; 0x23
 80091d0:	d84a      	bhi.n	8009268 <CDC_Control_FS+0xac>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <CDC_Control_FS+0x1c>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	08009269 	.word	0x08009269
 80091dc:	08009269 	.word	0x08009269
 80091e0:	08009269 	.word	0x08009269
 80091e4:	08009269 	.word	0x08009269
 80091e8:	08009269 	.word	0x08009269
 80091ec:	08009269 	.word	0x08009269
 80091f0:	08009269 	.word	0x08009269
 80091f4:	08009269 	.word	0x08009269
 80091f8:	08009269 	.word	0x08009269
 80091fc:	08009269 	.word	0x08009269
 8009200:	08009269 	.word	0x08009269
 8009204:	08009269 	.word	0x08009269
 8009208:	08009269 	.word	0x08009269
 800920c:	08009269 	.word	0x08009269
 8009210:	08009269 	.word	0x08009269
 8009214:	08009269 	.word	0x08009269
 8009218:	08009269 	.word	0x08009269
 800921c:	08009269 	.word	0x08009269
 8009220:	08009269 	.word	0x08009269
 8009224:	08009269 	.word	0x08009269
 8009228:	08009269 	.word	0x08009269
 800922c:	08009269 	.word	0x08009269
 8009230:	08009269 	.word	0x08009269
 8009234:	08009269 	.word	0x08009269
 8009238:	08009269 	.word	0x08009269
 800923c:	08009269 	.word	0x08009269
 8009240:	08009269 	.word	0x08009269
 8009244:	08009269 	.word	0x08009269
 8009248:	08009269 	.word	0x08009269
 800924c:	08009269 	.word	0x08009269
 8009250:	08009269 	.word	0x08009269
 8009254:	08009269 	.word	0x08009269
 8009258:	08009269 	.word	0x08009269
 800925c:	08009269 	.word	0x08009269
 8009260:	08009269 	.word	0x08009269
 8009264:	08009269 	.word	0x08009269
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009268:	bf00      	nop
  }

  return (USBD_OK);
 800926a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	4805      	ldr	r0, [pc, #20]	; (800929c <CDC_Receive_FS+0x24>)
 8009286:	f7fe fc29 	bl	8007adc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800928a:	4804      	ldr	r0, [pc, #16]	; (800929c <CDC_Receive_FS+0x24>)
 800928c:	f7fe fc84 	bl	8007b98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009290:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000238 	.word	0x20000238

080092a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092b0:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <CDC_Transmit_FS+0x48>)
 80092b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e00b      	b.n	80092de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092c6:	887b      	ldrh	r3, [r7, #2]
 80092c8:	461a      	mov	r2, r3
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	4806      	ldr	r0, [pc, #24]	; (80092e8 <CDC_Transmit_FS+0x48>)
 80092ce:	f7fe fbe3 	bl	8007a98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <CDC_Transmit_FS+0x48>)
 80092d4:	f7fe fc20 	bl	8007b18 <USBD_CDC_TransmitPacket>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000238 	.word	0x20000238

080092ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009302:	4618      	mov	r0, r3
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
	...

08009310 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2212      	movs	r2, #18
 8009320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009322:	4b03      	ldr	r3, [pc, #12]	; (8009330 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	20000114 	.word	0x20000114

08009334 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	6039      	str	r1, [r7, #0]
 800933e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2204      	movs	r2, #4
 8009344:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009346:	4b03      	ldr	r3, [pc, #12]	; (8009354 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	20000128 	.word	0x20000128

08009358 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	6039      	str	r1, [r7, #0]
 8009362:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d105      	bne.n	8009376 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	4907      	ldr	r1, [pc, #28]	; (800938c <USBD_CDC_ProductStrDescriptor+0x34>)
 800936e:	4808      	ldr	r0, [pc, #32]	; (8009390 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009370:	f7ff fdf8 	bl	8008f64 <USBD_GetString>
 8009374:	e004      	b.n	8009380 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	4904      	ldr	r1, [pc, #16]	; (800938c <USBD_CDC_ProductStrDescriptor+0x34>)
 800937a:	4805      	ldr	r0, [pc, #20]	; (8009390 <USBD_CDC_ProductStrDescriptor+0x38>)
 800937c:	f7ff fdf2 	bl	8008f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20001514 	.word	0x20001514
 8009390:	0800ac04 	.word	0x0800ac04

08009394 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	4904      	ldr	r1, [pc, #16]	; (80093b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80093a4:	4804      	ldr	r0, [pc, #16]	; (80093b8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80093a6:	f7ff fddd 	bl	8008f64 <USBD_GetString>
  return USBD_StrDesc;
 80093aa:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20001514 	.word	0x20001514
 80093b8:	0800ac1c 	.word	0x0800ac1c

080093bc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	221a      	movs	r2, #26
 80093cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093ce:	f000 f843 	bl	8009458 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093d2:	4b02      	ldr	r3, [pc, #8]	; (80093dc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	2000012c 	.word	0x2000012c

080093e0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	4603      	mov	r3, r0
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d105      	bne.n	80093fe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4907      	ldr	r1, [pc, #28]	; (8009414 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093f6:	4808      	ldr	r0, [pc, #32]	; (8009418 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093f8:	f7ff fdb4 	bl	8008f64 <USBD_GetString>
 80093fc:	e004      	b.n	8009408 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	4904      	ldr	r1, [pc, #16]	; (8009414 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009402:	4805      	ldr	r0, [pc, #20]	; (8009418 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009404:	f7ff fdae 	bl	8008f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009408:	4b02      	ldr	r3, [pc, #8]	; (8009414 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20001514 	.word	0x20001514
 8009418:	0800ac30 	.word	0x0800ac30

0800941c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	6039      	str	r1, [r7, #0]
 8009426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d105      	bne.n	800943a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	4907      	ldr	r1, [pc, #28]	; (8009450 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009432:	4808      	ldr	r0, [pc, #32]	; (8009454 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009434:	f7ff fd96 	bl	8008f64 <USBD_GetString>
 8009438:	e004      	b.n	8009444 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	4904      	ldr	r1, [pc, #16]	; (8009450 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800943e:	4805      	ldr	r0, [pc, #20]	; (8009454 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009440:	f7ff fd90 	bl	8008f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	20001514 	.word	0x20001514
 8009454:	0800ac3c 	.word	0x0800ac3c

08009458 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800945e:	4b0f      	ldr	r3, [pc, #60]	; (800949c <Get_SerialNum+0x44>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009464:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <Get_SerialNum+0x48>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800946a:	4b0e      	ldr	r3, [pc, #56]	; (80094a4 <Get_SerialNum+0x4c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4413      	add	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d009      	beq.n	8009492 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800947e:	2208      	movs	r2, #8
 8009480:	4909      	ldr	r1, [pc, #36]	; (80094a8 <Get_SerialNum+0x50>)
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f814 	bl	80094b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009488:	2204      	movs	r2, #4
 800948a:	4908      	ldr	r1, [pc, #32]	; (80094ac <Get_SerialNum+0x54>)
 800948c:	68b8      	ldr	r0, [r7, #8]
 800948e:	f000 f80f 	bl	80094b0 <IntToUnicode>
  }
}
 8009492:	bf00      	nop
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	1fff7590 	.word	0x1fff7590
 80094a0:	1fff7594 	.word	0x1fff7594
 80094a4:	1fff7598 	.word	0x1fff7598
 80094a8:	2000012e 	.word	0x2000012e
 80094ac:	2000013e 	.word	0x2000013e

080094b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	4613      	mov	r3, r2
 80094bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094c2:	2300      	movs	r3, #0
 80094c4:	75fb      	strb	r3, [r7, #23]
 80094c6:	e027      	b.n	8009518 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	0f1b      	lsrs	r3, r3, #28
 80094cc:	2b09      	cmp	r3, #9
 80094ce:	d80b      	bhi.n	80094e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	0f1b      	lsrs	r3, r3, #28
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	4619      	mov	r1, r3
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	440b      	add	r3, r1
 80094e0:	3230      	adds	r2, #48	; 0x30
 80094e2:	b2d2      	uxtb	r2, r2
 80094e4:	701a      	strb	r2, [r3, #0]
 80094e6:	e00a      	b.n	80094fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	0f1b      	lsrs	r3, r3, #28
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	4619      	mov	r1, r3
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	440b      	add	r3, r1
 80094f8:	3237      	adds	r2, #55	; 0x37
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	011b      	lsls	r3, r3, #4
 8009502:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	3301      	adds	r3, #1
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	4413      	add	r3, r2
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	3301      	adds	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
 8009518:	7dfa      	ldrb	r2, [r7, #23]
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	429a      	cmp	r2, r3
 800951e:	d3d3      	bcc.n	80094c8 <IntToUnicode+0x18>
  }
}
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <LL_AHB2_GRP1_EnableClock>:
{
 800952e:	b480      	push	{r7}
 8009530:	b085      	sub	sp, #20
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800953a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800953c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4313      	orrs	r3, r2
 8009544:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800954a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4013      	ands	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009552:	68fb      	ldr	r3, [r7, #12]
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <LL_APB1_GRP1_EnableClock>:
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800956c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800956e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4313      	orrs	r3, r2
 8009576:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800957c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4013      	ands	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009584:	68fb      	ldr	r3, [r7, #12]
}
 8009586:	bf00      	nop
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b09c      	sub	sp, #112	; 0x70
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800959c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	605a      	str	r2, [r3, #4]
 80095a6:	609a      	str	r2, [r3, #8]
 80095a8:	60da      	str	r2, [r3, #12]
 80095aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	2250      	movs	r2, #80	; 0x50
 80095b2:	2100      	movs	r1, #0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fb41 	bl	8009c3c <memset>
  if(pcdHandle->Instance==USB)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a23      	ldr	r2, [pc, #140]	; (800964c <HAL_PCD_MspInit+0xb8>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d13e      	bne.n	8009642 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80095c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80095ca:	2318      	movs	r3, #24
 80095cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80095ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80095d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80095da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80095de:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80095e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80095e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80095ea:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095ec:	f107 030c 	add.w	r3, r7, #12
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fa fdbd 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80095fc:	f7f6 ff4e 	bl	800049c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009600:	2001      	movs	r0, #1
 8009602:	f7ff ff94 	bl	800952e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009606:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800960a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800960c:	2302      	movs	r3, #2
 800960e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009610:	2300      	movs	r3, #0
 8009612:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009614:	2300      	movs	r3, #0
 8009616:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009618:	230a      	movs	r3, #10
 800961a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800961c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009620:	4619      	mov	r1, r3
 8009622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009626:	f7f7 fb9d 	bl	8000d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800962a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800962e:	f7ff ff97 	bl	8009560 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	2014      	movs	r0, #20
 8009638:	f7f7 fb5f 	bl	8000cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800963c:	2014      	movs	r0, #20
 800963e:	f7f7 fb76 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009642:	bf00      	nop
 8009644:	3770      	adds	r7, #112	; 0x70
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	40006800 	.word	0x40006800

08009650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe fb7f 	bl	8007d6a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	440b      	add	r3, r1
 8009694:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	4619      	mov	r1, r3
 800969e:	f7fe fbb9 	bl	8007e14 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096bc:	78fa      	ldrb	r2, [r7, #3]
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	440b      	add	r3, r1
 80096ca:	333c      	adds	r3, #60	; 0x3c
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	4619      	mov	r1, r3
 80096d2:	f7fe fc52 	bl	8007f7a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fd8c 	bl	800820a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80096f2:	bf00      	nop
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009702:	2301      	movs	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d001      	beq.n	8009712 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800970e:	f7f6 fec5 	bl	800049c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009718:	7bfa      	ldrb	r2, [r7, #15]
 800971a:	4611      	mov	r1, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fd30 	bl	8008182 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fcd8 	bl	80080de <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe fd2b 	bl	80081a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009754:	4b04      	ldr	r3, [pc, #16]	; (8009768 <HAL_PCD_SuspendCallback+0x30>)
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	4a03      	ldr	r2, [pc, #12]	; (8009768 <HAL_PCD_SuspendCallback+0x30>)
 800975a:	f043 0306 	orr.w	r3, r3, #6
 800975e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	e000ed00 	.word	0xe000ed00

0800976c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800977c:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <HAL_PCD_ResumeCallback+0x34>)
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	4a07      	ldr	r2, [pc, #28]	; (80097a0 <HAL_PCD_ResumeCallback+0x34>)
 8009782:	f023 0306 	bic.w	r3, r3, #6
 8009786:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009788:	f000 f9fc 	bl	8009b84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fd21 	bl	80081da <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000ed00 	.word	0xe000ed00

080097a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80097ac:	4a2c      	ldr	r2, [pc, #176]	; (8009860 <USBD_LL_Init+0xbc>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a2a      	ldr	r2, [pc, #168]	; (8009860 <USBD_LL_Init+0xbc>)
 80097b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80097bc:	f7f9 f9d4 	bl	8002b68 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <USBD_LL_Init+0xbc>)
 80097c2:	4a28      	ldr	r2, [pc, #160]	; (8009864 <USBD_LL_Init+0xc0>)
 80097c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097c6:	4b26      	ldr	r3, [pc, #152]	; (8009860 <USBD_LL_Init+0xbc>)
 80097c8:	2208      	movs	r2, #8
 80097ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097cc:	4b24      	ldr	r3, [pc, #144]	; (8009860 <USBD_LL_Init+0xbc>)
 80097ce:	2202      	movs	r2, #2
 80097d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097d2:	4b23      	ldr	r3, [pc, #140]	; (8009860 <USBD_LL_Init+0xbc>)
 80097d4:	2202      	movs	r2, #2
 80097d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80097d8:	4b21      	ldr	r3, [pc, #132]	; (8009860 <USBD_LL_Init+0xbc>)
 80097da:	2200      	movs	r2, #0
 80097dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097de:	4b20      	ldr	r3, [pc, #128]	; (8009860 <USBD_LL_Init+0xbc>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097e4:	4b1e      	ldr	r3, [pc, #120]	; (8009860 <USBD_LL_Init+0xbc>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097ea:	4b1d      	ldr	r3, [pc, #116]	; (8009860 <USBD_LL_Init+0xbc>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097f0:	481b      	ldr	r0, [pc, #108]	; (8009860 <USBD_LL_Init+0xbc>)
 80097f2:	f7f7 fc57 	bl	80010a4 <HAL_PCD_Init>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80097fc:	f7f6 fe4e 	bl	800049c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009806:	2318      	movs	r3, #24
 8009808:	2200      	movs	r2, #0
 800980a:	2100      	movs	r1, #0
 800980c:	f7f9 f920 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009816:	2358      	movs	r3, #88	; 0x58
 8009818:	2200      	movs	r2, #0
 800981a:	2180      	movs	r1, #128	; 0x80
 800981c:	f7f9 f918 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009826:	23c0      	movs	r3, #192	; 0xc0
 8009828:	2200      	movs	r2, #0
 800982a:	2181      	movs	r1, #129	; 0x81
 800982c:	f7f9 f910 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009836:	f44f 7388 	mov.w	r3, #272	; 0x110
 800983a:	2200      	movs	r2, #0
 800983c:	2101      	movs	r1, #1
 800983e:	f7f9 f907 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800984c:	2200      	movs	r2, #0
 800984e:	2182      	movs	r1, #130	; 0x82
 8009850:	f7f9 f8fe 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20001714 	.word	0x20001714
 8009864:	40006800 	.word	0x40006800

08009868 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800987e:	4618      	mov	r0, r3
 8009880:	f7f7 fce9 	bl	8001256 <HAL_PCD_Start>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f980 	bl	8009b90 <USBD_Get_USB_Status>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009894:	7bbb      	ldrb	r3, [r7, #14]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	4608      	mov	r0, r1
 80098a8:	4611      	mov	r1, r2
 80098aa:	461a      	mov	r2, r3
 80098ac:	4603      	mov	r3, r0
 80098ae:	70fb      	strb	r3, [r7, #3]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70bb      	strb	r3, [r7, #2]
 80098b4:	4613      	mov	r3, r2
 80098b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098c6:	78bb      	ldrb	r3, [r7, #2]
 80098c8:	883a      	ldrh	r2, [r7, #0]
 80098ca:	78f9      	ldrb	r1, [r7, #3]
 80098cc:	f7f7 fe31 	bl	8001532 <HAL_PCD_EP_Open>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 f95a 	bl	8009b90 <USBD_Get_USB_Status>
 80098dc:	4603      	mov	r3, r0
 80098de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009904:	78fa      	ldrb	r2, [r7, #3]
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f7f7 fe6f 	bl	80015ec <HAL_PCD_EP_Close>
 800990e:	4603      	mov	r3, r0
 8009910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009912:	7bfb      	ldrb	r3, [r7, #15]
 8009914:	4618      	mov	r0, r3
 8009916:	f000 f93b 	bl	8009b90 <USBD_Get_USB_Status>
 800991a:	4603      	mov	r3, r0
 800991c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800991e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7f7 ff18 	bl	800177c <HAL_PCD_EP_SetStall>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f91c 	bl	8009b90 <USBD_Get_USB_Status>
 8009958:	4603      	mov	r3, r0
 800995a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800995c:	7bbb      	ldrb	r3, [r7, #14]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	460b      	mov	r3, r1
 8009970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009980:	78fa      	ldrb	r2, [r7, #3]
 8009982:	4611      	mov	r1, r2
 8009984:	4618      	mov	r0, r3
 8009986:	f7f7 ff4b 	bl	8001820 <HAL_PCD_EP_ClrStall>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 f8fd 	bl	8009b90 <USBD_Get_USB_Status>
 8009996:	4603      	mov	r3, r0
 8009998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800999a:	7bbb      	ldrb	r3, [r7, #14]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	da0c      	bge.n	80099da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	440b      	add	r3, r1
 80099d4:	3302      	adds	r3, #2
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	e00b      	b.n	80099f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e0:	68f9      	ldr	r1, [r7, #12]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	440b      	add	r3, r1
 80099ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	460b      	mov	r3, r1
 8009a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7f7 fd63 	bl	80014e8 <HAL_PCD_SetAddress>
 8009a22:	4603      	mov	r3, r0
 8009a24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 f8b1 	bl	8009b90 <USBD_Get_USB_Status>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a5a:	7af9      	ldrb	r1, [r7, #11]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	f7f7 fe55 	bl	800170e <HAL_PCD_EP_Transmit>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f890 	bl	8009b90 <USBD_Get_USB_Status>
 8009a70:	4603      	mov	r3, r0
 8009a72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a74:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b086      	sub	sp, #24
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a9c:	7af9      	ldrb	r1, [r7, #11]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	f7f7 fdeb 	bl	800167c <HAL_PCD_EP_Receive>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 f86f 	bl	8009b90 <USBD_Get_USB_Status>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ab6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ad2:	78fa      	ldrb	r2, [r7, #3]
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7f7 fe01 	bl	80016de <HAL_PCD_EP_GetRxCount>
 8009adc:	4603      	mov	r3, r0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <HAL_PCDEx_LPM_Callback+0x18>
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d013      	beq.n	8009b26 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009afe:	e023      	b.n	8009b48 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d007      	beq.n	8009b18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009b08:	f000 f83c 	bl	8009b84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b0c:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b12:	f023 0306 	bic.w	r3, r3, #6
 8009b16:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe fb5b 	bl	80081da <USBD_LL_Resume>
    break;
 8009b24:	e010      	b.n	8009b48 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe fb38 	bl	80081a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b3a:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	4a04      	ldr	r2, [pc, #16]	; (8009b50 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b40:	f043 0306 	orr.w	r3, r3, #6
 8009b44:	6113      	str	r3, [r2, #16]
    break;
 8009b46:	bf00      	nop
}
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	e000ed00 	.word	0xe000ed00

08009b54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b5c:	4b03      	ldr	r3, [pc, #12]	; (8009b6c <USBD_static_malloc+0x18>)
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	20001a08 	.word	0x20001a08

08009b70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009b88:	f7f6 fb78 	bl	800027c <SystemClock_Config>
}
 8009b8c:	bf00      	nop
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d817      	bhi.n	8009bd4 <USBD_Get_USB_Status+0x44>
 8009ba4:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <USBD_Get_USB_Status+0x1c>)
 8009ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009baa:	bf00      	nop
 8009bac:	08009bbd 	.word	0x08009bbd
 8009bb0:	08009bc3 	.word	0x08009bc3
 8009bb4:	08009bc9 	.word	0x08009bc9
 8009bb8:	08009bcf 	.word	0x08009bcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc0:	e00b      	b.n	8009bda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc6:	e008      	b.n	8009bda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	73fb      	strb	r3, [r7, #15]
    break;
 8009bcc:	e005      	b.n	8009bda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd2:	e002      	b.n	8009bda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd8:	bf00      	nop
  }
  return usb_status;
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <__errno>:
 8009be8:	4b01      	ldr	r3, [pc, #4]	; (8009bf0 <__errno+0x8>)
 8009bea:	6818      	ldr	r0, [r3, #0]
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	20000148 	.word	0x20000148

08009bf4 <__libc_init_array>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	4d0d      	ldr	r5, [pc, #52]	; (8009c2c <__libc_init_array+0x38>)
 8009bf8:	4c0d      	ldr	r4, [pc, #52]	; (8009c30 <__libc_init_array+0x3c>)
 8009bfa:	1b64      	subs	r4, r4, r5
 8009bfc:	10a4      	asrs	r4, r4, #2
 8009bfe:	2600      	movs	r6, #0
 8009c00:	42a6      	cmp	r6, r4
 8009c02:	d109      	bne.n	8009c18 <__libc_init_array+0x24>
 8009c04:	4d0b      	ldr	r5, [pc, #44]	; (8009c34 <__libc_init_array+0x40>)
 8009c06:	4c0c      	ldr	r4, [pc, #48]	; (8009c38 <__libc_init_array+0x44>)
 8009c08:	f000 ffae 	bl	800ab68 <_init>
 8009c0c:	1b64      	subs	r4, r4, r5
 8009c0e:	10a4      	asrs	r4, r4, #2
 8009c10:	2600      	movs	r6, #0
 8009c12:	42a6      	cmp	r6, r4
 8009c14:	d105      	bne.n	8009c22 <__libc_init_array+0x2e>
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c1c:	4798      	blx	r3
 8009c1e:	3601      	adds	r6, #1
 8009c20:	e7ee      	b.n	8009c00 <__libc_init_array+0xc>
 8009c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c26:	4798      	blx	r3
 8009c28:	3601      	adds	r6, #1
 8009c2a:	e7f2      	b.n	8009c12 <__libc_init_array+0x1e>
 8009c2c:	0800ad64 	.word	0x0800ad64
 8009c30:	0800ad64 	.word	0x0800ad64
 8009c34:	0800ad64 	.word	0x0800ad64
 8009c38:	0800ad68 	.word	0x0800ad68

08009c3c <memset>:
 8009c3c:	4402      	add	r2, r0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d100      	bne.n	8009c46 <memset+0xa>
 8009c44:	4770      	bx	lr
 8009c46:	f803 1b01 	strb.w	r1, [r3], #1
 8009c4a:	e7f9      	b.n	8009c40 <memset+0x4>

08009c4c <iprintf>:
 8009c4c:	b40f      	push	{r0, r1, r2, r3}
 8009c4e:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <iprintf+0x2c>)
 8009c50:	b513      	push	{r0, r1, r4, lr}
 8009c52:	681c      	ldr	r4, [r3, #0]
 8009c54:	b124      	cbz	r4, 8009c60 <iprintf+0x14>
 8009c56:	69a3      	ldr	r3, [r4, #24]
 8009c58:	b913      	cbnz	r3, 8009c60 <iprintf+0x14>
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f866 	bl	8009d2c <__sinit>
 8009c60:	ab05      	add	r3, sp, #20
 8009c62:	9a04      	ldr	r2, [sp, #16]
 8009c64:	68a1      	ldr	r1, [r4, #8]
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 f9bd 	bl	8009fe8 <_vfiprintf_r>
 8009c6e:	b002      	add	sp, #8
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	b004      	add	sp, #16
 8009c76:	4770      	bx	lr
 8009c78:	20000148 	.word	0x20000148

08009c7c <std>:
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	e9c0 3300 	strd	r3, r3, [r0]
 8009c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c8a:	6083      	str	r3, [r0, #8]
 8009c8c:	8181      	strh	r1, [r0, #12]
 8009c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8009c90:	81c2      	strh	r2, [r0, #14]
 8009c92:	6183      	str	r3, [r0, #24]
 8009c94:	4619      	mov	r1, r3
 8009c96:	2208      	movs	r2, #8
 8009c98:	305c      	adds	r0, #92	; 0x5c
 8009c9a:	f7ff ffcf 	bl	8009c3c <memset>
 8009c9e:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <std+0x38>)
 8009ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ca2:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <std+0x3c>)
 8009ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ca6:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <std+0x40>)
 8009ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009caa:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <std+0x44>)
 8009cac:	6224      	str	r4, [r4, #32]
 8009cae:	6323      	str	r3, [r4, #48]	; 0x30
 8009cb0:	bd10      	pop	{r4, pc}
 8009cb2:	bf00      	nop
 8009cb4:	0800a591 	.word	0x0800a591
 8009cb8:	0800a5b3 	.word	0x0800a5b3
 8009cbc:	0800a5eb 	.word	0x0800a5eb
 8009cc0:	0800a60f 	.word	0x0800a60f

08009cc4 <_cleanup_r>:
 8009cc4:	4901      	ldr	r1, [pc, #4]	; (8009ccc <_cleanup_r+0x8>)
 8009cc6:	f000 b8af 	b.w	8009e28 <_fwalk_reent>
 8009cca:	bf00      	nop
 8009ccc:	0800a8e9 	.word	0x0800a8e9

08009cd0 <__sfmoreglue>:
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	2268      	movs	r2, #104	; 0x68
 8009cd4:	1e4d      	subs	r5, r1, #1
 8009cd6:	4355      	muls	r5, r2
 8009cd8:	460e      	mov	r6, r1
 8009cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cde:	f000 f8e5 	bl	8009eac <_malloc_r>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	b140      	cbz	r0, 8009cf8 <__sfmoreglue+0x28>
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8009cec:	300c      	adds	r0, #12
 8009cee:	60a0      	str	r0, [r4, #8]
 8009cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cf4:	f7ff ffa2 	bl	8009c3c <memset>
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}

08009cfc <__sfp_lock_acquire>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__sfp_lock_acquire+0x8>)
 8009cfe:	f000 b8b3 	b.w	8009e68 <__retarget_lock_acquire_recursive>
 8009d02:	bf00      	nop
 8009d04:	20001c29 	.word	0x20001c29

08009d08 <__sfp_lock_release>:
 8009d08:	4801      	ldr	r0, [pc, #4]	; (8009d10 <__sfp_lock_release+0x8>)
 8009d0a:	f000 b8ae 	b.w	8009e6a <__retarget_lock_release_recursive>
 8009d0e:	bf00      	nop
 8009d10:	20001c29 	.word	0x20001c29

08009d14 <__sinit_lock_acquire>:
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__sinit_lock_acquire+0x8>)
 8009d16:	f000 b8a7 	b.w	8009e68 <__retarget_lock_acquire_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	20001c2a 	.word	0x20001c2a

08009d20 <__sinit_lock_release>:
 8009d20:	4801      	ldr	r0, [pc, #4]	; (8009d28 <__sinit_lock_release+0x8>)
 8009d22:	f000 b8a2 	b.w	8009e6a <__retarget_lock_release_recursive>
 8009d26:	bf00      	nop
 8009d28:	20001c2a 	.word	0x20001c2a

08009d2c <__sinit>:
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	4604      	mov	r4, r0
 8009d30:	f7ff fff0 	bl	8009d14 <__sinit_lock_acquire>
 8009d34:	69a3      	ldr	r3, [r4, #24]
 8009d36:	b11b      	cbz	r3, 8009d40 <__sinit+0x14>
 8009d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d3c:	f7ff bff0 	b.w	8009d20 <__sinit_lock_release>
 8009d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d44:	6523      	str	r3, [r4, #80]	; 0x50
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <__sinit+0x68>)
 8009d48:	4a13      	ldr	r2, [pc, #76]	; (8009d98 <__sinit+0x6c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	bf04      	itt	eq
 8009d52:	2301      	moveq	r3, #1
 8009d54:	61a3      	streq	r3, [r4, #24]
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 f820 	bl	8009d9c <__sfp>
 8009d5c:	6060      	str	r0, [r4, #4]
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 f81c 	bl	8009d9c <__sfp>
 8009d64:	60a0      	str	r0, [r4, #8]
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 f818 	bl	8009d9c <__sfp>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	60e0      	str	r0, [r4, #12]
 8009d70:	2104      	movs	r1, #4
 8009d72:	6860      	ldr	r0, [r4, #4]
 8009d74:	f7ff ff82 	bl	8009c7c <std>
 8009d78:	68a0      	ldr	r0, [r4, #8]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	2109      	movs	r1, #9
 8009d7e:	f7ff ff7d 	bl	8009c7c <std>
 8009d82:	68e0      	ldr	r0, [r4, #12]
 8009d84:	2202      	movs	r2, #2
 8009d86:	2112      	movs	r1, #18
 8009d88:	f7ff ff78 	bl	8009c7c <std>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	61a3      	str	r3, [r4, #24]
 8009d90:	e7d2      	b.n	8009d38 <__sinit+0xc>
 8009d92:	bf00      	nop
 8009d94:	0800accc 	.word	0x0800accc
 8009d98:	08009cc5 	.word	0x08009cc5

08009d9c <__sfp>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	4607      	mov	r7, r0
 8009da0:	f7ff ffac 	bl	8009cfc <__sfp_lock_acquire>
 8009da4:	4b1e      	ldr	r3, [pc, #120]	; (8009e20 <__sfp+0x84>)
 8009da6:	681e      	ldr	r6, [r3, #0]
 8009da8:	69b3      	ldr	r3, [r6, #24]
 8009daa:	b913      	cbnz	r3, 8009db2 <__sfp+0x16>
 8009dac:	4630      	mov	r0, r6
 8009dae:	f7ff ffbd 	bl	8009d2c <__sinit>
 8009db2:	3648      	adds	r6, #72	; 0x48
 8009db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	d503      	bpl.n	8009dc4 <__sfp+0x28>
 8009dbc:	6833      	ldr	r3, [r6, #0]
 8009dbe:	b30b      	cbz	r3, 8009e04 <__sfp+0x68>
 8009dc0:	6836      	ldr	r6, [r6, #0]
 8009dc2:	e7f7      	b.n	8009db4 <__sfp+0x18>
 8009dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009dc8:	b9d5      	cbnz	r5, 8009e00 <__sfp+0x64>
 8009dca:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <__sfp+0x88>)
 8009dcc:	60e3      	str	r3, [r4, #12]
 8009dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8009dd4:	f000 f847 	bl	8009e66 <__retarget_lock_init_recursive>
 8009dd8:	f7ff ff96 	bl	8009d08 <__sfp_lock_release>
 8009ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009de4:	6025      	str	r5, [r4, #0]
 8009de6:	61a5      	str	r5, [r4, #24]
 8009de8:	2208      	movs	r2, #8
 8009dea:	4629      	mov	r1, r5
 8009dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009df0:	f7ff ff24 	bl	8009c3c <memset>
 8009df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e00:	3468      	adds	r4, #104	; 0x68
 8009e02:	e7d9      	b.n	8009db8 <__sfp+0x1c>
 8009e04:	2104      	movs	r1, #4
 8009e06:	4638      	mov	r0, r7
 8009e08:	f7ff ff62 	bl	8009cd0 <__sfmoreglue>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	6030      	str	r0, [r6, #0]
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d1d5      	bne.n	8009dc0 <__sfp+0x24>
 8009e14:	f7ff ff78 	bl	8009d08 <__sfp_lock_release>
 8009e18:	230c      	movs	r3, #12
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	e7ee      	b.n	8009dfc <__sfp+0x60>
 8009e1e:	bf00      	nop
 8009e20:	0800accc 	.word	0x0800accc
 8009e24:	ffff0001 	.word	0xffff0001

08009e28 <_fwalk_reent>:
 8009e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	4688      	mov	r8, r1
 8009e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e34:	2700      	movs	r7, #0
 8009e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e3e:	d505      	bpl.n	8009e4c <_fwalk_reent+0x24>
 8009e40:	6824      	ldr	r4, [r4, #0]
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	d1f7      	bne.n	8009e36 <_fwalk_reent+0xe>
 8009e46:	4638      	mov	r0, r7
 8009e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d907      	bls.n	8009e62 <_fwalk_reent+0x3a>
 8009e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e56:	3301      	adds	r3, #1
 8009e58:	d003      	beq.n	8009e62 <_fwalk_reent+0x3a>
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	47c0      	blx	r8
 8009e60:	4307      	orrs	r7, r0
 8009e62:	3568      	adds	r5, #104	; 0x68
 8009e64:	e7e9      	b.n	8009e3a <_fwalk_reent+0x12>

08009e66 <__retarget_lock_init_recursive>:
 8009e66:	4770      	bx	lr

08009e68 <__retarget_lock_acquire_recursive>:
 8009e68:	4770      	bx	lr

08009e6a <__retarget_lock_release_recursive>:
 8009e6a:	4770      	bx	lr

08009e6c <sbrk_aligned>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	4e0e      	ldr	r6, [pc, #56]	; (8009ea8 <sbrk_aligned+0x3c>)
 8009e70:	460c      	mov	r4, r1
 8009e72:	6831      	ldr	r1, [r6, #0]
 8009e74:	4605      	mov	r5, r0
 8009e76:	b911      	cbnz	r1, 8009e7e <sbrk_aligned+0x12>
 8009e78:	f000 fb7a 	bl	800a570 <_sbrk_r>
 8009e7c:	6030      	str	r0, [r6, #0]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f000 fb75 	bl	800a570 <_sbrk_r>
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	d00a      	beq.n	8009ea0 <sbrk_aligned+0x34>
 8009e8a:	1cc4      	adds	r4, r0, #3
 8009e8c:	f024 0403 	bic.w	r4, r4, #3
 8009e90:	42a0      	cmp	r0, r4
 8009e92:	d007      	beq.n	8009ea4 <sbrk_aligned+0x38>
 8009e94:	1a21      	subs	r1, r4, r0
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 fb6a 	bl	800a570 <_sbrk_r>
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d101      	bne.n	8009ea4 <sbrk_aligned+0x38>
 8009ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	20001c30 	.word	0x20001c30

08009eac <_malloc_r>:
 8009eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb0:	1ccd      	adds	r5, r1, #3
 8009eb2:	f025 0503 	bic.w	r5, r5, #3
 8009eb6:	3508      	adds	r5, #8
 8009eb8:	2d0c      	cmp	r5, #12
 8009eba:	bf38      	it	cc
 8009ebc:	250c      	movcc	r5, #12
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	db01      	blt.n	8009ec8 <_malloc_r+0x1c>
 8009ec4:	42a9      	cmp	r1, r5
 8009ec6:	d905      	bls.n	8009ed4 <_malloc_r+0x28>
 8009ec8:	230c      	movs	r3, #12
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	2600      	movs	r6, #0
 8009ece:	4630      	mov	r0, r6
 8009ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed4:	4e2e      	ldr	r6, [pc, #184]	; (8009f90 <_malloc_r+0xe4>)
 8009ed6:	f000 fdbb 	bl	800aa50 <__malloc_lock>
 8009eda:	6833      	ldr	r3, [r6, #0]
 8009edc:	461c      	mov	r4, r3
 8009ede:	bb34      	cbnz	r4, 8009f2e <_malloc_r+0x82>
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f7ff ffc2 	bl	8009e6c <sbrk_aligned>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	4604      	mov	r4, r0
 8009eec:	d14d      	bne.n	8009f8a <_malloc_r+0xde>
 8009eee:	6834      	ldr	r4, [r6, #0]
 8009ef0:	4626      	mov	r6, r4
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d140      	bne.n	8009f78 <_malloc_r+0xcc>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4638      	mov	r0, r7
 8009efc:	eb04 0803 	add.w	r8, r4, r3
 8009f00:	f000 fb36 	bl	800a570 <_sbrk_r>
 8009f04:	4580      	cmp	r8, r0
 8009f06:	d13a      	bne.n	8009f7e <_malloc_r+0xd2>
 8009f08:	6821      	ldr	r1, [r4, #0]
 8009f0a:	3503      	adds	r5, #3
 8009f0c:	1a6d      	subs	r5, r5, r1
 8009f0e:	f025 0503 	bic.w	r5, r5, #3
 8009f12:	3508      	adds	r5, #8
 8009f14:	2d0c      	cmp	r5, #12
 8009f16:	bf38      	it	cc
 8009f18:	250c      	movcc	r5, #12
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7ff ffa5 	bl	8009e6c <sbrk_aligned>
 8009f22:	3001      	adds	r0, #1
 8009f24:	d02b      	beq.n	8009f7e <_malloc_r+0xd2>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	442b      	add	r3, r5
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	e00e      	b.n	8009f4c <_malloc_r+0xa0>
 8009f2e:	6822      	ldr	r2, [r4, #0]
 8009f30:	1b52      	subs	r2, r2, r5
 8009f32:	d41e      	bmi.n	8009f72 <_malloc_r+0xc6>
 8009f34:	2a0b      	cmp	r2, #11
 8009f36:	d916      	bls.n	8009f66 <_malloc_r+0xba>
 8009f38:	1961      	adds	r1, r4, r5
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	6025      	str	r5, [r4, #0]
 8009f3e:	bf18      	it	ne
 8009f40:	6059      	strne	r1, [r3, #4]
 8009f42:	6863      	ldr	r3, [r4, #4]
 8009f44:	bf08      	it	eq
 8009f46:	6031      	streq	r1, [r6, #0]
 8009f48:	5162      	str	r2, [r4, r5]
 8009f4a:	604b      	str	r3, [r1, #4]
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f104 060b 	add.w	r6, r4, #11
 8009f52:	f000 fd83 	bl	800aa5c <__malloc_unlock>
 8009f56:	f026 0607 	bic.w	r6, r6, #7
 8009f5a:	1d23      	adds	r3, r4, #4
 8009f5c:	1af2      	subs	r2, r6, r3
 8009f5e:	d0b6      	beq.n	8009ece <_malloc_r+0x22>
 8009f60:	1b9b      	subs	r3, r3, r6
 8009f62:	50a3      	str	r3, [r4, r2]
 8009f64:	e7b3      	b.n	8009ece <_malloc_r+0x22>
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	bf0c      	ite	eq
 8009f6c:	6032      	streq	r2, [r6, #0]
 8009f6e:	605a      	strne	r2, [r3, #4]
 8009f70:	e7ec      	b.n	8009f4c <_malloc_r+0xa0>
 8009f72:	4623      	mov	r3, r4
 8009f74:	6864      	ldr	r4, [r4, #4]
 8009f76:	e7b2      	b.n	8009ede <_malloc_r+0x32>
 8009f78:	4634      	mov	r4, r6
 8009f7a:	6876      	ldr	r6, [r6, #4]
 8009f7c:	e7b9      	b.n	8009ef2 <_malloc_r+0x46>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	603b      	str	r3, [r7, #0]
 8009f82:	4638      	mov	r0, r7
 8009f84:	f000 fd6a 	bl	800aa5c <__malloc_unlock>
 8009f88:	e7a1      	b.n	8009ece <_malloc_r+0x22>
 8009f8a:	6025      	str	r5, [r4, #0]
 8009f8c:	e7de      	b.n	8009f4c <_malloc_r+0xa0>
 8009f8e:	bf00      	nop
 8009f90:	20001c2c 	.word	0x20001c2c

08009f94 <__sfputc_r>:
 8009f94:	6893      	ldr	r3, [r2, #8]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	b410      	push	{r4}
 8009f9c:	6093      	str	r3, [r2, #8]
 8009f9e:	da08      	bge.n	8009fb2 <__sfputc_r+0x1e>
 8009fa0:	6994      	ldr	r4, [r2, #24]
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	db01      	blt.n	8009faa <__sfputc_r+0x16>
 8009fa6:	290a      	cmp	r1, #10
 8009fa8:	d103      	bne.n	8009fb2 <__sfputc_r+0x1e>
 8009faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fae:	f000 bb33 	b.w	800a618 <__swbuf_r>
 8009fb2:	6813      	ldr	r3, [r2, #0]
 8009fb4:	1c58      	adds	r0, r3, #1
 8009fb6:	6010      	str	r0, [r2, #0]
 8009fb8:	7019      	strb	r1, [r3, #0]
 8009fba:	4608      	mov	r0, r1
 8009fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <__sfputs_r>:
 8009fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	18d5      	adds	r5, r2, r3
 8009fcc:	42ac      	cmp	r4, r5
 8009fce:	d101      	bne.n	8009fd4 <__sfputs_r+0x12>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e007      	b.n	8009fe4 <__sfputs_r+0x22>
 8009fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd8:	463a      	mov	r2, r7
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f7ff ffda 	bl	8009f94 <__sfputc_r>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d1f3      	bne.n	8009fcc <__sfputs_r+0xa>
 8009fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fe8 <_vfiprintf_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	460d      	mov	r5, r1
 8009fee:	b09d      	sub	sp, #116	; 0x74
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	4698      	mov	r8, r3
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	b118      	cbz	r0, 800a000 <_vfiprintf_r+0x18>
 8009ff8:	6983      	ldr	r3, [r0, #24]
 8009ffa:	b90b      	cbnz	r3, 800a000 <_vfiprintf_r+0x18>
 8009ffc:	f7ff fe96 	bl	8009d2c <__sinit>
 800a000:	4b89      	ldr	r3, [pc, #548]	; (800a228 <_vfiprintf_r+0x240>)
 800a002:	429d      	cmp	r5, r3
 800a004:	d11b      	bne.n	800a03e <_vfiprintf_r+0x56>
 800a006:	6875      	ldr	r5, [r6, #4]
 800a008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a00a:	07d9      	lsls	r1, r3, #31
 800a00c:	d405      	bmi.n	800a01a <_vfiprintf_r+0x32>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	059a      	lsls	r2, r3, #22
 800a012:	d402      	bmi.n	800a01a <_vfiprintf_r+0x32>
 800a014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a016:	f7ff ff27 	bl	8009e68 <__retarget_lock_acquire_recursive>
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	071b      	lsls	r3, r3, #28
 800a01e:	d501      	bpl.n	800a024 <_vfiprintf_r+0x3c>
 800a020:	692b      	ldr	r3, [r5, #16]
 800a022:	b9eb      	cbnz	r3, 800a060 <_vfiprintf_r+0x78>
 800a024:	4629      	mov	r1, r5
 800a026:	4630      	mov	r0, r6
 800a028:	f000 fb5a 	bl	800a6e0 <__swsetup_r>
 800a02c:	b1c0      	cbz	r0, 800a060 <_vfiprintf_r+0x78>
 800a02e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a030:	07dc      	lsls	r4, r3, #31
 800a032:	d50e      	bpl.n	800a052 <_vfiprintf_r+0x6a>
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	b01d      	add	sp, #116	; 0x74
 800a03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03e:	4b7b      	ldr	r3, [pc, #492]	; (800a22c <_vfiprintf_r+0x244>)
 800a040:	429d      	cmp	r5, r3
 800a042:	d101      	bne.n	800a048 <_vfiprintf_r+0x60>
 800a044:	68b5      	ldr	r5, [r6, #8]
 800a046:	e7df      	b.n	800a008 <_vfiprintf_r+0x20>
 800a048:	4b79      	ldr	r3, [pc, #484]	; (800a230 <_vfiprintf_r+0x248>)
 800a04a:	429d      	cmp	r5, r3
 800a04c:	bf08      	it	eq
 800a04e:	68f5      	ldreq	r5, [r6, #12]
 800a050:	e7da      	b.n	800a008 <_vfiprintf_r+0x20>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	0598      	lsls	r0, r3, #22
 800a056:	d4ed      	bmi.n	800a034 <_vfiprintf_r+0x4c>
 800a058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a05a:	f7ff ff06 	bl	8009e6a <__retarget_lock_release_recursive>
 800a05e:	e7e9      	b.n	800a034 <_vfiprintf_r+0x4c>
 800a060:	2300      	movs	r3, #0
 800a062:	9309      	str	r3, [sp, #36]	; 0x24
 800a064:	2320      	movs	r3, #32
 800a066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a06e:	2330      	movs	r3, #48	; 0x30
 800a070:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a234 <_vfiprintf_r+0x24c>
 800a074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a078:	f04f 0901 	mov.w	r9, #1
 800a07c:	4623      	mov	r3, r4
 800a07e:	469a      	mov	sl, r3
 800a080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a084:	b10a      	cbz	r2, 800a08a <_vfiprintf_r+0xa2>
 800a086:	2a25      	cmp	r2, #37	; 0x25
 800a088:	d1f9      	bne.n	800a07e <_vfiprintf_r+0x96>
 800a08a:	ebba 0b04 	subs.w	fp, sl, r4
 800a08e:	d00b      	beq.n	800a0a8 <_vfiprintf_r+0xc0>
 800a090:	465b      	mov	r3, fp
 800a092:	4622      	mov	r2, r4
 800a094:	4629      	mov	r1, r5
 800a096:	4630      	mov	r0, r6
 800a098:	f7ff ff93 	bl	8009fc2 <__sfputs_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	f000 80aa 	beq.w	800a1f6 <_vfiprintf_r+0x20e>
 800a0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a4:	445a      	add	r2, fp
 800a0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 80a2 	beq.w	800a1f6 <_vfiprintf_r+0x20e>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0bc:	f10a 0a01 	add.w	sl, sl, #1
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	9307      	str	r3, [sp, #28]
 800a0c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ca:	4654      	mov	r4, sl
 800a0cc:	2205      	movs	r2, #5
 800a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d2:	4858      	ldr	r0, [pc, #352]	; (800a234 <_vfiprintf_r+0x24c>)
 800a0d4:	f7f6 f854 	bl	8000180 <memchr>
 800a0d8:	9a04      	ldr	r2, [sp, #16]
 800a0da:	b9d8      	cbnz	r0, 800a114 <_vfiprintf_r+0x12c>
 800a0dc:	06d1      	lsls	r1, r2, #27
 800a0de:	bf44      	itt	mi
 800a0e0:	2320      	movmi	r3, #32
 800a0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e6:	0713      	lsls	r3, r2, #28
 800a0e8:	bf44      	itt	mi
 800a0ea:	232b      	movmi	r3, #43	; 0x2b
 800a0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f6:	d015      	beq.n	800a124 <_vfiprintf_r+0x13c>
 800a0f8:	9a07      	ldr	r2, [sp, #28]
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	4621      	mov	r1, r4
 800a104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a108:	3b30      	subs	r3, #48	; 0x30
 800a10a:	2b09      	cmp	r3, #9
 800a10c:	d94e      	bls.n	800a1ac <_vfiprintf_r+0x1c4>
 800a10e:	b1b0      	cbz	r0, 800a13e <_vfiprintf_r+0x156>
 800a110:	9207      	str	r2, [sp, #28]
 800a112:	e014      	b.n	800a13e <_vfiprintf_r+0x156>
 800a114:	eba0 0308 	sub.w	r3, r0, r8
 800a118:	fa09 f303 	lsl.w	r3, r9, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	46a2      	mov	sl, r4
 800a122:	e7d2      	b.n	800a0ca <_vfiprintf_r+0xe2>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	1d19      	adds	r1, r3, #4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	9103      	str	r1, [sp, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbb      	ittet	lt
 800a130:	425b      	neglt	r3, r3
 800a132:	f042 0202 	orrlt.w	r2, r2, #2
 800a136:	9307      	strge	r3, [sp, #28]
 800a138:	9307      	strlt	r3, [sp, #28]
 800a13a:	bfb8      	it	lt
 800a13c:	9204      	strlt	r2, [sp, #16]
 800a13e:	7823      	ldrb	r3, [r4, #0]
 800a140:	2b2e      	cmp	r3, #46	; 0x2e
 800a142:	d10c      	bne.n	800a15e <_vfiprintf_r+0x176>
 800a144:	7863      	ldrb	r3, [r4, #1]
 800a146:	2b2a      	cmp	r3, #42	; 0x2a
 800a148:	d135      	bne.n	800a1b6 <_vfiprintf_r+0x1ce>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	1d1a      	adds	r2, r3, #4
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	9203      	str	r2, [sp, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	bfb8      	it	lt
 800a156:	f04f 33ff 	movlt.w	r3, #4294967295
 800a15a:	3402      	adds	r4, #2
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a244 <_vfiprintf_r+0x25c>
 800a162:	7821      	ldrb	r1, [r4, #0]
 800a164:	2203      	movs	r2, #3
 800a166:	4650      	mov	r0, sl
 800a168:	f7f6 f80a 	bl	8000180 <memchr>
 800a16c:	b140      	cbz	r0, 800a180 <_vfiprintf_r+0x198>
 800a16e:	2340      	movs	r3, #64	; 0x40
 800a170:	eba0 000a 	sub.w	r0, r0, sl
 800a174:	fa03 f000 	lsl.w	r0, r3, r0
 800a178:	9b04      	ldr	r3, [sp, #16]
 800a17a:	4303      	orrs	r3, r0
 800a17c:	3401      	adds	r4, #1
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a184:	482c      	ldr	r0, [pc, #176]	; (800a238 <_vfiprintf_r+0x250>)
 800a186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a18a:	2206      	movs	r2, #6
 800a18c:	f7f5 fff8 	bl	8000180 <memchr>
 800a190:	2800      	cmp	r0, #0
 800a192:	d03f      	beq.n	800a214 <_vfiprintf_r+0x22c>
 800a194:	4b29      	ldr	r3, [pc, #164]	; (800a23c <_vfiprintf_r+0x254>)
 800a196:	bb1b      	cbnz	r3, 800a1e0 <_vfiprintf_r+0x1f8>
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	3307      	adds	r3, #7
 800a19c:	f023 0307 	bic.w	r3, r3, #7
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	9303      	str	r3, [sp, #12]
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	443b      	add	r3, r7
 800a1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1aa:	e767      	b.n	800a07c <_vfiprintf_r+0x94>
 800a1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	e7a5      	b.n	800a102 <_vfiprintf_r+0x11a>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	3401      	adds	r4, #1
 800a1ba:	9305      	str	r3, [sp, #20]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	f04f 0c0a 	mov.w	ip, #10
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c8:	3a30      	subs	r2, #48	; 0x30
 800a1ca:	2a09      	cmp	r2, #9
 800a1cc:	d903      	bls.n	800a1d6 <_vfiprintf_r+0x1ee>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d0c5      	beq.n	800a15e <_vfiprintf_r+0x176>
 800a1d2:	9105      	str	r1, [sp, #20]
 800a1d4:	e7c3      	b.n	800a15e <_vfiprintf_r+0x176>
 800a1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1da:	4604      	mov	r4, r0
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e7f0      	b.n	800a1c2 <_vfiprintf_r+0x1da>
 800a1e0:	ab03      	add	r3, sp, #12
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4b16      	ldr	r3, [pc, #88]	; (800a240 <_vfiprintf_r+0x258>)
 800a1e8:	a904      	add	r1, sp, #16
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f3af 8000 	nop.w
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	1c78      	adds	r0, r7, #1
 800a1f4:	d1d6      	bne.n	800a1a4 <_vfiprintf_r+0x1bc>
 800a1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1f8:	07d9      	lsls	r1, r3, #31
 800a1fa:	d405      	bmi.n	800a208 <_vfiprintf_r+0x220>
 800a1fc:	89ab      	ldrh	r3, [r5, #12]
 800a1fe:	059a      	lsls	r2, r3, #22
 800a200:	d402      	bmi.n	800a208 <_vfiprintf_r+0x220>
 800a202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a204:	f7ff fe31 	bl	8009e6a <__retarget_lock_release_recursive>
 800a208:	89ab      	ldrh	r3, [r5, #12]
 800a20a:	065b      	lsls	r3, r3, #25
 800a20c:	f53f af12 	bmi.w	800a034 <_vfiprintf_r+0x4c>
 800a210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a212:	e711      	b.n	800a038 <_vfiprintf_r+0x50>
 800a214:	ab03      	add	r3, sp, #12
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	462a      	mov	r2, r5
 800a21a:	4b09      	ldr	r3, [pc, #36]	; (800a240 <_vfiprintf_r+0x258>)
 800a21c:	a904      	add	r1, sp, #16
 800a21e:	4630      	mov	r0, r6
 800a220:	f000 f880 	bl	800a324 <_printf_i>
 800a224:	e7e4      	b.n	800a1f0 <_vfiprintf_r+0x208>
 800a226:	bf00      	nop
 800a228:	0800acf0 	.word	0x0800acf0
 800a22c:	0800ad10 	.word	0x0800ad10
 800a230:	0800acd0 	.word	0x0800acd0
 800a234:	0800ad30 	.word	0x0800ad30
 800a238:	0800ad3a 	.word	0x0800ad3a
 800a23c:	00000000 	.word	0x00000000
 800a240:	08009fc3 	.word	0x08009fc3
 800a244:	0800ad36 	.word	0x0800ad36

0800a248 <_printf_common>:
 800a248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a24c:	4616      	mov	r6, r2
 800a24e:	4699      	mov	r9, r3
 800a250:	688a      	ldr	r2, [r1, #8]
 800a252:	690b      	ldr	r3, [r1, #16]
 800a254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a258:	4293      	cmp	r3, r2
 800a25a:	bfb8      	it	lt
 800a25c:	4613      	movlt	r3, r2
 800a25e:	6033      	str	r3, [r6, #0]
 800a260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a264:	4607      	mov	r7, r0
 800a266:	460c      	mov	r4, r1
 800a268:	b10a      	cbz	r2, 800a26e <_printf_common+0x26>
 800a26a:	3301      	adds	r3, #1
 800a26c:	6033      	str	r3, [r6, #0]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	0699      	lsls	r1, r3, #26
 800a272:	bf42      	ittt	mi
 800a274:	6833      	ldrmi	r3, [r6, #0]
 800a276:	3302      	addmi	r3, #2
 800a278:	6033      	strmi	r3, [r6, #0]
 800a27a:	6825      	ldr	r5, [r4, #0]
 800a27c:	f015 0506 	ands.w	r5, r5, #6
 800a280:	d106      	bne.n	800a290 <_printf_common+0x48>
 800a282:	f104 0a19 	add.w	sl, r4, #25
 800a286:	68e3      	ldr	r3, [r4, #12]
 800a288:	6832      	ldr	r2, [r6, #0]
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dc26      	bgt.n	800a2de <_printf_common+0x96>
 800a290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a294:	1e13      	subs	r3, r2, #0
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	bf18      	it	ne
 800a29a:	2301      	movne	r3, #1
 800a29c:	0692      	lsls	r2, r2, #26
 800a29e:	d42b      	bmi.n	800a2f8 <_printf_common+0xb0>
 800a2a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	47c0      	blx	r8
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d01e      	beq.n	800a2ec <_printf_common+0xa4>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	68e5      	ldr	r5, [r4, #12]
 800a2b2:	6832      	ldr	r2, [r6, #0]
 800a2b4:	f003 0306 	and.w	r3, r3, #6
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	bf08      	it	eq
 800a2bc:	1aad      	subeq	r5, r5, r2
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	bf0c      	ite	eq
 800a2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c8:	2500      	movne	r5, #0
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	bfc4      	itt	gt
 800a2ce:	1a9b      	subgt	r3, r3, r2
 800a2d0:	18ed      	addgt	r5, r5, r3
 800a2d2:	2600      	movs	r6, #0
 800a2d4:	341a      	adds	r4, #26
 800a2d6:	42b5      	cmp	r5, r6
 800a2d8:	d11a      	bne.n	800a310 <_printf_common+0xc8>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	e008      	b.n	800a2f0 <_printf_common+0xa8>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4652      	mov	r2, sl
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	47c0      	blx	r8
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d103      	bne.n	800a2f4 <_printf_common+0xac>
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f4:	3501      	adds	r5, #1
 800a2f6:	e7c6      	b.n	800a286 <_printf_common+0x3e>
 800a2f8:	18e1      	adds	r1, r4, r3
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	2030      	movs	r0, #48	; 0x30
 800a2fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a302:	4422      	add	r2, r4
 800a304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a30c:	3302      	adds	r3, #2
 800a30e:	e7c7      	b.n	800a2a0 <_printf_common+0x58>
 800a310:	2301      	movs	r3, #1
 800a312:	4622      	mov	r2, r4
 800a314:	4649      	mov	r1, r9
 800a316:	4638      	mov	r0, r7
 800a318:	47c0      	blx	r8
 800a31a:	3001      	adds	r0, #1
 800a31c:	d0e6      	beq.n	800a2ec <_printf_common+0xa4>
 800a31e:	3601      	adds	r6, #1
 800a320:	e7d9      	b.n	800a2d6 <_printf_common+0x8e>
	...

0800a324 <_printf_i>:
 800a324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a328:	7e0f      	ldrb	r7, [r1, #24]
 800a32a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a32c:	2f78      	cmp	r7, #120	; 0x78
 800a32e:	4691      	mov	r9, r2
 800a330:	4680      	mov	r8, r0
 800a332:	460c      	mov	r4, r1
 800a334:	469a      	mov	sl, r3
 800a336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a33a:	d807      	bhi.n	800a34c <_printf_i+0x28>
 800a33c:	2f62      	cmp	r7, #98	; 0x62
 800a33e:	d80a      	bhi.n	800a356 <_printf_i+0x32>
 800a340:	2f00      	cmp	r7, #0
 800a342:	f000 80d8 	beq.w	800a4f6 <_printf_i+0x1d2>
 800a346:	2f58      	cmp	r7, #88	; 0x58
 800a348:	f000 80a3 	beq.w	800a492 <_printf_i+0x16e>
 800a34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a354:	e03a      	b.n	800a3cc <_printf_i+0xa8>
 800a356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a35a:	2b15      	cmp	r3, #21
 800a35c:	d8f6      	bhi.n	800a34c <_printf_i+0x28>
 800a35e:	a101      	add	r1, pc, #4	; (adr r1, 800a364 <_printf_i+0x40>)
 800a360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a364:	0800a3bd 	.word	0x0800a3bd
 800a368:	0800a3d1 	.word	0x0800a3d1
 800a36c:	0800a34d 	.word	0x0800a34d
 800a370:	0800a34d 	.word	0x0800a34d
 800a374:	0800a34d 	.word	0x0800a34d
 800a378:	0800a34d 	.word	0x0800a34d
 800a37c:	0800a3d1 	.word	0x0800a3d1
 800a380:	0800a34d 	.word	0x0800a34d
 800a384:	0800a34d 	.word	0x0800a34d
 800a388:	0800a34d 	.word	0x0800a34d
 800a38c:	0800a34d 	.word	0x0800a34d
 800a390:	0800a4dd 	.word	0x0800a4dd
 800a394:	0800a401 	.word	0x0800a401
 800a398:	0800a4bf 	.word	0x0800a4bf
 800a39c:	0800a34d 	.word	0x0800a34d
 800a3a0:	0800a34d 	.word	0x0800a34d
 800a3a4:	0800a4ff 	.word	0x0800a4ff
 800a3a8:	0800a34d 	.word	0x0800a34d
 800a3ac:	0800a401 	.word	0x0800a401
 800a3b0:	0800a34d 	.word	0x0800a34d
 800a3b4:	0800a34d 	.word	0x0800a34d
 800a3b8:	0800a4c7 	.word	0x0800a4c7
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	602a      	str	r2, [r5, #0]
 800a3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e0a3      	b.n	800a518 <_printf_i+0x1f4>
 800a3d0:	6820      	ldr	r0, [r4, #0]
 800a3d2:	6829      	ldr	r1, [r5, #0]
 800a3d4:	0606      	lsls	r6, r0, #24
 800a3d6:	f101 0304 	add.w	r3, r1, #4
 800a3da:	d50a      	bpl.n	800a3f2 <_printf_i+0xce>
 800a3dc:	680e      	ldr	r6, [r1, #0]
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	da03      	bge.n	800a3ec <_printf_i+0xc8>
 800a3e4:	232d      	movs	r3, #45	; 0x2d
 800a3e6:	4276      	negs	r6, r6
 800a3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ec:	485e      	ldr	r0, [pc, #376]	; (800a568 <_printf_i+0x244>)
 800a3ee:	230a      	movs	r3, #10
 800a3f0:	e019      	b.n	800a426 <_printf_i+0x102>
 800a3f2:	680e      	ldr	r6, [r1, #0]
 800a3f4:	602b      	str	r3, [r5, #0]
 800a3f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3fa:	bf18      	it	ne
 800a3fc:	b236      	sxthne	r6, r6
 800a3fe:	e7ef      	b.n	800a3e0 <_printf_i+0xbc>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	6820      	ldr	r0, [r4, #0]
 800a404:	1d19      	adds	r1, r3, #4
 800a406:	6029      	str	r1, [r5, #0]
 800a408:	0601      	lsls	r1, r0, #24
 800a40a:	d501      	bpl.n	800a410 <_printf_i+0xec>
 800a40c:	681e      	ldr	r6, [r3, #0]
 800a40e:	e002      	b.n	800a416 <_printf_i+0xf2>
 800a410:	0646      	lsls	r6, r0, #25
 800a412:	d5fb      	bpl.n	800a40c <_printf_i+0xe8>
 800a414:	881e      	ldrh	r6, [r3, #0]
 800a416:	4854      	ldr	r0, [pc, #336]	; (800a568 <_printf_i+0x244>)
 800a418:	2f6f      	cmp	r7, #111	; 0x6f
 800a41a:	bf0c      	ite	eq
 800a41c:	2308      	moveq	r3, #8
 800a41e:	230a      	movne	r3, #10
 800a420:	2100      	movs	r1, #0
 800a422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a426:	6865      	ldr	r5, [r4, #4]
 800a428:	60a5      	str	r5, [r4, #8]
 800a42a:	2d00      	cmp	r5, #0
 800a42c:	bfa2      	ittt	ge
 800a42e:	6821      	ldrge	r1, [r4, #0]
 800a430:	f021 0104 	bicge.w	r1, r1, #4
 800a434:	6021      	strge	r1, [r4, #0]
 800a436:	b90e      	cbnz	r6, 800a43c <_printf_i+0x118>
 800a438:	2d00      	cmp	r5, #0
 800a43a:	d04d      	beq.n	800a4d8 <_printf_i+0x1b4>
 800a43c:	4615      	mov	r5, r2
 800a43e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a442:	fb03 6711 	mls	r7, r3, r1, r6
 800a446:	5dc7      	ldrb	r7, [r0, r7]
 800a448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a44c:	4637      	mov	r7, r6
 800a44e:	42bb      	cmp	r3, r7
 800a450:	460e      	mov	r6, r1
 800a452:	d9f4      	bls.n	800a43e <_printf_i+0x11a>
 800a454:	2b08      	cmp	r3, #8
 800a456:	d10b      	bne.n	800a470 <_printf_i+0x14c>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	07de      	lsls	r6, r3, #31
 800a45c:	d508      	bpl.n	800a470 <_printf_i+0x14c>
 800a45e:	6923      	ldr	r3, [r4, #16]
 800a460:	6861      	ldr	r1, [r4, #4]
 800a462:	4299      	cmp	r1, r3
 800a464:	bfde      	ittt	le
 800a466:	2330      	movle	r3, #48	; 0x30
 800a468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a46c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a470:	1b52      	subs	r2, r2, r5
 800a472:	6122      	str	r2, [r4, #16]
 800a474:	f8cd a000 	str.w	sl, [sp]
 800a478:	464b      	mov	r3, r9
 800a47a:	aa03      	add	r2, sp, #12
 800a47c:	4621      	mov	r1, r4
 800a47e:	4640      	mov	r0, r8
 800a480:	f7ff fee2 	bl	800a248 <_printf_common>
 800a484:	3001      	adds	r0, #1
 800a486:	d14c      	bne.n	800a522 <_printf_i+0x1fe>
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	b004      	add	sp, #16
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	4835      	ldr	r0, [pc, #212]	; (800a568 <_printf_i+0x244>)
 800a494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4a0:	6029      	str	r1, [r5, #0]
 800a4a2:	061d      	lsls	r5, r3, #24
 800a4a4:	d514      	bpl.n	800a4d0 <_printf_i+0x1ac>
 800a4a6:	07df      	lsls	r7, r3, #31
 800a4a8:	bf44      	itt	mi
 800a4aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ae:	6023      	strmi	r3, [r4, #0]
 800a4b0:	b91e      	cbnz	r6, 800a4ba <_printf_i+0x196>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f023 0320 	bic.w	r3, r3, #32
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	2310      	movs	r3, #16
 800a4bc:	e7b0      	b.n	800a420 <_printf_i+0xfc>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	f043 0320 	orr.w	r3, r3, #32
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	2378      	movs	r3, #120	; 0x78
 800a4c8:	4828      	ldr	r0, [pc, #160]	; (800a56c <_printf_i+0x248>)
 800a4ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4ce:	e7e3      	b.n	800a498 <_printf_i+0x174>
 800a4d0:	0659      	lsls	r1, r3, #25
 800a4d2:	bf48      	it	mi
 800a4d4:	b2b6      	uxthmi	r6, r6
 800a4d6:	e7e6      	b.n	800a4a6 <_printf_i+0x182>
 800a4d8:	4615      	mov	r5, r2
 800a4da:	e7bb      	b.n	800a454 <_printf_i+0x130>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	6826      	ldr	r6, [r4, #0]
 800a4e0:	6961      	ldr	r1, [r4, #20]
 800a4e2:	1d18      	adds	r0, r3, #4
 800a4e4:	6028      	str	r0, [r5, #0]
 800a4e6:	0635      	lsls	r5, r6, #24
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	d501      	bpl.n	800a4f0 <_printf_i+0x1cc>
 800a4ec:	6019      	str	r1, [r3, #0]
 800a4ee:	e002      	b.n	800a4f6 <_printf_i+0x1d2>
 800a4f0:	0670      	lsls	r0, r6, #25
 800a4f2:	d5fb      	bpl.n	800a4ec <_printf_i+0x1c8>
 800a4f4:	8019      	strh	r1, [r3, #0]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	6123      	str	r3, [r4, #16]
 800a4fa:	4615      	mov	r5, r2
 800a4fc:	e7ba      	b.n	800a474 <_printf_i+0x150>
 800a4fe:	682b      	ldr	r3, [r5, #0]
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	602a      	str	r2, [r5, #0]
 800a504:	681d      	ldr	r5, [r3, #0]
 800a506:	6862      	ldr	r2, [r4, #4]
 800a508:	2100      	movs	r1, #0
 800a50a:	4628      	mov	r0, r5
 800a50c:	f7f5 fe38 	bl	8000180 <memchr>
 800a510:	b108      	cbz	r0, 800a516 <_printf_i+0x1f2>
 800a512:	1b40      	subs	r0, r0, r5
 800a514:	6060      	str	r0, [r4, #4]
 800a516:	6863      	ldr	r3, [r4, #4]
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	2300      	movs	r3, #0
 800a51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a520:	e7a8      	b.n	800a474 <_printf_i+0x150>
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	462a      	mov	r2, r5
 800a526:	4649      	mov	r1, r9
 800a528:	4640      	mov	r0, r8
 800a52a:	47d0      	blx	sl
 800a52c:	3001      	adds	r0, #1
 800a52e:	d0ab      	beq.n	800a488 <_printf_i+0x164>
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	079b      	lsls	r3, r3, #30
 800a534:	d413      	bmi.n	800a55e <_printf_i+0x23a>
 800a536:	68e0      	ldr	r0, [r4, #12]
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	4298      	cmp	r0, r3
 800a53c:	bfb8      	it	lt
 800a53e:	4618      	movlt	r0, r3
 800a540:	e7a4      	b.n	800a48c <_printf_i+0x168>
 800a542:	2301      	movs	r3, #1
 800a544:	4632      	mov	r2, r6
 800a546:	4649      	mov	r1, r9
 800a548:	4640      	mov	r0, r8
 800a54a:	47d0      	blx	sl
 800a54c:	3001      	adds	r0, #1
 800a54e:	d09b      	beq.n	800a488 <_printf_i+0x164>
 800a550:	3501      	adds	r5, #1
 800a552:	68e3      	ldr	r3, [r4, #12]
 800a554:	9903      	ldr	r1, [sp, #12]
 800a556:	1a5b      	subs	r3, r3, r1
 800a558:	42ab      	cmp	r3, r5
 800a55a:	dcf2      	bgt.n	800a542 <_printf_i+0x21e>
 800a55c:	e7eb      	b.n	800a536 <_printf_i+0x212>
 800a55e:	2500      	movs	r5, #0
 800a560:	f104 0619 	add.w	r6, r4, #25
 800a564:	e7f5      	b.n	800a552 <_printf_i+0x22e>
 800a566:	bf00      	nop
 800a568:	0800ad41 	.word	0x0800ad41
 800a56c:	0800ad52 	.word	0x0800ad52

0800a570 <_sbrk_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d06      	ldr	r5, [pc, #24]	; (800a58c <_sbrk_r+0x1c>)
 800a574:	2300      	movs	r3, #0
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	602b      	str	r3, [r5, #0]
 800a57c:	f7f6 f99a 	bl	80008b4 <_sbrk>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d102      	bne.n	800a58a <_sbrk_r+0x1a>
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	b103      	cbz	r3, 800a58a <_sbrk_r+0x1a>
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	20001c34 	.word	0x20001c34

0800a590 <__sread>:
 800a590:	b510      	push	{r4, lr}
 800a592:	460c      	mov	r4, r1
 800a594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a598:	f000 fab2 	bl	800ab00 <_read_r>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	bfab      	itete	ge
 800a5a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a5a4:	181b      	addge	r3, r3, r0
 800a5a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5aa:	bfac      	ite	ge
 800a5ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5ae:	81a3      	strhlt	r3, [r4, #12]
 800a5b0:	bd10      	pop	{r4, pc}

0800a5b2 <__swrite>:
 800a5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b6:	461f      	mov	r7, r3
 800a5b8:	898b      	ldrh	r3, [r1, #12]
 800a5ba:	05db      	lsls	r3, r3, #23
 800a5bc:	4605      	mov	r5, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	4616      	mov	r6, r2
 800a5c2:	d505      	bpl.n	800a5d0 <__swrite+0x1e>
 800a5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f000 f9c8 	bl	800a960 <_lseek_r>
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5da:	81a3      	strh	r3, [r4, #12]
 800a5dc:	4632      	mov	r2, r6
 800a5de:	463b      	mov	r3, r7
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e6:	f000 b869 	b.w	800a6bc <_write_r>

0800a5ea <__sseek>:
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f2:	f000 f9b5 	bl	800a960 <_lseek_r>
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	bf15      	itete	ne
 800a5fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a606:	81a3      	strheq	r3, [r4, #12]
 800a608:	bf18      	it	ne
 800a60a:	81a3      	strhne	r3, [r4, #12]
 800a60c:	bd10      	pop	{r4, pc}

0800a60e <__sclose>:
 800a60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a612:	f000 b8d3 	b.w	800a7bc <_close_r>
	...

0800a618 <__swbuf_r>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	460e      	mov	r6, r1
 800a61c:	4614      	mov	r4, r2
 800a61e:	4605      	mov	r5, r0
 800a620:	b118      	cbz	r0, 800a62a <__swbuf_r+0x12>
 800a622:	6983      	ldr	r3, [r0, #24]
 800a624:	b90b      	cbnz	r3, 800a62a <__swbuf_r+0x12>
 800a626:	f7ff fb81 	bl	8009d2c <__sinit>
 800a62a:	4b21      	ldr	r3, [pc, #132]	; (800a6b0 <__swbuf_r+0x98>)
 800a62c:	429c      	cmp	r4, r3
 800a62e:	d12b      	bne.n	800a688 <__swbuf_r+0x70>
 800a630:	686c      	ldr	r4, [r5, #4]
 800a632:	69a3      	ldr	r3, [r4, #24]
 800a634:	60a3      	str	r3, [r4, #8]
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	071a      	lsls	r2, r3, #28
 800a63a:	d52f      	bpl.n	800a69c <__swbuf_r+0x84>
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	b36b      	cbz	r3, 800a69c <__swbuf_r+0x84>
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	6820      	ldr	r0, [r4, #0]
 800a644:	1ac0      	subs	r0, r0, r3
 800a646:	6963      	ldr	r3, [r4, #20]
 800a648:	b2f6      	uxtb	r6, r6
 800a64a:	4283      	cmp	r3, r0
 800a64c:	4637      	mov	r7, r6
 800a64e:	dc04      	bgt.n	800a65a <__swbuf_r+0x42>
 800a650:	4621      	mov	r1, r4
 800a652:	4628      	mov	r0, r5
 800a654:	f000 f948 	bl	800a8e8 <_fflush_r>
 800a658:	bb30      	cbnz	r0, 800a6a8 <__swbuf_r+0x90>
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	60a3      	str	r3, [r4, #8]
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	6022      	str	r2, [r4, #0]
 800a666:	701e      	strb	r6, [r3, #0]
 800a668:	6963      	ldr	r3, [r4, #20]
 800a66a:	3001      	adds	r0, #1
 800a66c:	4283      	cmp	r3, r0
 800a66e:	d004      	beq.n	800a67a <__swbuf_r+0x62>
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	07db      	lsls	r3, r3, #31
 800a674:	d506      	bpl.n	800a684 <__swbuf_r+0x6c>
 800a676:	2e0a      	cmp	r6, #10
 800a678:	d104      	bne.n	800a684 <__swbuf_r+0x6c>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	f000 f933 	bl	800a8e8 <_fflush_r>
 800a682:	b988      	cbnz	r0, 800a6a8 <__swbuf_r+0x90>
 800a684:	4638      	mov	r0, r7
 800a686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <__swbuf_r+0x9c>)
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d101      	bne.n	800a692 <__swbuf_r+0x7a>
 800a68e:	68ac      	ldr	r4, [r5, #8]
 800a690:	e7cf      	b.n	800a632 <__swbuf_r+0x1a>
 800a692:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <__swbuf_r+0xa0>)
 800a694:	429c      	cmp	r4, r3
 800a696:	bf08      	it	eq
 800a698:	68ec      	ldreq	r4, [r5, #12]
 800a69a:	e7ca      	b.n	800a632 <__swbuf_r+0x1a>
 800a69c:	4621      	mov	r1, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 f81e 	bl	800a6e0 <__swsetup_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d0cb      	beq.n	800a640 <__swbuf_r+0x28>
 800a6a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6ac:	e7ea      	b.n	800a684 <__swbuf_r+0x6c>
 800a6ae:	bf00      	nop
 800a6b0:	0800acf0 	.word	0x0800acf0
 800a6b4:	0800ad10 	.word	0x0800ad10
 800a6b8:	0800acd0 	.word	0x0800acd0

0800a6bc <_write_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d07      	ldr	r5, [pc, #28]	; (800a6dc <_write_r+0x20>)
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f7f5 ff52 	bl	8000574 <_write>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_write_r+0x1e>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_write_r+0x1e>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20001c34 	.word	0x20001c34

0800a6e0 <__swsetup_r>:
 800a6e0:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <__swsetup_r+0xcc>)
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	681d      	ldr	r5, [r3, #0]
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	b125      	cbz	r5, 800a6f6 <__swsetup_r+0x16>
 800a6ec:	69ab      	ldr	r3, [r5, #24]
 800a6ee:	b913      	cbnz	r3, 800a6f6 <__swsetup_r+0x16>
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f7ff fb1b 	bl	8009d2c <__sinit>
 800a6f6:	4b2e      	ldr	r3, [pc, #184]	; (800a7b0 <__swsetup_r+0xd0>)
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d10f      	bne.n	800a71c <__swsetup_r+0x3c>
 800a6fc:	686c      	ldr	r4, [r5, #4]
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a704:	0719      	lsls	r1, r3, #28
 800a706:	d42c      	bmi.n	800a762 <__swsetup_r+0x82>
 800a708:	06dd      	lsls	r5, r3, #27
 800a70a:	d411      	bmi.n	800a730 <__swsetup_r+0x50>
 800a70c:	2309      	movs	r3, #9
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	f04f 30ff 	mov.w	r0, #4294967295
 800a71a:	e03e      	b.n	800a79a <__swsetup_r+0xba>
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <__swsetup_r+0xd4>)
 800a71e:	429c      	cmp	r4, r3
 800a720:	d101      	bne.n	800a726 <__swsetup_r+0x46>
 800a722:	68ac      	ldr	r4, [r5, #8]
 800a724:	e7eb      	b.n	800a6fe <__swsetup_r+0x1e>
 800a726:	4b24      	ldr	r3, [pc, #144]	; (800a7b8 <__swsetup_r+0xd8>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	bf08      	it	eq
 800a72c:	68ec      	ldreq	r4, [r5, #12]
 800a72e:	e7e6      	b.n	800a6fe <__swsetup_r+0x1e>
 800a730:	0758      	lsls	r0, r3, #29
 800a732:	d512      	bpl.n	800a75a <__swsetup_r+0x7a>
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	b141      	cbz	r1, 800a74a <__swsetup_r+0x6a>
 800a738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a73c:	4299      	cmp	r1, r3
 800a73e:	d002      	beq.n	800a746 <__swsetup_r+0x66>
 800a740:	4630      	mov	r0, r6
 800a742:	f000 f991 	bl	800aa68 <_free_r>
 800a746:	2300      	movs	r3, #0
 800a748:	6363      	str	r3, [r4, #52]	; 0x34
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	2300      	movs	r3, #0
 800a754:	6063      	str	r3, [r4, #4]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f043 0308 	orr.w	r3, r3, #8
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	b94b      	cbnz	r3, 800a77a <__swsetup_r+0x9a>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a770:	d003      	beq.n	800a77a <__swsetup_r+0x9a>
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	f000 f92b 	bl	800a9d0 <__smakebuf_r>
 800a77a:	89a0      	ldrh	r0, [r4, #12]
 800a77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a780:	f010 0301 	ands.w	r3, r0, #1
 800a784:	d00a      	beq.n	800a79c <__swsetup_r+0xbc>
 800a786:	2300      	movs	r3, #0
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	6963      	ldr	r3, [r4, #20]
 800a78c:	425b      	negs	r3, r3
 800a78e:	61a3      	str	r3, [r4, #24]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b943      	cbnz	r3, 800a7a6 <__swsetup_r+0xc6>
 800a794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a798:	d1ba      	bne.n	800a710 <__swsetup_r+0x30>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0781      	lsls	r1, r0, #30
 800a79e:	bf58      	it	pl
 800a7a0:	6963      	ldrpl	r3, [r4, #20]
 800a7a2:	60a3      	str	r3, [r4, #8]
 800a7a4:	e7f4      	b.n	800a790 <__swsetup_r+0xb0>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e7f7      	b.n	800a79a <__swsetup_r+0xba>
 800a7aa:	bf00      	nop
 800a7ac:	20000148 	.word	0x20000148
 800a7b0:	0800acf0 	.word	0x0800acf0
 800a7b4:	0800ad10 	.word	0x0800ad10
 800a7b8:	0800acd0 	.word	0x0800acd0

0800a7bc <_close_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	; (800a7d8 <_close_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f6 f83f 	bl	800084a <_close>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_close_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_close_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20001c34 	.word	0x20001c34

0800a7dc <__sflush_r>:
 800a7dc:	898a      	ldrh	r2, [r1, #12]
 800a7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	0710      	lsls	r0, r2, #28
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	d458      	bmi.n	800a89c <__sflush_r+0xc0>
 800a7ea:	684b      	ldr	r3, [r1, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dc05      	bgt.n	800a7fc <__sflush_r+0x20>
 800a7f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	dc02      	bgt.n	800a7fc <__sflush_r+0x20>
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7fe:	2e00      	cmp	r6, #0
 800a800:	d0f9      	beq.n	800a7f6 <__sflush_r+0x1a>
 800a802:	2300      	movs	r3, #0
 800a804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a808:	682f      	ldr	r7, [r5, #0]
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	d032      	beq.n	800a874 <__sflush_r+0x98>
 800a80e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	075a      	lsls	r2, r3, #29
 800a814:	d505      	bpl.n	800a822 <__sflush_r+0x46>
 800a816:	6863      	ldr	r3, [r4, #4]
 800a818:	1ac0      	subs	r0, r0, r3
 800a81a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a81c:	b10b      	cbz	r3, 800a822 <__sflush_r+0x46>
 800a81e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a820:	1ac0      	subs	r0, r0, r3
 800a822:	2300      	movs	r3, #0
 800a824:	4602      	mov	r2, r0
 800a826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a828:	6a21      	ldr	r1, [r4, #32]
 800a82a:	4628      	mov	r0, r5
 800a82c:	47b0      	blx	r6
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	d106      	bne.n	800a842 <__sflush_r+0x66>
 800a834:	6829      	ldr	r1, [r5, #0]
 800a836:	291d      	cmp	r1, #29
 800a838:	d82c      	bhi.n	800a894 <__sflush_r+0xb8>
 800a83a:	4a2a      	ldr	r2, [pc, #168]	; (800a8e4 <__sflush_r+0x108>)
 800a83c:	40ca      	lsrs	r2, r1
 800a83e:	07d6      	lsls	r6, r2, #31
 800a840:	d528      	bpl.n	800a894 <__sflush_r+0xb8>
 800a842:	2200      	movs	r2, #0
 800a844:	6062      	str	r2, [r4, #4]
 800a846:	04d9      	lsls	r1, r3, #19
 800a848:	6922      	ldr	r2, [r4, #16]
 800a84a:	6022      	str	r2, [r4, #0]
 800a84c:	d504      	bpl.n	800a858 <__sflush_r+0x7c>
 800a84e:	1c42      	adds	r2, r0, #1
 800a850:	d101      	bne.n	800a856 <__sflush_r+0x7a>
 800a852:	682b      	ldr	r3, [r5, #0]
 800a854:	b903      	cbnz	r3, 800a858 <__sflush_r+0x7c>
 800a856:	6560      	str	r0, [r4, #84]	; 0x54
 800a858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a85a:	602f      	str	r7, [r5, #0]
 800a85c:	2900      	cmp	r1, #0
 800a85e:	d0ca      	beq.n	800a7f6 <__sflush_r+0x1a>
 800a860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a864:	4299      	cmp	r1, r3
 800a866:	d002      	beq.n	800a86e <__sflush_r+0x92>
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 f8fd 	bl	800aa68 <_free_r>
 800a86e:	2000      	movs	r0, #0
 800a870:	6360      	str	r0, [r4, #52]	; 0x34
 800a872:	e7c1      	b.n	800a7f8 <__sflush_r+0x1c>
 800a874:	6a21      	ldr	r1, [r4, #32]
 800a876:	2301      	movs	r3, #1
 800a878:	4628      	mov	r0, r5
 800a87a:	47b0      	blx	r6
 800a87c:	1c41      	adds	r1, r0, #1
 800a87e:	d1c7      	bne.n	800a810 <__sflush_r+0x34>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0c4      	beq.n	800a810 <__sflush_r+0x34>
 800a886:	2b1d      	cmp	r3, #29
 800a888:	d001      	beq.n	800a88e <__sflush_r+0xb2>
 800a88a:	2b16      	cmp	r3, #22
 800a88c:	d101      	bne.n	800a892 <__sflush_r+0xb6>
 800a88e:	602f      	str	r7, [r5, #0]
 800a890:	e7b1      	b.n	800a7f6 <__sflush_r+0x1a>
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	e7ad      	b.n	800a7f8 <__sflush_r+0x1c>
 800a89c:	690f      	ldr	r7, [r1, #16]
 800a89e:	2f00      	cmp	r7, #0
 800a8a0:	d0a9      	beq.n	800a7f6 <__sflush_r+0x1a>
 800a8a2:	0793      	lsls	r3, r2, #30
 800a8a4:	680e      	ldr	r6, [r1, #0]
 800a8a6:	bf08      	it	eq
 800a8a8:	694b      	ldreq	r3, [r1, #20]
 800a8aa:	600f      	str	r7, [r1, #0]
 800a8ac:	bf18      	it	ne
 800a8ae:	2300      	movne	r3, #0
 800a8b0:	eba6 0807 	sub.w	r8, r6, r7
 800a8b4:	608b      	str	r3, [r1, #8]
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	dd9c      	ble.n	800a7f6 <__sflush_r+0x1a>
 800a8bc:	6a21      	ldr	r1, [r4, #32]
 800a8be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8c0:	4643      	mov	r3, r8
 800a8c2:	463a      	mov	r2, r7
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b0      	blx	r6
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	dc06      	bgt.n	800a8da <__sflush_r+0xfe>
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	e78e      	b.n	800a7f8 <__sflush_r+0x1c>
 800a8da:	4407      	add	r7, r0
 800a8dc:	eba8 0800 	sub.w	r8, r8, r0
 800a8e0:	e7e9      	b.n	800a8b6 <__sflush_r+0xda>
 800a8e2:	bf00      	nop
 800a8e4:	20400001 	.word	0x20400001

0800a8e8 <_fflush_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	690b      	ldr	r3, [r1, #16]
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	b913      	cbnz	r3, 800a8f8 <_fflush_r+0x10>
 800a8f2:	2500      	movs	r5, #0
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	bd38      	pop	{r3, r4, r5, pc}
 800a8f8:	b118      	cbz	r0, 800a902 <_fflush_r+0x1a>
 800a8fa:	6983      	ldr	r3, [r0, #24]
 800a8fc:	b90b      	cbnz	r3, 800a902 <_fflush_r+0x1a>
 800a8fe:	f7ff fa15 	bl	8009d2c <__sinit>
 800a902:	4b14      	ldr	r3, [pc, #80]	; (800a954 <_fflush_r+0x6c>)
 800a904:	429c      	cmp	r4, r3
 800a906:	d11b      	bne.n	800a940 <_fflush_r+0x58>
 800a908:	686c      	ldr	r4, [r5, #4]
 800a90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0ef      	beq.n	800a8f2 <_fflush_r+0xa>
 800a912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a914:	07d0      	lsls	r0, r2, #31
 800a916:	d404      	bmi.n	800a922 <_fflush_r+0x3a>
 800a918:	0599      	lsls	r1, r3, #22
 800a91a:	d402      	bmi.n	800a922 <_fflush_r+0x3a>
 800a91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91e:	f7ff faa3 	bl	8009e68 <__retarget_lock_acquire_recursive>
 800a922:	4628      	mov	r0, r5
 800a924:	4621      	mov	r1, r4
 800a926:	f7ff ff59 	bl	800a7dc <__sflush_r>
 800a92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a92c:	07da      	lsls	r2, r3, #31
 800a92e:	4605      	mov	r5, r0
 800a930:	d4e0      	bmi.n	800a8f4 <_fflush_r+0xc>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	059b      	lsls	r3, r3, #22
 800a936:	d4dd      	bmi.n	800a8f4 <_fflush_r+0xc>
 800a938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a93a:	f7ff fa96 	bl	8009e6a <__retarget_lock_release_recursive>
 800a93e:	e7d9      	b.n	800a8f4 <_fflush_r+0xc>
 800a940:	4b05      	ldr	r3, [pc, #20]	; (800a958 <_fflush_r+0x70>)
 800a942:	429c      	cmp	r4, r3
 800a944:	d101      	bne.n	800a94a <_fflush_r+0x62>
 800a946:	68ac      	ldr	r4, [r5, #8]
 800a948:	e7df      	b.n	800a90a <_fflush_r+0x22>
 800a94a:	4b04      	ldr	r3, [pc, #16]	; (800a95c <_fflush_r+0x74>)
 800a94c:	429c      	cmp	r4, r3
 800a94e:	bf08      	it	eq
 800a950:	68ec      	ldreq	r4, [r5, #12]
 800a952:	e7da      	b.n	800a90a <_fflush_r+0x22>
 800a954:	0800acf0 	.word	0x0800acf0
 800a958:	0800ad10 	.word	0x0800ad10
 800a95c:	0800acd0 	.word	0x0800acd0

0800a960 <_lseek_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d07      	ldr	r5, [pc, #28]	; (800a980 <_lseek_r+0x20>)
 800a964:	4604      	mov	r4, r0
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	602a      	str	r2, [r5, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	f7f5 ff92 	bl	8000898 <_lseek>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_lseek_r+0x1e>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_lseek_r+0x1e>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20001c34 	.word	0x20001c34

0800a984 <__swhatbuf_r>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	460e      	mov	r6, r1
 800a988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98c:	2900      	cmp	r1, #0
 800a98e:	b096      	sub	sp, #88	; 0x58
 800a990:	4614      	mov	r4, r2
 800a992:	461d      	mov	r5, r3
 800a994:	da08      	bge.n	800a9a8 <__swhatbuf_r+0x24>
 800a996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	061a      	lsls	r2, r3, #24
 800a9a0:	d410      	bmi.n	800a9c4 <__swhatbuf_r+0x40>
 800a9a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a6:	e00e      	b.n	800a9c6 <__swhatbuf_r+0x42>
 800a9a8:	466a      	mov	r2, sp
 800a9aa:	f000 f8bb 	bl	800ab24 <_fstat_r>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	dbf1      	blt.n	800a996 <__swhatbuf_r+0x12>
 800a9b2:	9a01      	ldr	r2, [sp, #4]
 800a9b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9bc:	425a      	negs	r2, r3
 800a9be:	415a      	adcs	r2, r3
 800a9c0:	602a      	str	r2, [r5, #0]
 800a9c2:	e7ee      	b.n	800a9a2 <__swhatbuf_r+0x1e>
 800a9c4:	2340      	movs	r3, #64	; 0x40
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	b016      	add	sp, #88	; 0x58
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9d0 <__smakebuf_r>:
 800a9d0:	898b      	ldrh	r3, [r1, #12]
 800a9d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9d4:	079d      	lsls	r5, r3, #30
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	d507      	bpl.n	800a9ec <__smakebuf_r+0x1c>
 800a9dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	6163      	str	r3, [r4, #20]
 800a9e8:	b002      	add	sp, #8
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	ab01      	add	r3, sp, #4
 800a9ee:	466a      	mov	r2, sp
 800a9f0:	f7ff ffc8 	bl	800a984 <__swhatbuf_r>
 800a9f4:	9900      	ldr	r1, [sp, #0]
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f7ff fa57 	bl	8009eac <_malloc_r>
 800a9fe:	b948      	cbnz	r0, 800aa14 <__smakebuf_r+0x44>
 800aa00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa04:	059a      	lsls	r2, r3, #22
 800aa06:	d4ef      	bmi.n	800a9e8 <__smakebuf_r+0x18>
 800aa08:	f023 0303 	bic.w	r3, r3, #3
 800aa0c:	f043 0302 	orr.w	r3, r3, #2
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	e7e3      	b.n	800a9dc <__smakebuf_r+0xc>
 800aa14:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <__smakebuf_r+0x7c>)
 800aa16:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	6020      	str	r0, [r4, #0]
 800aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	9b00      	ldr	r3, [sp, #0]
 800aa24:	6163      	str	r3, [r4, #20]
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	6120      	str	r0, [r4, #16]
 800aa2a:	b15b      	cbz	r3, 800aa44 <__smakebuf_r+0x74>
 800aa2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa30:	4630      	mov	r0, r6
 800aa32:	f000 f889 	bl	800ab48 <_isatty_r>
 800aa36:	b128      	cbz	r0, 800aa44 <__smakebuf_r+0x74>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f023 0303 	bic.w	r3, r3, #3
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	81a3      	strh	r3, [r4, #12]
 800aa44:	89a0      	ldrh	r0, [r4, #12]
 800aa46:	4305      	orrs	r5, r0
 800aa48:	81a5      	strh	r5, [r4, #12]
 800aa4a:	e7cd      	b.n	800a9e8 <__smakebuf_r+0x18>
 800aa4c:	08009cc5 	.word	0x08009cc5

0800aa50 <__malloc_lock>:
 800aa50:	4801      	ldr	r0, [pc, #4]	; (800aa58 <__malloc_lock+0x8>)
 800aa52:	f7ff ba09 	b.w	8009e68 <__retarget_lock_acquire_recursive>
 800aa56:	bf00      	nop
 800aa58:	20001c28 	.word	0x20001c28

0800aa5c <__malloc_unlock>:
 800aa5c:	4801      	ldr	r0, [pc, #4]	; (800aa64 <__malloc_unlock+0x8>)
 800aa5e:	f7ff ba04 	b.w	8009e6a <__retarget_lock_release_recursive>
 800aa62:	bf00      	nop
 800aa64:	20001c28 	.word	0x20001c28

0800aa68 <_free_r>:
 800aa68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa6a:	2900      	cmp	r1, #0
 800aa6c:	d044      	beq.n	800aaf8 <_free_r+0x90>
 800aa6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa72:	9001      	str	r0, [sp, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f1a1 0404 	sub.w	r4, r1, #4
 800aa7a:	bfb8      	it	lt
 800aa7c:	18e4      	addlt	r4, r4, r3
 800aa7e:	f7ff ffe7 	bl	800aa50 <__malloc_lock>
 800aa82:	4a1e      	ldr	r2, [pc, #120]	; (800aafc <_free_r+0x94>)
 800aa84:	9801      	ldr	r0, [sp, #4]
 800aa86:	6813      	ldr	r3, [r2, #0]
 800aa88:	b933      	cbnz	r3, 800aa98 <_free_r+0x30>
 800aa8a:	6063      	str	r3, [r4, #4]
 800aa8c:	6014      	str	r4, [r2, #0]
 800aa8e:	b003      	add	sp, #12
 800aa90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa94:	f7ff bfe2 	b.w	800aa5c <__malloc_unlock>
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d908      	bls.n	800aaae <_free_r+0x46>
 800aa9c:	6825      	ldr	r5, [r4, #0]
 800aa9e:	1961      	adds	r1, r4, r5
 800aaa0:	428b      	cmp	r3, r1
 800aaa2:	bf01      	itttt	eq
 800aaa4:	6819      	ldreq	r1, [r3, #0]
 800aaa6:	685b      	ldreq	r3, [r3, #4]
 800aaa8:	1949      	addeq	r1, r1, r5
 800aaaa:	6021      	streq	r1, [r4, #0]
 800aaac:	e7ed      	b.n	800aa8a <_free_r+0x22>
 800aaae:	461a      	mov	r2, r3
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	b10b      	cbz	r3, 800aab8 <_free_r+0x50>
 800aab4:	42a3      	cmp	r3, r4
 800aab6:	d9fa      	bls.n	800aaae <_free_r+0x46>
 800aab8:	6811      	ldr	r1, [r2, #0]
 800aaba:	1855      	adds	r5, r2, r1
 800aabc:	42a5      	cmp	r5, r4
 800aabe:	d10b      	bne.n	800aad8 <_free_r+0x70>
 800aac0:	6824      	ldr	r4, [r4, #0]
 800aac2:	4421      	add	r1, r4
 800aac4:	1854      	adds	r4, r2, r1
 800aac6:	42a3      	cmp	r3, r4
 800aac8:	6011      	str	r1, [r2, #0]
 800aaca:	d1e0      	bne.n	800aa8e <_free_r+0x26>
 800aacc:	681c      	ldr	r4, [r3, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	6053      	str	r3, [r2, #4]
 800aad2:	4421      	add	r1, r4
 800aad4:	6011      	str	r1, [r2, #0]
 800aad6:	e7da      	b.n	800aa8e <_free_r+0x26>
 800aad8:	d902      	bls.n	800aae0 <_free_r+0x78>
 800aada:	230c      	movs	r3, #12
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	e7d6      	b.n	800aa8e <_free_r+0x26>
 800aae0:	6825      	ldr	r5, [r4, #0]
 800aae2:	1961      	adds	r1, r4, r5
 800aae4:	428b      	cmp	r3, r1
 800aae6:	bf04      	itt	eq
 800aae8:	6819      	ldreq	r1, [r3, #0]
 800aaea:	685b      	ldreq	r3, [r3, #4]
 800aaec:	6063      	str	r3, [r4, #4]
 800aaee:	bf04      	itt	eq
 800aaf0:	1949      	addeq	r1, r1, r5
 800aaf2:	6021      	streq	r1, [r4, #0]
 800aaf4:	6054      	str	r4, [r2, #4]
 800aaf6:	e7ca      	b.n	800aa8e <_free_r+0x26>
 800aaf8:	b003      	add	sp, #12
 800aafa:	bd30      	pop	{r4, r5, pc}
 800aafc:	20001c2c 	.word	0x20001c2c

0800ab00 <_read_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d07      	ldr	r5, [pc, #28]	; (800ab20 <_read_r+0x20>)
 800ab04:	4604      	mov	r4, r0
 800ab06:	4608      	mov	r0, r1
 800ab08:	4611      	mov	r1, r2
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	602a      	str	r2, [r5, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f7f5 fe7e 	bl	8000810 <_read>
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	d102      	bne.n	800ab1e <_read_r+0x1e>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b103      	cbz	r3, 800ab1e <_read_r+0x1e>
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
 800ab20:	20001c34 	.word	0x20001c34

0800ab24 <_fstat_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d07      	ldr	r5, [pc, #28]	; (800ab44 <_fstat_r+0x20>)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	4611      	mov	r1, r2
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	f7f5 fe96 	bl	8000862 <_fstat>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	d102      	bne.n	800ab40 <_fstat_r+0x1c>
 800ab3a:	682b      	ldr	r3, [r5, #0]
 800ab3c:	b103      	cbz	r3, 800ab40 <_fstat_r+0x1c>
 800ab3e:	6023      	str	r3, [r4, #0]
 800ab40:	bd38      	pop	{r3, r4, r5, pc}
 800ab42:	bf00      	nop
 800ab44:	20001c34 	.word	0x20001c34

0800ab48 <_isatty_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d06      	ldr	r5, [pc, #24]	; (800ab64 <_isatty_r+0x1c>)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	602b      	str	r3, [r5, #0]
 800ab54:	f7f5 fe95 	bl	8000882 <_isatty>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_isatty_r+0x1a>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_isatty_r+0x1a>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	20001c34 	.word	0x20001c34

0800ab68 <_init>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr

0800ab74 <_fini>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr
