
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca04  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cd60  0800cd60  0001cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cd64  0800cd64  0001cd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000008  0800cd68  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b68  200001ac  0800cf0c  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001d14  0800cf0c  00021d14  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c482  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004555  00000000  00000000  0003c65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d10  00000000  00000000  00040bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b08  00000000  00000000  000428c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000273c5  00000000  00000000  000443d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e143  00000000  00000000  0006b795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e22ec  00000000  00000000  000898d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0016bbc4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007ef0  00000000  00000000  0016bc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ac 	.word	0x200001ac
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cb2c 	.word	0x0800cb2c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b0 	.word	0x200001b0
 800017c:	0800cb2c 	.word	0x0800cb2c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <Play_Buzzer>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Play_Buzzer()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2101      	movs	r1, #1
 8000228:	4808      	ldr	r0, [pc, #32]	; (800024c <Play_Buzzer+0x2c>)
 800022a:	f001 fce1 	bl	8001bf0 <HAL_GPIO_WritePin>
	    HAL_Delay(500);
 800022e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000232:	f000 ff4d 	bl	80010d0 <HAL_Delay>
	    HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2101      	movs	r1, #1
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <Play_Buzzer+0x2c>)
 800023c:	f001 fcd8 	bl	8001bf0 <HAL_GPIO_WritePin>
	    HAL_Delay(250);
 8000240:	20fa      	movs	r0, #250	; 0xfa
 8000242:	f000 ff45 	bl	80010d0 <HAL_Delay>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	48000400 	.word	0x48000400

08000250 <ledstrip_Pulse>:
#include "ledstrip.h"
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void ledstrip_Pulse(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	ws2812_SetAll_LED(30, 0, 0);
 8000254:	2200      	movs	r2, #0
 8000256:	2100      	movs	r1, #0
 8000258:	201e      	movs	r0, #30
 800025a:	f000 f887 	bl	800036c <ws2812_SetAll_LED>
	ws2812_Send_PWM();
 800025e:	f000 f89f 	bl	80003a0 <ws2812_Send_PWM>
	HAL_Delay(1000);
 8000262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000266:	f000 ff33 	bl	80010d0 <HAL_Delay>
	ws2812_SetAll_LED(30, 63, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	213f      	movs	r1, #63	; 0x3f
 800026e:	201e      	movs	r0, #30
 8000270:	f000 f87c 	bl	800036c <ws2812_SetAll_LED>
	ws2812_Send_PWM();
 8000274:	f000 f894 	bl	80003a0 <ws2812_Send_PWM>
	HAL_Delay(1000);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f000 ff28 	bl	80010d0 <HAL_Delay>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800028c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4313      	orrs	r3, r2
 800029a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4013      	ands	r3, r2
 80002a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002a8:	68fb      	ldr	r3, [r7, #12]
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4313      	orrs	r3, r2
 80002cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4013      	ands	r3, r2
 80002d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002da:	68fb      	ldr	r3, [r7, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <HAL_TIM_PWM_PulseFinishedCallback>:
#define WS2812_LED_MAX 10
uint8_t LED_Data[WS2812_LED_MAX][4];
int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 80002f0:	2108      	movs	r1, #8
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80002f4:	f005 fa80 	bl	80057f8 <HAL_TIM_PWM_Stop_DMA>
  datasentflag = 1;
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	601a      	str	r2, [r3, #0]
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200001c8 	.word	0x200001c8
 800030c:	200002e8 	.word	0x200002e8

08000310 <ws2812_Set_LED>:

void ws2812_Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	b2d9      	uxtb	r1, r3
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <ws2812_Set_LED+0x58>)
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	b2d9      	uxtb	r1, r3
 800032e:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <ws2812_Set_LED+0x58>)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	4413      	add	r3, r2
 8000336:	460a      	mov	r2, r1
 8000338:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <ws2812_Set_LED+0x58>)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	460a      	mov	r2, r1
 8000348:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	b2d9      	uxtb	r1, r3
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <ws2812_Set_LED+0x58>)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	4413      	add	r3, r2
 8000356:	460a      	mov	r2, r1
 8000358:	70da      	strb	r2, [r3, #3]
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	200002c0 	.word	0x200002c0

0800036c <ws2812_SetAll_LED>:

void ws2812_SetAll_LED(int Red, int Green, int Blue)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	e008      	b.n	8000390 <ws2812_SetAll_LED+0x24>
  {
    ws2812_Set_LED(i, Red, Green, Blue);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	68ba      	ldr	r2, [r7, #8]
 8000382:	68f9      	ldr	r1, [r7, #12]
 8000384:	6978      	ldr	r0, [r7, #20]
 8000386:	f7ff ffc3 	bl	8000310 <ws2812_Set_LED>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	2b09      	cmp	r3, #9
 8000394:	ddf3      	ble.n	800037e <ws2812_SetAll_LED+0x12>
  }
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <ws2812_Send_PWM>:

void ws2812_Send_PWM(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80003a6:	af00      	add	r7, sp, #0
  uint16_t pwmData[24 * (WS2812_LED_MAX) + 50];
  uint32_t indx = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  uint32_t color;
  for (int i = 0; i < WS2812_LED_MAX; i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80003b4:	e04c      	b.n	8000450 <ws2812_Send_PWM+0xb0>
  {
    color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
 80003b6:	4a40      	ldr	r2, [pc, #256]	; (80004b8 <ws2812_Send_PWM+0x118>)
 80003b8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	041a      	lsls	r2, r3, #16
 80003c4:	493c      	ldr	r1, [pc, #240]	; (80004b8 <ws2812_Send_PWM+0x118>)
 80003c6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	440b      	add	r3, r1
 80003ce:	789b      	ldrb	r3, [r3, #2]
 80003d0:	021b      	lsls	r3, r3, #8
 80003d2:	431a      	orrs	r2, r3
 80003d4:	4938      	ldr	r1, [pc, #224]	; (80004b8 <ws2812_Send_PWM+0x118>)
 80003d6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	440b      	add	r3, r1
 80003de:	78db      	ldrb	r3, [r3, #3]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    for (int i = 23; i >= 0; i--)
 80003e6:	2317      	movs	r3, #23
 80003e8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80003ec:	e027      	b.n	800043e <ws2812_Send_PWM+0x9e>
    {
      if (color & (1 << i))
 80003ee:	2201      	movs	r2, #1
 80003f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80003fe:	4013      	ands	r3, r2
 8000400:	2b00      	cmp	r3, #0
 8000402:	d009      	beq.n	8000418 <ws2812_Send_PWM+0x78>
      {
        pwmData[indx] = 50; // 2/3 of ARR=75
 8000404:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000408:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800040c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000410:	2132      	movs	r1, #50	; 0x32
 8000412:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000416:	e008      	b.n	800042a <ws2812_Send_PWM+0x8a>
      }

      else
        pwmData[indx] = 25; // 1/3 of ARR=75
 8000418:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800041c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000420:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000424:	2119      	movs	r1, #25
 8000426:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

      indx++;
 800042a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800042e:	3301      	adds	r3, #1
 8000430:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    for (int i = 23; i >= 0; i--)
 8000434:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000438:	3b01      	subs	r3, #1
 800043a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800043e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad3      	bge.n	80003ee <ws2812_Send_PWM+0x4e>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000446:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800044a:	3301      	adds	r3, #1
 800044c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8000450:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000454:	2b09      	cmp	r3, #9
 8000456:	ddae      	ble.n	80003b6 <ws2812_Send_PWM+0x16>
    }
  }
  for (int i = 0; i < 50; i++)
 8000458:	2300      	movs	r3, #0
 800045a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800045e:	e012      	b.n	8000486 <ws2812_Send_PWM+0xe6>
  {
    pwmData[indx] = 0;
 8000460:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000464:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000468:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800046c:	2100      	movs	r1, #0
 800046e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    indx++;
 8000472:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000476:	3301      	adds	r3, #1
 8000478:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  for (int i = 0; i < 50; i++)
 800047c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000480:	3301      	adds	r3, #1
 8000482:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8000486:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800048a:	2b31      	cmp	r3, #49	; 0x31
 800048c:	dde8      	ble.n	8000460 <ws2812_Send_PWM+0xc0>
  }
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 800048e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000492:	b29b      	uxth	r3, r3
 8000494:	463a      	mov	r2, r7
 8000496:	2108      	movs	r1, #8
 8000498:	4808      	ldr	r0, [pc, #32]	; (80004bc <ws2812_Send_PWM+0x11c>)
 800049a:	f004 ffbb 	bl	8005414 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag)
 800049e:	bf00      	nop
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <ws2812_Send_PWM+0x120>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d0fb      	beq.n	80004a0 <ws2812_Send_PWM+0x100>
  {
  };
  datasentflag = 0;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <ws2812_Send_PWM+0x120>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
}
 80004ae:	bf00      	nop
 80004b0:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200002c0 	.word	0x200002c0
 80004bc:	200001c8 	.word	0x200001c8
 80004c0:	200002e8 	.word	0x200002e8

080004c4 <StartAlarm>:

bool bAlarmGestart = false;

void StartAlarm() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	if(!bAlarmGestart) {
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <StartAlarm+0x24>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f083 0301 	eor.w	r3, r3, #1
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d005      	beq.n	80004e2 <StartAlarm+0x1e>
		printf("Alarm aan het starten....");
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <StartAlarm+0x28>)
 80004d8:	f00b fb9a 	bl	800bc10 <iprintf>
		bAlarmGestart = true;
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <StartAlarm+0x24>)
 80004de:	2201      	movs	r2, #1
 80004e0:	701a      	strb	r2, [r3, #0]
	  // set state of bool
	}
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200002ec 	.word	0x200002ec
 80004ec:	0800cb44 	.word	0x0800cb44

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fd66 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f824 	bl	8000544 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004fc:	f000 f88e 	bl	800061c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f994 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f980 	bl	8000808 <MX_DMA_Init>
  MX_USB_Device_Init();
 8000508:	f00a fdee 	bl	800b0e8 <MX_USB_Device_Init>
  MX_TIM16_Init();
 800050c:	f000 f954 	bl	80007b8 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000510:	f000 f8a2 	bl	8000658 <MX_TIM1_Init>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	ledstrip_Pulse();
 8000514:	f7ff fe9c 	bl	8000250 <ledstrip_Pulse>
	Relay_On();
 8000518:	f000 fa50 	bl	80009bc <Relay_On>
	Play_Buzzer();
 800051c:	f7ff fe80 	bl	8000220 <Play_Buzzer>
    Read_Rotary();
 8000520:	f000 fa68 	bl	80009f4 <Read_Rotary>
    Read_Reed();
 8000524:	f000 fa14 	bl	8000950 <Read_Reed>

    if (bAlarmGestart) {
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <main+0x4c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f1      	beq.n	8000514 <main+0x24>
    	printf("lekker man alarm gestart");
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <main+0x50>)
 8000532:	f00b fb6d 	bl	800bc10 <iprintf>
    	Play_Buzzer();
 8000536:	f7ff fe73 	bl	8000220 <Play_Buzzer>
	ledstrip_Pulse();
 800053a:	e7eb      	b.n	8000514 <main+0x24>
 800053c:	200002ec 	.word	0x200002ec
 8000540:	0800cb60 	.word	0x0800cb60

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b09a      	sub	sp, #104	; 0x68
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2248      	movs	r2, #72	; 0x48
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f00b fb54 	bl	800bc00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <SystemClock_Config+0xd4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000572:	4a29      	ldr	r2, [pc, #164]	; (8000618 <SystemClock_Config+0xd4>)
 8000574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xd4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000586:	2326      	movs	r3, #38	; 0x26
 8000588:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800058a:	2300      	movs	r3, #0
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800059c:	2300      	movs	r3, #0
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a0:	2360      	movs	r3, #96	; 0x60
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a8:	2301      	movs	r3, #1
 80005aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005b0:	2320      	movs	r3, #32
 80005b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fbf8 	bl	8003dc0 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d6:	f000 f987 	bl	80008e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005da:	236f      	movs	r3, #111	; 0x6f
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2103      	movs	r1, #3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 ff54 	bl	80044a8 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000606:	f000 f96f 	bl	80008e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800060a:	f004 fce5 	bl	8004fd8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800060e:	bf00      	nop
 8000610:	3768      	adds	r7, #104	; 0x68
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	58000400 	.word	0x58000400

0800061c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2250      	movs	r2, #80	; 0x50
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f00b fae9 	bl	800bc00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800062e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000632:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000638:	2310      	movs	r3, #16
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fb54 	bl	8004cec <HAL_RCCEx_PeriphCLKConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800064a:	f000 f94d 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	; 0x70
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000678:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
 800068a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00b fab4 	bl	800bc00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000698:	4b45      	ldr	r3, [pc, #276]	; (80007b0 <MX_TIM1_Init+0x158>)
 800069a:	4a46      	ldr	r2, [pc, #280]	; (80007b4 <MX_TIM1_Init+0x15c>)
 800069c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 75- 1;
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006ac:	224a      	movs	r2, #74	; 0x4a
 80006ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b6:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c2:	483b      	ldr	r0, [pc, #236]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006c4:	f004 fd9f 	bl	8005206 <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006ce:	f000 f90b 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006dc:	4619      	mov	r1, r3
 80006de:	4834      	ldr	r0, [pc, #208]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006e0:	f005 fba6 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006ea:	f000 f8fd 	bl	80008e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ee:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_TIM1_Init+0x158>)
 80006f0:	f004 fe2e 	bl	8005350 <HAL_TIM_PWM_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006fa:	f000 f8f5 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800070e:	4619      	mov	r1, r3
 8000710:	4827      	ldr	r0, [pc, #156]	; (80007b0 <MX_TIM1_Init+0x158>)
 8000712:	f006 f8fd 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800071c:	f000 f8e4 	bl	80008e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000720:	2360      	movs	r3, #96	; 0x60
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072c:	2300      	movs	r3, #0
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800073c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000740:	2208      	movs	r2, #8
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_TIM1_Init+0x158>)
 8000746:	f005 fa5f 	bl	8005c08 <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000750:	f000 f8ca 	bl	80008e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800077a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <MX_TIM1_Init+0x158>)
 8000792:	f006 f91d 	bl	80069d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800079c:	f000 f8a4 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <MX_TIM1_Init+0x158>)
 80007a2:	f000 fa83 	bl	8000cac <HAL_TIM_MspPostInit>

}
 80007a6:	bf00      	nop
 80007a8:	3770      	adds	r7, #112	; 0x70
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200001c8 	.word	0x200001c8
 80007b4:	40012c00 	.word	0x40012c00

080007b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_TIM16_Init+0x48>)
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <MX_TIM16_Init+0x4c>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63998;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_TIM16_Init+0x48>)
 80007c4:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 80007c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_TIM16_Init+0x48>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_TIM16_Init+0x48>)
 80007d2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_TIM16_Init+0x48>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_TIM16_Init+0x48>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_TIM16_Init+0x48>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM16_Init+0x48>)
 80007ec:	f004 fd0b 	bl	8005206 <HAL_TIM_Base_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80007f6:	f000 f877 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000214 	.word	0x20000214
 8000804:	40014400 	.word	0x40014400

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800080c:	2004      	movs	r0, #4
 800080e:	f7ff fd39 	bl	8000284 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff fd36 	bl	8000284 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	200b      	movs	r0, #11
 800081e:	f000 fd56 	bl	80012ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000822:	200b      	movs	r0, #11
 8000824:	f000 fd6d 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	2004      	movs	r0, #4
 8000842:	f7ff fd38 	bl	80002b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fd35 	bl	80002b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	2001      	movs	r0, #1
 800084e:	f7ff fd32 	bl	80002b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2008      	movs	r0, #8
 8000854:	f7ff fd2f 	bl	80002b6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800085e:	481f      	ldr	r0, [pc, #124]	; (80008dc <MX_GPIO_Init+0xb0>)
 8000860:	f001 f9c6 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2101      	movs	r1, #1
 8000868:	481d      	ldr	r0, [pc, #116]	; (80008e0 <MX_GPIO_Init+0xb4>)
 800086a:	f001 f9c1 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RELAY_Pin;
 800086e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4815      	ldr	r0, [pc, #84]	; (80008dc <MX_GPIO_Init+0xb0>)
 8000886:	f001 f82b 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 800088a:	f641 030a 	movw	r3, #6154	; 0x180a
 800088e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <MX_GPIO_Init+0xb0>)
 800089e:	f001 f81f 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <MX_GPIO_Init+0xb4>)
 80008b8:	f001 f812 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80008bc:	2301      	movs	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0xb8>)
 80008ce:	f001 f807 	bl	80018e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	48000800 	.word	0x48000800
 80008e0:	48000400 	.word	0x48000400
 80008e4:	48000c00 	.word	0x48000c00

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <REED_status>:
bool bHasContact = false;
bool isTimerOn = false;
extern TIM_HandleTypeDef htim16;

GPIO_PinState REED_status()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 80008f8:	2108      	movs	r1, #8
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <REED_status+0x14>)
 80008fc:	f001 f960 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	48000800 	.word	0x48000800

0800090c <SetTimer>:

void SetTimer() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim16);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <SetTimer+0x10>)
 8000912:	f004 fccf 	bl	80052b4 <HAL_TIM_Base_Start_IT>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000214 	.word	0x20000214

08000920 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if (!bHasContact) { // kijken of contact is anders starten we het alarm.
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	f083 0301 	eor.w	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d004      	beq.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x20>
		printf("Timer is gestart!");
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000938:	f00b f96a 	bl	800bc10 <iprintf>
		// Trigger function
		StartAlarm();
 800093c:	f7ff fdc2 	bl	80004c4 <StartAlarm>
	}
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200002ed 	.word	0x200002ed
 800094c:	0800cb7c 	.word	0x0800cb7c

08000950 <Read_Reed>:


void Read_Reed()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

	if (!REED_status() && !bHasContact)
 8000954:	f7ff ffce 	bl	80008f4 <REED_status>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d110      	bne.n	8000980 <Read_Reed+0x30>
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <Read_Reed+0x5c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <Read_Reed+0x30>
	{
		printf("Reed heeft nu contact");
 800096c:	4810      	ldr	r0, [pc, #64]	; (80009b0 <Read_Reed+0x60>)
 800096e:	f00b f94f 	bl	800bc10 <iprintf>
		bHasContact = true;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <Read_Reed+0x5c>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
		isTimerOn = false;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <Read_Reed+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]

		printf("Reed heeft geen contact");
		bHasContact = false;
	}

}
 800097e:	e013      	b.n	80009a8 <Read_Reed+0x58>
	else if (REED_status() && bHasContact)
 8000980:	f7ff ffb8 	bl	80008f4 <REED_status>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00e      	beq.n	80009a8 <Read_Reed+0x58>
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <Read_Reed+0x5c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00a      	beq.n	80009a8 <Read_Reed+0x58>
		isTimerOn = true;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <Read_Reed+0x64>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
		SetTimer();
 8000998:	f7ff ffb8 	bl	800090c <SetTimer>
		printf("Reed heeft geen contact");
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <Read_Reed+0x68>)
 800099e:	f00b f937 	bl	800bc10 <iprintf>
		bHasContact = false;
 80009a2:	4b02      	ldr	r3, [pc, #8]	; (80009ac <Read_Reed+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200002ed 	.word	0x200002ed
 80009b0:	0800cb90 	.word	0x0800cb90
 80009b4:	200002ee 	.word	0x200002ee
 80009b8:	0800cba8 	.word	0x0800cba8

080009bc <Relay_On>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Relay_On()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <Relay_On+0x14>)
 80009c6:	f001 f913 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000800 	.word	0x48000800

080009d4 <_write>:

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	68b8      	ldr	r0, [r7, #8]
 80009e4:	f00a fc3e 	bl	800b264 <CDC_Transmit_FS>
  return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <Read_Rotary>:

void Read_Rotary()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 80009fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fe:	4855      	ldr	r0, [pc, #340]	; (8000b54 <Read_Rotary+0x160>)
 8000a00:	f001 f8de 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 8000a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0c:	4851      	ldr	r0, [pc, #324]	; (8000b54 <Read_Rotary+0x160>)
 8000a0e:	f001 f8d7 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	005a      	lsls	r2, r3, #1
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a4e      	ldr	r2, [pc, #312]	; (8000b58 <Read_Rotary+0x164>)
 8000a20:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 8000a22:	4b4e      	ldr	r3, [pc, #312]	; (8000b5c <Read_Rotary+0x168>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <Read_Rotary+0x164>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	494d      	ldr	r1, [pc, #308]	; (8000b60 <Read_Rotary+0x16c>)
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a34:	607b      	str	r3, [r7, #4]

    if (info == 1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d109      	bne.n	8000a50 <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 8000a3c:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <Read_Rotary+0x164>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2201      	movs	r2, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	4b47      	ldr	r3, [pc, #284]	; (8000b64 <Read_Rotary+0x170>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	4a46      	ldr	r2, [pc, #280]	; (8000b64 <Read_Rotary+0x170>)
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e00c      	b.n	8000a6a <Read_Rotary+0x76>
    }
    else if (info == -1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a56:	d108      	bne.n	8000a6a <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 8000a58:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <Read_Rotary+0x164>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <Read_Rotary+0x174>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	4a40      	ldr	r2, [pc, #256]	; (8000b68 <Read_Rotary+0x174>)
 8000a68:	6013      	str	r3, [r2, #0]
    else if (info == 2)
    {
        // skipped a value
    }

    if (prevVal != newVal && newVal == 3)
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <Read_Rotary+0x168>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <Read_Rotary+0x164>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d047      	beq.n	8000b06 <Read_Rotary+0x112>
 8000a76:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <Read_Rotary+0x164>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d143      	bne.n	8000b06 <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <Read_Rotary+0x170>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b0b      	cmp	r3, #11
 8000a84:	d00b      	beq.n	8000a9e <Read_Rotary+0xaa>
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <Read_Rotary+0x170>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b0d      	cmp	r3, #13
 8000a8c:	d007      	beq.n	8000a9e <Read_Rotary+0xaa>
 8000a8e:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <Read_Rotary+0x170>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b0e      	cmp	r3, #14
 8000a94:	d003      	beq.n	8000a9e <Read_Rotary+0xaa>
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <Read_Rotary+0x170>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	d10e      	bne.n	8000abc <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <Read_Rotary+0x178>)
 8000aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <Read_Rotary+0x178>)
 8000aae:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab6:	4827      	ldr	r0, [pc, #156]	; (8000b54 <Read_Rotary+0x160>)
 8000ab8:	f001 f89a 	bl	8001bf0 <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <Read_Rotary+0x174>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b0b      	cmp	r3, #11
 8000ac2:	d00b      	beq.n	8000adc <Read_Rotary+0xe8>
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <Read_Rotary+0x174>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b0d      	cmp	r3, #13
 8000aca:	d007      	beq.n	8000adc <Read_Rotary+0xe8>
 8000acc:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <Read_Rotary+0x174>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b0e      	cmp	r3, #14
 8000ad2:	d003      	beq.n	8000adc <Read_Rotary+0xe8>
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <Read_Rotary+0x174>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d10e      	bne.n	8000afa <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <Read_Rotary+0x178>)
 8000ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <Read_Rotary+0x178>)
 8000aec:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af4:	4817      	ldr	r0, [pc, #92]	; (8000b54 <Read_Rotary+0x160>)
 8000af6:	f001 f87b 	bl	8001bf0 <HAL_GPIO_WritePin>
        }
        clockState = 0;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <Read_Rotary+0x170>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <Read_Rotary+0x174>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <Read_Rotary+0x164>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <Read_Rotary+0x168>)
 8000b0c:	6013      	str	r3, [r2, #0]

    if (iTimer > 20000)
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <Read_Rotary+0x17c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b16:	4293      	cmp	r3, r2
 8000b18:	dd09      	ble.n	8000b2e <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <Read_Rotary+0x178>)
 8000b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4814      	ldr	r0, [pc, #80]	; (8000b74 <Read_Rotary+0x180>)
 8000b24:	f00b f874 	bl	800bc10 <iprintf>
        iTimer = 0;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <Read_Rotary+0x17c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <Read_Rotary+0x17c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <Read_Rotary+0x17c>)
 8000b36:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 8000b38:	2101      	movs	r1, #1
 8000b3a:	480f      	ldr	r0, [pc, #60]	; (8000b78 <Read_Rotary+0x184>)
 8000b3c:	f001 f840 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <Read_Rotary+0x158>
        {
          readValue = 0;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <Read_Rotary+0x178>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	801a      	strh	r2, [r3, #0]
        }
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	48000800 	.word	0x48000800
 8000b58:	200002fc 	.word	0x200002fc
 8000b5c:	200002f4 	.word	0x200002f4
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000300 	.word	0x20000300
 8000b68:	20000304 	.word	0x20000304
 8000b6c:	200002f0 	.word	0x200002f0
 8000b70:	200002f8 	.word	0x200002f8
 8000b74:	0800cbc0 	.word	0x0800cbc0
 8000b78:	48000c00 	.word	0x48000c00

08000b7c <LL_AHB2_GRP1_EnableClock>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a27      	ldr	r2, [pc, #156]	; (8000c9c <HAL_TIM_Base_MspInit+0xac>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d137      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c02:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c06:	f7ff ffd2 	bl	8000bae <LL_APB2_GRP1_EnableClock>

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel1;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c0c:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c12:	2217      	movs	r2, #23
 8000c14:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c18:	2210      	movs	r2, #16
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1c:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000c44:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c46:	f000 fb77 	bl	8001338 <HAL_DMA_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_TIM_Base_MspInit+0x64>
    {
      Error_Handler();
 8000c50:	f7ff fe4a 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2019      	movs	r0, #25
 8000c66:	f000 fb32 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f000 fb49 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c70:	e010      	b.n	8000c94 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d10b      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c80:	f7ff ff95 	bl	8000bae <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2019      	movs	r0, #25
 8000c8a:	f000 fb20 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c8e:	2019      	movs	r0, #25
 8000c90:	f000 fb37 	bl	8001302 <HAL_NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40012c00 	.word	0x40012c00
 8000ca0:	20000260 	.word	0x20000260
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	40014400 	.word	0x40014400

08000cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_TIM_MspPostInit+0x54>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d114      	bne.n	8000cf8 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ff54 	bl	8000b7c <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f000 fdf4 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40012c00 	.word	0x40012c00

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f992 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <DMA1_Channel1_IRQHandler+0x10>)
 8000d5e:	f000 fc6d 	bl	800163c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000260 	.word	0x20000260

08000d6c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <USB_LP_IRQHandler+0x10>)
 8000d72:	f001 f850 	bl	8001e16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200017f0 	.word	0x200017f0

08000d80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000d86:	f004 fe1f 	bl	80059c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000d8c:	f004 fe1c 	bl	80059c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200001c8 	.word	0x200001c8
 8000d98:	20000214 	.word	0x20000214

08000d9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e00a      	b.n	8000dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dae:	f3af 8000 	nop.w
 8000db2:	4601      	mov	r1, r0
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	60ba      	str	r2, [r7, #8]
 8000dba:	b2ca      	uxtb	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf0      	blt.n	8000dae <_read+0x12>
  }

  return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_isatty>:

int _isatty(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f00a fe9c 	bl	800bbac <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20030000 	.word	0x20030000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000308 	.word	0x20000308
 8000ea8:	20001d18 	.word	0x20001d18

08000eac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <SystemInit+0x98>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <SystemInit+0x98>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ed8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <SystemInit+0x9c>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef6:	f023 0305 	bic.w	r3, r3, #5
 8000efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <SystemInit+0xa0>)
 8000f18:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <SystemInit+0xa0>)
 8000f20:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	faf6fefb 	.word	0xfaf6fefb
 8000f4c:	22041000 	.word	0x22041000

08000f50 <CopyDataInit>:
 8000f50:	58d4      	ldr	r4, [r2, r3]
 8000f52:	50c4      	str	r4, [r0, r3]
 8000f54:	3304      	adds	r3, #4

08000f56 <LoopCopyDataInit>:
 8000f56:	18c4      	adds	r4, r0, r3
 8000f58:	428c      	cmp	r4, r1
 8000f5a:	d3f9      	bcc.n	8000f50 <CopyDataInit>
 8000f5c:	4770      	bx	lr

08000f5e <FillZerobss>:
 8000f5e:	6003      	str	r3, [r0, #0]
 8000f60:	3004      	adds	r0, #4

08000f62 <LoopFillZerobss>:
 8000f62:	4288      	cmp	r0, r1
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>
 8000f66:	4770      	bx	lr

08000f68 <Reset_Handler>:
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopForever+0x2>)
 8000f6a:	4685      	mov	sp, r0
 8000f6c:	f7ff ff9e 	bl	8000eac <SystemInit>
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <LoopForever+0x6>)
 8000f72:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <LoopForever+0xa>)
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <LoopForever+0xe>)
 8000f76:	2300      	movs	r3, #0
 8000f78:	f7ff ffed 	bl	8000f56 <LoopCopyDataInit>
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <LoopForever+0x12>)
 8000f7e:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <LoopForever+0x16>)
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <LoopForever+0x1a>)
 8000f82:	2300      	movs	r3, #0
 8000f84:	f7ff ffe7 	bl	8000f56 <LoopCopyDataInit>
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <LoopForever+0x1e>)
 8000f8a:	490c      	ldr	r1, [pc, #48]	; (8000fbc <LoopForever+0x22>)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f7ff ffe8 	bl	8000f62 <LoopFillZerobss>
 8000f92:	f00a fe11 	bl	800bbb8 <__libc_init_array>
 8000f96:	f7ff faab 	bl	80004f0 <main>

08000f9a <LoopForever>:
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
 8000f9c:	20030000 	.word	0x20030000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	200001ac 	.word	0x200001ac
 8000fa8:	0800cd68 	.word	0x0800cd68
 8000fac:	20030000 	.word	0x20030000
 8000fb0:	20030000 	.word	0x20030000
 8000fb4:	0800cf0c 	.word	0x0800cf0c
 8000fb8:	200001ac 	.word	0x200001ac
 8000fbc:	20001d14 	.word	0x20001d14

08000fc0 <ADC1_IRQHandler>:
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_IRQHandler>
	...

08000fc4 <HAL_Init>:
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_Init+0x3c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_Init+0x3c>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 f96c 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>
 8000fe0:	200f      	movs	r0, #15
 8000fe2:	f000 f80f 	bl	8001004 <HAL_InitTick>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_Init+0x2e>
 8000fec:	2301      	movs	r3, #1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	e001      	b.n	8000ff6 <HAL_Init+0x32>
 8000ff2:	f7ff fdf5 	bl	8000be0 <HAL_MspInit>
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58004000 	.word	0x58004000

08001004 <HAL_InitTick>:
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_InitTick+0x6c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d024      	beq.n	8001062 <HAL_InitTick+0x5e>
 8001018:	f003 fbf4 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 800101c:	4602      	mov	r2, r0
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_InitTick+0x6c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	fbb3 f3f1 	udiv	r3, r3, r1
 800102c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f974 	bl	800131e <HAL_SYSTICK_Config>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10f      	bne.n	800105c <HAL_InitTick+0x58>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d809      	bhi.n	8001056 <HAL_InitTick+0x52>
 8001042:	2200      	movs	r2, #0
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	f04f 30ff 	mov.w	r0, #4294967295
 800104a:	f000 f940 	bl	80012ce <HAL_NVIC_SetPriority>
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <HAL_InitTick+0x70>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e007      	b.n	8001066 <HAL_InitTick+0x62>
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e004      	b.n	8001066 <HAL_InitTick+0x62>
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <HAL_InitTick+0x62>
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000050 	.word	0x20000050
 8001074:	2000004c 	.word	0x2000004c

08001078 <HAL_IncTick>:
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000050 	.word	0x20000050
 800109c:	2000030c 	.word	0x2000030c

080010a0 <HAL_GetTick>:
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2000030c 	.word	0x2000030c

080010b8 <HAL_GetTickPrio>:
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTickPrio+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000004c 	.word	0x2000004c

080010d0 <HAL_Delay>:
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	f7ff ffe2 	bl	80010a0 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	bf00      	nop
 80010f8:	f7ff ffd2 	bl	80010a0 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000050 	.word	0x20000050

08001118 <__NVIC_SetPriorityGrouping>:
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
 8001264:	4313      	orrs	r3, r2
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	f7ff ff40 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff33 	bl	800117c <__NVIC_EnableIRQ>
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa4 	bl	8001274 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_DMA_Init>:
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_DMA_Init+0x12>
 8001346:	2301      	movs	r3, #1
 8001348:	e08e      	b.n	8001468 <HAL_DMA_Init+0x130>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_DMA_Init+0x138>)
 8001352:	429a      	cmp	r2, r3
 8001354:	d80f      	bhi.n	8001376 <HAL_DMA_Init+0x3e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_DMA_Init+0x13c>)
 800135e:	4413      	add	r3, r2
 8001360:	4a45      	ldr	r2, [pc, #276]	; (8001478 <HAL_DMA_Init+0x140>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	009a      	lsls	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a42      	ldr	r2, [pc, #264]	; (800147c <HAL_DMA_Init+0x144>)
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
 8001374:	e00e      	b.n	8001394 <HAL_DMA_Init+0x5c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b40      	ldr	r3, [pc, #256]	; (8001480 <HAL_DMA_Init+0x148>)
 800137e:	4413      	add	r3, r2
 8001380:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <HAL_DMA_Init+0x140>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	009a      	lsls	r2, r3, #2
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a3c      	ldr	r2, [pc, #240]	; (8001484 <HAL_DMA_Init+0x14c>)
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa16 	bl	8001818 <DMA_CalcDMAMUXChannelBaseAndMask>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013f4:	d102      	bne.n	80013fc <HAL_DMA_Init+0xc4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001404:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d010      	beq.n	800143e <HAL_DMA_Init+0x106>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b04      	cmp	r3, #4
 8001422:	d80c      	bhi.n	800143e <HAL_DMA_Init+0x106>
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fa35 	bl	8001894 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	e008      	b.n	8001450 <HAL_DMA_Init+0x118>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	659a      	str	r2, [r3, #88]	; 0x58
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001466:	2300      	movs	r3, #0
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40020407 	.word	0x40020407
 8001474:	bffdfff8 	.word	0xbffdfff8
 8001478:	cccccccd 	.word	0xcccccccd
 800147c:	40020000 	.word	0x40020000
 8001480:	bffdfbf8 	.word	0xbffdfbf8
 8001484:	40020400 	.word	0x40020400

08001488 <HAL_DMA_Start_IT>:
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_DMA_Start_IT+0x20>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e066      	b.n	8001576 <HAL_DMA_Start_IT+0xee>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d155      	bne.n	8001568 <HAL_DMA_Start_IT+0xe0>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 f95a 	bl	800179a <DMA_SetConfig>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Start_IT+0x78>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 020e 	orr.w	r2, r2, #14
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e00f      	b.n	8001520 <HAL_DMA_Start_IT+0x98>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0204 	bic.w	r2, r2, #4
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 020a 	orr.w	r2, r2, #10
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <HAL_DMA_Start_IT+0xb6>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_DMA_Start_IT+0xce>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e005      	b.n	8001574 <HAL_DMA_Start_IT+0xec>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001570:	2302      	movs	r3, #2
 8001572:	75fb      	strb	r3, [r7, #23]
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_DMA_Abort_IT>:
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d005      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x24>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2204      	movs	r2, #4
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e047      	b.n	8001632 <HAL_DMA_Abort_IT+0xb4>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 020e 	bic.w	r2, r2, #14
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f003 021c 	and.w	r2, r3, #28
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <HAL_DMA_Abort_IT+0x94>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_DMA_Abort_IT+0xb4>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_DMA_IRQHandler>:
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f003 031c 	and.w	r3, r3, #28
 800165c:	2204      	movs	r2, #4
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d026      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x7a>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d021      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x7a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_DMA_IRQHandler+0x54>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f003 021c 	and.w	r2, r3, #28
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2104      	movs	r1, #4
 800169e:	fa01 f202 	lsl.w	r2, r1, r2
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d071      	beq.n	8001790 <HAL_DMA_IRQHandler+0x154>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e06c      	b.n	8001790 <HAL_DMA_IRQHandler+0x154>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f003 031c 	and.w	r3, r3, #28
 80016be:	2202      	movs	r2, #2
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d02e      	beq.n	8001728 <HAL_DMA_IRQHandler+0xec>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d029      	beq.n	8001728 <HAL_DMA_IRQHandler+0xec>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10b      	bne.n	80016fa <HAL_DMA_IRQHandler+0xbe>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 020a 	bic.w	r2, r2, #10
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f003 021c 	and.w	r2, r3, #28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2102      	movs	r1, #2
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d038      	beq.n	8001790 <HAL_DMA_IRQHandler+0x154>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
 8001726:	e033      	b.n	8001790 <HAL_DMA_IRQHandler+0x154>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f003 031c 	and.w	r3, r3, #28
 8001730:	2208      	movs	r2, #8
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02a      	beq.n	8001792 <HAL_DMA_IRQHandler+0x156>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d025      	beq.n	8001792 <HAL_DMA_IRQHandler+0x156>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 020e 	bic.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 021c 	and.w	r2, r3, #28
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_DMA_IRQHandler+0x156>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <DMA_SetConfig>:
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <DMA_SetConfig+0x2a>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f003 021c 	and.w	r2, r3, #28
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d108      	bne.n	80017fa <DMA_SetConfig+0x60>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	e007      	b.n	800180a <DMA_SetConfig+0x70>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <DMA_CalcDMAMUXChannelBaseAndMask>:
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001828:	429a      	cmp	r2, r3
 800182a:	d80a      	bhi.n	8001842 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001838:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6493      	str	r3, [r2, #72]	; 0x48
 8001840:	e007      	b.n	8001852 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800184c:	4413      	add	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6493      	str	r3, [r2, #72]	; 0x48
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3b08      	subs	r3, #8
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001868:	64da      	str	r2, [r3, #76]	; 0x4c
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2201      	movs	r2, #1
 8001872:	409a      	lsls	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40020407 	.word	0x40020407
 8001888:	4002081c 	.word	0x4002081c
 800188c:	cccccccd 	.word	0xcccccccd
 8001890:	40020880 	.word	0x40020880

08001894 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80018b8:	659a      	str	r2, [r3, #88]	; 0x58
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2201      	movs	r2, #1
 80018c4:	409a      	lsls	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	1000823f 	.word	0x1000823f
 80018dc:	40020940 	.word	0x40020940

080018e0 <HAL_GPIO_Init>:
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e14c      	b.n	8001b8a <HAL_GPIO_Init+0x2aa>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 813e 	beq.w	8001b84 <HAL_GPIO_Init+0x2a4>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d005      	beq.n	8001920 <HAL_GPIO_Init+0x40>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d130      	bne.n	8001982 <HAL_GPIO_Init+0xa2>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	2201      	movs	r2, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 0201 	and.w	r2, r3, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b03      	cmp	r3, #3
 800198c:	d017      	beq.n	80019be <HAL_GPIO_Init+0xde>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d123      	bne.n	8001a12 <HAL_GPIO_Init+0x132>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	6939      	ldr	r1, [r7, #16]
 8001a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0203 	and.w	r2, r3, #3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8098 	beq.w	8001b84 <HAL_GPIO_Init+0x2a4>
 8001a54:	4a54      	ldr	r2, [pc, #336]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a7e:	d019      	beq.n	8001ab4 <HAL_GPIO_Init+0x1d4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x2cc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_GPIO_Init+0x1d0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_GPIO_Init+0x1cc>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2d4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x1c8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <HAL_GPIO_Init+0x2d8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_GPIO_Init+0x1c4>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e008      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4938      	ldr	r1, [pc, #224]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x218>
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x242>
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6053      	str	r3, [r2, #4]
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x26e>
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x29c>
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f47f aeab 	bne.w	80018f0 <HAL_GPIO_Init+0x10>
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	48000800 	.word	0x48000800
 8001bb4:	48000c00 	.word	0x48000c00
 8001bb8:	48001000 	.word	0x48001000
 8001bbc:	58000800 	.word	0x58000800

08001bc0 <HAL_GPIO_ReadPin>:
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_GPIO_ReadPin+0x1e>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e001      	b.n	8001be2 <HAL_GPIO_ReadPin+0x22>
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_GPIO_WritePin>:
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_WritePin+0x24>
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_PCD_Init>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	b08b      	sub	sp, #44	; 0x2c
 8001c24:	af06      	add	r7, sp, #24
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_PCD_Init+0x12>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0cb      	b.n	8001dca <HAL_PCD_Init+0x1aa>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_PCD_Init+0x2c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f009 fc86 	bl	800b558 <HAL_PCD_MspInit>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 ff7e 	bl	8006b5a <USB_DisableGlobalInt>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e040      	b.n	8001ce6 <HAL_PCD_Init+0xc6>
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	3301      	adds	r3, #1
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3303      	adds	r3, #3
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3338      	adds	r3, #56	; 0x38
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	333c      	adds	r3, #60	; 0x3c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3340      	adds	r3, #64	; 0x40
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3b9      	bcc.n	8001c64 <HAL_PCD_Init+0x44>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e044      	b.n	8001d80 <HAL_PCD_Init+0x160>
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3b5      	bcc.n	8001cf6 <HAL_PCD_Init+0xd6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	687e      	ldr	r6, [r7, #4]
 8001d92:	466d      	mov	r5, sp
 8001d94:	f106 0410 	add.w	r4, r6, #16
 8001d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	602b      	str	r3, [r5, #0]
 8001da0:	1d33      	adds	r3, r6, #4
 8001da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f004 fef3 	bl	8006b90 <USB_DevInit>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_PCD_Init+0x1a8>
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f001 fc45 	bl	8003652 <HAL_PCDEx_ActivateLPM>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd2 <HAL_PCD_Start>:
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_Start+0x16>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e012      	b.n	8001e0e <HAL_PCD_Start+0x3c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 fe99 	bl	8006b2c <USB_EnableGlobalInt>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f007 f95d 	bl	80090be <USB_DevConnect>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_IRQHandler>:
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f007 f962 	bl	80090ec <USB_ReadInterrupts>
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x26>
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fb05 	bl	8002444 <PCD_EP_ISR_Handler>
 8001e3a:	e110      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d013      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x58>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f009 fc2d 	bl	800b6be <HAL_PCD_ResetCallback>
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8fc 	bl	8002064 <HAL_PCD_SetAddress>
 8001e6c:	e0f7      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00c      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x7c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001e90:	e0e5      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_PCD_IRQHandler+0xa0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001eb4:	e0d3      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d034      	beq.n	8001f2a <HAL_PCD_IRQHandler+0x114>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0204 	bic.w	r2, r2, #4
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0208 	bic.w	r2, r2, #8
 8001eea:	b292      	uxth	r2, r2
 8001eec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_PCD_IRQHandler+0xf4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8001f02:	2100      	movs	r1, #0
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f009 fdd1 	bl	800baac <HAL_PCDEx_LPM_Callback>
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f009 fc10 	bl	800b730 <HAL_PCD_ResumeCallback>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f22:	b292      	uxth	r2, r2
 8001f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001f28:	e099      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d027      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x16e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0208 	orr.w	r2, r2, #8
 8001f46:	b292      	uxth	r2, r2
 8001f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0204 	orr.w	r2, r2, #4
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f009 fbbd 	bl	800b6fc <HAL_PCD_SuspendCallback>
 8001f82:	e06c      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d040      	beq.n	8002010 <HAL_PCD_IRQHandler+0x1fa>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d12b      	bne.n	8002008 <HAL_PCD_IRQHandler+0x1f2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0204 	orr.w	r2, r2, #4
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8001ffe:	2101      	movs	r1, #1
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f009 fd53 	bl	800baac <HAL_PCDEx_LPM_Callback>
 8002006:	e02a      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f009 fb77 	bl	800b6fc <HAL_PCD_SuspendCallback>
 800200e:	e026      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00f      	beq.n	800203a <HAL_PCD_IRQHandler+0x224>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800202c:	b292      	uxth	r2, r2
 800202e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f009 fb35 	bl	800b6a2 <HAL_PCD_SOFCallback>
 8002038:	e011      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00c      	beq.n	800205e <HAL_PCD_IRQHandler+0x248>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002056:	b292      	uxth	r2, r2
 8002058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_SetAddress>:
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_PCD_SetAddress+0x1a>
 800207a:	2302      	movs	r3, #2
 800207c:	e013      	b.n	80020a6 <HAL_PCD_SetAddress+0x42>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f006 fffd 	bl	8009096 <USB_SetDevAddress>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80020a4:	2300      	movs	r3, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_EP_Open>:
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	4608      	mov	r0, r1
 80020b8:	4611      	mov	r1, r2
 80020ba:	461a      	mov	r2, r3
 80020bc:	4603      	mov	r3, r0
 80020be:	70fb      	strb	r3, [r7, #3]
 80020c0:	460b      	mov	r3, r1
 80020c2:	803b      	strh	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	70bb      	strb	r3, [r7, #2]
 80020c8:	2300      	movs	r3, #0
 80020ca:	72fb      	strb	r3, [r7, #11]
 80020cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da0e      	bge.n	80020f2 <HAL_PCD_EP_Open+0x44>
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	705a      	strb	r2, [r3, #1]
 80020f0:	e00e      	b.n	8002110 <HAL_PCD_EP_Open+0x62>
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0207 	and.w	r2, r3, #7
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	883a      	ldrh	r2, [r7, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	611a      	str	r2, [r3, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	78ba      	ldrb	r2, [r7, #2]
 8002126:	70da      	strb	r2, [r3, #3]
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d102      	bne.n	8002134 <HAL_PCD_EP_Open+0x86>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	711a      	strb	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_PCD_EP_Open+0x94>
 800213e:	2302      	movs	r3, #2
 8002140:	e00e      	b.n	8002160 <HAL_PCD_EP_Open+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f004 fd3f 	bl	8006bd4 <USB_ActivateEndpoint>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_Close>:
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
 8002174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da0e      	bge.n	800219a <HAL_PCD_EP_Close+0x32>
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	705a      	strb	r2, [r3, #1]
 8002198:	e00e      	b.n	80021b8 <HAL_PCD_EP_Close+0x50>
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 0207 	and.w	r2, r3, #7
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	705a      	strb	r2, [r3, #1]
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_PCD_EP_Close+0x6a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e00e      	b.n	80021f0 <HAL_PCD_EP_Close+0x88>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f005 f8bb 	bl	800735c <USB_DeactivateEndpoint>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80021ee:	2300      	movs	r3, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_PCD_EP_Receive>:
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	460b      	mov	r3, r1
 8002206:	72fb      	strb	r3, [r7, #11]
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	f003 0207 	and.w	r2, r3, #7
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	615a      	str	r2, [r3, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	619a      	str	r2, [r3, #24]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	705a      	strb	r2, [r3, #1]
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	b2da      	uxtb	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6979      	ldr	r1, [r7, #20]
 800224a:	4618      	mov	r0, r3
 800224c:	f005 fa73 	bl	8007736 <USB_EPStartXfer>
 8002250:	2300      	movs	r3, #0
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_PCD_EP_GetRxCount>:
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	70fb      	strb	r3, [r7, #3]
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 0207 	and.w	r2, r3, #7
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_PCD_EP_Transmit>:
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	460b      	mov	r3, r1
 8002298:	72fb      	strb	r3, [r7, #11]
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	615a      	str	r2, [r3, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	619a      	str	r2, [r3, #24]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	621a      	str	r2, [r3, #32]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	61da      	str	r2, [r3, #28]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2201      	movs	r2, #1
 80022d4:	705a      	strb	r2, [r3, #1]
 80022d6:	7afb      	ldrb	r3, [r7, #11]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6979      	ldr	r1, [r7, #20]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f005 fa24 	bl	8007736 <USB_EPStartXfer>
 80022ee:	2300      	movs	r3, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_SetStall>:
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 0207 	and.w	r2, r3, #7
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d901      	bls.n	8002316 <HAL_PCD_EP_SetStall+0x1e>
 8002312:	2301      	movs	r3, #1
 8002314:	e03e      	b.n	8002394 <HAL_PCD_EP_SetStall+0x9c>
 8002316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da0e      	bge.n	800233c <HAL_PCD_EP_SetStall+0x44>
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	705a      	strb	r2, [r3, #1]
 800233a:	e00c      	b.n	8002356 <HAL_PCD_EP_SetStall+0x5e>
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	705a      	strb	r2, [r3, #1]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	709a      	strb	r2, [r3, #2]
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	b2da      	uxtb	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_PCD_EP_SetStall+0x7e>
 8002372:	2302      	movs	r3, #2
 8002374:	e00e      	b.n	8002394 <HAL_PCD_EP_SetStall+0x9c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f006 fd87 	bl	8008e98 <USB_EPSetStall>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8002392:	2300      	movs	r3, #0
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_PCD_EP_ClrStall>:
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 020f 	and.w	r2, r3, #15
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d901      	bls.n	80023ba <HAL_PCD_EP_ClrStall+0x1e>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e040      	b.n	800243c <HAL_PCD_EP_ClrStall+0xa0>
 80023ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da0e      	bge.n	80023e0 <HAL_PCD_EP_ClrStall+0x44>
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	705a      	strb	r2, [r3, #1]
 80023de:	e00e      	b.n	80023fe <HAL_PCD_EP_ClrStall+0x62>
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 0207 	and.w	r2, r3, #7
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	709a      	strb	r2, [r3, #2]
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_PCD_EP_ClrStall+0x82>
 800241a:	2302      	movs	r3, #2
 800241c:	e00e      	b.n	800243c <HAL_PCD_EP_ClrStall+0xa0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	4618      	mov	r0, r3
 800242e:	f006 fd84 	bl	8008f3a <USB_EPClearStall>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800243a:	2300      	movs	r3, #0
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <PCD_EP_ISR_Handler>:
 8002444:	b580      	push	{r7, lr}
 8002446:	b096      	sub	sp, #88	; 0x58
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	e3b1      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002456:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800245a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002468:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8173 	bne.w	8002758 <PCD_EP_ISR_Handler+0x314>
 8002472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d150      	bne.n	8002520 <PCD_EP_ISR_Handler+0xdc>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800248a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248e:	81fb      	strh	r3, [r7, #14]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800249a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8013      	strh	r3, [r2, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3328      	adds	r3, #40	; 0x28
 80024a6:	657b      	str	r3, [r7, #84]	; 0x54
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	61da      	str	r2, [r3, #28]
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	441a      	add	r2, r3
 80024da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024dc:	615a      	str	r2, [r3, #20]
 80024de:	2100      	movs	r1, #0
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f009 f8c4 	bl	800b66e <HAL_PCD_DataInStageCallback>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 835f 	beq.w	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 80024f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 835a 	bne.w	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800250a:	b2da      	uxtb	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b292      	uxth	r2, r2
 8002512:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800251e:	e348      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002526:	657b      	str	r3, [r7, #84]	; 0x54
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253a:	2b00      	cmp	r3, #0
 800253c:	d032      	beq.n	80025a4 <PCD_EP_ISR_Handler+0x160>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4413      	add	r3, r2
 8002558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002564:	61da      	str	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002572:	88da      	ldrh	r2, [r3, #6]
 8002574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f006 fe09 	bl	8009190 <USB_ReadPMA>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29a      	uxth	r2, r3
 8002586:	f640 738f 	movw	r3, #3983	; 0xf8f
 800258a:	4013      	ands	r3, r2
 800258c:	823b      	strh	r3, [r7, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	8a3a      	ldrh	r2, [r7, #16]
 8002594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002598:	b292      	uxth	r2, r2
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f009 f839 	bl	800b614 <HAL_PCD_SetupStageCallback>
 80025a2:	e306      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 80025a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f280 8302 	bge.w	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025ba:	4013      	ands	r3, r2
 80025bc:	83fb      	strh	r3, [r7, #30]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	8bfa      	ldrh	r2, [r7, #30]
 80025c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025c8:	b292      	uxth	r2, r2
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f2:	61da      	str	r2, [r3, #28]
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d019      	beq.n	8002630 <PCD_EP_ISR_Handler+0x1ec>
 80025fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d015      	beq.n	8002630 <PCD_EP_ISR_Handler+0x1ec>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	6959      	ldr	r1, [r3, #20]
 800260c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260e:	88da      	ldrh	r2, [r3, #6]
 8002610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	b29b      	uxth	r3, r3
 8002616:	f006 fdbb 	bl	8009190 <USB_ReadPMA>
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	441a      	add	r2, r3
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	615a      	str	r2, [r3, #20]
 8002628:	2100      	movs	r1, #0
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f009 f804 	bl	800b638 <HAL_PCD_DataOutStageCallback>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800263a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800263e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 82b5 	bne.w	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002648:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800264c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002654:	f000 82ad 	beq.w	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	b29a      	uxth	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b3e      	cmp	r3, #62	; 0x3e
 800268e:	d91d      	bls.n	80026cc <PCD_EP_ISR_Handler+0x288>
 8002690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	647b      	str	r3, [r7, #68]	; 0x44
 8002698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <PCD_EP_ISR_Handler+0x266>
 80026a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a6:	3b01      	subs	r3, #1
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	801a      	strh	r2, [r3, #0]
 80026ca:	e026      	b.n	800271a <PCD_EP_ISR_Handler+0x2d6>
 80026cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <PCD_EP_ISR_Handler+0x2a6>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e017      	b.n	800271a <PCD_EP_ISR_Handler+0x2d6>
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <PCD_EP_ISR_Handler+0x2c0>
 80026fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002700:	3301      	adds	r3, #1
 8002702:	647b      	str	r3, [r7, #68]	; 0x44
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29a      	uxth	r2, r3
 800270a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270c:	b29b      	uxth	r3, r3
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	b29b      	uxth	r3, r3
 8002712:	4313      	orrs	r3, r2
 8002714:	b29a      	uxth	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	827b      	strh	r3, [r7, #18]
 800272c:	8a7b      	ldrh	r3, [r7, #18]
 800272e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002732:	827b      	strh	r3, [r7, #18]
 8002734:	8a7b      	ldrh	r3, [r7, #18]
 8002736:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800273a:	827b      	strh	r3, [r7, #18]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	8a7b      	ldrh	r3, [r7, #18]
 8002742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800274a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002752:	b29b      	uxth	r3, r3
 8002754:	8013      	strh	r3, [r2, #0]
 8002756:	e22c      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800276c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002770:	2b00      	cmp	r3, #0
 8002772:	f280 80f6 	bge.w	8002962 <PCD_EP_ISR_Handler+0x51e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29a      	uxth	r2, r3
 8002788:	f640 738f 	movw	r3, #3983	; 0xf8f
 800278c:	4013      	ands	r3, r2
 800278e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80027a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a8:	b292      	uxth	r2, r2
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	657b      	str	r3, [r7, #84]	; 0x54
 80027c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c4:	7b1b      	ldrb	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d123      	bne.n	8002812 <PCD_EP_ISR_Handler+0x3ce>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80027f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 808e 	beq.w	8002918 <PCD_EP_ISR_Handler+0x4d4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002802:	6959      	ldr	r1, [r3, #20]
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	88da      	ldrh	r2, [r3, #6]
 8002808:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800280c:	f006 fcc0 	bl	8009190 <USB_ReadPMA>
 8002810:	e082      	b.n	8002918 <PCD_EP_ISR_Handler+0x4d4>
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002814:	78db      	ldrb	r3, [r3, #3]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d10a      	bne.n	8002830 <PCD_EP_ISR_Handler+0x3ec>
 800281a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800281e:	461a      	mov	r2, r3
 8002820:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f9d3 	bl	8002bce <HAL_PCD_EP_DB_Receive>
 8002828:	4603      	mov	r3, r0
 800282a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800282e:	e073      	b.n	8002918 <PCD_EP_ISR_Handler+0x4d4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	441a      	add	r2, r3
 800285c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002870:	b29b      	uxth	r3, r3
 8002872:	8013      	strh	r3, [r2, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d022      	beq.n	80028d4 <PCD_EP_ISR_Handler+0x490>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002896:	b29b      	uxth	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80028b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <PCD_EP_ISR_Handler+0x4d4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	6959      	ldr	r1, [r3, #20]
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	891a      	ldrh	r2, [r3, #8]
 80028ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ce:	f006 fc5f 	bl	8009190 <USB_ReadPMA>
 80028d2:	e021      	b.n	8002918 <PCD_EP_ISR_Handler+0x4d4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80028fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <PCD_EP_ISR_Handler+0x4d4>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290a:	6959      	ldr	r1, [r3, #20]
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	895a      	ldrh	r2, [r3, #10]
 8002910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002914:	f006 fc3c 	bl	8009190 <USB_ReadPMA>
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002920:	441a      	add	r2, r3
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	61da      	str	r2, [r3, #28]
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800292e:	441a      	add	r2, r3
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <PCD_EP_ISR_Handler+0x504>
 800293c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	429a      	cmp	r2, r3
 8002946:	d206      	bcs.n	8002956 <PCD_EP_ISR_Handler+0x512>
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f008 fe72 	bl	800b638 <HAL_PCD_DataOutStageCallback>
 8002954:	e005      	b.n	8002962 <PCD_EP_ISR_Handler+0x51e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800295c:	4618      	mov	r0, r3
 800295e:	f004 feea 	bl	8007736 <USB_EPStartXfer>
 8002962:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8121 	beq.w	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002970:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	657b      	str	r3, [r7, #84]	; 0x54
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	441a      	add	r2, r3
 80029b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029bc:	b29b      	uxth	r3, r3
 80029be:	8013      	strh	r3, [r2, #0]
 80029c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c2:	78db      	ldrb	r3, [r3, #3]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f040 80a2 	bne.w	8002b0e <PCD_EP_ISR_Handler+0x6ca>
 80029ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	7b1b      	ldrb	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8093 	beq.w	8002b00 <PCD_EP_ISR_Handler+0x6bc>
 80029da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d046      	beq.n	8002a74 <PCD_EP_ISR_Handler+0x630>
 80029e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d126      	bne.n	8002a3c <PCD_EP_ISR_Handler+0x5f8>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	4413      	add	r3, r2
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	00da      	lsls	r2, r3, #3
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	4413      	add	r3, r2
 8002a10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a14:	623b      	str	r3, [r7, #32]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	801a      	strh	r2, [r3, #0]
 8002a3a:	e061      	b.n	8002b00 <PCD_EP_ISR_Handler+0x6bc>
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d15d      	bne.n	8002b00 <PCD_EP_ISR_Handler+0x6bc>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	4413      	add	r3, r2
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	00da      	lsls	r2, r3, #3
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	4413      	add	r3, r2
 8002a66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	2200      	movs	r2, #0
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	e045      	b.n	8002b00 <PCD_EP_ISR_Handler+0x6bc>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d126      	bne.n	8002ad0 <PCD_EP_ISR_Handler+0x68c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a96:	4413      	add	r3, r2
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	00da      	lsls	r2, r3, #3
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	e017      	b.n	8002b00 <PCD_EP_ISR_Handler+0x6bc>
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d113      	bne.n	8002b00 <PCD_EP_ISR_Handler+0x6bc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	4413      	add	r3, r2
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00da      	lsls	r2, r3, #3
 8002af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	2200      	movs	r2, #0
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f008 fdb1 	bl	800b66e <HAL_PCD_DataInStageCallback>
 8002b0c:	e051      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002b0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d144      	bne.n	8002ba4 <PCD_EP_ISR_Handler+0x760>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d907      	bls.n	8002b5e <PCD_EP_ISR_Handler+0x71a>
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b56:	1ad2      	subs	r2, r2, r3
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	619a      	str	r2, [r3, #24]
 8002b5c:	e002      	b.n	8002b64 <PCD_EP_ISR_Handler+0x720>
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <PCD_EP_ISR_Handler+0x736>
 8002b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f008 fd7b 	bl	800b66e <HAL_PCD_DataInStageCallback>
 8002b78:	e01b      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b82:	441a      	add	r2, r3
 8002b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b86:	615a      	str	r2, [r3, #20]
 8002b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b90:	441a      	add	r2, r3
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	61da      	str	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 fdca 	bl	8007736 <USB_EPStartXfer>
 8002ba2:	e006      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x76e>
 8002ba4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f917 	bl	8002de0 <HAL_PCD_EP_DB_Transmit>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f6ff ac45 	blt.w	800244e <PCD_EP_ISR_Handler+0xa>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3758      	adds	r7, #88	; 0x58
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_PCD_EP_DB_Receive>:
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b088      	sub	sp, #32
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	80fb      	strh	r3, [r7, #6]
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d07c      	beq.n	8002ce0 <HAL_PCD_EP_DB_Receive+0x112>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0a:	837b      	strh	r3, [r7, #26]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	8b7b      	ldrh	r3, [r7, #26]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d306      	bcc.n	8002c24 <HAL_PCD_EP_DB_Receive+0x56>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	8b7b      	ldrh	r3, [r7, #26]
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	e002      	b.n	8002c2a <HAL_PCD_EP_DB_Receive+0x5c>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d123      	bne.n	8002c7a <HAL_PCD_EP_DB_Receive+0xac>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4c:	833b      	strh	r3, [r7, #24]
 8002c4e:	8b3b      	ldrh	r3, [r7, #24]
 8002c50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c54:	833b      	strh	r3, [r7, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	8b3b      	ldrh	r3, [r7, #24]
 8002c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8013      	strh	r3, [r2, #0]
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01f      	beq.n	8002cc4 <HAL_PCD_EP_DB_Receive+0xf6>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	82fb      	strh	r3, [r7, #22]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	8afb      	ldrh	r3, [r7, #22]
 8002cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	8013      	strh	r3, [r2, #0]
 8002cc4:	8b7b      	ldrh	r3, [r7, #26]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8085 	beq.w	8002dd6 <HAL_PCD_EP_DB_Receive+0x208>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6959      	ldr	r1, [r3, #20]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	891a      	ldrh	r2, [r3, #8]
 8002cd8:	8b7b      	ldrh	r3, [r7, #26]
 8002cda:	f006 fa59 	bl	8009190 <USB_ReadPMA>
 8002cde:	e07a      	b.n	8002dd6 <HAL_PCD_EP_DB_Receive+0x208>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d04:	837b      	strh	r3, [r7, #26]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	8b7b      	ldrh	r3, [r7, #26]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d306      	bcc.n	8002d1e <HAL_PCD_EP_DB_Receive+0x150>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	8b7b      	ldrh	r3, [r7, #26]
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	619a      	str	r2, [r3, #24]
 8002d1c:	e002      	b.n	8002d24 <HAL_PCD_EP_DB_Receive+0x156>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d123      	bne.n	8002d74 <HAL_PCD_EP_DB_Receive+0x1a6>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	83fb      	strh	r3, [r7, #30]
 8002d48:	8bfb      	ldrh	r3, [r7, #30]
 8002d4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d4e:	83fb      	strh	r3, [r7, #30]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	441a      	add	r2, r3
 8002d5e:	8bfb      	ldrh	r3, [r7, #30]
 8002d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	8013      	strh	r3, [r2, #0]
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11f      	bne.n	8002dbe <HAL_PCD_EP_DB_Receive+0x1f0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d98:	83bb      	strh	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	8bbb      	ldrh	r3, [r7, #28]
 8002daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8013      	strh	r3, [r2, #0]
 8002dbe:	8b7b      	ldrh	r3, [r7, #26]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_PCD_EP_DB_Receive+0x208>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6959      	ldr	r1, [r3, #20]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	895a      	ldrh	r2, [r3, #10]
 8002dd0:	8b7b      	ldrh	r3, [r7, #26]
 8002dd2:	f006 f9dd 	bl	8009190 <USB_ReadPMA>
 8002dd6:	8b7b      	ldrh	r3, [r7, #26]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_PCD_EP_DB_Transmit>:
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b0a4      	sub	sp, #144	; 0x90
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 81db 	beq.w	80031b0 <HAL_PCD_EP_DB_Transmit+0x3d0>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d907      	bls.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x5e>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	619a      	str	r2, [r3, #24]
 8002e3c:	e002      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x64>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 80b9 	bne.w	8002fc0 <HAL_PCD_EP_DB_Transmit+0x1e0>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d126      	bne.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	4413      	add	r3, r2
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	00da      	lsls	r2, r3, #3
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	801a      	strh	r2, [r3, #0]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	801a      	strh	r2, [r3, #0]
 8002ea2:	e01a      	b.n	8002eda <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d116      	bne.n	8002eda <HAL_PCD_EP_DB_Transmit+0xfa>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	4413      	add	r3, r2
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	00da      	lsls	r2, r3, #3
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	4413      	add	r3, r2
 8002ece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d126      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x156>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	00da      	lsls	r2, r3, #3
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	e017      	b.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d113      	bne.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	4413      	add	r3, r2
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	00da      	lsls	r2, r3, #3
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	4413      	add	r3, r2
 8002f5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2200      	movs	r2, #0
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f008 fb7e 	bl	800b66e <HAL_PCD_DataInStageCallback>
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 82fa 	beq.w	8003572 <HAL_PCD_EP_DB_Transmit+0x792>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f98:	82fb      	strh	r3, [r7, #22]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	8afb      	ldrh	r3, [r7, #22]
 8002faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
 8002fbe:	e2d8      	b.n	8003572 <HAL_PCD_EP_DB_Transmit+0x792>
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d021      	beq.n	800300e <HAL_PCD_EP_DB_Transmit+0x22e>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003014:	2b01      	cmp	r3, #1
 8003016:	f040 82ac 	bne.w	8003572 <HAL_PCD_EP_DB_Transmit+0x792>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003022:	441a      	add	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	615a      	str	r2, [r3, #20]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003030:	441a      	add	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	61da      	str	r2, [r3, #28]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	429a      	cmp	r2, r3
 8003040:	d30b      	bcc.n	800305a <HAL_PCD_EP_DB_Transmit+0x27a>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003052:	1ad2      	subs	r2, r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	621a      	str	r2, [r3, #32]
 8003058:	e017      	b.n	800308a <HAL_PCD_EP_DB_Transmit+0x2aa>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_PCD_EP_DB_Transmit+0x294>
 8003062:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003072:	e00a      	b.n	800308a <HAL_PCD_EP_DB_Transmit+0x2aa>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	621a      	str	r2, [r3, #32]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d165      	bne.n	800315e <HAL_PCD_EP_DB_Transmit+0x37e>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a6:	4413      	add	r3, r2
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	4413      	add	r3, r2
 80030b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ce:	2b3e      	cmp	r3, #62	; 0x3e
 80030d0:	d91d      	bls.n	800310e <HAL_PCD_EP_DB_Transmit+0x32e>
 80030d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <HAL_PCD_EP_DB_Transmit+0x30c>
 80030e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e8:	3b01      	subs	r3, #1
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003106:	b29a      	uxth	r2, r3
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	e044      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800310e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_PCD_EP_DB_Transmit+0x34c>
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003124:	b29a      	uxth	r2, r3
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e035      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800312c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48
 8003134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_PCD_EP_DB_Transmit+0x366>
 8003140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003142:	3301      	adds	r3, #1
 8003144:	64bb      	str	r3, [r7, #72]	; 0x48
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29a      	uxth	r2, r3
 800314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314e:	b29b      	uxth	r3, r3
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	b29b      	uxth	r3, r3
 8003154:	4313      	orrs	r3, r2
 8003156:	b29a      	uxth	r2, r3
 8003158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e01c      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d118      	bne.n	8003198 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	647b      	str	r3, [r7, #68]	; 0x44
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317a:	4413      	add	r3, r2
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	00da      	lsls	r2, r3, #3
 8003184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003186:	4413      	add	r3, r2
 8003188:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800318c:	643b      	str	r3, [r7, #64]	; 0x40
 800318e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003192:	b29a      	uxth	r2, r3
 8003194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003196:	801a      	strh	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	6959      	ldr	r1, [r3, #20]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	891a      	ldrh	r2, [r3, #8]
 80031a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f005 ffaf 	bl	800910c <USB_WritePMA>
 80031ae:	e1e0      	b.n	8003572 <HAL_PCD_EP_DB_Transmit+0x792>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d307      	bcc.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x414>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031ec:	1ad2      	subs	r2, r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	e002      	b.n	80031fa <HAL_PCD_EP_DB_Transmit+0x41a>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 80c0 	bne.w	8003384 <HAL_PCD_EP_DB_Transmit+0x5a4>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d126      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x47a>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003220:	4413      	add	r3, r2
 8003222:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	00da      	lsls	r2, r3, #3
 800322a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800322c:	4413      	add	r3, r2
 800322e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003232:	67bb      	str	r3, [r7, #120]	; 0x78
 8003234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800323e:	b29a      	uxth	r2, r3
 8003240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003252:	b29a      	uxth	r2, r3
 8003254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	e01a      	b.n	8003290 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d116      	bne.n	8003290 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	667b      	str	r3, [r7, #100]	; 0x64
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003276:	4413      	add	r3, r2
 8003278:	667b      	str	r3, [r7, #100]	; 0x64
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	00da      	lsls	r2, r3, #3
 8003280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003282:	4413      	add	r3, r2
 8003284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003288:	663b      	str	r3, [r7, #96]	; 0x60
 800328a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800328c:	2200      	movs	r2, #0
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	677b      	str	r3, [r7, #116]	; 0x74
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d12b      	bne.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x516>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b2:	4413      	add	r3, r2
 80032b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	00da      	lsls	r2, r3, #3
 80032bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032be:	4413      	add	r3, r2
 80032c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032da:	801a      	strh	r2, [r3, #0]
 80032dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	e017      	b.n	8003326 <HAL_PCD_EP_DB_Transmit+0x546>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d113      	bne.n	8003326 <HAL_PCD_EP_DB_Transmit+0x546>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800330c:	4413      	add	r3, r2
 800330e:	677b      	str	r3, [r7, #116]	; 0x74
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	00da      	lsls	r2, r3, #3
 8003316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003318:	4413      	add	r3, r2
 800331a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800331e:	673b      	str	r3, [r7, #112]	; 0x70
 8003320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003322:	2200      	movs	r2, #0
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f008 f99e 	bl	800b66e <HAL_PCD_DataInStageCallback>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 811a 	bne.w	8003572 <HAL_PCD_EP_DB_Transmit+0x792>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003358:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800337a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]
 8003382:	e0f6      	b.n	8003572 <HAL_PCD_EP_DB_Transmit+0x792>
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d121      	bne.n	80033d2 <HAL_PCD_EP_DB_Transmit+0x5f2>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	8013      	strh	r3, [r2, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 80ca 	bne.w	8003572 <HAL_PCD_EP_DB_Transmit+0x792>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033e6:	441a      	add	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	615a      	str	r2, [r3, #20]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033f4:	441a      	add	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	61da      	str	r2, [r3, #28]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	d30b      	bcc.n	800341e <HAL_PCD_EP_DB_Transmit+0x63e>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003416:	1ad2      	subs	r2, r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	621a      	str	r2, [r3, #32]
 800341c:	e017      	b.n	800344e <HAL_PCD_EP_DB_Transmit+0x66e>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <HAL_PCD_EP_DB_Transmit+0x658>
 8003426:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800342a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003436:	e00a      	b.n	800344e <HAL_PCD_EP_DB_Transmit+0x66e>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2200      	movs	r2, #0
 8003444:	621a      	str	r2, [r3, #32]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	657b      	str	r3, [r7, #84]	; 0x54
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d165      	bne.n	8003528 <HAL_PCD_EP_DB_Transmit+0x748>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346a:	b29b      	uxth	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003470:	4413      	add	r3, r2
 8003472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	00da      	lsls	r2, r3, #3
 800347a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347c:	4413      	add	r3, r2
 800347e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003482:	65bb      	str	r3, [r7, #88]	; 0x58
 8003484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800348e:	b29a      	uxth	r2, r3
 8003490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003492:	801a      	strh	r2, [r3, #0]
 8003494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003498:	2b3e      	cmp	r3, #62	; 0x3e
 800349a:	d91d      	bls.n	80034d8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800349c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80034b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034b2:	3b01      	subs	r3, #1
 80034b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034be:	b29b      	uxth	r3, r3
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d4:	801a      	strh	r2, [r3, #0]
 80034d6:	e041      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x77c>
 80034d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x716>
 80034e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f2:	801a      	strh	r2, [r3, #0]
 80034f4:	e032      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x77c>
 80034f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80034fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_PCD_EP_DB_Transmit+0x730>
 800350a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800350c:	3301      	adds	r3, #1
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29a      	uxth	r2, r3
 8003516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003518:	b29b      	uxth	r3, r3
 800351a:	029b      	lsls	r3, r3, #10
 800351c:	b29b      	uxth	r3, r3
 800351e:	4313      	orrs	r3, r2
 8003520:	b29a      	uxth	r2, r3
 8003522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	e019      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d115      	bne.n	800355c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353e:	4413      	add	r3, r2
 8003540:	657b      	str	r3, [r7, #84]	; 0x54
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	00da      	lsls	r2, r3, #3
 8003548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800354a:	4413      	add	r3, r2
 800354c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
 8003552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003556:	b29a      	uxth	r2, r3
 8003558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355a:	801a      	strh	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	6959      	ldr	r1, [r3, #20]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	895a      	ldrh	r2, [r3, #10]
 8003568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800356c:	b29b      	uxth	r3, r3
 800356e:	f005 fdcd 	bl	800910c <USB_WritePMA>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800358c:	82bb      	strh	r3, [r7, #20]
 800358e:	8abb      	ldrh	r3, [r7, #20]
 8003590:	f083 0310 	eor.w	r3, r3, #16
 8003594:	82bb      	strh	r3, [r7, #20]
 8003596:	8abb      	ldrh	r3, [r7, #20]
 8003598:	f083 0320 	eor.w	r3, r3, #32
 800359c:	82bb      	strh	r3, [r7, #20]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	8abb      	ldrh	r3, [r7, #20]
 80035ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]
 80035c2:	2300      	movs	r3, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	3790      	adds	r7, #144	; 0x90
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_PCDEx_PMAConfig>:
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	817b      	strh	r3, [r7, #10]
 80035da:	4613      	mov	r3, r2
 80035dc:	813b      	strh	r3, [r7, #8]
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_PCDEx_PMAConfig+0x36>
 80035ea:	897b      	ldrh	r3, [r7, #10]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4413      	add	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e009      	b.n	8003616 <HAL_PCDEx_PMAConfig+0x4a>
 8003602:	897a      	ldrh	r2, [r7, #10]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	893b      	ldrh	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <HAL_PCDEx_PMAConfig+0x60>
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	731a      	strb	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	b29a      	uxth	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	80da      	strh	r2, [r3, #6]
 800362a:	e00b      	b.n	8003644 <HAL_PCDEx_PMAConfig+0x78>
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2201      	movs	r2, #1
 8003630:	731a      	strb	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	b29a      	uxth	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	811a      	strh	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	b29a      	uxth	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	815a      	strh	r2, [r3, #10]
 8003644:	2300      	movs	r3, #0
 8003646:	4618      	mov	r0, r3
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_PCDEx_ActivateLPM>:
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003676:	b29b      	uxth	r3, r3
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800368a:	b29b      	uxth	r3, r3
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003698:	2300      	movs	r3, #0
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_PWR_EnableBkUpAccess>:
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	58000400 	.word	0x58000400

080036c8 <HAL_PWREx_GetVoltageRange>:
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	58000400 	.word	0x58000400

080036e4 <HAL_PWREx_EnableVddUSB>:
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	58000400 	.word	0x58000400

08003704 <LL_RCC_HSE_IsEnabledDiv2>:
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d101      	bne.n	800371c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800371c:	2300      	movs	r3, #0
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_RCC_HSE_Enable>:
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <LL_RCC_HSE_Disable>:
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_RCC_HSE_IsReady>:
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003776:	d101      	bne.n	800377c <LL_RCC_HSE_IsReady+0x18>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <LL_RCC_HSE_IsReady+0x1a>
 800377c:	2300      	movs	r3, #0
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_RCC_HSI_Enable>:
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <LL_RCC_HSI_Disable>:
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_RCC_HSI_IsReady>:
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d101      	bne.n	80037dc <LL_RCC_HSI_IsReady+0x18>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <LL_RCC_HSI_IsReady+0x1a>
 80037dc:	2300      	movs	r3, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_RCC_HSI_SetCalibTrimming>:
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_RCC_HSI48_Enable>:
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_RCC_HSI48_Disable>:
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
 8003838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_RCC_HSI48_IsReady>:
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d101      	bne.n	800386e <LL_RCC_HSI48_IsReady+0x18>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_RCC_HSI48_IsReady+0x1a>
 800386e:	2300      	movs	r3, #0
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_RCC_LSE_Enable>:
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_RCC_LSE_Disable>:
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <LL_RCC_LSE_EnableBypass>:
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_RCC_LSE_DisableBypass>:
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_RCC_LSE_IsReady>:
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d101      	bne.n	800391a <LL_RCC_LSE_IsReady+0x18>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <LL_RCC_LSE_IsReady+0x1a>
 800391a:	2300      	movs	r3, #0
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_RCC_LSI1_Enable>:
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_RCC_LSI1_Disable>:
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <LL_RCC_LSI1_IsReady>:
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d101      	bne.n	8003982 <LL_RCC_LSI1_IsReady+0x18>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <LL_RCC_LSI1_IsReady+0x1a>
 8003982:	2300      	movs	r3, #0
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_RCC_LSI2_Enable>:
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <LL_RCC_LSI2_Disable>:
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c0:	f023 0304 	bic.w	r3, r3, #4
 80039c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_RCC_LSI2_IsReady>:
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d101      	bne.n	80039ea <LL_RCC_LSI2_IsReady+0x18>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <LL_RCC_LSI2_IsReady+0x1a>
 80039ea:	2300      	movs	r3, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_RCC_LSI2_SetTrimming>:
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_RCC_MSI_Enable>:
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_MSI_Disable>:
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_RCC_MSI_IsReady>:
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d101      	bne.n	8003a76 <LL_RCC_MSI_IsReady+0x16>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <LL_RCC_MSI_IsReady+0x18>
 8003a76:	2300      	movs	r3, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_MSI_SetRange>:
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_RCC_MSI_GetRange>:
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2bb0      	cmp	r3, #176	; 0xb0
 8003ac0:	d901      	bls.n	8003ac6 <LL_RCC_MSI_GetRange+0x1c>
 8003ac2:	23b0      	movs	r3, #176	; 0xb0
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_MSI_SetCalibTrimming>:
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_RCC_SetSysClkSource>:
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 0203 	bic.w	r2, r3, #3
 8003b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <LL_RCC_GetSysClkSource>:
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_RCC_SetAHBPrescaler>:
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_C2_RCC_SetAHBPrescaler>:
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <LL_RCC_SetAHB4Prescaler>:
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ba2:	f023 020f 	bic.w	r2, r3, #15
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_RCC_SetAPB1Prescaler>:
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_RCC_SetAPB2Prescaler>:
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_RCC_GetAHBPrescaler>:
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_RCC_GetAHB4Prescaler>:
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_RCC_PLL_Enable>:
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_RCC_PLL_Disable>:
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_RCC_PLL_IsReady>:
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c92:	d101      	bne.n	8003c98 <LL_RCC_PLL_IsReady+0x18>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <LL_RCC_PLL_IsReady+0x1a>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_RCC_PLL_GetN>:
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_PLL_GetR>:
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_RCC_PLL_GetDivider>:
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_PLL_GetMainSource>:
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_IsActiveFlag_HPRE>:
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d101      	bne.n	8003d1e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_IsActiveFlag_C2HPRE>:
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d3e:	d101      	bne.n	8003d44 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003d44:	2300      	movs	r3, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <LL_RCC_IsActiveFlag_SHDHPRE>:
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d64:	d101      	bne.n	8003d6a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_RCC_IsActiveFlag_PPRE1>:
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d88:	d101      	bne.n	8003d8e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_RCC_IsActiveFlag_PPRE2>:
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dac:	d101      	bne.n	8003db2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003db2:	2300      	movs	r3, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_RCC_OscConfig>:
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b08d      	sub	sp, #52	; 0x34
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e363      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 808d 	beq.w	8003efa <HAL_RCC_OscConfig+0x13a>
 8003de0:	f7ff fea1 	bl	8003b26 <LL_RCC_GetSysClkSource>
 8003de4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003de6:	f7ff ff82 	bl	8003cee <LL_RCC_PLL_GetMainSource>
 8003dea:	62b8      	str	r0, [r7, #40]	; 0x28
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCC_OscConfig+0x3e>
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	d147      	bne.n	8003e88 <HAL_RCC_OscConfig+0xc8>
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d144      	bne.n	8003e88 <HAL_RCC_OscConfig+0xc8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_OscConfig+0x4a>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e347      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003e0e:	f7ff fe4c 	bl	8003aaa <LL_RCC_MSI_GetRange>
 8003e12:	4603      	mov	r3, r0
 8003e14:	429c      	cmp	r4, r3
 8003e16:	d914      	bls.n	8003e42 <HAL_RCC_OscConfig+0x82>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fd05 	bl	800482c <RCC_SetFlashLatencyFromMSIRange>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_OscConfig+0x6c>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e336      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fe26 	bl	8003a82 <LL_RCC_MSI_SetRange>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fe4a 	bl	8003ad4 <LL_RCC_MSI_SetCalibTrimming>
 8003e40:	e013      	b.n	8003e6a <HAL_RCC_OscConfig+0xaa>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fe1b 	bl	8003a82 <LL_RCC_MSI_SetRange>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fe3f 	bl	8003ad4 <LL_RCC_MSI_SetCalibTrimming>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fce6 	bl	800482c <RCC_SetFlashLatencyFromMSIRange>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0xaa>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e317      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003e6a:	f000 fccb 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4aa4      	ldr	r2, [pc, #656]	; (8004104 <HAL_RCC_OscConfig+0x344>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4ba4      	ldr	r3, [pc, #656]	; (8004108 <HAL_RCC_OscConfig+0x348>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fd f8c3 	bl	8001004 <HAL_InitTick>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d039      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x138>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e308      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01e      	beq.n	8003ece <HAL_RCC_OscConfig+0x10e>
 8003e90:	f7ff fdc8 	bl	8003a24 <LL_RCC_MSI_Enable>
 8003e94:	f7fd f904 	bl	80010a0 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xee>
 8003e9c:	f7fd f900 	bl	80010a0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xee>
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e2f5      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003eae:	f7ff fdd7 	bl	8003a60 <LL_RCC_MSI_IsReady>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f1      	beq.n	8003e9c <HAL_RCC_OscConfig+0xdc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fde0 	bl	8003a82 <LL_RCC_MSI_SetRange>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fe04 	bl	8003ad4 <LL_RCC_MSI_SetCalibTrimming>
 8003ecc:	e015      	b.n	8003efa <HAL_RCC_OscConfig+0x13a>
 8003ece:	f7ff fdb8 	bl	8003a42 <LL_RCC_MSI_Disable>
 8003ed2:	f7fd f8e5 	bl	80010a0 <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x12c>
 8003eda:	f7fd f8e1 	bl	80010a0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x12c>
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e2d6      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003eec:	f7ff fdb8 	bl	8003a60 <LL_RCC_MSI_IsReady>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f1      	bne.n	8003eda <HAL_RCC_OscConfig+0x11a>
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x13a>
 8003ef8:	bf00      	nop
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d047      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1d6>
 8003f06:	f7ff fe0e 	bl	8003b26 <LL_RCC_GetSysClkSource>
 8003f0a:	6238      	str	r0, [r7, #32]
 8003f0c:	f7ff feef 	bl	8003cee <LL_RCC_PLL_GetMainSource>
 8003f10:	61f8      	str	r0, [r7, #28]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_OscConfig+0x164>
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCC_OscConfig+0x170>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d105      	bne.n	8003f30 <HAL_RCC_OscConfig+0x170>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d134      	bne.n	8003f96 <HAL_RCC_OscConfig+0x1d6>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e2b4      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0x180>
 8003f3a:	f7ff fbf5 	bl	8003728 <LL_RCC_HSE_Enable>
 8003f3e:	e001      	b.n	8003f44 <HAL_RCC_OscConfig+0x184>
 8003f40:	f7ff fc01 	bl	8003746 <LL_RCC_HSE_Disable>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
 8003f4c:	f7fd f8a8 	bl	80010a0 <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x1a6>
 8003f54:	f7fd f8a4 	bl	80010a0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x1a6>
 8003f62:	2303      	movs	r3, #3
 8003f64:	e299      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003f66:	f7ff fbfd 	bl	8003764 <LL_RCC_HSE_IsReady>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f1      	beq.n	8003f54 <HAL_RCC_OscConfig+0x194>
 8003f70:	e011      	b.n	8003f96 <HAL_RCC_OscConfig+0x1d6>
 8003f72:	f7fd f895 	bl	80010a0 <HAL_GetTick>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x1cc>
 8003f7a:	f7fd f891 	bl	80010a0 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b64      	cmp	r3, #100	; 0x64
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x1cc>
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e286      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003f8c:	f7ff fbea 	bl	8003764 <LL_RCC_HSE_IsReady>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f1      	bne.n	8003f7a <HAL_RCC_OscConfig+0x1ba>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d04c      	beq.n	800403c <HAL_RCC_OscConfig+0x27c>
 8003fa2:	f7ff fdc0 	bl	8003b26 <LL_RCC_GetSysClkSource>
 8003fa6:	61b8      	str	r0, [r7, #24]
 8003fa8:	f7ff fea1 	bl	8003cee <LL_RCC_PLL_GetMainSource>
 8003fac:	6178      	str	r0, [r7, #20]
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x218>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x218>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_OscConfig+0x20c>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e266      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fc09 	bl	80037e8 <LL_RCC_HSI_SetCalibTrimming>
 8003fd6:	e031      	b.n	800403c <HAL_RCC_OscConfig+0x27c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d019      	beq.n	8004014 <HAL_RCC_OscConfig+0x254>
 8003fe0:	f7ff fbd2 	bl	8003788 <LL_RCC_HSI_Enable>
 8003fe4:	f7fd f85c 	bl	80010a0 <HAL_GetTick>
 8003fe8:	6278      	str	r0, [r7, #36]	; 0x24
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x23e>
 8003fec:	f7fd f858 	bl	80010a0 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x23e>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e24d      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8003ffe:	f7ff fbe1 	bl	80037c4 <LL_RCC_HSI_IsReady>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f1      	beq.n	8003fec <HAL_RCC_OscConfig+0x22c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fbeb 	bl	80037e8 <LL_RCC_HSI_SetCalibTrimming>
 8004012:	e013      	b.n	800403c <HAL_RCC_OscConfig+0x27c>
 8004014:	f7ff fbc7 	bl	80037a6 <LL_RCC_HSI_Disable>
 8004018:	f7fd f842 	bl	80010a0 <HAL_GetTick>
 800401c:	6278      	str	r0, [r7, #36]	; 0x24
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x272>
 8004020:	f7fd f83e 	bl	80010a0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x272>
 800402e:	2303      	movs	r3, #3
 8004030:	e233      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004032:	f7ff fbc7 	bl	80037c4 <LL_RCC_HSI_IsReady>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f1      	bne.n	8004020 <HAL_RCC_OscConfig+0x260>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x296>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80a3 	beq.w	800419c <HAL_RCC_OscConfig+0x3dc>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d076      	beq.n	800414c <HAL_RCC_OscConfig+0x38c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d046      	beq.n	80040f8 <HAL_RCC_OscConfig+0x338>
 800406a:	f7ff fc7e 	bl	800396a <LL_RCC_LSI1_IsReady>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d113      	bne.n	800409c <HAL_RCC_OscConfig+0x2dc>
 8004074:	f7ff fc57 	bl	8003926 <LL_RCC_LSI1_Enable>
 8004078:	f7fd f812 	bl	80010a0 <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x2d2>
 8004080:	f7fd f80e 	bl	80010a0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x2d2>
 800408e:	2303      	movs	r3, #3
 8004090:	e203      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004092:	f7ff fc6a 	bl	800396a <LL_RCC_LSI1_IsReady>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f1      	beq.n	8004080 <HAL_RCC_OscConfig+0x2c0>
 800409c:	f7ff fc77 	bl	800398e <LL_RCC_LSI2_Enable>
 80040a0:	f7fc fffe 	bl	80010a0 <HAL_GetTick>
 80040a4:	6278      	str	r0, [r7, #36]	; 0x24
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x2fa>
 80040a8:	f7fc fffa 	bl	80010a0 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x2fa>
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1ef      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 80040ba:	f7ff fc8a 	bl	80039d2 <LL_RCC_LSI2_IsReady>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f1      	beq.n	80040a8 <HAL_RCC_OscConfig+0x2e8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fc94 	bl	80039f6 <LL_RCC_LSI2_SetTrimming>
 80040ce:	f7ff fc3b 	bl	8003948 <LL_RCC_LSI1_Disable>
 80040d2:	f7fc ffe5 	bl	80010a0 <HAL_GetTick>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x32c>
 80040da:	f7fc ffe1 	bl	80010a0 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x32c>
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1d6      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 80040ec:	f7ff fc3d 	bl	800396a <LL_RCC_LSI1_IsReady>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f1      	bne.n	80040da <HAL_RCC_OscConfig+0x31a>
 80040f6:	e051      	b.n	800419c <HAL_RCC_OscConfig+0x3dc>
 80040f8:	f7ff fc15 	bl	8003926 <LL_RCC_LSI1_Enable>
 80040fc:	f7fc ffd0 	bl	80010a0 <HAL_GetTick>
 8004100:	6278      	str	r0, [r7, #36]	; 0x24
 8004102:	e00c      	b.n	800411e <HAL_RCC_OscConfig+0x35e>
 8004104:	20000048 	.word	0x20000048
 8004108:	2000004c 	.word	0x2000004c
 800410c:	f7fc ffc8 	bl	80010a0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x35e>
 800411a:	2303      	movs	r3, #3
 800411c:	e1bd      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 800411e:	f7ff fc24 	bl	800396a <LL_RCC_LSI1_IsReady>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f1      	beq.n	800410c <HAL_RCC_OscConfig+0x34c>
 8004128:	f7ff fc42 	bl	80039b0 <LL_RCC_LSI2_Disable>
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x380>
 800412e:	f7fc ffb7 	bl	80010a0 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b03      	cmp	r3, #3
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x380>
 800413c:	2303      	movs	r3, #3
 800413e:	e1ac      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004140:	f7ff fc47 	bl	80039d2 <LL_RCC_LSI2_IsReady>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f1      	bne.n	800412e <HAL_RCC_OscConfig+0x36e>
 800414a:	e027      	b.n	800419c <HAL_RCC_OscConfig+0x3dc>
 800414c:	f7ff fc30 	bl	80039b0 <LL_RCC_LSI2_Disable>
 8004150:	f7fc ffa6 	bl	80010a0 <HAL_GetTick>
 8004154:	6278      	str	r0, [r7, #36]	; 0x24
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x3aa>
 8004158:	f7fc ffa2 	bl	80010a0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b03      	cmp	r3, #3
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x3aa>
 8004166:	2303      	movs	r3, #3
 8004168:	e197      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 800416a:	f7ff fc32 	bl	80039d2 <LL_RCC_LSI2_IsReady>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f1      	bne.n	8004158 <HAL_RCC_OscConfig+0x398>
 8004174:	f7ff fbe8 	bl	8003948 <LL_RCC_LSI1_Disable>
 8004178:	f7fc ff92 	bl	80010a0 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3d2>
 8004180:	f7fc ff8e 	bl	80010a0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3d2>
 800418e:	2303      	movs	r3, #3
 8004190:	e183      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004192:	f7ff fbea 	bl	800396a <LL_RCC_LSI1_IsReady>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f1      	bne.n	8004180 <HAL_RCC_OscConfig+0x3c0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d05b      	beq.n	8004260 <HAL_RCC_OscConfig+0x4a0>
 80041a8:	4ba7      	ldr	r3, [pc, #668]	; (8004448 <HAL_RCC_OscConfig+0x688>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d114      	bne.n	80041de <HAL_RCC_OscConfig+0x41e>
 80041b4:	f7ff fa78 	bl	80036a8 <HAL_PWR_EnableBkUpAccess>
 80041b8:	f7fc ff72 	bl	80010a0 <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x412>
 80041c0:	f7fc ff6e 	bl	80010a0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x412>
 80041ce:	2303      	movs	r3, #3
 80041d0:	e163      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 80041d2:	4b9d      	ldr	r3, [pc, #628]	; (8004448 <HAL_RCC_OscConfig+0x688>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x400>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <HAL_RCC_OscConfig+0x42c>
 80041e6:	f7ff fb48 	bl	800387a <LL_RCC_LSE_Enable>
 80041ea:	e00c      	b.n	8004206 <HAL_RCC_OscConfig+0x446>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d104      	bne.n	80041fe <HAL_RCC_OscConfig+0x43e>
 80041f4:	f7ff fb63 	bl	80038be <LL_RCC_LSE_EnableBypass>
 80041f8:	f7ff fb3f 	bl	800387a <LL_RCC_LSE_Enable>
 80041fc:	e003      	b.n	8004206 <HAL_RCC_OscConfig+0x446>
 80041fe:	f7ff fb4d 	bl	800389c <LL_RCC_LSE_Disable>
 8004202:	f7ff fb6d 	bl	80038e0 <LL_RCC_LSE_DisableBypass>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d014      	beq.n	8004238 <HAL_RCC_OscConfig+0x478>
 800420e:	f7fc ff47 	bl	80010a0 <HAL_GetTick>
 8004212:	6278      	str	r0, [r7, #36]	; 0x24
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x46c>
 8004216:	f7fc ff43 	bl	80010a0 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x46c>
 8004228:	2303      	movs	r3, #3
 800422a:	e136      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 800422c:	f7ff fb69 	bl	8003902 <LL_RCC_LSE_IsReady>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ef      	beq.n	8004216 <HAL_RCC_OscConfig+0x456>
 8004236:	e013      	b.n	8004260 <HAL_RCC_OscConfig+0x4a0>
 8004238:	f7fc ff32 	bl	80010a0 <HAL_GetTick>
 800423c:	6278      	str	r0, [r7, #36]	; 0x24
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x496>
 8004240:	f7fc ff2e 	bl	80010a0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x496>
 8004252:	2303      	movs	r3, #3
 8004254:	e121      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004256:	f7ff fb54 	bl	8003902 <LL_RCC_LSE_IsReady>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ef      	bne.n	8004240 <HAL_RCC_OscConfig+0x480>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x506>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d014      	beq.n	800429e <HAL_RCC_OscConfig+0x4de>
 8004274:	f7ff facd 	bl	8003812 <LL_RCC_HSI48_Enable>
 8004278:	f7fc ff12 	bl	80010a0 <HAL_GetTick>
 800427c:	6278      	str	r0, [r7, #36]	; 0x24
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x4d2>
 8004280:	f7fc ff0e 	bl	80010a0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x4d2>
 800428e:	2303      	movs	r3, #3
 8004290:	e103      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004292:	f7ff fae0 	bl	8003856 <LL_RCC_HSI48_IsReady>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f1      	beq.n	8004280 <HAL_RCC_OscConfig+0x4c0>
 800429c:	e013      	b.n	80042c6 <HAL_RCC_OscConfig+0x506>
 800429e:	f7ff fac9 	bl	8003834 <LL_RCC_HSI48_Disable>
 80042a2:	f7fc fefd 	bl	80010a0 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x4fc>
 80042aa:	f7fc fef9 	bl	80010a0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x4fc>
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0ee      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 80042bc:	f7ff facb 	bl	8003856 <LL_RCC_HSI48_IsReady>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f1      	bne.n	80042aa <HAL_RCC_OscConfig+0x4ea>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80e4 	beq.w	8004498 <HAL_RCC_OscConfig+0x6d8>
 80042d0:	f7ff fc29 	bl	8003b26 <LL_RCC_GetSysClkSource>
 80042d4:	6138      	str	r0, [r7, #16]
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	f040 80b4 	bne.w	8004450 <HAL_RCC_OscConfig+0x690>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0203 	and.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d123      	bne.n	800433e <HAL_RCC_OscConfig+0x57e>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	429a      	cmp	r2, r3
 8004302:	d11c      	bne.n	800433e <HAL_RCC_OscConfig+0x57e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	429a      	cmp	r2, r3
 8004312:	d114      	bne.n	800433e <HAL_RCC_OscConfig+0x57e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	429a      	cmp	r2, r3
 8004320:	d10d      	bne.n	800433e <HAL_RCC_OscConfig+0x57e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	429a      	cmp	r2, r3
 800432e:	d106      	bne.n	800433e <HAL_RCC_OscConfig+0x57e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	429a      	cmp	r2, r3
 800433c:	d05d      	beq.n	80043fa <HAL_RCC_OscConfig+0x63a>
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d058      	beq.n	80043f6 <HAL_RCC_OscConfig+0x636>
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x596>
 8004352:	2301      	movs	r3, #1
 8004354:	e0a1      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004356:	f7ff fc84 	bl	8003c62 <LL_RCC_PLL_Disable>
 800435a:	f7fc fea1 	bl	80010a0 <HAL_GetTick>
 800435e:	6278      	str	r0, [r7, #36]	; 0x24
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x5b4>
 8004362:	f7fc fe9d 	bl	80010a0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x5b4>
 8004370:	2303      	movs	r3, #3
 8004372:	e092      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1ef      	bne.n	8004362 <HAL_RCC_OscConfig+0x5a2>
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	4b30      	ldr	r3, [pc, #192]	; (800444c <HAL_RCC_OscConfig+0x68c>)
 800438a:	4013      	ands	r3, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800439a:	0212      	lsls	r2, r2, #8
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043ae:	430a      	orrs	r2, r1
 80043b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60cb      	str	r3, [r1, #12]
 80043b8:	f7ff fc44 	bl	8003c44 <LL_RCC_PLL_Enable>
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ca:	60d3      	str	r3, [r2, #12]
 80043cc:	f7fc fe68 	bl	80010a0 <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x626>
 80043d4:	f7fc fe64 	bl	80010a0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x626>
 80043e2:	2303      	movs	r3, #3
 80043e4:	e059      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ef      	beq.n	80043d4 <HAL_RCC_OscConfig+0x614>
 80043f4:	e050      	b.n	8004498 <HAL_RCC_OscConfig+0x6d8>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e04f      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d147      	bne.n	8004498 <HAL_RCC_OscConfig+0x6d8>
 8004408:	f7ff fc1c 	bl	8003c44 <LL_RCC_PLL_Enable>
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	60d3      	str	r3, [r2, #12]
 800441c:	f7fc fe40 	bl	80010a0 <HAL_GetTick>
 8004420:	6278      	str	r0, [r7, #36]	; 0x24
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x676>
 8004424:	f7fc fe3c 	bl	80010a0 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x676>
 8004432:	2303      	movs	r3, #3
 8004434:	e031      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ef      	beq.n	8004424 <HAL_RCC_OscConfig+0x664>
 8004444:	e028      	b.n	8004498 <HAL_RCC_OscConfig+0x6d8>
 8004446:	bf00      	nop
 8004448:	58000400 	.word	0x58000400
 800444c:	11c1808c 	.word	0x11c1808c
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d01e      	beq.n	8004494 <HAL_RCC_OscConfig+0x6d4>
 8004456:	f7ff fc04 	bl	8003c62 <LL_RCC_PLL_Disable>
 800445a:	f7fc fe21 	bl	80010a0 <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	; 0x24
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x6b4>
 8004462:	f7fc fe1d 	bl	80010a0 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x6b4>
 8004470:	2303      	movs	r3, #3
 8004472:	e012      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ef      	bne.n	8004462 <HAL_RCC_OscConfig+0x6a2>
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_OscConfig+0x6e4>)
 800448e:	4013      	ands	r3, r2
 8004490:	60cb      	str	r3, [r1, #12]
 8004492:	e001      	b.n	8004498 <HAL_RCC_OscConfig+0x6d8>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x6da>
 8004498:	2300      	movs	r3, #0
 800449a:	4618      	mov	r0, r3
 800449c:	3734      	adds	r7, #52	; 0x34
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	bf00      	nop
 80044a4:	eefefffc 	.word	0xeefefffc

080044a8 <HAL_RCC_ClockConfig>:
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x14>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e12d      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 80044bc:	4b98      	ldr	r3, [pc, #608]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d91b      	bls.n	8004502 <HAL_RCC_ClockConfig+0x5a>
 80044ca:	4b95      	ldr	r3, [pc, #596]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 0207 	bic.w	r2, r3, #7
 80044d2:	4993      	ldr	r1, [pc, #588]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
 80044da:	f7fc fde1 	bl	80010a0 <HAL_GetTick>
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_ClockConfig+0x4c>
 80044e2:	f7fc fddd 	bl	80010a0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x4c>
 80044f0:	2303      	movs	r3, #3
 80044f2:	e111      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 80044f4:	4b8a      	ldr	r3, [pc, #552]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d1ef      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x3a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d016      	beq.n	800453c <HAL_RCC_ClockConfig+0x94>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fb13 	bl	8003b3e <LL_RCC_SetAHBPrescaler>
 8004518:	f7fc fdc2 	bl	80010a0 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	e008      	b.n	8004532 <HAL_RCC_ClockConfig+0x8a>
 8004520:	f7fc fdbe 	bl	80010a0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x8a>
 800452e:	2303      	movs	r3, #3
 8004530:	e0f2      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 8004532:	f7ff fbe8 	bl	8003d06 <LL_RCC_IsActiveFlag_HPRE>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f1      	beq.n	8004520 <HAL_RCC_ClockConfig+0x78>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <HAL_RCC_ClockConfig+0xce>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fb0a 	bl	8003b66 <LL_C2_RCC_SetAHBPrescaler>
 8004552:	f7fc fda5 	bl	80010a0 <HAL_GetTick>
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	e008      	b.n	800456c <HAL_RCC_ClockConfig+0xc4>
 800455a:	f7fc fda1 	bl	80010a0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_ClockConfig+0xc4>
 8004568:	2303      	movs	r3, #3
 800456a:	e0d5      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 800456c:	f7ff fbdd 	bl	8003d2a <LL_RCC_IsActiveFlag_C2HPRE>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f1      	beq.n	800455a <HAL_RCC_ClockConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x108>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fb03 	bl	8003b92 <LL_RCC_SetAHB4Prescaler>
 800458c:	f7fc fd88 	bl	80010a0 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	e008      	b.n	80045a6 <HAL_RCC_ClockConfig+0xfe>
 8004594:	f7fc fd84 	bl	80010a0 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0xfe>
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0b8      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 80045a6:	f7ff fbd3 	bl	8003d50 <LL_RCC_IsActiveFlag_SHDHPRE>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f1      	beq.n	8004594 <HAL_RCC_ClockConfig+0xec>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d016      	beq.n	80045ea <HAL_RCC_ClockConfig+0x142>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fafd 	bl	8003bc0 <LL_RCC_SetAPB1Prescaler>
 80045c6:	f7fc fd6b 	bl	80010a0 <HAL_GetTick>
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_ClockConfig+0x138>
 80045ce:	f7fc fd67 	bl	80010a0 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x138>
 80045dc:	2303      	movs	r3, #3
 80045de:	e09b      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 80045e0:	f7ff fbc9 	bl	8003d76 <LL_RCC_IsActiveFlag_PPRE1>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f1      	beq.n	80045ce <HAL_RCC_ClockConfig+0x126>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <HAL_RCC_ClockConfig+0x17e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff faf3 	bl	8003be8 <LL_RCC_SetAPB2Prescaler>
 8004602:	f7fc fd4d 	bl	80010a0 <HAL_GetTick>
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	e008      	b.n	800461c <HAL_RCC_ClockConfig+0x174>
 800460a:	f7fc fd49 	bl	80010a0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_ClockConfig+0x174>
 8004618:	2303      	movs	r3, #3
 800461a:	e07d      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 800461c:	f7ff fbbd 	bl	8003d9a <LL_RCC_IsActiveFlag_PPRE2>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f1      	beq.n	800460a <HAL_RCC_ClockConfig+0x162>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d043      	beq.n	80046ba <HAL_RCC_ClockConfig+0x212>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d106      	bne.n	8004648 <HAL_RCC_ClockConfig+0x1a0>
 800463a:	f7ff f893 	bl	8003764 <LL_RCC_HSE_IsReady>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11e      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1da>
 8004644:	2301      	movs	r3, #1
 8004646:	e067      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d106      	bne.n	800465e <HAL_RCC_ClockConfig+0x1b6>
 8004650:	f7ff fb16 	bl	8003c80 <LL_RCC_PLL_IsReady>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1da>
 800465a:	2301      	movs	r3, #1
 800465c:	e05c      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_RCC_ClockConfig+0x1cc>
 8004666:	f7ff f9fb 	bl	8003a60 <LL_RCC_MSI_IsReady>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d108      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1da>
 8004670:	2301      	movs	r3, #1
 8004672:	e051      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 8004674:	f7ff f8a6 	bl	80037c4 <LL_RCC_HSI_IsReady>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1da>
 800467e:	2301      	movs	r3, #1
 8004680:	e04a      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fa39 	bl	8003afe <LL_RCC_SetSysClkSource>
 800468c:	f7fc fd08 	bl	80010a0 <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x202>
 8004694:	f7fc fd04 	bl	80010a0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x202>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e036      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 80046aa:	f7ff fa3c 	bl	8003b26 <LL_RCC_GetSysClkSource>
 80046ae:	4602      	mov	r2, r0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d1ec      	bne.n	8004694 <HAL_RCC_ClockConfig+0x1ec>
 80046ba:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d21b      	bcs.n	8004700 <HAL_RCC_ClockConfig+0x258>
 80046c8:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 0207 	bic.w	r2, r3, #7
 80046d0:	4913      	ldr	r1, [pc, #76]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	f7fc fce2 	bl	80010a0 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	e008      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
 80046e0:	f7fc fcde 	bl	80010a0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
 80046ee:	2303      	movs	r3, #3
 80046f0:	e012      	b.n	8004718 <HAL_RCC_ClockConfig+0x270>
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_ClockConfig+0x278>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d1ef      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x238>
 8004700:	f000 f880 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004704:	4603      	mov	r3, r0
 8004706:	4a07      	ldr	r2, [pc, #28]	; (8004724 <HAL_RCC_ClockConfig+0x27c>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	f7fc fcd5 	bl	80010b8 <HAL_GetTickPrio>
 800470e:	4603      	mov	r3, r0
 8004710:	4618      	mov	r0, r3
 8004712:	f7fc fc77 	bl	8001004 <HAL_InitTick>
 8004716:	4603      	mov	r3, r0
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	58004000 	.word	0x58004000
 8004724:	20000048 	.word	0x20000048

08004728 <HAL_RCC_GetSysClockFreq>:
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	f7ff f9fa 	bl	8003b26 <LL_RCC_GetSysClkSource>
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_RCC_GetSysClockFreq+0x28>
 800473a:	f7ff f9b6 	bl	8003aaa <LL_RCC_MSI_GetRange>
 800473e:	4603      	mov	r3, r0
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e04b      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xc0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b04      	cmp	r3, #4
 8004754:	d102      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x34>
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e045      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xc0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b08      	cmp	r3, #8
 8004760:	d10a      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x50>
 8004762:	f7fe ffcf 	bl	8003704 <LL_RCC_HSE_IsEnabledDiv2>
 8004766:	4603      	mov	r3, r0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d102      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x4a>
 800476c:	4b23      	ldr	r3, [pc, #140]	; (80047fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e03a      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xc0>
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e037      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xc0>
 8004778:	f7ff fab9 	bl	8003cee <LL_RCC_PLL_GetMainSource>
 800477c:	6038      	str	r0, [r7, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d003      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x64>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d003      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x6a>
 800478a:	e00d      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x80>
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	e015      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x96>
 8004792:	f7fe ffb7 	bl	8003704 <LL_RCC_HSE_IsEnabledDiv2>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <HAL_RCC_GetSysClockFreq+0x7a>
 800479c:	4b17      	ldr	r3, [pc, #92]	; (80047fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	e00d      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x96>
 80047a2:	4b17      	ldr	r3, [pc, #92]	; (8004800 <HAL_RCC_GetSysClockFreq+0xd8>)
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	e00a      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x96>
 80047a8:	f7ff f97f 	bl	8003aaa <LL_RCC_MSI_GetRange>
 80047ac:	4603      	mov	r3, r0
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	bf00      	nop
 80047be:	f7ff fa71 	bl	8003ca4 <LL_RCC_PLL_GetN>
 80047c2:	4602      	mov	r2, r0
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	fb03 f402 	mul.w	r4, r3, r2
 80047ca:	f7ff fa84 	bl	8003cd6 <LL_RCC_PLL_GetDivider>
 80047ce:	4603      	mov	r3, r0
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	3301      	adds	r3, #1
 80047d4:	fbb4 f4f3 	udiv	r4, r4, r3
 80047d8:	f7ff fa71 	bl	8003cbe <LL_RCC_PLL_GetR>
 80047dc:	4603      	mov	r3, r0
 80047de:	0f5b      	lsrs	r3, r3, #29
 80047e0:	3301      	adds	r3, #1
 80047e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd90      	pop	{r4, r7, pc}
 80047f2:	bf00      	nop
 80047f4:	0800cc88 	.word	0x0800cc88
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	003d0900 	.word	0x003d0900
 8004800:	007a1200 	.word	0x007a1200

08004804 <HAL_RCC_GetHCLKFreq>:
 8004804:	b598      	push	{r3, r4, r7, lr}
 8004806:	af00      	add	r7, sp, #0
 8004808:	f7ff ff8e 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 800480c:	4604      	mov	r4, r0
 800480e:	f7ff f9ff 	bl	8003c10 <LL_RCC_GetAHBPrescaler>
 8004812:	4603      	mov	r3, r0
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	4a03      	ldr	r2, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x24>)
 800481c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004820:	fbb4 f3f3 	udiv	r3, r4, r3
 8004824:	4618      	mov	r0, r3
 8004826:	bd98      	pop	{r3, r4, r7, pc}
 8004828:	0800cc48 	.word	0x0800cc48

0800482c <RCC_SetFlashLatencyFromMSIRange>:
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2bb0      	cmp	r3, #176	; 0xb0
 8004838:	d903      	bls.n	8004842 <RCC_SetFlashLatencyFromMSIRange+0x16>
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e007      	b.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0x26>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	f7ff f9e9 	bl	8003c28 <LL_RCC_GetAHB4Prescaler>
 8004856:	4603      	mov	r3, r0
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	0c9c      	lsrs	r4, r3, #18
 8004876:	f7fe ff27 	bl	80036c8 <HAL_PWREx_GetVoltageRange>
 800487a:	4603      	mov	r3, r0
 800487c:	4619      	mov	r1, r3
 800487e:	4620      	mov	r0, r4
 8004880:	f000 f80c 	bl	800489c <RCC_SetFlashLatency>
 8004884:	4603      	mov	r3, r0
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bd90      	pop	{r4, r7, pc}
 800488e:	bf00      	nop
 8004890:	0800cc88 	.word	0x0800cc88
 8004894:	0800cc48 	.word	0x0800cc48
 8004898:	431bde83 	.word	0x431bde83

0800489c <RCC_SetFlashLatency>:
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b093      	sub	sp, #76	; 0x4c
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <RCC_SetFlashLatency+0xe8>)
 80048a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80048ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80048b2:	4a35      	ldr	r2, [pc, #212]	; (8004988 <RCC_SetFlashLatency+0xec>)
 80048b4:	f107 031c 	add.w	r3, r7, #28
 80048b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80048ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80048be:	4b33      	ldr	r3, [pc, #204]	; (800498c <RCC_SetFlashLatency+0xf0>)
 80048c0:	f107 040c 	add.w	r4, r7, #12
 80048c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80048ca:	2300      	movs	r3, #0
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d11a      	bne.n	800490c <RCC_SetFlashLatency+0x70>
 80048d6:	2300      	movs	r3, #0
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
 80048da:	e013      	b.n	8004904 <RCC_SetFlashLatency+0x68>
 80048dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	3348      	adds	r3, #72	; 0x48
 80048e2:	443b      	add	r3, r7
 80048e4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d807      	bhi.n	80048fe <RCC_SetFlashLatency+0x62>
 80048ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	3348      	adds	r3, #72	; 0x48
 80048f4:	443b      	add	r3, r7
 80048f6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048fa:	647b      	str	r3, [r7, #68]	; 0x44
 80048fc:	e020      	b.n	8004940 <RCC_SetFlashLatency+0xa4>
 80048fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004900:	3301      	adds	r3, #1
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
 8004904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004906:	2b03      	cmp	r3, #3
 8004908:	d9e8      	bls.n	80048dc <RCC_SetFlashLatency+0x40>
 800490a:	e019      	b.n	8004940 <RCC_SetFlashLatency+0xa4>
 800490c:	2300      	movs	r3, #0
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004910:	e013      	b.n	800493a <RCC_SetFlashLatency+0x9e>
 8004912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	3348      	adds	r3, #72	; 0x48
 8004918:	443b      	add	r3, r7
 800491a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d807      	bhi.n	8004934 <RCC_SetFlashLatency+0x98>
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	3348      	adds	r3, #72	; 0x48
 800492a:	443b      	add	r3, r7
 800492c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004930:	647b      	str	r3, [r7, #68]	; 0x44
 8004932:	e005      	b.n	8004940 <RCC_SetFlashLatency+0xa4>
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004936:	3301      	adds	r3, #1
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	2b02      	cmp	r3, #2
 800493e:	d9e8      	bls.n	8004912 <RCC_SetFlashLatency+0x76>
 8004940:	4b13      	ldr	r3, [pc, #76]	; (8004990 <RCC_SetFlashLatency+0xf4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f023 0207 	bic.w	r2, r3, #7
 8004948:	4911      	ldr	r1, [pc, #68]	; (8004990 <RCC_SetFlashLatency+0xf4>)
 800494a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	f7fc fba6 	bl	80010a0 <HAL_GetTick>
 8004954:	63b8      	str	r0, [r7, #56]	; 0x38
 8004956:	e008      	b.n	800496a <RCC_SetFlashLatency+0xce>
 8004958:	f7fc fba2 	bl	80010a0 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <RCC_SetFlashLatency+0xce>
 8004966:	2303      	movs	r3, #3
 8004968:	e007      	b.n	800497a <RCC_SetFlashLatency+0xde>
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <RCC_SetFlashLatency+0xf4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004974:	429a      	cmp	r2, r3
 8004976:	d1ef      	bne.n	8004958 <RCC_SetFlashLatency+0xbc>
 8004978:	2300      	movs	r3, #0
 800497a:	4618      	mov	r0, r3
 800497c:	374c      	adds	r7, #76	; 0x4c
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	0800cbd4 	.word	0x0800cbd4
 8004988:	0800cbe4 	.word	0x0800cbe4
 800498c:	0800cbf0 	.word	0x0800cbf0
 8004990:	58004000 	.word	0x58004000

08004994 <LL_RCC_LSE_IsEnabled>:
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <LL_RCC_LSE_IsEnabled+0x18>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <LL_RCC_LSE_IsEnabled+0x1a>
 80049ac:	2300      	movs	r3, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_RCC_LSE_IsReady>:
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d101      	bne.n	80049d0 <LL_RCC_LSE_IsReady+0x18>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <LL_RCC_LSE_IsReady+0x1a>
 80049d0:	2300      	movs	r3, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_RCC_MSI_EnablePLLMode>:
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ea:	f043 0304 	orr.w	r3, r3, #4
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <LL_RCC_SetRFWKPClockSource>:
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_RCC_SetSMPSClockSource>:
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f023 0203 	bic.w	r2, r3, #3
 8004a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	624b      	str	r3, [r1, #36]	; 0x24
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <LL_RCC_SetSMPSPrescaler>:
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	624b      	str	r3, [r1, #36]	; 0x24
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <LL_RCC_SetUSARTClockSource>:
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 0203 	bic.w	r2, r3, #3
 8004a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_SetLPUARTClockSource>:
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_RCC_SetI2CClockSource>:
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	401a      	ands	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_RCC_SetLPTIMClockSource>:
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	401a      	ands	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_RCC_SetSAIClockSource>:
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <LL_RCC_SetRNGClockSource>:
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_RCC_SetCLK48ClockSource>:
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_RCC_SetUSBClockSource>:
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ffe3 	bl	8004b94 <LL_RCC_SetCLK48ClockSource>
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <LL_RCC_SetADCClockSource>:
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <LL_RCC_SetRTCClockSource>:
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_RCC_GetRTCClockSource>:
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_RCC_ForceBackupDomainReset>:
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_ReleaseBackupDomainReset>:
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_RCC_PLLSAI1_Enable>:
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_PLLSAI1_Disable>:
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	bf00      	nop
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <LL_RCC_PLLSAI1_IsReady>:
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cda:	d101      	bne.n	8004ce0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_RCCEx_PeriphCLKConfig>:
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	77bb      	strb	r3, [r7, #30]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d034      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d10:	d021      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004d12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d16:	d81b      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d1c:	d01d      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d22:	d815      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00b      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d2c:	d110      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3c:	60d3      	str	r3, [r2, #12]
 8004d3e:	e00d      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f94d 	bl	8004fe4 <RCCEx_PLLSAI1_ConfigNP>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e005      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d50:	2301      	movs	r3, #1
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e002      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d5a:	bf00      	nop
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fee8 	bl	8004b3c <LL_RCC_SetSAIClockSource>
 8004d6c:	e001      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	77bb      	strb	r3, [r7, #30]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d046      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004d7e:	f7ff ff56 	bl	8004c2e <LL_RCC_GetRTCClockSource>
 8004d82:	61b8      	str	r0, [r7, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d03c      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004d8e:	f7fe fc8b 	bl	80036a8 <HAL_PWR_EnableBkUpAccess>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff30 	bl	8004c02 <LL_RCC_SetRTCClockSource>
 8004da2:	e02e      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	f7ff ff4b 	bl	8004c48 <LL_RCC_ForceBackupDomainReset>
 8004db2:	f7ff ff5a 	bl	8004c6a <LL_RCC_ReleaseBackupDomainReset>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dce:	f7ff fde1 	bl	8004994 <LL_RCC_LSE_IsEnabled>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d114      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dd8:	f7fc f962 	bl	80010a0 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]
 8004dde:	e00b      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004de0:	f7fc f95e 	bl	80010a0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d902      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004df2:	2303      	movs	r3, #3
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e004      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004df8:	f7ff fdde 	bl	80049b8 <LL_RCC_LSE_IsReady>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d1ee      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e02:	7ffb      	ldrb	r3, [r7, #31]
 8004e04:	77bb      	strb	r3, [r7, #30]
 8004e06:	e001      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004e08:	7ffb      	ldrb	r3, [r7, #31]
 8004e0a:	77bb      	strb	r3, [r7, #30]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fe2a 	bl	8004a76 <LL_RCC_SetUSARTClockSource>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fe35 	bl	8004aa2 <LL_RCC_SetLPUARTClockSource>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fe5d 	bl	8004b08 <LL_RCC_SetLPTIMClockSource>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fe52 	bl	8004b08 <LL_RCC_SetLPTIMClockSource>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fe2a 	bl	8004ace <LL_RCC_SetI2CClockSource>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fe1f 	bl	8004ace <LL_RCC_SetI2CClockSource>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fe8d 	bl	8004bc0 <LL_RCC_SetUSBClockSource>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	60d3      	str	r3, [r2, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f8e3 	bl	800509a <RCCEx_PLLSAI1_ConfigNQ>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	7ffb      	ldrb	r3, [r7, #31]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004ede:	7ffb      	ldrb	r3, [r7, #31]
 8004ee0:	77bb      	strb	r3, [r7, #30]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02b      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f00:	d003      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fe2a 	bl	8004b68 <LL_RCC_SetRNGClockSource>
 8004f14:	e00a      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	2000      	movs	r0, #0
 8004f22:	f7ff fe21 	bl	8004b68 <LL_RCC_SetRNGClockSource>
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fe34 	bl	8004b94 <LL_RCC_SetCLK48ClockSource>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004f34:	d107      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f44:	60d3      	str	r3, [r2, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d022      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fe3d 	bl	8004bd6 <LL_RCC_SetADCClockSource>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f64:	d107      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	60d3      	str	r3, [r2, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7e:	d10b      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f8e3 	bl	8005150 <RCCEx_PLLSAI1_ConfigNR>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	7ffb      	ldrb	r3, [r7, #31]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f94:	7ffb      	ldrb	r3, [r7, #31]
 8004f96:	77bb      	strb	r3, [r7, #30]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fd26 	bl	80049fa <LL_RCC_SetRFWKPClockSource>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fd45 	bl	8004a4e <LL_RCC_SetSMPSPrescaler>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fd2c 	bl	8004a26 <LL_RCC_SetSMPSClockSource>
 8004fce:	7fbb      	ldrb	r3, [r7, #30]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_RCCEx_EnableMSIPLLMode>:
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	f7ff fcfe 	bl	80049dc <LL_RCC_MSI_EnablePLLMode>
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <RCCEx_PLLSAI1_ConfigNP>:
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	f7ff fe5b 	bl	8004caa <LL_RCC_PLLSAI1_Disable>
 8004ff4:	f7fc f854 	bl	80010a0 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]
 8004ffa:	e009      	b.n	8005010 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8004ffc:	f7fc f850 	bl	80010a0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	e004      	b.n	800501a <RCCEx_PLLSAI1_ConfigNP+0x36>
 8005010:	f7ff fe5a 	bl	8004cc8 <LL_RCC_PLLSAI1_IsReady>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <RCCEx_PLLSAI1_ConfigNP+0x18>
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d137      	bne.n	8005090 <RCCEx_PLLSAI1_ConfigNP+0xac>
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005034:	4313      	orrs	r3, r2
 8005036:	610b      	str	r3, [r1, #16]
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800504a:	4313      	orrs	r3, r2
 800504c:	610b      	str	r3, [r1, #16]
 800504e:	f7ff fe1d 	bl	8004c8c <LL_RCC_PLLSAI1_Enable>
 8005052:	f7fc f825 	bl	80010a0 <HAL_GetTick>
 8005056:	60b8      	str	r0, [r7, #8]
 8005058:	e009      	b.n	800506e <RCCEx_PLLSAI1_ConfigNP+0x8a>
 800505a:	f7fc f821 	bl	80010a0 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d902      	bls.n	800506e <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8005068:	2303      	movs	r3, #3
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e004      	b.n	8005078 <RCCEx_PLLSAI1_ConfigNP+0x94>
 800506e:	f7ff fe2b 	bl	8004cc8 <LL_RCC_PLLSAI1_IsReady>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d1f0      	bne.n	800505a <RCCEx_PLLSAI1_ConfigNP+0x76>
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <RCCEx_PLLSAI1_ConfigNP+0xac>
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508c:	4313      	orrs	r3, r2
 800508e:	610b      	str	r3, [r1, #16]
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <RCCEx_PLLSAI1_ConfigNQ>:
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
 80050a6:	f7ff fe00 	bl	8004caa <LL_RCC_PLLSAI1_Disable>
 80050aa:	f7fb fff9 	bl	80010a0 <HAL_GetTick>
 80050ae:	60b8      	str	r0, [r7, #8]
 80050b0:	e009      	b.n	80050c6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80050b2:	f7fb fff5 	bl	80010a0 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d902      	bls.n	80050c6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80050c0:	2303      	movs	r3, #3
 80050c2:	73fb      	strb	r3, [r7, #15]
 80050c4:	e004      	b.n	80050d0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
 80050c6:	f7ff fdff 	bl	8004cc8 <LL_RCC_PLLSAI1_IsReady>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f0      	bne.n	80050b2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d137      	bne.n	8005146 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
 80050ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005100:	4313      	orrs	r3, r2
 8005102:	610b      	str	r3, [r1, #16]
 8005104:	f7ff fdc2 	bl	8004c8c <LL_RCC_PLLSAI1_Enable>
 8005108:	f7fb ffca 	bl	80010a0 <HAL_GetTick>
 800510c:	60b8      	str	r0, [r7, #8]
 800510e:	e009      	b.n	8005124 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8005110:	f7fb ffc6 	bl	80010a0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d902      	bls.n	8005124 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 800511e:	2303      	movs	r3, #3
 8005120:	73fb      	strb	r3, [r7, #15]
 8005122:	e004      	b.n	800512e <RCCEx_PLLSAI1_ConfigNQ+0x94>
 8005124:	f7ff fdd0 	bl	8004cc8 <LL_RCC_PLLSAI1_IsReady>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d1f0      	bne.n	8005110 <RCCEx_PLLSAI1_ConfigNQ+0x76>
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d108      	bne.n	8005146 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005142:	4313      	orrs	r3, r2
 8005144:	610b      	str	r3, [r1, #16]
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <RCCEx_PLLSAI1_ConfigNR>:
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	2300      	movs	r3, #0
 800515a:	73fb      	strb	r3, [r7, #15]
 800515c:	f7ff fda5 	bl	8004caa <LL_RCC_PLLSAI1_Disable>
 8005160:	f7fb ff9e 	bl	80010a0 <HAL_GetTick>
 8005164:	60b8      	str	r0, [r7, #8]
 8005166:	e009      	b.n	800517c <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8005168:	f7fb ff9a 	bl	80010a0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d902      	bls.n	800517c <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8005176:	2303      	movs	r3, #3
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e004      	b.n	8005186 <RCCEx_PLLSAI1_ConfigNR+0x36>
 800517c:	f7ff fda4 	bl	8004cc8 <LL_RCC_PLLSAI1_IsReady>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <RCCEx_PLLSAI1_ConfigNR+0x18>
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d137      	bne.n	80051fc <RCCEx_PLLSAI1_ConfigNR+0xac>
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a0:	4313      	orrs	r3, r2
 80051a2:	610b      	str	r3, [r1, #16]
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b6:	4313      	orrs	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]
 80051ba:	f7ff fd67 	bl	8004c8c <LL_RCC_PLLSAI1_Enable>
 80051be:	f7fb ff6f 	bl	80010a0 <HAL_GetTick>
 80051c2:	60b8      	str	r0, [r7, #8]
 80051c4:	e009      	b.n	80051da <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80051c6:	f7fb ff6b 	bl	80010a0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d902      	bls.n	80051da <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80051d4:	2303      	movs	r3, #3
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	e004      	b.n	80051e4 <RCCEx_PLLSAI1_ConfigNR+0x94>
 80051da:	f7ff fd75 	bl	8004cc8 <LL_RCC_PLLSAI1_IsReady>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d1f0      	bne.n	80051c6 <RCCEx_PLLSAI1_ConfigNR+0x76>
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <RCCEx_PLLSAI1_ConfigNR+0xac>
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e049      	b.n	80052ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7fb fcdf 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f000 ffbf 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d001      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e036      	b.n	800533a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <HAL_TIM_Base_Start_IT+0x94>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x44>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d115      	bne.n	8005324 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <HAL_TIM_Base_Start_IT+0x98>)
 8005300:	4013      	ands	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b06      	cmp	r3, #6
 8005308:	d015      	beq.n	8005336 <HAL_TIM_Base_Start_IT+0x82>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005310:	d011      	beq.n	8005336 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005322:	e008      	b.n	8005336 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e000      	b.n	8005338 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00
 800534c:	00010007 	.word	0x00010007

08005350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e049      	b.n	80053f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f841 	bl	80053fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f000 ff1a 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <HAL_TIM_PWM_Start_DMA+0x2c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e03c      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xa6>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b04      	cmp	r3, #4
 8005444:	d109      	bne.n	800545a <HAL_TIM_PWM_Start_DMA+0x46>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	bf0c      	ite	eq
 8005452:	2301      	moveq	r3, #1
 8005454:	2300      	movne	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	e02f      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d109      	bne.n	8005474 <HAL_TIM_PWM_Start_DMA+0x60>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e022      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xa6>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d109      	bne.n	800548e <HAL_TIM_PWM_Start_DMA+0x7a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	e015      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b10      	cmp	r3, #16
 8005492:	d109      	bne.n	80054a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e008      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xa6>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80054be:	2302      	movs	r3, #2
 80054c0:	e188      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e03c      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0x142>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e02f      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0x142>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e022      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0x142>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d109      	bne.n	800552a <HAL_TIM_PWM_Start_DMA+0x116>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b01      	cmp	r3, #1
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	e015      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0x142>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b10      	cmp	r3, #16
 800552e:	d109      	bne.n	8005544 <HAL_TIM_PWM_Start_DMA+0x130>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e008      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0x142>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d034      	beq.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_TIM_PWM_Start_DMA+0x152>
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e134      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x3c0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start_DMA+0x166>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	e026      	b.n	80055c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start_DMA+0x176>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	e01e      	b.n	80055c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start_DMA+0x186>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005598:	e016      	b.n	80055c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start_DMA+0x196>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a8:	e00e      	b.n	80055c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start_DMA+0x1a6>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b8:	e006      	b.n	80055c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c2:	e001      	b.n	80055c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e105      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }

  switch (Channel)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	f200 80ae 	bhi.w	800572c <HAL_TIM_PWM_Start_DMA+0x318>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	0800572d 	.word	0x0800572d
 80055e0:	0800572d 	.word	0x0800572d
 80055e4:	0800572d 	.word	0x0800572d
 80055e8:	08005655 	.word	0x08005655
 80055ec:	0800572d 	.word	0x0800572d
 80055f0:	0800572d 	.word	0x0800572d
 80055f4:	0800572d 	.word	0x0800572d
 80055f8:	0800569d 	.word	0x0800569d
 80055fc:	0800572d 	.word	0x0800572d
 8005600:	0800572d 	.word	0x0800572d
 8005604:	0800572d 	.word	0x0800572d
 8005608:	080056e5 	.word	0x080056e5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	4a72      	ldr	r2, [pc, #456]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005612:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	4a71      	ldr	r2, [pc, #452]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800561a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	4a70      	ldr	r2, [pc, #448]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005622:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3334      	adds	r3, #52	; 0x34
 8005630:	461a      	mov	r2, r3
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	f7fb ff28 	bl	8001488 <HAL_DMA_Start_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e0c8      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	60da      	str	r2, [r3, #12]
      break;
 8005652:	e06e      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	4a60      	ldr	r2, [pc, #384]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	4a5f      	ldr	r2, [pc, #380]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005662:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	4a5e      	ldr	r2, [pc, #376]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800566a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3338      	adds	r3, #56	; 0x38
 8005678:	461a      	mov	r2, r3
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	f7fb ff04 	bl	8001488 <HAL_DMA_Start_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0a4      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005698:	60da      	str	r2, [r3, #12]
      break;
 800569a:	e04a      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	4a4d      	ldr	r2, [pc, #308]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	4a4c      	ldr	r2, [pc, #304]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80056b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	333c      	adds	r3, #60	; 0x3c
 80056c0:	461a      	mov	r2, r3
 80056c2:	887b      	ldrh	r3, [r7, #2]
 80056c4:	f7fb fee0 	bl	8001488 <HAL_DMA_Start_IT>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e080      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e0:	60da      	str	r2, [r3, #12]
      break;
 80056e2:	e026      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	4a3c      	ldr	r2, [pc, #240]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	4a3b      	ldr	r2, [pc, #236]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	4a3a      	ldr	r2, [pc, #232]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80056fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3340      	adds	r3, #64	; 0x40
 8005708:	461a      	mov	r2, r3
 800570a:	887b      	ldrh	r3, [r7, #2]
 800570c:	f7fb febc 	bl	8001488 <HAL_DMA_Start_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e05c      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005728:	60da      	str	r2, [r3, #12]
      break;
 800572a:	e002      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	75fb      	strb	r3, [r7, #23]
      break;
 8005730:	bf00      	nop
  }

  if (status == HAL_OK)
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d14c      	bne.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3be>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2201      	movs	r2, #1
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f001 f8bf 	bl	80068c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d009      	beq.n	8005764 <HAL_TIM_PWM_Start_DMA+0x350>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a25      	ldr	r2, [pc, #148]	; (80057ec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <HAL_TIM_PWM_Start_DMA+0x350>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d101      	bne.n	8005768 <HAL_TIM_PWM_Start_DMA+0x354>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_TIM_PWM_Start_DMA+0x356>
 8005768:	2300      	movs	r3, #0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800577c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_TIM_PWM_Start_DMA+0x37e>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d115      	bne.n	80057be <HAL_TIM_PWM_Start_DMA+0x3aa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d015      	beq.n	80057d0 <HAL_TIM_PWM_Start_DMA+0x3bc>
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057aa:	d011      	beq.n	80057d0 <HAL_TIM_PWM_Start_DMA+0x3bc>
      {
        __HAL_TIM_ENABLE(htim);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057bc:	e008      	b.n	80057d0 <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e000      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3be>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	080060b9 	.word	0x080060b9
 80057e0:	08006161 	.word	0x08006161
 80057e4:	08006027 	.word	0x08006027
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800
 80057f4:	00010007 	.word	0x00010007

080057f8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b0c      	cmp	r3, #12
 800580a:	d855      	bhi.n	80058b8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800580c:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	08005849 	.word	0x08005849
 8005818:	080058b9 	.word	0x080058b9
 800581c:	080058b9 	.word	0x080058b9
 8005820:	080058b9 	.word	0x080058b9
 8005824:	08005865 	.word	0x08005865
 8005828:	080058b9 	.word	0x080058b9
 800582c:	080058b9 	.word	0x080058b9
 8005830:	080058b9 	.word	0x080058b9
 8005834:	08005881 	.word	0x08005881
 8005838:	080058b9 	.word	0x080058b9
 800583c:	080058b9 	.word	0x080058b9
 8005840:	080058b9 	.word	0x080058b9
 8005844:	0800589d 	.word	0x0800589d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005856:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	4618      	mov	r0, r3
 800585e:	f7fb fe8e 	bl	800157e <HAL_DMA_Abort_IT>
      break;
 8005862:	e02c      	b.n	80058be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	4618      	mov	r0, r3
 800587a:	f7fb fe80 	bl	800157e <HAL_DMA_Abort_IT>
      break;
 800587e:	e01e      	b.n	80058be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800588e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4618      	mov	r0, r3
 8005896:	f7fb fe72 	bl	800157e <HAL_DMA_Abort_IT>
      break;
 800589a:	e010      	b.n	80058be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fb fe64 	bl	800157e <HAL_DMA_Abort_IT>
      break;
 80058b6:	e002      	b.n	80058be <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d176      	bne.n	80059b2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fff9 	bl	80068c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a39      	ldr	r2, [pc, #228]	; (80059bc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a37      	ldr	r2, [pc, #220]	; (80059c0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a36      	ldr	r2, [pc, #216]	; (80059c4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_PWM_Stop_DMA+0xfc>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d017      	beq.n	800592a <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	f241 1311 	movw	r3, #4369	; 0x1111
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10f      	bne.n	800592a <HAL_TIM_PWM_Stop_DMA+0x132>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f240 4344 	movw	r3, #1092	; 0x444
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <HAL_TIM_PWM_Stop_DMA+0x132>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	f241 1311 	movw	r3, #4369	; 0x1111
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10f      	bne.n	800595a <HAL_TIM_PWM_Stop_DMA+0x162>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	f240 4344 	movw	r3, #1092	; 0x444
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <HAL_TIM_PWM_Stop_DMA+0x162>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <HAL_TIM_PWM_Stop_DMA+0x172>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005968:	e023      	b.n	80059b2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b04      	cmp	r3, #4
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Stop_DMA+0x182>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005978:	e01b      	b.n	80059b2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b08      	cmp	r3, #8
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Stop_DMA+0x192>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005988:	e013      	b.n	80059b2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b0c      	cmp	r3, #12
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005998:	e00b      	b.n	80059b2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b10      	cmp	r3, #16
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a8:	e003      	b.n	80059b2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800

080059c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0202 	mvn.w	r2, #2
 80059f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fae3 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fad5 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fa fc65 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0204 	mvn.w	r2, #4
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fab9 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 faab 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fa fc3b 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0208 	mvn.w	r2, #8
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa8f 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa81 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fa fc11 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d122      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0210 	mvn.w	r2, #16
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2208      	movs	r2, #8
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa65 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa57 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fa fbe7 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10e      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0201 	mvn.w	r2, #1
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fa feea 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	2b80      	cmp	r3, #128	; 0x80
 8005b58:	d10e      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b64:	2b80      	cmp	r3, #128	; 0x80
 8005b66:	d107      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 ffc6 	bl	8006b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d10e      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b80      	cmp	r3, #128	; 0x80
 8005b94:	d107      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 ffb9 	bl	8006b18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa16 	bl	8005ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d10e      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0220 	mvn.w	r2, #32
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 ff79 	bl	8006af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e0ff      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b14      	cmp	r3, #20
 8005c32:	f200 80f0 	bhi.w	8005e16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c91 	.word	0x08005c91
 8005c40:	08005e17 	.word	0x08005e17
 8005c44:	08005e17 	.word	0x08005e17
 8005c48:	08005e17 	.word	0x08005e17
 8005c4c:	08005cd1 	.word	0x08005cd1
 8005c50:	08005e17 	.word	0x08005e17
 8005c54:	08005e17 	.word	0x08005e17
 8005c58:	08005e17 	.word	0x08005e17
 8005c5c:	08005d13 	.word	0x08005d13
 8005c60:	08005e17 	.word	0x08005e17
 8005c64:	08005e17 	.word	0x08005e17
 8005c68:	08005e17 	.word	0x08005e17
 8005c6c:	08005d53 	.word	0x08005d53
 8005c70:	08005e17 	.word	0x08005e17
 8005c74:	08005e17 	.word	0x08005e17
 8005c78:	08005e17 	.word	0x08005e17
 8005c7c:	08005d95 	.word	0x08005d95
 8005c80:	08005e17 	.word	0x08005e17
 8005c84:	08005e17 	.word	0x08005e17
 8005c88:	08005e17 	.word	0x08005e17
 8005c8c:	08005dd5 	.word	0x08005dd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fafa 	bl	8006290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0208 	orr.w	r2, r2, #8
 8005caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0204 	bic.w	r2, r2, #4
 8005cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6999      	ldr	r1, [r3, #24]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	619a      	str	r2, [r3, #24]
      break;
 8005cce:	e0a5      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fb56 	bl	8006388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6999      	ldr	r1, [r3, #24]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	021a      	lsls	r2, r3, #8
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	619a      	str	r2, [r3, #24]
      break;
 8005d10:	e084      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fbaf 	bl	800647c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0208 	orr.w	r2, r2, #8
 8005d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0204 	bic.w	r2, r2, #4
 8005d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69d9      	ldr	r1, [r3, #28]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	61da      	str	r2, [r3, #28]
      break;
 8005d50:	e064      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fc07 	bl	800656c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69d9      	ldr	r1, [r3, #28]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	021a      	lsls	r2, r3, #8
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	61da      	str	r2, [r3, #28]
      break;
 8005d92:	e043      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fc44 	bl	8006628 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0208 	orr.w	r2, r2, #8
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dd2:	e023      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fc7c 	bl	80066d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	021a      	lsls	r2, r3, #8
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e14:	e002      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop

08005e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_ConfigClockSource+0x1c>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e0b6      	b.n	8005fba <HAL_TIM_ConfigClockSource+0x18a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005e6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e88:	d03e      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0xd8>
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8e:	f200 8087 	bhi.w	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e96:	f000 8086 	beq.w	8005fa6 <HAL_TIM_ConfigClockSource+0x176>
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d87f      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005ea0:	2b70      	cmp	r3, #112	; 0x70
 8005ea2:	d01a      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0xaa>
 8005ea4:	2b70      	cmp	r3, #112	; 0x70
 8005ea6:	d87b      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005ea8:	2b60      	cmp	r3, #96	; 0x60
 8005eaa:	d050      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x11e>
 8005eac:	2b60      	cmp	r3, #96	; 0x60
 8005eae:	d877      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005eb0:	2b50      	cmp	r3, #80	; 0x50
 8005eb2:	d03c      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0xfe>
 8005eb4:	2b50      	cmp	r3, #80	; 0x50
 8005eb6:	d873      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005eb8:	2b40      	cmp	r3, #64	; 0x40
 8005eba:	d058      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x13e>
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d86f      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005ec0:	2b30      	cmp	r3, #48	; 0x30
 8005ec2:	d064      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15e>
 8005ec4:	2b30      	cmp	r3, #48	; 0x30
 8005ec6:	d86b      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d060      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15e>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d867      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d05c      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15e>
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d05a      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15e>
 8005ed8:	e062      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6899      	ldr	r1, [r3, #8]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f000 fccb 	bl	8006884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	609a      	str	r2, [r3, #8]
      break;
 8005f06:	e04f      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6899      	ldr	r1, [r3, #8]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f000 fcb4 	bl	8006884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f2a:	609a      	str	r2, [r3, #8]
      break;
 8005f2c:	e03c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 fc26 	bl	800678c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2150      	movs	r1, #80	; 0x50
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fc7f 	bl	800684a <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e02c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6859      	ldr	r1, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f000 fc45 	bl	80067ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2160      	movs	r1, #96	; 0x60
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fc6f 	bl	800684a <TIM_ITRx_SetConfig>
      break;
 8005f6c:	e01c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6859      	ldr	r1, [r3, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f000 fc06 	bl	800678c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2140      	movs	r1, #64	; 0x40
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fc5f 	bl	800684a <TIM_ITRx_SetConfig>
      break;
 8005f8c:	e00c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 fc56 	bl	800684a <TIM_ITRx_SetConfig>
      break;
 8005f9e:	e003      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e000      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d107      	bne.n	800604e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604c:	e02a      	b.n	80060a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d107      	bne.n	8006068 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2202      	movs	r2, #2
 800605c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006066:	e01d      	b.n	80060a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d107      	bne.n	8006082 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2204      	movs	r2, #4
 8006076:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006080:	e010      	b.n	80060a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d107      	bne.n	800609c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2208      	movs	r2, #8
 8006090:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800609a:	e003      	b.n	80060a4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff ffb4 	bl	8006012 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d10b      	bne.n	80060e8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d136      	bne.n	800614c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e6:	e031      	b.n	800614c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d10b      	bne.n	800610a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2202      	movs	r2, #2
 80060f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d125      	bne.n	800614c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006108:	e020      	b.n	800614c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d10b      	bne.n	800612c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2204      	movs	r2, #4
 8006118:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d114      	bne.n	800614c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612a:	e00f      	b.n	800614c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d10a      	bne.n	800614c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2208      	movs	r2, #8
 800613a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d103      	bne.n	800614c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7fa f8cb 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d103      	bne.n	8006180 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	771a      	strb	r2, [r3, #28]
 800617e:	e019      	b.n	80061b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d103      	bne.n	8006192 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2202      	movs	r2, #2
 800618e:	771a      	strb	r2, [r3, #28]
 8006190:	e010      	b.n	80061b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	429a      	cmp	r2, r3
 800619a:	d103      	bne.n	80061a4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2204      	movs	r2, #4
 80061a0:	771a      	strb	r2, [r3, #28]
 80061a2:	e007      	b.n	80061b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d102      	bne.n	80061b4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2208      	movs	r2, #8
 80061b2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff ff18 	bl	8005fea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	771a      	strb	r2, [r3, #28]
}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a2a      	ldr	r2, [pc, #168]	; (8006284 <TIM_Base_SetConfig+0xbc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_Base_SetConfig+0x20>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e6:	d108      	bne.n	80061fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a21      	ldr	r2, [pc, #132]	; (8006284 <TIM_Base_SetConfig+0xbc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00b      	beq.n	800621a <TIM_Base_SetConfig+0x52>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d007      	beq.n	800621a <TIM_Base_SetConfig+0x52>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <TIM_Base_SetConfig+0xc0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d003      	beq.n	800621a <TIM_Base_SetConfig+0x52>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1d      	ldr	r2, [pc, #116]	; (800628c <TIM_Base_SetConfig+0xc4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d108      	bne.n	800622c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a0c      	ldr	r2, [pc, #48]	; (8006284 <TIM_Base_SetConfig+0xbc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_Base_SetConfig+0xa0>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a0b      	ldr	r2, [pc, #44]	; (8006288 <TIM_Base_SetConfig+0xc0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0xa0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a0a      	ldr	r2, [pc, #40]	; (800628c <TIM_Base_SetConfig+0xc4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	615a      	str	r2, [r3, #20]
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800

08006290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 0302 	bic.w	r3, r3, #2
 80062dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a24      	ldr	r2, [pc, #144]	; (800637c <TIM_OC1_SetConfig+0xec>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d007      	beq.n	8006300 <TIM_OC1_SetConfig+0x70>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a23      	ldr	r2, [pc, #140]	; (8006380 <TIM_OC1_SetConfig+0xf0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC1_SetConfig+0x70>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a22      	ldr	r2, [pc, #136]	; (8006384 <TIM_OC1_SetConfig+0xf4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10c      	bne.n	800631a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0308 	bic.w	r3, r3, #8
 8006306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f023 0304 	bic.w	r3, r3, #4
 8006318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a17      	ldr	r2, [pc, #92]	; (800637c <TIM_OC1_SetConfig+0xec>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <TIM_OC1_SetConfig+0xa2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a17      	ldr	r2, [pc, #92]	; (8006384 <TIM_OC1_SetConfig+0xf4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_OC1_SetConfig+0xa2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a14      	ldr	r2, [pc, #80]	; (8006380 <TIM_OC1_SetConfig+0xf0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d111      	bne.n	8006356 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014800 	.word	0x40014800
 8006384:	40014400 	.word	0x40014400

08006388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f023 0210 	bic.w	r2, r3, #16
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f023 0320 	bic.w	r3, r3, #32
 80063d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a22      	ldr	r2, [pc, #136]	; (8006470 <TIM_OC2_SetConfig+0xe8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d10d      	bne.n	8006408 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a19      	ldr	r2, [pc, #100]	; (8006470 <TIM_OC2_SetConfig+0xe8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_OC2_SetConfig+0x98>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a18      	ldr	r2, [pc, #96]	; (8006474 <TIM_OC2_SetConfig+0xec>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC2_SetConfig+0x98>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a17      	ldr	r2, [pc, #92]	; (8006478 <TIM_OC2_SetConfig+0xf0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d113      	bne.n	8006448 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800

0800647c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0303 	bic.w	r3, r3, #3
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a21      	ldr	r2, [pc, #132]	; (8006560 <TIM_OC3_SetConfig+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a18      	ldr	r2, [pc, #96]	; (8006560 <TIM_OC3_SetConfig+0xe4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d007      	beq.n	8006512 <TIM_OC3_SetConfig+0x96>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <TIM_OC3_SetConfig+0xe8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_OC3_SetConfig+0x96>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a16      	ldr	r2, [pc, #88]	; (8006568 <TIM_OC3_SetConfig+0xec>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d113      	bne.n	800653a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	621a      	str	r2, [r3, #32]
}
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800

0800656c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800659a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	031b      	lsls	r3, r3, #12
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a14      	ldr	r2, [pc, #80]	; (800661c <TIM_OC4_SetConfig+0xb0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_OC4_SetConfig+0x74>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <TIM_OC4_SetConfig+0xb4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_OC4_SetConfig+0x74>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a12      	ldr	r2, [pc, #72]	; (8006624 <TIM_OC4_SetConfig+0xb8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d109      	bne.n	80065f4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800666c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a13      	ldr	r2, [pc, #76]	; (80066cc <TIM_OC5_SetConfig+0xa4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d007      	beq.n	8006692 <TIM_OC5_SetConfig+0x6a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <TIM_OC5_SetConfig+0xa8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_OC5_SetConfig+0x6a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a11      	ldr	r2, [pc, #68]	; (80066d4 <TIM_OC5_SetConfig+0xac>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d109      	bne.n	80066a6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	621a      	str	r2, [r3, #32]
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40012c00 	.word	0x40012c00
 80066d0:	40014400 	.word	0x40014400
 80066d4:	40014800 	.word	0x40014800

080066d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	021b      	lsls	r3, r3, #8
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800671e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	051b      	lsls	r3, r3, #20
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a14      	ldr	r2, [pc, #80]	; (8006780 <TIM_OC6_SetConfig+0xa8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d007      	beq.n	8006744 <TIM_OC6_SetConfig+0x6c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a13      	ldr	r2, [pc, #76]	; (8006784 <TIM_OC6_SetConfig+0xac>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_OC6_SetConfig+0x6c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a12      	ldr	r2, [pc, #72]	; (8006788 <TIM_OC6_SetConfig+0xb0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d109      	bne.n	8006758 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800674a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40014400 	.word	0x40014400
 8006788:	40014800 	.word	0x40014800

0800678c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 030a 	bic.w	r3, r3, #10
 80067c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f023 0210 	bic.w	r2, r3, #16
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	031b      	lsls	r3, r3, #12
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	f043 0307 	orr.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	021a      	lsls	r2, r3, #8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2201      	movs	r2, #1
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	401a      	ands	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	431a      	orrs	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e04a      	b.n	80069be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d108      	bne.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006958:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a12      	ldr	r2, [pc, #72]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006990:	d10c      	bne.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40012c00 	.word	0x40012c00

080069d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e078      	b.n	8006ade <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a20      	ldr	r2, [pc, #128]	; (8006aec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d106      	bne.n	8006a7e <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1a      	ldr	r2, [pc, #104]	; (8006aec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d121      	bne.n	8006acc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	051b      	lsls	r3, r3, #20
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a0c      	ldr	r2, [pc, #48]	; (8006aec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d106      	bne.n	8006acc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40012c00 	.word	0x40012c00

08006af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_EnableGlobalInt>:
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006b3c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_DisableGlobalInt>:
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	4013      	ands	r3, r2
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006b82:	2300      	movs	r3, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USB_DevInit>:
 8006b90:	b084      	sub	sp, #16
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	f107 0014 	add.w	r0, r7, #20
 8006b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	b004      	add	sp, #16
 8006bd0:	4770      	bx	lr
	...

08006bd4 <USB_ActivateEndpoint>:
 8006bd4:	b480      	push	{r7}
 8006bd6:	b09d      	sub	sp, #116	; 0x74
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	78db      	ldrb	r3, [r3, #3]
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d81f      	bhi.n	8006c46 <USB_ActivateEndpoint+0x72>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <USB_ActivateEndpoint+0x38>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c1d 	.word	0x08006c1d
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c4f 	.word	0x08006c4f
 8006c18:	08006c2b 	.word	0x08006c2b
 8006c1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c28:	e012      	b.n	8006c50 <USB_ActivateEndpoint+0x7c>
 8006c2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006c32:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c36:	e00b      	b.n	8006c50 <USB_ActivateEndpoint+0x7c>
 8006c38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c44:	e004      	b.n	8006c50 <USB_ActivateEndpoint+0x7c>
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006c4c:	e000      	b.n	8006c50 <USB_ActivateEndpoint+0x7c>
 8006c4e:	bf00      	nop
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	b21b      	sxth	r3, r3
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	b21a      	sxth	r2, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	7b1b      	ldrb	r3, [r3, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f040 8178 	bne.w	8006fb6 <USB_ActivateEndpoint+0x3e2>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8084 	beq.w	8006dd8 <USB_ActivateEndpoint+0x204>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	00da      	lsls	r2, r3, #3
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	88db      	ldrh	r3, [r3, #6]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	827b      	strh	r3, [r7, #18]
 8006d12:	8a7b      	ldrh	r3, [r7, #18]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01b      	beq.n	8006d54 <USB_ActivateEndpoint+0x180>
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	823b      	strh	r3, [r7, #16]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	8a3b      	ldrh	r3, [r7, #16]
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	78db      	ldrb	r3, [r3, #3]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d020      	beq.n	8006d9e <USB_ActivateEndpoint+0x1ca>
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d72:	81bb      	strh	r3, [r7, #12]
 8006d74:	89bb      	ldrh	r3, [r7, #12]
 8006d76:	f083 0320 	eor.w	r3, r3, #32
 8006d7a:	81bb      	strh	r3, [r7, #12]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	441a      	add	r2, r3
 8006d86:	89bb      	ldrh	r3, [r7, #12]
 8006d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	8013      	strh	r3, [r2, #0]
 8006d9c:	e2d5      	b.n	800734a <USB_ActivateEndpoint+0x776>
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	81fb      	strh	r3, [r7, #14]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8013      	strh	r3, [r2, #0]
 8006dd6:	e2b8      	b.n	800734a <USB_ActivateEndpoint+0x776>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	4413      	add	r3, r2
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	00da      	lsls	r2, r3, #3
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	4413      	add	r3, r2
 8006df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	4413      	add	r3, r2
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	00da      	lsls	r2, r3, #3
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	4413      	add	r3, r2
 8006e2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b3e      	cmp	r3, #62	; 0x3e
 8006e46:	d91d      	bls.n	8006e84 <USB_ActivateEndpoint+0x2b0>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <USB_ActivateEndpoint+0x28e>
 8006e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	e026      	b.n	8006ed2 <USB_ActivateEndpoint+0x2fe>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <USB_ActivateEndpoint+0x2ce>
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e017      	b.n	8006ed2 <USB_ActivateEndpoint+0x2fe>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <USB_ActivateEndpoint+0x2e8>
 8006eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eb8:	3301      	adds	r3, #1
 8006eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	029b      	lsls	r3, r3, #10
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	801a      	strh	r2, [r3, #0]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	847b      	strh	r3, [r7, #34]	; 0x22
 8006ee0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01b      	beq.n	8006f22 <USB_ActivateEndpoint+0x34e>
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	843b      	strh	r3, [r7, #32]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	8c3b      	ldrh	r3, [r7, #32]
 8006f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	8013      	strh	r3, [r2, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d124      	bne.n	8006f74 <USB_ActivateEndpoint+0x3a0>
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f40:	83bb      	strh	r3, [r7, #28]
 8006f42:	8bbb      	ldrh	r3, [r7, #28]
 8006f44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f48:	83bb      	strh	r3, [r7, #28]
 8006f4a:	8bbb      	ldrh	r3, [r7, #28]
 8006f4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f50:	83bb      	strh	r3, [r7, #28]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	8bbb      	ldrh	r3, [r7, #28]
 8006f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	8013      	strh	r3, [r2, #0]
 8006f72:	e1ea      	b.n	800734a <USB_ActivateEndpoint+0x776>
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8a:	83fb      	strh	r3, [r7, #30]
 8006f8c:	8bfb      	ldrh	r3, [r7, #30]
 8006f8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f92:	83fb      	strh	r3, [r7, #30]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	8bfb      	ldrh	r3, [r7, #30]
 8006fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	8013      	strh	r3, [r2, #0]
 8006fb4:	e1c9      	b.n	800734a <USB_ActivateEndpoint+0x776>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	78db      	ldrb	r3, [r3, #3]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d11e      	bne.n	8006ffc <USB_ActivateEndpoint+0x428>
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	441a      	add	r2, r3
 8006fe2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]
 8006ffa:	e01d      	b.n	8007038 <USB_ActivateEndpoint+0x464>
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	441a      	add	r2, r3
 8007020:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007034:	b29b      	uxth	r3, r3
 8007036:	8013      	strh	r3, [r2, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007048:	4413      	add	r3, r2
 800704a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	00da      	lsls	r2, r3, #3
 8007052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007054:	4413      	add	r3, r2
 8007056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705a:	65bb      	str	r3, [r7, #88]	; 0x58
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	891b      	ldrh	r3, [r3, #8]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	657b      	str	r3, [r7, #84]	; 0x54
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007076:	b29b      	uxth	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800707c:	4413      	add	r3, r2
 800707e:	657b      	str	r3, [r7, #84]	; 0x54
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	00da      	lsls	r2, r3, #3
 8007086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007088:	4413      	add	r3, r2
 800708a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800708e:	653b      	str	r3, [r7, #80]	; 0x50
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	895b      	ldrh	r3, [r3, #10]
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	b29b      	uxth	r3, r3
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 8093 	bne.w	80071d0 <USB_ActivateEndpoint+0x5fc>
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01b      	beq.n	80070fe <USB_ActivateEndpoint+0x52a>
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800710c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800710e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	d01b      	beq.n	800714e <USB_ActivateEndpoint+0x57a>
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	b29b      	uxth	r3, r3
 8007124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	441a      	add	r2, r3
 8007138:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800713a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800714a:	b29b      	uxth	r3, r3
 800714c:	8013      	strh	r3, [r2, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007164:	873b      	strh	r3, [r7, #56]	; 0x38
 8007166:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007168:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800716c:	873b      	strh	r3, [r7, #56]	; 0x38
 800716e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007170:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007174:	873b      	strh	r3, [r7, #56]	; 0x38
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	441a      	add	r2, r3
 8007180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007192:	b29b      	uxth	r3, r3
 8007194:	8013      	strh	r3, [r2, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	441a      	add	r2, r3
 80071b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	8013      	strh	r3, [r2, #0]
 80071ce:	e0bc      	b.n	800734a <USB_ActivateEndpoint+0x776>
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01d      	beq.n	8007228 <USB_ActivateEndpoint+0x654>
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007238:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01d      	beq.n	8007280 <USB_ActivateEndpoint+0x6ac>
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800726c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800727c:	b29b      	uxth	r3, r3
 800727e:	8013      	strh	r3, [r2, #0]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	78db      	ldrb	r3, [r3, #3]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d024      	beq.n	80072d2 <USB_ActivateEndpoint+0x6fe>
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072a6:	f083 0320 	eor.w	r3, r3, #32
 80072aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	441a      	add	r2, r3
 80072b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	8013      	strh	r3, [r2, #0]
 80072d0:	e01d      	b.n	800730e <USB_ActivateEndpoint+0x73a>
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	441a      	add	r2, r3
 80072f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80072fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	b29b      	uxth	r3, r3
 800730c:	8013      	strh	r3, [r2, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007346:	b29b      	uxth	r3, r3
 8007348:	8013      	strh	r3, [r2, #0]
 800734a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800734e:	4618      	mov	r0, r3
 8007350:	3774      	adds	r7, #116	; 0x74
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop

0800735c <USB_DeactivateEndpoint>:
 800735c:	b480      	push	{r7}
 800735e:	b08d      	sub	sp, #52	; 0x34
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	7b1b      	ldrb	r3, [r3, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 808e 	bne.w	800748c <USB_DeactivateEndpoint+0x130>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d044      	beq.n	8007402 <USB_DeactivateEndpoint+0xa6>
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	81bb      	strh	r3, [r7, #12]
 8007386:	89bb      	ldrh	r3, [r7, #12]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01b      	beq.n	80073c8 <USB_DeactivateEndpoint+0x6c>
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	817b      	strh	r3, [r7, #10]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	897b      	ldrh	r3, [r7, #10]
 80073b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073de:	813b      	strh	r3, [r7, #8]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	893b      	ldrh	r3, [r7, #8]
 80073ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	8013      	strh	r3, [r2, #0]
 8007400:	e192      	b.n	8007728 <USB_DeactivateEndpoint+0x3cc>
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	827b      	strh	r3, [r7, #18]
 8007410:	8a7b      	ldrh	r3, [r7, #18]
 8007412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01b      	beq.n	8007452 <USB_DeactivateEndpoint+0xf6>
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	823b      	strh	r3, [r7, #16]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	8a3b      	ldrh	r3, [r7, #16]
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800744a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007468:	81fb      	strh	r3, [r7, #14]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
 800748a:	e14d      	b.n	8007728 <USB_DeactivateEndpoint+0x3cc>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f040 80a5 	bne.w	80075e0 <USB_DeactivateEndpoint+0x284>
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	843b      	strh	r3, [r7, #32]
 80074a4:	8c3b      	ldrh	r3, [r7, #32]
 80074a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01b      	beq.n	80074e6 <USB_DeactivateEndpoint+0x18a>
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c4:	83fb      	strh	r3, [r7, #30]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	441a      	add	r2, r3
 80074d0:	8bfb      	ldrh	r3, [r7, #30]
 80074d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	8013      	strh	r3, [r2, #0]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	83bb      	strh	r3, [r7, #28]
 80074f4:	8bbb      	ldrh	r3, [r7, #28]
 80074f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01b      	beq.n	8007536 <USB_DeactivateEndpoint+0x1da>
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	837b      	strh	r3, [r7, #26]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	8b7b      	ldrh	r3, [r7, #26]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	833b      	strh	r3, [r7, #24]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	441a      	add	r2, r3
 8007558:	8b3b      	ldrh	r3, [r7, #24]
 800755a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800756a:	b29b      	uxth	r3, r3
 800756c:	8013      	strh	r3, [r2, #0]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007584:	82fb      	strh	r3, [r7, #22]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	441a      	add	r2, r3
 8007590:	8afb      	ldrh	r3, [r7, #22]
 8007592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800759a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	8013      	strh	r3, [r2, #0]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075bc:	82bb      	strh	r3, [r7, #20]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8abb      	ldrh	r3, [r7, #20]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
 80075de:	e0a3      	b.n	8007728 <USB_DeactivateEndpoint+0x3cc>
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01b      	beq.n	8007630 <USB_DeactivateEndpoint+0x2d4>
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	441a      	add	r2, r3
 800761a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800761c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762c:	b29b      	uxth	r3, r3
 800762e:	8013      	strh	r3, [r2, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800763e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <USB_DeactivateEndpoint+0x324>
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007678:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007696:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	441a      	add	r2, r3
 80076a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	8013      	strh	r3, [r2, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	8013      	strh	r3, [r2, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	847b      	strh	r3, [r7, #34]	; 0x22
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]
 8007728:	2300      	movs	r3, #0
 800772a:	4618      	mov	r0, r3
 800772c:	3734      	adds	r7, #52	; 0x34
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_EPStartXfer>:
 8007736:	b580      	push	{r7, lr}
 8007738:	b0c2      	sub	sp, #264	; 0x108
 800773a:	af00      	add	r7, sp, #0
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007744:	6018      	str	r0, [r3, #0]
 8007746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774e:	6019      	str	r1, [r3, #0]
 8007750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b01      	cmp	r3, #1
 800775e:	f040 86b7 	bne.w	80084d0 <USB_EPStartXfer+0xd9a>
 8007762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	429a      	cmp	r2, r3
 800777c:	d908      	bls.n	8007790 <USB_EPStartXfer+0x5a>
 800777e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800778e:	e007      	b.n	80077a0 <USB_EPStartXfer+0x6a>
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	7b1b      	ldrb	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d13a      	bne.n	8007826 <USB_EPStartXfer+0xf0>
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6959      	ldr	r1, [r3, #20]
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	88da      	ldrh	r2, [r3, #6]
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077d6:	6800      	ldr	r0, [r0, #0]
 80077d8:	f001 fc98 	bl	800910c <USB_WritePMA>
 80077dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4413      	add	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	00da      	lsls	r2, r3, #3
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	4413      	add	r3, r2
 8007812:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	f000 be1f 	b.w	8008464 <USB_EPStartXfer+0xd2e>
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	78db      	ldrb	r3, [r3, #3]
 8007832:	2b02      	cmp	r3, #2
 8007834:	f040 8462 	bne.w	80080fc <USB_EPStartXfer+0x9c6>
 8007838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6a1a      	ldr	r2, [r3, #32]
 8007844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	f240 83df 	bls.w	8008014 <USB_EPStartXfer+0x8de>
 8007856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
 80078b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6a1a      	ldr	r2, [r3, #32]
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c2:	1ad2      	subs	r2, r2, r3
 80078c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	621a      	str	r2, [r3, #32]
 80078d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 81c7 	beq.w	8007c86 <USB_EPStartXfer+0x550>
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	633b      	str	r3, [r7, #48]	; 0x30
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d177      	bne.n	8007a04 <USB_EPStartXfer+0x2ce>
 8007914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800792e:	b29b      	uxth	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	4413      	add	r3, r2
 8007936:	62bb      	str	r3, [r7, #40]	; 0x28
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	00da      	lsls	r2, r3, #3
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	4413      	add	r3, r2
 800794a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800795a:	b29a      	uxth	r2, r3
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007964:	2b3e      	cmp	r3, #62	; 0x3e
 8007966:	d921      	bls.n	80079ac <USB_EPStartXfer+0x276>
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	095b      	lsrs	r3, r3, #5
 800796e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <USB_EPStartXfer+0x252>
 800797e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007982:	3b01      	subs	r3, #1
 8007984:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29a      	uxth	r2, r3
 800798e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007992:	b29b      	uxth	r3, r3
 8007994:	029b      	lsls	r3, r3, #10
 8007996:	b29b      	uxth	r3, r3
 8007998:	4313      	orrs	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e050      	b.n	8007a4e <USB_EPStartXfer+0x318>
 80079ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <USB_EPStartXfer+0x294>
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	e041      	b.n	8007a4e <USB_EPStartXfer+0x318>
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d004      	beq.n	80079ea <USB_EPStartXfer+0x2b4>
 80079e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079e4:	3301      	adds	r3, #1
 80079e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e024      	b.n	8007a4e <USB_EPStartXfer+0x318>
 8007a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d11c      	bne.n	8007a4e <USB_EPStartXfer+0x318>
 8007a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	4413      	add	r3, r2
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	00da      	lsls	r2, r3, #3
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	895b      	ldrh	r3, [r3, #10]
 8007a5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8007a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6959      	ldr	r1, [r3, #20]
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a7c:	6800      	ldr	r0, [r0, #0]
 8007a7e:	f001 fb45 	bl	800910c <USB_WritePMA>
 8007a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695a      	ldr	r2, [r3, #20]
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a92:	441a      	add	r2, r3
 8007a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	615a      	str	r2, [r3, #20]
 8007aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6a1a      	ldr	r2, [r3, #32]
 8007aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d90f      	bls.n	8007adc <USB_EPStartXfer+0x3a6>
 8007abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	1ad2      	subs	r2, r2, r3
 8007ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	621a      	str	r2, [r3, #32]
 8007ada:	e00e      	b.n	8007afa <USB_EPStartXfer+0x3c4>
 8007adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	621a      	str	r2, [r3, #32]
 8007afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d177      	bne.n	8007bfa <USB_EPStartXfer+0x4c4>
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	00da      	lsls	r2, r3, #3
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b5c:	d921      	bls.n	8007ba2 <USB_EPStartXfer+0x46c>
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <USB_EPStartXfer+0x448>
 8007b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	029b      	lsls	r3, r3, #10
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e056      	b.n	8007c50 <USB_EPStartXfer+0x51a>
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <USB_EPStartXfer+0x48a>
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	e047      	b.n	8007c50 <USB_EPStartXfer+0x51a>
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <USB_EPStartXfer+0x4aa>
 8007bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bda:	3301      	adds	r3, #1
 8007bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	029b      	lsls	r3, r3, #10
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	e02a      	b.n	8007c50 <USB_EPStartXfer+0x51a>
 8007bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d122      	bne.n	8007c50 <USB_EPStartXfer+0x51a>
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	623b      	str	r3, [r7, #32]
 8007c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	623b      	str	r3, [r7, #32]
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	00da      	lsls	r2, r3, #3
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	891b      	ldrh	r3, [r3, #8]
 8007c5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8007c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6959      	ldr	r1, [r3, #20]
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c7e:	6800      	ldr	r0, [r0, #0]
 8007c80:	f001 fa44 	bl	800910c <USB_WritePMA>
 8007c84:	e3ee      	b.n	8008464 <USB_EPStartXfer+0xd2e>
 8007c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	785b      	ldrb	r3, [r3, #1]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d177      	bne.n	8007d86 <USB_EPStartXfer+0x650>
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb6:	4413      	add	r3, r2
 8007cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	00da      	lsls	r2, r3, #3
 8007cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce0:	801a      	strh	r2, [r3, #0]
 8007ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ce8:	d921      	bls.n	8007d2e <USB_EPStartXfer+0x5f8>
 8007cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <USB_EPStartXfer+0x5d4>
 8007d00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d04:	3b01      	subs	r3, #1
 8007d06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	029b      	lsls	r3, r3, #10
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	e056      	b.n	8007ddc <USB_EPStartXfer+0x6a6>
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <USB_EPStartXfer+0x616>
 8007d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d48:	801a      	strh	r2, [r3, #0]
 8007d4a:	e047      	b.n	8007ddc <USB_EPStartXfer+0x6a6>
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	085b      	lsrs	r3, r3, #1
 8007d52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <USB_EPStartXfer+0x636>
 8007d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d66:	3301      	adds	r3, #1
 8007d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	029b      	lsls	r3, r3, #10
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d82:	801a      	strh	r2, [r3, #0]
 8007d84:	e02a      	b.n	8007ddc <USB_EPStartXfer+0x6a6>
 8007d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	785b      	ldrb	r3, [r3, #1]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d122      	bne.n	8007ddc <USB_EPStartXfer+0x6a6>
 8007d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	653b      	str	r3, [r7, #80]	; 0x50
 8007da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	461a      	mov	r2, r3
 8007db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db6:	4413      	add	r3, r2
 8007db8:	653b      	str	r3, [r7, #80]	; 0x50
 8007dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	00da      	lsls	r2, r3, #3
 8007dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dca:	4413      	add	r3, r2
 8007dcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	891b      	ldrh	r3, [r3, #8]
 8007de8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8007dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6959      	ldr	r1, [r3, #20]
 8007df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	f001 f97e 	bl	800910c <USB_WritePMA>
 8007e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695a      	ldr	r2, [r3, #20]
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e20:	441a      	add	r2, r3
 8007e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	615a      	str	r2, [r3, #20]
 8007e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a1a      	ldr	r2, [r3, #32]
 8007e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d90f      	bls.n	8007e6a <USB_EPStartXfer+0x734>
 8007e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	621a      	str	r2, [r3, #32]
 8007e68:	e00e      	b.n	8007e88 <USB_EPStartXfer+0x752>
 8007e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2200      	movs	r2, #0
 8007e86:	621a      	str	r2, [r3, #32]
 8007e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	643b      	str	r3, [r7, #64]	; 0x40
 8007e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d177      	bne.n	8007f94 <USB_EPStartXfer+0x85e>
 8007ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	4413      	add	r3, r2
 8007ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	00da      	lsls	r2, r3, #3
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	4413      	add	r3, r2
 8007eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	801a      	strh	r2, [r3, #0]
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ef6:	d921      	bls.n	8007f3c <USB_EPStartXfer+0x806>
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <USB_EPStartXfer+0x7e2>
 8007f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f12:	3b01      	subs	r3, #1
 8007f14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	029b      	lsls	r3, r3, #10
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e050      	b.n	8007fde <USB_EPStartXfer+0x8a8>
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <USB_EPStartXfer+0x824>
 8007f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f56:	801a      	strh	r2, [r3, #0]
 8007f58:	e041      	b.n	8007fde <USB_EPStartXfer+0x8a8>
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <USB_EPStartXfer+0x844>
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	3301      	adds	r3, #1
 8007f76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e024      	b.n	8007fde <USB_EPStartXfer+0x8a8>
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d11c      	bne.n	8007fde <USB_EPStartXfer+0x8a8>
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb8:	4413      	add	r3, r2
 8007fba:	643b      	str	r3, [r7, #64]	; 0x40
 8007fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	00da      	lsls	r2, r3, #3
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	4413      	add	r3, r2
 8007fce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	895b      	ldrh	r3, [r3, #10]
 8007fea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8007fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6959      	ldr	r1, [r3, #20]
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008004:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008008:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800800c:	6800      	ldr	r0, [r0, #0]
 800800e:	f001 f87d 	bl	800910c <USB_WritePMA>
 8008012:	e227      	b.n	8008464 <USB_EPStartXfer+0xd2e>
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800804e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800806c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	b29b      	uxth	r3, r3
 800807e:	8013      	strh	r3, [r2, #0]
 8008080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800808c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809a:	b29b      	uxth	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a0:	4413      	add	r3, r2
 80080a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	00da      	lsls	r2, r3, #3
 80080b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b4:	4413      	add	r3, r2
 80080b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080c4:	801a      	strh	r2, [r3, #0]
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	891b      	ldrh	r3, [r3, #8]
 80080d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6959      	ldr	r1, [r3, #20]
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080f4:	6800      	ldr	r0, [r0, #0]
 80080f6:	f001 f809 	bl	800910c <USB_WritePMA>
 80080fa:	e1b3      	b.n	8008464 <USB_EPStartXfer+0xd2e>
 80080fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6a1a      	ldr	r2, [r3, #32]
 8008108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810c:	1ad2      	subs	r2, r2, r3
 800810e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	621a      	str	r2, [r3, #32]
 800811a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80c6 	beq.w	80082ce <USB_EPStartXfer+0xb98>
 8008142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	673b      	str	r3, [r7, #112]	; 0x70
 800814e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d177      	bne.n	800824e <USB_EPStartXfer+0xb18>
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	66bb      	str	r3, [r7, #104]	; 0x68
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800817e:	4413      	add	r3, r2
 8008180:	66bb      	str	r3, [r7, #104]	; 0x68
 8008182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	00da      	lsls	r2, r3, #3
 8008190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008192:	4413      	add	r3, r2
 8008194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008198:	667b      	str	r3, [r7, #100]	; 0x64
 800819a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a8:	801a      	strh	r2, [r3, #0]
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ae:	2b3e      	cmp	r3, #62	; 0x3e
 80081b0:	d921      	bls.n	80081f6 <USB_EPStartXfer+0xac0>
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <USB_EPStartXfer+0xa9c>
 80081c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081dc:	b29b      	uxth	r3, r3
 80081de:	029b      	lsls	r3, r3, #10
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	e050      	b.n	8008298 <USB_EPStartXfer+0xb62>
 80081f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <USB_EPStartXfer+0xade>
 80081fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820c:	b29a      	uxth	r2, r3
 800820e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e041      	b.n	8008298 <USB_EPStartXfer+0xb62>
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	085b      	lsrs	r3, r3, #1
 800821a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <USB_EPStartXfer+0xafe>
 800822a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800822e:	3301      	adds	r3, #1
 8008230:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29a      	uxth	r2, r3
 800823a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800823e:	b29b      	uxth	r3, r3
 8008240:	029b      	lsls	r3, r3, #10
 8008242:	b29b      	uxth	r3, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	b29a      	uxth	r2, r3
 8008248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	e024      	b.n	8008298 <USB_EPStartXfer+0xb62>
 800824e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d11c      	bne.n	8008298 <USB_EPStartXfer+0xb62>
 800825e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826c:	b29b      	uxth	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008272:	4413      	add	r3, r2
 8008274:	673b      	str	r3, [r7, #112]	; 0x70
 8008276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	00da      	lsls	r2, r3, #3
 8008284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008286:	4413      	add	r3, r2
 8008288:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800828c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800828e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008292:	b29a      	uxth	r2, r3
 8008294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	895b      	ldrh	r3, [r3, #10]
 80082a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80082a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6959      	ldr	r1, [r3, #20]
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082c6:	6800      	ldr	r0, [r0, #0]
 80082c8:	f000 ff20 	bl	800910c <USB_WritePMA>
 80082cc:	e0ca      	b.n	8008464 <USB_EPStartXfer+0xd2e>
 80082ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d177      	bne.n	80083ce <USB_EPStartXfer+0xc98>
 80082de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082fe:	4413      	add	r3, r2
 8008300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	00da      	lsls	r2, r3, #3
 8008310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008312:	4413      	add	r3, r2
 8008314:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008318:	67bb      	str	r3, [r7, #120]	; 0x78
 800831a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008324:	b29a      	uxth	r2, r3
 8008326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008328:	801a      	strh	r2, [r3, #0]
 800832a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800832e:	2b3e      	cmp	r3, #62	; 0x3e
 8008330:	d921      	bls.n	8008376 <USB_EPStartXfer+0xc40>
 8008332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008336:	095b      	lsrs	r3, r3, #5
 8008338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800833c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008340:	f003 031f 	and.w	r3, r3, #31
 8008344:	2b00      	cmp	r3, #0
 8008346:	d104      	bne.n	8008352 <USB_EPStartXfer+0xc1c>
 8008348:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800834c:	3b01      	subs	r3, #1
 800834e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29a      	uxth	r2, r3
 8008358:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800835c:	b29b      	uxth	r3, r3
 800835e:	029b      	lsls	r3, r3, #10
 8008360:	b29b      	uxth	r3, r3
 8008362:	4313      	orrs	r3, r2
 8008364:	b29b      	uxth	r3, r3
 8008366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836e:	b29a      	uxth	r2, r3
 8008370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	e05c      	b.n	8008430 <USB_EPStartXfer+0xcfa>
 8008376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10a      	bne.n	8008394 <USB_EPStartXfer+0xc5e>
 800837e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838c:	b29a      	uxth	r2, r3
 800838e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e04d      	b.n	8008430 <USB_EPStartXfer+0xcfa>
 8008394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800839e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <USB_EPStartXfer+0xc7e>
 80083aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083ae:	3301      	adds	r3, #1
 80083b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083be:	b29b      	uxth	r3, r3
 80083c0:	029b      	lsls	r3, r3, #10
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	4313      	orrs	r3, r2
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	e030      	b.n	8008430 <USB_EPStartXfer+0xcfa>
 80083ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d128      	bne.n	8008430 <USB_EPStartXfer+0xcfa>
 80083de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008402:	4413      	add	r3, r2
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	00da      	lsls	r2, r3, #3
 8008416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800841a:	4413      	add	r3, r2
 800841c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008428:	b29a      	uxth	r2, r3
 800842a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800842e:	801a      	strh	r2, [r3, #0]
 8008430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	891b      	ldrh	r3, [r3, #8]
 800843c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8008440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6959      	ldr	r1, [r3, #20]
 800844c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008450:	b29b      	uxth	r3, r3
 8008452:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008456:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800845a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800845e:	6800      	ldr	r0, [r0, #0]
 8008460:	f000 fe54 	bl	800910c <USB_WritePMA>
 8008464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848a:	817b      	strh	r3, [r7, #10]
 800848c:	897b      	ldrh	r3, [r7, #10]
 800848e:	f083 0310 	eor.w	r3, r3, #16
 8008492:	817b      	strh	r3, [r7, #10]
 8008494:	897b      	ldrh	r3, [r7, #10]
 8008496:	f083 0320 	eor.w	r3, r3, #32
 800849a:	817b      	strh	r3, [r7, #10]
 800849c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	441a      	add	r2, r3
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	8013      	strh	r3, [r2, #0]
 80084cc:	f000 bcde 	b.w	8008e8c <USB_EPStartXfer+0x1756>
 80084d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	7b1b      	ldrb	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 80bb 	bne.w	8008658 <USB_EPStartXfer+0xf22>
 80084e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d917      	bls.n	800852e <USB_EPStartXfer+0xdf8>
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800850e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699a      	ldr	r2, [r3, #24]
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	619a      	str	r2, [r3, #24]
 800852c:	e00e      	b.n	800854c <USB_EPStartXfer+0xe16>
 800852e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800853e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2200      	movs	r2, #0
 800854a:	619a      	str	r2, [r3, #24]
 800854c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008568:	b29b      	uxth	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008570:	4413      	add	r3, r2
 8008572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	00da      	lsls	r2, r3, #3
 8008584:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008588:	4413      	add	r3, r2
 800858a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800858e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800859e:	b29a      	uxth	r2, r3
 80085a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085aa:	2b3e      	cmp	r3, #62	; 0x3e
 80085ac:	d924      	bls.n	80085f8 <USB_EPStartXfer+0xec2>
 80085ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <USB_EPStartXfer+0xe98>
 80085c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085c8:	3b01      	subs	r3, #1
 80085ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085da:	b29b      	uxth	r3, r3
 80085dc:	029b      	lsls	r3, r3, #10
 80085de:	b29b      	uxth	r3, r3
 80085e0:	4313      	orrs	r3, r2
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	f000 bc10 	b.w	8008e18 <USB_EPStartXfer+0x16e2>
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10c      	bne.n	800861a <USB_EPStartXfer+0xee4>
 8008600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008610:	b29a      	uxth	r2, r3
 8008612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	e3fe      	b.n	8008e18 <USB_EPStartXfer+0x16e2>
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <USB_EPStartXfer+0xf04>
 8008630:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008634:	3301      	adds	r3, #1
 8008636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800863a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29a      	uxth	r2, r3
 8008642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008646:	b29b      	uxth	r3, r3
 8008648:	029b      	lsls	r3, r3, #10
 800864a:	b29b      	uxth	r3, r3
 800864c:	4313      	orrs	r3, r2
 800864e:	b29a      	uxth	r2, r3
 8008650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008654:	801a      	strh	r2, [r3, #0]
 8008656:	e3df      	b.n	8008e18 <USB_EPStartXfer+0x16e2>
 8008658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	78db      	ldrb	r3, [r3, #3]
 8008664:	2b02      	cmp	r3, #2
 8008666:	f040 8218 	bne.w	8008a9a <USB_EPStartXfer+0x1364>
 800866a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 809d 	bne.w	80087b6 <USB_EPStartXfer+0x1080>
 800867c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800868a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008698:	b29b      	uxth	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086a0:	4413      	add	r3, r2
 80086a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	00da      	lsls	r2, r3, #3
 80086b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086b8:	4413      	add	r3, r2
 80086ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	2b3e      	cmp	r3, #62	; 0x3e
 80086e4:	d92b      	bls.n	800873e <USB_EPStartXfer+0x1008>
 80086e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <USB_EPStartXfer+0xfe0>
 800870c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008710:	3b01      	subs	r3, #1
 8008712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29a      	uxth	r2, r3
 800871e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008722:	b29b      	uxth	r3, r3
 8008724:	029b      	lsls	r3, r3, #10
 8008726:	b29b      	uxth	r3, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008734:	b29a      	uxth	r2, r3
 8008736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	e070      	b.n	8008820 <USB_EPStartXfer+0x10ea>
 800873e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10c      	bne.n	8008768 <USB_EPStartXfer+0x1032>
 800874e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	b29b      	uxth	r3, r3
 8008756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800875a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800875e:	b29a      	uxth	r2, r3
 8008760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008764:	801a      	strh	r2, [r3, #0]
 8008766:	e05b      	b.n	8008820 <USB_EPStartXfer+0x10ea>
 8008768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800877a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <USB_EPStartXfer+0x1062>
 800878e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008792:	3301      	adds	r3, #1
 8008794:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	029b      	lsls	r3, r3, #10
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	4313      	orrs	r3, r2
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	e034      	b.n	8008820 <USB_EPStartXfer+0x10ea>
 80087b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d12c      	bne.n	8008820 <USB_EPStartXfer+0x10ea>
 80087c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087ea:	4413      	add	r3, r2
 80087ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	00da      	lsls	r2, r3, #3
 80087fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008802:	4413      	add	r3, r2
 8008804:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800880c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	b29a      	uxth	r2, r3
 800881a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800881e:	801a      	strh	r2, [r3, #0]
 8008820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800882e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 809d 	bne.w	800897a <USB_EPStartXfer+0x1244>
 8008840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800884e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885c:	b29b      	uxth	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008864:	4413      	add	r3, r2
 8008866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800886a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	00da      	lsls	r2, r3, #3
 8008878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800887c:	4413      	add	r3, r2
 800887e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	b29b      	uxth	r3, r3
 800888e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008892:	b29a      	uxth	r2, r3
 8008894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008898:	801a      	strh	r2, [r3, #0]
 800889a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	2b3e      	cmp	r3, #62	; 0x3e
 80088a8:	d92b      	bls.n	8008902 <USB_EPStartXfer+0x11cc>
 80088aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	095b      	lsrs	r3, r3, #5
 80088b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f003 031f 	and.w	r3, r3, #31
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <USB_EPStartXfer+0x11a4>
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d4:	3b01      	subs	r3, #1
 80088d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	029b      	lsls	r3, r3, #10
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	4313      	orrs	r3, r2
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	e069      	b.n	80089d6 <USB_EPStartXfer+0x12a0>
 8008902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10c      	bne.n	800892c <USB_EPStartXfer+0x11f6>
 8008912:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008922:	b29a      	uxth	r2, r3
 8008924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	e054      	b.n	80089d6 <USB_EPStartXfer+0x12a0>
 800892c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800893e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <USB_EPStartXfer+0x1226>
 8008952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008956:	3301      	adds	r3, #1
 8008958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800895c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29a      	uxth	r2, r3
 8008964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008968:	b29b      	uxth	r3, r3
 800896a:	029b      	lsls	r3, r3, #10
 800896c:	b29b      	uxth	r3, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	b29a      	uxth	r2, r3
 8008972:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	e02d      	b.n	80089d6 <USB_EPStartXfer+0x12a0>
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	785b      	ldrb	r3, [r3, #1]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d125      	bne.n	80089d6 <USB_EPStartXfer+0x12a0>
 800898a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008998:	b29b      	uxth	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089a0:	4413      	add	r3, r2
 80089a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	00da      	lsls	r2, r3, #3
 80089b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089b8:	4413      	add	r3, r2
 80089ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 8218 	beq.w	8008e18 <USB_EPStartXfer+0x16e2>
 80089e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8008a08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d005      	beq.n	8008a20 <USB_EPStartXfer+0x12ea>
 8008a14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10d      	bne.n	8008a3c <USB_EPStartXfer+0x1306>
 8008a20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f040 81f5 	bne.w	8008e18 <USB_EPStartXfer+0x16e2>
 8008a2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f040 81ee 	bne.w	8008e18 <USB_EPStartXfer+0x16e2>
 8008a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a62:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	441a      	add	r2, r3
 8008a80:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	8013      	strh	r3, [r2, #0]
 8008a98:	e1be      	b.n	8008e18 <USB_EPStartXfer+0x16e2>
 8008a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	78db      	ldrb	r3, [r3, #3]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	f040 81b4 	bne.w	8008e14 <USB_EPStartXfer+0x16de>
 8008aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699a      	ldr	r2, [r3, #24]
 8008ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d917      	bls.n	8008af8 <USB_EPStartXfer+0x13c2>
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae8:	1ad2      	subs	r2, r2, r3
 8008aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	619a      	str	r2, [r3, #24]
 8008af6:	e00e      	b.n	8008b16 <USB_EPStartXfer+0x13e0>
 8008af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2200      	movs	r2, #0
 8008b14:	619a      	str	r2, [r3, #24]
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f040 8085 	bne.w	8008c32 <USB_EPStartXfer+0x14fc>
 8008b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	461a      	mov	r2, r3
 8008b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	00da      	lsls	r2, r3, #3
 8008b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b64:	4413      	add	r3, r2
 8008b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b80:	801a      	strh	r2, [r3, #0]
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b86:	2b3e      	cmp	r3, #62	; 0x3e
 8008b88:	d923      	bls.n	8008bd2 <USB_EPStartXfer+0x149c>
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <USB_EPStartXfer+0x1474>
 8008ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	029b      	lsls	r3, r3, #10
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	e060      	b.n	8008c94 <USB_EPStartXfer+0x155e>
 8008bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10c      	bne.n	8008bf4 <USB_EPStartXfer+0x14be>
 8008bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e04f      	b.n	8008c94 <USB_EPStartXfer+0x155e>
 8008bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf8:	085b      	lsrs	r3, r3, #1
 8008bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d004      	beq.n	8008c14 <USB_EPStartXfer+0x14de>
 8008c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c0e:	3301      	adds	r3, #1
 8008c10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	029b      	lsls	r3, r3, #10
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	4313      	orrs	r3, r2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	e030      	b.n	8008c94 <USB_EPStartXfer+0x155e>
 8008c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d128      	bne.n	8008c94 <USB_EPStartXfer+0x155e>
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c66:	4413      	add	r3, r2
 8008c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	00da      	lsls	r2, r3, #3
 8008c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c7e:	4413      	add	r3, r2
 8008c80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f040 8085 	bne.w	8008dbe <USB_EPStartXfer+0x1688>
 8008cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cd8:	4413      	add	r3, r2
 8008cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	00da      	lsls	r2, r3, #3
 8008cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d0c:	801a      	strh	r2, [r3, #0]
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d12:	2b3e      	cmp	r3, #62	; 0x3e
 8008d14:	d923      	bls.n	8008d5e <USB_EPStartXfer+0x1628>
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d24:	f003 031f 	and.w	r3, r3, #31
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d104      	bne.n	8008d36 <USB_EPStartXfer+0x1600>
 8008d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d30:	3b01      	subs	r3, #1
 8008d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	029b      	lsls	r3, r3, #10
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d5a:	801a      	strh	r2, [r3, #0]
 8008d5c:	e05c      	b.n	8008e18 <USB_EPStartXfer+0x16e2>
 8008d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10c      	bne.n	8008d80 <USB_EPStartXfer+0x164a>
 8008d66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d7c:	801a      	strh	r2, [r3, #0]
 8008d7e:	e04b      	b.n	8008e18 <USB_EPStartXfer+0x16e2>
 8008d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <USB_EPStartXfer+0x166a>
 8008d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	029b      	lsls	r3, r3, #10
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dba:	801a      	strh	r2, [r3, #0]
 8008dbc:	e02c      	b.n	8008e18 <USB_EPStartXfer+0x16e2>
 8008dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d124      	bne.n	8008e18 <USB_EPStartXfer+0x16e2>
 8008dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008de4:	4413      	add	r3, r2
 8008de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	00da      	lsls	r2, r3, #3
 8008df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e10:	801a      	strh	r2, [r3, #0]
 8008e12:	e001      	b.n	8008e18 <USB_EPStartXfer+0x16e2>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e03a      	b.n	8008e8e <USB_EPStartXfer+0x1758>
 8008e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e56:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	441a      	add	r2, r3
 8008e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	8013      	strh	r3, [r2, #0]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USB_EPSetStall>:
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d020      	beq.n	8008eec <USB_EPSetStall+0x54>
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec0:	81bb      	strh	r3, [r7, #12]
 8008ec2:	89bb      	ldrh	r3, [r7, #12]
 8008ec4:	f083 0310 	eor.w	r3, r3, #16
 8008ec8:	81bb      	strh	r3, [r7, #12]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	441a      	add	r2, r3
 8008ed4:	89bb      	ldrh	r3, [r7, #12]
 8008ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	8013      	strh	r3, [r2, #0]
 8008eea:	e01f      	b.n	8008f2c <USB_EPSetStall+0x94>
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f02:	81fb      	strh	r3, [r7, #14]
 8008f04:	89fb      	ldrh	r3, [r7, #14]
 8008f06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f0a:	81fb      	strh	r3, [r7, #14]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	441a      	add	r2, r3
 8008f16:	89fb      	ldrh	r3, [r7, #14]
 8008f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	8013      	strh	r3, [r2, #0]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USB_EPClearStall>:
 8008f3a:	b480      	push	{r7}
 8008f3c:	b087      	sub	sp, #28
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	6039      	str	r1, [r7, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	7b1b      	ldrb	r3, [r3, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f040 809d 	bne.w	8009088 <USB_EPClearStall+0x14e>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	785b      	ldrb	r3, [r3, #1]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d04c      	beq.n	8008ff0 <USB_EPClearStall+0xb6>
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	823b      	strh	r3, [r7, #16]
 8008f64:	8a3b      	ldrh	r3, [r7, #16]
 8008f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01b      	beq.n	8008fa6 <USB_EPClearStall+0x6c>
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f84:	81fb      	strh	r3, [r7, #14]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	441a      	add	r2, r3
 8008f90:	89fb      	ldrh	r3, [r7, #14]
 8008f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	8013      	strh	r3, [r2, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	78db      	ldrb	r3, [r3, #3]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d06c      	beq.n	8009088 <USB_EPClearStall+0x14e>
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc4:	81bb      	strh	r3, [r7, #12]
 8008fc6:	89bb      	ldrh	r3, [r7, #12]
 8008fc8:	f083 0320 	eor.w	r3, r3, #32
 8008fcc:	81bb      	strh	r3, [r7, #12]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	441a      	add	r2, r3
 8008fd8:	89bb      	ldrh	r3, [r7, #12]
 8008fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	8013      	strh	r3, [r2, #0]
 8008fee:	e04b      	b.n	8009088 <USB_EPClearStall+0x14e>
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	82fb      	strh	r3, [r7, #22]
 8008ffe:	8afb      	ldrh	r3, [r7, #22]
 8009000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01b      	beq.n	8009040 <USB_EPClearStall+0x106>
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901e:	82bb      	strh	r3, [r7, #20]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	441a      	add	r2, r3
 800902a:	8abb      	ldrh	r3, [r7, #20]
 800902c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903c:	b29b      	uxth	r3, r3
 800903e:	8013      	strh	r3, [r2, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	b29b      	uxth	r3, r3
 800904e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	827b      	strh	r3, [r7, #18]
 8009058:	8a7b      	ldrh	r3, [r7, #18]
 800905a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800905e:	827b      	strh	r3, [r7, #18]
 8009060:	8a7b      	ldrh	r3, [r7, #18]
 8009062:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009066:	827b      	strh	r3, [r7, #18]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	441a      	add	r2, r3
 8009072:	8a7b      	ldrh	r3, [r7, #18]
 8009074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800907c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009084:	b29b      	uxth	r3, r3
 8009086:	8013      	strh	r3, [r2, #0]
 8009088:	2300      	movs	r3, #0
 800908a:	4618      	mov	r0, r3
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USB_SetDevAddress>:
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <USB_SetDevAddress+0x1a>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2280      	movs	r2, #128	; 0x80
 80090ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80090b0:	2300      	movs	r3, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USB_DevConnect>:
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80090de:	2300      	movs	r3, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USB_ReadInterrupts>:
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	60fb      	str	r3, [r7, #12]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USB_WritePMA>:
 800910c:	b480      	push	{r7}
 800910e:	b08b      	sub	sp, #44	; 0x2c
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4611      	mov	r1, r2
 8009118:	461a      	mov	r2, r3
 800911a:	460b      	mov	r3, r1
 800911c:	80fb      	strh	r3, [r7, #6]
 800911e:	4613      	mov	r3, r2
 8009120:	80bb      	strh	r3, [r7, #4]
 8009122:	88bb      	ldrh	r3, [r7, #4]
 8009124:	3301      	adds	r3, #1
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	61bb      	str	r3, [r7, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	61fb      	str	r3, [r7, #28]
 8009132:	88fa      	ldrh	r2, [r7, #6]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800913c:	623b      	str	r3, [r7, #32]
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
 8009142:	e01b      	b.n	800917c <USB_WritePMA+0x70>
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	827b      	strh	r3, [r7, #18]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	3301      	adds	r3, #1
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	b21a      	sxth	r2, r3
 8009154:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009158:	4313      	orrs	r3, r2
 800915a:	b21b      	sxth	r3, r3
 800915c:	827b      	strh	r3, [r7, #18]
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	8a7a      	ldrh	r2, [r7, #18]
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	3302      	adds	r3, #2
 8009168:	623b      	str	r3, [r7, #32]
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	3301      	adds	r3, #1
 800916e:	61fb      	str	r3, [r7, #28]
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3301      	adds	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	3b01      	subs	r3, #1
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e0      	bne.n	8009144 <USB_WritePMA+0x38>
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	372c      	adds	r7, #44	; 0x2c
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USB_ReadPMA>:
 8009190:	b480      	push	{r7}
 8009192:	b08b      	sub	sp, #44	; 0x2c
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4611      	mov	r1, r2
 800919c:	461a      	mov	r2, r3
 800919e:	460b      	mov	r3, r1
 80091a0:	80fb      	strh	r3, [r7, #6]
 80091a2:	4613      	mov	r3, r2
 80091a4:	80bb      	strh	r3, [r7, #4]
 80091a6:	88bb      	ldrh	r3, [r7, #4]
 80091a8:	085b      	lsrs	r3, r3, #1
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	61fb      	str	r3, [r7, #28]
 80091b6:	88fa      	ldrh	r2, [r7, #6]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c0:	623b      	str	r3, [r7, #32]
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
 80091c6:	e018      	b.n	80091fa <USB_ReadPMA+0x6a>
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	3302      	adds	r3, #2
 80091d4:	623b      	str	r3, [r7, #32]
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	3301      	adds	r3, #1
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	3301      	adds	r3, #1
 80091f2:	61fb      	str	r3, [r7, #28]
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	3b01      	subs	r3, #1
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e3      	bne.n	80091c8 <USB_ReadPMA+0x38>
 8009200:	88bb      	ldrh	r3, [r7, #4]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	b29b      	uxth	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d007      	beq.n	800921c <USB_ReadPMA+0x8c>
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	613b      	str	r3, [r7, #16]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	b2da      	uxtb	r2, r3
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	701a      	strb	r2, [r3, #0]
 800921c:	bf00      	nop
 800921e:	372c      	adds	r7, #44	; 0x2c
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009234:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009238:	f002 fc6e 	bl	800bb18 <USBD_static_malloc>
 800923c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	32b0      	adds	r2, #176	; 0xb0
 800924e:	2100      	movs	r1, #0
 8009250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009254:	2302      	movs	r3, #2
 8009256:	e0d4      	b.n	8009402 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009258:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800925c:	2100      	movs	r1, #0
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f002 fcce 	bl	800bc00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	32b0      	adds	r2, #176	; 0xb0
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32b0      	adds	r2, #176	; 0xb0
 800927e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	7c1b      	ldrb	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d138      	bne.n	8009302 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009290:	4b5e      	ldr	r3, [pc, #376]	; (800940c <USBD_CDC_Init+0x1e4>)
 8009292:	7819      	ldrb	r1, [r3, #0]
 8009294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009298:	2202      	movs	r2, #2
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f002 fae1 	bl	800b862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092a0:	4b5a      	ldr	r3, [pc, #360]	; (800940c <USBD_CDC_Init+0x1e4>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 020f 	and.w	r2, r3, #15
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	3324      	adds	r3, #36	; 0x24
 80092b6:	2201      	movs	r2, #1
 80092b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092ba:	4b55      	ldr	r3, [pc, #340]	; (8009410 <USBD_CDC_Init+0x1e8>)
 80092bc:	7819      	ldrb	r1, [r3, #0]
 80092be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092c2:	2202      	movs	r2, #2
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f002 facc 	bl	800b862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092ca:	4b51      	ldr	r3, [pc, #324]	; (8009410 <USBD_CDC_Init+0x1e8>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 020f 	and.w	r2, r3, #15
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092e2:	2201      	movs	r2, #1
 80092e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092e6:	4b4b      	ldr	r3, [pc, #300]	; (8009414 <USBD_CDC_Init+0x1ec>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	3326      	adds	r3, #38	; 0x26
 80092fc:	2210      	movs	r2, #16
 80092fe:	801a      	strh	r2, [r3, #0]
 8009300:	e035      	b.n	800936e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009302:	4b42      	ldr	r3, [pc, #264]	; (800940c <USBD_CDC_Init+0x1e4>)
 8009304:	7819      	ldrb	r1, [r3, #0]
 8009306:	2340      	movs	r3, #64	; 0x40
 8009308:	2202      	movs	r2, #2
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f002 faa9 	bl	800b862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009310:	4b3e      	ldr	r3, [pc, #248]	; (800940c <USBD_CDC_Init+0x1e4>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	f003 020f 	and.w	r2, r3, #15
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	3324      	adds	r3, #36	; 0x24
 8009326:	2201      	movs	r2, #1
 8009328:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800932a:	4b39      	ldr	r3, [pc, #228]	; (8009410 <USBD_CDC_Init+0x1e8>)
 800932c:	7819      	ldrb	r1, [r3, #0]
 800932e:	2340      	movs	r3, #64	; 0x40
 8009330:	2202      	movs	r2, #2
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f002 fa95 	bl	800b862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009338:	4b35      	ldr	r3, [pc, #212]	; (8009410 <USBD_CDC_Init+0x1e8>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f003 020f 	and.w	r2, r3, #15
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	440b      	add	r3, r1
 800934c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009350:	2201      	movs	r2, #1
 8009352:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009354:	4b2f      	ldr	r3, [pc, #188]	; (8009414 <USBD_CDC_Init+0x1ec>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 020f 	and.w	r2, r3, #15
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	3326      	adds	r3, #38	; 0x26
 800936a:	2210      	movs	r2, #16
 800936c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800936e:	4b29      	ldr	r3, [pc, #164]	; (8009414 <USBD_CDC_Init+0x1ec>)
 8009370:	7819      	ldrb	r1, [r3, #0]
 8009372:	2308      	movs	r3, #8
 8009374:	2203      	movs	r2, #3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f002 fa73 	bl	800b862 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800937c:	4b25      	ldr	r3, [pc, #148]	; (8009414 <USBD_CDC_Init+0x1ec>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	f003 020f 	and.w	r2, r3, #15
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	4613      	mov	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	440b      	add	r3, r1
 8009390:	3324      	adds	r3, #36	; 0x24
 8009392:	2201      	movs	r2, #1
 8009394:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	33b0      	adds	r3, #176	; 0xb0
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093cc:	2302      	movs	r3, #2
 80093ce:	e018      	b.n	8009402 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7c1b      	ldrb	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093d8:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <USBD_CDC_Init+0x1e8>)
 80093da:	7819      	ldrb	r1, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f002 fb2b 	bl	800ba42 <USBD_LL_PrepareReceive>
 80093ec:	e008      	b.n	8009400 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093ee:	4b08      	ldr	r3, [pc, #32]	; (8009410 <USBD_CDC_Init+0x1e8>)
 80093f0:	7819      	ldrb	r1, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f002 fb21 	bl	800ba42 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	200000db 	.word	0x200000db
 8009410:	200000dc 	.word	0x200000dc
 8009414:	200000dd 	.word	0x200000dd

08009418 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009424:	4b3a      	ldr	r3, [pc, #232]	; (8009510 <USBD_CDC_DeInit+0xf8>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f002 fa3f 	bl	800b8ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009430:	4b37      	ldr	r3, [pc, #220]	; (8009510 <USBD_CDC_DeInit+0xf8>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	3324      	adds	r3, #36	; 0x24
 8009446:	2200      	movs	r2, #0
 8009448:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800944a:	4b32      	ldr	r3, [pc, #200]	; (8009514 <USBD_CDC_DeInit+0xfc>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f002 fa2c 	bl	800b8ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009456:	4b2f      	ldr	r3, [pc, #188]	; (8009514 <USBD_CDC_DeInit+0xfc>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	f003 020f 	and.w	r2, r3, #15
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800946e:	2200      	movs	r2, #0
 8009470:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009472:	4b29      	ldr	r3, [pc, #164]	; (8009518 <USBD_CDC_DeInit+0x100>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f002 fa18 	bl	800b8ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800947e:	4b26      	ldr	r3, [pc, #152]	; (8009518 <USBD_CDC_DeInit+0x100>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	f003 020f 	and.w	r2, r3, #15
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	3324      	adds	r3, #36	; 0x24
 8009494:	2200      	movs	r2, #0
 8009496:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009498:	4b1f      	ldr	r3, [pc, #124]	; (8009518 <USBD_CDC_DeInit+0x100>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 020f 	and.w	r2, r3, #15
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	3326      	adds	r3, #38	; 0x26
 80094ae:	2200      	movs	r2, #0
 80094b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	32b0      	adds	r2, #176	; 0xb0
 80094bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d01f      	beq.n	8009504 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	33b0      	adds	r3, #176	; 0xb0
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	32b0      	adds	r2, #176	; 0xb0
 80094e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f002 fb24 	bl	800bb34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	32b0      	adds	r2, #176	; 0xb0
 80094f6:	2100      	movs	r1, #0
 80094f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	200000db 	.word	0x200000db
 8009514:	200000dc 	.word	0x200000dc
 8009518:	200000dd 	.word	0x200000dd

0800951c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	32b0      	adds	r2, #176	; 0xb0
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009548:	2303      	movs	r3, #3
 800954a:	e0bf      	b.n	80096cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009554:	2b00      	cmp	r3, #0
 8009556:	d050      	beq.n	80095fa <USBD_CDC_Setup+0xde>
 8009558:	2b20      	cmp	r3, #32
 800955a:	f040 80af 	bne.w	80096bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	88db      	ldrh	r3, [r3, #6]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d03a      	beq.n	80095dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	b25b      	sxtb	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	da1b      	bge.n	80095a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	33b0      	adds	r3, #176	; 0xb0
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009586:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	88d2      	ldrh	r2, [r2, #6]
 800958c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	88db      	ldrh	r3, [r3, #6]
 8009592:	2b07      	cmp	r3, #7
 8009594:	bf28      	it	cs
 8009596:	2307      	movcs	r3, #7
 8009598:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	89fa      	ldrh	r2, [r7, #14]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fd21 	bl	800afe8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80095a6:	e090      	b.n	80096ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	785a      	ldrb	r2, [r3, #1]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	88db      	ldrh	r3, [r3, #6]
 80095b6:	2b3f      	cmp	r3, #63	; 0x3f
 80095b8:	d803      	bhi.n	80095c2 <USBD_CDC_Setup+0xa6>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	88db      	ldrh	r3, [r3, #6]
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	e000      	b.n	80095c4 <USBD_CDC_Setup+0xa8>
 80095c2:	2240      	movs	r2, #64	; 0x40
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095ca:	6939      	ldr	r1, [r7, #16]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80095d2:	461a      	mov	r2, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fd33 	bl	800b040 <USBD_CtlPrepareRx>
      break;
 80095da:	e076      	b.n	80096ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	33b0      	adds	r3, #176	; 0xb0
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	7850      	ldrb	r0, [r2, #1]
 80095f2:	2200      	movs	r2, #0
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	4798      	blx	r3
      break;
 80095f8:	e067      	b.n	80096ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b0b      	cmp	r3, #11
 8009600:	d851      	bhi.n	80096a6 <USBD_CDC_Setup+0x18a>
 8009602:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <USBD_CDC_Setup+0xec>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009639 	.word	0x08009639
 800960c:	080096b5 	.word	0x080096b5
 8009610:	080096a7 	.word	0x080096a7
 8009614:	080096a7 	.word	0x080096a7
 8009618:	080096a7 	.word	0x080096a7
 800961c:	080096a7 	.word	0x080096a7
 8009620:	080096a7 	.word	0x080096a7
 8009624:	080096a7 	.word	0x080096a7
 8009628:	080096a7 	.word	0x080096a7
 800962c:	080096a7 	.word	0x080096a7
 8009630:	08009663 	.word	0x08009663
 8009634:	0800968d 	.word	0x0800968d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b03      	cmp	r3, #3
 8009642:	d107      	bne.n	8009654 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009644:	f107 030a 	add.w	r3, r7, #10
 8009648:	2202      	movs	r2, #2
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 fccb 	bl	800afe8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009652:	e032      	b.n	80096ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 fc55 	bl	800af06 <USBD_CtlError>
            ret = USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	75fb      	strb	r3, [r7, #23]
          break;
 8009660:	e02b      	b.n	80096ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b03      	cmp	r3, #3
 800966c:	d107      	bne.n	800967e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800966e:	f107 030d 	add.w	r3, r7, #13
 8009672:	2201      	movs	r2, #1
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f001 fcb6 	bl	800afe8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800967c:	e01d      	b.n	80096ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 fc40 	bl	800af06 <USBD_CtlError>
            ret = USBD_FAIL;
 8009686:	2303      	movs	r3, #3
 8009688:	75fb      	strb	r3, [r7, #23]
          break;
 800968a:	e016      	b.n	80096ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b03      	cmp	r3, #3
 8009696:	d00f      	beq.n	80096b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 fc33 	bl	800af06 <USBD_CtlError>
            ret = USBD_FAIL;
 80096a0:	2303      	movs	r3, #3
 80096a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096a4:	e008      	b.n	80096b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 fc2c 	bl	800af06 <USBD_CtlError>
          ret = USBD_FAIL;
 80096ae:	2303      	movs	r3, #3
 80096b0:	75fb      	strb	r3, [r7, #23]
          break;
 80096b2:	e002      	b.n	80096ba <USBD_CDC_Setup+0x19e>
          break;
 80096b4:	bf00      	nop
 80096b6:	e008      	b.n	80096ca <USBD_CDC_Setup+0x1ae>
          break;
 80096b8:	bf00      	nop
      }
      break;
 80096ba:	e006      	b.n	80096ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 fc21 	bl	800af06 <USBD_CtlError>
      ret = USBD_FAIL;
 80096c4:	2303      	movs	r3, #3
 80096c6:	75fb      	strb	r3, [r7, #23]
      break;
 80096c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	32b0      	adds	r2, #176	; 0xb0
 80096f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e065      	b.n	80097ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	32b0      	adds	r2, #176	; 0xb0
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3318      	adds	r3, #24
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d02f      	beq.n	8009788 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	f003 020f 	and.w	r2, r3, #15
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	4613      	mov	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	440b      	add	r3, r1
 800973a:	3318      	adds	r3, #24
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	f003 010f 	and.w	r1, r3, #15
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	460b      	mov	r3, r1
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	440b      	add	r3, r1
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	4403      	add	r3, r0
 8009750:	3338      	adds	r3, #56	; 0x38
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	fbb2 f1f3 	udiv	r1, r2, r3
 8009758:	fb01 f303 	mul.w	r3, r1, r3
 800975c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800975e:	2b00      	cmp	r3, #0
 8009760:	d112      	bne.n	8009788 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009762:	78fb      	ldrb	r3, [r7, #3]
 8009764:	f003 020f 	and.w	r2, r3, #15
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	3318      	adds	r3, #24
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800977a:	78f9      	ldrb	r1, [r7, #3]
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f002 f93d 	bl	800ba00 <USBD_LL_Transmit>
 8009786:	e01f      	b.n	80097c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	33b0      	adds	r3, #176	; 0xb0
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d010      	beq.n	80097c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	33b0      	adds	r3, #176	; 0xb0
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80097c4:	78fa      	ldrb	r2, [r7, #3]
 80097c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	32b0      	adds	r2, #176	; 0xb0
 80097e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	32b0      	adds	r2, #176	; 0xb0
 80097f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	e01a      	b.n	800983a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009804:	78fb      	ldrb	r3, [r7, #3]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f002 f93b 	bl	800ba84 <USBD_LL_GetRxDataSize>
 800980e:	4602      	mov	r2, r0
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	33b0      	adds	r3, #176	; 0xb0
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009834:	4611      	mov	r1, r2
 8009836:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	32b0      	adds	r2, #176	; 0xb0
 8009854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009858:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009860:	2303      	movs	r3, #3
 8009862:	e025      	b.n	80098b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	33b0      	adds	r3, #176	; 0xb0
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01a      	beq.n	80098ae <USBD_CDC_EP0_RxReady+0x6c>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800987e:	2bff      	cmp	r3, #255	; 0xff
 8009880:	d015      	beq.n	80098ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	33b0      	adds	r3, #176	; 0xb0
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800989a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098a2:	b292      	uxth	r2, r2
 80098a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	22ff      	movs	r2, #255	; 0xff
 80098aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098c0:	2182      	movs	r1, #130	; 0x82
 80098c2:	4818      	ldr	r0, [pc, #96]	; (8009924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098c4:	f000 fcbd 	bl	800a242 <USBD_GetEpDesc>
 80098c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098ca:	2101      	movs	r1, #1
 80098cc:	4815      	ldr	r0, [pc, #84]	; (8009924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098ce:	f000 fcb8 	bl	800a242 <USBD_GetEpDesc>
 80098d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098d4:	2181      	movs	r1, #129	; 0x81
 80098d6:	4813      	ldr	r0, [pc, #76]	; (8009924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098d8:	f000 fcb3 	bl	800a242 <USBD_GetEpDesc>
 80098dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2210      	movs	r2, #16
 80098e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098f8:	711a      	strb	r2, [r3, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d006      	beq.n	8009912 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800990c:	711a      	strb	r2, [r3, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2243      	movs	r2, #67	; 0x43
 8009916:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009918:	4b02      	ldr	r3, [pc, #8]	; (8009924 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000098 	.word	0x20000098

08009928 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009930:	2182      	movs	r1, #130	; 0x82
 8009932:	4818      	ldr	r0, [pc, #96]	; (8009994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009934:	f000 fc85 	bl	800a242 <USBD_GetEpDesc>
 8009938:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800993a:	2101      	movs	r1, #1
 800993c:	4815      	ldr	r0, [pc, #84]	; (8009994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800993e:	f000 fc80 	bl	800a242 <USBD_GetEpDesc>
 8009942:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009944:	2181      	movs	r1, #129	; 0x81
 8009946:	4813      	ldr	r0, [pc, #76]	; (8009994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009948:	f000 fc7b 	bl	800a242 <USBD_GetEpDesc>
 800994c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2210      	movs	r2, #16
 8009958:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d006      	beq.n	800996e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2200      	movs	r2, #0
 8009964:	711a      	strb	r2, [r3, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f042 0202 	orr.w	r2, r2, #2
 800996c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	711a      	strb	r2, [r3, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f042 0202 	orr.w	r2, r2, #2
 8009980:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2243      	movs	r2, #67	; 0x43
 8009986:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000098 	.word	0x20000098

08009998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099a0:	2182      	movs	r1, #130	; 0x82
 80099a2:	4818      	ldr	r0, [pc, #96]	; (8009a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099a4:	f000 fc4d 	bl	800a242 <USBD_GetEpDesc>
 80099a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099aa:	2101      	movs	r1, #1
 80099ac:	4815      	ldr	r0, [pc, #84]	; (8009a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099ae:	f000 fc48 	bl	800a242 <USBD_GetEpDesc>
 80099b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099b4:	2181      	movs	r1, #129	; 0x81
 80099b6:	4813      	ldr	r0, [pc, #76]	; (8009a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099b8:	f000 fc43 	bl	800a242 <USBD_GetEpDesc>
 80099bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2210      	movs	r2, #16
 80099c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d006      	beq.n	80099de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099d8:	711a      	strb	r2, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d006      	beq.n	80099f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099ec:	711a      	strb	r2, [r3, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2243      	movs	r2, #67	; 0x43
 80099f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099f8:	4b02      	ldr	r3, [pc, #8]	; (8009a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000098 	.word	0x20000098

08009a08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	220a      	movs	r2, #10
 8009a14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a16:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	20000054 	.word	0x20000054

08009a28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e009      	b.n	8009a50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	33b0      	adds	r3, #176	; 0xb0
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	32b0      	adds	r2, #176	; 0xb0
 8009a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a76:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e008      	b.n	8009a94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	371c      	adds	r7, #28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	32b0      	adds	r2, #176	; 0xb0
 8009ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e004      	b.n	8009ace <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
	...

08009adc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32b0      	adds	r2, #176	; 0xb0
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009af4:	2301      	movs	r3, #1
 8009af6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e025      	b.n	8009b4e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d11f      	bne.n	8009b4c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009b14:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <USBD_CDC_TransmitPacket+0x7c>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	f003 020f 	and.w	r2, r3, #15
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4613      	mov	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4403      	add	r3, r0
 8009b2e:	3318      	adds	r3, #24
 8009b30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009b32:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <USBD_CDC_TransmitPacket+0x7c>)
 8009b34:	7819      	ldrb	r1, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 ff5c 	bl	800ba00 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	200000db 	.word	0x200000db

08009b5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	32b0      	adds	r2, #176	; 0xb0
 8009b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	32b0      	adds	r2, #176	; 0xb0
 8009b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e018      	b.n	8009bbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	7c1b      	ldrb	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <USBD_CDC_ReceivePacket+0x68>)
 8009b94:	7819      	ldrb	r1, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 ff4e 	bl	800ba42 <USBD_LL_PrepareReceive>
 8009ba6:	e008      	b.n	8009bba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ba8:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <USBD_CDC_ReceivePacket+0x68>)
 8009baa:	7819      	ldrb	r1, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bb2:	2340      	movs	r3, #64	; 0x40
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 ff44 	bl	800ba42 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	200000dc 	.word	0x200000dc

08009bc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e01f      	b.n	8009c20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	79fa      	ldrb	r2, [r7, #7]
 8009c12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f001 fda7 	bl	800b768 <USBD_LL_Init>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e025      	b.n	8009c8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	32ae      	adds	r2, #174	; 0xae
 8009c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00f      	beq.n	8009c7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	32ae      	adds	r2, #174	; 0xae
 8009c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	f107 020e 	add.w	r2, r7, #14
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	4602      	mov	r2, r0
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 fdc5 	bl	800b82c <USBD_LL_Start>
 8009ca2:	4603      	mov	r3, r0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d009      	beq.n	8009cf0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	78fa      	ldrb	r2, [r7, #3]
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	4798      	blx	r3
 8009cec:	4603      	mov	r3, r0
 8009cee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	78fa      	ldrb	r2, [r7, #3]
 8009d14:	4611      	mov	r1, r2
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	4798      	blx	r3
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 f8a6 	bl	800ae92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d54:	461a      	mov	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d62:	f003 031f 	and.w	r3, r3, #31
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d01a      	beq.n	8009da0 <USBD_LL_SetupStage+0x72>
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d822      	bhi.n	8009db4 <USBD_LL_SetupStage+0x86>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <USBD_LL_SetupStage+0x4a>
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d00a      	beq.n	8009d8c <USBD_LL_SetupStage+0x5e>
 8009d76:	e01d      	b.n	8009db4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fad3 	bl	800a32c <USBD_StdDevReq>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73fb      	strb	r3, [r7, #15]
      break;
 8009d8a:	e020      	b.n	8009dce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fb3b 	bl	800a410 <USBD_StdItfReq>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9e:	e016      	b.n	8009dce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fb9d 	bl	800a4e8 <USBD_StdEPReq>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
      break;
 8009db2:	e00c      	b.n	8009dce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009dba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 fd92 	bl	800b8ec <USBD_LL_StallEP>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
      break;
 8009dcc:	bf00      	nop
  }

  return ret;
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	460b      	mov	r3, r1
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009dea:	7afb      	ldrb	r3, [r7, #11]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d16e      	bne.n	8009ece <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009df6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	f040 8098 	bne.w	8009f34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d913      	bls.n	8009e38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	1ad2      	subs	r2, r2, r3
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bf28      	it	cs
 8009e2a:	4613      	movcs	r3, r2
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	6879      	ldr	r1, [r7, #4]
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f001 f922 	bl	800b07a <USBD_CtlContinueRx>
 8009e36:	e07d      	b.n	8009f34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e3e:	f003 031f 	and.w	r3, r3, #31
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d014      	beq.n	8009e70 <USBD_LL_DataOutStage+0x98>
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d81d      	bhi.n	8009e86 <USBD_LL_DataOutStage+0xae>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <USBD_LL_DataOutStage+0x7c>
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d003      	beq.n	8009e5a <USBD_LL_DataOutStage+0x82>
 8009e52:	e018      	b.n	8009e86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	75bb      	strb	r3, [r7, #22]
            break;
 8009e58:	e018      	b.n	8009e8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	4619      	mov	r1, r3
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f9d2 	bl	800a20e <USBD_CoreFindIF>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	75bb      	strb	r3, [r7, #22]
            break;
 8009e6e:	e00d      	b.n	8009e8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f9d4 	bl	800a228 <USBD_CoreFindEP>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75bb      	strb	r3, [r7, #22]
            break;
 8009e84:	e002      	b.n	8009e8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75bb      	strb	r3, [r7, #22]
            break;
 8009e8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e8c:	7dbb      	ldrb	r3, [r7, #22]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d119      	bne.n	8009ec6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d113      	bne.n	8009ec6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e9e:	7dba      	ldrb	r2, [r7, #22]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	32ae      	adds	r2, #174	; 0xae
 8009ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009eae:	7dba      	ldrb	r2, [r7, #22]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009eb6:	7dba      	ldrb	r2, [r7, #22]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	32ae      	adds	r2, #174	; 0xae
 8009ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f001 f8e8 	bl	800b09c <USBD_CtlSendStatus>
 8009ecc:	e032      	b.n	8009f34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009ece:	7afb      	ldrb	r3, [r7, #11]
 8009ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 f9a5 	bl	800a228 <USBD_CoreFindEP>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ee2:	7dbb      	ldrb	r3, [r7, #22]
 8009ee4:	2bff      	cmp	r3, #255	; 0xff
 8009ee6:	d025      	beq.n	8009f34 <USBD_LL_DataOutStage+0x15c>
 8009ee8:	7dbb      	ldrb	r3, [r7, #22]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d122      	bne.n	8009f34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d117      	bne.n	8009f2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009efa:	7dba      	ldrb	r2, [r7, #22]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	32ae      	adds	r2, #174	; 0xae
 8009f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00f      	beq.n	8009f2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f0a:	7dba      	ldrb	r2, [r7, #22]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f12:	7dba      	ldrb	r2, [r7, #22]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	32ae      	adds	r2, #174	; 0xae
 8009f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	7afa      	ldrb	r2, [r7, #11]
 8009f20:	4611      	mov	r1, r2
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	4798      	blx	r3
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	e000      	b.n	8009f36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b086      	sub	sp, #24
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	460b      	mov	r3, r1
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f4c:	7afb      	ldrb	r3, [r7, #11]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d16f      	bne.n	800a032 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3314      	adds	r3, #20
 8009f56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d15a      	bne.n	800a018 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	689a      	ldr	r2, [r3, #8]
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d914      	bls.n	8009f98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6879      	ldr	r1, [r7, #4]
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f001 f84a 	bl	800b01e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2100      	movs	r1, #0
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f001 fd56 	bl	800ba42 <USBD_LL_PrepareReceive>
 8009f96:	e03f      	b.n	800a018 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	68da      	ldr	r2, [r3, #12]
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d11c      	bne.n	8009fde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d316      	bcc.n	8009fde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d20f      	bcs.n	8009fde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f001 f82b 	bl	800b01e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f001 fd33 	bl	800ba42 <USBD_LL_PrepareReceive>
 8009fdc:	e01c      	b.n	800a018 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d10f      	bne.n	800a00a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d009      	beq.n	800a00a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a00a:	2180      	movs	r1, #128	; 0x80
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f001 fc6d 	bl	800b8ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f001 f855 	bl	800b0c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d03a      	beq.n	800a098 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff fe42 	bl	8009cac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a030:	e032      	b.n	800a098 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a032:	7afb      	ldrb	r3, [r7, #11]
 800a034:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	4619      	mov	r1, r3
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 f8f3 	bl	800a228 <USBD_CoreFindEP>
 800a042:	4603      	mov	r3, r0
 800a044:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	2bff      	cmp	r3, #255	; 0xff
 800a04a:	d025      	beq.n	800a098 <USBD_LL_DataInStage+0x15a>
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d122      	bne.n	800a098 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d11c      	bne.n	800a098 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a05e:	7dfa      	ldrb	r2, [r7, #23]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	32ae      	adds	r2, #174	; 0xae
 800a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d014      	beq.n	800a098 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a06e:	7dfa      	ldrb	r2, [r7, #23]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a076:	7dfa      	ldrb	r2, [r7, #23]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	32ae      	adds	r2, #174	; 0xae
 800a07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	7afa      	ldrb	r2, [r7, #11]
 800a084:	4611      	mov	r1, r2
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	4798      	blx	r3
 800a08a:	4603      	mov	r3, r0
 800a08c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a08e:	7dbb      	ldrb	r3, [r7, #22]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a094:	7dbb      	ldrb	r3, [r7, #22]
 800a096:	e000      	b.n	800a09a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d014      	beq.n	800a108 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00e      	beq.n	800a108 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	6852      	ldr	r2, [r2, #4]
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a104:	2303      	movs	r3, #3
 800a106:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a108:	2340      	movs	r3, #64	; 0x40
 800a10a:	2200      	movs	r2, #0
 800a10c:	2100      	movs	r1, #0
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f001 fba7 	bl	800b862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2240      	movs	r2, #64	; 0x40
 800a120:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a124:	2340      	movs	r3, #64	; 0x40
 800a126:	2200      	movs	r2, #0
 800a128:	2180      	movs	r1, #128	; 0x80
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 fb99 	bl	800b862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2240      	movs	r2, #64	; 0x40
 800a13a:	621a      	str	r2, [r3, #32]

  return ret;
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	460b      	mov	r3, r1
 800a150:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	78fa      	ldrb	r2, [r7, #3]
 800a156:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b04      	cmp	r3, #4
 800a178:	d006      	beq.n	800a188 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a180:	b2da      	uxtb	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2204      	movs	r2, #4
 800a18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d106      	bne.n	800a1c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d110      	bne.n	800a204 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00b      	beq.n	800a204 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a20e:	b480      	push	{r7}
 800a210:	b083      	sub	sp, #12
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a21a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a234:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a236:	4618      	mov	r0, r3
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	885b      	ldrh	r3, [r3, #2]
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	b29b      	uxth	r3, r3
 800a266:	429a      	cmp	r2, r3
 800a268:	d920      	bls.n	800a2ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a272:	e013      	b.n	800a29c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a274:	f107 030a 	add.w	r3, r7, #10
 800a278:	4619      	mov	r1, r3
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f000 f81b 	bl	800a2b6 <USBD_GetNextDesc>
 800a280:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	2b05      	cmp	r3, #5
 800a288:	d108      	bne.n	800a29c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	789b      	ldrb	r3, [r3, #2]
 800a292:	78fa      	ldrb	r2, [r7, #3]
 800a294:	429a      	cmp	r2, r3
 800a296:	d008      	beq.n	800a2aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	885b      	ldrh	r3, [r3, #2]
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	897b      	ldrh	r3, [r7, #10]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d8e5      	bhi.n	800a274 <USBD_GetEpDesc+0x32>
 800a2a8:	e000      	b.n	800a2ac <USBD_GetEpDesc+0x6a>
          break;
 800a2aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a2ac:	693b      	ldr	r3, [r7, #16]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	881a      	ldrh	r2, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4413      	add	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	3301      	adds	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a30e:	8a3b      	ldrh	r3, [r7, #16]
 800a310:	021b      	lsls	r3, r3, #8
 800a312:	b21a      	sxth	r2, r3
 800a314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a318:	4313      	orrs	r3, r2
 800a31a:	b21b      	sxth	r3, r3
 800a31c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a31e:	89fb      	ldrh	r3, [r7, #14]
}
 800a320:	4618      	mov	r0, r3
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a342:	2b40      	cmp	r3, #64	; 0x40
 800a344:	d005      	beq.n	800a352 <USBD_StdDevReq+0x26>
 800a346:	2b40      	cmp	r3, #64	; 0x40
 800a348:	d857      	bhi.n	800a3fa <USBD_StdDevReq+0xce>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00f      	beq.n	800a36e <USBD_StdDevReq+0x42>
 800a34e:	2b20      	cmp	r3, #32
 800a350:	d153      	bne.n	800a3fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	32ae      	adds	r2, #174	; 0xae
 800a35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	4798      	blx	r3
 800a368:	4603      	mov	r3, r0
 800a36a:	73fb      	strb	r3, [r7, #15]
      break;
 800a36c:	e04a      	b.n	800a404 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	785b      	ldrb	r3, [r3, #1]
 800a372:	2b09      	cmp	r3, #9
 800a374:	d83b      	bhi.n	800a3ee <USBD_StdDevReq+0xc2>
 800a376:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <USBD_StdDevReq+0x50>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a3d1 	.word	0x0800a3d1
 800a380:	0800a3e5 	.word	0x0800a3e5
 800a384:	0800a3ef 	.word	0x0800a3ef
 800a388:	0800a3db 	.word	0x0800a3db
 800a38c:	0800a3ef 	.word	0x0800a3ef
 800a390:	0800a3af 	.word	0x0800a3af
 800a394:	0800a3a5 	.word	0x0800a3a5
 800a398:	0800a3ef 	.word	0x0800a3ef
 800a39c:	0800a3c7 	.word	0x0800a3c7
 800a3a0:	0800a3b9 	.word	0x0800a3b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fa3c 	bl	800a824 <USBD_GetDescriptor>
          break;
 800a3ac:	e024      	b.n	800a3f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fbcb 	bl	800ab4c <USBD_SetAddress>
          break;
 800a3b6:	e01f      	b.n	800a3f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fc0a 	bl	800abd4 <USBD_SetConfig>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73fb      	strb	r3, [r7, #15]
          break;
 800a3c4:	e018      	b.n	800a3f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fcad 	bl	800ad28 <USBD_GetConfig>
          break;
 800a3ce:	e013      	b.n	800a3f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fcde 	bl	800ad94 <USBD_GetStatus>
          break;
 800a3d8:	e00e      	b.n	800a3f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fd0d 	bl	800adfc <USBD_SetFeature>
          break;
 800a3e2:	e009      	b.n	800a3f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fd31 	bl	800ae4e <USBD_ClrFeature>
          break;
 800a3ec:	e004      	b.n	800a3f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fd88 	bl	800af06 <USBD_CtlError>
          break;
 800a3f6:	bf00      	nop
      }
      break;
 800a3f8:	e004      	b.n	800a404 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fd82 	bl	800af06 <USBD_CtlError>
      break;
 800a402:	bf00      	nop
  }

  return ret;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop

0800a410 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a426:	2b40      	cmp	r3, #64	; 0x40
 800a428:	d005      	beq.n	800a436 <USBD_StdItfReq+0x26>
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	d852      	bhi.n	800a4d4 <USBD_StdItfReq+0xc4>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <USBD_StdItfReq+0x26>
 800a432:	2b20      	cmp	r3, #32
 800a434:	d14e      	bne.n	800a4d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	3b01      	subs	r3, #1
 800a440:	2b02      	cmp	r3, #2
 800a442:	d840      	bhi.n	800a4c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	889b      	ldrh	r3, [r3, #4]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d836      	bhi.n	800a4bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	889b      	ldrh	r3, [r3, #4]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fed9 	bl	800a20e <USBD_CoreFindIF>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a460:	7bbb      	ldrb	r3, [r7, #14]
 800a462:	2bff      	cmp	r3, #255	; 0xff
 800a464:	d01d      	beq.n	800a4a2 <USBD_StdItfReq+0x92>
 800a466:	7bbb      	ldrb	r3, [r7, #14]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d11a      	bne.n	800a4a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a46c:	7bba      	ldrb	r2, [r7, #14]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	32ae      	adds	r2, #174	; 0xae
 800a472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00f      	beq.n	800a49c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a47c:	7bba      	ldrb	r2, [r7, #14]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a484:	7bba      	ldrb	r2, [r7, #14]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	32ae      	adds	r2, #174	; 0xae
 800a48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
 800a496:	4603      	mov	r3, r0
 800a498:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a49a:	e004      	b.n	800a4a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4a0:	e001      	b.n	800a4a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	88db      	ldrh	r3, [r3, #6]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d110      	bne.n	800a4d0 <USBD_StdItfReq+0xc0>
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10d      	bne.n	800a4d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fdf1 	bl	800b09c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4ba:	e009      	b.n	800a4d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fd21 	bl	800af06 <USBD_CtlError>
          break;
 800a4c4:	e004      	b.n	800a4d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fd1c 	bl	800af06 <USBD_CtlError>
          break;
 800a4ce:	e000      	b.n	800a4d2 <USBD_StdItfReq+0xc2>
          break;
 800a4d0:	bf00      	nop
      }
      break;
 800a4d2:	e004      	b.n	800a4de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fd15 	bl	800af06 <USBD_CtlError>
      break;
 800a4dc:	bf00      	nop
  }

  return ret;
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	889b      	ldrh	r3, [r3, #4]
 800a4fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a504:	2b40      	cmp	r3, #64	; 0x40
 800a506:	d007      	beq.n	800a518 <USBD_StdEPReq+0x30>
 800a508:	2b40      	cmp	r3, #64	; 0x40
 800a50a:	f200 817f 	bhi.w	800a80c <USBD_StdEPReq+0x324>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d02a      	beq.n	800a568 <USBD_StdEPReq+0x80>
 800a512:	2b20      	cmp	r3, #32
 800a514:	f040 817a 	bne.w	800a80c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fe83 	bl	800a228 <USBD_CoreFindEP>
 800a522:	4603      	mov	r3, r0
 800a524:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a526:	7b7b      	ldrb	r3, [r7, #13]
 800a528:	2bff      	cmp	r3, #255	; 0xff
 800a52a:	f000 8174 	beq.w	800a816 <USBD_StdEPReq+0x32e>
 800a52e:	7b7b      	ldrb	r3, [r7, #13]
 800a530:	2b00      	cmp	r3, #0
 800a532:	f040 8170 	bne.w	800a816 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a536:	7b7a      	ldrb	r2, [r7, #13]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a53e:	7b7a      	ldrb	r2, [r7, #13]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	32ae      	adds	r2, #174	; 0xae
 800a544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 8163 	beq.w	800a816 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a550:	7b7a      	ldrb	r2, [r7, #13]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	32ae      	adds	r2, #174	; 0xae
 800a556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	4798      	blx	r3
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a566:	e156      	b.n	800a816 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	785b      	ldrb	r3, [r3, #1]
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d008      	beq.n	800a582 <USBD_StdEPReq+0x9a>
 800a570:	2b03      	cmp	r3, #3
 800a572:	f300 8145 	bgt.w	800a800 <USBD_StdEPReq+0x318>
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 809b 	beq.w	800a6b2 <USBD_StdEPReq+0x1ca>
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d03c      	beq.n	800a5fa <USBD_StdEPReq+0x112>
 800a580:	e13e      	b.n	800a800 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d002      	beq.n	800a594 <USBD_StdEPReq+0xac>
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d016      	beq.n	800a5c0 <USBD_StdEPReq+0xd8>
 800a592:	e02c      	b.n	800a5ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a594:	7bbb      	ldrb	r3, [r7, #14]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00d      	beq.n	800a5b6 <USBD_StdEPReq+0xce>
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	2b80      	cmp	r3, #128	; 0x80
 800a59e:	d00a      	beq.n	800a5b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 f9a1 	bl	800b8ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5aa:	2180      	movs	r1, #128	; 0x80
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f001 f99d 	bl	800b8ec <USBD_LL_StallEP>
 800a5b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5b4:	e020      	b.n	800a5f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fca4 	bl	800af06 <USBD_CtlError>
              break;
 800a5be:	e01b      	b.n	800a5f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	885b      	ldrh	r3, [r3, #2]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10e      	bne.n	800a5e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00b      	beq.n	800a5e6 <USBD_StdEPReq+0xfe>
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	2b80      	cmp	r3, #128	; 0x80
 800a5d2:	d008      	beq.n	800a5e6 <USBD_StdEPReq+0xfe>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	88db      	ldrh	r3, [r3, #6]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d104      	bne.n	800a5e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f001 f983 	bl	800b8ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fd58 	bl	800b09c <USBD_CtlSendStatus>

              break;
 800a5ec:	e004      	b.n	800a5f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fc88 	bl	800af06 <USBD_CtlError>
              break;
 800a5f6:	bf00      	nop
          }
          break;
 800a5f8:	e107      	b.n	800a80a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b02      	cmp	r3, #2
 800a604:	d002      	beq.n	800a60c <USBD_StdEPReq+0x124>
 800a606:	2b03      	cmp	r3, #3
 800a608:	d016      	beq.n	800a638 <USBD_StdEPReq+0x150>
 800a60a:	e04b      	b.n	800a6a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00d      	beq.n	800a62e <USBD_StdEPReq+0x146>
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	2b80      	cmp	r3, #128	; 0x80
 800a616:	d00a      	beq.n	800a62e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f001 f965 	bl	800b8ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a622:	2180      	movs	r1, #128	; 0x80
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 f961 	bl	800b8ec <USBD_LL_StallEP>
 800a62a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a62c:	e040      	b.n	800a6b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fc68 	bl	800af06 <USBD_CtlError>
              break;
 800a636:	e03b      	b.n	800a6b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	885b      	ldrh	r3, [r3, #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d136      	bne.n	800a6ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a646:	2b00      	cmp	r3, #0
 800a648:	d004      	beq.n	800a654 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 f96b 	bl	800b92a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fd21 	bl	800b09c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff fde2 	bl	800a228 <USBD_CoreFindEP>
 800a664:	4603      	mov	r3, r0
 800a666:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a668:	7b7b      	ldrb	r3, [r7, #13]
 800a66a:	2bff      	cmp	r3, #255	; 0xff
 800a66c:	d01f      	beq.n	800a6ae <USBD_StdEPReq+0x1c6>
 800a66e:	7b7b      	ldrb	r3, [r7, #13]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d11c      	bne.n	800a6ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a674:	7b7a      	ldrb	r2, [r7, #13]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a67c:	7b7a      	ldrb	r2, [r7, #13]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	32ae      	adds	r2, #174	; 0xae
 800a682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d010      	beq.n	800a6ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a68c:	7b7a      	ldrb	r2, [r7, #13]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	32ae      	adds	r2, #174	; 0xae
 800a692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	4798      	blx	r3
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a6a2:	e004      	b.n	800a6ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fc2d 	bl	800af06 <USBD_CtlError>
              break;
 800a6ac:	e000      	b.n	800a6b0 <USBD_StdEPReq+0x1c8>
              break;
 800a6ae:	bf00      	nop
          }
          break;
 800a6b0:	e0ab      	b.n	800a80a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d002      	beq.n	800a6c4 <USBD_StdEPReq+0x1dc>
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d032      	beq.n	800a728 <USBD_StdEPReq+0x240>
 800a6c2:	e097      	b.n	800a7f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d007      	beq.n	800a6da <USBD_StdEPReq+0x1f2>
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	2b80      	cmp	r3, #128	; 0x80
 800a6ce:	d004      	beq.n	800a6da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fc17 	bl	800af06 <USBD_CtlError>
                break;
 800a6d8:	e091      	b.n	800a7fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	da0b      	bge.n	800a6fa <USBD_StdEPReq+0x212>
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	3310      	adds	r3, #16
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	e00b      	b.n	800a712 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	4413      	add	r3, r2
 800a710:	3304      	adds	r3, #4
 800a712:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2202      	movs	r2, #2
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fc61 	bl	800afe8 <USBD_CtlSendData>
              break;
 800a726:	e06a      	b.n	800a7fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	da11      	bge.n	800a754 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	f003 020f 	and.w	r2, r3, #15
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	4613      	mov	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	440b      	add	r3, r1
 800a742:	3324      	adds	r3, #36	; 0x24
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d117      	bne.n	800a77a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fbda 	bl	800af06 <USBD_CtlError>
                  break;
 800a752:	e054      	b.n	800a7fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	f003 020f 	and.w	r2, r3, #15
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	440b      	add	r3, r1
 800a766:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d104      	bne.n	800a77a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fbc7 	bl	800af06 <USBD_CtlError>
                  break;
 800a778:	e041      	b.n	800a7fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a77a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	da0b      	bge.n	800a79a <USBD_StdEPReq+0x2b2>
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	3310      	adds	r3, #16
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	4413      	add	r3, r2
 800a796:	3304      	adds	r3, #4
 800a798:	e00b      	b.n	800a7b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <USBD_StdEPReq+0x2d8>
 800a7ba:	7bbb      	ldrb	r3, [r7, #14]
 800a7bc:	2b80      	cmp	r3, #128	; 0x80
 800a7be:	d103      	bne.n	800a7c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	e00e      	b.n	800a7e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 f8cb 	bl	800b968 <USBD_LL_IsStallEP>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e002      	b.n	800a7e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fbfb 	bl	800afe8 <USBD_CtlSendData>
              break;
 800a7f2:	e004      	b.n	800a7fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fb85 	bl	800af06 <USBD_CtlError>
              break;
 800a7fc:	bf00      	nop
          }
          break;
 800a7fe:	e004      	b.n	800a80a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fb7f 	bl	800af06 <USBD_CtlError>
          break;
 800a808:	bf00      	nop
      }
      break;
 800a80a:	e005      	b.n	800a818 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fb79 	bl	800af06 <USBD_CtlError>
      break;
 800a814:	e000      	b.n	800a818 <USBD_StdEPReq+0x330>
      break;
 800a816:	bf00      	nop
  }

  return ret;
 800a818:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a832:	2300      	movs	r3, #0
 800a834:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a836:	2300      	movs	r3, #0
 800a838:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	885b      	ldrh	r3, [r3, #2]
 800a83e:	0a1b      	lsrs	r3, r3, #8
 800a840:	b29b      	uxth	r3, r3
 800a842:	3b01      	subs	r3, #1
 800a844:	2b0e      	cmp	r3, #14
 800a846:	f200 8152 	bhi.w	800aaee <USBD_GetDescriptor+0x2ca>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <USBD_GetDescriptor+0x2c>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a8c1 	.word	0x0800a8c1
 800a854:	0800a8d9 	.word	0x0800a8d9
 800a858:	0800a919 	.word	0x0800a919
 800a85c:	0800aaef 	.word	0x0800aaef
 800a860:	0800aaef 	.word	0x0800aaef
 800a864:	0800aa8f 	.word	0x0800aa8f
 800a868:	0800aabb 	.word	0x0800aabb
 800a86c:	0800aaef 	.word	0x0800aaef
 800a870:	0800aaef 	.word	0x0800aaef
 800a874:	0800aaef 	.word	0x0800aaef
 800a878:	0800aaef 	.word	0x0800aaef
 800a87c:	0800aaef 	.word	0x0800aaef
 800a880:	0800aaef 	.word	0x0800aaef
 800a884:	0800aaef 	.word	0x0800aaef
 800a888:	0800a88d 	.word	0x0800a88d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00b      	beq.n	800a8b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	7c12      	ldrb	r2, [r2, #16]
 800a8a4:	f107 0108 	add.w	r1, r7, #8
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8ae:	e126      	b.n	800aafe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fb27 	bl	800af06 <USBD_CtlError>
        err++;
 800a8b8:	7afb      	ldrb	r3, [r7, #11]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	72fb      	strb	r3, [r7, #11]
      break;
 800a8be:	e11e      	b.n	800aafe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7c12      	ldrb	r2, [r2, #16]
 800a8cc:	f107 0108 	add.w	r1, r7, #8
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4798      	blx	r3
 800a8d4:	60f8      	str	r0, [r7, #12]
      break;
 800a8d6:	e112      	b.n	800aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	7c1b      	ldrb	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10d      	bne.n	800a8fc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e8:	f107 0208 	add.w	r2, r7, #8
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	4798      	blx	r3
 800a8f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8fa:	e100      	b.n	800aafe <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	f107 0208 	add.w	r2, r7, #8
 800a908:	4610      	mov	r0, r2
 800a90a:	4798      	blx	r3
 800a90c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3301      	adds	r3, #1
 800a912:	2202      	movs	r2, #2
 800a914:	701a      	strb	r2, [r3, #0]
      break;
 800a916:	e0f2      	b.n	800aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	885b      	ldrh	r3, [r3, #2]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b05      	cmp	r3, #5
 800a920:	f200 80ac 	bhi.w	800aa7c <USBD_GetDescriptor+0x258>
 800a924:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <USBD_GetDescriptor+0x108>)
 800a926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92a:	bf00      	nop
 800a92c:	0800a945 	.word	0x0800a945
 800a930:	0800a979 	.word	0x0800a979
 800a934:	0800a9ad 	.word	0x0800a9ad
 800a938:	0800a9e1 	.word	0x0800a9e1
 800a93c:	0800aa15 	.word	0x0800aa15
 800a940:	0800aa49 	.word	0x0800aa49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	7c12      	ldrb	r2, [r2, #16]
 800a95c:	f107 0108 	add.w	r1, r7, #8
 800a960:	4610      	mov	r0, r2
 800a962:	4798      	blx	r3
 800a964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a966:	e091      	b.n	800aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 facb 	bl	800af06 <USBD_CtlError>
            err++;
 800a970:	7afb      	ldrb	r3, [r7, #11]
 800a972:	3301      	adds	r3, #1
 800a974:	72fb      	strb	r3, [r7, #11]
          break;
 800a976:	e089      	b.n	800aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00b      	beq.n	800a99c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	7c12      	ldrb	r2, [r2, #16]
 800a990:	f107 0108 	add.w	r1, r7, #8
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
 800a998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a99a:	e077      	b.n	800aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fab1 	bl	800af06 <USBD_CtlError>
            err++;
 800a9a4:	7afb      	ldrb	r3, [r7, #11]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9aa:	e06f      	b.n	800aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00b      	beq.n	800a9d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	7c12      	ldrb	r2, [r2, #16]
 800a9c4:	f107 0108 	add.w	r1, r7, #8
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4798      	blx	r3
 800a9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ce:	e05d      	b.n	800aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fa97 	bl	800af06 <USBD_CtlError>
            err++;
 800a9d8:	7afb      	ldrb	r3, [r7, #11]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9de:	e055      	b.n	800aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00b      	beq.n	800aa04 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	7c12      	ldrb	r2, [r2, #16]
 800a9f8:	f107 0108 	add.w	r1, r7, #8
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
 800aa00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa02:	e043      	b.n	800aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fa7d 	bl	800af06 <USBD_CtlError>
            err++;
 800aa0c:	7afb      	ldrb	r3, [r7, #11]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	72fb      	strb	r3, [r7, #11]
          break;
 800aa12:	e03b      	b.n	800aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00b      	beq.n	800aa38 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	7c12      	ldrb	r2, [r2, #16]
 800aa2c:	f107 0108 	add.w	r1, r7, #8
 800aa30:	4610      	mov	r0, r2
 800aa32:	4798      	blx	r3
 800aa34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa36:	e029      	b.n	800aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fa63 	bl	800af06 <USBD_CtlError>
            err++;
 800aa40:	7afb      	ldrb	r3, [r7, #11]
 800aa42:	3301      	adds	r3, #1
 800aa44:	72fb      	strb	r3, [r7, #11]
          break;
 800aa46:	e021      	b.n	800aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	7c12      	ldrb	r2, [r2, #16]
 800aa60:	f107 0108 	add.w	r1, r7, #8
 800aa64:	4610      	mov	r0, r2
 800aa66:	4798      	blx	r3
 800aa68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa6a:	e00f      	b.n	800aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fa49 	bl	800af06 <USBD_CtlError>
            err++;
 800aa74:	7afb      	ldrb	r3, [r7, #11]
 800aa76:	3301      	adds	r3, #1
 800aa78:	72fb      	strb	r3, [r7, #11]
          break;
 800aa7a:	e007      	b.n	800aa8c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa7c:	6839      	ldr	r1, [r7, #0]
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa41 	bl	800af06 <USBD_CtlError>
          err++;
 800aa84:	7afb      	ldrb	r3, [r7, #11]
 800aa86:	3301      	adds	r3, #1
 800aa88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aa8a:	bf00      	nop
      }
      break;
 800aa8c:	e037      	b.n	800aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7c1b      	ldrb	r3, [r3, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d109      	bne.n	800aaaa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9e:	f107 0208 	add.w	r2, r7, #8
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	4798      	blx	r3
 800aaa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaa8:	e029      	b.n	800aafe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fa2a 	bl	800af06 <USBD_CtlError>
        err++;
 800aab2:	7afb      	ldrb	r3, [r7, #11]
 800aab4:	3301      	adds	r3, #1
 800aab6:	72fb      	strb	r3, [r7, #11]
      break;
 800aab8:	e021      	b.n	800aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	7c1b      	ldrb	r3, [r3, #16]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10d      	bne.n	800aade <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	f107 0208 	add.w	r2, r7, #8
 800aace:	4610      	mov	r0, r2
 800aad0:	4798      	blx	r3
 800aad2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	2207      	movs	r2, #7
 800aada:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aadc:	e00f      	b.n	800aafe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fa10 	bl	800af06 <USBD_CtlError>
        err++;
 800aae6:	7afb      	ldrb	r3, [r7, #11]
 800aae8:	3301      	adds	r3, #1
 800aaea:	72fb      	strb	r3, [r7, #11]
      break;
 800aaec:	e007      	b.n	800aafe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fa08 	bl	800af06 <USBD_CtlError>
      err++;
 800aaf6:	7afb      	ldrb	r3, [r7, #11]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	72fb      	strb	r3, [r7, #11]
      break;
 800aafc:	bf00      	nop
  }

  if (err != 0U)
 800aafe:	7afb      	ldrb	r3, [r7, #11]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d11e      	bne.n	800ab42 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	88db      	ldrh	r3, [r3, #6]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d016      	beq.n	800ab3a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab0c:	893b      	ldrh	r3, [r7, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00e      	beq.n	800ab30 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	88da      	ldrh	r2, [r3, #6]
 800ab16:	893b      	ldrh	r3, [r7, #8]
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	bf28      	it	cs
 800ab1c:	4613      	movcs	r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab22:	893b      	ldrh	r3, [r7, #8]
 800ab24:	461a      	mov	r2, r3
 800ab26:	68f9      	ldr	r1, [r7, #12]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fa5d 	bl	800afe8 <USBD_CtlSendData>
 800ab2e:	e009      	b.n	800ab44 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f9e7 	bl	800af06 <USBD_CtlError>
 800ab38:	e004      	b.n	800ab44 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 faae 	bl	800b09c <USBD_CtlSendStatus>
 800ab40:	e000      	b.n	800ab44 <USBD_GetDescriptor+0x320>
    return;
 800ab42:	bf00      	nop
  }
}
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop

0800ab4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	889b      	ldrh	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d131      	bne.n	800abc2 <USBD_SetAddress+0x76>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	88db      	ldrh	r3, [r3, #6]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d12d      	bne.n	800abc2 <USBD_SetAddress+0x76>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	885b      	ldrh	r3, [r3, #2]
 800ab6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab6c:	d829      	bhi.n	800abc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	885b      	ldrh	r3, [r3, #2]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d104      	bne.n	800ab90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f9bc 	bl	800af06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab8e:	e01d      	b.n	800abcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7bfa      	ldrb	r2, [r7, #15]
 800ab94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 ff10 	bl	800b9c2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fa7a 	bl	800b09c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d004      	beq.n	800abb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2202      	movs	r2, #2
 800abb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb6:	e009      	b.n	800abcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc0:	e004      	b.n	800abcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f99e 	bl	800af06 <USBD_CtlError>
  }
}
 800abca:	bf00      	nop
 800abcc:	bf00      	nop
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	885b      	ldrh	r3, [r3, #2]
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	4b4e      	ldr	r3, [pc, #312]	; (800ad24 <USBD_SetConfig+0x150>)
 800abea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abec:	4b4d      	ldr	r3, [pc, #308]	; (800ad24 <USBD_SetConfig+0x150>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d905      	bls.n	800ac00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f985 	bl	800af06 <USBD_CtlError>
    return USBD_FAIL;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e08c      	b.n	800ad1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d002      	beq.n	800ac12 <USBD_SetConfig+0x3e>
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d029      	beq.n	800ac64 <USBD_SetConfig+0x90>
 800ac10:	e075      	b.n	800acfe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac12:	4b44      	ldr	r3, [pc, #272]	; (800ad24 <USBD_SetConfig+0x150>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d020      	beq.n	800ac5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac1a:	4b42      	ldr	r3, [pc, #264]	; (800ad24 <USBD_SetConfig+0x150>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac24:	4b3f      	ldr	r3, [pc, #252]	; (800ad24 <USBD_SetConfig+0x150>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff f849 	bl	8009cc2 <USBD_SetClassConfig>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d008      	beq.n	800ac4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f962 	bl	800af06 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac4a:	e065      	b.n	800ad18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 fa25 	bl	800b09c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2203      	movs	r2, #3
 800ac56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac5a:	e05d      	b.n	800ad18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fa1d 	bl	800b09c <USBD_CtlSendStatus>
      break;
 800ac62:	e059      	b.n	800ad18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac64:	4b2f      	ldr	r3, [pc, #188]	; (800ad24 <USBD_SetConfig+0x150>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d112      	bne.n	800ac92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac74:	4b2b      	ldr	r3, [pc, #172]	; (800ad24 <USBD_SetConfig+0x150>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac7e:	4b29      	ldr	r3, [pc, #164]	; (800ad24 <USBD_SetConfig+0x150>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff f838 	bl	8009cfa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fa06 	bl	800b09c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac90:	e042      	b.n	800ad18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ac92:	4b24      	ldr	r3, [pc, #144]	; (800ad24 <USBD_SetConfig+0x150>)
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	461a      	mov	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d02a      	beq.n	800acf6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff f826 	bl	8009cfa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acae:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <USBD_SetConfig+0x150>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acb8:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <USBD_SetConfig+0x150>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fe ffff 	bl	8009cc2 <USBD_SetClassConfig>
 800acc4:	4603      	mov	r3, r0
 800acc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00f      	beq.n	800acee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f918 	bl	800af06 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff f80b 	bl	8009cfa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acec:	e014      	b.n	800ad18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f9d4 	bl	800b09c <USBD_CtlSendStatus>
      break;
 800acf4:	e010      	b.n	800ad18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f9d0 	bl	800b09c <USBD_CtlSendStatus>
      break;
 800acfc:	e00c      	b.n	800ad18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f900 	bl	800af06 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad06:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <USBD_SetConfig+0x150>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7fe fff4 	bl	8009cfa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad12:	2303      	movs	r3, #3
 800ad14:	73fb      	strb	r3, [r7, #15]
      break;
 800ad16:	bf00      	nop
  }

  return ret;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20000310 	.word	0x20000310

0800ad28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	88db      	ldrh	r3, [r3, #6]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d004      	beq.n	800ad44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f8e2 	bl	800af06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad42:	e023      	b.n	800ad8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	dc02      	bgt.n	800ad56 <USBD_GetConfig+0x2e>
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dc03      	bgt.n	800ad5c <USBD_GetConfig+0x34>
 800ad54:	e015      	b.n	800ad82 <USBD_GetConfig+0x5a>
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	d00b      	beq.n	800ad72 <USBD_GetConfig+0x4a>
 800ad5a:	e012      	b.n	800ad82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3308      	adds	r3, #8
 800ad66:	2201      	movs	r2, #1
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f93c 	bl	800afe8 <USBD_CtlSendData>
        break;
 800ad70:	e00c      	b.n	800ad8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3304      	adds	r3, #4
 800ad76:	2201      	movs	r2, #1
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f934 	bl	800afe8 <USBD_CtlSendData>
        break;
 800ad80:	e004      	b.n	800ad8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f8be 	bl	800af06 <USBD_CtlError>
        break;
 800ad8a:	bf00      	nop
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	3b01      	subs	r3, #1
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d81e      	bhi.n	800adea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	88db      	ldrh	r3, [r3, #6]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d004      	beq.n	800adbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f8a5 	bl	800af06 <USBD_CtlError>
        break;
 800adbc:	e01a      	b.n	800adf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f043 0202 	orr.w	r2, r3, #2
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	330c      	adds	r3, #12
 800adde:	2202      	movs	r2, #2
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f900 	bl	800afe8 <USBD_CtlSendData>
      break;
 800ade8:	e004      	b.n	800adf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f88a 	bl	800af06 <USBD_CtlError>
      break;
 800adf2:	bf00      	nop
  }
}
 800adf4:	bf00      	nop
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	885b      	ldrh	r3, [r3, #2]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d107      	bne.n	800ae1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f940 	bl	800b09c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae1c:	e013      	b.n	800ae46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d10b      	bne.n	800ae3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	889b      	ldrh	r3, [r3, #4]
 800ae2a:	0a1b      	lsrs	r3, r3, #8
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f930 	bl	800b09c <USBD_CtlSendStatus>
}
 800ae3c:	e003      	b.n	800ae46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f860 	bl	800af06 <USBD_CtlError>
}
 800ae46:	bf00      	nop
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	3b01      	subs	r3, #1
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d80b      	bhi.n	800ae7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	885b      	ldrh	r3, [r3, #2]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d10c      	bne.n	800ae88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f910 	bl	800b09c <USBD_CtlSendStatus>
      }
      break;
 800ae7c:	e004      	b.n	800ae88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f840 	bl	800af06 <USBD_CtlError>
      break;
 800ae86:	e000      	b.n	800ae8a <USBD_ClrFeature+0x3c>
      break;
 800ae88:	bf00      	nop
  }
}
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	781a      	ldrb	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	781a      	ldrb	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f7ff fa17 	bl	800a2f0 <SWAPBYTE>
 800aec2:	4603      	mov	r3, r0
 800aec4:	461a      	mov	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3301      	adds	r3, #1
 800aece:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3301      	adds	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff fa0a 	bl	800a2f0 <SWAPBYTE>
 800aedc:	4603      	mov	r3, r0
 800aede:	461a      	mov	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3301      	adds	r3, #1
 800aee8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3301      	adds	r3, #1
 800aeee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f7ff f9fd 	bl	800a2f0 <SWAPBYTE>
 800aef6:	4603      	mov	r3, r0
 800aef8:	461a      	mov	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	80da      	strh	r2, [r3, #6]
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af10:	2180      	movs	r1, #128	; 0x80
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fcea 	bl	800b8ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af18:	2100      	movs	r1, #0
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fce6 	bl	800b8ec <USBD_LL_StallEP>
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d036      	beq.n	800afac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af42:	6938      	ldr	r0, [r7, #16]
 800af44:	f000 f836 	bl	800afb4 <USBD_GetLen>
 800af48:	4603      	mov	r3, r0
 800af4a:	3301      	adds	r3, #1
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	b29a      	uxth	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	4413      	add	r3, r2
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	7812      	ldrb	r2, [r2, #0]
 800af60:	701a      	strb	r2, [r3, #0]
  idx++;
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	3301      	adds	r3, #1
 800af66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	4413      	add	r3, r2
 800af6e:	2203      	movs	r2, #3
 800af70:	701a      	strb	r2, [r3, #0]
  idx++;
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	3301      	adds	r3, #1
 800af76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af78:	e013      	b.n	800afa2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	4413      	add	r3, r2
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	3301      	adds	r3, #1
 800af8a:	613b      	str	r3, [r7, #16]
    idx++;
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
 800af8e:	3301      	adds	r3, #1
 800af90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	4413      	add	r3, r2
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
    idx++;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	3301      	adds	r3, #1
 800afa0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1e7      	bne.n	800af7a <USBD_GetString+0x52>
 800afaa:	e000      	b.n	800afae <USBD_GetString+0x86>
    return;
 800afac:	bf00      	nop
  }
}
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800afc4:	e005      	b.n	800afd2 <USBD_GetLen+0x1e>
  {
    len++;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	3301      	adds	r3, #1
 800afca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	3301      	adds	r3, #1
 800afd0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1f5      	bne.n	800afc6 <USBD_GetLen+0x12>
  }

  return len;
 800afda:	7bfb      	ldrb	r3, [r7, #15]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	2100      	movs	r1, #0
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f000 fcf6 	bl	800ba00 <USBD_LL_Transmit>

  return USBD_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	60f8      	str	r0, [r7, #12]
 800b026:	60b9      	str	r1, [r7, #8]
 800b028:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	2100      	movs	r1, #0
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 fce5 	bl	800ba00 <USBD_LL_Transmit>

  return USBD_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2203      	movs	r2, #3
 800b050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	2100      	movs	r1, #0
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 fce9 	bl	800ba42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	2100      	movs	r1, #0
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fcd8 	bl	800ba42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2204      	movs	r2, #4
 800b0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fca4 	bl	800ba00 <USBD_LL_Transmit>

  return USBD_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2205      	movs	r2, #5
 800b0ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fcb2 	bl	800ba42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	4912      	ldr	r1, [pc, #72]	; (800b138 <MX_USB_Device_Init+0x50>)
 800b0f0:	4812      	ldr	r0, [pc, #72]	; (800b13c <MX_USB_Device_Init+0x54>)
 800b0f2:	f7fe fd69 	bl	8009bc8 <USBD_Init>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b0fc:	f7f5 fbf4 	bl	80008e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b100:	490f      	ldr	r1, [pc, #60]	; (800b140 <MX_USB_Device_Init+0x58>)
 800b102:	480e      	ldr	r0, [pc, #56]	; (800b13c <MX_USB_Device_Init+0x54>)
 800b104:	f7fe fd90 	bl	8009c28 <USBD_RegisterClass>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b10e:	f7f5 fbeb 	bl	80008e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b112:	490c      	ldr	r1, [pc, #48]	; (800b144 <MX_USB_Device_Init+0x5c>)
 800b114:	4809      	ldr	r0, [pc, #36]	; (800b13c <MX_USB_Device_Init+0x54>)
 800b116:	f7fe fc87 	bl	8009a28 <USBD_CDC_RegisterInterface>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b120:	f7f5 fbe2 	bl	80008e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b124:	4805      	ldr	r0, [pc, #20]	; (800b13c <MX_USB_Device_Init+0x54>)
 800b126:	f7fe fdb5 	bl	8009c94 <USBD_Start>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b130:	f7f5 fbda 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b134:	bf00      	nop
 800b136:	bd80      	pop	{r7, pc}
 800b138:	200000f4 	.word	0x200000f4
 800b13c:	20000314 	.word	0x20000314
 800b140:	20000060 	.word	0x20000060
 800b144:	200000e0 	.word	0x200000e0

0800b148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b14c:	2200      	movs	r2, #0
 800b14e:	4905      	ldr	r1, [pc, #20]	; (800b164 <CDC_Init_FS+0x1c>)
 800b150:	4805      	ldr	r0, [pc, #20]	; (800b168 <CDC_Init_FS+0x20>)
 800b152:	f7fe fc83 	bl	8009a5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b156:	4905      	ldr	r1, [pc, #20]	; (800b16c <CDC_Init_FS+0x24>)
 800b158:	4803      	ldr	r0, [pc, #12]	; (800b168 <CDC_Init_FS+0x20>)
 800b15a:	f7fe fca1 	bl	8009aa0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b15e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b160:	4618      	mov	r0, r3
 800b162:	bd80      	pop	{r7, pc}
 800b164:	20000df0 	.word	0x20000df0
 800b168:	20000314 	.word	0x20000314
 800b16c:	200005f0 	.word	0x200005f0

0800b170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b170:	b480      	push	{r7}
 800b172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b176:	4618      	mov	r0, r3
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	4603      	mov	r3, r0
 800b188:	6039      	str	r1, [r7, #0]
 800b18a:	71fb      	strb	r3, [r7, #7]
 800b18c:	4613      	mov	r3, r2
 800b18e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b190:	79fb      	ldrb	r3, [r7, #7]
 800b192:	2b23      	cmp	r3, #35	; 0x23
 800b194:	d84a      	bhi.n	800b22c <CDC_Control_FS+0xac>
 800b196:	a201      	add	r2, pc, #4	; (adr r2, 800b19c <CDC_Control_FS+0x1c>)
 800b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19c:	0800b22d 	.word	0x0800b22d
 800b1a0:	0800b22d 	.word	0x0800b22d
 800b1a4:	0800b22d 	.word	0x0800b22d
 800b1a8:	0800b22d 	.word	0x0800b22d
 800b1ac:	0800b22d 	.word	0x0800b22d
 800b1b0:	0800b22d 	.word	0x0800b22d
 800b1b4:	0800b22d 	.word	0x0800b22d
 800b1b8:	0800b22d 	.word	0x0800b22d
 800b1bc:	0800b22d 	.word	0x0800b22d
 800b1c0:	0800b22d 	.word	0x0800b22d
 800b1c4:	0800b22d 	.word	0x0800b22d
 800b1c8:	0800b22d 	.word	0x0800b22d
 800b1cc:	0800b22d 	.word	0x0800b22d
 800b1d0:	0800b22d 	.word	0x0800b22d
 800b1d4:	0800b22d 	.word	0x0800b22d
 800b1d8:	0800b22d 	.word	0x0800b22d
 800b1dc:	0800b22d 	.word	0x0800b22d
 800b1e0:	0800b22d 	.word	0x0800b22d
 800b1e4:	0800b22d 	.word	0x0800b22d
 800b1e8:	0800b22d 	.word	0x0800b22d
 800b1ec:	0800b22d 	.word	0x0800b22d
 800b1f0:	0800b22d 	.word	0x0800b22d
 800b1f4:	0800b22d 	.word	0x0800b22d
 800b1f8:	0800b22d 	.word	0x0800b22d
 800b1fc:	0800b22d 	.word	0x0800b22d
 800b200:	0800b22d 	.word	0x0800b22d
 800b204:	0800b22d 	.word	0x0800b22d
 800b208:	0800b22d 	.word	0x0800b22d
 800b20c:	0800b22d 	.word	0x0800b22d
 800b210:	0800b22d 	.word	0x0800b22d
 800b214:	0800b22d 	.word	0x0800b22d
 800b218:	0800b22d 	.word	0x0800b22d
 800b21c:	0800b22d 	.word	0x0800b22d
 800b220:	0800b22d 	.word	0x0800b22d
 800b224:	0800b22d 	.word	0x0800b22d
 800b228:	0800b22d 	.word	0x0800b22d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b22c:	bf00      	nop
  }

  return (USBD_OK);
 800b22e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4805      	ldr	r0, [pc, #20]	; (800b260 <CDC_Receive_FS+0x24>)
 800b24a:	f7fe fc29 	bl	8009aa0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b24e:	4804      	ldr	r0, [pc, #16]	; (800b260 <CDC_Receive_FS+0x24>)
 800b250:	f7fe fc84 	bl	8009b5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b254:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000314 	.word	0x20000314

0800b264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b274:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <CDC_Transmit_FS+0x48>)
 800b276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b27a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b286:	2301      	movs	r3, #1
 800b288:	e00b      	b.n	800b2a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b28a:	887b      	ldrh	r3, [r7, #2]
 800b28c:	461a      	mov	r2, r3
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	4806      	ldr	r0, [pc, #24]	; (800b2ac <CDC_Transmit_FS+0x48>)
 800b292:	f7fe fbe3 	bl	8009a5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b296:	4805      	ldr	r0, [pc, #20]	; (800b2ac <CDC_Transmit_FS+0x48>)
 800b298:	f7fe fc20 	bl	8009adc <USBD_CDC_TransmitPacket>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000314 	.word	0x20000314

0800b2b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b2c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	371c      	adds	r7, #28
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
	...

0800b2d4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	6039      	str	r1, [r7, #0]
 800b2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	2212      	movs	r2, #18
 800b2e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b2e6:	4b03      	ldr	r3, [pc, #12]	; (800b2f4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	20000114 	.word	0x20000114

0800b2f8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2204      	movs	r2, #4
 800b308:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b30a:	4b03      	ldr	r3, [pc, #12]	; (800b318 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	20000128 	.word	0x20000128

0800b31c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d105      	bne.n	800b33a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	4907      	ldr	r1, [pc, #28]	; (800b350 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b332:	4808      	ldr	r0, [pc, #32]	; (800b354 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b334:	f7ff fdf8 	bl	800af28 <USBD_GetString>
 800b338:	e004      	b.n	800b344 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	4904      	ldr	r1, [pc, #16]	; (800b350 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b33e:	4805      	ldr	r0, [pc, #20]	; (800b354 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b340:	f7ff fdf2 	bl	800af28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b344:	4b02      	ldr	r3, [pc, #8]	; (800b350 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	200015f0 	.word	0x200015f0
 800b354:	0800cc00 	.word	0x0800cc00

0800b358 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	6039      	str	r1, [r7, #0]
 800b362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	4904      	ldr	r1, [pc, #16]	; (800b378 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b368:	4804      	ldr	r0, [pc, #16]	; (800b37c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b36a:	f7ff fddd 	bl	800af28 <USBD_GetString>
  return USBD_StrDesc;
 800b36e:	4b02      	ldr	r3, [pc, #8]	; (800b378 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b370:	4618      	mov	r0, r3
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	200015f0 	.word	0x200015f0
 800b37c:	0800cc18 	.word	0x0800cc18

0800b380 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	6039      	str	r1, [r7, #0]
 800b38a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	221a      	movs	r2, #26
 800b390:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b392:	f000 f843 	bl	800b41c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b396:	4b02      	ldr	r3, [pc, #8]	; (800b3a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	2000012c 	.word	0x2000012c

0800b3a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	6039      	str	r1, [r7, #0]
 800b3ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d105      	bne.n	800b3c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	4907      	ldr	r1, [pc, #28]	; (800b3d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b3ba:	4808      	ldr	r0, [pc, #32]	; (800b3dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b3bc:	f7ff fdb4 	bl	800af28 <USBD_GetString>
 800b3c0:	e004      	b.n	800b3cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	4904      	ldr	r1, [pc, #16]	; (800b3d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b3c6:	4805      	ldr	r0, [pc, #20]	; (800b3dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b3c8:	f7ff fdae 	bl	800af28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3cc:	4b02      	ldr	r3, [pc, #8]	; (800b3d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	200015f0 	.word	0x200015f0
 800b3dc:	0800cc2c 	.word	0x0800cc2c

0800b3e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	6039      	str	r1, [r7, #0]
 800b3ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3ec:	79fb      	ldrb	r3, [r7, #7]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d105      	bne.n	800b3fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	4907      	ldr	r1, [pc, #28]	; (800b414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b3f6:	4808      	ldr	r0, [pc, #32]	; (800b418 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b3f8:	f7ff fd96 	bl	800af28 <USBD_GetString>
 800b3fc:	e004      	b.n	800b408 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	4904      	ldr	r1, [pc, #16]	; (800b414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b402:	4805      	ldr	r0, [pc, #20]	; (800b418 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b404:	f7ff fd90 	bl	800af28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b408:	4b02      	ldr	r3, [pc, #8]	; (800b414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	200015f0 	.word	0x200015f0
 800b418:	0800cc38 	.word	0x0800cc38

0800b41c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <Get_SerialNum+0x44>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b428:	4b0e      	ldr	r3, [pc, #56]	; (800b464 <Get_SerialNum+0x48>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b42e:	4b0e      	ldr	r3, [pc, #56]	; (800b468 <Get_SerialNum+0x4c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4413      	add	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d009      	beq.n	800b456 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b442:	2208      	movs	r2, #8
 800b444:	4909      	ldr	r1, [pc, #36]	; (800b46c <Get_SerialNum+0x50>)
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 f814 	bl	800b474 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b44c:	2204      	movs	r2, #4
 800b44e:	4908      	ldr	r1, [pc, #32]	; (800b470 <Get_SerialNum+0x54>)
 800b450:	68b8      	ldr	r0, [r7, #8]
 800b452:	f000 f80f 	bl	800b474 <IntToUnicode>
  }
}
 800b456:	bf00      	nop
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	1fff7590 	.word	0x1fff7590
 800b464:	1fff7594 	.word	0x1fff7594
 800b468:	1fff7598 	.word	0x1fff7598
 800b46c:	2000012e 	.word	0x2000012e
 800b470:	2000013e 	.word	0x2000013e

0800b474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	4613      	mov	r3, r2
 800b480:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b486:	2300      	movs	r3, #0
 800b488:	75fb      	strb	r3, [r7, #23]
 800b48a:	e027      	b.n	800b4dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	0f1b      	lsrs	r3, r3, #28
 800b490:	2b09      	cmp	r3, #9
 800b492:	d80b      	bhi.n	800b4ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	0f1b      	lsrs	r3, r3, #28
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	4619      	mov	r1, r3
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	440b      	add	r3, r1
 800b4a4:	3230      	adds	r2, #48	; 0x30
 800b4a6:	b2d2      	uxtb	r2, r2
 800b4a8:	701a      	strb	r2, [r3, #0]
 800b4aa:	e00a      	b.n	800b4c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	0f1b      	lsrs	r3, r3, #28
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	440b      	add	r3, r1
 800b4bc:	3237      	adds	r2, #55	; 0x37
 800b4be:	b2d2      	uxtb	r2, r2
 800b4c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	011b      	lsls	r3, r3, #4
 800b4c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4c8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	75fb      	strb	r3, [r7, #23]
 800b4dc:	7dfa      	ldrb	r2, [r7, #23]
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d3d3      	bcc.n	800b48c <IntToUnicode+0x18>
  }
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop
 800b4e8:	371c      	adds	r7, #28
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <LL_AHB2_GRP1_EnableClock>:
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b085      	sub	sp, #20
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b4fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4313      	orrs	r3, r2
 800b508:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b50a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b50e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4013      	ands	r3, r2
 800b514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b516:	68fb      	ldr	r3, [r7, #12]
}
 800b518:	bf00      	nop
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <LL_APB1_GRP1_EnableClock>:
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b52c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4313      	orrs	r3, r2
 800b53a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b53c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b540:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4013      	ands	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b548:	68fb      	ldr	r3, [r7, #12]
}
 800b54a:	bf00      	nop
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b09c      	sub	sp, #112	; 0x70
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b560:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	605a      	str	r2, [r3, #4]
 800b56a:	609a      	str	r2, [r3, #8]
 800b56c:	60da      	str	r2, [r3, #12]
 800b56e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b570:	f107 030c 	add.w	r3, r7, #12
 800b574:	2250      	movs	r2, #80	; 0x50
 800b576:	2100      	movs	r1, #0
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 fb41 	bl	800bc00 <memset>
  if(pcdHandle->Instance==USB)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a23      	ldr	r2, [pc, #140]	; (800b610 <HAL_PCD_MspInit+0xb8>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d13e      	bne.n	800b606 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b58c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800b58e:	2318      	movs	r3, #24
 800b590:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800b592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b596:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800b598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b59c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800b59e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b5a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800b5a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b5aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b5ae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b5b0:	f107 030c 	add.w	r3, r7, #12
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7f9 fb99 	bl	8004cec <HAL_RCCEx_PeriphCLKConfig>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800b5c0:	f7f5 f992 	bl	80008e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	f7ff ff94 	bl	800b4f2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800b5dc:	230a      	movs	r3, #10
 800b5de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b5ea:	f7f6 f979 	bl	80018e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b5ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b5f2:	f7ff ff97 	bl	800b524 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2014      	movs	r0, #20
 800b5fc:	f7f5 fe67 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b600:	2014      	movs	r0, #20
 800b602:	f7f5 fe7e 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b606:	bf00      	nop
 800b608:	3770      	adds	r7, #112	; 0x70
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40006800 	.word	0x40006800

0800b614 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7fe fb7f 	bl	8009d2e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b64a:	78fa      	ldrb	r2, [r7, #3]
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	4613      	mov	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	00db      	lsls	r3, r3, #3
 800b656:	440b      	add	r3, r1
 800b658:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	78fb      	ldrb	r3, [r7, #3]
 800b660:	4619      	mov	r1, r3
 800b662:	f7fe fbb9 	bl	8009dd8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b666:	bf00      	nop
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4613      	mov	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	440b      	add	r3, r1
 800b68e:	333c      	adds	r3, #60	; 0x3c
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	4619      	mov	r1, r3
 800b696:	f7fe fc52 	bl	8009f3e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fd8c 	bl	800a1ce <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d001      	beq.n	800b6d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6d2:	f7f5 f909 	bl	80008e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b6dc:	7bfa      	ldrb	r2, [r7, #15]
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fd30 	bl	800a146 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fe fcd8 	bl	800a0a2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fd2b 	bl	800a166 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b718:	4b04      	ldr	r3, [pc, #16]	; (800b72c <HAL_PCD_SuspendCallback+0x30>)
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	4a03      	ldr	r2, [pc, #12]	; (800b72c <HAL_PCD_SuspendCallback+0x30>)
 800b71e:	f043 0306 	orr.w	r3, r3, #6
 800b722:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	e000ed00 	.word	0xe000ed00

0800b730 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d007      	beq.n	800b750 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <HAL_PCD_ResumeCallback+0x34>)
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	4a07      	ldr	r2, [pc, #28]	; (800b764 <HAL_PCD_ResumeCallback+0x34>)
 800b746:	f023 0306 	bic.w	r3, r3, #6
 800b74a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b74c:	f000 f9fc 	bl	800bb48 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe fd21 	bl	800a19e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	e000ed00 	.word	0xe000ed00

0800b768 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b770:	4a2c      	ldr	r2, [pc, #176]	; (800b824 <USBD_LL_Init+0xbc>)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a2a      	ldr	r2, [pc, #168]	; (800b824 <USBD_LL_Init+0xbc>)
 800b77c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b780:	f7f7 ffb0 	bl	80036e4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800b784:	4b27      	ldr	r3, [pc, #156]	; (800b824 <USBD_LL_Init+0xbc>)
 800b786:	4a28      	ldr	r2, [pc, #160]	; (800b828 <USBD_LL_Init+0xc0>)
 800b788:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b78a:	4b26      	ldr	r3, [pc, #152]	; (800b824 <USBD_LL_Init+0xbc>)
 800b78c:	2208      	movs	r2, #8
 800b78e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b790:	4b24      	ldr	r3, [pc, #144]	; (800b824 <USBD_LL_Init+0xbc>)
 800b792:	2202      	movs	r2, #2
 800b794:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b796:	4b23      	ldr	r3, [pc, #140]	; (800b824 <USBD_LL_Init+0xbc>)
 800b798:	2202      	movs	r2, #2
 800b79a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b79c:	4b21      	ldr	r3, [pc, #132]	; (800b824 <USBD_LL_Init+0xbc>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7a2:	4b20      	ldr	r3, [pc, #128]	; (800b824 <USBD_LL_Init+0xbc>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7a8:	4b1e      	ldr	r3, [pc, #120]	; (800b824 <USBD_LL_Init+0xbc>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7ae:	4b1d      	ldr	r3, [pc, #116]	; (800b824 <USBD_LL_Init+0xbc>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7b4:	481b      	ldr	r0, [pc, #108]	; (800b824 <USBD_LL_Init+0xbc>)
 800b7b6:	f7f6 fa33 	bl	8001c20 <HAL_PCD_Init>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b7c0:	f7f5 f892 	bl	80008e8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7ca:	2318      	movs	r3, #24
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	f7f7 fefc 	bl	80035cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7da:	2358      	movs	r3, #88	; 0x58
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2180      	movs	r1, #128	; 0x80
 800b7e0:	f7f7 fef4 	bl	80035cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7ea:	23c0      	movs	r3, #192	; 0xc0
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2181      	movs	r1, #129	; 0x81
 800b7f0:	f7f7 feec 	bl	80035cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b7fe:	2200      	movs	r2, #0
 800b800:	2101      	movs	r1, #1
 800b802:	f7f7 fee3 	bl	80035cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b80c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b810:	2200      	movs	r2, #0
 800b812:	2182      	movs	r1, #130	; 0x82
 800b814:	f7f7 feda 	bl	80035cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	200017f0 	.word	0x200017f0
 800b828:	40006800 	.word	0x40006800

0800b82c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b842:	4618      	mov	r0, r3
 800b844:	f7f6 fac5 	bl	8001dd2 <HAL_PCD_Start>
 800b848:	4603      	mov	r3, r0
 800b84a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	4618      	mov	r0, r3
 800b850:	f000 f980 	bl	800bb54 <USBD_Get_USB_Status>
 800b854:	4603      	mov	r3, r0
 800b856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b858:	7bbb      	ldrb	r3, [r7, #14]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b084      	sub	sp, #16
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	4608      	mov	r0, r1
 800b86c:	4611      	mov	r1, r2
 800b86e:	461a      	mov	r2, r3
 800b870:	4603      	mov	r3, r0
 800b872:	70fb      	strb	r3, [r7, #3]
 800b874:	460b      	mov	r3, r1
 800b876:	70bb      	strb	r3, [r7, #2]
 800b878:	4613      	mov	r3, r2
 800b87a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b88a:	78bb      	ldrb	r3, [r7, #2]
 800b88c:	883a      	ldrh	r2, [r7, #0]
 800b88e:	78f9      	ldrb	r1, [r7, #3]
 800b890:	f7f6 fc0d 	bl	80020ae <HAL_PCD_EP_Open>
 800b894:	4603      	mov	r3, r0
 800b896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 f95a 	bl	800bb54 <USBD_Get_USB_Status>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8c8:	78fa      	ldrb	r2, [r7, #3]
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7f6 fc4b 	bl	8002168 <HAL_PCD_EP_Close>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 f93b 	bl	800bb54 <USBD_Get_USB_Status>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	4611      	mov	r1, r2
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f6 fcf4 	bl	80022f8 <HAL_PCD_EP_SetStall>
 800b910:	4603      	mov	r3, r0
 800b912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 f91c 	bl	800bb54 <USBD_Get_USB_Status>
 800b91c:	4603      	mov	r3, r0
 800b91e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b920:	7bbb      	ldrb	r3, [r7, #14]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	460b      	mov	r3, r1
 800b934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b944:	78fa      	ldrb	r2, [r7, #3]
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f7f6 fd27 	bl	800239c <HAL_PCD_EP_ClrStall>
 800b94e:	4603      	mov	r3, r0
 800b950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b952:	7bfb      	ldrb	r3, [r7, #15]
 800b954:	4618      	mov	r0, r3
 800b956:	f000 f8fd 	bl	800bb54 <USBD_Get_USB_Status>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b97a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b97c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b980:	2b00      	cmp	r3, #0
 800b982:	da0c      	bge.n	800b99e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b984:	78fb      	ldrb	r3, [r7, #3]
 800b986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98a:	68f9      	ldr	r1, [r7, #12]
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	4613      	mov	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	00db      	lsls	r3, r3, #3
 800b996:	440b      	add	r3, r1
 800b998:	3302      	adds	r3, #2
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	e00b      	b.n	800b9b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9a4:	68f9      	ldr	r1, [r7, #12]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	00db      	lsls	r3, r3, #3
 800b9ae:	440b      	add	r3, r1
 800b9b0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b9b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9dc:	78fa      	ldrb	r2, [r7, #3]
 800b9de:	4611      	mov	r1, r2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7f6 fb3f 	bl	8002064 <HAL_PCD_SetAddress>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f8b1 	bl	800bb54 <USBD_Get_USB_Status>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba1e:	7af9      	ldrb	r1, [r7, #11]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	f7f6 fc31 	bl	800228a <HAL_PCD_EP_Transmit>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 f890 	bl	800bb54 <USBD_Get_USB_Status>
 800ba34:	4603      	mov	r3, r0
 800ba36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba38:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3718      	adds	r7, #24
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b086      	sub	sp, #24
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba60:	7af9      	ldrb	r1, [r7, #11]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	f7f6 fbc7 	bl	80021f8 <HAL_PCD_EP_Receive>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 f86f 	bl	800bb54 <USBD_Get_USB_Status>
 800ba76:	4603      	mov	r3, r0
 800ba78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba96:	78fa      	ldrb	r2, [r7, #3]
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7f6 fbdd 	bl	800225a <HAL_PCD_EP_GetRxCount>
 800baa0:	4603      	mov	r3, r0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bab8:	78fb      	ldrb	r3, [r7, #3]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <HAL_PCDEx_LPM_Callback+0x18>
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d013      	beq.n	800baea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bac2:	e023      	b.n	800bb0c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d007      	beq.n	800badc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bacc:	f000 f83c 	bl	800bb48 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bad0:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <HAL_PCDEx_LPM_Callback+0x68>)
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	4a0f      	ldr	r2, [pc, #60]	; (800bb14 <HAL_PCDEx_LPM_Callback+0x68>)
 800bad6:	f023 0306 	bic.w	r3, r3, #6
 800bada:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe fb5b 	bl	800a19e <USBD_LL_Resume>
    break;
 800bae8:	e010      	b.n	800bb0c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe fb38 	bl	800a166 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d005      	beq.n	800bb0a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bafe:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	4a04      	ldr	r2, [pc, #16]	; (800bb14 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb04:	f043 0306 	orr.w	r3, r3, #6
 800bb08:	6113      	str	r3, [r2, #16]
    break;
 800bb0a:	bf00      	nop
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	e000ed00 	.word	0xe000ed00

0800bb18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb20:	4b03      	ldr	r3, [pc, #12]	; (800bb30 <USBD_static_malloc+0x18>)
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	20001ae4 	.word	0x20001ae4

0800bb34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb4c:	f7f4 fcfa 	bl	8000544 <SystemClock_Config>
}
 800bb50:	bf00      	nop
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d817      	bhi.n	800bb98 <USBD_Get_USB_Status+0x44>
 800bb68:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <USBD_Get_USB_Status+0x1c>)
 800bb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6e:	bf00      	nop
 800bb70:	0800bb81 	.word	0x0800bb81
 800bb74:	0800bb87 	.word	0x0800bb87
 800bb78:	0800bb8d 	.word	0x0800bb8d
 800bb7c:	0800bb93 	.word	0x0800bb93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
    break;
 800bb84:	e00b      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb86:	2303      	movs	r3, #3
 800bb88:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8a:	e008      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb90:	e005      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb92:	2303      	movs	r3, #3
 800bb94:	73fb      	strb	r3, [r7, #15]
    break;
 800bb96:	e002      	b.n	800bb9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9c:	bf00      	nop
  }
  return usb_status;
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <__errno>:
 800bbac:	4b01      	ldr	r3, [pc, #4]	; (800bbb4 <__errno+0x8>)
 800bbae:	6818      	ldr	r0, [r3, #0]
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20000148 	.word	0x20000148

0800bbb8 <__libc_init_array>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	4d0d      	ldr	r5, [pc, #52]	; (800bbf0 <__libc_init_array+0x38>)
 800bbbc:	4c0d      	ldr	r4, [pc, #52]	; (800bbf4 <__libc_init_array+0x3c>)
 800bbbe:	1b64      	subs	r4, r4, r5
 800bbc0:	10a4      	asrs	r4, r4, #2
 800bbc2:	2600      	movs	r6, #0
 800bbc4:	42a6      	cmp	r6, r4
 800bbc6:	d109      	bne.n	800bbdc <__libc_init_array+0x24>
 800bbc8:	4d0b      	ldr	r5, [pc, #44]	; (800bbf8 <__libc_init_array+0x40>)
 800bbca:	4c0c      	ldr	r4, [pc, #48]	; (800bbfc <__libc_init_array+0x44>)
 800bbcc:	f000 ffae 	bl	800cb2c <_init>
 800bbd0:	1b64      	subs	r4, r4, r5
 800bbd2:	10a4      	asrs	r4, r4, #2
 800bbd4:	2600      	movs	r6, #0
 800bbd6:	42a6      	cmp	r6, r4
 800bbd8:	d105      	bne.n	800bbe6 <__libc_init_array+0x2e>
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe0:	4798      	blx	r3
 800bbe2:	3601      	adds	r6, #1
 800bbe4:	e7ee      	b.n	800bbc4 <__libc_init_array+0xc>
 800bbe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbea:	4798      	blx	r3
 800bbec:	3601      	adds	r6, #1
 800bbee:	e7f2      	b.n	800bbd6 <__libc_init_array+0x1e>
 800bbf0:	0800cd60 	.word	0x0800cd60
 800bbf4:	0800cd60 	.word	0x0800cd60
 800bbf8:	0800cd60 	.word	0x0800cd60
 800bbfc:	0800cd64 	.word	0x0800cd64

0800bc00 <memset>:
 800bc00:	4402      	add	r2, r0
 800bc02:	4603      	mov	r3, r0
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d100      	bne.n	800bc0a <memset+0xa>
 800bc08:	4770      	bx	lr
 800bc0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc0e:	e7f9      	b.n	800bc04 <memset+0x4>

0800bc10 <iprintf>:
 800bc10:	b40f      	push	{r0, r1, r2, r3}
 800bc12:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <iprintf+0x2c>)
 800bc14:	b513      	push	{r0, r1, r4, lr}
 800bc16:	681c      	ldr	r4, [r3, #0]
 800bc18:	b124      	cbz	r4, 800bc24 <iprintf+0x14>
 800bc1a:	69a3      	ldr	r3, [r4, #24]
 800bc1c:	b913      	cbnz	r3, 800bc24 <iprintf+0x14>
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 f866 	bl	800bcf0 <__sinit>
 800bc24:	ab05      	add	r3, sp, #20
 800bc26:	9a04      	ldr	r2, [sp, #16]
 800bc28:	68a1      	ldr	r1, [r4, #8]
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f000 f9bd 	bl	800bfac <_vfiprintf_r>
 800bc32:	b002      	add	sp, #8
 800bc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc38:	b004      	add	sp, #16
 800bc3a:	4770      	bx	lr
 800bc3c:	20000148 	.word	0x20000148

0800bc40 <std>:
 800bc40:	2300      	movs	r3, #0
 800bc42:	b510      	push	{r4, lr}
 800bc44:	4604      	mov	r4, r0
 800bc46:	e9c0 3300 	strd	r3, r3, [r0]
 800bc4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc4e:	6083      	str	r3, [r0, #8]
 800bc50:	8181      	strh	r1, [r0, #12]
 800bc52:	6643      	str	r3, [r0, #100]	; 0x64
 800bc54:	81c2      	strh	r2, [r0, #14]
 800bc56:	6183      	str	r3, [r0, #24]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	2208      	movs	r2, #8
 800bc5c:	305c      	adds	r0, #92	; 0x5c
 800bc5e:	f7ff ffcf 	bl	800bc00 <memset>
 800bc62:	4b05      	ldr	r3, [pc, #20]	; (800bc78 <std+0x38>)
 800bc64:	6263      	str	r3, [r4, #36]	; 0x24
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <std+0x3c>)
 800bc68:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc6a:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <std+0x40>)
 800bc6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <std+0x44>)
 800bc70:	6224      	str	r4, [r4, #32]
 800bc72:	6323      	str	r3, [r4, #48]	; 0x30
 800bc74:	bd10      	pop	{r4, pc}
 800bc76:	bf00      	nop
 800bc78:	0800c555 	.word	0x0800c555
 800bc7c:	0800c577 	.word	0x0800c577
 800bc80:	0800c5af 	.word	0x0800c5af
 800bc84:	0800c5d3 	.word	0x0800c5d3

0800bc88 <_cleanup_r>:
 800bc88:	4901      	ldr	r1, [pc, #4]	; (800bc90 <_cleanup_r+0x8>)
 800bc8a:	f000 b8af 	b.w	800bdec <_fwalk_reent>
 800bc8e:	bf00      	nop
 800bc90:	0800c8ad 	.word	0x0800c8ad

0800bc94 <__sfmoreglue>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	2268      	movs	r2, #104	; 0x68
 800bc98:	1e4d      	subs	r5, r1, #1
 800bc9a:	4355      	muls	r5, r2
 800bc9c:	460e      	mov	r6, r1
 800bc9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bca2:	f000 f8e5 	bl	800be70 <_malloc_r>
 800bca6:	4604      	mov	r4, r0
 800bca8:	b140      	cbz	r0, 800bcbc <__sfmoreglue+0x28>
 800bcaa:	2100      	movs	r1, #0
 800bcac:	e9c0 1600 	strd	r1, r6, [r0]
 800bcb0:	300c      	adds	r0, #12
 800bcb2:	60a0      	str	r0, [r4, #8]
 800bcb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcb8:	f7ff ffa2 	bl	800bc00 <memset>
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}

0800bcc0 <__sfp_lock_acquire>:
 800bcc0:	4801      	ldr	r0, [pc, #4]	; (800bcc8 <__sfp_lock_acquire+0x8>)
 800bcc2:	f000 b8b3 	b.w	800be2c <__retarget_lock_acquire_recursive>
 800bcc6:	bf00      	nop
 800bcc8:	20001d05 	.word	0x20001d05

0800bccc <__sfp_lock_release>:
 800bccc:	4801      	ldr	r0, [pc, #4]	; (800bcd4 <__sfp_lock_release+0x8>)
 800bcce:	f000 b8ae 	b.w	800be2e <__retarget_lock_release_recursive>
 800bcd2:	bf00      	nop
 800bcd4:	20001d05 	.word	0x20001d05

0800bcd8 <__sinit_lock_acquire>:
 800bcd8:	4801      	ldr	r0, [pc, #4]	; (800bce0 <__sinit_lock_acquire+0x8>)
 800bcda:	f000 b8a7 	b.w	800be2c <__retarget_lock_acquire_recursive>
 800bcde:	bf00      	nop
 800bce0:	20001d06 	.word	0x20001d06

0800bce4 <__sinit_lock_release>:
 800bce4:	4801      	ldr	r0, [pc, #4]	; (800bcec <__sinit_lock_release+0x8>)
 800bce6:	f000 b8a2 	b.w	800be2e <__retarget_lock_release_recursive>
 800bcea:	bf00      	nop
 800bcec:	20001d06 	.word	0x20001d06

0800bcf0 <__sinit>:
 800bcf0:	b510      	push	{r4, lr}
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	f7ff fff0 	bl	800bcd8 <__sinit_lock_acquire>
 800bcf8:	69a3      	ldr	r3, [r4, #24]
 800bcfa:	b11b      	cbz	r3, 800bd04 <__sinit+0x14>
 800bcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd00:	f7ff bff0 	b.w	800bce4 <__sinit_lock_release>
 800bd04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd08:	6523      	str	r3, [r4, #80]	; 0x50
 800bd0a:	4b13      	ldr	r3, [pc, #76]	; (800bd58 <__sinit+0x68>)
 800bd0c:	4a13      	ldr	r2, [pc, #76]	; (800bd5c <__sinit+0x6c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd12:	42a3      	cmp	r3, r4
 800bd14:	bf04      	itt	eq
 800bd16:	2301      	moveq	r3, #1
 800bd18:	61a3      	streq	r3, [r4, #24]
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 f820 	bl	800bd60 <__sfp>
 800bd20:	6060      	str	r0, [r4, #4]
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 f81c 	bl	800bd60 <__sfp>
 800bd28:	60a0      	str	r0, [r4, #8]
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 f818 	bl	800bd60 <__sfp>
 800bd30:	2200      	movs	r2, #0
 800bd32:	60e0      	str	r0, [r4, #12]
 800bd34:	2104      	movs	r1, #4
 800bd36:	6860      	ldr	r0, [r4, #4]
 800bd38:	f7ff ff82 	bl	800bc40 <std>
 800bd3c:	68a0      	ldr	r0, [r4, #8]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	2109      	movs	r1, #9
 800bd42:	f7ff ff7d 	bl	800bc40 <std>
 800bd46:	68e0      	ldr	r0, [r4, #12]
 800bd48:	2202      	movs	r2, #2
 800bd4a:	2112      	movs	r1, #18
 800bd4c:	f7ff ff78 	bl	800bc40 <std>
 800bd50:	2301      	movs	r3, #1
 800bd52:	61a3      	str	r3, [r4, #24]
 800bd54:	e7d2      	b.n	800bcfc <__sinit+0xc>
 800bd56:	bf00      	nop
 800bd58:	0800ccc8 	.word	0x0800ccc8
 800bd5c:	0800bc89 	.word	0x0800bc89

0800bd60 <__sfp>:
 800bd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd62:	4607      	mov	r7, r0
 800bd64:	f7ff ffac 	bl	800bcc0 <__sfp_lock_acquire>
 800bd68:	4b1e      	ldr	r3, [pc, #120]	; (800bde4 <__sfp+0x84>)
 800bd6a:	681e      	ldr	r6, [r3, #0]
 800bd6c:	69b3      	ldr	r3, [r6, #24]
 800bd6e:	b913      	cbnz	r3, 800bd76 <__sfp+0x16>
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff ffbd 	bl	800bcf0 <__sinit>
 800bd76:	3648      	adds	r6, #72	; 0x48
 800bd78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	d503      	bpl.n	800bd88 <__sfp+0x28>
 800bd80:	6833      	ldr	r3, [r6, #0]
 800bd82:	b30b      	cbz	r3, 800bdc8 <__sfp+0x68>
 800bd84:	6836      	ldr	r6, [r6, #0]
 800bd86:	e7f7      	b.n	800bd78 <__sfp+0x18>
 800bd88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd8c:	b9d5      	cbnz	r5, 800bdc4 <__sfp+0x64>
 800bd8e:	4b16      	ldr	r3, [pc, #88]	; (800bde8 <__sfp+0x88>)
 800bd90:	60e3      	str	r3, [r4, #12]
 800bd92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd96:	6665      	str	r5, [r4, #100]	; 0x64
 800bd98:	f000 f847 	bl	800be2a <__retarget_lock_init_recursive>
 800bd9c:	f7ff ff96 	bl	800bccc <__sfp_lock_release>
 800bda0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bda4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bda8:	6025      	str	r5, [r4, #0]
 800bdaa:	61a5      	str	r5, [r4, #24]
 800bdac:	2208      	movs	r2, #8
 800bdae:	4629      	mov	r1, r5
 800bdb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdb4:	f7ff ff24 	bl	800bc00 <memset>
 800bdb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc4:	3468      	adds	r4, #104	; 0x68
 800bdc6:	e7d9      	b.n	800bd7c <__sfp+0x1c>
 800bdc8:	2104      	movs	r1, #4
 800bdca:	4638      	mov	r0, r7
 800bdcc:	f7ff ff62 	bl	800bc94 <__sfmoreglue>
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	6030      	str	r0, [r6, #0]
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d1d5      	bne.n	800bd84 <__sfp+0x24>
 800bdd8:	f7ff ff78 	bl	800bccc <__sfp_lock_release>
 800bddc:	230c      	movs	r3, #12
 800bdde:	603b      	str	r3, [r7, #0]
 800bde0:	e7ee      	b.n	800bdc0 <__sfp+0x60>
 800bde2:	bf00      	nop
 800bde4:	0800ccc8 	.word	0x0800ccc8
 800bde8:	ffff0001 	.word	0xffff0001

0800bdec <_fwalk_reent>:
 800bdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	4688      	mov	r8, r1
 800bdf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdf8:	2700      	movs	r7, #0
 800bdfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdfe:	f1b9 0901 	subs.w	r9, r9, #1
 800be02:	d505      	bpl.n	800be10 <_fwalk_reent+0x24>
 800be04:	6824      	ldr	r4, [r4, #0]
 800be06:	2c00      	cmp	r4, #0
 800be08:	d1f7      	bne.n	800bdfa <_fwalk_reent+0xe>
 800be0a:	4638      	mov	r0, r7
 800be0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be10:	89ab      	ldrh	r3, [r5, #12]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d907      	bls.n	800be26 <_fwalk_reent+0x3a>
 800be16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be1a:	3301      	adds	r3, #1
 800be1c:	d003      	beq.n	800be26 <_fwalk_reent+0x3a>
 800be1e:	4629      	mov	r1, r5
 800be20:	4630      	mov	r0, r6
 800be22:	47c0      	blx	r8
 800be24:	4307      	orrs	r7, r0
 800be26:	3568      	adds	r5, #104	; 0x68
 800be28:	e7e9      	b.n	800bdfe <_fwalk_reent+0x12>

0800be2a <__retarget_lock_init_recursive>:
 800be2a:	4770      	bx	lr

0800be2c <__retarget_lock_acquire_recursive>:
 800be2c:	4770      	bx	lr

0800be2e <__retarget_lock_release_recursive>:
 800be2e:	4770      	bx	lr

0800be30 <sbrk_aligned>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	4e0e      	ldr	r6, [pc, #56]	; (800be6c <sbrk_aligned+0x3c>)
 800be34:	460c      	mov	r4, r1
 800be36:	6831      	ldr	r1, [r6, #0]
 800be38:	4605      	mov	r5, r0
 800be3a:	b911      	cbnz	r1, 800be42 <sbrk_aligned+0x12>
 800be3c:	f000 fb7a 	bl	800c534 <_sbrk_r>
 800be40:	6030      	str	r0, [r6, #0]
 800be42:	4621      	mov	r1, r4
 800be44:	4628      	mov	r0, r5
 800be46:	f000 fb75 	bl	800c534 <_sbrk_r>
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	d00a      	beq.n	800be64 <sbrk_aligned+0x34>
 800be4e:	1cc4      	adds	r4, r0, #3
 800be50:	f024 0403 	bic.w	r4, r4, #3
 800be54:	42a0      	cmp	r0, r4
 800be56:	d007      	beq.n	800be68 <sbrk_aligned+0x38>
 800be58:	1a21      	subs	r1, r4, r0
 800be5a:	4628      	mov	r0, r5
 800be5c:	f000 fb6a 	bl	800c534 <_sbrk_r>
 800be60:	3001      	adds	r0, #1
 800be62:	d101      	bne.n	800be68 <sbrk_aligned+0x38>
 800be64:	f04f 34ff 	mov.w	r4, #4294967295
 800be68:	4620      	mov	r0, r4
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	20001d0c 	.word	0x20001d0c

0800be70 <_malloc_r>:
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	1ccd      	adds	r5, r1, #3
 800be76:	f025 0503 	bic.w	r5, r5, #3
 800be7a:	3508      	adds	r5, #8
 800be7c:	2d0c      	cmp	r5, #12
 800be7e:	bf38      	it	cc
 800be80:	250c      	movcc	r5, #12
 800be82:	2d00      	cmp	r5, #0
 800be84:	4607      	mov	r7, r0
 800be86:	db01      	blt.n	800be8c <_malloc_r+0x1c>
 800be88:	42a9      	cmp	r1, r5
 800be8a:	d905      	bls.n	800be98 <_malloc_r+0x28>
 800be8c:	230c      	movs	r3, #12
 800be8e:	603b      	str	r3, [r7, #0]
 800be90:	2600      	movs	r6, #0
 800be92:	4630      	mov	r0, r6
 800be94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be98:	4e2e      	ldr	r6, [pc, #184]	; (800bf54 <_malloc_r+0xe4>)
 800be9a:	f000 fdbb 	bl	800ca14 <__malloc_lock>
 800be9e:	6833      	ldr	r3, [r6, #0]
 800bea0:	461c      	mov	r4, r3
 800bea2:	bb34      	cbnz	r4, 800bef2 <_malloc_r+0x82>
 800bea4:	4629      	mov	r1, r5
 800bea6:	4638      	mov	r0, r7
 800bea8:	f7ff ffc2 	bl	800be30 <sbrk_aligned>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	4604      	mov	r4, r0
 800beb0:	d14d      	bne.n	800bf4e <_malloc_r+0xde>
 800beb2:	6834      	ldr	r4, [r6, #0]
 800beb4:	4626      	mov	r6, r4
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	d140      	bne.n	800bf3c <_malloc_r+0xcc>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	4631      	mov	r1, r6
 800bebe:	4638      	mov	r0, r7
 800bec0:	eb04 0803 	add.w	r8, r4, r3
 800bec4:	f000 fb36 	bl	800c534 <_sbrk_r>
 800bec8:	4580      	cmp	r8, r0
 800beca:	d13a      	bne.n	800bf42 <_malloc_r+0xd2>
 800becc:	6821      	ldr	r1, [r4, #0]
 800bece:	3503      	adds	r5, #3
 800bed0:	1a6d      	subs	r5, r5, r1
 800bed2:	f025 0503 	bic.w	r5, r5, #3
 800bed6:	3508      	adds	r5, #8
 800bed8:	2d0c      	cmp	r5, #12
 800beda:	bf38      	it	cc
 800bedc:	250c      	movcc	r5, #12
 800bede:	4629      	mov	r1, r5
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ffa5 	bl	800be30 <sbrk_aligned>
 800bee6:	3001      	adds	r0, #1
 800bee8:	d02b      	beq.n	800bf42 <_malloc_r+0xd2>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	442b      	add	r3, r5
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	e00e      	b.n	800bf10 <_malloc_r+0xa0>
 800bef2:	6822      	ldr	r2, [r4, #0]
 800bef4:	1b52      	subs	r2, r2, r5
 800bef6:	d41e      	bmi.n	800bf36 <_malloc_r+0xc6>
 800bef8:	2a0b      	cmp	r2, #11
 800befa:	d916      	bls.n	800bf2a <_malloc_r+0xba>
 800befc:	1961      	adds	r1, r4, r5
 800befe:	42a3      	cmp	r3, r4
 800bf00:	6025      	str	r5, [r4, #0]
 800bf02:	bf18      	it	ne
 800bf04:	6059      	strne	r1, [r3, #4]
 800bf06:	6863      	ldr	r3, [r4, #4]
 800bf08:	bf08      	it	eq
 800bf0a:	6031      	streq	r1, [r6, #0]
 800bf0c:	5162      	str	r2, [r4, r5]
 800bf0e:	604b      	str	r3, [r1, #4]
 800bf10:	4638      	mov	r0, r7
 800bf12:	f104 060b 	add.w	r6, r4, #11
 800bf16:	f000 fd83 	bl	800ca20 <__malloc_unlock>
 800bf1a:	f026 0607 	bic.w	r6, r6, #7
 800bf1e:	1d23      	adds	r3, r4, #4
 800bf20:	1af2      	subs	r2, r6, r3
 800bf22:	d0b6      	beq.n	800be92 <_malloc_r+0x22>
 800bf24:	1b9b      	subs	r3, r3, r6
 800bf26:	50a3      	str	r3, [r4, r2]
 800bf28:	e7b3      	b.n	800be92 <_malloc_r+0x22>
 800bf2a:	6862      	ldr	r2, [r4, #4]
 800bf2c:	42a3      	cmp	r3, r4
 800bf2e:	bf0c      	ite	eq
 800bf30:	6032      	streq	r2, [r6, #0]
 800bf32:	605a      	strne	r2, [r3, #4]
 800bf34:	e7ec      	b.n	800bf10 <_malloc_r+0xa0>
 800bf36:	4623      	mov	r3, r4
 800bf38:	6864      	ldr	r4, [r4, #4]
 800bf3a:	e7b2      	b.n	800bea2 <_malloc_r+0x32>
 800bf3c:	4634      	mov	r4, r6
 800bf3e:	6876      	ldr	r6, [r6, #4]
 800bf40:	e7b9      	b.n	800beb6 <_malloc_r+0x46>
 800bf42:	230c      	movs	r3, #12
 800bf44:	603b      	str	r3, [r7, #0]
 800bf46:	4638      	mov	r0, r7
 800bf48:	f000 fd6a 	bl	800ca20 <__malloc_unlock>
 800bf4c:	e7a1      	b.n	800be92 <_malloc_r+0x22>
 800bf4e:	6025      	str	r5, [r4, #0]
 800bf50:	e7de      	b.n	800bf10 <_malloc_r+0xa0>
 800bf52:	bf00      	nop
 800bf54:	20001d08 	.word	0x20001d08

0800bf58 <__sfputc_r>:
 800bf58:	6893      	ldr	r3, [r2, #8]
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	b410      	push	{r4}
 800bf60:	6093      	str	r3, [r2, #8]
 800bf62:	da08      	bge.n	800bf76 <__sfputc_r+0x1e>
 800bf64:	6994      	ldr	r4, [r2, #24]
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	db01      	blt.n	800bf6e <__sfputc_r+0x16>
 800bf6a:	290a      	cmp	r1, #10
 800bf6c:	d103      	bne.n	800bf76 <__sfputc_r+0x1e>
 800bf6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf72:	f000 bb33 	b.w	800c5dc <__swbuf_r>
 800bf76:	6813      	ldr	r3, [r2, #0]
 800bf78:	1c58      	adds	r0, r3, #1
 800bf7a:	6010      	str	r0, [r2, #0]
 800bf7c:	7019      	strb	r1, [r3, #0]
 800bf7e:	4608      	mov	r0, r1
 800bf80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <__sfputs_r>:
 800bf86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf88:	4606      	mov	r6, r0
 800bf8a:	460f      	mov	r7, r1
 800bf8c:	4614      	mov	r4, r2
 800bf8e:	18d5      	adds	r5, r2, r3
 800bf90:	42ac      	cmp	r4, r5
 800bf92:	d101      	bne.n	800bf98 <__sfputs_r+0x12>
 800bf94:	2000      	movs	r0, #0
 800bf96:	e007      	b.n	800bfa8 <__sfputs_r+0x22>
 800bf98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9c:	463a      	mov	r2, r7
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7ff ffda 	bl	800bf58 <__sfputc_r>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d1f3      	bne.n	800bf90 <__sfputs_r+0xa>
 800bfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfac <_vfiprintf_r>:
 800bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	460d      	mov	r5, r1
 800bfb2:	b09d      	sub	sp, #116	; 0x74
 800bfb4:	4614      	mov	r4, r2
 800bfb6:	4698      	mov	r8, r3
 800bfb8:	4606      	mov	r6, r0
 800bfba:	b118      	cbz	r0, 800bfc4 <_vfiprintf_r+0x18>
 800bfbc:	6983      	ldr	r3, [r0, #24]
 800bfbe:	b90b      	cbnz	r3, 800bfc4 <_vfiprintf_r+0x18>
 800bfc0:	f7ff fe96 	bl	800bcf0 <__sinit>
 800bfc4:	4b89      	ldr	r3, [pc, #548]	; (800c1ec <_vfiprintf_r+0x240>)
 800bfc6:	429d      	cmp	r5, r3
 800bfc8:	d11b      	bne.n	800c002 <_vfiprintf_r+0x56>
 800bfca:	6875      	ldr	r5, [r6, #4]
 800bfcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfce:	07d9      	lsls	r1, r3, #31
 800bfd0:	d405      	bmi.n	800bfde <_vfiprintf_r+0x32>
 800bfd2:	89ab      	ldrh	r3, [r5, #12]
 800bfd4:	059a      	lsls	r2, r3, #22
 800bfd6:	d402      	bmi.n	800bfde <_vfiprintf_r+0x32>
 800bfd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfda:	f7ff ff27 	bl	800be2c <__retarget_lock_acquire_recursive>
 800bfde:	89ab      	ldrh	r3, [r5, #12]
 800bfe0:	071b      	lsls	r3, r3, #28
 800bfe2:	d501      	bpl.n	800bfe8 <_vfiprintf_r+0x3c>
 800bfe4:	692b      	ldr	r3, [r5, #16]
 800bfe6:	b9eb      	cbnz	r3, 800c024 <_vfiprintf_r+0x78>
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4630      	mov	r0, r6
 800bfec:	f000 fb5a 	bl	800c6a4 <__swsetup_r>
 800bff0:	b1c0      	cbz	r0, 800c024 <_vfiprintf_r+0x78>
 800bff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff4:	07dc      	lsls	r4, r3, #31
 800bff6:	d50e      	bpl.n	800c016 <_vfiprintf_r+0x6a>
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295
 800bffc:	b01d      	add	sp, #116	; 0x74
 800bffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c002:	4b7b      	ldr	r3, [pc, #492]	; (800c1f0 <_vfiprintf_r+0x244>)
 800c004:	429d      	cmp	r5, r3
 800c006:	d101      	bne.n	800c00c <_vfiprintf_r+0x60>
 800c008:	68b5      	ldr	r5, [r6, #8]
 800c00a:	e7df      	b.n	800bfcc <_vfiprintf_r+0x20>
 800c00c:	4b79      	ldr	r3, [pc, #484]	; (800c1f4 <_vfiprintf_r+0x248>)
 800c00e:	429d      	cmp	r5, r3
 800c010:	bf08      	it	eq
 800c012:	68f5      	ldreq	r5, [r6, #12]
 800c014:	e7da      	b.n	800bfcc <_vfiprintf_r+0x20>
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	0598      	lsls	r0, r3, #22
 800c01a:	d4ed      	bmi.n	800bff8 <_vfiprintf_r+0x4c>
 800c01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c01e:	f7ff ff06 	bl	800be2e <__retarget_lock_release_recursive>
 800c022:	e7e9      	b.n	800bff8 <_vfiprintf_r+0x4c>
 800c024:	2300      	movs	r3, #0
 800c026:	9309      	str	r3, [sp, #36]	; 0x24
 800c028:	2320      	movs	r3, #32
 800c02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c02e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c032:	2330      	movs	r3, #48	; 0x30
 800c034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c1f8 <_vfiprintf_r+0x24c>
 800c038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c03c:	f04f 0901 	mov.w	r9, #1
 800c040:	4623      	mov	r3, r4
 800c042:	469a      	mov	sl, r3
 800c044:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c048:	b10a      	cbz	r2, 800c04e <_vfiprintf_r+0xa2>
 800c04a:	2a25      	cmp	r2, #37	; 0x25
 800c04c:	d1f9      	bne.n	800c042 <_vfiprintf_r+0x96>
 800c04e:	ebba 0b04 	subs.w	fp, sl, r4
 800c052:	d00b      	beq.n	800c06c <_vfiprintf_r+0xc0>
 800c054:	465b      	mov	r3, fp
 800c056:	4622      	mov	r2, r4
 800c058:	4629      	mov	r1, r5
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7ff ff93 	bl	800bf86 <__sfputs_r>
 800c060:	3001      	adds	r0, #1
 800c062:	f000 80aa 	beq.w	800c1ba <_vfiprintf_r+0x20e>
 800c066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c068:	445a      	add	r2, fp
 800c06a:	9209      	str	r2, [sp, #36]	; 0x24
 800c06c:	f89a 3000 	ldrb.w	r3, [sl]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 80a2 	beq.w	800c1ba <_vfiprintf_r+0x20e>
 800c076:	2300      	movs	r3, #0
 800c078:	f04f 32ff 	mov.w	r2, #4294967295
 800c07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c080:	f10a 0a01 	add.w	sl, sl, #1
 800c084:	9304      	str	r3, [sp, #16]
 800c086:	9307      	str	r3, [sp, #28]
 800c088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c08c:	931a      	str	r3, [sp, #104]	; 0x68
 800c08e:	4654      	mov	r4, sl
 800c090:	2205      	movs	r2, #5
 800c092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c096:	4858      	ldr	r0, [pc, #352]	; (800c1f8 <_vfiprintf_r+0x24c>)
 800c098:	f7f4 f872 	bl	8000180 <memchr>
 800c09c:	9a04      	ldr	r2, [sp, #16]
 800c09e:	b9d8      	cbnz	r0, 800c0d8 <_vfiprintf_r+0x12c>
 800c0a0:	06d1      	lsls	r1, r2, #27
 800c0a2:	bf44      	itt	mi
 800c0a4:	2320      	movmi	r3, #32
 800c0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0aa:	0713      	lsls	r3, r2, #28
 800c0ac:	bf44      	itt	mi
 800c0ae:	232b      	movmi	r3, #43	; 0x2b
 800c0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ba:	d015      	beq.n	800c0e8 <_vfiprintf_r+0x13c>
 800c0bc:	9a07      	ldr	r2, [sp, #28]
 800c0be:	4654      	mov	r4, sl
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	f04f 0c0a 	mov.w	ip, #10
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0cc:	3b30      	subs	r3, #48	; 0x30
 800c0ce:	2b09      	cmp	r3, #9
 800c0d0:	d94e      	bls.n	800c170 <_vfiprintf_r+0x1c4>
 800c0d2:	b1b0      	cbz	r0, 800c102 <_vfiprintf_r+0x156>
 800c0d4:	9207      	str	r2, [sp, #28]
 800c0d6:	e014      	b.n	800c102 <_vfiprintf_r+0x156>
 800c0d8:	eba0 0308 	sub.w	r3, r0, r8
 800c0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	9304      	str	r3, [sp, #16]
 800c0e4:	46a2      	mov	sl, r4
 800c0e6:	e7d2      	b.n	800c08e <_vfiprintf_r+0xe2>
 800c0e8:	9b03      	ldr	r3, [sp, #12]
 800c0ea:	1d19      	adds	r1, r3, #4
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	9103      	str	r1, [sp, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bfbb      	ittet	lt
 800c0f4:	425b      	neglt	r3, r3
 800c0f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c0fa:	9307      	strge	r3, [sp, #28]
 800c0fc:	9307      	strlt	r3, [sp, #28]
 800c0fe:	bfb8      	it	lt
 800c100:	9204      	strlt	r2, [sp, #16]
 800c102:	7823      	ldrb	r3, [r4, #0]
 800c104:	2b2e      	cmp	r3, #46	; 0x2e
 800c106:	d10c      	bne.n	800c122 <_vfiprintf_r+0x176>
 800c108:	7863      	ldrb	r3, [r4, #1]
 800c10a:	2b2a      	cmp	r3, #42	; 0x2a
 800c10c:	d135      	bne.n	800c17a <_vfiprintf_r+0x1ce>
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	1d1a      	adds	r2, r3, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	9203      	str	r2, [sp, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	bfb8      	it	lt
 800c11a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c11e:	3402      	adds	r4, #2
 800c120:	9305      	str	r3, [sp, #20]
 800c122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c208 <_vfiprintf_r+0x25c>
 800c126:	7821      	ldrb	r1, [r4, #0]
 800c128:	2203      	movs	r2, #3
 800c12a:	4650      	mov	r0, sl
 800c12c:	f7f4 f828 	bl	8000180 <memchr>
 800c130:	b140      	cbz	r0, 800c144 <_vfiprintf_r+0x198>
 800c132:	2340      	movs	r3, #64	; 0x40
 800c134:	eba0 000a 	sub.w	r0, r0, sl
 800c138:	fa03 f000 	lsl.w	r0, r3, r0
 800c13c:	9b04      	ldr	r3, [sp, #16]
 800c13e:	4303      	orrs	r3, r0
 800c140:	3401      	adds	r4, #1
 800c142:	9304      	str	r3, [sp, #16]
 800c144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c148:	482c      	ldr	r0, [pc, #176]	; (800c1fc <_vfiprintf_r+0x250>)
 800c14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c14e:	2206      	movs	r2, #6
 800c150:	f7f4 f816 	bl	8000180 <memchr>
 800c154:	2800      	cmp	r0, #0
 800c156:	d03f      	beq.n	800c1d8 <_vfiprintf_r+0x22c>
 800c158:	4b29      	ldr	r3, [pc, #164]	; (800c200 <_vfiprintf_r+0x254>)
 800c15a:	bb1b      	cbnz	r3, 800c1a4 <_vfiprintf_r+0x1f8>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	3307      	adds	r3, #7
 800c160:	f023 0307 	bic.w	r3, r3, #7
 800c164:	3308      	adds	r3, #8
 800c166:	9303      	str	r3, [sp, #12]
 800c168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c16a:	443b      	add	r3, r7
 800c16c:	9309      	str	r3, [sp, #36]	; 0x24
 800c16e:	e767      	b.n	800c040 <_vfiprintf_r+0x94>
 800c170:	fb0c 3202 	mla	r2, ip, r2, r3
 800c174:	460c      	mov	r4, r1
 800c176:	2001      	movs	r0, #1
 800c178:	e7a5      	b.n	800c0c6 <_vfiprintf_r+0x11a>
 800c17a:	2300      	movs	r3, #0
 800c17c:	3401      	adds	r4, #1
 800c17e:	9305      	str	r3, [sp, #20]
 800c180:	4619      	mov	r1, r3
 800c182:	f04f 0c0a 	mov.w	ip, #10
 800c186:	4620      	mov	r0, r4
 800c188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c18c:	3a30      	subs	r2, #48	; 0x30
 800c18e:	2a09      	cmp	r2, #9
 800c190:	d903      	bls.n	800c19a <_vfiprintf_r+0x1ee>
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0c5      	beq.n	800c122 <_vfiprintf_r+0x176>
 800c196:	9105      	str	r1, [sp, #20]
 800c198:	e7c3      	b.n	800c122 <_vfiprintf_r+0x176>
 800c19a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c19e:	4604      	mov	r4, r0
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e7f0      	b.n	800c186 <_vfiprintf_r+0x1da>
 800c1a4:	ab03      	add	r3, sp, #12
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	462a      	mov	r2, r5
 800c1aa:	4b16      	ldr	r3, [pc, #88]	; (800c204 <_vfiprintf_r+0x258>)
 800c1ac:	a904      	add	r1, sp, #16
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f3af 8000 	nop.w
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	1c78      	adds	r0, r7, #1
 800c1b8:	d1d6      	bne.n	800c168 <_vfiprintf_r+0x1bc>
 800c1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1bc:	07d9      	lsls	r1, r3, #31
 800c1be:	d405      	bmi.n	800c1cc <_vfiprintf_r+0x220>
 800c1c0:	89ab      	ldrh	r3, [r5, #12]
 800c1c2:	059a      	lsls	r2, r3, #22
 800c1c4:	d402      	bmi.n	800c1cc <_vfiprintf_r+0x220>
 800c1c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1c8:	f7ff fe31 	bl	800be2e <__retarget_lock_release_recursive>
 800c1cc:	89ab      	ldrh	r3, [r5, #12]
 800c1ce:	065b      	lsls	r3, r3, #25
 800c1d0:	f53f af12 	bmi.w	800bff8 <_vfiprintf_r+0x4c>
 800c1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1d6:	e711      	b.n	800bffc <_vfiprintf_r+0x50>
 800c1d8:	ab03      	add	r3, sp, #12
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	462a      	mov	r2, r5
 800c1de:	4b09      	ldr	r3, [pc, #36]	; (800c204 <_vfiprintf_r+0x258>)
 800c1e0:	a904      	add	r1, sp, #16
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f000 f880 	bl	800c2e8 <_printf_i>
 800c1e8:	e7e4      	b.n	800c1b4 <_vfiprintf_r+0x208>
 800c1ea:	bf00      	nop
 800c1ec:	0800ccec 	.word	0x0800ccec
 800c1f0:	0800cd0c 	.word	0x0800cd0c
 800c1f4:	0800cccc 	.word	0x0800cccc
 800c1f8:	0800cd2c 	.word	0x0800cd2c
 800c1fc:	0800cd36 	.word	0x0800cd36
 800c200:	00000000 	.word	0x00000000
 800c204:	0800bf87 	.word	0x0800bf87
 800c208:	0800cd32 	.word	0x0800cd32

0800c20c <_printf_common>:
 800c20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c210:	4616      	mov	r6, r2
 800c212:	4699      	mov	r9, r3
 800c214:	688a      	ldr	r2, [r1, #8]
 800c216:	690b      	ldr	r3, [r1, #16]
 800c218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c21c:	4293      	cmp	r3, r2
 800c21e:	bfb8      	it	lt
 800c220:	4613      	movlt	r3, r2
 800c222:	6033      	str	r3, [r6, #0]
 800c224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c228:	4607      	mov	r7, r0
 800c22a:	460c      	mov	r4, r1
 800c22c:	b10a      	cbz	r2, 800c232 <_printf_common+0x26>
 800c22e:	3301      	adds	r3, #1
 800c230:	6033      	str	r3, [r6, #0]
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	0699      	lsls	r1, r3, #26
 800c236:	bf42      	ittt	mi
 800c238:	6833      	ldrmi	r3, [r6, #0]
 800c23a:	3302      	addmi	r3, #2
 800c23c:	6033      	strmi	r3, [r6, #0]
 800c23e:	6825      	ldr	r5, [r4, #0]
 800c240:	f015 0506 	ands.w	r5, r5, #6
 800c244:	d106      	bne.n	800c254 <_printf_common+0x48>
 800c246:	f104 0a19 	add.w	sl, r4, #25
 800c24a:	68e3      	ldr	r3, [r4, #12]
 800c24c:	6832      	ldr	r2, [r6, #0]
 800c24e:	1a9b      	subs	r3, r3, r2
 800c250:	42ab      	cmp	r3, r5
 800c252:	dc26      	bgt.n	800c2a2 <_printf_common+0x96>
 800c254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c258:	1e13      	subs	r3, r2, #0
 800c25a:	6822      	ldr	r2, [r4, #0]
 800c25c:	bf18      	it	ne
 800c25e:	2301      	movne	r3, #1
 800c260:	0692      	lsls	r2, r2, #26
 800c262:	d42b      	bmi.n	800c2bc <_printf_common+0xb0>
 800c264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c268:	4649      	mov	r1, r9
 800c26a:	4638      	mov	r0, r7
 800c26c:	47c0      	blx	r8
 800c26e:	3001      	adds	r0, #1
 800c270:	d01e      	beq.n	800c2b0 <_printf_common+0xa4>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	68e5      	ldr	r5, [r4, #12]
 800c276:	6832      	ldr	r2, [r6, #0]
 800c278:	f003 0306 	and.w	r3, r3, #6
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	bf08      	it	eq
 800c280:	1aad      	subeq	r5, r5, r2
 800c282:	68a3      	ldr	r3, [r4, #8]
 800c284:	6922      	ldr	r2, [r4, #16]
 800c286:	bf0c      	ite	eq
 800c288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c28c:	2500      	movne	r5, #0
 800c28e:	4293      	cmp	r3, r2
 800c290:	bfc4      	itt	gt
 800c292:	1a9b      	subgt	r3, r3, r2
 800c294:	18ed      	addgt	r5, r5, r3
 800c296:	2600      	movs	r6, #0
 800c298:	341a      	adds	r4, #26
 800c29a:	42b5      	cmp	r5, r6
 800c29c:	d11a      	bne.n	800c2d4 <_printf_common+0xc8>
 800c29e:	2000      	movs	r0, #0
 800c2a0:	e008      	b.n	800c2b4 <_printf_common+0xa8>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4652      	mov	r2, sl
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	47c0      	blx	r8
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d103      	bne.n	800c2b8 <_printf_common+0xac>
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b8:	3501      	adds	r5, #1
 800c2ba:	e7c6      	b.n	800c24a <_printf_common+0x3e>
 800c2bc:	18e1      	adds	r1, r4, r3
 800c2be:	1c5a      	adds	r2, r3, #1
 800c2c0:	2030      	movs	r0, #48	; 0x30
 800c2c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2c6:	4422      	add	r2, r4
 800c2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2d0:	3302      	adds	r3, #2
 800c2d2:	e7c7      	b.n	800c264 <_printf_common+0x58>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	4649      	mov	r1, r9
 800c2da:	4638      	mov	r0, r7
 800c2dc:	47c0      	blx	r8
 800c2de:	3001      	adds	r0, #1
 800c2e0:	d0e6      	beq.n	800c2b0 <_printf_common+0xa4>
 800c2e2:	3601      	adds	r6, #1
 800c2e4:	e7d9      	b.n	800c29a <_printf_common+0x8e>
	...

0800c2e8 <_printf_i>:
 800c2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ec:	7e0f      	ldrb	r7, [r1, #24]
 800c2ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2f0:	2f78      	cmp	r7, #120	; 0x78
 800c2f2:	4691      	mov	r9, r2
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	469a      	mov	sl, r3
 800c2fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2fe:	d807      	bhi.n	800c310 <_printf_i+0x28>
 800c300:	2f62      	cmp	r7, #98	; 0x62
 800c302:	d80a      	bhi.n	800c31a <_printf_i+0x32>
 800c304:	2f00      	cmp	r7, #0
 800c306:	f000 80d8 	beq.w	800c4ba <_printf_i+0x1d2>
 800c30a:	2f58      	cmp	r7, #88	; 0x58
 800c30c:	f000 80a3 	beq.w	800c456 <_printf_i+0x16e>
 800c310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c318:	e03a      	b.n	800c390 <_printf_i+0xa8>
 800c31a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c31e:	2b15      	cmp	r3, #21
 800c320:	d8f6      	bhi.n	800c310 <_printf_i+0x28>
 800c322:	a101      	add	r1, pc, #4	; (adr r1, 800c328 <_printf_i+0x40>)
 800c324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c328:	0800c381 	.word	0x0800c381
 800c32c:	0800c395 	.word	0x0800c395
 800c330:	0800c311 	.word	0x0800c311
 800c334:	0800c311 	.word	0x0800c311
 800c338:	0800c311 	.word	0x0800c311
 800c33c:	0800c311 	.word	0x0800c311
 800c340:	0800c395 	.word	0x0800c395
 800c344:	0800c311 	.word	0x0800c311
 800c348:	0800c311 	.word	0x0800c311
 800c34c:	0800c311 	.word	0x0800c311
 800c350:	0800c311 	.word	0x0800c311
 800c354:	0800c4a1 	.word	0x0800c4a1
 800c358:	0800c3c5 	.word	0x0800c3c5
 800c35c:	0800c483 	.word	0x0800c483
 800c360:	0800c311 	.word	0x0800c311
 800c364:	0800c311 	.word	0x0800c311
 800c368:	0800c4c3 	.word	0x0800c4c3
 800c36c:	0800c311 	.word	0x0800c311
 800c370:	0800c3c5 	.word	0x0800c3c5
 800c374:	0800c311 	.word	0x0800c311
 800c378:	0800c311 	.word	0x0800c311
 800c37c:	0800c48b 	.word	0x0800c48b
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	1d1a      	adds	r2, r3, #4
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	602a      	str	r2, [r5, #0]
 800c388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c390:	2301      	movs	r3, #1
 800c392:	e0a3      	b.n	800c4dc <_printf_i+0x1f4>
 800c394:	6820      	ldr	r0, [r4, #0]
 800c396:	6829      	ldr	r1, [r5, #0]
 800c398:	0606      	lsls	r6, r0, #24
 800c39a:	f101 0304 	add.w	r3, r1, #4
 800c39e:	d50a      	bpl.n	800c3b6 <_printf_i+0xce>
 800c3a0:	680e      	ldr	r6, [r1, #0]
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	da03      	bge.n	800c3b0 <_printf_i+0xc8>
 800c3a8:	232d      	movs	r3, #45	; 0x2d
 800c3aa:	4276      	negs	r6, r6
 800c3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3b0:	485e      	ldr	r0, [pc, #376]	; (800c52c <_printf_i+0x244>)
 800c3b2:	230a      	movs	r3, #10
 800c3b4:	e019      	b.n	800c3ea <_printf_i+0x102>
 800c3b6:	680e      	ldr	r6, [r1, #0]
 800c3b8:	602b      	str	r3, [r5, #0]
 800c3ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3be:	bf18      	it	ne
 800c3c0:	b236      	sxthne	r6, r6
 800c3c2:	e7ef      	b.n	800c3a4 <_printf_i+0xbc>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	6820      	ldr	r0, [r4, #0]
 800c3c8:	1d19      	adds	r1, r3, #4
 800c3ca:	6029      	str	r1, [r5, #0]
 800c3cc:	0601      	lsls	r1, r0, #24
 800c3ce:	d501      	bpl.n	800c3d4 <_printf_i+0xec>
 800c3d0:	681e      	ldr	r6, [r3, #0]
 800c3d2:	e002      	b.n	800c3da <_printf_i+0xf2>
 800c3d4:	0646      	lsls	r6, r0, #25
 800c3d6:	d5fb      	bpl.n	800c3d0 <_printf_i+0xe8>
 800c3d8:	881e      	ldrh	r6, [r3, #0]
 800c3da:	4854      	ldr	r0, [pc, #336]	; (800c52c <_printf_i+0x244>)
 800c3dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c3de:	bf0c      	ite	eq
 800c3e0:	2308      	moveq	r3, #8
 800c3e2:	230a      	movne	r3, #10
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3ea:	6865      	ldr	r5, [r4, #4]
 800c3ec:	60a5      	str	r5, [r4, #8]
 800c3ee:	2d00      	cmp	r5, #0
 800c3f0:	bfa2      	ittt	ge
 800c3f2:	6821      	ldrge	r1, [r4, #0]
 800c3f4:	f021 0104 	bicge.w	r1, r1, #4
 800c3f8:	6021      	strge	r1, [r4, #0]
 800c3fa:	b90e      	cbnz	r6, 800c400 <_printf_i+0x118>
 800c3fc:	2d00      	cmp	r5, #0
 800c3fe:	d04d      	beq.n	800c49c <_printf_i+0x1b4>
 800c400:	4615      	mov	r5, r2
 800c402:	fbb6 f1f3 	udiv	r1, r6, r3
 800c406:	fb03 6711 	mls	r7, r3, r1, r6
 800c40a:	5dc7      	ldrb	r7, [r0, r7]
 800c40c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c410:	4637      	mov	r7, r6
 800c412:	42bb      	cmp	r3, r7
 800c414:	460e      	mov	r6, r1
 800c416:	d9f4      	bls.n	800c402 <_printf_i+0x11a>
 800c418:	2b08      	cmp	r3, #8
 800c41a:	d10b      	bne.n	800c434 <_printf_i+0x14c>
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	07de      	lsls	r6, r3, #31
 800c420:	d508      	bpl.n	800c434 <_printf_i+0x14c>
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	6861      	ldr	r1, [r4, #4]
 800c426:	4299      	cmp	r1, r3
 800c428:	bfde      	ittt	le
 800c42a:	2330      	movle	r3, #48	; 0x30
 800c42c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c430:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c434:	1b52      	subs	r2, r2, r5
 800c436:	6122      	str	r2, [r4, #16]
 800c438:	f8cd a000 	str.w	sl, [sp]
 800c43c:	464b      	mov	r3, r9
 800c43e:	aa03      	add	r2, sp, #12
 800c440:	4621      	mov	r1, r4
 800c442:	4640      	mov	r0, r8
 800c444:	f7ff fee2 	bl	800c20c <_printf_common>
 800c448:	3001      	adds	r0, #1
 800c44a:	d14c      	bne.n	800c4e6 <_printf_i+0x1fe>
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295
 800c450:	b004      	add	sp, #16
 800c452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c456:	4835      	ldr	r0, [pc, #212]	; (800c52c <_printf_i+0x244>)
 800c458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c45c:	6829      	ldr	r1, [r5, #0]
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	f851 6b04 	ldr.w	r6, [r1], #4
 800c464:	6029      	str	r1, [r5, #0]
 800c466:	061d      	lsls	r5, r3, #24
 800c468:	d514      	bpl.n	800c494 <_printf_i+0x1ac>
 800c46a:	07df      	lsls	r7, r3, #31
 800c46c:	bf44      	itt	mi
 800c46e:	f043 0320 	orrmi.w	r3, r3, #32
 800c472:	6023      	strmi	r3, [r4, #0]
 800c474:	b91e      	cbnz	r6, 800c47e <_printf_i+0x196>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	f023 0320 	bic.w	r3, r3, #32
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	2310      	movs	r3, #16
 800c480:	e7b0      	b.n	800c3e4 <_printf_i+0xfc>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	f043 0320 	orr.w	r3, r3, #32
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	2378      	movs	r3, #120	; 0x78
 800c48c:	4828      	ldr	r0, [pc, #160]	; (800c530 <_printf_i+0x248>)
 800c48e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c492:	e7e3      	b.n	800c45c <_printf_i+0x174>
 800c494:	0659      	lsls	r1, r3, #25
 800c496:	bf48      	it	mi
 800c498:	b2b6      	uxthmi	r6, r6
 800c49a:	e7e6      	b.n	800c46a <_printf_i+0x182>
 800c49c:	4615      	mov	r5, r2
 800c49e:	e7bb      	b.n	800c418 <_printf_i+0x130>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	6826      	ldr	r6, [r4, #0]
 800c4a4:	6961      	ldr	r1, [r4, #20]
 800c4a6:	1d18      	adds	r0, r3, #4
 800c4a8:	6028      	str	r0, [r5, #0]
 800c4aa:	0635      	lsls	r5, r6, #24
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	d501      	bpl.n	800c4b4 <_printf_i+0x1cc>
 800c4b0:	6019      	str	r1, [r3, #0]
 800c4b2:	e002      	b.n	800c4ba <_printf_i+0x1d2>
 800c4b4:	0670      	lsls	r0, r6, #25
 800c4b6:	d5fb      	bpl.n	800c4b0 <_printf_i+0x1c8>
 800c4b8:	8019      	strh	r1, [r3, #0]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	6123      	str	r3, [r4, #16]
 800c4be:	4615      	mov	r5, r2
 800c4c0:	e7ba      	b.n	800c438 <_printf_i+0x150>
 800c4c2:	682b      	ldr	r3, [r5, #0]
 800c4c4:	1d1a      	adds	r2, r3, #4
 800c4c6:	602a      	str	r2, [r5, #0]
 800c4c8:	681d      	ldr	r5, [r3, #0]
 800c4ca:	6862      	ldr	r2, [r4, #4]
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7f3 fe56 	bl	8000180 <memchr>
 800c4d4:	b108      	cbz	r0, 800c4da <_printf_i+0x1f2>
 800c4d6:	1b40      	subs	r0, r0, r5
 800c4d8:	6060      	str	r0, [r4, #4]
 800c4da:	6863      	ldr	r3, [r4, #4]
 800c4dc:	6123      	str	r3, [r4, #16]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4e4:	e7a8      	b.n	800c438 <_printf_i+0x150>
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	462a      	mov	r2, r5
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	47d0      	blx	sl
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d0ab      	beq.n	800c44c <_printf_i+0x164>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	079b      	lsls	r3, r3, #30
 800c4f8:	d413      	bmi.n	800c522 <_printf_i+0x23a>
 800c4fa:	68e0      	ldr	r0, [r4, #12]
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	4298      	cmp	r0, r3
 800c500:	bfb8      	it	lt
 800c502:	4618      	movlt	r0, r3
 800c504:	e7a4      	b.n	800c450 <_printf_i+0x168>
 800c506:	2301      	movs	r3, #1
 800c508:	4632      	mov	r2, r6
 800c50a:	4649      	mov	r1, r9
 800c50c:	4640      	mov	r0, r8
 800c50e:	47d0      	blx	sl
 800c510:	3001      	adds	r0, #1
 800c512:	d09b      	beq.n	800c44c <_printf_i+0x164>
 800c514:	3501      	adds	r5, #1
 800c516:	68e3      	ldr	r3, [r4, #12]
 800c518:	9903      	ldr	r1, [sp, #12]
 800c51a:	1a5b      	subs	r3, r3, r1
 800c51c:	42ab      	cmp	r3, r5
 800c51e:	dcf2      	bgt.n	800c506 <_printf_i+0x21e>
 800c520:	e7eb      	b.n	800c4fa <_printf_i+0x212>
 800c522:	2500      	movs	r5, #0
 800c524:	f104 0619 	add.w	r6, r4, #25
 800c528:	e7f5      	b.n	800c516 <_printf_i+0x22e>
 800c52a:	bf00      	nop
 800c52c:	0800cd3d 	.word	0x0800cd3d
 800c530:	0800cd4e 	.word	0x0800cd4e

0800c534 <_sbrk_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4d06      	ldr	r5, [pc, #24]	; (800c550 <_sbrk_r+0x1c>)
 800c538:	2300      	movs	r3, #0
 800c53a:	4604      	mov	r4, r0
 800c53c:	4608      	mov	r0, r1
 800c53e:	602b      	str	r3, [r5, #0]
 800c540:	f7f4 fc7e 	bl	8000e40 <_sbrk>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	d102      	bne.n	800c54e <_sbrk_r+0x1a>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	b103      	cbz	r3, 800c54e <_sbrk_r+0x1a>
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	20001d10 	.word	0x20001d10

0800c554 <__sread>:
 800c554:	b510      	push	{r4, lr}
 800c556:	460c      	mov	r4, r1
 800c558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55c:	f000 fab2 	bl	800cac4 <_read_r>
 800c560:	2800      	cmp	r0, #0
 800c562:	bfab      	itete	ge
 800c564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c566:	89a3      	ldrhlt	r3, [r4, #12]
 800c568:	181b      	addge	r3, r3, r0
 800c56a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c56e:	bfac      	ite	ge
 800c570:	6563      	strge	r3, [r4, #84]	; 0x54
 800c572:	81a3      	strhlt	r3, [r4, #12]
 800c574:	bd10      	pop	{r4, pc}

0800c576 <__swrite>:
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	461f      	mov	r7, r3
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	05db      	lsls	r3, r3, #23
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4616      	mov	r6, r2
 800c586:	d505      	bpl.n	800c594 <__swrite+0x1e>
 800c588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c58c:	2302      	movs	r3, #2
 800c58e:	2200      	movs	r2, #0
 800c590:	f000 f9c8 	bl	800c924 <_lseek_r>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5aa:	f000 b869 	b.w	800c680 <_write_r>

0800c5ae <__sseek>:
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b6:	f000 f9b5 	bl	800c924 <_lseek_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	bf15      	itete	ne
 800c5c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ca:	81a3      	strheq	r3, [r4, #12]
 800c5cc:	bf18      	it	ne
 800c5ce:	81a3      	strhne	r3, [r4, #12]
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <__sclose>:
 800c5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d6:	f000 b8d3 	b.w	800c780 <_close_r>
	...

0800c5dc <__swbuf_r>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	460e      	mov	r6, r1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	b118      	cbz	r0, 800c5ee <__swbuf_r+0x12>
 800c5e6:	6983      	ldr	r3, [r0, #24]
 800c5e8:	b90b      	cbnz	r3, 800c5ee <__swbuf_r+0x12>
 800c5ea:	f7ff fb81 	bl	800bcf0 <__sinit>
 800c5ee:	4b21      	ldr	r3, [pc, #132]	; (800c674 <__swbuf_r+0x98>)
 800c5f0:	429c      	cmp	r4, r3
 800c5f2:	d12b      	bne.n	800c64c <__swbuf_r+0x70>
 800c5f4:	686c      	ldr	r4, [r5, #4]
 800c5f6:	69a3      	ldr	r3, [r4, #24]
 800c5f8:	60a3      	str	r3, [r4, #8]
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	071a      	lsls	r2, r3, #28
 800c5fe:	d52f      	bpl.n	800c660 <__swbuf_r+0x84>
 800c600:	6923      	ldr	r3, [r4, #16]
 800c602:	b36b      	cbz	r3, 800c660 <__swbuf_r+0x84>
 800c604:	6923      	ldr	r3, [r4, #16]
 800c606:	6820      	ldr	r0, [r4, #0]
 800c608:	1ac0      	subs	r0, r0, r3
 800c60a:	6963      	ldr	r3, [r4, #20]
 800c60c:	b2f6      	uxtb	r6, r6
 800c60e:	4283      	cmp	r3, r0
 800c610:	4637      	mov	r7, r6
 800c612:	dc04      	bgt.n	800c61e <__swbuf_r+0x42>
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f948 	bl	800c8ac <_fflush_r>
 800c61c:	bb30      	cbnz	r0, 800c66c <__swbuf_r+0x90>
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	3b01      	subs	r3, #1
 800c622:	60a3      	str	r3, [r4, #8]
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	6022      	str	r2, [r4, #0]
 800c62a:	701e      	strb	r6, [r3, #0]
 800c62c:	6963      	ldr	r3, [r4, #20]
 800c62e:	3001      	adds	r0, #1
 800c630:	4283      	cmp	r3, r0
 800c632:	d004      	beq.n	800c63e <__swbuf_r+0x62>
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	07db      	lsls	r3, r3, #31
 800c638:	d506      	bpl.n	800c648 <__swbuf_r+0x6c>
 800c63a:	2e0a      	cmp	r6, #10
 800c63c:	d104      	bne.n	800c648 <__swbuf_r+0x6c>
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f000 f933 	bl	800c8ac <_fflush_r>
 800c646:	b988      	cbnz	r0, 800c66c <__swbuf_r+0x90>
 800c648:	4638      	mov	r0, r7
 800c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <__swbuf_r+0x9c>)
 800c64e:	429c      	cmp	r4, r3
 800c650:	d101      	bne.n	800c656 <__swbuf_r+0x7a>
 800c652:	68ac      	ldr	r4, [r5, #8]
 800c654:	e7cf      	b.n	800c5f6 <__swbuf_r+0x1a>
 800c656:	4b09      	ldr	r3, [pc, #36]	; (800c67c <__swbuf_r+0xa0>)
 800c658:	429c      	cmp	r4, r3
 800c65a:	bf08      	it	eq
 800c65c:	68ec      	ldreq	r4, [r5, #12]
 800c65e:	e7ca      	b.n	800c5f6 <__swbuf_r+0x1a>
 800c660:	4621      	mov	r1, r4
 800c662:	4628      	mov	r0, r5
 800c664:	f000 f81e 	bl	800c6a4 <__swsetup_r>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d0cb      	beq.n	800c604 <__swbuf_r+0x28>
 800c66c:	f04f 37ff 	mov.w	r7, #4294967295
 800c670:	e7ea      	b.n	800c648 <__swbuf_r+0x6c>
 800c672:	bf00      	nop
 800c674:	0800ccec 	.word	0x0800ccec
 800c678:	0800cd0c 	.word	0x0800cd0c
 800c67c:	0800cccc 	.word	0x0800cccc

0800c680 <_write_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d07      	ldr	r5, [pc, #28]	; (800c6a0 <_write_r+0x20>)
 800c684:	4604      	mov	r4, r0
 800c686:	4608      	mov	r0, r1
 800c688:	4611      	mov	r1, r2
 800c68a:	2200      	movs	r2, #0
 800c68c:	602a      	str	r2, [r5, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	f7f4 f9a0 	bl	80009d4 <_write>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_write_r+0x1e>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_write_r+0x1e>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	20001d10 	.word	0x20001d10

0800c6a4 <__swsetup_r>:
 800c6a4:	4b32      	ldr	r3, [pc, #200]	; (800c770 <__swsetup_r+0xcc>)
 800c6a6:	b570      	push	{r4, r5, r6, lr}
 800c6a8:	681d      	ldr	r5, [r3, #0]
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	b125      	cbz	r5, 800c6ba <__swsetup_r+0x16>
 800c6b0:	69ab      	ldr	r3, [r5, #24]
 800c6b2:	b913      	cbnz	r3, 800c6ba <__swsetup_r+0x16>
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f7ff fb1b 	bl	800bcf0 <__sinit>
 800c6ba:	4b2e      	ldr	r3, [pc, #184]	; (800c774 <__swsetup_r+0xd0>)
 800c6bc:	429c      	cmp	r4, r3
 800c6be:	d10f      	bne.n	800c6e0 <__swsetup_r+0x3c>
 800c6c0:	686c      	ldr	r4, [r5, #4]
 800c6c2:	89a3      	ldrh	r3, [r4, #12]
 800c6c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6c8:	0719      	lsls	r1, r3, #28
 800c6ca:	d42c      	bmi.n	800c726 <__swsetup_r+0x82>
 800c6cc:	06dd      	lsls	r5, r3, #27
 800c6ce:	d411      	bmi.n	800c6f4 <__swsetup_r+0x50>
 800c6d0:	2309      	movs	r3, #9
 800c6d2:	6033      	str	r3, [r6, #0]
 800c6d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	f04f 30ff 	mov.w	r0, #4294967295
 800c6de:	e03e      	b.n	800c75e <__swsetup_r+0xba>
 800c6e0:	4b25      	ldr	r3, [pc, #148]	; (800c778 <__swsetup_r+0xd4>)
 800c6e2:	429c      	cmp	r4, r3
 800c6e4:	d101      	bne.n	800c6ea <__swsetup_r+0x46>
 800c6e6:	68ac      	ldr	r4, [r5, #8]
 800c6e8:	e7eb      	b.n	800c6c2 <__swsetup_r+0x1e>
 800c6ea:	4b24      	ldr	r3, [pc, #144]	; (800c77c <__swsetup_r+0xd8>)
 800c6ec:	429c      	cmp	r4, r3
 800c6ee:	bf08      	it	eq
 800c6f0:	68ec      	ldreq	r4, [r5, #12]
 800c6f2:	e7e6      	b.n	800c6c2 <__swsetup_r+0x1e>
 800c6f4:	0758      	lsls	r0, r3, #29
 800c6f6:	d512      	bpl.n	800c71e <__swsetup_r+0x7a>
 800c6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6fa:	b141      	cbz	r1, 800c70e <__swsetup_r+0x6a>
 800c6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c700:	4299      	cmp	r1, r3
 800c702:	d002      	beq.n	800c70a <__swsetup_r+0x66>
 800c704:	4630      	mov	r0, r6
 800c706:	f000 f991 	bl	800ca2c <_free_r>
 800c70a:	2300      	movs	r3, #0
 800c70c:	6363      	str	r3, [r4, #52]	; 0x34
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	2300      	movs	r3, #0
 800c718:	6063      	str	r3, [r4, #4]
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	89a3      	ldrh	r3, [r4, #12]
 800c720:	f043 0308 	orr.w	r3, r3, #8
 800c724:	81a3      	strh	r3, [r4, #12]
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	b94b      	cbnz	r3, 800c73e <__swsetup_r+0x9a>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c734:	d003      	beq.n	800c73e <__swsetup_r+0x9a>
 800c736:	4621      	mov	r1, r4
 800c738:	4630      	mov	r0, r6
 800c73a:	f000 f92b 	bl	800c994 <__smakebuf_r>
 800c73e:	89a0      	ldrh	r0, [r4, #12]
 800c740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c744:	f010 0301 	ands.w	r3, r0, #1
 800c748:	d00a      	beq.n	800c760 <__swsetup_r+0xbc>
 800c74a:	2300      	movs	r3, #0
 800c74c:	60a3      	str	r3, [r4, #8]
 800c74e:	6963      	ldr	r3, [r4, #20]
 800c750:	425b      	negs	r3, r3
 800c752:	61a3      	str	r3, [r4, #24]
 800c754:	6923      	ldr	r3, [r4, #16]
 800c756:	b943      	cbnz	r3, 800c76a <__swsetup_r+0xc6>
 800c758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c75c:	d1ba      	bne.n	800c6d4 <__swsetup_r+0x30>
 800c75e:	bd70      	pop	{r4, r5, r6, pc}
 800c760:	0781      	lsls	r1, r0, #30
 800c762:	bf58      	it	pl
 800c764:	6963      	ldrpl	r3, [r4, #20]
 800c766:	60a3      	str	r3, [r4, #8]
 800c768:	e7f4      	b.n	800c754 <__swsetup_r+0xb0>
 800c76a:	2000      	movs	r0, #0
 800c76c:	e7f7      	b.n	800c75e <__swsetup_r+0xba>
 800c76e:	bf00      	nop
 800c770:	20000148 	.word	0x20000148
 800c774:	0800ccec 	.word	0x0800ccec
 800c778:	0800cd0c 	.word	0x0800cd0c
 800c77c:	0800cccc 	.word	0x0800cccc

0800c780 <_close_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d06      	ldr	r5, [pc, #24]	; (800c79c <_close_r+0x1c>)
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	602b      	str	r3, [r5, #0]
 800c78c:	f7f4 fb23 	bl	8000dd6 <_close>
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d102      	bne.n	800c79a <_close_r+0x1a>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	b103      	cbz	r3, 800c79a <_close_r+0x1a>
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
 800c79c:	20001d10 	.word	0x20001d10

0800c7a0 <__sflush_r>:
 800c7a0:	898a      	ldrh	r2, [r1, #12]
 800c7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	0710      	lsls	r0, r2, #28
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	d458      	bmi.n	800c860 <__sflush_r+0xc0>
 800c7ae:	684b      	ldr	r3, [r1, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dc05      	bgt.n	800c7c0 <__sflush_r+0x20>
 800c7b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	dc02      	bgt.n	800c7c0 <__sflush_r+0x20>
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7c2:	2e00      	cmp	r6, #0
 800c7c4:	d0f9      	beq.n	800c7ba <__sflush_r+0x1a>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7cc:	682f      	ldr	r7, [r5, #0]
 800c7ce:	602b      	str	r3, [r5, #0]
 800c7d0:	d032      	beq.n	800c838 <__sflush_r+0x98>
 800c7d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	075a      	lsls	r2, r3, #29
 800c7d8:	d505      	bpl.n	800c7e6 <__sflush_r+0x46>
 800c7da:	6863      	ldr	r3, [r4, #4]
 800c7dc:	1ac0      	subs	r0, r0, r3
 800c7de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7e0:	b10b      	cbz	r3, 800c7e6 <__sflush_r+0x46>
 800c7e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7e4:	1ac0      	subs	r0, r0, r3
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ec:	6a21      	ldr	r1, [r4, #32]
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	47b0      	blx	r6
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	89a3      	ldrh	r3, [r4, #12]
 800c7f6:	d106      	bne.n	800c806 <__sflush_r+0x66>
 800c7f8:	6829      	ldr	r1, [r5, #0]
 800c7fa:	291d      	cmp	r1, #29
 800c7fc:	d82c      	bhi.n	800c858 <__sflush_r+0xb8>
 800c7fe:	4a2a      	ldr	r2, [pc, #168]	; (800c8a8 <__sflush_r+0x108>)
 800c800:	40ca      	lsrs	r2, r1
 800c802:	07d6      	lsls	r6, r2, #31
 800c804:	d528      	bpl.n	800c858 <__sflush_r+0xb8>
 800c806:	2200      	movs	r2, #0
 800c808:	6062      	str	r2, [r4, #4]
 800c80a:	04d9      	lsls	r1, r3, #19
 800c80c:	6922      	ldr	r2, [r4, #16]
 800c80e:	6022      	str	r2, [r4, #0]
 800c810:	d504      	bpl.n	800c81c <__sflush_r+0x7c>
 800c812:	1c42      	adds	r2, r0, #1
 800c814:	d101      	bne.n	800c81a <__sflush_r+0x7a>
 800c816:	682b      	ldr	r3, [r5, #0]
 800c818:	b903      	cbnz	r3, 800c81c <__sflush_r+0x7c>
 800c81a:	6560      	str	r0, [r4, #84]	; 0x54
 800c81c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c81e:	602f      	str	r7, [r5, #0]
 800c820:	2900      	cmp	r1, #0
 800c822:	d0ca      	beq.n	800c7ba <__sflush_r+0x1a>
 800c824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c828:	4299      	cmp	r1, r3
 800c82a:	d002      	beq.n	800c832 <__sflush_r+0x92>
 800c82c:	4628      	mov	r0, r5
 800c82e:	f000 f8fd 	bl	800ca2c <_free_r>
 800c832:	2000      	movs	r0, #0
 800c834:	6360      	str	r0, [r4, #52]	; 0x34
 800c836:	e7c1      	b.n	800c7bc <__sflush_r+0x1c>
 800c838:	6a21      	ldr	r1, [r4, #32]
 800c83a:	2301      	movs	r3, #1
 800c83c:	4628      	mov	r0, r5
 800c83e:	47b0      	blx	r6
 800c840:	1c41      	adds	r1, r0, #1
 800c842:	d1c7      	bne.n	800c7d4 <__sflush_r+0x34>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0c4      	beq.n	800c7d4 <__sflush_r+0x34>
 800c84a:	2b1d      	cmp	r3, #29
 800c84c:	d001      	beq.n	800c852 <__sflush_r+0xb2>
 800c84e:	2b16      	cmp	r3, #22
 800c850:	d101      	bne.n	800c856 <__sflush_r+0xb6>
 800c852:	602f      	str	r7, [r5, #0]
 800c854:	e7b1      	b.n	800c7ba <__sflush_r+0x1a>
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	e7ad      	b.n	800c7bc <__sflush_r+0x1c>
 800c860:	690f      	ldr	r7, [r1, #16]
 800c862:	2f00      	cmp	r7, #0
 800c864:	d0a9      	beq.n	800c7ba <__sflush_r+0x1a>
 800c866:	0793      	lsls	r3, r2, #30
 800c868:	680e      	ldr	r6, [r1, #0]
 800c86a:	bf08      	it	eq
 800c86c:	694b      	ldreq	r3, [r1, #20]
 800c86e:	600f      	str	r7, [r1, #0]
 800c870:	bf18      	it	ne
 800c872:	2300      	movne	r3, #0
 800c874:	eba6 0807 	sub.w	r8, r6, r7
 800c878:	608b      	str	r3, [r1, #8]
 800c87a:	f1b8 0f00 	cmp.w	r8, #0
 800c87e:	dd9c      	ble.n	800c7ba <__sflush_r+0x1a>
 800c880:	6a21      	ldr	r1, [r4, #32]
 800c882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c884:	4643      	mov	r3, r8
 800c886:	463a      	mov	r2, r7
 800c888:	4628      	mov	r0, r5
 800c88a:	47b0      	blx	r6
 800c88c:	2800      	cmp	r0, #0
 800c88e:	dc06      	bgt.n	800c89e <__sflush_r+0xfe>
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	f04f 30ff 	mov.w	r0, #4294967295
 800c89c:	e78e      	b.n	800c7bc <__sflush_r+0x1c>
 800c89e:	4407      	add	r7, r0
 800c8a0:	eba8 0800 	sub.w	r8, r8, r0
 800c8a4:	e7e9      	b.n	800c87a <__sflush_r+0xda>
 800c8a6:	bf00      	nop
 800c8a8:	20400001 	.word	0x20400001

0800c8ac <_fflush_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	690b      	ldr	r3, [r1, #16]
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	b913      	cbnz	r3, 800c8bc <_fflush_r+0x10>
 800c8b6:	2500      	movs	r5, #0
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	b118      	cbz	r0, 800c8c6 <_fflush_r+0x1a>
 800c8be:	6983      	ldr	r3, [r0, #24]
 800c8c0:	b90b      	cbnz	r3, 800c8c6 <_fflush_r+0x1a>
 800c8c2:	f7ff fa15 	bl	800bcf0 <__sinit>
 800c8c6:	4b14      	ldr	r3, [pc, #80]	; (800c918 <_fflush_r+0x6c>)
 800c8c8:	429c      	cmp	r4, r3
 800c8ca:	d11b      	bne.n	800c904 <_fflush_r+0x58>
 800c8cc:	686c      	ldr	r4, [r5, #4]
 800c8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0ef      	beq.n	800c8b6 <_fflush_r+0xa>
 800c8d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8d8:	07d0      	lsls	r0, r2, #31
 800c8da:	d404      	bmi.n	800c8e6 <_fflush_r+0x3a>
 800c8dc:	0599      	lsls	r1, r3, #22
 800c8de:	d402      	bmi.n	800c8e6 <_fflush_r+0x3a>
 800c8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8e2:	f7ff faa3 	bl	800be2c <__retarget_lock_acquire_recursive>
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	f7ff ff59 	bl	800c7a0 <__sflush_r>
 800c8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8f0:	07da      	lsls	r2, r3, #31
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	d4e0      	bmi.n	800c8b8 <_fflush_r+0xc>
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	059b      	lsls	r3, r3, #22
 800c8fa:	d4dd      	bmi.n	800c8b8 <_fflush_r+0xc>
 800c8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8fe:	f7ff fa96 	bl	800be2e <__retarget_lock_release_recursive>
 800c902:	e7d9      	b.n	800c8b8 <_fflush_r+0xc>
 800c904:	4b05      	ldr	r3, [pc, #20]	; (800c91c <_fflush_r+0x70>)
 800c906:	429c      	cmp	r4, r3
 800c908:	d101      	bne.n	800c90e <_fflush_r+0x62>
 800c90a:	68ac      	ldr	r4, [r5, #8]
 800c90c:	e7df      	b.n	800c8ce <_fflush_r+0x22>
 800c90e:	4b04      	ldr	r3, [pc, #16]	; (800c920 <_fflush_r+0x74>)
 800c910:	429c      	cmp	r4, r3
 800c912:	bf08      	it	eq
 800c914:	68ec      	ldreq	r4, [r5, #12]
 800c916:	e7da      	b.n	800c8ce <_fflush_r+0x22>
 800c918:	0800ccec 	.word	0x0800ccec
 800c91c:	0800cd0c 	.word	0x0800cd0c
 800c920:	0800cccc 	.word	0x0800cccc

0800c924 <_lseek_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4d07      	ldr	r5, [pc, #28]	; (800c944 <_lseek_r+0x20>)
 800c928:	4604      	mov	r4, r0
 800c92a:	4608      	mov	r0, r1
 800c92c:	4611      	mov	r1, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	602a      	str	r2, [r5, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	f7f4 fa76 	bl	8000e24 <_lseek>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_lseek_r+0x1e>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_lseek_r+0x1e>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	20001d10 	.word	0x20001d10

0800c948 <__swhatbuf_r>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	460e      	mov	r6, r1
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2900      	cmp	r1, #0
 800c952:	b096      	sub	sp, #88	; 0x58
 800c954:	4614      	mov	r4, r2
 800c956:	461d      	mov	r5, r3
 800c958:	da08      	bge.n	800c96c <__swhatbuf_r+0x24>
 800c95a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	602a      	str	r2, [r5, #0]
 800c962:	061a      	lsls	r2, r3, #24
 800c964:	d410      	bmi.n	800c988 <__swhatbuf_r+0x40>
 800c966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c96a:	e00e      	b.n	800c98a <__swhatbuf_r+0x42>
 800c96c:	466a      	mov	r2, sp
 800c96e:	f000 f8bb 	bl	800cae8 <_fstat_r>
 800c972:	2800      	cmp	r0, #0
 800c974:	dbf1      	blt.n	800c95a <__swhatbuf_r+0x12>
 800c976:	9a01      	ldr	r2, [sp, #4]
 800c978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c97c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c980:	425a      	negs	r2, r3
 800c982:	415a      	adcs	r2, r3
 800c984:	602a      	str	r2, [r5, #0]
 800c986:	e7ee      	b.n	800c966 <__swhatbuf_r+0x1e>
 800c988:	2340      	movs	r3, #64	; 0x40
 800c98a:	2000      	movs	r0, #0
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	b016      	add	sp, #88	; 0x58
 800c990:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c994 <__smakebuf_r>:
 800c994:	898b      	ldrh	r3, [r1, #12]
 800c996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c998:	079d      	lsls	r5, r3, #30
 800c99a:	4606      	mov	r6, r0
 800c99c:	460c      	mov	r4, r1
 800c99e:	d507      	bpl.n	800c9b0 <__smakebuf_r+0x1c>
 800c9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	6123      	str	r3, [r4, #16]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	6163      	str	r3, [r4, #20]
 800c9ac:	b002      	add	sp, #8
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	ab01      	add	r3, sp, #4
 800c9b2:	466a      	mov	r2, sp
 800c9b4:	f7ff ffc8 	bl	800c948 <__swhatbuf_r>
 800c9b8:	9900      	ldr	r1, [sp, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff fa57 	bl	800be70 <_malloc_r>
 800c9c2:	b948      	cbnz	r0, 800c9d8 <__smakebuf_r+0x44>
 800c9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c8:	059a      	lsls	r2, r3, #22
 800c9ca:	d4ef      	bmi.n	800c9ac <__smakebuf_r+0x18>
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	f043 0302 	orr.w	r3, r3, #2
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	e7e3      	b.n	800c9a0 <__smakebuf_r+0xc>
 800c9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <__smakebuf_r+0x7c>)
 800c9da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	6020      	str	r0, [r4, #0]
 800c9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e4:	81a3      	strh	r3, [r4, #12]
 800c9e6:	9b00      	ldr	r3, [sp, #0]
 800c9e8:	6163      	str	r3, [r4, #20]
 800c9ea:	9b01      	ldr	r3, [sp, #4]
 800c9ec:	6120      	str	r0, [r4, #16]
 800c9ee:	b15b      	cbz	r3, 800ca08 <__smakebuf_r+0x74>
 800c9f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	f000 f889 	bl	800cb0c <_isatty_r>
 800c9fa:	b128      	cbz	r0, 800ca08 <__smakebuf_r+0x74>
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	f023 0303 	bic.w	r3, r3, #3
 800ca02:	f043 0301 	orr.w	r3, r3, #1
 800ca06:	81a3      	strh	r3, [r4, #12]
 800ca08:	89a0      	ldrh	r0, [r4, #12]
 800ca0a:	4305      	orrs	r5, r0
 800ca0c:	81a5      	strh	r5, [r4, #12]
 800ca0e:	e7cd      	b.n	800c9ac <__smakebuf_r+0x18>
 800ca10:	0800bc89 	.word	0x0800bc89

0800ca14 <__malloc_lock>:
 800ca14:	4801      	ldr	r0, [pc, #4]	; (800ca1c <__malloc_lock+0x8>)
 800ca16:	f7ff ba09 	b.w	800be2c <__retarget_lock_acquire_recursive>
 800ca1a:	bf00      	nop
 800ca1c:	20001d04 	.word	0x20001d04

0800ca20 <__malloc_unlock>:
 800ca20:	4801      	ldr	r0, [pc, #4]	; (800ca28 <__malloc_unlock+0x8>)
 800ca22:	f7ff ba04 	b.w	800be2e <__retarget_lock_release_recursive>
 800ca26:	bf00      	nop
 800ca28:	20001d04 	.word	0x20001d04

0800ca2c <_free_r>:
 800ca2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca2e:	2900      	cmp	r1, #0
 800ca30:	d044      	beq.n	800cabc <_free_r+0x90>
 800ca32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca36:	9001      	str	r0, [sp, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca3e:	bfb8      	it	lt
 800ca40:	18e4      	addlt	r4, r4, r3
 800ca42:	f7ff ffe7 	bl	800ca14 <__malloc_lock>
 800ca46:	4a1e      	ldr	r2, [pc, #120]	; (800cac0 <_free_r+0x94>)
 800ca48:	9801      	ldr	r0, [sp, #4]
 800ca4a:	6813      	ldr	r3, [r2, #0]
 800ca4c:	b933      	cbnz	r3, 800ca5c <_free_r+0x30>
 800ca4e:	6063      	str	r3, [r4, #4]
 800ca50:	6014      	str	r4, [r2, #0]
 800ca52:	b003      	add	sp, #12
 800ca54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca58:	f7ff bfe2 	b.w	800ca20 <__malloc_unlock>
 800ca5c:	42a3      	cmp	r3, r4
 800ca5e:	d908      	bls.n	800ca72 <_free_r+0x46>
 800ca60:	6825      	ldr	r5, [r4, #0]
 800ca62:	1961      	adds	r1, r4, r5
 800ca64:	428b      	cmp	r3, r1
 800ca66:	bf01      	itttt	eq
 800ca68:	6819      	ldreq	r1, [r3, #0]
 800ca6a:	685b      	ldreq	r3, [r3, #4]
 800ca6c:	1949      	addeq	r1, r1, r5
 800ca6e:	6021      	streq	r1, [r4, #0]
 800ca70:	e7ed      	b.n	800ca4e <_free_r+0x22>
 800ca72:	461a      	mov	r2, r3
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	b10b      	cbz	r3, 800ca7c <_free_r+0x50>
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	d9fa      	bls.n	800ca72 <_free_r+0x46>
 800ca7c:	6811      	ldr	r1, [r2, #0]
 800ca7e:	1855      	adds	r5, r2, r1
 800ca80:	42a5      	cmp	r5, r4
 800ca82:	d10b      	bne.n	800ca9c <_free_r+0x70>
 800ca84:	6824      	ldr	r4, [r4, #0]
 800ca86:	4421      	add	r1, r4
 800ca88:	1854      	adds	r4, r2, r1
 800ca8a:	42a3      	cmp	r3, r4
 800ca8c:	6011      	str	r1, [r2, #0]
 800ca8e:	d1e0      	bne.n	800ca52 <_free_r+0x26>
 800ca90:	681c      	ldr	r4, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	6053      	str	r3, [r2, #4]
 800ca96:	4421      	add	r1, r4
 800ca98:	6011      	str	r1, [r2, #0]
 800ca9a:	e7da      	b.n	800ca52 <_free_r+0x26>
 800ca9c:	d902      	bls.n	800caa4 <_free_r+0x78>
 800ca9e:	230c      	movs	r3, #12
 800caa0:	6003      	str	r3, [r0, #0]
 800caa2:	e7d6      	b.n	800ca52 <_free_r+0x26>
 800caa4:	6825      	ldr	r5, [r4, #0]
 800caa6:	1961      	adds	r1, r4, r5
 800caa8:	428b      	cmp	r3, r1
 800caaa:	bf04      	itt	eq
 800caac:	6819      	ldreq	r1, [r3, #0]
 800caae:	685b      	ldreq	r3, [r3, #4]
 800cab0:	6063      	str	r3, [r4, #4]
 800cab2:	bf04      	itt	eq
 800cab4:	1949      	addeq	r1, r1, r5
 800cab6:	6021      	streq	r1, [r4, #0]
 800cab8:	6054      	str	r4, [r2, #4]
 800caba:	e7ca      	b.n	800ca52 <_free_r+0x26>
 800cabc:	b003      	add	sp, #12
 800cabe:	bd30      	pop	{r4, r5, pc}
 800cac0:	20001d08 	.word	0x20001d08

0800cac4 <_read_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4d07      	ldr	r5, [pc, #28]	; (800cae4 <_read_r+0x20>)
 800cac8:	4604      	mov	r4, r0
 800caca:	4608      	mov	r0, r1
 800cacc:	4611      	mov	r1, r2
 800cace:	2200      	movs	r2, #0
 800cad0:	602a      	str	r2, [r5, #0]
 800cad2:	461a      	mov	r2, r3
 800cad4:	f7f4 f962 	bl	8000d9c <_read>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_read_r+0x1e>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_read_r+0x1e>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	20001d10 	.word	0x20001d10

0800cae8 <_fstat_r>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	4d07      	ldr	r5, [pc, #28]	; (800cb08 <_fstat_r+0x20>)
 800caec:	2300      	movs	r3, #0
 800caee:	4604      	mov	r4, r0
 800caf0:	4608      	mov	r0, r1
 800caf2:	4611      	mov	r1, r2
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	f7f4 f97a 	bl	8000dee <_fstat>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	d102      	bne.n	800cb04 <_fstat_r+0x1c>
 800cafe:	682b      	ldr	r3, [r5, #0]
 800cb00:	b103      	cbz	r3, 800cb04 <_fstat_r+0x1c>
 800cb02:	6023      	str	r3, [r4, #0]
 800cb04:	bd38      	pop	{r3, r4, r5, pc}
 800cb06:	bf00      	nop
 800cb08:	20001d10 	.word	0x20001d10

0800cb0c <_isatty_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	4d06      	ldr	r5, [pc, #24]	; (800cb28 <_isatty_r+0x1c>)
 800cb10:	2300      	movs	r3, #0
 800cb12:	4604      	mov	r4, r0
 800cb14:	4608      	mov	r0, r1
 800cb16:	602b      	str	r3, [r5, #0]
 800cb18:	f7f4 f979 	bl	8000e0e <_isatty>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d102      	bne.n	800cb26 <_isatty_r+0x1a>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	b103      	cbz	r3, 800cb26 <_isatty_r+0x1a>
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	20001d10 	.word	0x20001d10

0800cb2c <_init>:
 800cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2e:	bf00      	nop
 800cb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb32:	bc08      	pop	{r3}
 800cb34:	469e      	mov	lr, r3
 800cb36:	4770      	bx	lr

0800cb38 <_fini>:
 800cb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3a:	bf00      	nop
 800cb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb3e:	bc08      	pop	{r3}
 800cb40:	469e      	mov	lr, r3
 800cb42:	4770      	bx	lr
