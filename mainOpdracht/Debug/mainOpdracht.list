
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         0000ab14  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000008  0800ae78  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a90  200001ac  0800b01c  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001c3c  0800b01c  00021c3c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b0ef  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000041ea  00000000  00000000  0003b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c10  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a28  00000000  00000000  000410c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00026dd0  00000000  00000000  00042af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c616  00000000  00000000  000698c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e1ed9  00000000  00000000  00085ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00167daf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007b10  00000000  00000000  00167e00  2**2
=======
  1 .text         0000c974  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800cab4  0800cab4  0001cab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cc98  0800cc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cc9c  0800cc9c  0001cc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000008  0800cca0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b64  200001ac  0800ce44  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d10  0800ce44  00021d10  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c164  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004371  00000000  00000000  0003c340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001cc8  00000000  00000000  000406b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001ae0  00000000  00000000  00042380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00007241  00000000  00000000  00043e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ce36  00000000  00000000  0004b0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e223a  00000000  00000000  00067ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0014a111  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007e80  00000000  00000000  0014a164  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ac 	.word	0x200001ac
 800015c:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000160:	0800ac3c 	.word	0x0800ac3c
=======
 8000160:	0800ca9c 	.word	0x0800ca9c
>>>>>>> Stashed changes

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b0 	.word	0x200001b0
<<<<<<< Updated upstream
 800017c:	0800ac3c 	.word	0x0800ac3c
=======
 800017c:	0800ca9c 	.word	0x0800ca9c
>>>>>>> Stashed changes

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

<<<<<<< Updated upstream
08000220 <Play_Buzzer>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Play_Buzzer()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2101      	movs	r1, #1
 8000228:	4808      	ldr	r0, [pc, #32]	; (800024c <Play_Buzzer+0x2c>)
 800022a:	f000 ff8d 	bl	8001148 <HAL_GPIO_WritePin>
	    HAL_Delay(500);
 800022e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000232:	f000 fccd 	bl	8000bd0 <HAL_Delay>
	    HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2101      	movs	r1, #1
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <Play_Buzzer+0x2c>)
 800023c:	f000 ff84 	bl	8001148 <HAL_GPIO_WritePin>
	    HAL_Delay(250);
 8000240:	20fa      	movs	r0, #250	; 0xfa
 8000242:	f000 fcc5 	bl	8000bd0 <HAL_Delay>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	48000400 	.word	0x48000400

08000250 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
=======
08000220 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
>>>>>>> Stashed changes
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
<<<<<<< Updated upstream
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4013      	ands	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]
=======
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  (void)tmpreg;
 8000274:	68fb      	ldr	r3, [r7, #12]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
	...

<<<<<<< Updated upstream
08000284 <StartAlarm>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool bAlarmGestart = false;

void StartAlarm() {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	if(!bAlarmGestart) {
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <StartAlarm+0x24>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f083 0301 	eor.w	r3, r3, #1
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d005      	beq.n	80002a2 <StartAlarm+0x1e>
		printf("Alarm aan het starten....");
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <StartAlarm+0x28>)
 8000298:	f009 fd42 	bl	8009d20 <iprintf>
		bAlarmGestart = true;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <StartAlarm+0x24>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
	  // set state of bool
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000214 	.word	0x20000214
 80002ac:	0800ac54 	.word	0x0800ac54

080002b0 <main>:
=======
08000252 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000252:	b480      	push	{r7}
 8000254:	b085      	sub	sp, #20
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800025a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4313      	orrs	r3, r2
 8000268:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4013      	ands	r3, r2
 8000274:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <HAL_TIM_PWM_PulseFinishedCallback>:
#define WS2812_LED_MAX 10
uint8_t LED_Data[WS2812_LED_MAX][4];
int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 800028c:	2108      	movs	r1, #8
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000290:	f005 fa6a 	bl	8005768 <HAL_TIM_PWM_Stop_DMA>
  datasentflag = 1;
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000296:	2201      	movs	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	200001c8 	.word	0x200001c8
 80002a8:	200002e8 	.word	0x200002e8

080002ac <ws2812_Set_LED>:

void ws2812_Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
 80002b8:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	b2d9      	uxtb	r1, r3
 80002be:	4a11      	ldr	r2, [pc, #68]	; (8000304 <ws2812_Set_LED+0x58>)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	b2d9      	uxtb	r1, r3
 80002ca:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <ws2812_Set_LED+0x58>)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	4413      	add	r3, r2
 80002d2:	460a      	mov	r2, r1
 80002d4:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	b2d9      	uxtb	r1, r3
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <ws2812_Set_LED+0x58>)
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	460a      	mov	r2, r1
 80002e4:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2d9      	uxtb	r1, r3
 80002ea:	4a06      	ldr	r2, [pc, #24]	; (8000304 <ws2812_Set_LED+0x58>)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	460a      	mov	r2, r1
 80002f4:	70da      	strb	r2, [r3, #3]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	200002c0 	.word	0x200002c0

08000308 <ws2812_SetAll_LED>:

void ws2812_SetAll_LED(int Red, int Green, int Blue)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	e008      	b.n	800032c <ws2812_SetAll_LED+0x24>
  {
    ws2812_Set_LED(i, Red, Green, Blue);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	68f9      	ldr	r1, [r7, #12]
 8000320:	6978      	ldr	r0, [r7, #20]
 8000322:	f7ff ffc3 	bl	80002ac <ws2812_Set_LED>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	3301      	adds	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	2b09      	cmp	r3, #9
 8000330:	ddf3      	ble.n	800031a <ws2812_SetAll_LED+0x12>
  }
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3718      	adds	r7, #24
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <ws2812_Send_PWM>:

void ws2812_Send_PWM(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000342:	af00      	add	r7, sp, #0
  uint16_t pwmData[24 * (WS2812_LED_MAX) + 50];
  uint32_t indx = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  uint32_t color;
  for (int i = 0; i < WS2812_LED_MAX; i++)
 800034a:	2300      	movs	r3, #0
 800034c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8000350:	e04c      	b.n	80003ec <ws2812_Send_PWM+0xb0>
  {
    color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
 8000352:	4a40      	ldr	r2, [pc, #256]	; (8000454 <ws2812_Send_PWM+0x118>)
 8000354:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	4413      	add	r3, r2
 800035c:	785b      	ldrb	r3, [r3, #1]
 800035e:	041a      	lsls	r2, r3, #16
 8000360:	493c      	ldr	r1, [pc, #240]	; (8000454 <ws2812_Send_PWM+0x118>)
 8000362:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	440b      	add	r3, r1
 800036a:	789b      	ldrb	r3, [r3, #2]
 800036c:	021b      	lsls	r3, r3, #8
 800036e:	431a      	orrs	r2, r3
 8000370:	4938      	ldr	r1, [pc, #224]	; (8000454 <ws2812_Send_PWM+0x118>)
 8000372:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	440b      	add	r3, r1
 800037a:	78db      	ldrb	r3, [r3, #3]
 800037c:	4313      	orrs	r3, r2
 800037e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    for (int i = 23; i >= 0; i--)
 8000382:	2317      	movs	r3, #23
 8000384:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8000388:	e027      	b.n	80003da <ws2812_Send_PWM+0x9e>
    {
      if (color & (1 << i))
 800038a:	2201      	movs	r2, #1
 800038c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000390:	fa02 f303 	lsl.w	r3, r2, r3
 8000394:	461a      	mov	r2, r3
 8000396:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800039a:	4013      	ands	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	d009      	beq.n	80003b4 <ws2812_Send_PWM+0x78>
      {
        pwmData[indx] = 50; // 2/3 of ARR=75
 80003a0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80003a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80003a8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80003ac:	2132      	movs	r1, #50	; 0x32
 80003ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80003b2:	e008      	b.n	80003c6 <ws2812_Send_PWM+0x8a>
      }

      else
        pwmData[indx] = 25; // 1/3 of ARR=75
 80003b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80003b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80003bc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80003c0:	2119      	movs	r1, #25
 80003c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

      indx++;
 80003c6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80003ca:	3301      	adds	r3, #1
 80003cc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    for (int i = 23; i >= 0; i--)
 80003d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80003d4:	3b01      	subs	r3, #1
 80003d6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80003da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80003de:	2b00      	cmp	r3, #0
 80003e0:	dad3      	bge.n	800038a <ws2812_Send_PWM+0x4e>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 80003e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003e6:	3301      	adds	r3, #1
 80003e8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80003ec:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003f0:	2b09      	cmp	r3, #9
 80003f2:	ddae      	ble.n	8000352 <ws2812_Send_PWM+0x16>
    }
  }
  for (int i = 0; i < 50; i++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80003fa:	e012      	b.n	8000422 <ws2812_Send_PWM+0xe6>
  {
    pwmData[indx] = 0;
 80003fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000400:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000404:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000408:	2100      	movs	r1, #0
 800040a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    indx++;
 800040e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000412:	3301      	adds	r3, #1
 8000414:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  for (int i = 0; i < 50; i++)
 8000418:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800041c:	3301      	adds	r3, #1
 800041e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8000422:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000426:	2b31      	cmp	r3, #49	; 0x31
 8000428:	dde8      	ble.n	80003fc <ws2812_Send_PWM+0xc0>
  }
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 800042a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800042e:	b29b      	uxth	r3, r3
 8000430:	463a      	mov	r2, r7
 8000432:	2108      	movs	r1, #8
 8000434:	4808      	ldr	r0, [pc, #32]	; (8000458 <ws2812_Send_PWM+0x11c>)
 8000436:	f004 ffa5 	bl	8005384 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag)
 800043a:	bf00      	nop
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <ws2812_Send_PWM+0x120>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0fb      	beq.n	800043c <ws2812_Send_PWM+0x100>
  {
  };
  datasentflag = 0;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <ws2812_Send_PWM+0x120>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	bf00      	nop
 800044c:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002c0 	.word	0x200002c0
 8000458:	200001c8 	.word	0x200001c8
 800045c:	200002e8 	.word	0x200002e8

08000460 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
=======
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 80002b4:	f000 fc06 	bl	8000ac4 <HAL_Init>
=======
 8000466:	f000 fd65 	bl	8000f34 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 80002b8:	f000 f81c 	bl	80002f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002bc:	f000 f886 	bl	80003cc <PeriphCommonClock_Config>
=======
 800046a:	f000 f82d 	bl	80004c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800046e:	f000 f897 	bl	80005a0 <PeriphCommonClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 80002c0:	f000 f8ca 	bl	8000458 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80002c4:	f008 ff98 	bl	80091f8 <MX_USB_Device_Init>
  MX_TIM16_Init();
 80002c8:	f000 f89e 	bl	8000408 <MX_TIM16_Init>
=======
 8000472:	f000 f99d 	bl	80007b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000476:	f000 f989 	bl	800078c <MX_DMA_Init>
  MX_USB_Device_Init();
 800047a:	f00a fded 	bl	800b058 <MX_USB_Device_Init>
  MX_TIM16_Init();
 800047e:	f000 f95d 	bl	800073c <MX_TIM16_Init>
  MX_TIM1_Init();
 8000482:	f000 f8ab 	bl	80005dc <MX_TIM1_Init>

  /* USER CODE END 2 */
>>>>>>> Stashed changes

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ws2812_SetAll_LED(0, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ff3c 	bl	8000308 <ws2812_SetAll_LED>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	e00e      	b.n	80004b4 <main+0x54>
  {
    ws2812_Set_LED(i, 30, 30, 30);
 8000496:	231e      	movs	r3, #30
 8000498:	221e      	movs	r2, #30
 800049a:	211e      	movs	r1, #30
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ff05 	bl	80002ac <ws2812_Set_LED>
    ws2812_Send_PWM();
 80004a2:	f7ff ff4b 	bl	800033c <ws2812_Send_PWM>
    HAL_Delay(500);
 80004a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004aa:	f000 fdc9 	bl	8001040 <HAL_Delay>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3301      	adds	r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b09      	cmp	r3, #9
 80004b8:	dded      	ble.n	8000496 <main+0x36>
  while (1)
  {
	// ledStrip on GPIO3A
	//ledStrip_On();
	// Relay on GPIO3B
	Relay_On();
<<<<<<< Updated upstream
 80002cc:	f000 f98c 	bl	80005e8 <Relay_On>
//	Play_Buzzer();
    Read_Rotary();
 80002d0:	f000 f9a6 	bl	8000620 <Read_Rotary>
    Read_Reed();
 80002d4:	f000 f952 	bl	800057c <Read_Reed>

    if (bAlarmGestart) {
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <main+0x3c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f5      	beq.n	80002cc <main+0x1c>
    	printf("lekker man alarm gestart");
 80002e0:	4803      	ldr	r0, [pc, #12]	; (80002f0 <main+0x40>)
 80002e2:	f009 fd1d 	bl	8009d20 <iprintf>
    	Play_Buzzer();
 80002e6:	f7ff ff9b 	bl	8000220 <Play_Buzzer>
	Relay_On();
 80002ea:	e7ef      	b.n	80002cc <main+0x1c>
 80002ec:	20000214 	.word	0x20000214
 80002f0:	0800ac70 	.word	0x0800ac70

080002f4 <SystemClock_Config>:
=======
 80004ba:	f000 fa37 	bl	800092c <Relay_On>

	// Play buzzer on GPIO1
	// Play_Buzzer();

    Read_Rotary();
 80004be:	f000 fa51 	bl	8000964 <Read_Rotary>

    Read_Reed();
 80004c2:	f000 f9fd 	bl	80008c0 <Read_Reed>
	Relay_On();
 80004c6:	e7f8      	b.n	80004ba <main+0x5a>

080004c8 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09a      	sub	sp, #104	; 0x68
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0320 	add.w	r3, r7, #32
 80002fe:	2248      	movs	r2, #72	; 0x48
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f009 fd04 	bl	8009d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]
 8000316:	615a      	str	r2, [r3, #20]
 8000318:	619a      	str	r2, [r3, #24]
=======
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09a      	sub	sp, #104	; 0x68
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	2248      	movs	r2, #72	; 0x48
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f00b fb4a 	bl	800bb70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
<<<<<<< Updated upstream
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <SystemClock_Config+0xd4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000322:	4a29      	ldr	r2, [pc, #164]	; (80003c8 <SystemClock_Config+0xd4>)
 8000324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000328:	6013      	str	r3, [r2, #0]
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <SystemClock_Config+0xd4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]
=======
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <SystemClock_Config+0xd4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004f6:	4a29      	ldr	r2, [pc, #164]	; (800059c <SystemClock_Config+0xd4>)
 80004f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fc:	6013      	str	r3, [r2, #0]
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <SystemClock_Config+0xd4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
<<<<<<< Updated upstream
 8000336:	2326      	movs	r3, #38	; 0x26
 8000338:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800033a:	2300      	movs	r3, #0
 800033c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000342:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000348:	2340      	movs	r3, #64	; 0x40
 800034a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800034c:	2300      	movs	r3, #0
 800034e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000350:	2360      	movs	r3, #96	; 0x60
 8000352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000358:	2301      	movs	r3, #1
 800035a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000360:	2320      	movs	r3, #32
 8000362:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000368:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800036e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000374:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0320 	add.w	r3, r7, #32
 800037a:	4618      	mov	r0, r3
 800037c:	f002 ffcc 	bl	8003318 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000386:	f000 f8c5 	bl	8000514 <Error_Handler>
=======
 800050a:	2326      	movs	r3, #38	; 0x26
 800050c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800050e:	2300      	movs	r3, #0
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000518:	2301      	movs	r3, #1
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051c:	2340      	movs	r3, #64	; 0x40
 800051e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000520:	2300      	movs	r3, #0
 8000522:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000524:	2360      	movs	r3, #96	; 0x60
 8000526:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2302      	movs	r3, #2
 800052a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800052c:	2301      	movs	r3, #1
 800052e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000534:	231e      	movs	r3, #30
 8000536:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800053c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000542:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000548:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fbee 	bl	8003d30 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800055a:	f000 f987 	bl	800086c <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
<<<<<<< Updated upstream
 800038a:	236f      	movs	r3, #111	; 0x6f
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2303      	movs	r3, #3
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2103      	movs	r1, #3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fb28 	bl	8003a00 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80003b6:	f000 f8ad 	bl	8000514 <Error_Handler>
=======
 800055e:	236f      	movs	r3, #111	; 0x6f
 8000560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2303      	movs	r3, #3
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800056e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2103      	movs	r1, #3
 8000580:	4618      	mov	r0, r3
 8000582:	f003 ff49 	bl	8004418 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800058c:	f000 f96e 	bl	800086c <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
<<<<<<< Updated upstream
 80003ba:	f004 f8b9 	bl	8004530 <HAL_RCCEx_EnableMSIPLLMode>
}
 80003be:	bf00      	nop
 80003c0:	3768      	adds	r7, #104	; 0x68
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	58000400 	.word	0x58000400

080003cc <PeriphCommonClock_Config>:
=======
 8000590:	f004 fcda 	bl	8004f48 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000594:	bf00      	nop
 8000596:	3768      	adds	r7, #104	; 0x68
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	58000400 	.word	0x58000400

080005a0 <PeriphCommonClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
<<<<<<< Updated upstream
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b094      	sub	sp, #80	; 0x50
 80003d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003d2:	463b      	mov	r3, r7
 80003d4:	2250      	movs	r2, #80	; 0x50
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f009 fc99 	bl	8009d10 <memset>
=======
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2250      	movs	r2, #80	; 0x50
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f00b fadf 	bl	800bb70 <memset>
>>>>>>> Stashed changes

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
<<<<<<< Updated upstream
 80003de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003e4:	2300      	movs	r3, #0
 80003e6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80003e8:	2310      	movs	r3, #16
 80003ea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003ec:	463b      	mov	r3, r7
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 ff28 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80003fa:	f000 f88b 	bl	8000514 <Error_Handler>
=======
 80005b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80005bc:	2310      	movs	r3, #16
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fb4a 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80005ce:	f000 f94d 	bl	800086c <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
<<<<<<< Updated upstream
 80003fe:	bf00      	nop
 8000400:	3750      	adds	r7, #80	; 0x50
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_TIM16_Init>:
=======
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09c      	sub	sp, #112	; 0x70
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f00b faaa 	bl	800bb70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800061c:	4b45      	ldr	r3, [pc, #276]	; (8000734 <MX_TIM1_Init+0x158>)
 800061e:	4a46      	ldr	r2, [pc, #280]	; (8000738 <MX_TIM1_Init+0x15c>)
 8000620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000622:	4b44      	ldr	r3, [pc, #272]	; (8000734 <MX_TIM1_Init+0x158>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000628:	4b42      	ldr	r3, [pc, #264]	; (8000734 <MX_TIM1_Init+0x158>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 75 - 1;
 800062e:	4b41      	ldr	r3, [pc, #260]	; (8000734 <MX_TIM1_Init+0x158>)
 8000630:	224a      	movs	r2, #74	; 0x4a
 8000632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000634:	4b3f      	ldr	r3, [pc, #252]	; (8000734 <MX_TIM1_Init+0x158>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <MX_TIM1_Init+0x158>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <MX_TIM1_Init+0x158>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000646:	483b      	ldr	r0, [pc, #236]	; (8000734 <MX_TIM1_Init+0x158>)
 8000648:	f004 fd95 	bl	8005176 <HAL_TIM_Base_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000652:	f000 f90b 	bl	800086c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800065c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000660:	4619      	mov	r1, r3
 8000662:	4834      	ldr	r0, [pc, #208]	; (8000734 <MX_TIM1_Init+0x158>)
 8000664:	f005 fb9c 	bl	8005da0 <HAL_TIM_ConfigClockSource>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800066e:	f000 f8fd 	bl	800086c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000672:	4830      	ldr	r0, [pc, #192]	; (8000734 <MX_TIM1_Init+0x158>)
 8000674:	f004 fe24 	bl	80052c0 <HAL_TIM_PWM_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800067e:	f000 f8f5 	bl	800086c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800068e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000692:	4619      	mov	r1, r3
 8000694:	4827      	ldr	r0, [pc, #156]	; (8000734 <MX_TIM1_Init+0x158>)
 8000696:	f006 f8f3 	bl	8006880 <HAL_TIMEx_MasterConfigSynchronization>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80006a0:	f000 f8e4 	bl	800086c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a4:	2360      	movs	r3, #96	; 0x60
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ac:	2300      	movs	r3, #0
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b0:	2300      	movs	r3, #0
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c4:	2208      	movs	r2, #8
 80006c6:	4619      	mov	r1, r3
 80006c8:	481a      	ldr	r0, [pc, #104]	; (8000734 <MX_TIM1_Init+0x158>)
 80006ca:	f005 fa55 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80006d4:	f000 f8ca 	bl	800086c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <MX_TIM1_Init+0x158>)
 8000716:	f006 f913 	bl	8006940 <HAL_TIMEx_ConfigBreakDeadTime>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000720:	f000 f8a4 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <MX_TIM1_Init+0x158>)
 8000726:	f000 fa79 	bl	8000c1c <HAL_TIM_MspPostInit>

}
 800072a:	bf00      	nop
 800072c:	3770      	adds	r7, #112	; 0x70
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200001c8 	.word	0x200001c8
 8000738:	40012c00 	.word	0x40012c00

0800073c <MX_TIM16_Init>:
>>>>>>> Stashed changes
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
<<<<<<< Updated upstream
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
=======
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
<<<<<<< Updated upstream
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_TIM16_Init+0x48>)
 800040e:	4a11      	ldr	r2, [pc, #68]	; (8000454 <MX_TIM16_Init+0x4c>)
 8000410:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63998;
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_TIM16_Init+0x48>)
 8000414:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 8000418:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <MX_TIM16_Init+0x48>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_TIM16_Init+0x48>)
 8000422:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000426:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_TIM16_Init+0x48>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_TIM16_Init+0x48>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_TIM16_Init+0x48>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_TIM16_Init+0x48>)
 800043c:	f004 f98f 	bl	800475e <HAL_TIM_Base_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000446:	f000 f865 	bl	8000514 <Error_Handler>
=======
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_TIM16_Init+0x48>)
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <MX_TIM16_Init+0x4c>)
 8000744:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63998;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_TIM16_Init+0x48>)
 8000748:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 800074c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_TIM16_Init+0x48>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_TIM16_Init+0x48>)
 8000756:	f64e 2260 	movw	r2, #60000	; 0xea60
 800075a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_TIM16_Init+0x48>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_TIM16_Init+0x48>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_TIM16_Init+0x48>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_TIM16_Init+0x48>)
 8000770:	f004 fd01 	bl	8005176 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800077a:	f000 f877 	bl	800086c <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
<<<<<<< Updated upstream
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200001c8 	.word	0x200001c8
 8000454:	40014400 	.word	0x40014400

08000458 <MX_GPIO_Init>:
=======
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000214 	.word	0x20000214
 8000788:	40014400 	.word	0x40014400

0800078c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000790:	2004      	movs	r0, #4
 8000792:	f7ff fd45 	bl	8000220 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff fd42 	bl	8000220 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	200b      	movs	r0, #11
 80007a2:	f000 fd4c 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a6:	200b      	movs	r0, #11
 80007a8:	f000 fd63 	bl	8001272 <HAL_NVIC_EnableIRQ>

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
=======
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 800046c:	2004      	movs	r0, #4
 800046e:	f7ff feef 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff feec 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff fee9 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047e:	2008      	movs	r0, #8
 8000480:	f7ff fee6 	bl	8000250 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800048a:	481f      	ldr	r0, [pc, #124]	; (8000508 <MX_GPIO_Init+0xb0>)
 800048c:	f000 fe5c 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2101      	movs	r1, #1
 8000494:	481d      	ldr	r0, [pc, #116]	; (800050c <MX_GPIO_Init+0xb4>)
 8000496:	f000 fe57 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RELAY_Pin;
 800049a:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800049e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4815      	ldr	r0, [pc, #84]	; (8000508 <MX_GPIO_Init+0xb0>)
 80004b2:	f000 fcc1 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 80004b6:	f641 030a 	movw	r3, #6154	; 0x180a
 80004ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <MX_GPIO_Init+0xb0>)
 80004ca:	f000 fcb5 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 80004ce:	2301      	movs	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <MX_GPIO_Init+0xb4>)
 80004e4:	f000 fca8 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80004e8:	2301      	movs	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_GPIO_Init+0xb8>)
 80004fa:	f000 fc9d 	bl	8000e38 <HAL_GPIO_Init>
=======
 80007c4:	2004      	movs	r0, #4
 80007c6:	f7ff fd44 	bl	8000252 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2002      	movs	r0, #2
 80007cc:	f7ff fd41 	bl	8000252 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fd3e 	bl	8000252 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2008      	movs	r0, #8
 80007d8:	f7ff fd3b 	bl	8000252 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <MX_GPIO_Init+0xb0>)
 80007e4:	f001 f9bc 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2101      	movs	r1, #1
 80007ec:	481d      	ldr	r0, [pc, #116]	; (8000864 <MX_GPIO_Init+0xb4>)
 80007ee:	f001 f9b7 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RELAY_Pin;
 80007f2:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80007f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4815      	ldr	r0, [pc, #84]	; (8000860 <MX_GPIO_Init+0xb0>)
 800080a:	f001 f821 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 800080e:	f641 030a 	movw	r3, #6154	; 0x180a
 8000812:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <MX_GPIO_Init+0xb0>)
 8000822:	f001 f815 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <MX_GPIO_Init+0xb4>)
 800083c:	f001 f808 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 8000840:	2301      	movs	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_GPIO_Init+0xb8>)
 8000852:	f000 fffd 	bl	8001850 <HAL_GPIO_Init>
>>>>>>> Stashed changes

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48000800 	.word	0x48000800
 800050c:	48000400 	.word	0x48000400
 8000510:	48000c00 	.word	0x48000c00

08000514 <Error_Handler>:
=======
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	48000800 	.word	0x48000800
 8000864:	48000400 	.word	0x48000400
 8000868:	48000c00 	.word	0x48000c00

0800086c <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
=======
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
=======
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <REED_status>:
=======
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <REED_status>:
>>>>>>> Stashed changes
bool bHasContact = false;
bool isTimerOn = false;
extern TIM_HandleTypeDef htim16;

GPIO_PinState REED_status()
{
<<<<<<< Updated upstream
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 8000524:	2108      	movs	r1, #8
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <REED_status+0x14>)
 8000528:	f000 fdf6 	bl	8001118 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	48000800 	.word	0x48000800

08000538 <SetTimer>:

void SetTimer() {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim16);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <SetTimer+0x10>)
 800053e:	f004 f965 	bl	800480c <HAL_TIM_Base_Start_IT>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200001c8 	.word	0x200001c8

0800054c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	if (!bHasContact) { // kijken of contact is anders starten we het alarm.
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d004      	beq.n	800056c <HAL_TIM_PeriodElapsedCallback+0x20>
		printf("Timer is gestart!");
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000564:	f009 fbdc 	bl	8009d20 <iprintf>
		// Trigger function
		StartAlarm();
 8000568:	f7ff fe8c 	bl	8000284 <StartAlarm>
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000215 	.word	0x20000215
 8000578:	0800ac8c 	.word	0x0800ac8c

0800057c <Read_Reed>:
=======
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 800087c:	2108      	movs	r1, #8
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <REED_status+0x14>)
 8000880:	f001 f956 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	48000800 	.word	0x48000800

08000890 <SetTimer>:

void SetTimer() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim16);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <SetTimer+0x10>)
 8000896:	f004 fcc5 	bl	8005224 <HAL_TIM_Base_Start_IT>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000214 	.word	0x20000214

080008a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	printf("Timer is gestart!");
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80008ae:	f00b f967 	bl	800bb80 <iprintf>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	0800cab4 	.word	0x0800cab4

080008c0 <Read_Reed>:
>>>>>>> Stashed changes


void Read_Reed()
{
<<<<<<< Updated upstream
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	if (!REED_status() && !bHasContact)
 8000580:	f7ff ffce 	bl	8000520 <REED_status>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d110      	bne.n	80005ac <Read_Reed+0x30>
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <Read_Reed+0x5c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d009      	beq.n	80005ac <Read_Reed+0x30>
	{
		printf("Reed heeft nu contact");
 8000598:	4810      	ldr	r0, [pc, #64]	; (80005dc <Read_Reed+0x60>)
 800059a:	f009 fbc1 	bl	8009d20 <iprintf>
		bHasContact = true;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <Read_Reed+0x5c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
		isTimerOn = false;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <Read_Reed+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
=======
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

	if (!REED_status() && !bHasContact)
 80008c4:	f7ff ffd8 	bl	8000878 <REED_status>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d110      	bne.n	80008f0 <Read_Reed+0x30>
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <Read_Reed+0x5c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f083 0301 	eor.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d009      	beq.n	80008f0 <Read_Reed+0x30>
	{
		printf("Reed heeft nu contact");
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <Read_Reed+0x60>)
 80008de:	f00b f94f 	bl	800bb80 <iprintf>
		bHasContact = true;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <Read_Reed+0x5c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
		isTimerOn = false;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <Read_Reed+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		printf("Reed heeft geen contact");
		bHasContact = false;
	}

}
<<<<<<< Updated upstream
 80005aa:	e013      	b.n	80005d4 <Read_Reed+0x58>
	else if (REED_status() && bHasContact)
 80005ac:	f7ff ffb8 	bl	8000520 <REED_status>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00e      	beq.n	80005d4 <Read_Reed+0x58>
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <Read_Reed+0x5c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00a      	beq.n	80005d4 <Read_Reed+0x58>
		isTimerOn = true;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <Read_Reed+0x64>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
		SetTimer();
 80005c4:	f7ff ffb8 	bl	8000538 <SetTimer>
		printf("Reed heeft geen contact");
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <Read_Reed+0x68>)
 80005ca:	f009 fba9 	bl	8009d20 <iprintf>
		bHasContact = false;
 80005ce:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <Read_Reed+0x5c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000215 	.word	0x20000215
 80005dc:	0800aca0 	.word	0x0800aca0
 80005e0:	20000216 	.word	0x20000216
 80005e4:	0800acb8 	.word	0x0800acb8

080005e8 <Relay_On>:
=======
 80008ee:	e013      	b.n	8000918 <Read_Reed+0x58>
	else if (REED_status() && bHasContact)
 80008f0:	f7ff ffc2 	bl	8000878 <REED_status>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00e      	beq.n	8000918 <Read_Reed+0x58>
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <Read_Reed+0x5c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00a      	beq.n	8000918 <Read_Reed+0x58>
		isTimerOn = true;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <Read_Reed+0x64>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
		SetTimer();
 8000908:	f7ff ffc2 	bl	8000890 <SetTimer>
		printf("Reed heeft geen contact");
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <Read_Reed+0x68>)
 800090e:	f00b f937 	bl	800bb80 <iprintf>
		bHasContact = false;
 8000912:	4b02      	ldr	r3, [pc, #8]	; (800091c <Read_Reed+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200002ec 	.word	0x200002ec
 8000920:	0800cac8 	.word	0x0800cac8
 8000924:	200002ed 	.word	0x200002ed
 8000928:	0800cae0 	.word	0x0800cae0

0800092c <Relay_On>:
>>>>>>> Stashed changes
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Relay_On()
{
<<<<<<< Updated upstream
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2140      	movs	r1, #64	; 0x40
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <Relay_On+0x14>)
 80005f2:	f000 fda9 	bl	8001148 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48000800 	.word	0x48000800

08000600 <_write>:
=======
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <Relay_On+0x14>)
 8000936:	f001 f913 	bl	8001b60 <HAL_GPIO_WritePin>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	48000800 	.word	0x48000800

08000944 <_write>:
>>>>>>> Stashed changes

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	68b8      	ldr	r0, [r7, #8]
 8000610:	f008 feb0 	bl	8009374 <CDC_Transmit_FS>
  return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <Read_Rotary>:

void Read_Rotary()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	4855      	ldr	r0, [pc, #340]	; (8000780 <Read_Rotary+0x160>)
 800062c:	f000 fd74 	bl	8001118 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 8000634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000638:	4851      	ldr	r0, [pc, #324]	; (8000780 <Read_Rotary+0x160>)
 800063a:	f000 fd6d 	bl	8001118 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	005a      	lsls	r2, r3, #1
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	4a4e      	ldr	r2, [pc, #312]	; (8000784 <Read_Rotary+0x164>)
 800064c:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 800064e:	4b4e      	ldr	r3, [pc, #312]	; (8000788 <Read_Rotary+0x168>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <Read_Rotary+0x164>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	494d      	ldr	r1, [pc, #308]	; (800078c <Read_Rotary+0x16c>)
 8000658:	0092      	lsls	r2, r2, #2
 800065a:	4413      	add	r3, r2
 800065c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000660:	607b      	str	r3, [r7, #4]

    if (info == 1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d109      	bne.n	800067c <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 8000668:	4b46      	ldr	r3, [pc, #280]	; (8000784 <Read_Rotary+0x164>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2201      	movs	r2, #1
 800066e:	409a      	lsls	r2, r3
 8000670:	4b47      	ldr	r3, [pc, #284]	; (8000790 <Read_Rotary+0x170>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4313      	orrs	r3, r2
 8000676:	4a46      	ldr	r2, [pc, #280]	; (8000790 <Read_Rotary+0x170>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e00c      	b.n	8000696 <Read_Rotary+0x76>
    }
    else if (info == -1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000682:	d108      	bne.n	8000696 <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <Read_Rotary+0x164>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	409a      	lsls	r2, r3
 800068c:	4b41      	ldr	r3, [pc, #260]	; (8000794 <Read_Rotary+0x174>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4313      	orrs	r3, r2
 8000692:	4a40      	ldr	r2, [pc, #256]	; (8000794 <Read_Rotary+0x174>)
 8000694:	6013      	str	r3, [r2, #0]
=======
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	68b8      	ldr	r0, [r7, #8]
 8000954:	f00a fc3e 	bl	800b1d4 <CDC_Transmit_FS>
  return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <Read_Rotary>:

void Read_Rotary()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 800096a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096e:	4855      	ldr	r0, [pc, #340]	; (8000ac4 <Read_Rotary+0x160>)
 8000970:	f001 f8de 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	4851      	ldr	r0, [pc, #324]	; (8000ac4 <Read_Rotary+0x160>)
 800097e:	f001 f8d7 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	005a      	lsls	r2, r3, #1
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4413      	add	r3, r2
 800098e:	4a4e      	ldr	r2, [pc, #312]	; (8000ac8 <Read_Rotary+0x164>)
 8000990:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 8000992:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <Read_Rotary+0x168>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <Read_Rotary+0x164>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	494d      	ldr	r1, [pc, #308]	; (8000ad0 <Read_Rotary+0x16c>)
 800099c:	0092      	lsls	r2, r2, #2
 800099e:	4413      	add	r3, r2
 80009a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009a4:	607b      	str	r3, [r7, #4]

    if (info == 1)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d109      	bne.n	80009c0 <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 80009ac:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <Read_Rotary+0x164>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2201      	movs	r2, #1
 80009b2:	409a      	lsls	r2, r3
 80009b4:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <Read_Rotary+0x170>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <Read_Rotary+0x170>)
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e00c      	b.n	80009da <Read_Rotary+0x76>
    }
    else if (info == -1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c6:	d108      	bne.n	80009da <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 80009c8:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <Read_Rotary+0x164>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2201      	movs	r2, #1
 80009ce:	409a      	lsls	r2, r3
 80009d0:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <Read_Rotary+0x174>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <Read_Rotary+0x174>)
 80009d8:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
    else if (info == 2)
    {
        // skipped a value
    }

    if (prevVal != newVal && newVal == 3)
<<<<<<< Updated upstream
 8000696:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <Read_Rotary+0x168>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <Read_Rotary+0x164>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d047      	beq.n	8000732 <Read_Rotary+0x112>
 80006a2:	4b38      	ldr	r3, [pc, #224]	; (8000784 <Read_Rotary+0x164>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d143      	bne.n	8000732 <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <Read_Rotary+0x170>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b0b      	cmp	r3, #11
 80006b0:	d00b      	beq.n	80006ca <Read_Rotary+0xaa>
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <Read_Rotary+0x170>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d007      	beq.n	80006ca <Read_Rotary+0xaa>
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <Read_Rotary+0x170>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b0e      	cmp	r3, #14
 80006c0:	d003      	beq.n	80006ca <Read_Rotary+0xaa>
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <Read_Rotary+0x170>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b0f      	cmp	r3, #15
 80006c8:	d10e      	bne.n	80006e8 <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <Read_Rotary+0x178>)
 80006cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	3301      	adds	r3, #1
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <Read_Rotary+0x178>)
 80006da:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4827      	ldr	r0, [pc, #156]	; (8000780 <Read_Rotary+0x160>)
 80006e4:	f000 fd30 	bl	8001148 <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <Read_Rotary+0x174>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b0b      	cmp	r3, #11
 80006ee:	d00b      	beq.n	8000708 <Read_Rotary+0xe8>
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <Read_Rotary+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d007      	beq.n	8000708 <Read_Rotary+0xe8>
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <Read_Rotary+0x174>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b0e      	cmp	r3, #14
 80006fe:	d003      	beq.n	8000708 <Read_Rotary+0xe8>
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <Read_Rotary+0x174>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d10e      	bne.n	8000726 <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <Read_Rotary+0x178>)
 800070a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070e:	b29b      	uxth	r3, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	b29b      	uxth	r3, r3
 8000714:	b21a      	sxth	r2, r3
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <Read_Rotary+0x178>)
 8000718:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4817      	ldr	r0, [pc, #92]	; (8000780 <Read_Rotary+0x160>)
 8000722:	f000 fd11 	bl	8001148 <HAL_GPIO_WritePin>
        }
        clockState = 0;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <Read_Rotary+0x170>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <Read_Rotary+0x174>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <Read_Rotary+0x164>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <Read_Rotary+0x168>)
 8000738:	6013      	str	r3, [r2, #0]

    if (iTimer > 20000)
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <Read_Rotary+0x17c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000742:	4293      	cmp	r3, r2
 8000744:	dd09      	ble.n	800075a <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <Read_Rotary+0x178>)
 8000748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074c:	4619      	mov	r1, r3
 800074e:	4814      	ldr	r0, [pc, #80]	; (80007a0 <Read_Rotary+0x180>)
 8000750:	f009 fae6 	bl	8009d20 <iprintf>
        iTimer = 0;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <Read_Rotary+0x17c>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <Read_Rotary+0x17c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <Read_Rotary+0x17c>)
 8000762:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 8000764:	2101      	movs	r1, #1
 8000766:	480f      	ldr	r0, [pc, #60]	; (80007a4 <Read_Rotary+0x184>)
 8000768:	f000 fcd6 	bl	8001118 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <Read_Rotary+0x158>
        {
          readValue = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <Read_Rotary+0x178>)
 8000774:	2200      	movs	r2, #0
 8000776:	801a      	strh	r2, [r3, #0]
        }
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	48000800 	.word	0x48000800
 8000784:	20000224 	.word	0x20000224
 8000788:	2000021c 	.word	0x2000021c
 800078c:	20000008 	.word	0x20000008
 8000790:	20000228 	.word	0x20000228
 8000794:	2000022c 	.word	0x2000022c
 8000798:	20000218 	.word	0x20000218
 800079c:	20000220 	.word	0x20000220
 80007a0:	0800acd0 	.word	0x0800acd0
 80007a4:	48000c00 	.word	0x48000c00

080007a8 <LL_APB2_GRP1_EnableClock>:
=======
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <Read_Rotary+0x168>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <Read_Rotary+0x164>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d047      	beq.n	8000a76 <Read_Rotary+0x112>
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <Read_Rotary+0x164>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d143      	bne.n	8000a76 <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <Read_Rotary+0x170>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b0b      	cmp	r3, #11
 80009f4:	d00b      	beq.n	8000a0e <Read_Rotary+0xaa>
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <Read_Rotary+0x170>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b0d      	cmp	r3, #13
 80009fc:	d007      	beq.n	8000a0e <Read_Rotary+0xaa>
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <Read_Rotary+0x170>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b0e      	cmp	r3, #14
 8000a04:	d003      	beq.n	8000a0e <Read_Rotary+0xaa>
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <Read_Rotary+0x170>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d10e      	bne.n	8000a2c <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 8000a0e:	4b33      	ldr	r3, [pc, #204]	; (8000adc <Read_Rotary+0x178>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	3301      	adds	r3, #1
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <Read_Rotary+0x178>)
 8000a1e:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <Read_Rotary+0x160>)
 8000a28:	f001 f89a 	bl	8001b60 <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <Read_Rotary+0x174>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b0b      	cmp	r3, #11
 8000a32:	d00b      	beq.n	8000a4c <Read_Rotary+0xe8>
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <Read_Rotary+0x174>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b0d      	cmp	r3, #13
 8000a3a:	d007      	beq.n	8000a4c <Read_Rotary+0xe8>
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <Read_Rotary+0x174>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b0e      	cmp	r3, #14
 8000a42:	d003      	beq.n	8000a4c <Read_Rotary+0xe8>
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <Read_Rotary+0x174>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d10e      	bne.n	8000a6a <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <Read_Rotary+0x178>)
 8000a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	3b01      	subs	r3, #1
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b21a      	sxth	r2, r3
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <Read_Rotary+0x178>)
 8000a5c:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <Read_Rotary+0x160>)
 8000a66:	f001 f87b 	bl	8001b60 <HAL_GPIO_WritePin>
        }
        clockState = 0;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <Read_Rotary+0x170>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <Read_Rotary+0x174>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <Read_Rotary+0x164>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a14      	ldr	r2, [pc, #80]	; (8000acc <Read_Rotary+0x168>)
 8000a7c:	6013      	str	r3, [r2, #0]

    if (iTimer > 20000)
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <Read_Rotary+0x17c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a86:	4293      	cmp	r3, r2
 8000a88:	dd09      	ble.n	8000a9e <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <Read_Rotary+0x178>)
 8000a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <Read_Rotary+0x180>)
 8000a94:	f00b f874 	bl	800bb80 <iprintf>
        iTimer = 0;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <Read_Rotary+0x17c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <Read_Rotary+0x17c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <Read_Rotary+0x17c>)
 8000aa6:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <Read_Rotary+0x184>)
 8000aac:	f001 f840 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <Read_Rotary+0x158>
        {
          readValue = 0;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <Read_Rotary+0x178>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	801a      	strh	r2, [r3, #0]
        }
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	48000800 	.word	0x48000800
 8000ac8:	200002f8 	.word	0x200002f8
 8000acc:	200002f0 	.word	0x200002f0
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	200002fc 	.word	0x200002fc
 8000ad8:	20000300 	.word	0x20000300
 8000adc:	200002ee 	.word	0x200002ee
 8000ae0:	200002f4 	.word	0x200002f4
 8000ae4:	0800caf8 	.word	0x0800caf8
 8000ae8:	48000c00 	.word	0x48000c00

08000aec <LL_AHB2_GRP1_EnableClock>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b10:	68fb      	ldr	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <LL_APB2_GRP1_EnableClock>:
>>>>>>> Stashed changes
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< Updated upstream
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007cc:	68fb      	ldr	r3, [r7, #12]
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <HAL_MspInit>:
/* USER CODE END 0 */
/**
=======
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
>>>>>>> Stashed changes
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
=======
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <HAL_TIM_Base_MspInit>:
=======
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< Updated upstream
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_TIM_Base_MspInit+0x34>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d10b      	bne.n	8000812 <HAL_TIM_Base_MspInit+0x2a>
=======
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <HAL_TIM_Base_MspInit+0xac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d137      	bne.n	8000be2 <HAL_TIM_Base_MspInit+0x82>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
<<<<<<< Updated upstream
    __HAL_RCC_TIM16_CLK_ENABLE();
 80007fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007fe:	f7ff ffd3 	bl	80007a8 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2019      	movs	r0, #25
 8000808:	f000 fae1 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800080c:	2019      	movs	r0, #25
 800080e:	f000 faf8 	bl	8000e02 <HAL_NVIC_EnableIRQ>
=======
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b76:	f7ff ffd2 	bl	8000b1e <LL_APB2_GRP1_EnableClock>

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel1;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000b7c:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <HAL_TIM_Base_MspInit+0xb4>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000b82:	2217      	movs	r2, #23
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000bb6:	f000 fb77 	bl	80012a8 <HAL_DMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_TIM_Base_MspInit+0x64>
    {
      Error_Handler();
 8000bc0:	f7ff fe54 	bl	800086c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_TIM_Base_MspInit+0xb0>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2019      	movs	r0, #25
 8000bd6:	f000 fb32 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bda:	2019      	movs	r0, #25
 8000bdc:	f000 fb49 	bl	8001272 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40014400 	.word	0x40014400

08000820 <NMI_Handler>:
=======
 8000be0:	e010      	b.n	8000c04 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <HAL_TIM_Base_MspInit+0xb8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d10b      	bne.n	8000c04 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000bec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bf0:	f7ff ff95 	bl	8000b1e <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2019      	movs	r0, #25
 8000bfa:	f000 fb20 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bfe:	2019      	movs	r0, #25
 8000c00:	f000 fb37 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40012c00 	.word	0x40012c00
 8000c10:	20000260 	.word	0x20000260
 8000c14:	40020008 	.word	0x40020008
 8000c18:	40014400 	.word	0x40014400

08000c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_TIM_MspPostInit+0x54>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d114      	bne.n	8000c68 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff ff54 	bl	8000aec <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fdf4 	bl	8001850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40012c00 	.word	0x40012c00

08000c74 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
=======
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:
=======
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
=======
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:
=======
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
=======
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:
=======
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
=======
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:
=======
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
=======
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:
=======
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
=======
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:
=======
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
=======
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:
=======
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
=======
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:
=======
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
=======
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 800086c:	f000 f984 	bl	8000b78 <HAL_IncTick>
=======
 8000cc0:	f000 f992 	bl	8000fe8 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <USB_LP_IRQHandler>:
=======
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DMA1_Channel1_IRQHandler+0x10>)
 8000cce:	f000 fc6d 	bl	80015ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000260 	.word	0x20000260

08000cdc <USB_LP_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
=======
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
<<<<<<< Updated upstream
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <USB_LP_IRQHandler+0x10>)
 800087a:	f000 fd78 	bl	800136e <HAL_PCD_IRQHandler>
=======
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <USB_LP_IRQHandler+0x10>)
 8000ce2:	f001 f850 	bl	8001d86 <HAL_PCD_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
<<<<<<< Updated upstream
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20001718 	.word	0x20001718

08000888 <TIM1_UP_TIM16_IRQHandler>:
=======
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200017ec 	.word	0x200017ec

08000cf0 <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
=======
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000cf6:	f004 fe1f 	bl	8005938 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
<<<<<<< Updated upstream
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800088e:	f004 f80b 	bl	80048a8 <HAL_TIM_IRQHandler>
=======
 8000cfa:	4803      	ldr	r0, [pc, #12]	; (8000d08 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000cfc:	f004 fe1c 	bl	8005938 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< Updated upstream
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001c8 	.word	0x200001c8

0800089c <_read>:
=======
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001c8 	.word	0x200001c8
 8000d08:	20000214 	.word	0x20000214

08000d0c <_read>:
>>>>>>> Stashed changes
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
=======
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
  }

  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_close>:
=======
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e00a      	b.n	8000d34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d1e:	f3af 8000 	nop.w
 8000d22:	4601      	mov	r1, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf0      	blt.n	8000d1e <_read+0x12>
  }

  return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_close>:
>>>>>>> Stashed changes
  }
  return len;
}

int _close(int file)
{
<<<<<<< Updated upstream
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_fstat>:
=======
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
=======
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_isatty>:

int _isatty(int file)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< Updated upstream
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <_sbrk>:
=======
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
=======
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
=======
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
=======
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f009 f9a4 	bl	8009cbc <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20030000 	.word	0x20030000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	20000230 	.word	0x20000230
 80009a8:	20001c40 	.word	0x20001c40

080009ac <SystemInit>:
=======
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f00a fe9c 	bl	800bb1c <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20030000 	.word	0x20030000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000304 	.word	0x20000304
 8000e18:	20001d10 	.word	0x20001d10

08000e1c <SystemInit>:
>>>>>>> Stashed changes
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
=======
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
<<<<<<< Updated upstream
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <SystemInit+0x98>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <SystemInit+0x98>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <SystemInit+0x98>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <SystemInit+0x98>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
<<<<<<< Updated upstream
 80009c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80009d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80009d8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80009da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <SystemInit+0x9c>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80009ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009f6:	f023 0305 	bic.w	r3, r3, #5
 80009fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80009fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <SystemInit+0xa0>)
 8000a18:	60da      	str	r2, [r3, #12]
=======
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e48:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <SystemInit+0x9c>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e66:	f023 0305 	bic.w	r3, r3, #5
 8000e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <SystemInit+0xa0>)
 8000e88:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
<<<<<<< Updated upstream
 8000a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <SystemInit+0xa0>)
 8000a20:	611a      	str	r2, [r3, #16]
=======
 8000e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <SystemInit+0xa0>)
 8000e90:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
<<<<<<< Updated upstream
 8000a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	faf6fefb 	.word	0xfaf6fefb
 8000a4c:	22041000 	.word	0x22041000

08000a50 <CopyDataInit>:
=======
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	faf6fefb 	.word	0xfaf6fefb
 8000ebc:	22041000 	.word	0x22041000

08000ec0 <CopyDataInit>:
>>>>>>> Stashed changes
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
<<<<<<< Updated upstream
 8000a50:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a52:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a54:	3304      	adds	r3, #4

08000a56 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a56:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a58:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a5a:	d3f9      	bcc.n	8000a50 <CopyDataInit>
  bx lr
 8000a5c:	4770      	bx	lr

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000a5e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000a60:	3004      	adds	r0, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000a62:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>
  bx lr
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:
=======
 8000ec0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec4:	3304      	adds	r3, #4

08000ec6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000eca:	d3f9      	bcc.n	8000ec0 <CopyDataInit>
  bx lr
 8000ecc:	4770      	bx	lr

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ece:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ed0:	3004      	adds	r0, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ed2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>
  bx lr
 8000ed6:	4770      	bx	lr

08000ed8 <Reset_Handler>:
>>>>>>> Stashed changes

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f7ff ff9e 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <LoopForever+0x6>)
 8000a72:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <LoopForever+0xa>)
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <LoopForever+0xe>)
 8000a76:	2300      	movs	r3, #0
 8000a78:	f7ff ffed 	bl	8000a56 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <LoopForever+0x12>)
 8000a7e:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <LoopForever+0x16>)
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <LoopForever+0x1a>)
 8000a82:	2300      	movs	r3, #0
 8000a84:	f7ff ffe7 	bl	8000a56 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <LoopForever+0x1e>)
 8000a8a:	490c      	ldr	r1, [pc, #48]	; (8000abc <LoopForever+0x22>)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f7ff ffe8 	bl	8000a62 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a92:	f009 f919 	bl	8009cc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a96:	f7ff fc0b 	bl	80002b0 <main>

08000a9a <LoopForever>:

LoopForever:
  b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   r0, =_estack
 8000a9c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200001ac 	.word	0x200001ac
 8000aa8:	0800ae78 	.word	0x0800ae78
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000aac:	20030000 	.word	0x20030000
 8000ab0:	20030000 	.word	0x20030000
 8000ab4:	0800b01c 	.word	0x0800b01c
  INIT_BSS _sbss, _ebss
 8000ab8:	200001ac 	.word	0x200001ac
 8000abc:	20001c3c 	.word	0x20001c3c

08000ac0 <ADC1_IRQHandler>:
=======
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000edc:	f7ff ff9e 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoopForever+0x6>)
 8000ee2:	490c      	ldr	r1, [pc, #48]	; (8000f14 <LoopForever+0xa>)
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <LoopForever+0xe>)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f7ff ffed 	bl	8000ec6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <LoopForever+0x12>)
 8000eee:	490c      	ldr	r1, [pc, #48]	; (8000f20 <LoopForever+0x16>)
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <LoopForever+0x1a>)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f7ff ffe7 	bl	8000ec6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <LoopForever+0x1e>)
 8000efa:	490c      	ldr	r1, [pc, #48]	; (8000f2c <LoopForever+0x22>)
 8000efc:	2300      	movs	r3, #0
 8000efe:	f7ff ffe8 	bl	8000ed2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f02:	f00a fe11 	bl	800bb28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f06:	f7ff faab 	bl	8000460 <main>

08000f0a <LoopForever>:

LoopForever:
  b LoopForever
 8000f0a:	e7fe      	b.n	8000f0a <LoopForever>
  ldr   r0, =_estack
 8000f0c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200001ac 	.word	0x200001ac
 8000f18:	0800cca0 	.word	0x0800cca0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f1c:	20030000 	.word	0x20030000
 8000f20:	20030000 	.word	0x20030000
 8000f24:	0800ce44 	.word	0x0800ce44
  INIT_BSS _sbss, _ebss
 8000f28:	200001ac 	.word	0x200001ac
 8000f2c:	20001d10 	.word	0x20001d10

08000f30 <ADC1_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< Updated upstream
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_IRQHandler>
	...

08000ac4 <HAL_Init>:
=======
 8000f30:	e7fe      	b.n	8000f30 <ADC1_IRQHandler>
	...

08000f34 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]
=======
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_Init+0x3c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <HAL_Init+0x3c>)
 8000ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad8:	6013      	str	r3, [r2, #0]
=======
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_Init+0x3c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_Init+0x3c>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 f96c 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae0:	200f      	movs	r0, #15
 8000ae2:	f000 f80f 	bl	8000b04 <HAL_InitTick>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	e001      	b.n	8000af6 <HAL_Init+0x32>
=======
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f000 f96c 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f50:	200f      	movs	r0, #15
 8000f52:	f000 f80f 	bl	8000f74 <HAL_InitTick>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	e001      	b.n	8000f66 <HAL_Init+0x32>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 8000af2:	f7ff fe72 	bl	80007da <HAL_MspInit>
=======
 8000f62:	f7ff fdf5 	bl	8000b50 <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000af6:	79fb      	ldrb	r3, [r7, #7]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58004000 	.word	0x58004000

08000b04 <HAL_InitTick>:
=======
 8000f66:	79fb      	ldrb	r3, [r7, #7]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58004000 	.word	0x58004000

08000f74 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d024      	beq.n	8000b62 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b18:	f003 f920 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f974 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10f      	bne.n	8000b5c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d809      	bhi.n	8000b56 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4a:	f000 f940 	bl	8000dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_InitTick+0x70>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_InitTick+0x62>
=======
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d024      	beq.n	8000fd2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f88:	f003 fbf4 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f974 	bl	800128e <HAL_SYSTICK_Config>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10f      	bne.n	8000fcc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d809      	bhi.n	8000fc6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	f000 f940 	bl	800123e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <HAL_InitTick+0x70>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	e007      	b.n	8000fd6 <HAL_InitTick+0x62>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e004      	b.n	8000b66 <HAL_InitTick+0x62>
=======
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e004      	b.n	8000fd6 <HAL_InitTick+0x62>
>>>>>>> Stashed changes
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e001      	b.n	8000b66 <HAL_InitTick+0x62>
=======
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e001      	b.n	8000fd6 <HAL_InitTick+0x62>
>>>>>>> Stashed changes
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< Updated upstream
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
=======
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000050 	.word	0x20000050
 8000b74:	2000004c 	.word	0x2000004c

08000b78 <HAL_IncTick>:
=======
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000050 	.word	0x20000050
 8000fe4:	2000004c 	.word	0x2000004c

08000fe8 <HAL_IncTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000050 	.word	0x20000050
 8000b9c:	20000234 	.word	0x20000234

08000ba0 <HAL_GetTick>:
=======
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000050 	.word	0x20000050
 800100c:	20000308 	.word	0x20000308

08001010 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000234 	.word	0x20000234

08000bb8 <HAL_GetTickPrio>:
=======
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000308 	.word	0x20000308

08001028 <HAL_GetTickPrio>:
>>>>>>> Stashed changes
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
<<<<<<< Updated upstream
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTickPrio+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000004c 	.word	0x2000004c

08000bd0 <HAL_Delay>:
=======
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTickPrio+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000004c 	.word	0x2000004c

08001040 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffe2 	bl	8000ba0 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffd2 	bl	8000ba0 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000050 	.word	0x20000050

08000c18 <__NVIC_SetPriorityGrouping>:
=======
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffe2 	bl	8001010 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffd2 	bl	8001010 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000050 	.word	0x20000050

08001088 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
=======
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
=======
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
=======
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
=======
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
=======
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
=======
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
=======
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
=======
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
=======
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff29 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
=======
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8000ddc:	f7ff ff40 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff90 	bl	8000d0c <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5f 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
=======
 800124c:	f7ff ff40 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
=======
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff33 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
=======
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff33 	bl	80010ec <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa4 	bl	8000d74 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
=======
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa4 	bl	80011e4 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e08e      	b.n	80013d8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_DMA_Init+0x138>)
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d80f      	bhi.n	80012e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <HAL_DMA_Init+0x13c>)
 80012ce:	4413      	add	r3, r2
 80012d0:	4a45      	ldr	r2, [pc, #276]	; (80013e8 <HAL_DMA_Init+0x140>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	009a      	lsls	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a42      	ldr	r2, [pc, #264]	; (80013ec <HAL_DMA_Init+0x144>)
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
 80012e4:	e00e      	b.n	8001304 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <HAL_DMA_Init+0x148>)
 80012ee:	4413      	add	r3, r2
 80012f0:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <HAL_DMA_Init+0x140>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	009a      	lsls	r2, r3, #2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a3c      	ldr	r2, [pc, #240]	; (80013f4 <HAL_DMA_Init+0x14c>)
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2202      	movs	r2, #2
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800131a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800131e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fa16 	bl	8001788 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001364:	d102      	bne.n	800136c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001378:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001382:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d010      	beq.n	80013ae <HAL_DMA_Init+0x106>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d80c      	bhi.n	80013ae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa35 	bl	8001804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	e008      	b.n	80013c0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020407 	.word	0x40020407
 80013e4:	bffdfff8 	.word	0xbffdfff8
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	40020000 	.word	0x40020000
 80013f0:	bffdfbf8 	.word	0xbffdfbf8
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_DMA_Start_IT+0x20>
 8001414:	2302      	movs	r3, #2
 8001416:	e066      	b.n	80014e6 <HAL_DMA_Start_IT+0xee>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b01      	cmp	r3, #1
 800142a:	d155      	bne.n	80014d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f95a 	bl	800170a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 020e 	orr.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e00f      	b.n	8001490 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0204 	bic.w	r2, r2, #4
 800147e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 020a 	orr.w	r2, r2, #10
 800148e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e005      	b.n	80014e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014e0:	2302      	movs	r3, #2
 80014e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d005      	beq.n	8001512 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2204      	movs	r2, #4
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e047      	b.n	80015a2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 020e 	bic.w	r2, r2, #14
 8001520:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f003 021c 	and.w	r2, r3, #28
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800155e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00c      	beq.n	8001582 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001576:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001580:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
    }
  }
  return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f003 031c 	and.w	r3, r3, #28
 80015cc:	2204      	movs	r2, #4
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d026      	beq.n	8001626 <HAL_DMA_IRQHandler+0x7a>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d021      	beq.n	8001626 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0204 	bic.w	r2, r2, #4
 80015fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f003 021c 	and.w	r2, r3, #28
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	2104      	movs	r1, #4
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	2b00      	cmp	r3, #0
 800161a:	d071      	beq.n	8001700 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001624:	e06c      	b.n	8001700 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f003 031c 	and.w	r3, r3, #28
 800162e:	2202      	movs	r2, #2
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d02e      	beq.n	8001698 <HAL_DMA_IRQHandler+0xec>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d029      	beq.n	8001698 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10b      	bne.n	800166a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 020a 	bic.w	r2, r2, #10
 8001660:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f003 021c 	and.w	r2, r3, #28
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2102      	movs	r1, #2
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	2b00      	cmp	r3, #0
 800168c:	d038      	beq.n	8001700 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001696:	e033      	b.n	8001700 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 031c 	and.w	r3, r3, #28
 80016a0:	2208      	movs	r2, #8
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d02a      	beq.n	8001702 <HAL_DMA_IRQHandler+0x156>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d025      	beq.n	8001702 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 020e 	bic.w	r2, r2, #14
 80016c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f003 021c 	and.w	r2, r3, #28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001700:	bf00      	nop
 8001702:	bf00      	nop
}
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001720:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001732:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	f003 021c 	and.w	r2, r3, #28
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f202 	lsl.w	r2, r1, r2
 8001746:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b10      	cmp	r3, #16
 8001756:	d108      	bne.n	800176a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001768:	e007      	b.n	800177a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	60da      	str	r2, [r3, #12]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001798:	429a      	cmp	r2, r3
 800179a:	d80a      	bhi.n	80017b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017a8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6493      	str	r3, [r2, #72]	; 0x48
 80017b0:	e007      	b.n	80017c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	009a      	lsls	r2, r3, #2
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017bc:	4413      	add	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3b08      	subs	r3, #8
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40020407 	.word	0x40020407
 80017f8:	4002081c 	.word	0x4002081c
 80017fc:	cccccccd 	.word	0xcccccccd
 8001800:	40020880 	.word	0x40020880

08001804 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001828:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3b01      	subs	r3, #1
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2201      	movs	r2, #1
 8001834:	409a      	lsls	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	1000823f 	.word	0x1000823f
 800184c:	40020940 	.word	0x40020940

08001850 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
=======
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< Updated upstream
 8000e46:	e14c      	b.n	80010e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 813e 	beq.w	80010dc <HAL_GPIO_Init+0x2a4>
=======
 800185e:	e14c      	b.n	8001afa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 813e 	beq.w	8001af4 <HAL_GPIO_Init+0x2a4>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
=======
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d005      	beq.n	8001890 <HAL_GPIO_Init+0x40>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d130      	bne.n	80018f2 <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
=======
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c6:	2201      	movs	r2, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< Updated upstream
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d017      	beq.n	8000f16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	60da      	str	r2, [r3, #12]
=======
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d017      	beq.n	800192e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d123      	bne.n	8000f6a <HAL_GPIO_Init+0x132>
=======
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d123      	bne.n	8001982 <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< Updated upstream
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	6939      	ldr	r1, [r7, #16]
 800197e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0203 	and.w	r2, r3, #3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]
=======
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0203 	and.w	r2, r3, #3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8098 	beq.w	80010dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fac:	4a54      	ldr	r2, [pc, #336]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd6:	d019      	beq.n	800100c <HAL_GPIO_Init+0x1d4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x2cc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_GPIO_Init+0x1d0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a49      	ldr	r2, [pc, #292]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1cc>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a48      	ldr	r2, [pc, #288]	; (800110c <HAL_GPIO_Init+0x2d4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1c8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a47      	ldr	r2, [pc, #284]	; (8001110 <HAL_GPIO_Init+0x2d8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1c4>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e008      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001000:	2303      	movs	r3, #3
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4938      	ldr	r1, [pc, #224]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001050:	4a30      	ldr	r2, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 80010b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
=======
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8098 	beq.w	8001af4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80019c4:	4a54      	ldr	r2, [pc, #336]	; (8001b18 <HAL_GPIO_Init+0x2c8>)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ee:	d019      	beq.n	8001a24 <HAL_GPIO_Init+0x1d4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a4a      	ldr	r2, [pc, #296]	; (8001b1c <HAL_GPIO_Init+0x2cc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1d0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1cc>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a48      	ldr	r2, [pc, #288]	; (8001b24 <HAL_GPIO_Init+0x2d4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1c8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <HAL_GPIO_Init+0x2d8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1c4>
 8001a10:	2304      	movs	r3, #4
 8001a12:	e008      	b.n	8001a26 <HAL_GPIO_Init+0x1d6>
 8001a14:	2307      	movs	r3, #7
 8001a16:	e006      	b.n	8001a26 <HAL_GPIO_Init+0x1d6>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1d6>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1d6>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1d6>
 8001a24:	2300      	movs	r3, #0
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a36:	4938      	ldr	r1, [pc, #224]	; (8001b18 <HAL_GPIO_Init+0x2c8>)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a68:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a92:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aec:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f47f aeab 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	58000800 	.word	0x58000800

08001118 <HAL_GPIO_ReadPin>:
=======
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f aeab 	bne.w	8001860 <HAL_GPIO_Init+0x10>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	48000400 	.word	0x48000400
 8001b20:	48000800 	.word	0x48000800
 8001b24:	48000c00 	.word	0x48000c00
 8001b28:	48001000 	.word	0x48001000
 8001b2c:	58000800 	.word	0x58000800

08001b30 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
=======
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
<<<<<<< Updated upstream
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e001      	b.n	800113a <HAL_GPIO_ReadPin+0x22>
=======
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_WritePin>:
=======
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
=======
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
=======
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 8001164:	e002      	b.n	800116c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_PCD_Init>:
=======
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_PCD_Init>:
>>>>>>> Stashed changes
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af06      	add	r7, sp, #24
 800117e:	6078      	str	r0, [r7, #4]
=======
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af06      	add	r7, sp, #24
 8001b96:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< Updated upstream
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0cb      	b.n	8001322 <HAL_PCD_Init+0x1aa>
=======
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0cb      	b.n	8001d3a <HAL_PCD_Init+0x1aa>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< Updated upstream
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
=======
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< Updated upstream
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f008 fa62 	bl	8009668 <HAL_PCD_MspInit>
=======
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f009 fc86 	bl	800b4c8 <HAL_PCD_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< Updated upstream
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fd5a 	bl	8004c6a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e040      	b.n	800123e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3301      	adds	r3, #1
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3303      	adds	r3, #3
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3338      	adds	r3, #56	; 0x38
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	333c      	adds	r3, #60	; 0x3c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3340      	adds	r3, #64	; 0x40
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3b9      	bcc.n	80011bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e044      	b.n	80012d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3b5      	bcc.n	800124e <HAL_PCD_Init+0xd6>
=======
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 ff7e 	bl	8006aca <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e040      	b.n	8001c56 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	3301      	adds	r3, #1
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3303      	adds	r3, #3
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	333c      	adds	r3, #60	; 0x3c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3340      	adds	r3, #64	; 0x40
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	3301      	adds	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3b9      	bcc.n	8001bd4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e044      	b.n	8001cf0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3301      	adds	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d3b5      	bcc.n	8001c66 <HAL_PCD_Init+0xd6>
>>>>>>> Stashed changes
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
<<<<<<< Updated upstream
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	687e      	ldr	r6, [r7, #4]
 80012ea:	466d      	mov	r5, sp
 80012ec:	f106 0410 	add.w	r4, r6, #16
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	1d33      	adds	r3, r6, #4
 80012fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f003 fccf 	bl	8004ca0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f001 fc45 	bl	8002baa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800132a <HAL_PCD_Start>:
=======
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	687e      	ldr	r6, [r7, #4]
 8001d02:	466d      	mov	r5, sp
 8001d04:	f106 0410 	add.w	r4, r6, #16
 8001d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	602b      	str	r3, [r5, #0]
 8001d10:	1d33      	adds	r3, r6, #4
 8001d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f004 fef3 	bl	8006b00 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f001 fc45 	bl	80035c2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d42 <HAL_PCD_Start>:
>>>>>>> Stashed changes
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_PCD_Start+0x16>
 800133c:	2302      	movs	r3, #2
 800133e:	e012      	b.n	8001366 <HAL_PCD_Start+0x3c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fc75 	bl	8004c3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f005 ff39 	bl	80071ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_PCD_IRQHandler>:
=======
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_Start+0x16>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e012      	b.n	8001d7e <HAL_PCD_Start+0x3c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f004 fe99 	bl	8006a9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f007 f95d 	bl	800902e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f005 ff3e 	bl	80071fc <USB_ReadInterrupts>
 8001380:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_PCD_IRQHandler+0x26>
=======
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f007 f962 	bl	800905c <USB_ReadInterrupts>
 8001d98:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_PCD_IRQHandler+0x26>
>>>>>>> Stashed changes
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
<<<<<<< Updated upstream
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fb05 	bl	800199c <PCD_EP_ISR_Handler>

    return;
 8001392:	e110      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d013      	beq.n	80013c6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
=======
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fb05 	bl	80023b4 <PCD_EP_ISR_Handler>

    return;
 8001daa:	e110      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d013      	beq.n	8001dde <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
<<<<<<< Updated upstream
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f008 fa09 	bl	80097ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013bc:	2100      	movs	r1, #0
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8fc 	bl	80015bc <HAL_PCD_SetAddress>

    return;
 80013c4:	e0f7      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013e2:	b292      	uxth	r2, r2
 80013e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
=======
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f009 fc2d 	bl	800b62e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8fc 	bl	8001fd4 <HAL_PCD_SetAddress>

    return;
 8001ddc:	e0f7      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dfa:	b292      	uxth	r2, r2
 8001dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e00:	e0e5      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e24:	e0d3      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d034      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	b292      	uxth	r2, r2
 8001e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0208 	bic.w	r2, r2, #8
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e72:	2100      	movs	r1, #0
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f009 fdd1 	bl	800ba1c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f009 fc10 	bl	800b6a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e98:	e099      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d027      	beq.n	8001ef4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0208 	orr.w	r2, r2, #8
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes

    return;
 80013e8:	e0e5      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00c      	beq.n	800140e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001406:	b292      	uxth	r2, r2
 8001408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800140c:	e0d3      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d034      	beq.n	8001482 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0204 	bic.w	r2, r2, #4
 800142a:	b292      	uxth	r2, r2
 800142c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0208 	bic.w	r2, r2, #8
 8001442:	b292      	uxth	r2, r2
 8001444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f008 fbad 	bl	8009bbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f008 f9ec 	bl	8009840 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800147a:	b292      	uxth	r2, r2
 800147c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001480:	e099      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001488:	2b00      	cmp	r3, #0
 800148a:	d027      	beq.n	80014dc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001494:	b29a      	uxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0208 	orr.w	r2, r2, #8
 800149e:	b292      	uxth	r2, r2
 80014a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
<<<<<<< Updated upstream
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0204 	orr.w	r2, r2, #4
 80014ce:	b292      	uxth	r2, r2
 80014d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
=======
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0204 	orr.w	r2, r2, #4
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
<<<<<<< Updated upstream
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f008 f999 	bl	800980c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014da:	e06c      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
=======
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f009 fbbd 	bl	800b66c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ef2:	e06c      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
>>>>>>> Stashed changes
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
<<<<<<< Updated upstream
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d040      	beq.n	8001568 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f8:	b292      	uxth	r2, r2
 80014fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d12b      	bne.n	8001560 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0204 	orr.w	r2, r2, #4
 800151a:	b292      	uxth	r2, r2
 800151c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0208 	orr.w	r2, r2, #8
 8001532:	b292      	uxth	r2, r2
 8001534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001548:	b29b      	uxth	r3, r3
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
=======
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d040      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f10:	b292      	uxth	r2, r2
 8001f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12b      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0204 	orr.w	r2, r2, #4
 8001f32:	b292      	uxth	r2, r2
 8001f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
<<<<<<< Updated upstream
 8001556:	2101      	movs	r1, #1
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f008 fb2f 	bl	8009bbc <HAL_PCDEx_LPM_Callback>
=======
 8001f6e:	2101      	movs	r1, #1
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f009 fd53 	bl	800ba1c <HAL_PCDEx_LPM_Callback>
>>>>>>> Stashed changes
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
<<<<<<< Updated upstream
 800155e:	e02a      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f008 f953 	bl	800980c <HAL_PCD_SuspendCallback>
    return;
 8001566:	e026      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00f      	beq.n	8001592 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001584:	b292      	uxth	r2, r2
 8001586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
=======
 8001f76:	e02a      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f009 fb77 	bl	800b66c <HAL_PCD_SuspendCallback>
    return;
 8001f7e:	e026      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00f      	beq.n	8001faa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
<<<<<<< Updated upstream
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f008 f911 	bl	80097b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001590:	e011      	b.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00c      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015b4:	bf00      	nop
  }
}
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_PCD_SetAddress>:
=======
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f009 fb35 	bl	800b612 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fa8:	e011      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fcc:	bf00      	nop
  }
}
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_PCD_SetAddress>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< Updated upstream
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_PCD_SetAddress+0x1a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e013      	b.n	80015fe <HAL_PCD_SetAddress+0x42>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f005 fdd9 	bl	80071a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_PCD_EP_Open>:
=======
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_SetAddress+0x1a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e013      	b.n	8002016 <HAL_PCD_SetAddress+0x42>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f006 fffd 	bl	8009006 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_PCD_EP_Open>:
>>>>>>> Stashed changes
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< Updated upstream
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	4608      	mov	r0, r1
 8001610:	4611      	mov	r1, r2
 8001612:	461a      	mov	r2, r3
 8001614:	4603      	mov	r3, r0
 8001616:	70fb      	strb	r3, [r7, #3]
 8001618:	460b      	mov	r3, r1
 800161a:	803b      	strh	r3, [r7, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da0e      	bge.n	800164a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2201      	movs	r2, #1
 8001646:	705a      	strb	r2, [r3, #1]
 8001648:	e00e      	b.n	8001668 <HAL_PCD_EP_Open+0x62>
=======
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	4608      	mov	r0, r1
 8002028:	4611      	mov	r1, r2
 800202a:	461a      	mov	r2, r3
 800202c:	4603      	mov	r3, r0
 800202e:	70fb      	strb	r3, [r7, #3]
 8002030:	460b      	mov	r3, r1
 8002032:	803b      	strh	r3, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800203c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da0e      	bge.n	8002062 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	705a      	strb	r2, [r3, #1]
 8002060:	e00e      	b.n	8002080 <HAL_PCD_EP_Open+0x62>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< Updated upstream
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	f003 0207 	and.w	r2, r3, #7
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2da      	uxtb	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001674:	883a      	ldrh	r2, [r7, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	78ba      	ldrb	r2, [r7, #2]
 800167e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001680:	78bb      	ldrb	r3, [r7, #2]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d102      	bne.n	800168c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_PCD_EP_Open+0x94>
 8001696:	2302      	movs	r3, #2
 8001698:	e00e      	b.n	80016b8 <HAL_PCD_EP_Open+0xb2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fb1b 	bl	8004ce4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80016b6:	7afb      	ldrb	r3, [r7, #11]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_PCD_EP_Close>:
=======
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 0207 	and.w	r2, r3, #7
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800208c:	883a      	ldrh	r2, [r7, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	78ba      	ldrb	r2, [r7, #2]
 8002096:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002098:	78bb      	ldrb	r3, [r7, #2]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d102      	bne.n	80020a4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_PCD_EP_Open+0x94>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e00e      	b.n	80020d0 <HAL_PCD_EP_Open+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fd3f 	bl	8006b44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020ce:	7afb      	ldrb	r3, [r7, #11]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_EP_Close>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da0e      	bge.n	80016f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	705a      	strb	r2, [r3, #1]
 80016f0:	e00e      	b.n	8001710 <HAL_PCD_EP_Close+0x50>
=======
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da0e      	bge.n	800210a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	705a      	strb	r2, [r3, #1]
 8002108:	e00e      	b.n	8002128 <HAL_PCD_EP_Close+0x50>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< Updated upstream
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	f003 0207 	and.w	r2, r3, #7
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	b2da      	uxtb	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_PCD_EP_Close+0x6a>
 8001726:	2302      	movs	r3, #2
 8001728:	e00e      	b.n	8001748 <HAL_PCD_EP_Close+0x88>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fe97 	bl	800546c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_PCD_EP_Receive>:
=======
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 0207 	and.w	r2, r3, #7
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_PCD_EP_Close+0x6a>
 800213e:	2302      	movs	r3, #2
 8002140:	e00e      	b.n	8002160 <HAL_PCD_EP_Close+0x88>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f005 f8bb 	bl	80072cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_Receive>:
>>>>>>> Stashed changes
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< Updated upstream
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	460b      	mov	r3, r1
 800175e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	f003 0207 	and.w	r2, r3, #7
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2200      	movs	r2, #0
 800178e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	b2da      	uxtb	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6979      	ldr	r1, [r7, #20]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f84f 	bl	8005846 <USB_EPStartXfer>

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_PCD_EP_GetRxCount>:
=======
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	460b      	mov	r3, r1
 8002176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2200      	movs	r2, #0
 80021a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6979      	ldr	r1, [r7, #20]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fa73 	bl	80076a6 <USB_EPStartXfer>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_PCD_EP_GetRxCount>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f003 0207 	and.w	r2, r3, #7
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80017d4:	681b      	ldr	r3, [r3, #0]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_PCD_EP_Transmit>:
=======
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 0207 	and.w	r2, r3, #7
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021ec:	681b      	ldr	r3, [r3, #0]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_PCD_EP_Transmit>:
>>>>>>> Stashed changes
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< Updated upstream
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	460b      	mov	r3, r1
 80017f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2201      	movs	r2, #1
 800182c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	b2da      	uxtb	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6979      	ldr	r1, [r7, #20]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 f800 	bl	8005846 <USB_EPStartXfer>

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_EP_SetStall>:
=======
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	460b      	mov	r3, r1
 8002208:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2201      	movs	r2, #1
 8002244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002246:	7afb      	ldrb	r3, [r7, #11]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	b2da      	uxtb	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	4618      	mov	r0, r3
 800225a:	f005 fa24 	bl	80076a6 <USB_EPStartXfer>

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_PCD_EP_SetStall>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	f003 0207 	and.w	r2, r3, #7
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d901      	bls.n	800186e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e03e      	b.n	80018ec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800186e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	da0e      	bge.n	8001894 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	705a      	strb	r2, [r3, #1]
 8001892:	e00c      	b.n	80018ae <HAL_PCD_EP_SetStall+0x5e>
=======
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d901      	bls.n	8002286 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e03e      	b.n	8002304 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228a:	2b00      	cmp	r3, #0
 800228c:	da0e      	bge.n	80022ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	705a      	strb	r2, [r3, #1]
 80022aa:	e00c      	b.n	80022c6 <HAL_PCD_EP_SetStall+0x5e>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< Updated upstream
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_PCD_EP_SetStall+0x7e>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e00e      	b.n	80018ec <HAL_PCD_EP_SetStall+0x9c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fb63 	bl	8006fa8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_PCD_EP_ClrStall>:
=======
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_PCD_EP_SetStall+0x7e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e00e      	b.n	8002304 <HAL_PCD_EP_SetStall+0x9c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f006 fd87 	bl	8008e08 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_PCD_EP_ClrStall>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f003 020f 	and.w	r2, r3, #15
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d901      	bls.n	8001912 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e040      	b.n	8001994 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da0e      	bge.n	8001938 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	705a      	strb	r2, [r3, #1]
 8001936:	e00e      	b.n	8001956 <HAL_PCD_EP_ClrStall+0x62>
=======
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d901      	bls.n	800232a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e040      	b.n	80023ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800232a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800232e:	2b00      	cmp	r3, #0
 8002330:	da0e      	bge.n	8002350 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	705a      	strb	r2, [r3, #1]
 800234e:	e00e      	b.n	800236e <HAL_PCD_EP_ClrStall+0x62>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< Updated upstream
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 0207 	and.w	r2, r3, #7
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	b2da      	uxtb	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_PCD_EP_ClrStall+0x82>
 8001972:	2302      	movs	r3, #2
 8001974:	e00e      	b.n	8001994 <HAL_PCD_EP_ClrStall+0xa0>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fb60 	bl	800704a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <PCD_EP_ISR_Handler>:
=======
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 0207 	and.w	r2, r3, #7
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_PCD_EP_ClrStall+0x82>
 800238a:	2302      	movs	r3, #2
 800238c:	e00e      	b.n	80023ac <HAL_PCD_EP_ClrStall+0xa0>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68f9      	ldr	r1, [r7, #12]
 800239c:	4618      	mov	r0, r3
 800239e:	f006 fd84 	bl	8008eaa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <PCD_EP_ISR_Handler>:
>>>>>>> Stashed changes
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 800199c:	b580      	push	{r7, lr}
 800199e:	b096      	sub	sp, #88	; 0x58
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
=======
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b096      	sub	sp, #88	; 0x58
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
<<<<<<< Updated upstream
 80019a4:	e3b1      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80019c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 8173 	bne.w	8001cb0 <PCD_EP_ISR_Handler+0x314>
=======
 80023bc:	e3b1      	b.n	8002b22 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80023d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 8173 	bne.w	80026c8 <PCD_EP_ISR_Handler+0x314>
>>>>>>> Stashed changes
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
<<<<<<< Updated upstream
 80019ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d150      	bne.n	8001a78 <PCD_EP_ISR_Handler+0xdc>
=======
 80023e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d150      	bne.n	8002490 <PCD_EP_ISR_Handler+0xdc>
>>>>>>> Stashed changes
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
<<<<<<< Updated upstream
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e6:	81fb      	strh	r3, [r7, #14]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3328      	adds	r3, #40	; 0x28
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	441a      	add	r2, r3
 8001a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a34:	615a      	str	r2, [r3, #20]
=======
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	81fb      	strh	r3, [r7, #14]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240e:	b29b      	uxth	r3, r3
 8002410:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3328      	adds	r3, #40	; 0x28
 8002416:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4413      	add	r3, r2
 8002432:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800243c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	441a      	add	r2, r3
 800244a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244c:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
<<<<<<< Updated upstream
 8001a36:	2100      	movs	r1, #0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f007 fea0 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 835f 	beq.w	800210a <PCD_EP_ISR_Handler+0x76e>
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f040 835a 	bne.w	800210a <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a76:	e348      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
=======
 800244e:	2100      	movs	r1, #0
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f009 f8c4 	bl	800b5de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 835f 	beq.w	8002b22 <PCD_EP_ISR_Handler+0x76e>
 8002464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 835a 	bne.w	8002b22 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800247a:	b2da      	uxtb	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b292      	uxth	r2, r2
 8002482:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800248e:	e348      	b.n	8002b22 <PCD_EP_ISR_Handler+0x76e>
>>>>>>> Stashed changes
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
<<<<<<< Updated upstream
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d032      	beq.n	8001afc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	f005 fbe5 	bl	80072a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	823b      	strh	r3, [r7, #16]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	8a3a      	ldrh	r2, [r7, #16]
 8001aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001af0:	b292      	uxth	r2, r2
 8001af2:	801a      	strh	r2, [r3, #0]
=======
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002496:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d032      	beq.n	8002514 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f006 fe09 	bl	8009100 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024fa:	4013      	ands	r3, r2
 80024fc:	823b      	strh	r3, [r7, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	8a3a      	ldrh	r2, [r7, #16]
 8002504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002508:	b292      	uxth	r2, r2
 800250a:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< Updated upstream
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f007 fe15 	bl	8009724 <HAL_PCD_SetupStageCallback>
 8001afa:	e306      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001afc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f280 8302 	bge.w	800210a <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b12:	4013      	ands	r3, r2
 8001b14:	83fb      	strh	r3, [r7, #30]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	8bfa      	ldrh	r2, [r7, #30]
 8001b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b20:	b292      	uxth	r2, r2
 8001b22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d019      	beq.n	8001b88 <PCD_EP_ISR_Handler+0x1ec>
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d015      	beq.n	8001b88 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b62:	6959      	ldr	r1, [r3, #20]
 8001b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f005 fb97 	bl	80072a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	615a      	str	r2, [r3, #20]
=======
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f009 f839 	bl	800b584 <HAL_PCD_SetupStageCallback>
 8002512:	e306      	b.n	8002b22 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002514:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002518:	2b00      	cmp	r3, #0
 800251a:	f280 8302 	bge.w	8002b22 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29a      	uxth	r2, r3
 8002526:	f640 738f 	movw	r3, #3983	; 0xf8f
 800252a:	4013      	ands	r3, r2
 800252c:	83fb      	strh	r3, [r7, #30]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	8bfa      	ldrh	r2, [r7, #30]
 8002534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002538:	b292      	uxth	r2, r2
 800253a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4413      	add	r3, r2
 8002556:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002562:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d019      	beq.n	80025a0 <PCD_EP_ISR_Handler+0x1ec>
 800256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	6959      	ldr	r1, [r3, #20]
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002582:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002584:	b29b      	uxth	r3, r3
 8002586:	f006 fdbb 	bl	8009100 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800258a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	441a      	add	r2, r3
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
<<<<<<< Updated upstream
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f007 fde0 	bl	8009748 <HAL_PCD_DataOutStageCallback>
=======
 8002598:	2100      	movs	r1, #0
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f009 f804 	bl	800b5a8 <HAL_PCD_DataOutStageCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
<<<<<<< Updated upstream
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 82b5 	bne.w	800210a <PCD_EP_ISR_Handler+0x76e>
 8001ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ba4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001bac:	f000 82ad 	beq.w	800210a <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	801a      	strh	r2, [r3, #0]
 8001be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b3e      	cmp	r3, #62	; 0x3e
 8001be6:	d91d      	bls.n	8001c24 <PCD_EP_ISR_Handler+0x288>
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <PCD_EP_ISR_Handler+0x266>
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	647b      	str	r3, [r7, #68]	; 0x44
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	029b      	lsls	r3, r3, #10
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	e026      	b.n	8001c72 <PCD_EP_ISR_Handler+0x2d6>
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <PCD_EP_ISR_Handler+0x2a6>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e017      	b.n	8001c72 <PCD_EP_ISR_Handler+0x2d6>
 8001c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <PCD_EP_ISR_Handler+0x2c0>
 8001c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c58:	3301      	adds	r3, #1
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c82:	827b      	strh	r3, [r7, #18]
 8001c84:	8a7b      	ldrh	r3, [r7, #18]
 8001c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c8a:	827b      	strh	r3, [r7, #18]
 8001c8c:	8a7b      	ldrh	r3, [r7, #18]
 8001c8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c92:	827b      	strh	r3, [r7, #18]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	8a7b      	ldrh	r3, [r7, #18]
 8001c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	8013      	strh	r3, [r2, #0]
 8001cae:	e22c      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
=======
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80025aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 82b5 	bne.w	8002b22 <PCD_EP_ISR_Handler+0x76e>
 80025b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80025c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025c4:	f000 82ad 	beq.w	8002b22 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b3e      	cmp	r3, #62	; 0x3e
 80025fe:	d91d      	bls.n	800263c <PCD_EP_ISR_Handler+0x288>
 8002600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <PCD_EP_ISR_Handler+0x266>
 8002614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002616:	3b01      	subs	r3, #1
 8002618:	647b      	str	r3, [r7, #68]	; 0x44
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29a      	uxth	r2, r3
 8002620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002622:	b29b      	uxth	r3, r3
 8002624:	029b      	lsls	r3, r3, #10
 8002626:	b29b      	uxth	r3, r3
 8002628:	4313      	orrs	r3, r2
 800262a:	b29b      	uxth	r3, r3
 800262c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002634:	b29a      	uxth	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	e026      	b.n	800268a <PCD_EP_ISR_Handler+0x2d6>
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <PCD_EP_ISR_Handler+0x2a6>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800264e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002652:	b29a      	uxth	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	e017      	b.n	800268a <PCD_EP_ISR_Handler+0x2d6>
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	647b      	str	r3, [r7, #68]	; 0x44
 8002662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <PCD_EP_ISR_Handler+0x2c0>
 800266e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002670:	3301      	adds	r3, #1
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29a      	uxth	r2, r3
 800267a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267c:	b29b      	uxth	r3, r3
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	b29b      	uxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b29a      	uxth	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	827b      	strh	r3, [r7, #18]
 800269c:	8a7b      	ldrh	r3, [r7, #18]
 800269e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026a2:	827b      	strh	r3, [r7, #18]
 80026a4:	8a7b      	ldrh	r3, [r7, #18]
 80026a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026aa:	827b      	strh	r3, [r7, #18]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	8a7b      	ldrh	r3, [r7, #18]
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
 80026c6:	e22c      	b.n	8002b22 <PCD_EP_ISR_Handler+0x76e>
>>>>>>> Stashed changes
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
<<<<<<< Updated upstream
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cc4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f280 80f6 	bge.w	8001eba <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d00:	b292      	uxth	r2, r2
 8001d02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d04:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	7b1b      	ldrb	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d123      	bne.n	8001d6a <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001d4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 808e 	beq.w	8001e70 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5a:	6959      	ldr	r1, [r3, #20]
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	88da      	ldrh	r2, [r3, #6]
 8001d60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d64:	f005 fa9c 	bl	80072a0 <USB_ReadPMA>
 8001d68:	e082      	b.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
=======
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f280 80f6 	bge.w	80028d2 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026fc:	4013      	ands	r3, r2
 80026fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002718:	b292      	uxth	r2, r2
 800271a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800271c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	7b1b      	ldrb	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d123      	bne.n	8002782 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	4413      	add	r3, r2
 8002754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002762:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 808e 	beq.w	8002888 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	6959      	ldr	r1, [r3, #20]
 8002774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002776:	88da      	ldrh	r2, [r3, #6]
 8002778:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800277c:	f006 fcc0 	bl	8009100 <USB_ReadPMA>
 8002780:	e082      	b.n	8002888 <PCD_EP_ISR_Handler+0x4d4>
>>>>>>> Stashed changes
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6c:	78db      	ldrb	r3, [r3, #3]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d10a      	bne.n	8001d88 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d76:	461a      	mov	r2, r3
 8001d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f9d3 	bl	8002126 <HAL_PCD_EP_DB_Receive>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001d86:	e073      	b.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
=======
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	78db      	ldrb	r3, [r3, #3]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d10a      	bne.n	80027a0 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800278a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800278e:	461a      	mov	r2, r3
 8002790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9d3 	bl	8002b3e <HAL_PCD_EP_DB_Receive>
 8002798:	4603      	mov	r3, r0
 800279a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800279e:	e073      	b.n	8002888 <PCD_EP_ISR_Handler+0x4d4>
>>>>>>> Stashed changes
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
<<<<<<< Updated upstream
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	441a      	add	r2, r3
 8001db4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d022      	beq.n	8001e2c <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d02c      	beq.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1c:	6959      	ldr	r1, [r3, #20]
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	891a      	ldrh	r2, [r3, #8]
 8001e22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e26:	f005 fa3b 	bl	80072a0 <USB_ReadPMA>
 8001e2a:	e021      	b.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
=======
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	441a      	add	r2, r3
 80027cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d022      	beq.n	8002844 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002822:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002826:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02c      	beq.n	8002888 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002834:	6959      	ldr	r1, [r3, #20]
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	891a      	ldrh	r2, [r3, #8]
 800283a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800283e:	f006 fc5f 	bl	8009100 <USB_ReadPMA>
 8002842:	e021      	b.n	8002888 <PCD_EP_ISR_Handler+0x4d4>
>>>>>>> Stashed changes
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< Updated upstream
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e50:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e66:	895a      	ldrh	r2, [r3, #10]
 8001e68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e6c:	f005 fa18 	bl	80072a0 <USB_ReadPMA>
=======
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284c:	b29b      	uxth	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4413      	add	r3, r2
 800285e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002868:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800286c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002870:	2b00      	cmp	r3, #0
 8002872:	d009      	beq.n	8002888 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	6959      	ldr	r1, [r3, #20]
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	895a      	ldrh	r2, [r3, #10]
 8002880:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002884:	f006 fc3c 	bl	8009100 <USB_ReadPMA>
>>>>>>> Stashed changes
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
<<<<<<< Updated upstream
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e78:	441a      	add	r2, r3
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e86:	441a      	add	r2, r3
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <PCD_EP_ISR_Handler+0x504>
 8001e94:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d206      	bcs.n	8001eae <PCD_EP_ISR_Handler+0x512>
=======
 8002888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002890:	441a      	add	r2, r3
 8002892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002894:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800289e:	441a      	add	r2, r3
 80028a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <PCD_EP_ISR_Handler+0x504>
 80028ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80028b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d206      	bcs.n	80028c6 <PCD_EP_ISR_Handler+0x512>
>>>>>>> Stashed changes
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fc4e 	bl	8009748 <HAL_PCD_DataOutStageCallback>
 8001eac:	e005      	b.n	8001eba <PCD_EP_ISR_Handler+0x51e>
=======
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f008 fe72 	bl	800b5a8 <HAL_PCD_DataOutStageCallback>
 80028c4:	e005      	b.n	80028d2 <PCD_EP_ISR_Handler+0x51e>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< Updated upstream
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fcc6 	bl	8005846 <USB_EPStartXfer>
=======
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 feea 	bl	80076a6 <USB_EPStartXfer>
>>>>>>> Stashed changes
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
<<<<<<< Updated upstream
 8001eba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8121 	beq.w	800210a <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ec8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1a:	78db      	ldrb	r3, [r3, #3]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 80a2 	bne.w	8002066 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	7b1b      	ldrb	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8093 	beq.w	8002058 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d046      	beq.n	8001fcc <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d126      	bne.n	8001f94 <PCD_EP_ISR_Handler+0x5f8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	4413      	add	r3, r2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	00da      	lsls	r2, r3, #3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	4413      	add	r3, r2
 8001f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	e061      	b.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8001f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d15d      	bne.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	4413      	add	r3, r2
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	00da      	lsls	r2, r3, #3
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	e045      	b.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
=======
 80028d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8121 	beq.w	8002b22 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80028e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	441a      	add	r2, r3
 8002920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800292c:	b29b      	uxth	r3, r3
 800292e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	2b01      	cmp	r3, #1
 8002936:	f040 80a2 	bne.w	8002a7e <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	7b1b      	ldrb	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8093 	beq.w	8002a70 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800294a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d046      	beq.n	80029e4 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d126      	bne.n	80029ac <PCD_EP_ISR_Handler+0x5f8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	4413      	add	r3, r2
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	00da      	lsls	r2, r3, #3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	4413      	add	r3, r2
 8002980:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002990:	b29a      	uxth	r2, r3
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	801a      	strh	r2, [r3, #0]
 80029aa:	e061      	b.n	8002a70 <PCD_EP_ISR_Handler+0x6bc>
 80029ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d15d      	bne.n	8002a70 <PCD_EP_ISR_Handler+0x6bc>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	4413      	add	r3, r2
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00da      	lsls	r2, r3, #3
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	4413      	add	r3, r2
 80029d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	e045      	b.n	8002a70 <PCD_EP_ISR_Handler+0x6bc>
>>>>>>> Stashed changes
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
<<<<<<< Updated upstream
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d126      	bne.n	8002028 <PCD_EP_ISR_Handler+0x68c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fee:	4413      	add	r3, r2
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	00da      	lsls	r2, r3, #3
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200c:	b29a      	uxth	r2, r3
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002020:	b29a      	uxth	r2, r3
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	e017      	b.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8002028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d113      	bne.n	8002058 <PCD_EP_ISR_Handler+0x6bc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	4413      	add	r3, r2
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	00da      	lsls	r2, r3, #3
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	4413      	add	r3, r2
 800204c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
 8002052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]
=======
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d126      	bne.n	8002a40 <PCD_EP_ISR_Handler+0x68c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a06:	4413      	add	r3, r2
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	00da      	lsls	r2, r3, #3
 8002a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a12:	4413      	add	r3, r2
 8002a14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	801a      	strh	r2, [r3, #0]
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	e017      	b.n	8002a70 <PCD_EP_ISR_Handler+0x6bc>
 8002a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d113      	bne.n	8002a70 <PCD_EP_ISR_Handler+0x6bc>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a56:	4413      	add	r3, r2
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	00da      	lsls	r2, r3, #3
 8002a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a62:	4413      	add	r3, r2
 8002a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f007 fb8d 	bl	800977e <HAL_PCD_DataInStageCallback>
 8002064:	e051      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
=======
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f008 fdb1 	bl	800b5de <HAL_PCD_DataInStageCallback>
 8002a7c:	e051      	b.n	8002b22 <PCD_EP_ISR_Handler+0x76e>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
<<<<<<< Updated upstream
 8002066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d144      	bne.n	80020fc <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207a:	b29b      	uxth	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	4413      	add	r3, r2
 800208c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d907      	bls.n	80020b6 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	619a      	str	r2, [r3, #24]
 80020b4:	e002      	b.n	80020bc <PCD_EP_ISR_Handler+0x720>
=======
 8002a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d144      	bne.n	8002b14 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d907      	bls.n	8002ace <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ac6:	1ad2      	subs	r2, r2, r3
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	619a      	str	r2, [r3, #24]
 8002acc:	e002      	b.n	8002ad4 <PCD_EP_ISR_Handler+0x720>
>>>>>>> Stashed changes
            }
            else
            {
              ep->xfer_len = 0U;
<<<<<<< Updated upstream
 80020b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
=======
 8002ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
<<<<<<< Updated upstream
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <PCD_EP_ISR_Handler+0x736>
=======
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <PCD_EP_ISR_Handler+0x736>
>>>>>>> Stashed changes
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 80020c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f007 fb57 	bl	800977e <HAL_PCD_DataInStageCallback>
 80020d0:	e01b      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
=======
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f008 fd7b 	bl	800b5de <HAL_PCD_DataInStageCallback>
 8002ae8:	e01b      	b.n	8002b22 <PCD_EP_ISR_Handler+0x76e>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
<<<<<<< Updated upstream
 80020d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020da:	441a      	add	r2, r3
 80020dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020de:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80020e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020e8:	441a      	add	r2, r3
 80020ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fba6 	bl	8005846 <USB_EPStartXfer>
 80020fa:	e006      	b.n	800210a <PCD_EP_ISR_Handler+0x76e>
=======
 8002aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002af2:	441a      	add	r2, r3
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b00:	441a      	add	r2, r3
 8002b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b04:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fdca 	bl	80076a6 <USB_EPStartXfer>
 8002b12:	e006      	b.n	8002b22 <PCD_EP_ISR_Handler+0x76e>
>>>>>>> Stashed changes
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
<<<<<<< Updated upstream
 80020fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002100:	461a      	mov	r2, r3
 8002102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f917 	bl	8002338 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21b      	sxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f6ff ac45 	blt.w	80019a6 <PCD_EP_ISR_Handler+0xa>
=======
 8002b14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f917 	bl	8002d50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f6ff ac45 	blt.w	80023be <PCD_EP_ISR_Handler+0xa>
>>>>>>> Stashed changes
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3758      	adds	r7, #88	; 0x58
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_DB_Receive>:
=======
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3758      	adds	r7, #88	; 0x58
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_PCD_EP_DB_Receive>:
>>>>>>> Stashed changes
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< Updated upstream
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
=======
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b088      	sub	sp, #32
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< Updated upstream
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d07c      	beq.n	8002238 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4413      	add	r3, r2
 8002158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002162:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	8b7b      	ldrh	r3, [r7, #26]
 800216a:	429a      	cmp	r2, r3
 800216c:	d306      	bcc.n	800217c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	8b7b      	ldrh	r3, [r7, #26]
 8002174:	1ad2      	subs	r2, r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	619a      	str	r2, [r3, #24]
 800217a:	e002      	b.n	8002182 <HAL_PCD_EP_DB_Receive+0x5c>
=======
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07c      	beq.n	8002c50 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d306      	bcc.n	8002b94 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	8b7b      	ldrh	r3, [r7, #26]
 8002b8c:	1ad2      	subs	r2, r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	619a      	str	r2, [r3, #24]
 8002b92:	e002      	b.n	8002b9a <HAL_PCD_EP_DB_Receive+0x5c>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d123      	bne.n	80021d2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a4:	833b      	strh	r3, [r7, #24]
 80021a6:	8b3b      	ldrh	r3, [r7, #24]
 80021a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021ac:	833b      	strh	r3, [r7, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	8b3b      	ldrh	r3, [r7, #24]
 80021be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]
=======
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d123      	bne.n	8002bea <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	833b      	strh	r3, [r7, #24]
 8002bbe:	8b3b      	ldrh	r3, [r7, #24]
 8002bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bc4:	833b      	strh	r3, [r7, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	441a      	add	r2, r3
 8002bd4:	8b3b      	ldrh	r3, [r7, #24]
 8002bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< Updated upstream
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01f      	beq.n	800221c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	82fb      	strh	r3, [r7, #22]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	8afb      	ldrh	r3, [r7, #22]
 8002208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800220c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002218:	b29b      	uxth	r3, r3
 800221a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800221c:	8b7b      	ldrh	r3, [r7, #26]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8085 	beq.w	800232e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6959      	ldr	r1, [r3, #20]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	891a      	ldrh	r2, [r3, #8]
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	f005 f835 	bl	80072a0 <USB_ReadPMA>
 8002236:	e07a      	b.n	800232e <HAL_PCD_EP_DB_Receive+0x208>
=======
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01f      	beq.n	8002c34 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	82fb      	strh	r3, [r7, #22]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	8afb      	ldrh	r3, [r7, #22]
 8002c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c34:	8b7b      	ldrh	r3, [r7, #26]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8085 	beq.w	8002d46 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	891a      	ldrh	r2, [r3, #8]
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	f006 fa59 	bl	8009100 <USB_ReadPMA>
 8002c4e:	e07a      	b.n	8002d46 <HAL_PCD_EP_DB_Receive+0x208>
>>>>>>> Stashed changes
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< Updated upstream
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	429a      	cmp	r2, r3
 8002266:	d306      	bcc.n	8002276 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	8b7b      	ldrh	r3, [r7, #26]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	e002      	b.n	800227c <HAL_PCD_EP_DB_Receive+0x156>
=======
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	8b7b      	ldrh	r3, [r7, #26]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d306      	bcc.n	8002c8e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	8b7b      	ldrh	r3, [r7, #26]
 8002c86:	1ad2      	subs	r2, r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	619a      	str	r2, [r3, #24]
 8002c8c:	e002      	b.n	8002c94 <HAL_PCD_EP_DB_Receive+0x156>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d123      	bne.n	80022cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229e:	83fb      	strh	r3, [r7, #30]
 80022a0:	8bfb      	ldrh	r3, [r7, #30]
 80022a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022a6:	83fb      	strh	r3, [r7, #30]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	441a      	add	r2, r3
 80022b6:	8bfb      	ldrh	r3, [r7, #30]
 80022b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8013      	strh	r3, [r2, #0]
=======
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d123      	bne.n	8002ce4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	83fb      	strh	r3, [r7, #30]
 8002cb8:	8bfb      	ldrh	r3, [r7, #30]
 8002cba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cbe:	83fb      	strh	r3, [r7, #30]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	8bfb      	ldrh	r3, [r7, #30]
 8002cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
<<<<<<< Updated upstream
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11f      	bne.n	8002316 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f0:	83bb      	strh	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	8bbb      	ldrh	r3, [r7, #28]
 8002302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800230a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002312:	b29b      	uxth	r3, r3
 8002314:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002316:	8b7b      	ldrh	r3, [r7, #26]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6959      	ldr	r1, [r3, #20]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	895a      	ldrh	r2, [r3, #10]
 8002328:	8b7b      	ldrh	r3, [r7, #26]
 800232a:	f004 ffb9 	bl	80072a0 <USB_ReadPMA>
=======
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11f      	bne.n	8002d2e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	83bb      	strh	r3, [r7, #28]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	8bbb      	ldrh	r3, [r7, #28]
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d2e:	8b7b      	ldrh	r3, [r7, #26]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6959      	ldr	r1, [r3, #20]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	895a      	ldrh	r2, [r3, #10]
 8002d40:	8b7b      	ldrh	r3, [r7, #26]
 8002d42:	f006 f9dd 	bl	8009100 <USB_ReadPMA>
>>>>>>> Stashed changes
    }
  }

  return count;
<<<<<<< Updated upstream
 800232e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PCD_EP_DB_Transmit>:
=======
 8002d46:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_DB_Transmit>:
>>>>>>> Stashed changes
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< Updated upstream
 8002338:	b580      	push	{r7, lr}
 800233a:	b0a4      	sub	sp, #144	; 0x90
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
=======
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0a4      	sub	sp, #144	; 0x90
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< Updated upstream
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 81db 	beq.w	8002708 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	4413      	add	r3, r2
 800236c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002376:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002382:	429a      	cmp	r2, r3
 8002384:	d907      	bls.n	8002396 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	e002      	b.n	800239c <HAL_PCD_EP_DB_Transmit+0x64>
=======
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 81db 	beq.w	8003120 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d907      	bls.n	8002dae <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002da6:	1ad2      	subs	r2, r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	619a      	str	r2, [r3, #24]
 8002dac:	e002      	b.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x64>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
=======
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< Updated upstream
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 80b9 	bne.w	8002518 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d126      	bne.n	80023fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	4413      	add	r3, r2
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	00da      	lsls	r2, r3, #3
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	4413      	add	r3, r2
 80023d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	801a      	strh	r2, [r3, #0]
 80023fa:	e01a      	b.n	8002432 <HAL_PCD_EP_DB_Transmit+0xfa>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d116      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	4413      	add	r3, r2
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	00da      	lsls	r2, r3, #3
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	4413      	add	r3, r2
 8002426:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d126      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0x156>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	00da      	lsls	r2, r3, #3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002472:	b29a      	uxth	r2, r3
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002486:	b29a      	uxth	r2, r3
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e017      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x186>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	785b      	ldrb	r3, [r3, #1]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d113      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x186>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	4413      	add	r3, r2
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	00da      	lsls	r2, r3, #3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	4413      	add	r3, r2
 80024b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	2200      	movs	r2, #0
 80024bc:	801a      	strh	r2, [r3, #0]
=======
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 80b9 	bne.w	8002f30 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d126      	bne.n	8002e14 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	4413      	add	r3, r2
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	00da      	lsls	r2, r3, #3
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	4413      	add	r3, r2
 8002de8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	801a      	strh	r2, [r3, #0]
 8002e12:	e01a      	b.n	8002e4a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d116      	bne.n	8002e4a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	4413      	add	r3, r2
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	00da      	lsls	r2, r3, #3
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	2200      	movs	r2, #0
 8002e48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d126      	bne.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x156>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	00da      	lsls	r2, r3, #3
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	e017      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	785b      	ldrb	r3, [r3, #1]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d113      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x186>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	4413      	add	r3, r2
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	00da      	lsls	r2, r3, #3
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	4413      	add	r3, r2
 8002eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f007 f95a 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 82fa 	beq.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	82fb      	strh	r3, [r7, #22]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	441a      	add	r2, r3
 8002500:	8afb      	ldrh	r3, [r7, #22]
 8002502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]
 8002516:	e2d8      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
=======
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	4619      	mov	r1, r3
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f008 fb7e 	bl	800b5de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 82fa 	beq.w	80034e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	82fb      	strh	r3, [r7, #22]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	441a      	add	r2, r3
 8002f18:	8afb      	ldrh	r3, [r7, #22]
 8002f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	8013      	strh	r3, [r2, #0]
 8002f2e:	e2d8      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x792>
>>>>>>> Stashed changes
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< Updated upstream
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d021      	beq.n	8002566 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	441a      	add	r2, r3
 800254e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]
=======
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d021      	beq.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	441a      	add	r2, r3
 8002f66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< Updated upstream
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	2b01      	cmp	r3, #1
 800256e:	f040 82ac 	bne.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800257a:	441a      	add	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002588:	441a      	add	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6a1a      	ldr	r2, [r3, #32]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d30b      	bcc.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025aa:	1ad2      	subs	r2, r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	621a      	str	r2, [r3, #32]
 80025b0:	e017      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d108      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80025ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025ca:	e00a      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
=======
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 82ac 	bne.w	80034e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f92:	441a      	add	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fa0:	441a      	add	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d30b      	bcc.n	8002fca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	e017      	b.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d108      	bne.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002fd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fe2:	e00a      	b.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x2aa>
>>>>>>> Stashed changes
        }
        else
        {
          ep->xfer_fill_db = 0U;
<<<<<<< Updated upstream
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
=======
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d165      	bne.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x37e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	4413      	add	r3, r2
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	00da      	lsls	r2, r3, #3
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	4413      	add	r3, r2
 800260c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261c:	b29a      	uxth	r2, r3
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	2b3e      	cmp	r3, #62	; 0x3e
 8002628:	d91d      	bls.n	8002666 <HAL_PCD_EP_DB_Transmit+0x32e>
 800262a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
 8002632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_PCD_EP_DB_Transmit+0x30c>
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002640:	3b01      	subs	r3, #1
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29a      	uxth	r2, r3
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264c:	b29b      	uxth	r3, r3
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	b29b      	uxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265e:	b29a      	uxth	r2, r3
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	e044      	b.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <HAL_PCD_EP_DB_Transmit+0x34c>
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800267c:	b29a      	uxth	r2, r3
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e035      	b.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_PCD_EP_DB_Transmit+0x366>
 8002698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269a:	3301      	adds	r3, #1
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e01c      	b.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d118      	bne.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	4413      	add	r3, r2
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	00da      	lsls	r2, r3, #3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	4413      	add	r3, r2
 80026e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
 80026e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6959      	ldr	r1, [r3, #20]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	891a      	ldrh	r2, [r3, #8]
 80026fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002700:	b29b      	uxth	r3, r3
 8002702:	f004 fd8b 	bl	800721c <USB_WritePMA>
 8002706:	e1e0      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
=======
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d165      	bne.n	80030ce <HAL_PCD_EP_DB_Transmit+0x37e>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003010:	b29b      	uxth	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	4413      	add	r3, r2
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	00da      	lsls	r2, r3, #3
 8003020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003022:	4413      	add	r3, r2
 8003024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003028:	63bb      	str	r3, [r7, #56]	; 0x38
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003034:	b29a      	uxth	r2, r3
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303e:	2b3e      	cmp	r3, #62	; 0x3e
 8003040:	d91d      	bls.n	800307e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	64bb      	str	r3, [r7, #72]	; 0x48
 800304a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003058:	3b01      	subs	r3, #1
 800305a:	64bb      	str	r3, [r7, #72]	; 0x48
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29a      	uxth	r2, r3
 8003062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003064:	b29b      	uxth	r3, r3
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	b29b      	uxth	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	b29b      	uxth	r3, r3
 800306e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003076:	b29a      	uxth	r2, r3
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e044      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800307e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_PCD_EP_DB_Transmit+0x34c>
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003094:	b29a      	uxth	r2, r3
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	801a      	strh	r2, [r3, #0]
 800309a:	e035      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800309c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x366>
 80030b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b2:	3301      	adds	r3, #1
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030be:	b29b      	uxth	r3, r3
 80030c0:	029b      	lsls	r3, r3, #10
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4313      	orrs	r3, r2
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	e01c      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d118      	bne.n	8003108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	647b      	str	r3, [r7, #68]	; 0x44
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	4413      	add	r3, r2
 80030ec:	647b      	str	r3, [r7, #68]	; 0x44
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	00da      	lsls	r2, r3, #3
 80030f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
 80030fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003102:	b29a      	uxth	r2, r3
 8003104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003106:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6959      	ldr	r1, [r3, #20]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	891a      	ldrh	r2, [r3, #8]
 8003114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003118:	b29b      	uxth	r3, r3
 800311a:	f005 ffaf 	bl	800907c <USB_WritePMA>
 800311e:	e1e0      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x792>
>>>>>>> Stashed changes
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< Updated upstream
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	4413      	add	r3, r2
 8002722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002738:	429a      	cmp	r2, r3
 800273a:	d307      	bcc.n	800274c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002744:	1ad2      	subs	r2, r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	e002      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x41a>
=======
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	4413      	add	r3, r2
 800313a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003144:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003150:	429a      	cmp	r2, r3
 8003152:	d307      	bcc.n	8003164 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	619a      	str	r2, [r3, #24]
 8003162:	e002      	b.n	800316a <HAL_PCD_EP_DB_Transmit+0x41a>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
=======
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< Updated upstream
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 80c0 	bne.w	80028dc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d126      	bne.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002778:	4413      	add	r3, r2
 800277a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	00da      	lsls	r2, r3, #3
 8002782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002784:	4413      	add	r3, r2
 8002786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800278a:	67bb      	str	r3, [r7, #120]	; 0x78
 800278c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	b29a      	uxth	r2, r3
 8002798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	e01a      	b.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d116      	bne.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	667b      	str	r3, [r7, #100]	; 0x64
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ce:	4413      	add	r3, r2
 80027d0:	667b      	str	r3, [r7, #100]	; 0x64
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	00da      	lsls	r2, r3, #3
 80027d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027da:	4413      	add	r3, r2
 80027dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027e0:	663b      	str	r3, [r7, #96]	; 0x60
 80027e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e4:	2200      	movs	r2, #0
 80027e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	677b      	str	r3, [r7, #116]	; 0x74
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12b      	bne.n	800284e <HAL_PCD_EP_DB_Transmit+0x516>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280a:	4413      	add	r3, r2
 800280c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00da      	lsls	r2, r3, #3
 8002814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002816:	4413      	add	r3, r2
 8002818:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800281c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282c:	b29a      	uxth	r2, r3
 800282e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002844:	b29a      	uxth	r2, r3
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e017      	b.n	800287e <HAL_PCD_EP_DB_Transmit+0x546>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d113      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x546>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002864:	4413      	add	r3, r2
 8002866:	677b      	str	r3, [r7, #116]	; 0x74
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	00da      	lsls	r2, r3, #3
 800286e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002870:	4413      	add	r3, r2
 8002872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002876:	673b      	str	r3, [r7, #112]	; 0x70
 8002878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]
=======
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 80c0 	bne.w	80032f4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d126      	bne.n	80031ca <HAL_PCD_EP_DB_Transmit+0x47a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003190:	4413      	add	r3, r2
 8003192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	00da      	lsls	r2, r3, #3
 800319a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800319c:	4413      	add	r3, r2
 800319e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80031a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	e01a      	b.n	8003200 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d116      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	667b      	str	r3, [r7, #100]	; 0x64
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e6:	4413      	add	r3, r2
 80031e8:	667b      	str	r3, [r7, #100]	; 0x64
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	00da      	lsls	r2, r3, #3
 80031f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
 80031fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fc:	2200      	movs	r2, #0
 80031fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	677b      	str	r3, [r7, #116]	; 0x74
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d12b      	bne.n	8003266 <HAL_PCD_EP_DB_Transmit+0x516>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321c:	b29b      	uxth	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	4413      	add	r3, r2
 8003224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	00da      	lsls	r2, r3, #3
 800322c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322e:	4413      	add	r3, r2
 8003230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003244:	b29a      	uxth	r2, r3
 8003246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800325c:	b29a      	uxth	r2, r3
 800325e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003262:	801a      	strh	r2, [r3, #0]
 8003264:	e017      	b.n	8003296 <HAL_PCD_EP_DB_Transmit+0x546>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	785b      	ldrb	r3, [r3, #1]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d113      	bne.n	8003296 <HAL_PCD_EP_DB_Transmit+0x546>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327c:	4413      	add	r3, r2
 800327e:	677b      	str	r3, [r7, #116]	; 0x74
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00da      	lsls	r2, r3, #3
 8003286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003288:	4413      	add	r3, r2
 800328a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800328e:	673b      	str	r3, [r7, #112]	; 0x70
 8003290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003292:	2200      	movs	r2, #0
 8003294:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f006 ff7a 	bl	800977e <HAL_PCD_DataInStageCallback>
=======
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f008 f99e 	bl	800b5de <HAL_PCD_DataInStageCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< Updated upstream
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 811a 	bne.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80028c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
 80028da:	e0f6      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
=======
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 811a 	bne.w	80034e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	8013      	strh	r3, [r2, #0]
 80032f2:	e0f6      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x792>
>>>>>>> Stashed changes
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< Updated upstream
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d121      	bne.n	800292a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	b29b      	uxth	r3, r3
 8002928:	8013      	strh	r3, [r2, #0]
=======
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d121      	bne.n	8003342 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003318:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800332e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800333a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< Updated upstream
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	f040 80ca 	bne.w	8002aca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800293e:	441a      	add	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800294c:	441a      	add	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d30b      	bcc.n	8002976 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	621a      	str	r2, [r3, #32]
 8002974:	e017      	b.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d108      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800297e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800298e:	e00a      	b.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x66e>
=======
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 80ca 	bne.w	80034e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003356:	441a      	add	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003364:	441a      	add	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	429a      	cmp	r2, r3
 8003374:	d30b      	bcc.n	800338e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003386:	1ad2      	subs	r2, r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	621a      	str	r2, [r3, #32]
 800338c:	e017      	b.n	80033be <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003396:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800339a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033a6:	e00a      	b.n	80033be <HAL_PCD_EP_DB_Transmit+0x66e>
>>>>>>> Stashed changes
        }
        else
        {
          len = ep->xfer_len_db;
<<<<<<< Updated upstream
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2200      	movs	r2, #0
 80033b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d165      	bne.n	8002a80 <HAL_PCD_EP_DB_Transmit+0x748>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c8:	4413      	add	r3, r2
 80029ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00da      	lsls	r2, r3, #3
 80029d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d4:	4413      	add	r3, r2
 80029d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029da:	65bb      	str	r3, [r7, #88]	; 0x58
 80029dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f0:	2b3e      	cmp	r3, #62	; 0x3e
 80029f2:	d91d      	bls.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80029f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	e041      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x716>
 8002a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4a:	801a      	strh	r2, [r3, #0]
 8002a4c:	e032      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x730>
 8002a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a64:	3301      	adds	r3, #1
 8002a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	029b      	lsls	r3, r3, #10
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	e019      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d115      	bne.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	4413      	add	r3, r2
 8002a98:	657b      	str	r3, [r7, #84]	; 0x54
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	00da      	lsls	r2, r3, #3
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8002aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6959      	ldr	r1, [r3, #20]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	895a      	ldrh	r2, [r3, #10]
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f004 fba9 	bl	800721c <USB_WritePMA>
=======
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	657b      	str	r3, [r7, #84]	; 0x54
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d165      	bne.n	8003498 <HAL_PCD_EP_DB_Transmit+0x748>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e0:	4413      	add	r3, r2
 80033e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	00da      	lsls	r2, r3, #3
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	4413      	add	r3, r2
 80033ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80033f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fe:	b29a      	uxth	r2, r3
 8003400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003408:	2b3e      	cmp	r3, #62	; 0x3e
 800340a:	d91d      	bls.n	8003448 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800340c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	66bb      	str	r3, [r7, #104]	; 0x68
 8003414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003422:	3b01      	subs	r3, #1
 8003424:	66bb      	str	r3, [r7, #104]	; 0x68
 8003426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29a      	uxth	r2, r3
 800342c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342e:	b29b      	uxth	r3, r3
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	b29b      	uxth	r3, r3
 8003434:	4313      	orrs	r3, r2
 8003436:	b29b      	uxth	r3, r3
 8003438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800343c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003440:	b29a      	uxth	r2, r3
 8003442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003444:	801a      	strh	r2, [r3, #0]
 8003446:	e041      	b.n	80034cc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_PCD_EP_DB_Transmit+0x716>
 8003450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800345a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800345e:	b29a      	uxth	r2, r3
 8003460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003462:	801a      	strh	r2, [r3, #0]
 8003464:	e032      	b.n	80034cc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	66bb      	str	r3, [r7, #104]	; 0x68
 800346e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_PCD_EP_DB_Transmit+0x730>
 800347a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800347c:	3301      	adds	r3, #1
 800347e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29a      	uxth	r2, r3
 8003486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003488:	b29b      	uxth	r3, r3
 800348a:	029b      	lsls	r3, r3, #10
 800348c:	b29b      	uxth	r3, r3
 800348e:	4313      	orrs	r3, r2
 8003490:	b29a      	uxth	r2, r3
 8003492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003494:	801a      	strh	r2, [r3, #0]
 8003496:	e019      	b.n	80034cc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d115      	bne.n	80034cc <HAL_PCD_EP_DB_Transmit+0x77c>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ae:	4413      	add	r3, r2
 80034b0:	657b      	str	r3, [r7, #84]	; 0x54
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	00da      	lsls	r2, r3, #3
 80034b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ba:	4413      	add	r3, r2
 80034bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034c0:	653b      	str	r3, [r7, #80]	; 0x50
 80034c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6959      	ldr	r1, [r3, #20]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	895a      	ldrh	r2, [r3, #10]
 80034d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f005 fdcd 	bl	800907c <USB_WritePMA>
>>>>>>> Stashed changes
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
<<<<<<< Updated upstream
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae4:	82bb      	strh	r3, [r7, #20]
 8002ae6:	8abb      	ldrh	r3, [r7, #20]
 8002ae8:	f083 0310 	eor.w	r3, r3, #16
 8002aec:	82bb      	strh	r3, [r7, #20]
 8002aee:	8abb      	ldrh	r3, [r7, #20]
 8002af0:	f083 0320 	eor.w	r3, r3, #32
 8002af4:	82bb      	strh	r3, [r7, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	441a      	add	r2, r3
 8002b04:	8abb      	ldrh	r3, [r7, #20]
 8002b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3790      	adds	r7, #144	; 0x90
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCDEx_PMAConfig>:
=======
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fc:	82bb      	strh	r3, [r7, #20]
 80034fe:	8abb      	ldrh	r3, [r7, #20]
 8003500:	f083 0310 	eor.w	r3, r3, #16
 8003504:	82bb      	strh	r3, [r7, #20]
 8003506:	8abb      	ldrh	r3, [r7, #20]
 8003508:	f083 0320 	eor.w	r3, r3, #32
 800350c:	82bb      	strh	r3, [r7, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	441a      	add	r2, r3
 800351c:	8abb      	ldrh	r3, [r7, #20]
 800351e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352e:	b29b      	uxth	r3, r3
 8003530:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3790      	adds	r7, #144	; 0x90
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_PCDEx_PMAConfig>:
>>>>>>> Stashed changes
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
<<<<<<< Updated upstream
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	817b      	strh	r3, [r7, #10]
 8002b32:	4613      	mov	r3, r2
 8002b34:	813b      	strh	r3, [r7, #8]
=======
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	4613      	mov	r3, r2
 800354c:	813b      	strh	r3, [r7, #8]
>>>>>>> Stashed changes
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< Updated upstream
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e009      	b.n	8002b6e <HAL_PCDEx_PMAConfig+0x4a>
=======
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e009      	b.n	8003586 <HAL_PCDEx_PMAConfig+0x4a>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< Updated upstream
 8002b5a:	897a      	ldrh	r2, [r7, #10]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
=======
 8003572:	897a      	ldrh	r2, [r7, #10]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
<<<<<<< Updated upstream
 8002b6e:	893b      	ldrh	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	80da      	strh	r2, [r3, #6]
 8002b82:	e00b      	b.n	8002b9c <HAL_PCDEx_PMAConfig+0x78>
=======
 8003586:	893b      	ldrh	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	b29a      	uxth	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	80da      	strh	r2, [r3, #6]
 800359a:	e00b      	b.n	80035b4 <HAL_PCDEx_PMAConfig+0x78>
>>>>>>> Stashed changes
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
<<<<<<< Updated upstream
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2201      	movs	r2, #1
 8002b88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	815a      	strh	r2, [r3, #10]
=======
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2201      	movs	r2, #1
 80035a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	815a      	strh	r2, [r3, #10]
>>>>>>> Stashed changes
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< Updated upstream
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_PCDEx_ActivateLPM>:
=======
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_PCDEx_ActivateLPM>:
>>>>>>> Stashed changes
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_PWR_EnableBkUpAccess>:
=======
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> Stashed changes
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< Updated upstream
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	58000400 	.word	0x58000400

08002c20 <HAL_PWREx_GetVoltageRange>:
=======
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003626:	6013      	str	r3, [r2, #0]
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	58000400 	.word	0x58000400

08003638 <HAL_PWREx_GetVoltageRange>:
>>>>>>> Stashed changes
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< Updated upstream
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	58000400 	.word	0x58000400

08002c3c <HAL_PWREx_EnableVddUSB>:
=======
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <HAL_PWREx_GetVoltageRange+0x18>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	58000400 	.word	0x58000400

08003654 <HAL_PWREx_EnableVddUSB>:
>>>>>>> Stashed changes
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
<<<<<<< Updated upstream
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4a:	6053      	str	r3, [r2, #4]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	58000400 	.word	0x58000400

08002c5c <LL_RCC_HSE_IsEnabledDiv2>:
=======
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_PWREx_EnableVddUSB+0x1c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_PWREx_EnableVddUSB+0x1c>)
 800365e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003662:	6053      	str	r3, [r2, #4]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	58000400 	.word	0x58000400

08003674 <LL_RCC_HSE_IsEnabledDiv2>:
>>>>>>> Stashed changes
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
<<<<<<< Updated upstream
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6e:	d101      	bne.n	8002c74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_HSE_Enable>:
=======
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003686:	d101      	bne.n	800368c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_HSE_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
<<<<<<< Updated upstream
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_HSE_Disable>:
=======
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_RCC_HSE_Disable>:
>>>>>>> Stashed changes
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
<<<<<<< Updated upstream
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_RCC_HSE_IsReady>:
=======
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_RCC_HSE_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
<<<<<<< Updated upstream
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cce:	d101      	bne.n	8002cd4 <LL_RCC_HSE_IsReady+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_RCC_HSE_IsReady+0x1a>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_HSI_Enable>:
=======
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036e6:	d101      	bne.n	80036ec <LL_RCC_HSE_IsReady+0x18>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <LL_RCC_HSE_IsReady+0x1a>
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_RCC_HSI_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
<<<<<<< Updated upstream
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_HSI_Disable>:
=======
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_RCC_HSI_Disable>:
>>>>>>> Stashed changes
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
<<<<<<< Updated upstream
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_HSI_IsReady>:
=======
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_RCC_HSI_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
<<<<<<< Updated upstream
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d101      	bne.n	8002d34 <LL_RCC_HSI_IsReady+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_RCC_HSI_IsReady+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_RCC_HSI_SetCalibTrimming>:
=======
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003746:	d101      	bne.n	800374c <LL_RCC_HSI_IsReady+0x18>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <LL_RCC_HSI_IsReady+0x1a>
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_RCC_HSI_SetCalibTrimming>:
>>>>>>> Stashed changes
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
<<<<<<< Updated upstream
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_HSI48_Enable>:
=======
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_RCC_HSI48_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
<<<<<<< Updated upstream
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_RCC_HSI48_Disable>:
=======
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_HSI48_Disable>:
>>>>>>> Stashed changes
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
<<<<<<< Updated upstream
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_HSI48_IsReady>:
=======
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_HSI48_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
<<<<<<< Updated upstream
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d101      	bne.n	8002dc6 <LL_RCC_HSI48_IsReady+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_RCC_HSI48_IsReady+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_LSE_Enable>:
=======
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d101      	bne.n	80037de <LL_RCC_HSI48_IsReady+0x18>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <LL_RCC_HSI48_IsReady+0x1a>
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_RCC_LSE_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
<<<<<<< Updated upstream
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_LSE_Disable>:
=======
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_RCC_LSE_Disable>:
>>>>>>> Stashed changes
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
<<<<<<< Updated upstream
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_LSE_EnableBypass>:
=======
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_RCC_LSE_EnableBypass>:
>>>>>>> Stashed changes
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
<<<<<<< Updated upstream
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_RCC_LSE_DisableBypass>:
=======
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <LL_RCC_LSE_DisableBypass>:
>>>>>>> Stashed changes
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
<<<<<<< Updated upstream
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_RCC_LSE_IsReady>:
=======
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_RCC_LSE_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
<<<<<<< Updated upstream
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d101      	bne.n	8002e72 <LL_RCC_LSE_IsReady+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_RCC_LSE_IsReady+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_LSI1_Enable>:
=======
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	d101      	bne.n	800388a <LL_RCC_LSE_IsReady+0x18>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_RCC_LSE_IsReady+0x1a>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <LL_RCC_LSI1_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
<<<<<<< Updated upstream
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_LSI1_Disable>:
=======
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_LSI1_Disable>:
>>>>>>> Stashed changes
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
<<<<<<< Updated upstream
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_LSI1_IsReady>:
=======
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_RCC_LSI1_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
<<<<<<< Updated upstream
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d101      	bne.n	8002eda <LL_RCC_LSI1_IsReady+0x18>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_RCC_LSI1_IsReady+0x1a>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_RCC_LSI2_Enable>:
=======
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d101      	bne.n	80038f2 <LL_RCC_LSI1_IsReady+0x18>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <LL_RCC_LSI1_IsReady+0x1a>
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_LSI2_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
<<<<<<< Updated upstream
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_LSI2_Disable>:
=======
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_RCC_LSI2_Disable>:
>>>>>>> Stashed changes
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
<<<<<<< Updated upstream
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_LSI2_IsReady>:
=======
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_RCC_LSI2_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
<<<<<<< Updated upstream
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d101      	bne.n	8002f42 <LL_RCC_LSI2_IsReady+0x18>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_RCC_LSI2_IsReady+0x1a>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_RCC_LSI2_SetTrimming>:
=======
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d101      	bne.n	800395a <LL_RCC_LSI2_IsReady+0x18>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <LL_RCC_LSI2_IsReady+0x1a>
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_RCC_LSI2_SetTrimming>:
>>>>>>> Stashed changes
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
<<<<<<< Updated upstream
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_MSI_Enable>:
=======
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_RCC_MSI_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
<<<<<<< Updated upstream
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_MSI_Disable>:
=======
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_RCC_MSI_Disable>:
>>>>>>> Stashed changes
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
<<<<<<< Updated upstream
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6013      	str	r3, [r2, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_MSI_IsReady>:
=======
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6013      	str	r3, [r2, #0]
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_RCC_MSI_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
<<<<<<< Updated upstream
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d101      	bne.n	8002fce <LL_RCC_MSI_IsReady+0x16>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_RCC_MSI_IsReady+0x18>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_MSI_SetRange>:
=======
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d101      	bne.n	80039e6 <LL_RCC_MSI_IsReady+0x16>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <LL_RCC_MSI_IsReady+0x18>
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <LL_RCC_MSI_SetRange>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
<<<<<<< Updated upstream
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_RCC_MSI_GetRange>:
=======
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_RCC_MSI_GetRange>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
<<<<<<< Updated upstream
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003012:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2bb0      	cmp	r3, #176	; 0xb0
 8003018:	d901      	bls.n	800301e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800301a:	23b0      	movs	r3, #176	; 0xb0
 800301c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800301e:	687b      	ldr	r3, [r7, #4]
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_RCC_MSI_SetCalibTrimming>:
=======
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2bb0      	cmp	r3, #176	; 0xb0
 8003a30:	d901      	bls.n	8003a36 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003a32:	23b0      	movs	r3, #176	; 0xb0
 8003a34:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003a36:	687b      	ldr	r3, [r7, #4]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_RCC_MSI_SetCalibTrimming>:
>>>>>>> Stashed changes
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
<<<<<<< Updated upstream
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_RCC_SetSysClkSource>:
=======
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_RCC_SetSysClkSource>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
<<<<<<< Updated upstream
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 0203 	bic.w	r2, r3, #3
 8003068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_RCC_GetSysClkSource>:
=======
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 0203 	bic.w	r2, r3, #3
 8003a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_RCC_GetSysClkSource>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
<<<<<<< Updated upstream
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_SetAHBPrescaler>:
=======
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_RCC_SetAHBPrescaler>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
<<<<<<< Updated upstream
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_C2_RCC_SetAHBPrescaler>:
=======
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <LL_C2_RCC_SetAHBPrescaler>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
<<<<<<< Updated upstream
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_SetAHB4Prescaler>:
=======
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_RCC_SetAHB4Prescaler>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
<<<<<<< Updated upstream
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_RCC_SetAPB1Prescaler>:
=======
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_RCC_SetAPB1Prescaler>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
<<<<<<< Updated upstream
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800312a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_RCC_SetAPB2Prescaler>:
=======
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_RCC_SetAPB2Prescaler>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
<<<<<<< Updated upstream
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_RCC_GetAHBPrescaler>:
=======
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_RCC_GetAHBPrescaler>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
<<<<<<< Updated upstream
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_RCC_GetAHB4Prescaler>:
=======
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_RCC_GetAHB4Prescaler>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
<<<<<<< Updated upstream
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_RCC_PLL_Enable>:
=======
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_RCC_PLL_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
<<<<<<< Updated upstream
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_RCC_PLL_Disable>:
=======
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RCC_PLL_Disable>:
>>>>>>> Stashed changes
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
<<<<<<< Updated upstream
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_RCC_PLL_IsReady>:
=======
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be4:	6013      	str	r3, [r2, #0]
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_RCC_PLL_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
<<<<<<< Updated upstream
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ea:	d101      	bne.n	80031f0 <LL_RCC_PLL_IsReady+0x18>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <LL_RCC_PLL_IsReady+0x1a>
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_RCC_PLL_GetN>:
=======
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c02:	d101      	bne.n	8003c08 <LL_RCC_PLL_IsReady+0x18>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <LL_RCC_PLL_IsReady+0x1a>
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_RCC_PLL_GetN>:
>>>>>>> Stashed changes
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
<<<<<<< Updated upstream
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_RCC_PLL_GetR>:
=======
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_RCC_PLL_GetR>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
<<<<<<< Updated upstream
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_PLL_GetDivider>:
=======
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_PLL_GetDivider>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
<<<<<<< Updated upstream
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_RCC_PLL_GetMainSource>:
=======
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_PLL_GetMainSource>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
<<<<<<< Updated upstream
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0303 	and.w	r3, r3, #3
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_RCC_IsActiveFlag_HPRE>:
=======
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0303 	and.w	r3, r3, #3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_RCC_IsActiveFlag_HPRE>:
>>>>>>> Stashed changes
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
<<<<<<< Updated upstream
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d101      	bne.n	8003276 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_RCC_IsActiveFlag_C2HPRE>:
=======
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d101      	bne.n	8003c8e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_RCC_IsActiveFlag_C2HPRE>:
>>>>>>> Stashed changes
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
<<<<<<< Updated upstream
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003296:	d101      	bne.n	800329c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
=======
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cae:	d101      	bne.n	8003cb4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_RCC_IsActiveFlag_SHDHPRE>:
>>>>>>> Stashed changes
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
<<<<<<< Updated upstream
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d101      	bne.n	80032c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <LL_RCC_IsActiveFlag_PPRE1>:
=======
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d101      	bne.n	8003cda <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_RCC_IsActiveFlag_PPRE1>:
>>>>>>> Stashed changes
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
<<<<<<< Updated upstream
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e0:	d101      	bne.n	80032e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_IsActiveFlag_PPRE2>:
=======
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cf8:	d101      	bne.n	8003cfe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_IsActiveFlag_PPRE2>:
>>>>>>> Stashed changes
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
<<<<<<< Updated upstream
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003304:	d101      	bne.n	800330a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_RCC_OscConfig>:
=======
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d1c:	d101      	bne.n	8003d22 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b08d      	sub	sp, #52	; 0x34
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
=======
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b08d      	sub	sp, #52	; 0x34
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e363      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e363      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
<<<<<<< Updated upstream
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 808d 	beq.w	8003452 <HAL_RCC_OscConfig+0x13a>
=======
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 808d 	beq.w	8003e6a <HAL_RCC_OscConfig+0x13a>
>>>>>>> Stashed changes
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8003338:	f7ff fea1 	bl	800307e <LL_RCC_GetSysClkSource>
 800333c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333e:	f7ff ff82 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003342:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x3e>
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d147      	bne.n	80033e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	2b01      	cmp	r3, #1
 8003354:	d144      	bne.n	80033e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e347      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8003d50:	f7ff fea1 	bl	8003a96 <LL_RCC_GetSysClkSource>
 8003d54:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d56:	f7ff ff82 	bl	8003c5e <LL_RCC_PLL_GetMainSource>
 8003d5a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_RCC_OscConfig+0x3e>
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d147      	bne.n	8003df8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d144      	bne.n	8003df8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e347      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< Updated upstream
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003366:	f7ff fe4c 	bl	8003002 <LL_RCC_MSI_GetRange>
 800336a:	4603      	mov	r3, r0
 800336c:	429c      	cmp	r4, r3
 800336e:	d914      	bls.n	800339a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fd05 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e336      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d7e:	f7ff fe4c 	bl	8003a1a <LL_RCC_MSI_GetRange>
 8003d82:	4603      	mov	r3, r0
 8003d84:	429c      	cmp	r4, r3
 8003d86:	d914      	bls.n	8003db2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fd05 	bl	800479c <RCC_SetFlashLatencyFromMSIRange>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e336      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe26 	bl	8002fda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fe4a 	bl	800302c <LL_RCC_MSI_SetCalibTrimming>
 8003398:	e013      	b.n	80033c2 <HAL_RCC_OscConfig+0xaa>
=======
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fe26 	bl	80039f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fe4a 	bl	8003a44 <LL_RCC_MSI_SetCalibTrimming>
 8003db0:	e013      	b.n	8003dda <HAL_RCC_OscConfig+0xaa>
>>>>>>> Stashed changes
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe1b 	bl	8002fda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fe3f 	bl	800302c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fce6 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e317      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fe1b 	bl	80039f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fe3f 	bl	8003a44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fce6 	bl	800479c <RCC_SetFlashLatencyFromMSIRange>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e317      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< Updated upstream
 80033c2:	f000 fccb 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4aa4      	ldr	r2, [pc, #656]	; (800365c <HAL_RCC_OscConfig+0x344>)
 80033ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033cc:	4ba4      	ldr	r3, [pc, #656]	; (8003660 <HAL_RCC_OscConfig+0x348>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fb97 	bl	8000b04 <HAL_InitTick>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d039      	beq.n	8003450 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e308      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8003dda:	f000 fccb 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4aa4      	ldr	r2, [pc, #656]	; (8004074 <HAL_RCC_OscConfig+0x344>)
 8003de2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003de4:	4ba4      	ldr	r3, [pc, #656]	; (8004078 <HAL_RCC_OscConfig+0x348>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd f8c3 	bl	8000f74 <HAL_InitTick>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d039      	beq.n	8003e68 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e308      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< Updated upstream
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01e      	beq.n	8003426 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033e8:	f7ff fdc8 	bl	8002f7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fbd8 	bl	8000ba0 <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f4:	f7fd fbd4 	bl	8000ba0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e2f5      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003406:	f7ff fdd7 	bl	8002fb8 <LL_RCC_MSI_IsReady>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f1      	beq.n	80033f4 <HAL_RCC_OscConfig+0xdc>
=======
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01e      	beq.n	8003e3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e00:	f7ff fdc8 	bl	8003994 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e04:	f7fd f904 	bl	8001010 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e0c:	f7fd f900 	bl	8001010 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e2f5      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e1e:	f7ff fdd7 	bl	80039d0 <LL_RCC_MSI_IsReady>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f1      	beq.n	8003e0c <HAL_RCC_OscConfig+0xdc>
>>>>>>> Stashed changes
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fde0 	bl	8002fda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fe04 	bl	800302c <LL_RCC_MSI_SetCalibTrimming>
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x13a>
=======
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fde0 	bl	80039f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fe04 	bl	8003a44 <LL_RCC_MSI_SetCalibTrimming>
 8003e3c:	e015      	b.n	8003e6a <HAL_RCC_OscConfig+0x13a>
>>>>>>> Stashed changes

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< Updated upstream
 8003426:	f7ff fdb8 	bl	8002f9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800342a:	f7fd fbb9 	bl	8000ba0 <HAL_GetTick>
 800342e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003432:	f7fd fbb5 	bl	8000ba0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e2d6      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003444:	f7ff fdb8 	bl	8002fb8 <LL_RCC_MSI_IsReady>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f1      	bne.n	8003432 <HAL_RCC_OscConfig+0x11a>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003450:	bf00      	nop
=======
 8003e3e:	f7ff fdb8 	bl	80039b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e42:	f7fd f8e5 	bl	8001010 <HAL_GetTick>
 8003e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e4a:	f7fd f8e1 	bl	8001010 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e2d6      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e5c:	f7ff fdb8 	bl	80039d0 <LL_RCC_MSI_IsReady>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f1      	bne.n	8003e4a <HAL_RCC_OscConfig+0x11a>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e68:	bf00      	nop
>>>>>>> Stashed changes
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d047      	beq.n	80034ee <HAL_RCC_OscConfig+0x1d6>
=======
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d047      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1d6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 800345e:	f7ff fe0e 	bl	800307e <LL_RCC_GetSysClkSource>
 8003462:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003464:	f7ff feef 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003468:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x164>
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d108      	bne.n	8003488 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d105      	bne.n	8003488 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d134      	bne.n	80034ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e2b4      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8003e76:	f7ff fe0e 	bl	8003a96 <LL_RCC_GetSysClkSource>
 8003e7a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e7c:	f7ff feef 	bl	8003c5e <LL_RCC_PLL_GetMainSource>
 8003e80:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_OscConfig+0x164>
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d108      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d134      	bne.n	8003f06 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e2b4      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d102      	bne.n	8003498 <HAL_RCC_OscConfig+0x180>
 8003492:	f7ff fbf5 	bl	8002c80 <LL_RCC_HSE_Enable>
 8003496:	e001      	b.n	800349c <HAL_RCC_OscConfig+0x184>
 8003498:	f7ff fc01 	bl	8002c9e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fb7c 	bl	8000ba0 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fd fb78 	bl	8000ba0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e299      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034be:	f7ff fbfd 	bl	8002cbc <LL_RCC_HSE_IsReady>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f1      	beq.n	80034ac <HAL_RCC_OscConfig+0x194>
 80034c8:	e011      	b.n	80034ee <HAL_RCC_OscConfig+0x1d6>
=======
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d102      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x180>
 8003eaa:	f7ff fbf5 	bl	8003698 <LL_RCC_HSE_Enable>
 8003eae:	e001      	b.n	8003eb4 <HAL_RCC_OscConfig+0x184>
 8003eb0:	f7ff fc01 	bl	80036b6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d012      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd f8a8 	bl	8001010 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fd f8a4 	bl	8001010 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e299      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ed6:	f7ff fbfd 	bl	80036d4 <LL_RCC_HSE_IsReady>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f1      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x194>
 8003ee0:	e011      	b.n	8003f06 <HAL_RCC_OscConfig+0x1d6>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80034ca:	f7fd fb69 	bl	8000ba0 <HAL_GetTick>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d2:	f7fd fb65 	bl	8000ba0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e286      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034e4:	f7ff fbea 	bl	8002cbc <LL_RCC_HSE_IsReady>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f1      	bne.n	80034d2 <HAL_RCC_OscConfig+0x1ba>
=======
 8003ee2:	f7fd f895 	bl	8001010 <HAL_GetTick>
 8003ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eea:	f7fd f891 	bl	8001010 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b64      	cmp	r3, #100	; 0x64
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e286      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003efc:	f7ff fbea 	bl	80036d4 <LL_RCC_HSE_IsReady>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f1      	bne.n	8003eea <HAL_RCC_OscConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d04c      	beq.n	8003594 <HAL_RCC_OscConfig+0x27c>
=======
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04c      	beq.n	8003fac <HAL_RCC_OscConfig+0x27c>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80034fa:	f7ff fdc0 	bl	800307e <LL_RCC_GetSysClkSource>
 80034fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003500:	f7ff fea1 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003504:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d005      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d10e      	bne.n	8003530 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d10b      	bne.n	8003530 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e266      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8003f12:	f7ff fdc0 	bl	8003a96 <LL_RCC_GetSysClkSource>
 8003f16:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f18:	f7ff fea1 	bl	8003c5e <LL_RCC_PLL_GetMainSource>
 8003f1c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_OscConfig+0x200>
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d10e      	bne.n	8003f48 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e266      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fc09 	bl	8002d40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800352e:	e031      	b.n	8003594 <HAL_RCC_OscConfig+0x27c>
=======
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fc09 	bl	8003758 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f46:	e031      	b.n	8003fac <HAL_RCC_OscConfig+0x27c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d019      	beq.n	800356c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003538:	f7ff fbd2 	bl	8002ce0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fb30 	bl	8000ba0 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003544:	f7fd fb2c 	bl	8000ba0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e24d      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003556:	f7ff fbe1 	bl	8002d1c <LL_RCC_HSI_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f1      	beq.n	8003544 <HAL_RCC_OscConfig+0x22c>
=======
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	f7ff fbd2 	bl	80036f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd f85c 	bl	8001010 <HAL_GetTick>
 8003f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fd f858 	bl	8001010 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e24d      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f6e:	f7ff fbe1 	bl	8003734 <LL_RCC_HSI_IsReady>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f1      	beq.n	8003f5c <HAL_RCC_OscConfig+0x22c>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fbeb 	bl	8002d40 <LL_RCC_HSI_SetCalibTrimming>
 800356a:	e013      	b.n	8003594 <HAL_RCC_OscConfig+0x27c>
=======
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fbeb 	bl	8003758 <LL_RCC_HSI_SetCalibTrimming>
 8003f82:	e013      	b.n	8003fac <HAL_RCC_OscConfig+0x27c>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800356c:	f7ff fbc7 	bl	8002cfe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fb16 	bl	8000ba0 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003578:	f7fd fb12 	bl	8000ba0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e233      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800358a:	f7ff fbc7 	bl	8002d1c <LL_RCC_HSI_IsReady>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f1      	bne.n	8003578 <HAL_RCC_OscConfig+0x260>
=======
 8003f84:	f7ff fbc7 	bl	8003716 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd f842 	bl	8001010 <HAL_GetTick>
 8003f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fd f83e 	bl	8001010 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e233      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fa2:	f7ff fbc7 	bl	8003734 <LL_RCC_HSI_IsReady>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f1      	bne.n	8003f90 <HAL_RCC_OscConfig+0x260>
>>>>>>> Stashed changes
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
<<<<<<< Updated upstream
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a3 	beq.w	80036f4 <HAL_RCC_OscConfig+0x3dc>
=======
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a3 	beq.w	800410c <HAL_RCC_OscConfig+0x3dc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d076      	beq.n	80036a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d046      	beq.n	8003650 <HAL_RCC_OscConfig+0x338>
=======
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d076      	beq.n	80040bc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d046      	beq.n	8004068 <HAL_RCC_OscConfig+0x338>
>>>>>>> Stashed changes
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
<<<<<<< Updated upstream
 80035c2:	f7ff fc7e 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035cc:	f7ff fc57 	bl	8002e7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035d0:	f7fd fae6 	bl	8000ba0 <HAL_GetTick>
 80035d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035d8:	f7fd fae2 	bl	8000ba0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e203      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035ea:	f7ff fc6a 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f1      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2c0>
=======
 8003fda:	f7ff fc7e 	bl	80038da <LL_RCC_LSI1_IsReady>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d113      	bne.n	800400c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003fe4:	f7ff fc57 	bl	8003896 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fe8:	f7fd f812 	bl	8001010 <HAL_GetTick>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ff0:	f7fd f80e 	bl	8001010 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e203      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004002:	f7ff fc6a 	bl	80038da <LL_RCC_LSI1_IsReady>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f1      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x2c0>
>>>>>>> Stashed changes
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
<<<<<<< Updated upstream
 80035f4:	f7ff fc77 	bl	8002ee6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd fad2 	bl	8000ba0 <HAL_GetTick>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003600:	f7fd face 	bl	8000ba0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b03      	cmp	r3, #3
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1ef      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003612:	f7ff fc8a 	bl	8002f2a <LL_RCC_LSI2_IsReady>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f1      	beq.n	8003600 <HAL_RCC_OscConfig+0x2e8>
=======
 800400c:	f7ff fc77 	bl	80038fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fc fffe 	bl	8001010 <HAL_GetTick>
 8004014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004018:	f7fc fffa 	bl	8001010 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b03      	cmp	r3, #3
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1ef      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800402a:	f7ff fc8a 	bl	8003942 <LL_RCC_LSI2_IsReady>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f1      	beq.n	8004018 <HAL_RCC_OscConfig+0x2e8>
>>>>>>> Stashed changes
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
<<<<<<< Updated upstream
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fc94 	bl	8002f4e <LL_RCC_LSI2_SetTrimming>
=======
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fc94 	bl	8003966 <LL_RCC_LSI2_SetTrimming>
>>>>>>> Stashed changes

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
<<<<<<< Updated upstream
 8003626:	f7ff fc3b 	bl	8002ea0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fd fab9 	bl	8000ba0 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003632:	f7fd fab5 	bl	8000ba0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1d6      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003644:	f7ff fc3d 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f1      	bne.n	8003632 <HAL_RCC_OscConfig+0x31a>
 800364e:	e051      	b.n	80036f4 <HAL_RCC_OscConfig+0x3dc>
=======
 800403e:	f7ff fc3b 	bl	80038b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fc ffe5 	bl	8001010 <HAL_GetTick>
 8004046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800404a:	f7fc ffe1 	bl	8001010 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1d6      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800405c:	f7ff fc3d 	bl	80038da <LL_RCC_LSI1_IsReady>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f1      	bne.n	800404a <HAL_RCC_OscConfig+0x31a>
 8004066:	e051      	b.n	800410c <HAL_RCC_OscConfig+0x3dc>
>>>>>>> Stashed changes
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
<<<<<<< Updated upstream
 8003650:	f7ff fc15 	bl	8002e7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd faa4 	bl	8000ba0 <HAL_GetTick>
 8003658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800365a:	e00c      	b.n	8003676 <HAL_RCC_OscConfig+0x35e>
 800365c:	20000048 	.word	0x20000048
 8003660:	2000004c 	.word	0x2000004c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003664:	f7fd fa9c 	bl	8000ba0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1bd      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003676:	f7ff fc24 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f1      	beq.n	8003664 <HAL_RCC_OscConfig+0x34c>
=======
 8004068:	f7ff fc15 	bl	8003896 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fc ffd0 	bl	8001010 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004072:	e00c      	b.n	800408e <HAL_RCC_OscConfig+0x35e>
 8004074:	20000048 	.word	0x20000048
 8004078:	2000004c 	.word	0x2000004c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800407c:	f7fc ffc8 	bl	8001010 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1bd      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800408e:	f7ff fc24 	bl	80038da <LL_RCC_LSI1_IsReady>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f1      	beq.n	800407c <HAL_RCC_OscConfig+0x34c>
>>>>>>> Stashed changes
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
<<<<<<< Updated upstream
 8003680:	f7ff fc42 	bl	8002f08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003686:	f7fd fa8b 	bl	8000ba0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1ac      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003698:	f7ff fc47 	bl	8002f2a <LL_RCC_LSI2_IsReady>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f1      	bne.n	8003686 <HAL_RCC_OscConfig+0x36e>
 80036a2:	e027      	b.n	80036f4 <HAL_RCC_OscConfig+0x3dc>
=======
 8004098:	f7ff fc42 	bl	8003920 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800409e:	f7fc ffb7 	bl	8001010 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e1ac      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80040b0:	f7ff fc47 	bl	8003942 <LL_RCC_LSI2_IsReady>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f1      	bne.n	800409e <HAL_RCC_OscConfig+0x36e>
 80040ba:	e027      	b.n	800410c <HAL_RCC_OscConfig+0x3dc>
>>>>>>> Stashed changes
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
<<<<<<< Updated upstream
 80036a4:	f7ff fc30 	bl	8002f08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd fa7a 	bl	8000ba0 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036b0:	f7fd fa76 	bl	8000ba0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e197      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036c2:	f7ff fc32 	bl	8002f2a <LL_RCC_LSI2_IsReady>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f1      	bne.n	80036b0 <HAL_RCC_OscConfig+0x398>
=======
 80040bc:	f7ff fc30 	bl	8003920 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc ffa6 	bl	8001010 <HAL_GetTick>
 80040c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040c8:	f7fc ffa2 	bl	8001010 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e197      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040da:	f7ff fc32 	bl	8003942 <LL_RCC_LSI2_IsReady>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f1      	bne.n	80040c8 <HAL_RCC_OscConfig+0x398>
>>>>>>> Stashed changes
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
<<<<<<< Updated upstream
 80036cc:	f7ff fbe8 	bl	8002ea0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fa66 	bl	8000ba0 <HAL_GetTick>
 80036d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036d8:	f7fd fa62 	bl	8000ba0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e183      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036ea:	f7ff fbea 	bl	8002ec2 <LL_RCC_LSI1_IsReady>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f1      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
=======
 80040e4:	f7ff fbe8 	bl	80038b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fc ff92 	bl	8001010 <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040f0:	f7fc ff8e 	bl	8001010 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e183      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004102:	f7ff fbea 	bl	80038da <LL_RCC_LSI1_IsReady>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f1      	bne.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4a0>
=======
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d05b      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
<<<<<<< Updated upstream
 8003700:	4ba7      	ldr	r3, [pc, #668]	; (80039a0 <HAL_RCC_OscConfig+0x688>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d114      	bne.n	8003736 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800370c:	f7ff fa78 	bl	8002c00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003710:	f7fd fa46 	bl	8000ba0 <HAL_GetTick>
 8003714:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003718:	f7fd fa42 	bl	8000ba0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e163      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372a:	4b9d      	ldr	r3, [pc, #628]	; (80039a0 <HAL_RCC_OscConfig+0x688>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x400>
=======
 8004118:	4ba7      	ldr	r3, [pc, #668]	; (80043b8 <HAL_RCC_OscConfig+0x688>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d114      	bne.n	800414e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004124:	f7ff fa78 	bl	8003618 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004128:	f7fc ff72 	bl	8001010 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fc ff6e 	bl	8001010 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e163      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004142:	4b9d      	ldr	r3, [pc, #628]	; (80043b8 <HAL_RCC_OscConfig+0x688>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x400>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x42c>
 800373e:	f7ff fb48 	bl	8002dd2 <LL_RCC_LSE_Enable>
 8003742:	e00c      	b.n	800375e <HAL_RCC_OscConfig+0x446>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b05      	cmp	r3, #5
 800374a:	d104      	bne.n	8003756 <HAL_RCC_OscConfig+0x43e>
 800374c:	f7ff fb63 	bl	8002e16 <LL_RCC_LSE_EnableBypass>
 8003750:	f7ff fb3f 	bl	8002dd2 <LL_RCC_LSE_Enable>
 8003754:	e003      	b.n	800375e <HAL_RCC_OscConfig+0x446>
 8003756:	f7ff fb4d 	bl	8002df4 <LL_RCC_LSE_Disable>
 800375a:	f7ff fb6d 	bl	8002e38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d014      	beq.n	8003790 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fd fa1b 	bl	8000ba0 <HAL_GetTick>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fd fa17 	bl	8000ba0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e136      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003784:	f7ff fb69 	bl	8002e5a <LL_RCC_LSE_IsReady>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ef      	beq.n	800376e <HAL_RCC_OscConfig+0x456>
 800378e:	e013      	b.n	80037b8 <HAL_RCC_OscConfig+0x4a0>
=======
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_RCC_OscConfig+0x42c>
 8004156:	f7ff fb48 	bl	80037ea <LL_RCC_LSE_Enable>
 800415a:	e00c      	b.n	8004176 <HAL_RCC_OscConfig+0x446>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b05      	cmp	r3, #5
 8004162:	d104      	bne.n	800416e <HAL_RCC_OscConfig+0x43e>
 8004164:	f7ff fb63 	bl	800382e <LL_RCC_LSE_EnableBypass>
 8004168:	f7ff fb3f 	bl	80037ea <LL_RCC_LSE_Enable>
 800416c:	e003      	b.n	8004176 <HAL_RCC_OscConfig+0x446>
 800416e:	f7ff fb4d 	bl	800380c <LL_RCC_LSE_Disable>
 8004172:	f7ff fb6d 	bl	8003850 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d014      	beq.n	80041a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fc ff47 	bl	8001010 <HAL_GetTick>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004184:	e00a      	b.n	800419c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fc ff43 	bl	8001010 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e136      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800419c:	f7ff fb69 	bl	8003872 <LL_RCC_LSE_IsReady>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ef      	beq.n	8004186 <HAL_RCC_OscConfig+0x456>
 80041a6:	e013      	b.n	80041d0 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8003790:	f7fd fa06 	bl	8000ba0 <HAL_GetTick>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fd fa02 	bl	8000ba0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e121      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037ae:	f7ff fb54 	bl	8002e5a <LL_RCC_LSE_IsReady>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ef      	bne.n	8003798 <HAL_RCC_OscConfig+0x480>
=======
 80041a8:	f7fc ff32 	bl	8001010 <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fc ff2e 	bl	8001010 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e121      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80041c6:	f7ff fb54 	bl	8003872 <LL_RCC_LSE_IsReady>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ef      	bne.n	80041b0 <HAL_RCC_OscConfig+0x480>
>>>>>>> Stashed changes
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02c      	beq.n	800381e <HAL_RCC_OscConfig+0x506>
=======
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d02c      	beq.n	8004236 <HAL_RCC_OscConfig+0x506>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d014      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037cc:	f7ff facd 	bl	8002d6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd f9e6 	bl	8000ba0 <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d8:	f7fd f9e2 	bl	8000ba0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e103      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037ea:	f7ff fae0 	bl	8002dae <LL_RCC_HSI48_IsReady>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f1      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4c0>
 80037f4:	e013      	b.n	800381e <HAL_RCC_OscConfig+0x506>
=======
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d014      	beq.n	800420e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041e4:	f7ff facd 	bl	8003782 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fc ff12 	bl	8001010 <HAL_GetTick>
 80041ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041f0:	f7fc ff0e 	bl	8001010 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e103      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004202:	f7ff fae0 	bl	80037c6 <LL_RCC_HSI48_IsReady>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f1      	beq.n	80041f0 <HAL_RCC_OscConfig+0x4c0>
 800420c:	e013      	b.n	8004236 <HAL_RCC_OscConfig+0x506>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 80037f6:	f7ff fac9 	bl	8002d8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fd f9d1 	bl	8000ba0 <HAL_GetTick>
 80037fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003802:	f7fd f9cd 	bl	8000ba0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0ee      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003814:	f7ff facb 	bl	8002dae <LL_RCC_HSI48_IsReady>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f1      	bne.n	8003802 <HAL_RCC_OscConfig+0x4ea>
=======
 800420e:	f7ff fac9 	bl	80037a4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fc fefd 	bl	8001010 <HAL_GetTick>
 8004216:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800421a:	f7fc fef9 	bl	8001010 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0ee      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800422c:	f7ff facb 	bl	80037c6 <LL_RCC_HSI48_IsReady>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f1      	bne.n	800421a <HAL_RCC_OscConfig+0x4ea>
>>>>>>> Stashed changes
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80e4 	beq.w	80039f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003828:	f7ff fc29 	bl	800307e <LL_RCC_GetSysClkSource>
 800382c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	2b02      	cmp	r3, #2
 800383c:	f040 80b4 	bne.w	80039a8 <HAL_RCC_OscConfig+0x690>
=======
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80e4 	beq.w	8004408 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004240:	f7ff fc29 	bl	8003a96 <LL_RCC_GetSysClkSource>
 8004244:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	2b02      	cmp	r3, #2
 8004254:	f040 80b4 	bne.w	80043c0 <HAL_RCC_OscConfig+0x690>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< Updated upstream
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	429a      	cmp	r2, r3
 800384c:	d123      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d11c      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d114      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d10d      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d05d      	beq.n	8003952 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d058      	beq.n	800394e <HAL_RCC_OscConfig+0x636>
=======
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 0203 	and.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	429a      	cmp	r2, r3
 8004264:	d123      	bne.n	80042ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d11c      	bne.n	80042ae <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d114      	bne.n	80042ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d10d      	bne.n	80042ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d05d      	beq.n	800436a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d058      	beq.n	8004366 <HAL_RCC_OscConfig+0x636>
>>>>>>> Stashed changes
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< Updated upstream
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0a1      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0a1      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 80038ae:	f7ff fc84 	bl	80031ba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b2:	f7fd f975 	bl	8000ba0 <HAL_GetTick>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fd f971 	bl	8000ba0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e092      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ef      	bne.n	80038ba <HAL_RCC_OscConfig+0x5a2>
=======
 80042c6:	f7ff fc84 	bl	8003bd2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ca:	f7fc fea1 	bl	8001010 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fc fe9d 	bl	8001010 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e092      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ef      	bne.n	80042d2 <HAL_RCC_OscConfig+0x5a2>
>>>>>>> Stashed changes
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x68c>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f2:	0212      	lsls	r2, r2, #8
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038fa:	4311      	orrs	r1, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003906:	430a      	orrs	r2, r1
 8003908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
=======
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	4b30      	ldr	r3, [pc, #192]	; (80043bc <HAL_RCC_OscConfig+0x68c>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800430a:	0212      	lsls	r2, r2, #8
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004312:	4311      	orrs	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800431e:	430a      	orrs	r2, r1
 8004320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004324:	4313      	orrs	r3, r2
 8004326:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8003910:	f7ff fc44 	bl	800319c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003924:	f7fd f93c 	bl	8000ba0 <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd f938 	bl	8000ba0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e059      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394c:	e050      	b.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
=======
 8004328:	f7ff fc44 	bl	8003bb4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800433c:	f7fc fe68 	bl	8001010 <HAL_GetTick>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fc fe64 	bl	8001010 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e059      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ef      	beq.n	8004344 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004364:	e050      	b.n	8004408 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> Stashed changes
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< Updated upstream
 800394e:	2301      	movs	r3, #1
 8003950:	e04f      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8004366:	2301      	movs	r3, #1
 8004368:	e04f      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< Updated upstream
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d147      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003960:	f7ff fc1c 	bl	800319c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003974:	f7fd f914 	bl	8000ba0 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fd f910 	bl	8000ba0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e031      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCC_OscConfig+0x664>
 800399c:	e028      	b.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
 800399e:	bf00      	nop
 80039a0:	58000400 	.word	0x58000400
 80039a4:	11c1808c 	.word	0x11c1808c
=======
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d147      	bne.n	8004408 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004378:	f7ff fc1c 	bl	8003bb4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800438c:	f7fc fe40 	bl	8001010 <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fc fe3c 	bl	8001010 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e031      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ef      	beq.n	8004394 <HAL_RCC_OscConfig+0x664>
 80043b4:	e028      	b.n	8004408 <HAL_RCC_OscConfig+0x6d8>
 80043b6:	bf00      	nop
 80043b8:	58000400 	.word	0x58000400
 80043bc:	11c1808c 	.word	0x11c1808c
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
<<<<<<< Updated upstream
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d01e      	beq.n	80039ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	f7ff fc04 	bl	80031ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd f8f5 	bl	8000ba0 <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fd f8f1 	bl	8000ba0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e012      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ef      	bne.n	80039ba <HAL_RCC_OscConfig+0x6a2>
=======
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d01e      	beq.n	8004404 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	f7ff fc04 	bl	8003bd2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fc fe21 	bl	8001010 <HAL_GetTick>
 80043ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fc fe1d 	bl	8001010 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e012      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ef      	bne.n	80043d2 <HAL_RCC_OscConfig+0x6a2>
>>>>>>> Stashed changes
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
<<<<<<< Updated upstream
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_OscConfig+0x6e4>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]
 80039ea:	e001      	b.n	80039f0 <HAL_RCC_OscConfig+0x6d8>
=======
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_OscConfig+0x6e4>)
 80043fe:	4013      	ands	r3, r2
 8004400:	60cb      	str	r3, [r1, #12]
 8004402:	e001      	b.n	8004408 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> Stashed changes
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< Updated upstream
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x6da>
=======
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3734      	adds	r7, #52	; 0x34
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	eefefffc 	.word	0xeefefffc

08003a00 <HAL_RCC_ClockConfig>:
=======
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3734      	adds	r7, #52	; 0x34
 800440e:	46bd      	mov	sp, r7
 8004410:	bd90      	pop	{r4, r7, pc}
 8004412:	bf00      	nop
 8004414:	eefefffc 	.word	0xeefefffc

08004418 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
=======
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e12d      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
=======
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e12d      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8003a14:	4b98      	ldr	r3, [pc, #608]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d91b      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b95      	ldr	r3, [pc, #596]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4993      	ldr	r1, [pc, #588]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a32:	f7fd f8b5 	bl	8000ba0 <HAL_GetTick>
 8003a36:	60f8      	str	r0, [r7, #12]
=======
 800442c:	4b98      	ldr	r3, [pc, #608]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d91b      	bls.n	8004472 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b95      	ldr	r3, [pc, #596]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 0207 	bic.w	r2, r3, #7
 8004442:	4993      	ldr	r1, [pc, #588]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444a:	f7fc fde1 	bl	8001010 <HAL_GetTick>
 800444e:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a3a:	f7fd f8b1 	bl	8000ba0 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e111      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4c:	4b8a      	ldr	r3, [pc, #552]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x3a>
=======
 8004450:	e008      	b.n	8004464 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004452:	f7fc fddd 	bl	8001010 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e111      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004464:	4b8a      	ldr	r3, [pc, #552]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d1ef      	bne.n	8004452 <HAL_RCC_ClockConfig+0x3a>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fb13 	bl	8003096 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a70:	f7fd f896 	bl	8000ba0 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a78:	f7fd f892 	bl	8000ba0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0f2      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a8a:	f7ff fbe8 	bl	800325e <LL_RCC_IsActiveFlag_HPRE>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f1      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x78>
=======
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fb13 	bl	8003aae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004488:	f7fc fdc2 	bl	8001010 <HAL_GetTick>
 800448c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004490:	f7fc fdbe 	bl	8001010 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0f2      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80044a2:	f7ff fbe8 	bl	8003c76 <LL_RCC_IsActiveFlag_HPRE>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f1      	beq.n	8004490 <HAL_RCC_ClockConfig+0x78>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
<<<<<<< Updated upstream
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fb0a 	bl	80030be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd f879 	bl	8000ba0 <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ab2:	f7fd f875 	bl	8000ba0 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0d5      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ac4:	f7ff fbdd 	bl	8003282 <LL_RCC_IsActiveFlag_C2HPRE>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f1      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xb2>
=======
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d016      	beq.n	80044e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fb0a 	bl	8003ad6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044c2:	f7fc fda5 	bl	8001010 <HAL_GetTick>
 80044c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044ca:	f7fc fda1 	bl	8001010 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e0d5      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044dc:	f7ff fbdd 	bl	8003c9a <LL_RCC_IsActiveFlag_C2HPRE>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f1      	beq.n	80044ca <HAL_RCC_ClockConfig+0xb2>
>>>>>>> Stashed changes
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
<<<<<<< Updated upstream
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fb03 	bl	80030ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ae4:	f7fd f85c 	bl	8000ba0 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aec:	f7fd f858 	bl	8000ba0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0b8      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003afe:	f7ff fbd3 	bl	80032a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f1      	beq.n	8003aec <HAL_RCC_ClockConfig+0xec>
=======
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fb03 	bl	8003b02 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044fc:	f7fc fd88 	bl	8001010 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004504:	f7fc fd84 	bl	8001010 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0b8      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004516:	f7ff fbd3 	bl	8003cc0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f1      	beq.n	8004504 <HAL_RCC_ClockConfig+0xec>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d016      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fafd 	bl	8003118 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b1e:	f7fd f83f 	bl	8000ba0 <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b26:	f7fd f83b 	bl	8000ba0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e09b      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b38:	f7ff fbc9 	bl	80032ce <LL_RCC_IsActiveFlag_PPRE1>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f1      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x126>
=======
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fafd 	bl	8003b30 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004536:	f7fc fd6b 	bl	8001010 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800453e:	f7fc fd67 	bl	8001010 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e09b      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004550:	f7ff fbc9 	bl	8003ce6 <LL_RCC_IsActiveFlag_PPRE1>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f1      	beq.n	800453e <HAL_RCC_ClockConfig+0x126>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d017      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff faf3 	bl	8003140 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd f821 	bl	8000ba0 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b62:	f7fd f81d 	bl	8000ba0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e07d      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b74:	f7ff fbbd 	bl	80032f2 <LL_RCC_IsActiveFlag_PPRE2>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f1      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x162>
=======
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d017      	beq.n	8004596 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff faf3 	bl	8003b58 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004572:	f7fc fd4d 	bl	8001010 <HAL_GetTick>
 8004576:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800457a:	f7fc fd49 	bl	8001010 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e07d      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800458c:	f7ff fbbd 	bl	8003d0a <LL_RCC_IsActiveFlag_PPRE2>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f1      	beq.n	800457a <HAL_RCC_ClockConfig+0x162>
>>>>>>> Stashed changes
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d043      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x212>
=======
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d043      	beq.n	800462a <HAL_RCC_ClockConfig+0x212>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b92:	f7ff f893 	bl	8002cbc <LL_RCC_HSE_IsReady>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d11e      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e067      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
=======
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80045aa:	f7ff f893 	bl	80036d4 <LL_RCC_HSE_IsReady>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11e      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e067      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ba8:	f7ff fb16 	bl	80031d8 <LL_RCC_PLL_IsReady>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d113      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e05c      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
=======
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d106      	bne.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80045c0:	f7ff fb16 	bl	8003bf0 <LL_RCC_PLL_IsReady>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d113      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e05c      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< Updated upstream
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bbe:	f7ff f9fb 	bl	8002fb8 <LL_RCC_MSI_IsReady>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e051      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
=======
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80045d6:	f7ff f9fb 	bl	80039d0 <LL_RCC_MSI_IsReady>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e051      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
<<<<<<< Updated upstream
 8003bcc:	f7ff f8a6 	bl	8002d1c <LL_RCC_HSI_IsReady>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e04a      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
=======
 80045e4:	f7ff f8a6 	bl	8003734 <LL_RCC_HSI_IsReady>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e04a      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fa39 	bl	8003056 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fc ffdc 	bl	8000ba0 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fc ffd8 	bl	8000ba0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e036      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	f7ff fa3c 	bl	800307e <LL_RCC_GetSysClkSource>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d1ec      	bne.n	8003bec <HAL_RCC_ClockConfig+0x1ec>
=======
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fa39 	bl	8003a6e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fc:	f7fc fd08 	bl	8001010 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	e00a      	b.n	800461a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004604:	f7fc fd04 	bl	8001010 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e036      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	f7ff fa3c 	bl	8003a96 <LL_RCC_GetSysClkSource>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	429a      	cmp	r2, r3
 8004628:	d1ec      	bne.n	8004604 <HAL_RCC_ClockConfig+0x1ec>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d21b      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 0207 	bic.w	r2, r3, #7
 8003c28:	4913      	ldr	r1, [pc, #76]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fc ffb6 	bl	8000ba0 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]
=======
 800462a:	4b19      	ldr	r3, [pc, #100]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d21b      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004638:	4b15      	ldr	r3, [pc, #84]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f023 0207 	bic.w	r2, r3, #7
 8004640:	4913      	ldr	r1, [pc, #76]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004648:	f7fc fce2 	bl	8001010 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c38:	f7fc ffb2 	bl	8000ba0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e012      	b.n	8003c70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x278>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1ef      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x238>
=======
 800464e:	e008      	b.n	8004662 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004650:	f7fc fcde 	bl	8001010 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e012      	b.n	8004688 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_ClockConfig+0x278>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d1ef      	bne.n	8004650 <HAL_RCC_ClockConfig+0x238>
>>>>>>> Stashed changes
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< Updated upstream
 8003c58:	f000 f880 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <HAL_RCC_ClockConfig+0x27c>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c62:	f7fc ffa9 	bl	8000bb8 <HAL_GetTickPrio>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc ff4b 	bl	8000b04 <HAL_InitTick>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	58004000 	.word	0x58004000
 8003c7c:	20000048 	.word	0x20000048

08003c80 <HAL_RCC_GetSysClockFreq>:
=======
 8004670:	f000 f880 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004674:	4603      	mov	r3, r0
 8004676:	4a07      	ldr	r2, [pc, #28]	; (8004694 <HAL_RCC_ClockConfig+0x27c>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800467a:	f7fc fcd5 	bl	8001028 <HAL_GetTickPrio>
 800467e:	4603      	mov	r3, r0
 8004680:	4618      	mov	r0, r3
 8004682:	f7fc fc77 	bl	8000f74 <HAL_InitTick>
 8004686:	4603      	mov	r3, r0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	58004000 	.word	0x58004000
 8004694:	20000048 	.word	0x20000048

08004698 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
=======
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8003c86:	f7ff f9fa 	bl	800307e <LL_RCC_GetSysClkSource>
 8003c8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x28>
=======
 800469e:	f7ff f9fa 	bl	8003a96 <LL_RCC_GetSysClkSource>
 80046a2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x28>
>>>>>>> Stashed changes
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
<<<<<<< Updated upstream
 8003c92:	f7ff f9b6 	bl	8003002 <LL_RCC_MSI_GetRange>
 8003c96:	4603      	mov	r3, r0
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a2b      	ldr	r2, [pc, #172]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e04b      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e045      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cba:	f7fe ffcf 	bl	8002c5c <LL_RCC_HSE_IsEnabledDiv2>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d102      	bne.n	8003cca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e03a      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
=======
 80046aa:	f7ff f9b6 	bl	8003a1a <LL_RCC_MSI_GetRange>
 80046ae:	4603      	mov	r3, r0
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e04b      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d102      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e045      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d10a      	bne.n	80046e8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046d2:	f7fe ffcf 	bl	8003674 <LL_RCC_HSE_IsEnabledDiv2>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d102      	bne.n	80046e2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80046dc:	4b23      	ldr	r3, [pc, #140]	; (800476c <HAL_RCC_GetSysClockFreq+0xd4>)
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e03a      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> Stashed changes
    }
    else
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8003cca:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e037      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xc0>
=======
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCC_GetSysClockFreq+0xd8>)
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e037      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
<<<<<<< Updated upstream
 8003cd0:	f7ff fab9 	bl	8003246 <LL_RCC_PLL_GetMainSource>
 8003cd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d003      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x64>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x6a>
 8003ce2:	e00d      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ce6:	60bb      	str	r3, [r7, #8]
        break;
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cea:	f7fe ffb7 	bl	8002c5c <LL_RCC_HSE_IsEnabledDiv2>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d102      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cf6:	60bb      	str	r3, [r7, #8]
=======
 80046e8:	f7ff fab9 	bl	8003c5e <LL_RCC_PLL_GetMainSource>
 80046ec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d003      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x64>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d003      	beq.n	8004702 <HAL_RCC_GetSysClockFreq+0x6a>
 80046fa:	e00d      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046fe:	60bb      	str	r3, [r7, #8]
        break;
 8004700:	e015      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004702:	f7fe ffb7 	bl	8003674 <LL_RCC_HSE_IsEnabledDiv2>
 8004706:	4603      	mov	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_RCC_GetSysClockFreq+0xd4>)
 800470e:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
<<<<<<< Updated upstream
 8003cf8:	e00d      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003cfc:	60bb      	str	r3, [r7, #8]
        break;
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d00:	f7ff f97f 	bl	8003002 <LL_RCC_MSI_GetRange>
 8003d04:	4603      	mov	r3, r0
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d12:	60bb      	str	r3, [r7, #8]
        break;
 8003d14:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d16:	f7ff fa71 	bl	80031fc <LL_RCC_PLL_GetN>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	fb03 f402 	mul.w	r4, r3, r2
 8003d22:	f7ff fa84 	bl	800322e <LL_RCC_PLL_GetDivider>
 8003d26:	4603      	mov	r3, r0
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d30:	f7ff fa71 	bl	8003216 <LL_RCC_PLL_GetR>
 8003d34:	4603      	mov	r3, r0
 8003d36:	0f5b      	lsrs	r3, r3, #29
 8003d38:	3301      	adds	r3, #1
 8003d3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
=======
 8004710:	e00d      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004714:	60bb      	str	r3, [r7, #8]
        break;
 8004716:	e00a      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004718:	f7ff f97f 	bl	8003a1a <LL_RCC_MSI_GetRange>
 800471c:	4603      	mov	r3, r0
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	4a0f      	ldr	r2, [pc, #60]	; (8004764 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	60bb      	str	r3, [r7, #8]
        break;
 800472c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800472e:	f7ff fa71 	bl	8003c14 <LL_RCC_PLL_GetN>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	fb03 f402 	mul.w	r4, r3, r2
 800473a:	f7ff fa84 	bl	8003c46 <LL_RCC_PLL_GetDivider>
 800473e:	4603      	mov	r3, r0
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	3301      	adds	r3, #1
 8004744:	fbb4 f4f3 	udiv	r4, r4, r3
 8004748:	f7ff fa71 	bl	8003c2e <LL_RCC_PLL_GetR>
 800474c:	4603      	mov	r3, r0
 800474e:	0f5b      	lsrs	r3, r3, #29
 8004750:	3301      	adds	r3, #1
 8004752:	fbb4 f3f3 	udiv	r3, r4, r3
 8004756:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
<<<<<<< Updated upstream
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	0800ad98 	.word	0x0800ad98
 8003d50:	00f42400 	.word	0x00f42400
 8003d54:	003d0900 	.word	0x003d0900
 8003d58:	007a1200 	.word	0x007a1200

08003d5c <HAL_RCC_GetHCLKFreq>:
=======
 8004758:	68fb      	ldr	r3, [r7, #12]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}
 8004762:	bf00      	nop
 8004764:	0800cbc0 	.word	0x0800cbc0
 8004768:	00f42400 	.word	0x00f42400
 800476c:	003d0900 	.word	0x003d0900
 8004770:	007a1200 	.word	0x007a1200

08004774 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8003d5c:	b598      	push	{r3, r4, r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d60:	f7ff ff8e 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003d64:	4604      	mov	r4, r0
 8003d66:	f7ff f9ff 	bl	8003168 <LL_RCC_GetAHBPrescaler>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd98      	pop	{r3, r4, r7, pc}
 8003d80:	0800ad58 	.word	0x0800ad58

08003d84 <RCC_SetFlashLatencyFromMSIRange>:
=======
 8004774:	b598      	push	{r3, r4, r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004778:	f7ff ff8e 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 800477c:	4604      	mov	r4, r0
 800477e:	f7ff f9ff 	bl	8003b80 <LL_RCC_GetAHBPrescaler>
 8004782:	4603      	mov	r3, r0
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	4a03      	ldr	r2, [pc, #12]	; (8004798 <HAL_RCC_GetHCLKFreq+0x24>)
 800478c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004790:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd98      	pop	{r3, r4, r7, pc}
 8004798:	0800cb80 	.word	0x0800cb80

0800479c <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> Stashed changes
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
<<<<<<< Updated upstream
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
=======
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
<<<<<<< Updated upstream
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2bb0      	cmp	r3, #176	; 0xb0
 8003d90:	d903      	bls.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e007      	b.n	8003daa <RCC_SetFlashLatencyFromMSIRange+0x26>
=======
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2bb0      	cmp	r3, #176	; 0xb0
 80047a8:	d903      	bls.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e007      	b.n	80047c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
<<<<<<< Updated upstream
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003daa:	f7ff f9e9 	bl	8003180 <LL_RCC_GetAHB4Prescaler>
 8003dae:	4603      	mov	r3, r0
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0c9c      	lsrs	r4, r3, #18
 8003dce:	f7fe ff27 	bl	8002c20 <HAL_PWREx_GetVoltageRange>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 f80c 	bl	8003df4 <RCC_SetFlashLatency>
 8003ddc:	4603      	mov	r3, r0
=======
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	4a11      	ldr	r2, [pc, #68]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80047c2:	f7ff f9e9 	bl	8003b98 <LL_RCC_GetAHB4Prescaler>
 80047c6:	4603      	mov	r3, r0
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80047d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	0c9c      	lsrs	r4, r3, #18
 80047e6:	f7fe ff27 	bl	8003638 <HAL_PWREx_GetVoltageRange>
 80047ea:	4603      	mov	r3, r0
 80047ec:	4619      	mov	r1, r3
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 f80c 	bl	800480c <RCC_SetFlashLatency>
 80047f4:	4603      	mov	r3, r0
>>>>>>> Stashed changes
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
<<<<<<< Updated upstream
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd90      	pop	{r4, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	0800ad98 	.word	0x0800ad98
 8003dec:	0800ad58 	.word	0x0800ad58
 8003df0:	431bde83 	.word	0x431bde83

08003df4 <RCC_SetFlashLatency>:
=======
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd90      	pop	{r4, r7, pc}
 80047fe:	bf00      	nop
 8004800:	0800cbc0 	.word	0x0800cbc0
 8004804:	0800cb80 	.word	0x0800cb80
 8004808:	431bde83 	.word	0x431bde83

0800480c <RCC_SetFlashLatency>:
>>>>>>> Stashed changes
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
<<<<<<< Updated upstream
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b093      	sub	sp, #76	; 0x4c
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <RCC_SetFlashLatency+0xe8>)
 8003e00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003e0a:	4a35      	ldr	r2, [pc, #212]	; (8003ee0 <RCC_SetFlashLatency+0xec>)
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <RCC_SetFlashLatency+0xf0>)
 8003e18:	f107 040c 	add.w	r4, r7, #12
 8003e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e22:	2300      	movs	r3, #0
 8003e24:	647b      	str	r3, [r7, #68]	; 0x44
=======
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b093      	sub	sp, #76	; 0x4c
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004816:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <RCC_SetFlashLatency+0xe8>)
 8004818:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800481c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800481e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004822:	4a35      	ldr	r2, [pc, #212]	; (80048f8 <RCC_SetFlashLatency+0xec>)
 8004824:	f107 031c 	add.w	r3, r7, #28
 8004828:	ca07      	ldmia	r2, {r0, r1, r2}
 800482a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800482e:	4b33      	ldr	r3, [pc, #204]	; (80048fc <RCC_SetFlashLatency+0xf0>)
 8004830:	f107 040c 	add.w	r4, r7, #12
 8004834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800483a:	2300      	movs	r3, #0
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> Stashed changes
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< Updated upstream
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2c:	d11a      	bne.n	8003e64 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	643b      	str	r3, [r7, #64]	; 0x40
 8003e32:	e013      	b.n	8003e5c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	3348      	adds	r3, #72	; 0x48
 8003e3a:	443b      	add	r3, r7
 8003e3c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d807      	bhi.n	8003e56 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	3348      	adds	r3, #72	; 0x48
 8003e4c:	443b      	add	r3, r7
 8003e4e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e54:	e020      	b.n	8003e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	3301      	adds	r3, #1
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d9e8      	bls.n	8003e34 <RCC_SetFlashLatency+0x40>
 8003e62:	e019      	b.n	8003e98 <RCC_SetFlashLatency+0xa4>
=======
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d11a      	bne.n	800487c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004846:	2300      	movs	r3, #0
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
 800484a:	e013      	b.n	8004874 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800484c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	3348      	adds	r3, #72	; 0x48
 8004852:	443b      	add	r3, r7
 8004854:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d807      	bhi.n	800486e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800485e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	3348      	adds	r3, #72	; 0x48
 8004864:	443b      	add	r3, r7
 8004866:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800486c:	e020      	b.n	80048b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800486e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004870:	3301      	adds	r3, #1
 8004872:	643b      	str	r3, [r7, #64]	; 0x40
 8004874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004876:	2b03      	cmp	r3, #3
 8004878:	d9e8      	bls.n	800484c <RCC_SetFlashLatency+0x40>
 800487a:	e019      	b.n	80048b0 <RCC_SetFlashLatency+0xa4>
>>>>>>> Stashed changes
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
<<<<<<< Updated upstream
 8003e64:	2300      	movs	r3, #0
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e68:	e013      	b.n	8003e92 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3348      	adds	r3, #72	; 0x48
 8003e70:	443b      	add	r3, r7
 8003e72:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d807      	bhi.n	8003e8c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	3348      	adds	r3, #72	; 0x48
 8003e82:	443b      	add	r3, r7
 8003e84:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e8a:	e005      	b.n	8003e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8e:	3301      	adds	r3, #1
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d9e8      	bls.n	8003e6a <RCC_SetFlashLatency+0x76>
=======
 800487c:	2300      	movs	r3, #0
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	e013      	b.n	80048aa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	3348      	adds	r3, #72	; 0x48
 8004888:	443b      	add	r3, r7
 800488a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d807      	bhi.n	80048a4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	3348      	adds	r3, #72	; 0x48
 800489a:	443b      	add	r3, r7
 800489c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048a2:	e005      	b.n	80048b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a6:	3301      	adds	r3, #1
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d9e8      	bls.n	8004882 <RCC_SetFlashLatency+0x76>
>>>>>>> Stashed changes
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< Updated upstream
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <RCC_SetFlashLatency+0xf4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 0207 	bic.w	r2, r3, #7
 8003ea0:	4911      	ldr	r1, [pc, #68]	; (8003ee8 <RCC_SetFlashLatency+0xf4>)
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ea8:	f7fc fe7a 	bl	8000ba0 <HAL_GetTick>
 8003eac:	63b8      	str	r0, [r7, #56]	; 0x38
=======
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <RCC_SetFlashLatency+0xf4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f023 0207 	bic.w	r2, r3, #7
 80048b8:	4911      	ldr	r1, [pc, #68]	; (8004900 <RCC_SetFlashLatency+0xf4>)
 80048ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048c0:	f7fc fba6 	bl	8001010 <HAL_GetTick>
 80048c4:	63b8      	str	r0, [r7, #56]	; 0x38
>>>>>>> Stashed changes

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< Updated upstream
 8003eae:	e008      	b.n	8003ec2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003eb0:	f7fc fe76 	bl	8000ba0 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e007      	b.n	8003ed2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <RCC_SetFlashLatency+0xf4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1ef      	bne.n	8003eb0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	374c      	adds	r7, #76	; 0x4c
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd90      	pop	{r4, r7, pc}
 8003eda:	bf00      	nop
 8003edc:	0800ace4 	.word	0x0800ace4
 8003ee0:	0800acf4 	.word	0x0800acf4
 8003ee4:	0800ad00 	.word	0x0800ad00
 8003ee8:	58004000 	.word	0x58004000

08003eec <LL_RCC_LSE_IsEnabled>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <LL_RCC_LSE_IsEnabled+0x18>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <LL_RCC_LSE_IsEnabled+0x1a>
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_LSE_IsReady>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d101      	bne.n	8003f28 <LL_RCC_LSE_IsReady+0x18>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_RCC_LSE_IsReady+0x1a>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_RCC_MSI_EnablePLLMode>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_SetRFWKPClockSource>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_SetSMPSClockSource>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f023 0203 	bic.w	r2, r3, #3
 8003f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LL_RCC_SetSMPSPrescaler>:
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_SetUSARTClockSource>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_SetLPUARTClockSource>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800400e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_RCC_SetI2CClockSource>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800403e:	43db      	mvns	r3, r3
 8004040:	401a      	ands	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_SetLPTIMClockSource>:
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0c1b      	lsrs	r3, r3, #16
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	43db      	mvns	r3, r3
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_SetSAIClockSource>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_RCC_SetRNGClockSource>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_SetCLK48ClockSource>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_RCC_SetUSBClockSource>:
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ffe3 	bl	80040ec <LL_RCC_SetCLK48ClockSource>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <LL_RCC_SetADCClockSource>:
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_RCC_SetRTCClockSource>:
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800416e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_GetRTCClockSource>:
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_RCC_ForceBackupDomainReset>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_RCC_PLLSAI1_Enable>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041f6:	6013      	str	r3, [r2, #0]
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_PLLSAI1_Disable>:
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004210:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004214:	6013      	str	r3, [r2, #0]
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_RCC_PLLSAI1_IsReady>:
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004232:	d101      	bne.n	8004238 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_RCCEx_PeriphCLKConfig>:
=======
 80048c6:	e008      	b.n	80048da <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048c8:	f7fc fba2 	bl	8001010 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e007      	b.n	80048ea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <RCC_SetFlashLatency+0xf4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1ef      	bne.n	80048c8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	374c      	adds	r7, #76	; 0x4c
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd90      	pop	{r4, r7, pc}
 80048f2:	bf00      	nop
 80048f4:	0800cb0c 	.word	0x0800cb0c
 80048f8:	0800cb1c 	.word	0x0800cb1c
 80048fc:	0800cb28 	.word	0x0800cb28
 8004900:	58004000 	.word	0x58004000

08004904 <LL_RCC_LSE_IsEnabled>:
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <LL_RCC_LSE_IsEnabled+0x18>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <LL_RCC_LSE_IsEnabled+0x1a>
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_RCC_LSE_IsReady>:
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800492c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d101      	bne.n	8004940 <LL_RCC_LSE_IsReady+0x18>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <LL_RCC_LSE_IsReady+0x1a>
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_RCC_MSI_EnablePLLMode>:
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495a:	f043 0304 	orr.w	r3, r3, #4
 800495e:	6013      	str	r3, [r2, #0]
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_RCC_SetRFWKPClockSource>:
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800497e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_SetSMPSClockSource>:
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f023 0203 	bic.w	r2, r3, #3
 80049a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <LL_RCC_SetSMPSPrescaler>:
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <LL_RCC_SetUSARTClockSource>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_RCC_SetLPUARTClockSource>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_RCC_SetI2CClockSource>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a56:	43db      	mvns	r3, r3
 8004a58:	401a      	ands	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_RCC_SetLPTIMClockSource>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	401a      	ands	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_RCC_SetSAIClockSource>:
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_RCC_SetRNGClockSource>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_SetCLK48ClockSource>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_RCC_SetUSBClockSource>:
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ffe3 	bl	8004b04 <LL_RCC_SetCLK48ClockSource>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <LL_RCC_SetADCClockSource>:
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <LL_RCC_SetRTCClockSource>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <LL_RCC_GetRTCClockSource>:
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_ForceBackupDomainReset>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_RCC_ReleaseBackupDomainReset>:
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <LL_RCC_PLLSAI1_Enable>:
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <LL_RCC_PLLSAI1_Disable>:
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c2c:	6013      	str	r3, [r2, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <LL_RCC_PLLSAI1_IsReady>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c4a:	d101      	bne.n	8004c50 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800424c:	2300      	movs	r3, #0
 800424e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004250:	2300      	movs	r3, #0
 8004252:	77bb      	strb	r3, [r7, #30]
=======
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004c64:	2300      	movs	r3, #0
 8004c66:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c68:	2300      	movs	r3, #0
 8004c6a:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< Updated upstream
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d034      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d034      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
<<<<<<< Updated upstream
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004268:	d021      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800426a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800426e:	d81b      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004274:	d01d      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800427a:	d815      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004284:	d110      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
=======
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c80:	d021      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c86:	d81b      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c8c:	d01d      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c92:	d815      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9c:	d110      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
>>>>>>> Stashed changes
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
<<<<<<< Updated upstream
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004296:	e00d      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cae:	e00d      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> Stashed changes

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
<<<<<<< Updated upstream
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f94d 	bl	800453c <RCCEx_PLLSAI1_ConfigNP>
 80042a2:	4603      	mov	r3, r0
 80042a4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042a6:	e005      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 f94d 	bl	8004f54 <RCCEx_PLLSAI1_ConfigNP>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cbe:	e005      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> Stashed changes
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
        break;
 80042ac:	e002      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b4:	7ffb      	ldrb	r3, [r7, #31]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fee8 	bl	8004094 <LL_RCC_SetSAIClockSource>
 80042c4:	e001      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	77fb      	strb	r3, [r7, #31]
        break;
 8004cc4:	e002      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ccc:	7ffb      	ldrb	r3, [r7, #31]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d105      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fee8 	bl	8004aac <LL_RCC_SetSAIClockSource>
 8004cdc:	e001      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80042c6:	7ffb      	ldrb	r3, [r7, #31]
 80042c8:	77bb      	strb	r3, [r7, #30]
=======
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d046      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80042d6:	f7ff ff56 	bl	8004186 <LL_RCC_GetRTCClockSource>
 80042da:	61b8      	str	r0, [r7, #24]
=======
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d046      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004cee:	f7ff ff56 	bl	8004b9e <LL_RCC_GetRTCClockSource>
 8004cf2:	61b8      	str	r0, [r7, #24]
>>>>>>> Stashed changes

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
<<<<<<< Updated upstream
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d03c      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042e6:	f7fe fc8b 	bl	8002c00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff30 	bl	800415a <LL_RCC_SetRTCClockSource>
 80042fa:	e02e      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x116>
=======
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d03c      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004cfe:	f7fe fc8b 	bl	8003618 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff ff30 	bl	8004b72 <LL_RCC_SetRTCClockSource>
 8004d12:	e02e      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
>>>>>>> Stashed changes
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
<<<<<<< Updated upstream
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004306:	f7ff ff4b 	bl	80041a0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800430a:	f7ff ff5a 	bl	80041c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800431c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004326:	f7ff fde1 	bl	8003eec <LL_RCC_LSE_IsEnabled>
 800432a:	4603      	mov	r3, r0
 800432c:	2b01      	cmp	r3, #1
 800432e:	d114      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004330:	f7fc fc36 	bl	8000ba0 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004336:	e00b      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fc fc32 	bl	8000ba0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d902      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	77fb      	strb	r3, [r7, #31]
              break;
 800434e:	e004      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004350:	f7ff fdde 	bl	8003f10 <LL_RCC_LSE_IsReady>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d1ee      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
=======
 8004d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d1e:	f7ff ff4b 	bl	8004bb8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d22:	f7ff ff5a 	bl	8004bda <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004d3e:	f7ff fde1 	bl	8004904 <LL_RCC_LSE_IsEnabled>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d114      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d48:	f7fc f962 	bl	8001010 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d50:	f7fc f95e 	bl	8001010 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d902      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	77fb      	strb	r3, [r7, #31]
              break;
 8004d66:	e004      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d68:	f7ff fdde 	bl	8004928 <LL_RCC_LSE_IsReady>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d1ee      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
>>>>>>> Stashed changes
          }
        }
      }

      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	77bb      	strb	r3, [r7, #30]
 800435e:	e001      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x120>
=======
 8004d72:	7ffb      	ldrb	r3, [r7, #31]
 8004d74:	77bb      	strb	r3, [r7, #30]
 8004d76:	e001      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x120>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004360:	7ffb      	ldrb	r3, [r7, #31]
 8004362:	77bb      	strb	r3, [r7, #30]
=======
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fe2a 	bl	8003fce <LL_RCC_SetUSARTClockSource>
=======
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fe2a 	bl	80049e6 <LL_RCC_SetUSARTClockSource>
>>>>>>> Stashed changes
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x14c>
=======
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fe35 	bl	8003ffa <LL_RCC_SetLPUARTClockSource>
=======
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fe35 	bl	8004a12 <LL_RCC_SetLPUARTClockSource>
>>>>>>> Stashed changes
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< Updated upstream
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe5d 	bl	8004060 <LL_RCC_SetLPTIMClockSource>
=======
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fe5d 	bl	8004a78 <LL_RCC_SetLPTIMClockSource>
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< Updated upstream
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fe52 	bl	8004060 <LL_RCC_SetLPTIMClockSource>
=======
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fe52 	bl	8004a78 <LL_RCC_SetLPTIMClockSource>
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
=======
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x18e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fe2a 	bl	8004026 <LL_RCC_SetI2CClockSource>
=======
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fe2a 	bl	8004a3e <LL_RCC_SetI2CClockSource>
>>>>>>> Stashed changes
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
=======
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fe1f 	bl	8004026 <LL_RCC_SetI2CClockSource>
=======
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fe1f 	bl	8004a3e <LL_RCC_SetI2CClockSource>
>>>>>>> Stashed changes
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fe8d 	bl	8004118 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004406:	d107      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004416:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004420:	d10b      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f8e3 	bl	80045f2 <RCCEx_PLLSAI1_ConfigNQ>
 800442c:	4603      	mov	r3, r0
 800442e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004430:	7ffb      	ldrb	r3, [r7, #31]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	77bb      	strb	r3, [r7, #30]
=======
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d022      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fe8d 	bl	8004b30 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e38:	d10b      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f8e3 	bl	800500a <RCCEx_PLLSAI1_ConfigNQ>
 8004e44:	4603      	mov	r3, r0
 8004e46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004e48:	7ffb      	ldrb	r3, [r7, #31]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004e4e:	7ffb      	ldrb	r3, [r7, #31]
 8004e50:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02b      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x25a>
=======
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02b      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
<<<<<<< Updated upstream
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004458:	d003      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fe2a 	bl	80040c0 <LL_RCC_SetRNGClockSource>
 800446c:	e00a      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	2000      	movs	r0, #0
 800447a:	f7ff fe21 	bl	80040c0 <LL_RCC_SetRNGClockSource>
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fe34 	bl	80040ec <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800448c:	d107      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449c:	60d3      	str	r3, [r2, #12]
=======
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e66:	d008      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e70:	d003      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fe2a 	bl	8004ad8 <LL_RCC_SetRNGClockSource>
 8004e84:	e00a      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	2000      	movs	r0, #0
 8004e92:	f7ff fe21 	bl	8004ad8 <LL_RCC_SetRNGClockSource>
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff fe34 	bl	8004b04 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb4:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< Updated upstream
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d022      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
=======
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d022      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< Updated upstream
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fe3d 	bl	800412e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044bc:	d107      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	60d3      	str	r3, [r2, #12]
=======
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fe3d 	bl	8004b46 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee4:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
<<<<<<< Updated upstream
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044d6:	d10b      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f8e3 	bl	80046a8 <RCCEx_PLLSAI1_ConfigNR>
 80044e2:	4603      	mov	r3, r0
 80044e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80044ec:	7ffb      	ldrb	r3, [r7, #31]
 80044ee:	77bb      	strb	r3, [r7, #30]
=======
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eee:	d10b      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f8e3 	bl	80050c0 <RCCEx_PLLSAI1_ConfigNR>
 8004efa:	4603      	mov	r3, r0
 8004efc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004efe:	7ffb      	ldrb	r3, [r7, #31]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004f04:	7ffb      	ldrb	r3, [r7, #31]
 8004f06:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
<<<<<<< Updated upstream
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
<<<<<<< Updated upstream
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fd26 	bl	8003f52 <LL_RCC_SetRFWKPClockSource>
=======
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fd26 	bl	800496a <LL_RCC_SetRFWKPClockSource>
>>>>>>> Stashed changes

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
<<<<<<< Updated upstream
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
=======
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
<<<<<<< Updated upstream
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fd45 	bl	8003fa6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fd2c 	bl	8003f7e <LL_RCC_SetSMPSClockSource>
=======
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fd45 	bl	80049be <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fd2c 	bl	8004996 <LL_RCC_SetSMPSClockSource>
>>>>>>> Stashed changes
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
<<<<<<< Updated upstream
 8004526:	7fbb      	ldrb	r3, [r7, #30]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_RCCEx_EnableMSIPLLMode>:
=======
 8004f3e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_RCCEx_EnableMSIPLLMode>:
>>>>>>> Stashed changes
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
<<<<<<< Updated upstream
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004534:	f7ff fcfe 	bl	8003f34 <LL_RCC_MSI_EnablePLLMode>
}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}

0800453c <RCCEx_PLLSAI1_ConfigNP>:
=======
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004f4c:	f7ff fcfe 	bl	800494c <LL_RCC_MSI_EnablePLLMode>
}
 8004f50:	bf00      	nop
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <RCCEx_PLLSAI1_ConfigNP>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< Updated upstream
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]
=======
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< Updated upstream
 8004548:	f7ff fe5b 	bl	8004202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800454c:	f7fc fb28 	bl	8000ba0 <HAL_GetTick>
 8004550:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004552:	e009      	b.n	8004568 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004554:	f7fc fb24 	bl	8000ba0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d902      	bls.n	8004568 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	73fb      	strb	r3, [r7, #15]
      break;
 8004566:	e004      	b.n	8004572 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004568:	f7ff fe5a 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <RCCEx_PLLSAI1_ConfigNP+0x18>
=======
 8004f60:	f7ff fe5b 	bl	8004c1a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f64:	f7fc f854 	bl	8001010 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f6a:	e009      	b.n	8004f80 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6c:	f7fc f850 	bl	8001010 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d902      	bls.n	8004f80 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7e:	e004      	b.n	8004f8a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f80:	f7ff fe5a 	bl	8004c38 <LL_RCC_PLLSAI1_IsReady>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <RCCEx_PLLSAI1_ConfigNP+0x18>
>>>>>>> Stashed changes
    }
  }

  if (status == HAL_OK)
<<<<<<< Updated upstream
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d137      	bne.n	80045e8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800458c:	4313      	orrs	r3, r2
 800458e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045a6:	f7ff fe1d 	bl	80041e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045aa:	f7fc faf9 	bl	8000ba0 <HAL_GetTick>
 80045ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045b0:	e009      	b.n	80045c6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b2:	f7fc faf5 	bl	8000ba0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d902      	bls.n	80045c6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	73fb      	strb	r3, [r7, #15]
        break;
 80045c4:	e004      	b.n	80045d0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045c6:	f7ff fe2b 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d1f0      	bne.n	80045b2 <RCCEx_PLLSAI1_ConfigNP+0x76>
=======
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d137      	bne.n	8005000 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fbe:	f7ff fe1d 	bl	8004bfc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fc f825 	bl	8001010 <HAL_GetTick>
 8004fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fc8:	e009      	b.n	8004fde <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fca:	f7fc f821 	bl	8001010 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d902      	bls.n	8004fde <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	73fb      	strb	r3, [r7, #15]
        break;
 8004fdc:	e004      	b.n	8004fe8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fde:	f7ff fe2b 	bl	8004c38 <LL_RCC_PLLSAI1_IsReady>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d1f0      	bne.n	8004fca <RCCEx_PLLSAI1_ConfigNP+0x76>
>>>>>>> Stashed changes
      }
    }

    if (status == HAL_OK)
<<<<<<< Updated upstream
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d108      	bne.n	80045e8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e4:	4313      	orrs	r3, r2
 80045e6:	610b      	str	r3, [r1, #16]
=======
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
    }
  }

  return status;
<<<<<<< Updated upstream
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <RCCEx_PLLSAI1_ConfigNQ>:
=======
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <RCCEx_PLLSAI1_ConfigNQ>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< Updated upstream
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
=======
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< Updated upstream
 80045fe:	f7ff fe00 	bl	8004202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004602:	f7fc facd 	bl	8000ba0 <HAL_GetTick>
 8004606:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004608:	e009      	b.n	800461e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800460a:	f7fc fac9 	bl	8000ba0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d902      	bls.n	800461e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e004      	b.n	8004628 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800461e:	f7ff fdff 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <RCCEx_PLLSAI1_ConfigNQ+0x18>
=======
 8005016:	f7ff fe00 	bl	8004c1a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800501a:	f7fb fff9 	bl	8001010 <HAL_GetTick>
 800501e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005020:	e009      	b.n	8005036 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005022:	f7fb fff5 	bl	8001010 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d902      	bls.n	8005036 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e004      	b.n	8005040 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005036:	f7ff fdff 	bl	8004c38 <LL_RCC_PLLSAI1_IsReady>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <RCCEx_PLLSAI1_ConfigNQ+0x18>
>>>>>>> Stashed changes
    }
  }

  if (status == HAL_OK)
<<<<<<< Updated upstream
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d137      	bne.n	800469e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004658:	4313      	orrs	r3, r2
 800465a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800465c:	f7ff fdc2 	bl	80041e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004660:	f7fc fa9e 	bl	8000ba0 <HAL_GetTick>
 8004664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004666:	e009      	b.n	800467c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004668:	f7fc fa9a 	bl	8000ba0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d902      	bls.n	800467c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	73fb      	strb	r3, [r7, #15]
        break;
 800467a:	e004      	b.n	8004686 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800467c:	f7ff fdd0 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d1f0      	bne.n	8004668 <RCCEx_PLLSAI1_ConfigNQ+0x76>
=======
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d137      	bne.n	80050b6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005070:	4313      	orrs	r3, r2
 8005072:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005074:	f7ff fdc2 	bl	8004bfc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005078:	f7fb ffca 	bl	8001010 <HAL_GetTick>
 800507c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800507e:	e009      	b.n	8005094 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005080:	f7fb ffc6 	bl	8001010 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d902      	bls.n	8005094 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	73fb      	strb	r3, [r7, #15]
        break;
 8005092:	e004      	b.n	800509e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005094:	f7ff fdd0 	bl	8004c38 <LL_RCC_PLLSAI1_IsReady>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d1f0      	bne.n	8005080 <RCCEx_PLLSAI1_ConfigNQ+0x76>
>>>>>>> Stashed changes
      }
    }

    if (status == HAL_OK)
<<<<<<< Updated upstream
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d108      	bne.n	800469e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800469a:	4313      	orrs	r3, r2
 800469c:	610b      	str	r3, [r1, #16]
=======
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d108      	bne.n	80050b6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b2:	4313      	orrs	r3, r2
 80050b4:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
    }
  }

  return status;
<<<<<<< Updated upstream
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <RCCEx_PLLSAI1_ConfigNR>:
=======
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <RCCEx_PLLSAI1_ConfigNR>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< Updated upstream
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	73fb      	strb	r3, [r7, #15]
=======
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< Updated upstream
 80046b4:	f7ff fda5 	bl	8004202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046b8:	f7fc fa72 	bl	8000ba0 <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046be:	e009      	b.n	80046d4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c0:	f7fc fa6e 	bl	8000ba0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	73fb      	strb	r3, [r7, #15]
      break;
 80046d2:	e004      	b.n	80046de <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046d4:	f7ff fda4 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <RCCEx_PLLSAI1_ConfigNR+0x18>
=======
 80050cc:	f7ff fda5 	bl	8004c1a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050d0:	f7fb ff9e 	bl	8001010 <HAL_GetTick>
 80050d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050d6:	e009      	b.n	80050ec <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050d8:	f7fb ff9a 	bl	8001010 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d902      	bls.n	80050ec <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ea:	e004      	b.n	80050f6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050ec:	f7ff fda4 	bl	8004c38 <LL_RCC_PLLSAI1_IsReady>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <RCCEx_PLLSAI1_ConfigNR+0x18>
>>>>>>> Stashed changes
    }
  }

  if (status == HAL_OK)
<<<<<<< Updated upstream
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d137      	bne.n	8004754 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046f8:	4313      	orrs	r3, r2
 80046fa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800470e:	4313      	orrs	r3, r2
 8004710:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004712:	f7ff fd67 	bl	80041e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004716:	f7fc fa43 	bl	8000ba0 <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800471c:	e009      	b.n	8004732 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800471e:	f7fc fa3f 	bl	8000ba0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d902      	bls.n	8004732 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	73fb      	strb	r3, [r7, #15]
        break;
 8004730:	e004      	b.n	800473c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004732:	f7ff fd75 	bl	8004220 <LL_RCC_PLLSAI1_IsReady>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d1f0      	bne.n	800471e <RCCEx_PLLSAI1_ConfigNR+0x76>
=======
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d137      	bne.n	800516c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005110:	4313      	orrs	r3, r2
 8005112:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800512a:	f7ff fd67 	bl	8004bfc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512e:	f7fb ff6f 	bl	8001010 <HAL_GetTick>
 8005132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005134:	e009      	b.n	800514a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005136:	f7fb ff6b 	bl	8001010 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d902      	bls.n	800514a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	73fb      	strb	r3, [r7, #15]
        break;
 8005148:	e004      	b.n	8005154 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800514a:	f7ff fd75 	bl	8004c38 <LL_RCC_PLLSAI1_IsReady>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d1f0      	bne.n	8005136 <RCCEx_PLLSAI1_ConfigNR+0x76>
>>>>>>> Stashed changes
      }
    }

    if (status == HAL_OK)
<<<<<<< Updated upstream
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
=======
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005168:	4313      	orrs	r3, r2
 800516a:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
    }
  }

  return status;
<<<<<<< Updated upstream
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_Base_Init>:
=======
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e049      	b.n	8004804 <HAL_TIM_Base_Init+0xa6>
=======
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e049      	b.n	800521c <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc f82f 	bl	80007e8 <HAL_TIM_Base_MspInit>
=======
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fb fcdf 	bl	8000b60 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f000 f9cb 	bl	8004b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_Base_Start_IT>:
=======
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 ffbf 	bl	8006138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
=======
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e036      	b.n	8004892 <HAL_TIM_Base_Start_IT+0x86>
=======
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e036      	b.n	80052aa <HAL_TIM_Base_Start_IT+0x86>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_TIM_Base_Start_IT+0x94>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x44>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d115      	bne.n	800487c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_TIM_Base_Start_IT+0x98>)
 8004858:	4013      	ands	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b06      	cmp	r3, #6
 8004860:	d015      	beq.n	800488e <HAL_TIM_Base_Start_IT+0x82>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d011      	beq.n	800488e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487a:	e008      	b.n	800488e <HAL_TIM_Base_Start_IT+0x82>
=======
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <HAL_TIM_Base_Start_IT+0x94>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x44>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d115      	bne.n	8005294 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_TIM_Base_Start_IT+0x98>)
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d015      	beq.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d011      	beq.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	e008      	b.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e000      	b.n	8004890 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	bf00      	nop
=======
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	00010007 	.word	0x00010007

080048a8 <HAL_TIM_IRQHandler>:
=======
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e049      	b.n	8005366 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f841 	bl	800536e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 ff1a 	bl	8006138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e03c      	b.n	800542a <HAL_TIM_PWM_Start_DMA+0xa6>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d109      	bne.n	80053ca <HAL_TIM_PWM_Start_DMA+0x46>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e02f      	b.n	800542a <HAL_TIM_PWM_Start_DMA+0xa6>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d109      	bne.n	80053e4 <HAL_TIM_PWM_Start_DMA+0x60>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e022      	b.n	800542a <HAL_TIM_PWM_Start_DMA+0xa6>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d109      	bne.n	80053fe <HAL_TIM_PWM_Start_DMA+0x7a>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	e015      	b.n	800542a <HAL_TIM_PWM_Start_DMA+0xa6>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b10      	cmp	r3, #16
 8005402:	d109      	bne.n	8005418 <HAL_TIM_PWM_Start_DMA+0x94>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e008      	b.n	800542a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
 8005430:	e188      	b.n	8005744 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e03c      	b.n	80054c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d109      	bne.n	8005466 <HAL_TIM_PWM_Start_DMA+0xe2>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e02f      	b.n	80054c6 <HAL_TIM_PWM_Start_DMA+0x142>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d109      	bne.n	8005480 <HAL_TIM_PWM_Start_DMA+0xfc>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf0c      	ite	eq
 8005478:	2301      	moveq	r3, #1
 800547a:	2300      	movne	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e022      	b.n	80054c6 <HAL_TIM_PWM_Start_DMA+0x142>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d109      	bne.n	800549a <HAL_TIM_PWM_Start_DMA+0x116>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	e015      	b.n	80054c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b10      	cmp	r3, #16
 800549e:	d109      	bne.n	80054b4 <HAL_TIM_PWM_Start_DMA+0x130>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_PWM_Start_DMA+0x142>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d034      	beq.n	8005534 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_TIM_PWM_Start_DMA+0x152>
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e134      	b.n	8005744 <HAL_TIM_PWM_Start_DMA+0x3c0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start_DMA+0x166>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e8:	e026      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start_DMA+0x176>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f8:	e01e      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start_DMA+0x186>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005508:	e016      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b0c      	cmp	r3, #12
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start_DMA+0x196>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005518:	e00e      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b10      	cmp	r3, #16
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005528:	e006      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005532:	e001      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e105      	b.n	8005744 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }

  switch (Channel)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b0c      	cmp	r3, #12
 800553c:	f200 80ae 	bhi.w	800569c <HAL_TIM_PWM_Start_DMA+0x318>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	0800557d 	.word	0x0800557d
 800554c:	0800569d 	.word	0x0800569d
 8005550:	0800569d 	.word	0x0800569d
 8005554:	0800569d 	.word	0x0800569d
 8005558:	080055c5 	.word	0x080055c5
 800555c:	0800569d 	.word	0x0800569d
 8005560:	0800569d 	.word	0x0800569d
 8005564:	0800569d 	.word	0x0800569d
 8005568:	0800560d 	.word	0x0800560d
 800556c:	0800569d 	.word	0x0800569d
 8005570:	0800569d 	.word	0x0800569d
 8005574:	0800569d 	.word	0x0800569d
 8005578:	08005655 	.word	0x08005655
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	4a72      	ldr	r2, [pc, #456]	; (800574c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	4a71      	ldr	r2, [pc, #452]	; (8005750 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800558a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	4a70      	ldr	r2, [pc, #448]	; (8005754 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005592:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3334      	adds	r3, #52	; 0x34
 80055a0:	461a      	mov	r2, r3
 80055a2:	887b      	ldrh	r3, [r7, #2]
 80055a4:	f7fb ff28 	bl	80013f8 <HAL_DMA_Start_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e0c8      	b.n	8005744 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c0:	60da      	str	r2, [r3, #12]
      break;
 80055c2:	e06e      	b.n	80056a2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	4a60      	ldr	r2, [pc, #384]	; (800574c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	4a5f      	ldr	r2, [pc, #380]	; (8005750 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	4a5e      	ldr	r2, [pc, #376]	; (8005754 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80055da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3338      	adds	r3, #56	; 0x38
 80055e8:	461a      	mov	r2, r3
 80055ea:	887b      	ldrh	r3, [r7, #2]
 80055ec:	f7fb ff04 	bl	80013f8 <HAL_DMA_Start_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0a4      	b.n	8005744 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005608:	60da      	str	r2, [r3, #12]
      break;
 800560a:	e04a      	b.n	80056a2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a4e      	ldr	r2, [pc, #312]	; (800574c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005612:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4a4d      	ldr	r2, [pc, #308]	; (8005750 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800561a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	4a4c      	ldr	r2, [pc, #304]	; (8005754 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005622:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	333c      	adds	r3, #60	; 0x3c
 8005630:	461a      	mov	r2, r3
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	f7fb fee0 	bl	80013f8 <HAL_DMA_Start_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e080      	b.n	8005744 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005650:	60da      	str	r2, [r3, #12]
      break;
 8005652:	e026      	b.n	80056a2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4a3c      	ldr	r2, [pc, #240]	; (800574c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	4a3b      	ldr	r2, [pc, #236]	; (8005750 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005662:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	4a3a      	ldr	r2, [pc, #232]	; (8005754 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800566a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3340      	adds	r3, #64	; 0x40
 8005678:	461a      	mov	r2, r3
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	f7fb febc 	bl	80013f8 <HAL_DMA_Start_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e05c      	b.n	8005744 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005698:	60da      	str	r2, [r3, #12]
      break;
 800569a:	e002      	b.n	80056a2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75fb      	strb	r3, [r7, #23]
      break;
 80056a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d14c      	bne.n	8005742 <HAL_TIM_PWM_Start_DMA+0x3be>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2201      	movs	r2, #1
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 f8bf 	bl	8006834 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a27      	ldr	r2, [pc, #156]	; (8005758 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x350>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a25      	ldr	r2, [pc, #148]	; (800575c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x350>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a24      	ldr	r2, [pc, #144]	; (8005760 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_TIM_PWM_Start_DMA+0x354>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_TIM_PWM_Start_DMA+0x356>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a19      	ldr	r2, [pc, #100]	; (8005758 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIM_PWM_Start_DMA+0x37e>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d115      	bne.n	800572e <HAL_TIM_PWM_Start_DMA+0x3aa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4b16      	ldr	r3, [pc, #88]	; (8005764 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800570a:	4013      	ands	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b06      	cmp	r3, #6
 8005712:	d015      	beq.n	8005740 <HAL_TIM_PWM_Start_DMA+0x3bc>
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571a:	d011      	beq.n	8005740 <HAL_TIM_PWM_Start_DMA+0x3bc>
      {
        __HAL_TIM_ENABLE(htim);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	e008      	b.n	8005740 <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e000      	b.n	8005742 <HAL_TIM_PWM_Start_DMA+0x3be>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	08006029 	.word	0x08006029
 8005750:	080060d1 	.word	0x080060d1
 8005754:	08005f97 	.word	0x08005f97
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800
 8005764:	00010007 	.word	0x00010007

08005768 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b0c      	cmp	r3, #12
 800577a:	d855      	bhi.n	8005828 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	080057b9 	.word	0x080057b9
 8005788:	08005829 	.word	0x08005829
 800578c:	08005829 	.word	0x08005829
 8005790:	08005829 	.word	0x08005829
 8005794:	080057d5 	.word	0x080057d5
 8005798:	08005829 	.word	0x08005829
 800579c:	08005829 	.word	0x08005829
 80057a0:	08005829 	.word	0x08005829
 80057a4:	080057f1 	.word	0x080057f1
 80057a8:	08005829 	.word	0x08005829
 80057ac:	08005829 	.word	0x08005829
 80057b0:	08005829 	.word	0x08005829
 80057b4:	0800580d 	.word	0x0800580d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fb fe8e 	bl	80014ee <HAL_DMA_Abort_IT>
      break;
 80057d2:	e02c      	b.n	800582e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fb fe80 	bl	80014ee <HAL_DMA_Abort_IT>
      break;
 80057ee:	e01e      	b.n	800582e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4618      	mov	r0, r3
 8005806:	f7fb fe72 	bl	80014ee <HAL_DMA_Abort_IT>
      break;
 800580a:	e010      	b.n	800582e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800581a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	4618      	mov	r0, r3
 8005822:	f7fb fe64 	bl	80014ee <HAL_DMA_Abort_IT>
      break;
 8005826:	e002      	b.n	800582e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	bf00      	nop
  }

  if (status == HAL_OK)
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d176      	bne.n	8005922 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2200      	movs	r2, #0
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fff9 	bl	8006834 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a39      	ldr	r2, [pc, #228]	; (800592c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a37      	ldr	r2, [pc, #220]	; (8005930 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a36      	ldr	r2, [pc, #216]	; (8005934 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	f241 1311 	movw	r3, #4369	; 0x1111
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_TIM_PWM_Stop_DMA+0x132>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f240 4344 	movw	r3, #1092	; 0x444
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <HAL_TIM_PWM_Stop_DMA+0x132>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <HAL_TIM_PWM_Stop_DMA+0x162>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	f240 4344 	movw	r3, #1092	; 0x444
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_PWM_Stop_DMA+0x162>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Stop_DMA+0x172>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d8:	e023      	b.n	8005922 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Stop_DMA+0x182>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e8:	e01b      	b.n	8005922 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Stop_DMA+0x192>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f8:	e013      	b.n	8005922 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005908:	e00b      	b.n	8005922 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b10      	cmp	r3, #16
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005918:	e003      	b.n	8005922 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40014400 	.word	0x40014400
 8005934:	40014800 	.word	0x40014800

08005938 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0202 	mvn.w	r2, #2
 80048d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x4a>
=======
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b02      	cmp	r3, #2
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b02      	cmp	r3, #2
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0202 	mvn.w	r2, #2
 8005964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f905 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x56>
=======
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fae3 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8f7 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f908 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
=======
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fad5 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fa fc7b 	bl	8000284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b04      	cmp	r3, #4
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0204 	mvn.w	r2, #4
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x9e>
=======
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0204 	mvn.w	r2, #4
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8db 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xaa>
=======
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fab9 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8cd 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8de 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
=======
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 faab 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fa fc51 	bl	8000284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b08      	cmp	r3, #8
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b08      	cmp	r3, #8
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0208 	mvn.w	r2, #8
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2204      	movs	r2, #4
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0xf2>
=======
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0208 	mvn.w	r2, #8
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2204      	movs	r2, #4
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8b1 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xfe>
=======
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa8f 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8a3 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8b4 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
=======
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa81 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fa fc27 	bl	8000284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d122      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d11b      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0210 	mvn.w	r2, #16
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2208      	movs	r2, #8
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0x146>
=======
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0210 	mvn.w	r2, #16
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2208      	movs	r2, #8
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f887 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0x152>
=======
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa65 	bl	8005f46 <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f879 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f88a 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
=======
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa57 	bl	8005f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fa fbfd 	bl	8000284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10e      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0201 	mvn.w	r2, #1
 8004a24:	611a      	str	r2, [r3, #16]
=======
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d10e      	bne.n	8005abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d107      	bne.n	8005abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0201 	mvn.w	r2, #1
 8005ab4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fb fd90 	bl	800054c <HAL_TIM_PeriodElapsedCallback>
=======
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fa fef4 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d10e      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a50:	611a      	str	r2, [r3, #16]
=======
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d107      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ae0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8de 	bl	8004c14 <HAL_TIMEx_BreakCallback>
=======
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 ffc6 	bl	8006a74 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< Updated upstream
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a66:	d10e      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d107      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a7e:	611a      	str	r2, [r3, #16]
=======
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b0e:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8d1 	bl	8004c28 <HAL_TIMEx_Break2Callback>
=======
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 ffb9 	bl	8006a88 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d10e      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aaa:	611a      	str	r2, [r3, #16]
=======
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d10e      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d107      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b3a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f838 	bl	8004b22 <HAL_TIM_TriggerCallback>
=======
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fa16 	bl	8005f6e <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d10e      	bne.n	8004ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0220 	mvn.w	r2, #32
 8004ad6:	611a      	str	r2, [r3, #16]
=======
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d10e      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d107      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f06f 0220 	mvn.w	r2, #32
 8005b66:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f891 	bl	8004c00 <HAL_TIMEx_CommutCallback>
=======
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 ff79 	bl	8006a60 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e0ff      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b14      	cmp	r3, #20
 8005ba2:	f200 80f0 	bhi.w	8005d86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ba6:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005d87 	.word	0x08005d87
 8005bb4:	08005d87 	.word	0x08005d87
 8005bb8:	08005d87 	.word	0x08005d87
 8005bbc:	08005c41 	.word	0x08005c41
 8005bc0:	08005d87 	.word	0x08005d87
 8005bc4:	08005d87 	.word	0x08005d87
 8005bc8:	08005d87 	.word	0x08005d87
 8005bcc:	08005c83 	.word	0x08005c83
 8005bd0:	08005d87 	.word	0x08005d87
 8005bd4:	08005d87 	.word	0x08005d87
 8005bd8:	08005d87 	.word	0x08005d87
 8005bdc:	08005cc3 	.word	0x08005cc3
 8005be0:	08005d87 	.word	0x08005d87
 8005be4:	08005d87 	.word	0x08005d87
 8005be8:	08005d87 	.word	0x08005d87
 8005bec:	08005d05 	.word	0x08005d05
 8005bf0:	08005d87 	.word	0x08005d87
 8005bf4:	08005d87 	.word	0x08005d87
 8005bf8:	08005d87 	.word	0x08005d87
 8005bfc:	08005d45 	.word	0x08005d45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fafa 	bl	8006200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
      break;
 8005c3e:	e0a5      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fb56 	bl	80062f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      break;
 8005c80:	e084      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fbaf 	bl	80063ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0204 	bic.w	r2, r2, #4
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
      break;
 8005cc0:	e064      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fc07 	bl	80064dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	021a      	lsls	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	61da      	str	r2, [r3, #28]
      break;
 8005d02:	e043      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fc44 	bl	8006598 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0208 	orr.w	r2, r2, #8
 8005d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0204 	bic.w	r2, r2, #4
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d42:	e023      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fc7c 	bl	8006648 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	021a      	lsls	r2, r3, #8
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d84:	e002      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop

08005da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_ConfigClockSource+0x1c>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0b6      	b.n	8005f2a <HAL_TIM_ConfigClockSource+0x18a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	d03e      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0xd8>
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	f200 8087 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e06:	f000 8086 	beq.w	8005f16 <HAL_TIM_ConfigClockSource+0x176>
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0e:	d87f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e10:	2b70      	cmp	r3, #112	; 0x70
 8005e12:	d01a      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0xaa>
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d87b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e18:	2b60      	cmp	r3, #96	; 0x60
 8005e1a:	d050      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x11e>
 8005e1c:	2b60      	cmp	r3, #96	; 0x60
 8005e1e:	d877      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e20:	2b50      	cmp	r3, #80	; 0x50
 8005e22:	d03c      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0xfe>
 8005e24:	2b50      	cmp	r3, #80	; 0x50
 8005e26:	d873      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d058      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x13e>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d86f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e30:	2b30      	cmp	r3, #48	; 0x30
 8005e32:	d064      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15e>
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d86b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d060      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15e>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d867      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05c      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15e>
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d05a      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15e>
 8005e48:	e062      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6899      	ldr	r1, [r3, #8]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f000 fccb 	bl	80067f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	609a      	str	r2, [r3, #8]
      break;
 8005e76:	e04f      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6899      	ldr	r1, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f000 fcb4 	bl	80067f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e9a:	609a      	str	r2, [r3, #8]
      break;
 8005e9c:	e03c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6859      	ldr	r1, [r3, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f000 fc26 	bl	80066fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2150      	movs	r1, #80	; 0x50
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fc7f 	bl	80067ba <TIM_ITRx_SetConfig>
      break;
 8005ebc:	e02c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 fc45 	bl	800675a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2160      	movs	r1, #96	; 0x60
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fc6f 	bl	80067ba <TIM_ITRx_SetConfig>
      break;
 8005edc:	e01c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fc06 	bl	80066fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2140      	movs	r1, #64	; 0x40
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fc5f 	bl	80067ba <TIM_ITRx_SetConfig>
      break;
 8005efc:	e00c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f000 fc56 	bl	80067ba <TIM_ITRx_SetConfig>
      break;
 8005f0e:	e003      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
=======
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_IC_CaptureCallback>:
=======
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
=======
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
=======
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
>>>>>>> Stashed changes
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
=======
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_TIM_TriggerCallback>:
=======
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
=======
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <TIM_Base_SetConfig>:
=======
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d107      	bne.n	8005fbe <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	e02a      	b.n	8006014 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d107      	bne.n	8005fd8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd6:	e01d      	b.n	8006014 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d107      	bne.n	8005ff2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff0:	e010      	b.n	8006014 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d107      	bne.n	800600c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2208      	movs	r2, #8
 8006000:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800600a:	e003      	b.n	8006014 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff ffb4 	bl	8005f82 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d10b      	bne.n	8006058 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d136      	bne.n	80060bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006056:	e031      	b.n	80060bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d10b      	bne.n	800607a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2202      	movs	r2, #2
 8006066:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d125      	bne.n	80060bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006078:	e020      	b.n	80060bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d10b      	bne.n	800609c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2204      	movs	r2, #4
 8006088:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d114      	bne.n	80060bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800609a:	e00f      	b.n	80060bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d10a      	bne.n	80060bc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2208      	movs	r2, #8
 80060aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7fa f8e1 	bl	8000284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	771a      	strb	r2, [r3, #28]
}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d103      	bne.n	80060f0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	771a      	strb	r2, [r3, #28]
 80060ee:	e019      	b.n	8006124 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d103      	bne.n	8006102 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2202      	movs	r2, #2
 80060fe:	771a      	strb	r2, [r3, #28]
 8006100:	e010      	b.n	8006124 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d103      	bne.n	8006114 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2204      	movs	r2, #4
 8006110:	771a      	strb	r2, [r3, #28]
 8006112:	e007      	b.n	8006124 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d102      	bne.n	8006124 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2208      	movs	r2, #8
 8006122:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff ff18 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	771a      	strb	r2, [r3, #28]
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <TIM_Base_SetConfig+0xbc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0x20>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d108      	bne.n	8004b6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <TIM_Base_SetConfig+0xbc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_Base_SetConfig+0x52>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d007      	beq.n	8004b8a <TIM_Base_SetConfig+0x52>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <TIM_Base_SetConfig+0xc0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_Base_SetConfig+0x52>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <TIM_Base_SetConfig+0xc4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d108      	bne.n	8004b9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
=======
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a2a      	ldr	r2, [pc, #168]	; (80061f4 <TIM_Base_SetConfig+0xbc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_Base_SetConfig+0x20>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006156:	d108      	bne.n	800616a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a21      	ldr	r2, [pc, #132]	; (80061f4 <TIM_Base_SetConfig+0xbc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00b      	beq.n	800618a <TIM_Base_SetConfig+0x52>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006178:	d007      	beq.n	800618a <TIM_Base_SetConfig+0x52>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <TIM_Base_SetConfig+0xc0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <TIM_Base_SetConfig+0x52>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <TIM_Base_SetConfig+0xc4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d108      	bne.n	800619c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <TIM_Base_SetConfig+0xbc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <TIM_Base_SetConfig+0xa0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <TIM_Base_SetConfig+0xc0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_Base_SetConfig+0xa0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <TIM_Base_SetConfig+0xc4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d103      	bne.n	8004be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <TIM_Base_SetConfig+0xbc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_Base_SetConfig+0xa0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a0b      	ldr	r2, [pc, #44]	; (80061f8 <TIM_Base_SetConfig+0xc0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_Base_SetConfig+0xa0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <TIM_Base_SetConfig+0xc4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d103      	bne.n	80061e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	615a      	str	r2, [r3, #20]
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <HAL_TIMEx_CommutCallback>:
=======
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	615a      	str	r2, [r3, #20]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0201 	bic.w	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0303 	bic.w	r3, r3, #3
 800623a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 0302 	bic.w	r3, r3, #2
 800624c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a24      	ldr	r2, [pc, #144]	; (80062ec <TIM_OC1_SetConfig+0xec>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_OC1_SetConfig+0x70>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a23      	ldr	r2, [pc, #140]	; (80062f0 <TIM_OC1_SetConfig+0xf0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_OC1_SetConfig+0x70>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a22      	ldr	r2, [pc, #136]	; (80062f4 <TIM_OC1_SetConfig+0xf4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d10c      	bne.n	800628a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 0308 	bic.w	r3, r3, #8
 8006276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 0304 	bic.w	r3, r3, #4
 8006288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a17      	ldr	r2, [pc, #92]	; (80062ec <TIM_OC1_SetConfig+0xec>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC1_SetConfig+0xa2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <TIM_OC1_SetConfig+0xf4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC1_SetConfig+0xa2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <TIM_OC1_SetConfig+0xf0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d111      	bne.n	80062c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40014800 	.word	0x40014800
 80062f4:	40014400 	.word	0x40014400

080062f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0210 	bic.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0320 	bic.w	r3, r3, #32
 8006346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a22      	ldr	r2, [pc, #136]	; (80063e0 <TIM_OC2_SetConfig+0xe8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10d      	bne.n	8006378 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <TIM_OC2_SetConfig+0xe8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <TIM_OC2_SetConfig+0x98>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <TIM_OC2_SetConfig+0xec>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d003      	beq.n	8006390 <TIM_OC2_SetConfig+0x98>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <TIM_OC2_SetConfig+0xf0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d113      	bne.n	80063b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800639e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800

080063ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <TIM_OC3_SetConfig+0xe4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d10d      	bne.n	800646a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <TIM_OC3_SetConfig+0xe4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_OC3_SetConfig+0x96>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <TIM_OC3_SetConfig+0xe8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_OC3_SetConfig+0x96>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <TIM_OC3_SetConfig+0xec>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d113      	bne.n	80064aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	621a      	str	r2, [r3, #32]
}
 80064c4:	bf00      	nop
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800652a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	031b      	lsls	r3, r3, #12
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a14      	ldr	r2, [pc, #80]	; (800658c <TIM_OC4_SetConfig+0xb0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_OC4_SetConfig+0x74>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a13      	ldr	r2, [pc, #76]	; (8006590 <TIM_OC4_SetConfig+0xb4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC4_SetConfig+0x74>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <TIM_OC4_SetConfig+0xb8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d109      	bne.n	8006564 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	019b      	lsls	r3, r3, #6
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40014400 	.word	0x40014400
 8006594:	40014800 	.word	0x40014800

08006598 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a13      	ldr	r2, [pc, #76]	; (800663c <TIM_OC5_SetConfig+0xa4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <TIM_OC5_SetConfig+0x6a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a12      	ldr	r2, [pc, #72]	; (8006640 <TIM_OC5_SetConfig+0xa8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC5_SetConfig+0x6a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a11      	ldr	r2, [pc, #68]	; (8006644 <TIM_OC5_SetConfig+0xac>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d109      	bne.n	8006616 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	621a      	str	r2, [r3, #32]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40014400 	.word	0x40014400
 8006644:	40014800 	.word	0x40014800

08006648 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800668e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	051b      	lsls	r3, r3, #20
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a14      	ldr	r2, [pc, #80]	; (80066f0 <TIM_OC6_SetConfig+0xa8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_OC6_SetConfig+0x6c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <TIM_OC6_SetConfig+0xac>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC6_SetConfig+0x6c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <TIM_OC6_SetConfig+0xb0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d109      	bne.n	80066c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	029b      	lsls	r3, r3, #10
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40014400 	.word	0x40014400
 80066f8:	40014800 	.word	0x40014800

080066fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0201 	bic.w	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f023 030a 	bic.w	r3, r3, #10
 8006738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800675a:	b480      	push	{r7}
 800675c:	b087      	sub	sp, #28
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0210 	bic.w	r2, r3, #16
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	031b      	lsls	r3, r3, #12
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	f043 0307 	orr.w	r3, r3, #7
 80067e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800680e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	021a      	lsls	r2, r3, #8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	431a      	orrs	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4313      	orrs	r3, r2
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2201      	movs	r2, #1
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006894:	2302      	movs	r3, #2
 8006896:	e04a      	b.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1f      	ldr	r2, [pc, #124]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d108      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a12      	ldr	r2, [pc, #72]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006900:	d10c      	bne.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4313      	orrs	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00

08006940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006958:	2302      	movs	r3, #2
 800695a:	e078      	b.n	8006a4e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d106      	bne.n	80069ee <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1a      	ldr	r2, [pc, #104]	; (8006a5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d121      	bne.n	8006a3c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a0c      	ldr	r2, [pc, #48]	; (8006a5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d106      	bne.n	8006a3c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40012c00 	.word	0x40012c00

08006a60 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
=======
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_BreakCallback>:
=======
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
=======
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_Break2Callback>:
=======
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
=======
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USB_EnableGlobalInt>:
=======
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USB_EnableGlobalInt>:
>>>>>>> Stashed changes
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< Updated upstream
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
=======
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
<<<<<<< Updated upstream
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c4c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c50:	60fb      	str	r3, [r7, #12]
=======
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006aac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ab0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
<<<<<<< Updated upstream
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <USB_DisableGlobalInt>:
=======
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USB_DisableGlobalInt>:
>>>>>>> Stashed changes
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< Updated upstream
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
=======
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< Updated upstream
 8004c72:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c76:	60fb      	str	r3, [r7, #12]
=======
 8006ad2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ad6:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< Updated upstream
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	4013      	ands	r3, r2
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_DevInit>:
=======
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	4013      	ands	r3, r2
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_DevInit>:
>>>>>>> Stashed changes
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< Updated upstream
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	f107 0014 	add.w	r0, r7, #20
 8004cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 8006b00:	b084      	sub	sp, #16
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	f107 0014 	add.w	r0, r7, #20
 8006b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< Updated upstream
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	b004      	add	sp, #16
 8004ce0:	4770      	bx	lr
	...

08004ce4 <USB_ActivateEndpoint>:
=======
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	b004      	add	sp, #16
 8006b40:	4770      	bx	lr
	...

08006b44 <USB_ActivateEndpoint>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 8004ce4:	b480      	push	{r7}
 8004ce6:	b09d      	sub	sp, #116	; 0x74
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	78db      	ldrb	r3, [r3, #3]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d81f      	bhi.n	8004d56 <USB_ActivateEndpoint+0x72>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <USB_ActivateEndpoint+0x38>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d5f 	.word	0x08004d5f
 8004d28:	08004d3b 	.word	0x08004d3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d38:	e012      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>
=======
 8006b44:	b480      	push	{r7}
 8006b46:	b09d      	sub	sp, #116	; 0x74
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	78db      	ldrb	r3, [r3, #3]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d81f      	bhi.n	8006bb6 <USB_ActivateEndpoint+0x72>
 8006b76:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <USB_ActivateEndpoint+0x38>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006b8d 	.word	0x08006b8d
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006bbf 	.word	0x08006bbf
 8006b88:	08006b9b 	.word	0x08006b9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006b8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006b98:	e012      	b.n	8006bc0 <USB_ActivateEndpoint+0x7c>
>>>>>>> Stashed changes
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
<<<<<<< Updated upstream
 8004d3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d46:	e00b      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d54:	e004      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004d5c:	e000      	b.n	8004d60 <USB_ActivateEndpoint+0x7c>
      break;
 8004d5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	441a      	add	r2, r3
 8004d6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	b21b      	sxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	b21a      	sxth	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	b21b      	sxth	r3, r3
 8004da6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	7b1b      	ldrb	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 8178 	bne.w	80050c6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8084 	beq.w	8004ee8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	4413      	add	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	00da      	lsls	r2, r3, #3
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	88db      	ldrh	r3, [r3, #6]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	827b      	strh	r3, [r7, #18]
 8004e22:	8a7b      	ldrh	r3, [r7, #18]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01b      	beq.n	8004e64 <USB_ActivateEndpoint+0x180>
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	823b      	strh	r3, [r7, #16]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	8a3b      	ldrh	r3, [r7, #16]
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d020      	beq.n	8004eae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e82:	81bb      	strh	r3, [r7, #12]
 8004e84:	89bb      	ldrh	r3, [r7, #12]
 8004e86:	f083 0320 	eor.w	r3, r3, #32
 8004e8a:	81bb      	strh	r3, [r7, #12]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	89bb      	ldrh	r3, [r7, #12]
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]
 8004eac:	e2d5      	b.n	800545a <USB_ActivateEndpoint+0x776>
=======
 8006b9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006b9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006ba2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006ba6:	e00b      	b.n	8006bc0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ba8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006bb4:	e004      	b.n	8006bc0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006bbc:	e000      	b.n	8006bc0 <USB_ActivateEndpoint+0x7c>
      break;
 8006bbe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	b21a      	sxth	r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	b21b      	sxth	r3, r3
 8006c02:	4313      	orrs	r3, r2
 8006c04:	b21b      	sxth	r3, r3
 8006c06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	7b1b      	ldrb	r3, [r3, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 8178 	bne.w	8006f26 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8084 	beq.w	8006d48 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	4413      	add	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	00da      	lsls	r2, r3, #3
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	88db      	ldrh	r3, [r3, #6]
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	827b      	strh	r3, [r7, #18]
 8006c82:	8a7b      	ldrh	r3, [r7, #18]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01b      	beq.n	8006cc4 <USB_ActivateEndpoint+0x180>
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca2:	823b      	strh	r3, [r7, #16]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	8a3b      	ldrh	r3, [r7, #16]
 8006cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	78db      	ldrb	r3, [r3, #3]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d020      	beq.n	8006d0e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce2:	81bb      	strh	r3, [r7, #12]
 8006ce4:	89bb      	ldrh	r3, [r7, #12]
 8006ce6:	f083 0320 	eor.w	r3, r3, #32
 8006cea:	81bb      	strh	r3, [r7, #12]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	89bb      	ldrh	r3, [r7, #12]
 8006cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	8013      	strh	r3, [r2, #0]
 8006d0c:	e2d5      	b.n	80072ba <USB_ActivateEndpoint+0x776>
>>>>>>> Stashed changes
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< Updated upstream
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec4:	81fb      	strh	r3, [r7, #14]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
 8004ee6:	e2b8      	b.n	800545a <USB_ActivateEndpoint+0x776>
=======
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d24:	81fb      	strh	r3, [r7, #14]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e2b8      	b.n	80072ba <USB_ActivateEndpoint+0x776>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
<<<<<<< Updated upstream
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	4413      	add	r3, r2
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	00da      	lsls	r2, r3, #3
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	4413      	add	r3, r2
 8004f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	88db      	ldrh	r3, [r3, #6]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	4413      	add	r3, r2
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	00da      	lsls	r2, r3, #3
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b3e      	cmp	r3, #62	; 0x3e
 8004f56:	d91d      	bls.n	8004f94 <USB_ActivateEndpoint+0x2b0>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <USB_ActivateEndpoint+0x28e>
 8004f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	029b      	lsls	r3, r3, #10
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e026      	b.n	8004fe2 <USB_ActivateEndpoint+0x2fe>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <USB_ActivateEndpoint+0x2ce>
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	e017      	b.n	8004fe2 <USB_ActivateEndpoint+0x2fe>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <USB_ActivateEndpoint+0x2e8>
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc8:	3301      	adds	r3, #1
 8004fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	029b      	lsls	r3, r3, #10
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01b      	beq.n	8005032 <USB_ActivateEndpoint+0x34e>
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	843b      	strh	r3, [r7, #32]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	8c3b      	ldrh	r3, [r7, #32]
 800501e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800502a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502e:	b29b      	uxth	r3, r3
 8005030:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d124      	bne.n	8005084 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	83bb      	strh	r3, [r7, #28]
 8005052:	8bbb      	ldrh	r3, [r7, #28]
 8005054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005058:	83bb      	strh	r3, [r7, #28]
 800505a:	8bbb      	ldrh	r3, [r7, #28]
 800505c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005060:	83bb      	strh	r3, [r7, #28]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8bbb      	ldrh	r3, [r7, #28]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e1ea      	b.n	800545a <USB_ActivateEndpoint+0x776>
=======
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	4413      	add	r3, r2
 8006d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	00da      	lsls	r2, r3, #3
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	4413      	add	r3, r2
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	00da      	lsls	r2, r3, #3
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	4413      	add	r3, r2
 8006d9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b3e      	cmp	r3, #62	; 0x3e
 8006db6:	d91d      	bls.n	8006df4 <USB_ActivateEndpoint+0x2b0>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <USB_ActivateEndpoint+0x28e>
 8006dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	029b      	lsls	r3, r3, #10
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	4313      	orrs	r3, r2
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	e026      	b.n	8006e42 <USB_ActivateEndpoint+0x2fe>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <USB_ActivateEndpoint+0x2ce>
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	e017      	b.n	8006e42 <USB_ActivateEndpoint+0x2fe>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <USB_ActivateEndpoint+0x2e8>
 8006e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e28:	3301      	adds	r3, #1
 8006e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01b      	beq.n	8006e92 <USB_ActivateEndpoint+0x34e>
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e70:	843b      	strh	r3, [r7, #32]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	8c3b      	ldrh	r3, [r7, #32]
 8006e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d124      	bne.n	8006ee4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb0:	83bb      	strh	r3, [r7, #28]
 8006eb2:	8bbb      	ldrh	r3, [r7, #28]
 8006eb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eb8:	83bb      	strh	r3, [r7, #28]
 8006eba:	8bbb      	ldrh	r3, [r7, #28]
 8006ebc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ec0:	83bb      	strh	r3, [r7, #28]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	441a      	add	r2, r3
 8006ecc:	8bbb      	ldrh	r3, [r7, #28]
 8006ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	8013      	strh	r3, [r2, #0]
 8006ee2:	e1ea      	b.n	80072ba <USB_ActivateEndpoint+0x776>
>>>>>>> Stashed changes
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
<<<<<<< Updated upstream
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	83fb      	strh	r3, [r7, #30]
 800509c:	8bfb      	ldrh	r3, [r7, #30]
 800509e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050a2:	83fb      	strh	r3, [r7, #30]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8bfb      	ldrh	r3, [r7, #30]
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
 80050c4:	e1c9      	b.n	800545a <USB_ActivateEndpoint+0x776>
=======
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efa:	83fb      	strh	r3, [r7, #30]
 8006efc:	8bfb      	ldrh	r3, [r7, #30]
 8006efe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f02:	83fb      	strh	r3, [r7, #30]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	8bfb      	ldrh	r3, [r7, #30]
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]
 8006f24:	e1c9      	b.n	80072ba <USB_ActivateEndpoint+0x776>
>>>>>>> Stashed changes
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	78db      	ldrb	r3, [r3, #3]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d11e      	bne.n	800510c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
 800510a:	e01d      	b.n	8005148 <USB_ActivateEndpoint+0x464>
=======
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	78db      	ldrb	r3, [r3, #3]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d11e      	bne.n	8006f6c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f44:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	441a      	add	r2, r3
 8006f52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]
 8006f6a:	e01d      	b.n	8006fa8 <USB_ActivateEndpoint+0x464>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
<<<<<<< Updated upstream
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005144:	b29b      	uxth	r3, r3
 8005146:	8013      	strh	r3, [r2, #0]
=======
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
<<<<<<< Updated upstream
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005158:	4413      	add	r3, r2
 800515a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	00da      	lsls	r2, r3, #3
 8005162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005164:	4413      	add	r3, r2
 8005166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516a:	65bb      	str	r3, [r7, #88]	; 0x58
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	891b      	ldrh	r3, [r3, #8]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	b29b      	uxth	r3, r3
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518c:	4413      	add	r3, r2
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00da      	lsls	r2, r3, #3
 8005196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005198:	4413      	add	r3, r2
 800519a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	895b      	ldrh	r3, [r3, #10]
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 8093 	bne.w	80052e0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01b      	beq.n	800520e <USB_ActivateEndpoint+0x52a>
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800521c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <USB_ActivateEndpoint+0x57a>
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005274:	873b      	strh	r3, [r7, #56]	; 0x38
 8005276:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005278:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800527c:	873b      	strh	r3, [r7, #56]	; 0x38
 800527e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005280:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005284:	873b      	strh	r3, [r7, #56]	; 0x38
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	441a      	add	r2, r3
 8005290:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800529a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
 80052de:	e0bc      	b.n	800545a <USB_ActivateEndpoint+0x776>
=======
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb8:	4413      	add	r3, r2
 8006fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	00da      	lsls	r2, r3, #3
 8006fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	891b      	ldrh	r3, [r3, #8]
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fec:	4413      	add	r3, r2
 8006fee:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	00da      	lsls	r2, r3, #3
 8006ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	895b      	ldrh	r3, [r3, #10]
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	b29b      	uxth	r3, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f040 8093 	bne.w	8007140 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800702a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800702e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d01b      	beq.n	800706e <USB_ActivateEndpoint+0x52a>
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800705a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800705e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706a:	b29b      	uxth	r3, r3
 800706c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800707c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800707e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01b      	beq.n	80070be <USB_ActivateEndpoint+0x57a>
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	441a      	add	r2, r3
 80070a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80070aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80070d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80070d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80070de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80070e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	441a      	add	r2, r3
 80070f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80070f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007102:	b29b      	uxth	r3, r3
 8007104:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]
 800713e:	e0bc      	b.n	80072ba <USB_ActivateEndpoint+0x776>
>>>>>>> Stashed changes
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80052f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01d      	beq.n	8005338 <USB_ActivateEndpoint+0x654>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005348:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01d      	beq.n	8005390 <USB_ActivateEndpoint+0x6ac>
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	441a      	add	r2, r3
 8005378:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800537c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d024      	beq.n	80053e2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053b6:	f083 0320 	eor.w	r3, r3, #32
 80053ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
 80053e0:	e01d      	b.n	800541e <USB_ActivateEndpoint+0x73a>
=======
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01d      	beq.n	8007198 <USB_ActivateEndpoint+0x654>
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	441a      	add	r2, r3
 8007180:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80071a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01d      	beq.n	80071f0 <USB_ActivateEndpoint+0x6ac>
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	441a      	add	r2, r3
 80071d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	78db      	ldrb	r3, [r3, #3]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d024      	beq.n	8007242 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800720a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007212:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007216:	f083 0320 	eor.w	r3, r3, #32
 800721a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	441a      	add	r2, r3
 8007228:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800722c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723c:	b29b      	uxth	r3, r3
 800723e:	8013      	strh	r3, [r2, #0]
 8007240:	e01d      	b.n	800727e <USB_ActivateEndpoint+0x73a>
>>>>>>> Stashed changes
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< Updated upstream
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800540a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]
=======
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007258:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007294:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80072a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
<<<<<<< Updated upstream
 800545a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800545e:	4618      	mov	r0, r3
 8005460:	3774      	adds	r7, #116	; 0x74
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop

0800546c <USB_DeactivateEndpoint>:
=======
 80072ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3774      	adds	r7, #116	; 0x74
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop

080072cc <USB_DeactivateEndpoint>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 800546c:	b480      	push	{r7}
 800546e:	b08d      	sub	sp, #52	; 0x34
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	7b1b      	ldrb	r3, [r3, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 808e 	bne.w	800559c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d044      	beq.n	8005512 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	81bb      	strh	r3, [r7, #12]
 8005496:	89bb      	ldrh	r3, [r7, #12]
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <USB_DeactivateEndpoint+0x6c>
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	817b      	strh	r3, [r7, #10]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	813b      	strh	r3, [r7, #8]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	893b      	ldrh	r3, [r7, #8]
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
 8005510:	e192      	b.n	8005838 <USB_DeactivateEndpoint+0x3cc>
=======
 80072cc:	b480      	push	{r7}
 80072ce:	b08d      	sub	sp, #52	; 0x34
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	7b1b      	ldrb	r3, [r3, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 808e 	bne.w	80073fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d044      	beq.n	8007372 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	81bb      	strh	r3, [r7, #12]
 80072f6:	89bb      	ldrh	r3, [r7, #12]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <USB_DeactivateEndpoint+0x6c>
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	817b      	strh	r3, [r7, #10]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	897b      	ldrh	r3, [r7, #10]
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734e:	813b      	strh	r3, [r7, #8]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	893b      	ldrh	r3, [r7, #8]
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]
 8007370:	e192      	b.n	8007698 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> Stashed changes
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	827b      	strh	r3, [r7, #18]
 8005520:	8a7b      	ldrh	r3, [r7, #18]
 8005522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01b      	beq.n	8005562 <USB_DeactivateEndpoint+0xf6>
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	823b      	strh	r3, [r7, #16]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	8a3b      	ldrh	r3, [r7, #16]
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800555a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	81fb      	strh	r3, [r7, #14]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
 800559a:	e14d      	b.n	8005838 <USB_DeactivateEndpoint+0x3cc>
=======
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	827b      	strh	r3, [r7, #18]
 8007380:	8a7b      	ldrh	r3, [r7, #18]
 8007382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01b      	beq.n	80073c2 <USB_DeactivateEndpoint+0xf6>
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	823b      	strh	r3, [r7, #16]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	8a3b      	ldrh	r3, [r7, #16]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	81fb      	strh	r3, [r7, #14]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	89fb      	ldrh	r3, [r7, #14]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
 80073fa:	e14d      	b.n	8007698 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> Stashed changes
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
<<<<<<< Updated upstream
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 80a5 	bne.w	80056f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	843b      	strh	r3, [r7, #32]
 80055b4:	8c3b      	ldrh	r3, [r7, #32]
 80055b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01b      	beq.n	80055f6 <USB_DeactivateEndpoint+0x18a>
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	83fb      	strh	r3, [r7, #30]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	441a      	add	r2, r3
 80055e0:	8bfb      	ldrh	r3, [r7, #30]
 80055e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	83bb      	strh	r3, [r7, #28]
 8005604:	8bbb      	ldrh	r3, [r7, #28]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01b      	beq.n	8005646 <USB_DeactivateEndpoint+0x1da>
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	837b      	strh	r3, [r7, #26]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	8b7b      	ldrh	r3, [r7, #26]
 8005632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005642:	b29b      	uxth	r3, r3
 8005644:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565c:	833b      	strh	r3, [r7, #24]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8b3b      	ldrh	r3, [r7, #24]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	82fb      	strh	r3, [r7, #22]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	8afb      	ldrh	r3, [r7, #22]
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056cc:	82bb      	strh	r3, [r7, #20]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8abb      	ldrh	r3, [r7, #20]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]
 80056ee:	e0a3      	b.n	8005838 <USB_DeactivateEndpoint+0x3cc>
=======
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 80a5 	bne.w	8007550 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	843b      	strh	r3, [r7, #32]
 8007414:	8c3b      	ldrh	r3, [r7, #32]
 8007416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01b      	beq.n	8007456 <USB_DeactivateEndpoint+0x18a>
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	83fb      	strh	r3, [r7, #30]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	441a      	add	r2, r3
 8007440:	8bfb      	ldrh	r3, [r7, #30]
 8007442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800744e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007452:	b29b      	uxth	r3, r3
 8007454:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	83bb      	strh	r3, [r7, #28]
 8007464:	8bbb      	ldrh	r3, [r7, #28]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01b      	beq.n	80074a6 <USB_DeactivateEndpoint+0x1da>
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	837b      	strh	r3, [r7, #26]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	8b7b      	ldrh	r3, [r7, #26]
 8007492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074bc:	833b      	strh	r3, [r7, #24]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	441a      	add	r2, r3
 80074c8:	8b3b      	ldrh	r3, [r7, #24]
 80074ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074da:	b29b      	uxth	r3, r3
 80074dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f4:	82fb      	strh	r3, [r7, #22]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	441a      	add	r2, r3
 8007500:	8afb      	ldrh	r3, [r7, #22]
 8007502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007512:	b29b      	uxth	r3, r3
 8007514:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752c:	82bb      	strh	r3, [r7, #20]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	441a      	add	r2, r3
 8007538:	8abb      	ldrh	r3, [r7, #20]
 800753a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754a:	b29b      	uxth	r3, r3
 800754c:	8013      	strh	r3, [r2, #0]
 800754e:	e0a3      	b.n	8007698 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> Stashed changes
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01b      	beq.n	8005740 <USB_DeactivateEndpoint+0x2d4>
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800572c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800574e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <USB_DeactivateEndpoint+0x324>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	847b      	strh	r3, [r7, #34]	; 0x22
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
=======
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800755e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01b      	beq.n	80075a0 <USB_DeactivateEndpoint+0x2d4>
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	441a      	add	r2, r3
 800758a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800758c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	b29b      	uxth	r3, r3
 800759e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80075ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01b      	beq.n	80075f0 <USB_DeactivateEndpoint+0x324>
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	441a      	add	r2, r3
 80075da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	441a      	add	r2, r3
 8007612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800764c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765c:	b29b      	uxth	r3, r3
 800765e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	847b      	strh	r3, [r7, #34]	; 0x22
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	b29b      	uxth	r3, r3
 8007696:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< Updated upstream
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3734      	adds	r7, #52	; 0x34
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_EPStartXfer>:
=======
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3734      	adds	r7, #52	; 0x34
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_EPStartXfer>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 8005846:	b580      	push	{r7, lr}
 8005848:	b0c2      	sub	sp, #264	; 0x108
 800584a:	af00      	add	r7, sp, #0
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005854:	6018      	str	r0, [r3, #0]
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	6019      	str	r1, [r3, #0]
=======
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b0c2      	sub	sp, #264	; 0x108
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b4:	6018      	str	r0, [r3, #0]
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076be:	6019      	str	r1, [r3, #0]
>>>>>>> Stashed changes
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< Updated upstream
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b01      	cmp	r3, #1
 800586e:	f040 86b7 	bne.w	80065e0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	429a      	cmp	r2, r3
 800588c:	d908      	bls.n	80058a0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800589e:	e007      	b.n	80058b0 <USB_EPStartXfer+0x6a>
=======
 80076c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	f040 86b7 	bne.w	8008440 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80076d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d908      	bls.n	8007700 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80076ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076fe:	e007      	b.n	8007710 <USB_EPStartXfer+0x6a>
>>>>>>> Stashed changes
    }
    else
    {
      len = ep->xfer_len;
<<<<<<< Updated upstream
 80058a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
=======
 8007700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
>>>>>>> Stashed changes
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
<<<<<<< Updated upstream
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	7b1b      	ldrb	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d13a      	bne.n	8005936 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6959      	ldr	r1, [r3, #20]
 80058cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	88da      	ldrh	r2, [r3, #6]
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	f001 fc98 	bl	800721c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00da      	lsls	r2, r3, #3
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	f000 be1f 	b.w	8006574 <USB_EPStartXfer+0xd2e>
=======
 8007710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	7b1b      	ldrb	r3, [r3, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d13a      	bne.n	8007796 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6959      	ldr	r1, [r3, #20]
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	88da      	ldrh	r2, [r3, #6]
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773c:	b29b      	uxth	r3, r3
 800773e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007742:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007746:	6800      	ldr	r0, [r0, #0]
 8007748:	f001 fc98 	bl	800907c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800774c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007766:	b29b      	uxth	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	4413      	add	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	00da      	lsls	r2, r3, #3
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4413      	add	r3, r2
 8007782:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	f000 be1f 	b.w	80083d4 <USB_EPStartXfer+0xd2e>
>>>>>>> Stashed changes
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 8005936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	78db      	ldrb	r3, [r3, #3]
 8005942:	2b02      	cmp	r3, #2
 8005944:	f040 8462 	bne.w	800620c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	f240 83df 	bls.w	8006124 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80059c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a1a      	ldr	r2, [r3, #32]
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 81c7 	beq.w	8005d96 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
 8005a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d177      	bne.n	8005b14 <USB_EPStartXfer+0x2ce>
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	4413      	add	r3, r2
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a74:	2b3e      	cmp	r3, #62	; 0x3e
 8005a76:	d921      	bls.n	8005abc <USB_EPStartXfer+0x276>
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <USB_EPStartXfer+0x252>
 8005a8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a92:	3b01      	subs	r3, #1
 8005a94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e050      	b.n	8005b5e <USB_EPStartXfer+0x318>
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <USB_EPStartXfer+0x294>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e041      	b.n	8005b5e <USB_EPStartXfer+0x318>
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <USB_EPStartXfer+0x2b4>
 8005af0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005af4:	3301      	adds	r3, #1
 8005af6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e024      	b.n	8005b5e <USB_EPStartXfer+0x318>
 8005b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d11c      	bne.n	8005b5e <USB_EPStartXfer+0x318>
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	4413      	add	r3, r2
 8005b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	00da      	lsls	r2, r3, #3
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	895b      	ldrh	r3, [r3, #10]
 8005b6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6959      	ldr	r1, [r3, #20]
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f001 fb45 	bl	800721c <USB_WritePMA>
            ep->xfer_buff += len;
 8005b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba2:	441a      	add	r2, r3
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d90f      	bls.n	8005bec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	621a      	str	r2, [r3, #32]
 8005bea:	e00e      	b.n	8005c0a <USB_EPStartXfer+0x3c4>
=======
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	78db      	ldrb	r3, [r3, #3]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	f040 8462 	bne.w	800806c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80077a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6a1a      	ldr	r2, [r3, #32]
 80077b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	f240 83df 	bls.w	8007f84 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80077c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	441a      	add	r2, r3
 800780a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800780e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007816:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800781a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781e:	b29b      	uxth	r3, r3
 8007820:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a1a      	ldr	r2, [r3, #32]
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 81c7 	beq.w	8007bf6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	633b      	str	r3, [r7, #48]	; 0x30
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d177      	bne.n	8007974 <USB_EPStartXfer+0x2ce>
 8007884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	4413      	add	r3, r2
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	00da      	lsls	r2, r3, #3
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	4413      	add	r3, r2
 80078ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d4:	2b3e      	cmp	r3, #62	; 0x3e
 80078d6:	d921      	bls.n	800791c <USB_EPStartXfer+0x276>
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <USB_EPStartXfer+0x252>
 80078ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078f2:	3b01      	subs	r3, #1
 80078f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007902:	b29b      	uxth	r3, r3
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	b29b      	uxth	r3, r3
 8007908:	4313      	orrs	r3, r2
 800790a:	b29b      	uxth	r3, r3
 800790c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007914:	b29a      	uxth	r2, r3
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	e050      	b.n	80079be <USB_EPStartXfer+0x318>
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <USB_EPStartXfer+0x294>
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800792e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007932:	b29a      	uxth	r2, r3
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	801a      	strh	r2, [r3, #0]
 8007938:	e041      	b.n	80079be <USB_EPStartXfer+0x318>
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793e:	085b      	lsrs	r3, r3, #1
 8007940:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <USB_EPStartXfer+0x2b4>
 8007950:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007954:	3301      	adds	r3, #1
 8007956:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007964:	b29b      	uxth	r3, r3
 8007966:	029b      	lsls	r3, r3, #10
 8007968:	b29b      	uxth	r3, r3
 800796a:	4313      	orrs	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	e024      	b.n	80079be <USB_EPStartXfer+0x318>
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d11c      	bne.n	80079be <USB_EPStartXfer+0x318>
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	4413      	add	r3, r2
 800799a:	633b      	str	r3, [r7, #48]	; 0x30
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	00da      	lsls	r2, r3, #3
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	4413      	add	r3, r2
 80079ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	895b      	ldrh	r3, [r3, #10]
 80079ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6959      	ldr	r1, [r3, #20]
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80079e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f001 fb45 	bl	800907c <USB_WritePMA>
            ep->xfer_buff += len;
 80079f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695a      	ldr	r2, [r3, #20]
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a02:	441a      	add	r2, r3
 8007a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d90f      	bls.n	8007a4c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3c:	1ad2      	subs	r2, r2, r3
 8007a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	621a      	str	r2, [r3, #32]
 8007a4a:	e00e      	b.n	8007a6a <USB_EPStartXfer+0x3c4>
>>>>>>> Stashed changes
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< Updated upstream
 8005bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	621a      	str	r2, [r3, #32]
=======
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d177      	bne.n	8005d0a <USB_EPStartXfer+0x4c4>
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	00da      	lsls	r2, r3, #3
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6c:	d921      	bls.n	8005cb2 <USB_EPStartXfer+0x46c>
 8005c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <USB_EPStartXfer+0x448>
 8005c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	e056      	b.n	8005d60 <USB_EPStartXfer+0x51a>
 8005cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <USB_EPStartXfer+0x48a>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	e047      	b.n	8005d60 <USB_EPStartXfer+0x51a>
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <USB_EPStartXfer+0x4aa>
 8005ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cea:	3301      	adds	r3, #1
 8005cec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	029b      	lsls	r3, r3, #10
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e02a      	b.n	8005d60 <USB_EPStartXfer+0x51a>
 8005d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d122      	bne.n	8005d60 <USB_EPStartXfer+0x51a>
 8005d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	00da      	lsls	r2, r3, #3
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	891b      	ldrh	r3, [r3, #8]
 8005d6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6959      	ldr	r1, [r3, #20]
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	f001 fa44 	bl	800721c <USB_WritePMA>
 8005d94:	e3ee      	b.n	8006574 <USB_EPStartXfer+0xd2e>
=======
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d177      	bne.n	8007b6a <USB_EPStartXfer+0x4c4>
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	00da      	lsls	r2, r3, #3
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	801a      	strh	r2, [r3, #0]
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aca:	2b3e      	cmp	r3, #62	; 0x3e
 8007acc:	d921      	bls.n	8007b12 <USB_EPStartXfer+0x46c>
 8007ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007adc:	f003 031f 	and.w	r3, r3, #31
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <USB_EPStartXfer+0x448>
 8007ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	029b      	lsls	r3, r3, #10
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	4313      	orrs	r3, r2
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	e056      	b.n	8007bc0 <USB_EPStartXfer+0x51a>
 8007b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <USB_EPStartXfer+0x48a>
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e047      	b.n	8007bc0 <USB_EPStartXfer+0x51a>
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <USB_EPStartXfer+0x4aa>
 8007b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	029b      	lsls	r3, r3, #10
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	e02a      	b.n	8007bc0 <USB_EPStartXfer+0x51a>
 8007b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d122      	bne.n	8007bc0 <USB_EPStartXfer+0x51a>
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	623b      	str	r3, [r7, #32]
 8007b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	623b      	str	r3, [r7, #32]
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	00da      	lsls	r2, r3, #3
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	891b      	ldrh	r3, [r3, #8]
 8007bcc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6959      	ldr	r1, [r3, #20]
 8007bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007be6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007bea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007bee:	6800      	ldr	r0, [r0, #0]
 8007bf0:	f001 fa44 	bl	800907c <USB_WritePMA>
 8007bf4:	e3ee      	b.n	80083d4 <USB_EPStartXfer+0xd2e>
>>>>>>> Stashed changes
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d177      	bne.n	8005e96 <USB_EPStartXfer+0x650>
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc6:	4413      	add	r3, r2
 8005dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	00da      	lsls	r2, r3, #3
 8005dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005de0:	647b      	str	r3, [r7, #68]	; 0x44
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	2b3e      	cmp	r3, #62	; 0x3e
 8005df8:	d921      	bls.n	8005e3e <USB_EPStartXfer+0x5f8>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <USB_EPStartXfer+0x5d4>
 8005e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e14:	3b01      	subs	r3, #1
 8005e16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e056      	b.n	8005eec <USB_EPStartXfer+0x6a6>
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USB_EPStartXfer+0x616>
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e047      	b.n	8005eec <USB_EPStartXfer+0x6a6>
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <USB_EPStartXfer+0x636>
 8005e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e02a      	b.n	8005eec <USB_EPStartXfer+0x6a6>
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d122      	bne.n	8005eec <USB_EPStartXfer+0x6a6>
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec6:	4413      	add	r3, r2
 8005ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	00da      	lsls	r2, r3, #3
 8005ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	891b      	ldrh	r3, [r3, #8]
 8005ef8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6959      	ldr	r1, [r3, #20]
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	f001 f97e 	bl	800721c <USB_WritePMA>
            ep->xfer_buff += len;
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	441a      	add	r2, r3
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d90f      	bls.n	8005f7a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a1a      	ldr	r2, [r3, #32]
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	621a      	str	r2, [r3, #32]
 8005f78:	e00e      	b.n	8005f98 <USB_EPStartXfer+0x752>
=======
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d177      	bne.n	8007cf6 <USB_EPStartXfer+0x650>
 8007c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c26:	4413      	add	r3, r2
 8007c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	00da      	lsls	r2, r3, #3
 8007c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c40:	647b      	str	r3, [r7, #68]	; 0x44
 8007c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c50:	801a      	strh	r2, [r3, #0]
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c56:	2b3e      	cmp	r3, #62	; 0x3e
 8007c58:	d921      	bls.n	8007c9e <USB_EPStartXfer+0x5f8>
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d104      	bne.n	8007c7a <USB_EPStartXfer+0x5d4>
 8007c70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c74:	3b01      	subs	r3, #1
 8007c76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	029b      	lsls	r3, r3, #10
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	e056      	b.n	8007d4c <USB_EPStartXfer+0x6a6>
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <USB_EPStartXfer+0x616>
 8007ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	e047      	b.n	8007d4c <USB_EPStartXfer+0x6a6>
 8007cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc0:	085b      	lsrs	r3, r3, #1
 8007cc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <USB_EPStartXfer+0x636>
 8007cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	029b      	lsls	r3, r3, #10
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	4313      	orrs	r3, r2
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	e02a      	b.n	8007d4c <USB_EPStartXfer+0x6a6>
 8007cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d122      	bne.n	8007d4c <USB_EPStartXfer+0x6a6>
 8007d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	653b      	str	r3, [r7, #80]	; 0x50
 8007d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d26:	4413      	add	r3, r2
 8007d28:	653b      	str	r3, [r7, #80]	; 0x50
 8007d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	00da      	lsls	r2, r3, #3
 8007d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	891b      	ldrh	r3, [r3, #8]
 8007d58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6959      	ldr	r1, [r3, #20]
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	f001 f97e 	bl	800907c <USB_WritePMA>
            ep->xfer_buff += len;
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695a      	ldr	r2, [r3, #20]
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d90:	441a      	add	r2, r3
 8007d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d90f      	bls.n	8007dda <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a1a      	ldr	r2, [r3, #32]
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	621a      	str	r2, [r3, #32]
 8007dd8:	e00e      	b.n	8007df8 <USB_EPStartXfer+0x752>
>>>>>>> Stashed changes
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< Updated upstream
 8005f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2200      	movs	r2, #0
 8005f96:	621a      	str	r2, [r3, #32]
=======
 8007dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2200      	movs	r2, #0
 8007df6:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d177      	bne.n	80060a4 <USB_EPStartXfer+0x85e>
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	4413      	add	r3, r2
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00da      	lsls	r2, r3, #3
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	4413      	add	r3, r2
 8005fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006004:	2b3e      	cmp	r3, #62	; 0x3e
 8006006:	d921      	bls.n	800604c <USB_EPStartXfer+0x806>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <USB_EPStartXfer+0x7e2>
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	3b01      	subs	r3, #1
 8006024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29b      	uxth	r3, r3
 8006038:	4313      	orrs	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006044:	b29a      	uxth	r2, r3
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e050      	b.n	80060ee <USB_EPStartXfer+0x8a8>
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <USB_EPStartXfer+0x824>
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e041      	b.n	80060ee <USB_EPStartXfer+0x8a8>
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <USB_EPStartXfer+0x844>
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	b29b      	uxth	r3, r3
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	b29b      	uxth	r3, r3
 800609a:	4313      	orrs	r3, r2
 800609c:	b29a      	uxth	r2, r3
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e024      	b.n	80060ee <USB_EPStartXfer+0x8a8>
 80060a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11c      	bne.n	80060ee <USB_EPStartXfer+0x8a8>
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c8:	4413      	add	r3, r2
 80060ca:	643b      	str	r3, [r7, #64]	; 0x40
 80060cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	00da      	lsls	r2, r3, #3
 80060da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060dc:	4413      	add	r3, r2
 80060de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	895b      	ldrh	r3, [r3, #10]
 80060fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6959      	ldr	r1, [r3, #20]
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610e:	b29b      	uxth	r3, r3
 8006110:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006114:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006118:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800611c:	6800      	ldr	r0, [r0, #0]
 800611e:	f001 f87d 	bl	800721c <USB_WritePMA>
 8006122:	e227      	b.n	8006574 <USB_EPStartXfer+0xd2e>
=======
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	643b      	str	r3, [r7, #64]	; 0x40
 8007e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d177      	bne.n	8007f04 <USB_EPStartXfer+0x85e>
 8007e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	4413      	add	r3, r2
 8007e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	00da      	lsls	r2, r3, #3
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	4413      	add	r3, r2
 8007e4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5e:	801a      	strh	r2, [r3, #0]
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e64:	2b3e      	cmp	r3, #62	; 0x3e
 8007e66:	d921      	bls.n	8007eac <USB_EPStartXfer+0x806>
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <USB_EPStartXfer+0x7e2>
 8007e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e82:	3b01      	subs	r3, #1
 8007e84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e050      	b.n	8007f4e <USB_EPStartXfer+0x8a8>
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <USB_EPStartXfer+0x824>
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	e041      	b.n	8007f4e <USB_EPStartXfer+0x8a8>
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ece:	085b      	lsrs	r3, r3, #1
 8007ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <USB_EPStartXfer+0x844>
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	029b      	lsls	r3, r3, #10
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	e024      	b.n	8007f4e <USB_EPStartXfer+0x8a8>
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d11c      	bne.n	8007f4e <USB_EPStartXfer+0x8a8>
 8007f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f28:	4413      	add	r3, r2
 8007f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	00da      	lsls	r2, r3, #3
 8007f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	895b      	ldrh	r3, [r3, #10]
 8007f5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6959      	ldr	r1, [r3, #20]
 8007f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f001 f87d 	bl	800907c <USB_WritePMA>
 8007f82:	e227      	b.n	80083d4 <USB_EPStartXfer+0xd2e>
>>>>>>> Stashed changes
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
<<<<<<< Updated upstream
 8006124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800619c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b0:	4413      	add	r3, r2
 80061b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00da      	lsls	r2, r3, #3
 80061c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c4:	4413      	add	r3, r2
 80061c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	891b      	ldrh	r3, [r3, #8]
 80061e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6959      	ldr	r1, [r3, #20]
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006200:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006204:	6800      	ldr	r0, [r0, #0]
 8006206:	f001 f809 	bl	800721c <USB_WritePMA>
 800620a:	e1b3      	b.n	8006574 <USB_EPStartXfer+0xd2e>
=======
 8007f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	441a      	add	r2, r3
 8007fd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800a:	b29b      	uxth	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008010:	4413      	add	r3, r2
 8008012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	00da      	lsls	r2, r3, #3
 8008022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008024:	4413      	add	r3, r2
 8008026:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800802a:	65bb      	str	r3, [r7, #88]	; 0x58
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008030:	b29a      	uxth	r2, r3
 8008032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008034:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	891b      	ldrh	r3, [r3, #8]
 8008042:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6959      	ldr	r1, [r3, #20]
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	b29b      	uxth	r3, r3
 8008058:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800805c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008060:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008064:	6800      	ldr	r0, [r0, #0]
 8008066:	f001 f809 	bl	800907c <USB_WritePMA>
 800806a:	e1b3      	b.n	80083d4 <USB_EPStartXfer+0xd2e>
>>>>>>> Stashed changes
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
<<<<<<< Updated upstream
 800620c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80c6 	beq.w	80063de <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	673b      	str	r3, [r7, #112]	; 0x70
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d177      	bne.n	800635e <USB_EPStartXfer+0xb18>
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	66bb      	str	r3, [r7, #104]	; 0x68
 800627a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006288:	b29b      	uxth	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800628e:	4413      	add	r3, r2
 8006290:	66bb      	str	r3, [r7, #104]	; 0x68
 8006292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	00da      	lsls	r2, r3, #3
 80062a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062a8:	667b      	str	r3, [r7, #100]	; 0x64
 80062aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062be:	2b3e      	cmp	r3, #62	; 0x3e
 80062c0:	d921      	bls.n	8006306 <USB_EPStartXfer+0xac0>
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <USB_EPStartXfer+0xa9c>
 80062d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062dc:	3b01      	subs	r3, #1
 80062de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fe:	b29a      	uxth	r2, r3
 8006300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	e050      	b.n	80063a8 <USB_EPStartXfer+0xb62>
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <USB_EPStartXfer+0xade>
 800630e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631c:	b29a      	uxth	r2, r3
 800631e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	e041      	b.n	80063a8 <USB_EPStartXfer+0xb62>
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <USB_EPStartXfer+0xafe>
 800633a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800633e:	3301      	adds	r3, #1
 8006340:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29a      	uxth	r2, r3
 800634a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800634e:	b29b      	uxth	r3, r3
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	b29b      	uxth	r3, r3
 8006354:	4313      	orrs	r3, r2
 8006356:	b29a      	uxth	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e024      	b.n	80063a8 <USB_EPStartXfer+0xb62>
 800635e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d11c      	bne.n	80063a8 <USB_EPStartXfer+0xb62>
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006382:	4413      	add	r3, r2
 8006384:	673b      	str	r3, [r7, #112]	; 0x70
 8006386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	00da      	lsls	r2, r3, #3
 8006394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006396:	4413      	add	r3, r2
 8006398:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800639c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	895b      	ldrh	r3, [r3, #10]
 80063b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6959      	ldr	r1, [r3, #20]
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	f000 ff20 	bl	800721c <USB_WritePMA>
 80063dc:	e0ca      	b.n	8006574 <USB_EPStartXfer+0xd2e>
=======
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6a1a      	ldr	r2, [r3, #32]
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807c:	1ad2      	subs	r2, r2, r3
 800807e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800808a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80c6 	beq.w	800823e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	673b      	str	r3, [r7, #112]	; 0x70
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d177      	bne.n	80081be <USB_EPStartXfer+0xb18>
 80080ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80080da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080ee:	4413      	add	r3, r2
 80080f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80080f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	00da      	lsls	r2, r3, #3
 8008100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008102:	4413      	add	r3, r2
 8008104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008108:	667b      	str	r3, [r7, #100]	; 0x64
 800810a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008114:	b29a      	uxth	r2, r3
 8008116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008118:	801a      	strh	r2, [r3, #0]
 800811a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811e:	2b3e      	cmp	r3, #62	; 0x3e
 8008120:	d921      	bls.n	8008166 <USB_EPStartXfer+0xac0>
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <USB_EPStartXfer+0xa9c>
 8008138:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800813c:	3b01      	subs	r3, #1
 800813e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800814c:	b29b      	uxth	r3, r3
 800814e:	029b      	lsls	r3, r3, #10
 8008150:	b29b      	uxth	r3, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	b29b      	uxth	r3, r3
 8008156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815e:	b29a      	uxth	r2, r3
 8008160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008162:	801a      	strh	r2, [r3, #0]
 8008164:	e050      	b.n	8008208 <USB_EPStartXfer+0xb62>
 8008166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <USB_EPStartXfer+0xade>
 800816e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817c:	b29a      	uxth	r2, r3
 800817e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008180:	801a      	strh	r2, [r3, #0]
 8008182:	e041      	b.n	8008208 <USB_EPStartXfer+0xb62>
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008188:	085b      	lsrs	r3, r3, #1
 800818a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <USB_EPStartXfer+0xafe>
 800819a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800819e:	3301      	adds	r3, #1
 80081a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	029b      	lsls	r3, r3, #10
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ba:	801a      	strh	r2, [r3, #0]
 80081bc:	e024      	b.n	8008208 <USB_EPStartXfer+0xb62>
 80081be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d11c      	bne.n	8008208 <USB_EPStartXfer+0xb62>
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081dc:	b29b      	uxth	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081e2:	4413      	add	r3, r2
 80081e4:	673b      	str	r3, [r7, #112]	; 0x70
 80081e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	00da      	lsls	r2, r3, #3
 80081f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081f6:	4413      	add	r3, r2
 80081f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008202:	b29a      	uxth	r2, r3
 8008204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008206:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	895b      	ldrh	r3, [r3, #10]
 8008214:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6959      	ldr	r1, [r3, #20]
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008228:	b29b      	uxth	r3, r3
 800822a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800822e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008232:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	f000 ff20 	bl	800907c <USB_WritePMA>
 800823c:	e0ca      	b.n	80083d4 <USB_EPStartXfer+0xd2e>
>>>>>>> Stashed changes
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d177      	bne.n	80064de <USB_EPStartXfer+0xc98>
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640e:	4413      	add	r3, r2
 8006410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006422:	4413      	add	r3, r2
 8006424:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006428:	67bb      	str	r3, [r7, #120]	; 0x78
 800642a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006434:	b29a      	uxth	r2, r3
 8006436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643e:	2b3e      	cmp	r3, #62	; 0x3e
 8006440:	d921      	bls.n	8006486 <USB_EPStartXfer+0xc40>
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <USB_EPStartXfer+0xc1c>
 8006458:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800645c:	3b01      	subs	r3, #1
 800645e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29a      	uxth	r2, r3
 8006468:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800646c:	b29b      	uxth	r3, r3
 800646e:	029b      	lsls	r3, r3, #10
 8006470:	b29b      	uxth	r3, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	b29b      	uxth	r3, r3
 8006476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647e:	b29a      	uxth	r2, r3
 8006480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	e05c      	b.n	8006540 <USB_EPStartXfer+0xcfa>
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <USB_EPStartXfer+0xc5e>
 800648e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e04d      	b.n	8006540 <USB_EPStartXfer+0xcfa>
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <USB_EPStartXfer+0xc7e>
 80064ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064be:	3301      	adds	r3, #1
 80064c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	029b      	lsls	r3, r3, #10
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4313      	orrs	r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e030      	b.n	8006540 <USB_EPStartXfer+0xcfa>
 80064de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d128      	bne.n	8006540 <USB_EPStartXfer+0xcfa>
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006512:	4413      	add	r3, r2
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	00da      	lsls	r2, r3, #3
 8006526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800652a:	4413      	add	r3, r2
 800652c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800653e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	891b      	ldrh	r3, [r3, #8]
 800654c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6959      	ldr	r1, [r3, #20]
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	b29b      	uxth	r3, r3
 8006562:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006566:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800656a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800656e:	6800      	ldr	r0, [r0, #0]
 8006570:	f000 fe54 	bl	800721c <USB_WritePMA>
=======
 800823e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d177      	bne.n	800833e <USB_EPStartXfer+0xc98>
 800824e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	67fb      	str	r3, [r7, #124]	; 0x7c
 800825a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008268:	b29b      	uxth	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800826e:	4413      	add	r3, r2
 8008270:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	00da      	lsls	r2, r3, #3
 8008280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008282:	4413      	add	r3, r2
 8008284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008288:	67bb      	str	r3, [r7, #120]	; 0x78
 800828a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008294:	b29a      	uxth	r2, r3
 8008296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	2b3e      	cmp	r3, #62	; 0x3e
 80082a0:	d921      	bls.n	80082e6 <USB_EPStartXfer+0xc40>
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a6:	095b      	lsrs	r3, r3, #5
 80082a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d104      	bne.n	80082c2 <USB_EPStartXfer+0xc1c>
 80082b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082bc:	3b01      	subs	r3, #1
 80082be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80082c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	029b      	lsls	r3, r3, #10
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	4313      	orrs	r3, r2
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082de:	b29a      	uxth	r2, r3
 80082e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	e05c      	b.n	80083a0 <USB_EPStartXfer+0xcfa>
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <USB_EPStartXfer+0xc5e>
 80082ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e04d      	b.n	80083a0 <USB_EPStartXfer+0xcfa>
 8008304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008308:	085b      	lsrs	r3, r3, #1
 800830a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <USB_EPStartXfer+0xc7e>
 800831a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800831e:	3301      	adds	r3, #1
 8008320:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29a      	uxth	r2, r3
 800832a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800832e:	b29b      	uxth	r3, r3
 8008330:	029b      	lsls	r3, r3, #10
 8008332:	b29b      	uxth	r3, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	b29a      	uxth	r2, r3
 8008338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	e030      	b.n	80083a0 <USB_EPStartXfer+0xcfa>
 800833e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	785b      	ldrb	r3, [r3, #1]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d128      	bne.n	80083a0 <USB_EPStartXfer+0xcfa>
 800834e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800836a:	b29b      	uxth	r3, r3
 800836c:	461a      	mov	r2, r3
 800836e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008372:	4413      	add	r3, r2
 8008374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	00da      	lsls	r2, r3, #3
 8008386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800838a:	4413      	add	r3, r2
 800838c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008398:	b29a      	uxth	r2, r3
 800839a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800839e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	891b      	ldrh	r3, [r3, #8]
 80083ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6959      	ldr	r1, [r3, #20]
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083ce:	6800      	ldr	r0, [r0, #0]
 80083d0:	f000 fe54 	bl	800907c <USB_WritePMA>
>>>>>>> Stashed changes
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
<<<<<<< Updated upstream
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659a:	817b      	strh	r3, [r7, #10]
 800659c:	897b      	ldrh	r3, [r7, #10]
 800659e:	f083 0310 	eor.w	r3, r3, #16
 80065a2:	817b      	strh	r3, [r7, #10]
 80065a4:	897b      	ldrh	r3, [r7, #10]
 80065a6:	f083 0320 	eor.w	r3, r3, #32
 80065aa:	817b      	strh	r3, [r7, #10]
 80065ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	897b      	ldrh	r3, [r7, #10]
 80065c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]
 80065dc:	f000 bcde 	b.w	8006f9c <USB_EPStartXfer+0x1756>
=======
 80083d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fa:	817b      	strh	r3, [r7, #10]
 80083fc:	897b      	ldrh	r3, [r7, #10]
 80083fe:	f083 0310 	eor.w	r3, r3, #16
 8008402:	817b      	strh	r3, [r7, #10]
 8008404:	897b      	ldrh	r3, [r7, #10]
 8008406:	f083 0320 	eor.w	r3, r3, #32
 800840a:	817b      	strh	r3, [r7, #10]
 800840c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	441a      	add	r2, r3
 8008426:	897b      	ldrh	r3, [r7, #10]
 8008428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008438:	b29b      	uxth	r3, r3
 800843a:	8013      	strh	r3, [r2, #0]
 800843c:	f000 bcde 	b.w	8008dfc <USB_EPStartXfer+0x1756>
>>>>>>> Stashed changes
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
<<<<<<< Updated upstream
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	7b1b      	ldrb	r3, [r3, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 80bb 	bne.w	8006768 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d917      	bls.n	800663e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800660e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	619a      	str	r2, [r3, #24]
 800663c:	e00e      	b.n	800665c <USB_EPStartXfer+0xe16>
=======
 8008440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	7b1b      	ldrb	r3, [r3, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f040 80bb 	bne.w	80085c8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699a      	ldr	r2, [r3, #24]
 800845e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	429a      	cmp	r2, r3
 800846c:	d917      	bls.n	800849e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800846e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800847e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	619a      	str	r2, [r3, #24]
 800849c:	e00e      	b.n	80084bc <USB_EPStartXfer+0xe16>
>>>>>>> Stashed changes
      }
      else
      {
        len = ep->xfer_len;
<<<<<<< Updated upstream
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2200      	movs	r2, #0
 800665a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800665c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800666a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006678:	b29b      	uxth	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006680:	4413      	add	r3, r2
 8006682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	00da      	lsls	r2, r3, #3
 8006694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006698:	4413      	add	r3, r2
 800669a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800669e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	2b3e      	cmp	r3, #62	; 0x3e
 80066bc:	d924      	bls.n	8006708 <USB_EPStartXfer+0xec2>
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <USB_EPStartXfer+0xe98>
 80066d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066d8:	3b01      	subs	r3, #1
 80066da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4313      	orrs	r3, r2
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	f000 bc10 	b.w	8006f28 <USB_EPStartXfer+0x16e2>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10c      	bne.n	800672a <USB_EPStartXfer+0xee4>
 8006710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e3fe      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <USB_EPStartXfer+0xf04>
 8006740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006744:	3301      	adds	r3, #1
 8006746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800674a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e3df      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
=======
 800849e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80084ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2200      	movs	r2, #0
 80084ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80084bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d8:	b29b      	uxth	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084e0:	4413      	add	r3, r2
 80084e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	00da      	lsls	r2, r3, #3
 80084f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084f8:	4413      	add	r3, r2
 80084fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	b29b      	uxth	r3, r3
 800850a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800850e:	b29a      	uxth	r2, r3
 8008510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851a:	2b3e      	cmp	r3, #62	; 0x3e
 800851c:	d924      	bls.n	8008568 <USB_EPStartXfer+0xec2>
 800851e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852c:	f003 031f 	and.w	r3, r3, #31
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <USB_EPStartXfer+0xe98>
 8008534:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008538:	3b01      	subs	r3, #1
 800853a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800853e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29a      	uxth	r2, r3
 8008546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800854a:	b29b      	uxth	r3, r3
 800854c:	029b      	lsls	r3, r3, #10
 800854e:	b29b      	uxth	r3, r3
 8008550:	4313      	orrs	r3, r2
 8008552:	b29b      	uxth	r3, r3
 8008554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855c:	b29a      	uxth	r2, r3
 800855e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	f000 bc10 	b.w	8008d88 <USB_EPStartXfer+0x16e2>
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <USB_EPStartXfer+0xee4>
 8008570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e3fe      	b.n	8008d88 <USB_EPStartXfer+0x16e2>
 800858a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858e:	085b      	lsrs	r3, r3, #1
 8008590:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <USB_EPStartXfer+0xf04>
 80085a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085a4:	3301      	adds	r3, #1
 80085a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	029b      	lsls	r3, r3, #10
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	4313      	orrs	r3, r2
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e3df      	b.n	8008d88 <USB_EPStartXfer+0x16e2>
>>>>>>> Stashed changes
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	78db      	ldrb	r3, [r3, #3]
 8006774:	2b02      	cmp	r3, #2
 8006776:	f040 8218 	bne.w	8006baa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 809d 	bne.w	80068c6 <USB_EPStartXfer+0x1080>
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b0:	4413      	add	r3, r2
 80067b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00da      	lsls	r2, r3, #3
 80067c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c8:	4413      	add	r3, r2
 80067ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b3e      	cmp	r3, #62	; 0x3e
 80067f4:	d92b      	bls.n	800684e <USB_EPStartXfer+0x1008>
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <USB_EPStartXfer+0xfe0>
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006820:	3b01      	subs	r3, #1
 8006822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29a      	uxth	r2, r3
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	b29b      	uxth	r3, r3
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	b29b      	uxth	r3, r3
 8006838:	4313      	orrs	r3, r2
 800683a:	b29b      	uxth	r3, r3
 800683c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	e070      	b.n	8006930 <USB_EPStartXfer+0x10ea>
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10c      	bne.n	8006878 <USB_EPStartXfer+0x1032>
 800685e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	e05b      	b.n	8006930 <USB_EPStartXfer+0x10ea>
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <USB_EPStartXfer+0x1062>
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	3301      	adds	r3, #1
 80068a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	029b      	lsls	r3, r3, #10
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	e034      	b.n	8006930 <USB_EPStartXfer+0x10ea>
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d12c      	bne.n	8006930 <USB_EPStartXfer+0x10ea>
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068fa:	4413      	add	r3, r2
 80068fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	00da      	lsls	r2, r3, #3
 800690e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006912:	4413      	add	r3, r2
 8006914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	b29a      	uxth	r2, r3
 800692a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 809d 	bne.w	8006a8a <USB_EPStartXfer+0x1244>
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696c:	b29b      	uxth	r3, r3
 800696e:	461a      	mov	r2, r3
 8006970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006974:	4413      	add	r3, r2
 8006976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800697a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	00da      	lsls	r2, r3, #3
 8006988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800698c:	4413      	add	r3, r2
 800698e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006992:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b3e      	cmp	r3, #62	; 0x3e
 80069b8:	d92b      	bls.n	8006a12 <USB_EPStartXfer+0x11cc>
 80069ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <USB_EPStartXfer+0x11a4>
 80069e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e4:	3b01      	subs	r3, #1
 80069e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	029b      	lsls	r3, r3, #10
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e069      	b.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10c      	bne.n	8006a3c <USB_EPStartXfer+0x11f6>
 8006a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e054      	b.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	085b      	lsrs	r3, r3, #1
 8006a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <USB_EPStartXfer+0x1226>
 8006a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a66:	3301      	adds	r3, #1
 8006a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	e02d      	b.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d125      	bne.n	8006ae6 <USB_EPStartXfer+0x12a0>
 8006a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	00da      	lsls	r2, r3, #3
 8006ac4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ac8:	4413      	add	r3, r2
 8006aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ae4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8218 	beq.w	8006f28 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <USB_EPStartXfer+0x12ea>
 8006b24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10d      	bne.n	8006b4c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 81f5 	bne.w	8006f28 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 81ee 	bne.w	8006f28 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b72:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	441a      	add	r2, r3
 8006b90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
 8006ba8:	e1be      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
=======
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	78db      	ldrb	r3, [r3, #3]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	f040 8218 	bne.w	8008a0a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80085da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f040 809d 	bne.w	8008726 <USB_EPStartXfer+0x1080>
 80085ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008608:	b29b      	uxth	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008610:	4413      	add	r3, r2
 8008612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	00da      	lsls	r2, r3, #3
 8008624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008628:	4413      	add	r3, r2
 800862a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800862e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800863e:	b29a      	uxth	r2, r3
 8008640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b3e      	cmp	r3, #62	; 0x3e
 8008654:	d92b      	bls.n	80086ae <USB_EPStartXfer+0x1008>
 8008656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <USB_EPStartXfer+0xfe0>
 800867c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008680:	3b01      	subs	r3, #1
 8008682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29a      	uxth	r2, r3
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	b29b      	uxth	r3, r3
 8008694:	029b      	lsls	r3, r3, #10
 8008696:	b29b      	uxth	r3, r3
 8008698:	4313      	orrs	r3, r2
 800869a:	b29b      	uxth	r3, r3
 800869c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	e070      	b.n	8008790 <USB_EPStartXfer+0x10ea>
 80086ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10c      	bne.n	80086d8 <USB_EPStartXfer+0x1032>
 80086be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e05b      	b.n	8008790 <USB_EPStartXfer+0x10ea>
 80086d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d004      	beq.n	8008708 <USB_EPStartXfer+0x1062>
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008702:	3301      	adds	r3, #1
 8008704:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29a      	uxth	r2, r3
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008714:	b29b      	uxth	r3, r3
 8008716:	029b      	lsls	r3, r3, #10
 8008718:	b29b      	uxth	r3, r3
 800871a:	4313      	orrs	r3, r2
 800871c:	b29a      	uxth	r2, r3
 800871e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008722:	801a      	strh	r2, [r3, #0]
 8008724:	e034      	b.n	8008790 <USB_EPStartXfer+0x10ea>
 8008726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d12c      	bne.n	8008790 <USB_EPStartXfer+0x10ea>
 8008736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800875a:	4413      	add	r3, r2
 800875c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	00da      	lsls	r2, r3, #3
 800876e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008772:	4413      	add	r3, r2
 8008774:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800877c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	b29a      	uxth	r2, r3
 800878a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800879e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f040 809d 	bne.w	80088ea <USB_EPStartXfer+0x1244>
 80087b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	461a      	mov	r2, r3
 80087d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087d4:	4413      	add	r3, r2
 80087d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	00da      	lsls	r2, r3, #3
 80087e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087ec:	4413      	add	r3, r2
 80087ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008802:	b29a      	uxth	r2, r3
 8008804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008808:	801a      	strh	r2, [r3, #0]
 800880a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b3e      	cmp	r3, #62	; 0x3e
 8008818:	d92b      	bls.n	8008872 <USB_EPStartXfer+0x11cc>
 800881a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	095b      	lsrs	r3, r3, #5
 8008828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800882c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	f003 031f 	and.w	r3, r3, #31
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <USB_EPStartXfer+0x11a4>
 8008840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008844:	3b01      	subs	r3, #1
 8008846:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800884a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29a      	uxth	r2, r3
 8008852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008856:	b29b      	uxth	r3, r3
 8008858:	029b      	lsls	r3, r3, #10
 800885a:	b29b      	uxth	r3, r3
 800885c:	4313      	orrs	r3, r2
 800885e:	b29b      	uxth	r3, r3
 8008860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008868:	b29a      	uxth	r2, r3
 800886a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	e069      	b.n	8008946 <USB_EPStartXfer+0x12a0>
 8008872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10c      	bne.n	800889c <USB_EPStartXfer+0x11f6>
 8008882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008892:	b29a      	uxth	r2, r3
 8008894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008898:	801a      	strh	r2, [r3, #0]
 800889a:	e054      	b.n	8008946 <USB_EPStartXfer+0x12a0>
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d004      	beq.n	80088cc <USB_EPStartXfer+0x1226>
 80088c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c6:	3301      	adds	r3, #1
 80088c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d8:	b29b      	uxth	r3, r3
 80088da:	029b      	lsls	r3, r3, #10
 80088dc:	b29b      	uxth	r3, r3
 80088de:	4313      	orrs	r3, r2
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	e02d      	b.n	8008946 <USB_EPStartXfer+0x12a0>
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d125      	bne.n	8008946 <USB_EPStartXfer+0x12a0>
 80088fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008908:	b29b      	uxth	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008910:	4413      	add	r3, r2
 8008912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	00da      	lsls	r2, r3, #3
 8008924:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008928:	4413      	add	r3, r2
 800892a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800892e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008944:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	69db      	ldr	r3, [r3, #28]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 8218 	beq.w	8008d88 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008978:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800897c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <USB_EPStartXfer+0x12ea>
 8008984:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10d      	bne.n	80089ac <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008990:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008998:	2b00      	cmp	r3, #0
 800899a:	f040 81f5 	bne.w	8008d88 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800899e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 81ee 	bne.w	8008d88 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80089ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80089f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	8013      	strh	r3, [r2, #0]
 8008a08:	e1be      	b.n	8008d88 <USB_EPStartXfer+0x16e2>
>>>>>>> Stashed changes
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
<<<<<<< Updated upstream
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	78db      	ldrb	r3, [r3, #3]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	f040 81b4 	bne.w	8006f24 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699a      	ldr	r2, [r3, #24]
 8006bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d917      	bls.n	8006c08 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	619a      	str	r2, [r3, #24]
 8006c06:	e00e      	b.n	8006c26 <USB_EPStartXfer+0x13e0>
=======
 8008a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	78db      	ldrb	r3, [r3, #3]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	f040 81b4 	bne.w	8008d84 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699a      	ldr	r2, [r3, #24]
 8008a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d917      	bls.n	8008a68 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	699a      	ldr	r2, [r3, #24]
 8008a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a58:	1ad2      	subs	r2, r2, r3
 8008a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	619a      	str	r2, [r3, #24]
 8008a66:	e00e      	b.n	8008a86 <USB_EPStartXfer+0x13e0>
>>>>>>> Stashed changes
        }
        else
        {
          len = ep->xfer_len;
<<<<<<< Updated upstream
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 8085 	bne.w	8006d42 <USB_EPStartXfer+0x14fc>
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	00da      	lsls	r2, r3, #3
 8006c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	2b3e      	cmp	r3, #62	; 0x3e
 8006c98:	d923      	bls.n	8006ce2 <USB_EPStartXfer+0x149c>
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <USB_EPStartXfer+0x1474>
 8006cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	e060      	b.n	8006da4 <USB_EPStartXfer+0x155e>
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10c      	bne.n	8006d04 <USB_EPStartXfer+0x14be>
 8006cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e04f      	b.n	8006da4 <USB_EPStartXfer+0x155e>
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <USB_EPStartXfer+0x14de>
 8006d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d1e:	3301      	adds	r3, #1
 8006d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e030      	b.n	8006da4 <USB_EPStartXfer+0x155e>
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d128      	bne.n	8006da4 <USB_EPStartXfer+0x155e>
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d76:	4413      	add	r3, r2
 8006d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00da      	lsls	r2, r3, #3
 8006d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8e:	4413      	add	r3, r2
 8006d90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 8085 	bne.w	8006ece <USB_EPStartXfer+0x1688>
 8006dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de8:	4413      	add	r3, r2
 8006dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	00da      	lsls	r2, r3, #3
 8006dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e22:	2b3e      	cmp	r3, #62	; 0x3e
 8006e24:	d923      	bls.n	8006e6e <USB_EPStartXfer+0x1628>
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USB_EPStartXfer+0x1600>
 8006e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e40:	3b01      	subs	r3, #1
 8006e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	e05c      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <USB_EPStartXfer+0x164a>
 8006e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e04b      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <USB_EPStartXfer+0x166a>
 8006ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e02c      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d124      	bne.n	8006f28 <USB_EPStartXfer+0x16e2>
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	00da      	lsls	r2, r3, #3
 8006f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e001      	b.n	8006f28 <USB_EPStartXfer+0x16e2>
=======
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2200      	movs	r2, #0
 8008a84:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f040 8085 	bne.w	8008ba2 <USB_EPStartXfer+0x14fc>
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008abc:	4413      	add	r3, r2
 8008abe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	00da      	lsls	r2, r3, #3
 8008ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af6:	2b3e      	cmp	r3, #62	; 0x3e
 8008af8:	d923      	bls.n	8008b42 <USB_EPStartXfer+0x149c>
 8008afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b08:	f003 031f 	and.w	r3, r3, #31
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <USB_EPStartXfer+0x1474>
 8008b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b14:	3b01      	subs	r3, #1
 8008b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	029b      	lsls	r3, r3, #10
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	e060      	b.n	8008c04 <USB_EPStartXfer+0x155e>
 8008b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10c      	bne.n	8008b64 <USB_EPStartXfer+0x14be>
 8008b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	e04f      	b.n	8008c04 <USB_EPStartXfer+0x155e>
 8008b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b68:	085b      	lsrs	r3, r3, #1
 8008b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <USB_EPStartXfer+0x14de>
 8008b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b7e:	3301      	adds	r3, #1
 8008b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	029b      	lsls	r3, r3, #10
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	4313      	orrs	r3, r2
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b9e:	801a      	strh	r2, [r3, #0]
 8008ba0:	e030      	b.n	8008c04 <USB_EPStartXfer+0x155e>
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d128      	bne.n	8008c04 <USB_EPStartXfer+0x155e>
 8008bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	00da      	lsls	r2, r3, #3
 8008bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bee:	4413      	add	r3, r2
 8008bf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 8085 	bne.w	8008d2e <USB_EPStartXfer+0x1688>
 8008c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c48:	4413      	add	r3, r2
 8008c4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	00da      	lsls	r2, r3, #3
 8008c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c60:	4413      	add	r3, r2
 8008c62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c7c:	801a      	strh	r2, [r3, #0]
 8008c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c82:	2b3e      	cmp	r3, #62	; 0x3e
 8008c84:	d923      	bls.n	8008cce <USB_EPStartXfer+0x1628>
 8008c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c94:	f003 031f 	and.w	r3, r3, #31
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <USB_EPStartXfer+0x1600>
 8008c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	029b      	lsls	r3, r3, #10
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cca:	801a      	strh	r2, [r3, #0]
 8008ccc:	e05c      	b.n	8008d88 <USB_EPStartXfer+0x16e2>
 8008cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10c      	bne.n	8008cf0 <USB_EPStartXfer+0x164a>
 8008cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	e04b      	b.n	8008d88 <USB_EPStartXfer+0x16e2>
 8008cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf4:	085b      	lsrs	r3, r3, #1
 8008cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d004      	beq.n	8008d10 <USB_EPStartXfer+0x166a>
 8008d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	029b      	lsls	r3, r3, #10
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	4313      	orrs	r3, r2
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d2a:	801a      	strh	r2, [r3, #0]
 8008d2c:	e02c      	b.n	8008d88 <USB_EPStartXfer+0x16e2>
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d124      	bne.n	8008d88 <USB_EPStartXfer+0x16e2>
 8008d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d54:	4413      	add	r3, r2
 8008d56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	00da      	lsls	r2, r3, #3
 8008d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	e001      	b.n	8008d88 <USB_EPStartXfer+0x16e2>
>>>>>>> Stashed changes
      }
      else
      {
        return HAL_ERROR;
<<<<<<< Updated upstream
 8006f24:	2301      	movs	r3, #1
 8006f26:	e03a      	b.n	8006f9e <USB_EPStartXfer+0x1758>
=======
 8008d84:	2301      	movs	r3, #1
 8008d86:	e03a      	b.n	8008dfe <USB_EPStartXfer+0x1758>
>>>>>>> Stashed changes
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
<<<<<<< Updated upstream
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USB_EPSetStall>:
=======
 8008d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008db2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008db6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008dba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008dbe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008dc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008dc6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	441a      	add	r2, r3
 8008de4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USB_EPSetStall>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d020      	beq.n	8006ffc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd0:	81bb      	strh	r3, [r7, #12]
 8006fd2:	89bb      	ldrh	r3, [r7, #12]
 8006fd4:	f083 0310 	eor.w	r3, r3, #16
 8006fd8:	81bb      	strh	r3, [r7, #12]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	89bb      	ldrh	r3, [r7, #12]
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]
 8006ffa:	e01f      	b.n	800703c <USB_EPSetStall+0x94>
=======
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d020      	beq.n	8008e5c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e30:	81bb      	strh	r3, [r7, #12]
 8008e32:	89bb      	ldrh	r3, [r7, #12]
 8008e34:	f083 0310 	eor.w	r3, r3, #16
 8008e38:	81bb      	strh	r3, [r7, #12]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	441a      	add	r2, r3
 8008e44:	89bb      	ldrh	r3, [r7, #12]
 8008e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8013      	strh	r3, [r2, #0]
 8008e5a:	e01f      	b.n	8008e9c <USB_EPSetStall+0x94>
>>>>>>> Stashed changes
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
<<<<<<< Updated upstream
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	81fb      	strh	r3, [r7, #14]
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800701a:	81fb      	strh	r3, [r7, #14]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	89fb      	ldrh	r3, [r7, #14]
 8007028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	b29b      	uxth	r3, r3
 800703a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USB_EPClearStall>:
=======
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e72:	81fb      	strh	r3, [r7, #14]
 8008e74:	89fb      	ldrh	r3, [r7, #14]
 8008e76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e7a:	81fb      	strh	r3, [r7, #14]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	441a      	add	r2, r3
 8008e86:	89fb      	ldrh	r3, [r7, #14]
 8008e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USB_EPClearStall>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	7b1b      	ldrb	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 809d 	bne.w	8007198 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d04c      	beq.n	8007100 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	823b      	strh	r3, [r7, #16]
 8007074:	8a3b      	ldrh	r3, [r7, #16]
 8007076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01b      	beq.n	80070b6 <USB_EPClearStall+0x6c>
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	81fb      	strh	r3, [r7, #14]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d06c      	beq.n	8007198 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d4:	81bb      	strh	r3, [r7, #12]
 80070d6:	89bb      	ldrh	r3, [r7, #12]
 80070d8:	f083 0320 	eor.w	r3, r3, #32
 80070dc:	81bb      	strh	r3, [r7, #12]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	89bb      	ldrh	r3, [r7, #12]
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]
 80070fe:	e04b      	b.n	8007198 <USB_EPClearStall+0x14e>
=======
 8008eaa:	b480      	push	{r7}
 8008eac:	b087      	sub	sp, #28
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	7b1b      	ldrb	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f040 809d 	bne.w	8008ff8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d04c      	beq.n	8008f60 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	823b      	strh	r3, [r7, #16]
 8008ed4:	8a3b      	ldrh	r3, [r7, #16]
 8008ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01b      	beq.n	8008f16 <USB_EPClearStall+0x6c>
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef4:	81fb      	strh	r3, [r7, #14]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	441a      	add	r2, r3
 8008f00:	89fb      	ldrh	r3, [r7, #14]
 8008f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	78db      	ldrb	r3, [r3, #3]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d06c      	beq.n	8008ff8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f34:	81bb      	strh	r3, [r7, #12]
 8008f36:	89bb      	ldrh	r3, [r7, #12]
 8008f38:	f083 0320 	eor.w	r3, r3, #32
 8008f3c:	81bb      	strh	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	89bb      	ldrh	r3, [r7, #12]
 8008f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8013      	strh	r3, [r2, #0]
 8008f5e:	e04b      	b.n	8008ff8 <USB_EPClearStall+0x14e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	82fb      	strh	r3, [r7, #22]
 800710e:	8afb      	ldrh	r3, [r7, #22]
 8007110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01b      	beq.n	8007150 <USB_EPClearStall+0x106>
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	82bb      	strh	r3, [r7, #20]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	8abb      	ldrh	r3, [r7, #20]
 800713c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	b29b      	uxth	r3, r3
 800714e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	827b      	strh	r3, [r7, #18]
 8007168:	8a7b      	ldrh	r3, [r7, #18]
 800716a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800716e:	827b      	strh	r3, [r7, #18]
 8007170:	8a7b      	ldrh	r3, [r7, #18]
 8007172:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007176:	827b      	strh	r3, [r7, #18]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	8a7b      	ldrh	r3, [r7, #18]
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]
=======
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	82fb      	strh	r3, [r7, #22]
 8008f6e:	8afb      	ldrh	r3, [r7, #22]
 8008f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01b      	beq.n	8008fb0 <USB_EPClearStall+0x106>
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8e:	82bb      	strh	r3, [r7, #20]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	441a      	add	r2, r3
 8008f9a:	8abb      	ldrh	r3, [r7, #20]
 8008f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc6:	827b      	strh	r3, [r7, #18]
 8008fc8:	8a7b      	ldrh	r3, [r7, #18]
 8008fca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008fce:	827b      	strh	r3, [r7, #18]
 8008fd0:	8a7b      	ldrh	r3, [r7, #18]
 8008fd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008fd6:	827b      	strh	r3, [r7, #18]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	441a      	add	r2, r3
 8008fe2:	8a7b      	ldrh	r3, [r7, #18]
 8008fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USB_SetDevAddress>:
=======
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USB_SetDevAddress>:
>>>>>>> Stashed changes
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
<<<<<<< Updated upstream
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2280      	movs	r2, #128	; 0x80
 80071bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_DevConnect>:
=======
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d103      	bne.n	8009020 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2280      	movs	r2, #128	; 0x80
 800901c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USB_DevConnect>:
>>>>>>> Stashed changes
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
<<<<<<< Updated upstream
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071dc:	b29b      	uxth	r3, r3
 80071de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USB_ReadInterrupts>:
=======
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800903c:	b29b      	uxth	r3, r3
 800903e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009046:	b29a      	uxth	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USB_ReadInterrupts>:
>>>>>>> Stashed changes
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
<<<<<<< Updated upstream
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800720a:	b29b      	uxth	r3, r3
 800720c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USB_WritePMA>:
=======
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800906a:	b29b      	uxth	r3, r3
 800906c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800906e:	68fb      	ldr	r3, [r7, #12]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USB_WritePMA>:
>>>>>>> Stashed changes
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< Updated upstream
 800721c:	b480      	push	{r7}
 800721e:	b08b      	sub	sp, #44	; 0x2c
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	460b      	mov	r3, r1
 800722c:	80fb      	strh	r3, [r7, #6]
 800722e:	4613      	mov	r3, r2
 8007230:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007232:	88bb      	ldrh	r3, [r7, #4]
 8007234:	3301      	adds	r3, #1
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	617b      	str	r3, [r7, #20]
=======
 800907c:	b480      	push	{r7}
 800907e:	b08b      	sub	sp, #44	; 0x2c
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4611      	mov	r1, r2
 8009088:	461a      	mov	r2, r3
 800908a:	460b      	mov	r3, r1
 800908c:	80fb      	strh	r3, [r7, #6]
 800908e:	4613      	mov	r3, r2
 8009090:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009092:	88bb      	ldrh	r3, [r7, #4]
 8009094:	3301      	adds	r3, #1
 8009096:	085b      	lsrs	r3, r3, #1
 8009098:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< Updated upstream
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800724c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	e01b      	b.n	800728c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3301      	adds	r3, #1
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	b21a      	sxth	r2, r3
 8007264:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007268:	4313      	orrs	r3, r2
 800726a:	b21b      	sxth	r3, r3
 800726c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	8a7a      	ldrh	r2, [r7, #18]
 8007272:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	3302      	adds	r3, #2
 8007278:	623b      	str	r3, [r7, #32]
=======
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
 80090b2:	e01b      	b.n	80090ec <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3301      	adds	r3, #1
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	b21a      	sxth	r2, r3
 80090c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	b21b      	sxth	r3, r3
 80090cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	8a7a      	ldrh	r2, [r7, #18]
 80090d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	3302      	adds	r3, #2
 80090d8:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
<<<<<<< Updated upstream
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	3b01      	subs	r3, #1
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e0      	bne.n	8007254 <USB_WritePMA+0x38>
  }
}
 8007292:	bf00      	nop
 8007294:	bf00      	nop
 8007296:	372c      	adds	r7, #44	; 0x2c
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_ReadPMA>:
=======
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	3301      	adds	r3, #1
 80090de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	3301      	adds	r3, #1
 80090e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	3b01      	subs	r3, #1
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1e0      	bne.n	80090b4 <USB_WritePMA+0x38>
  }
}
 80090f2:	bf00      	nop
 80090f4:	bf00      	nop
 80090f6:	372c      	adds	r7, #44	; 0x2c
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USB_ReadPMA>:
>>>>>>> Stashed changes
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< Updated upstream
 80072a0:	b480      	push	{r7}
 80072a2:	b08b      	sub	sp, #44	; 0x2c
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	460b      	mov	r3, r1
 80072b0:	80fb      	strh	r3, [r7, #6]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80072b6:	88bb      	ldrh	r3, [r7, #4]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	617b      	str	r3, [r7, #20]
=======
 8009100:	b480      	push	{r7}
 8009102:	b08b      	sub	sp, #44	; 0x2c
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4611      	mov	r1, r2
 800910c:	461a      	mov	r2, r3
 800910e:	460b      	mov	r3, r1
 8009110:	80fb      	strh	r3, [r7, #6]
 8009112:	4613      	mov	r3, r2
 8009114:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009116:	88bb      	ldrh	r3, [r7, #4]
 8009118:	085b      	lsrs	r3, r3, #1
 800911a:	b29b      	uxth	r3, r3
 800911c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< Updated upstream
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072c6:	88fa      	ldrh	r2, [r7, #6]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	e018      	b.n	800730a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	3302      	adds	r3, #2
 80072e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3301      	adds	r3, #1
 80072f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	3301      	adds	r3, #1
 8007302:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	3b01      	subs	r3, #1
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e3      	bne.n	80072d8 <USB_ReadPMA+0x38>
=======
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009126:	88fa      	ldrh	r2, [r7, #6]
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009130:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
 8009136:	e018      	b.n	800916a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	3302      	adds	r3, #2
 8009144:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	b2da      	uxtb	r2, r3
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	3301      	adds	r3, #1
 8009152:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	0a1b      	lsrs	r3, r3, #8
 8009158:	b2da      	uxtb	r2, r3
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	3301      	adds	r3, #1
 8009162:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	3b01      	subs	r3, #1
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e3      	bne.n	8009138 <USB_ReadPMA+0x38>
>>>>>>> Stashed changes
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
<<<<<<< Updated upstream
 8007310:	88bb      	ldrh	r3, [r7, #4]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	701a      	strb	r2, [r3, #0]
  }
}
 800732c:	bf00      	nop
 800732e:	372c      	adds	r7, #44	; 0x2c
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USBD_CDC_Init>:
=======
 8009170:	88bb      	ldrh	r3, [r7, #4]
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d007      	beq.n	800918c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	701a      	strb	r2, [r3, #0]
  }
}
 800918c:	bf00      	nop
 800918e:	372c      	adds	r7, #44	; 0x2c
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USBD_CDC_Init>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
=======
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
<<<<<<< Updated upstream
 8007344:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007348:	f002 fc6e 	bl	8009c28 <USBD_static_malloc>
 800734c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	2100      	movs	r1, #0
 8007360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007364:	2302      	movs	r3, #2
 8007366:	e0d4      	b.n	8007512 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007368:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800736c:	2100      	movs	r1, #0
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f002 fcce 	bl	8009d10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32b0      	adds	r2, #176	; 0xb0
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32b0      	adds	r2, #176	; 0xb0
 800738e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
=======
 80091a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091a8:	f002 fc6e 	bl	800ba88 <USBD_static_malloc>
 80091ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d109      	bne.n	80091c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32b0      	adds	r2, #176	; 0xb0
 80091be:	2100      	movs	r1, #0
 80091c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80091c4:	2302      	movs	r3, #2
 80091c6:	e0d4      	b.n	8009372 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80091c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80091cc:	2100      	movs	r1, #0
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f002 fcce 	bl	800bb70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	32b0      	adds	r2, #176	; 0xb0
 80091de:	68f9      	ldr	r1, [r7, #12]
 80091e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	32b0      	adds	r2, #176	; 0xb0
 80091ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
>>>>>>> Stashed changes
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
<<<<<<< Updated upstream
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7c1b      	ldrb	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d138      	bne.n	8007412 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073a0:	4b5e      	ldr	r3, [pc, #376]	; (800751c <USBD_CDC_Init+0x1e4>)
 80073a2:	7819      	ldrb	r1, [r3, #0]
 80073a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a8:	2202      	movs	r2, #2
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f002 fae1 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073b0:	4b5a      	ldr	r3, [pc, #360]	; (800751c <USBD_CDC_Init+0x1e4>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 020f 	and.w	r2, r3, #15
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	3324      	adds	r3, #36	; 0x24
 80073c6:	2201      	movs	r2, #1
 80073c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073ca:	4b55      	ldr	r3, [pc, #340]	; (8007520 <USBD_CDC_Init+0x1e8>)
 80073cc:	7819      	ldrb	r1, [r3, #0]
 80073ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073d2:	2202      	movs	r2, #2
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f002 facc 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073da:	4b51      	ldr	r3, [pc, #324]	; (8007520 <USBD_CDC_Init+0x1e8>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f003 020f 	and.w	r2, r3, #15
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073f2:	2201      	movs	r2, #1
 80073f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073f6:	4b4b      	ldr	r3, [pc, #300]	; (8007524 <USBD_CDC_Init+0x1ec>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3326      	adds	r3, #38	; 0x26
 800740c:	2210      	movs	r2, #16
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e035      	b.n	800747e <USBD_CDC_Init+0x146>
=======
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	7c1b      	ldrb	r3, [r3, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d138      	bne.n	8009272 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009200:	4b5e      	ldr	r3, [pc, #376]	; (800937c <USBD_CDC_Init+0x1e4>)
 8009202:	7819      	ldrb	r1, [r3, #0]
 8009204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009208:	2202      	movs	r2, #2
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f002 fae1 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009210:	4b5a      	ldr	r3, [pc, #360]	; (800937c <USBD_CDC_Init+0x1e4>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	f003 020f 	and.w	r2, r3, #15
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	3324      	adds	r3, #36	; 0x24
 8009226:	2201      	movs	r2, #1
 8009228:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800922a:	4b55      	ldr	r3, [pc, #340]	; (8009380 <USBD_CDC_Init+0x1e8>)
 800922c:	7819      	ldrb	r1, [r3, #0]
 800922e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009232:	2202      	movs	r2, #2
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f002 facc 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800923a:	4b51      	ldr	r3, [pc, #324]	; (8009380 <USBD_CDC_Init+0x1e8>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f003 020f 	and.w	r2, r3, #15
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009252:	2201      	movs	r2, #1
 8009254:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009256:	4b4b      	ldr	r3, [pc, #300]	; (8009384 <USBD_CDC_Init+0x1ec>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	f003 020f 	and.w	r2, r3, #15
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	440b      	add	r3, r1
 800926a:	3326      	adds	r3, #38	; 0x26
 800926c:	2210      	movs	r2, #16
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	e035      	b.n	80092de <USBD_CDC_Init+0x146>
>>>>>>> Stashed changes
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
<<<<<<< Updated upstream
 8007412:	4b42      	ldr	r3, [pc, #264]	; (800751c <USBD_CDC_Init+0x1e4>)
 8007414:	7819      	ldrb	r1, [r3, #0]
 8007416:	2340      	movs	r3, #64	; 0x40
 8007418:	2202      	movs	r2, #2
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f002 faa9 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007420:	4b3e      	ldr	r3, [pc, #248]	; (800751c <USBD_CDC_Init+0x1e4>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 020f 	and.w	r2, r3, #15
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	3324      	adds	r3, #36	; 0x24
 8007436:	2201      	movs	r2, #1
 8007438:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800743a:	4b39      	ldr	r3, [pc, #228]	; (8007520 <USBD_CDC_Init+0x1e8>)
 800743c:	7819      	ldrb	r1, [r3, #0]
 800743e:	2340      	movs	r3, #64	; 0x40
 8007440:	2202      	movs	r2, #2
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f002 fa95 	bl	8009972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007448:	4b35      	ldr	r3, [pc, #212]	; (8007520 <USBD_CDC_Init+0x1e8>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007460:	2201      	movs	r2, #1
 8007462:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007464:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <USBD_CDC_Init+0x1ec>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f003 020f 	and.w	r2, r3, #15
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	3326      	adds	r3, #38	; 0x26
 800747a:	2210      	movs	r2, #16
 800747c:	801a      	strh	r2, [r3, #0]
=======
 8009272:	4b42      	ldr	r3, [pc, #264]	; (800937c <USBD_CDC_Init+0x1e4>)
 8009274:	7819      	ldrb	r1, [r3, #0]
 8009276:	2340      	movs	r3, #64	; 0x40
 8009278:	2202      	movs	r2, #2
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f002 faa9 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009280:	4b3e      	ldr	r3, [pc, #248]	; (800937c <USBD_CDC_Init+0x1e4>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 020f 	and.w	r2, r3, #15
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	3324      	adds	r3, #36	; 0x24
 8009296:	2201      	movs	r2, #1
 8009298:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800929a:	4b39      	ldr	r3, [pc, #228]	; (8009380 <USBD_CDC_Init+0x1e8>)
 800929c:	7819      	ldrb	r1, [r3, #0]
 800929e:	2340      	movs	r3, #64	; 0x40
 80092a0:	2202      	movs	r2, #2
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f002 fa95 	bl	800b7d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092a8:	4b35      	ldr	r3, [pc, #212]	; (8009380 <USBD_CDC_Init+0x1e8>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 020f 	and.w	r2, r3, #15
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092c0:	2201      	movs	r2, #1
 80092c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80092c4:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <USBD_CDC_Init+0x1ec>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f003 020f 	and.w	r2, r3, #15
 80092cc:	6879      	ldr	r1, [r7, #4]
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	440b      	add	r3, r1
 80092d8:	3326      	adds	r3, #38	; 0x26
 80092da:	2210      	movs	r2, #16
 80092dc:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
<<<<<<< Updated upstream
 800747e:	4b29      	ldr	r3, [pc, #164]	; (8007524 <USBD_CDC_Init+0x1ec>)
 8007480:	7819      	ldrb	r1, [r3, #0]
 8007482:	2308      	movs	r3, #8
 8007484:	2203      	movs	r2, #3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f002 fa73 	bl	8009972 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800748c:	4b25      	ldr	r3, [pc, #148]	; (8007524 <USBD_CDC_Init+0x1ec>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 020f 	and.w	r2, r3, #15
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	3324      	adds	r3, #36	; 0x24
 80074a2:	2201      	movs	r2, #1
 80074a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	33b0      	adds	r3, #176	; 0xb0
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80074dc:	2302      	movs	r3, #2
 80074de:	e018      	b.n	8007512 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7c1b      	ldrb	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074e8:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <USBD_CDC_Init+0x1e8>)
 80074ea:	7819      	ldrb	r1, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 fb2b 	bl	8009b52 <USBD_LL_PrepareReceive>
 80074fc:	e008      	b.n	8007510 <USBD_CDC_Init+0x1d8>
=======
 80092de:	4b29      	ldr	r3, [pc, #164]	; (8009384 <USBD_CDC_Init+0x1ec>)
 80092e0:	7819      	ldrb	r1, [r3, #0]
 80092e2:	2308      	movs	r3, #8
 80092e4:	2203      	movs	r2, #3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f002 fa73 	bl	800b7d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80092ec:	4b25      	ldr	r3, [pc, #148]	; (8009384 <USBD_CDC_Init+0x1ec>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 020f 	and.w	r2, r3, #15
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	3324      	adds	r3, #36	; 0x24
 8009302:	2201      	movs	r2, #1
 8009304:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	33b0      	adds	r3, #176	; 0xb0
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800933c:	2302      	movs	r3, #2
 800933e:	e018      	b.n	8009372 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7c1b      	ldrb	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009348:	4b0d      	ldr	r3, [pc, #52]	; (8009380 <USBD_CDC_Init+0x1e8>)
 800934a:	7819      	ldrb	r1, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f002 fb2b 	bl	800b9b2 <USBD_LL_PrepareReceive>
 800935c:	e008      	b.n	8009370 <USBD_CDC_Init+0x1d8>
>>>>>>> Stashed changes
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
<<<<<<< Updated upstream
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <USBD_CDC_Init+0x1e8>)
 8007500:	7819      	ldrb	r1, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f002 fb21 	bl	8009b52 <USBD_LL_PrepareReceive>
=======
 800935e:	4b08      	ldr	r3, [pc, #32]	; (8009380 <USBD_CDC_Init+0x1e8>)
 8009360:	7819      	ldrb	r1, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009368:	2340      	movs	r3, #64	; 0x40
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f002 fb21 	bl	800b9b2 <USBD_LL_PrepareReceive>
>>>>>>> Stashed changes
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< Updated upstream
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	200000db 	.word	0x200000db
 8007520:	200000dc 	.word	0x200000dc
 8007524:	200000dd 	.word	0x200000dd

08007528 <USBD_CDC_DeInit>:
=======
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	200000db 	.word	0x200000db
 8009380:	200000dc 	.word	0x200000dc
 8009384:	200000dd 	.word	0x200000dd

08009388 <USBD_CDC_DeInit>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
=======
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
<<<<<<< Updated upstream
 8007534:	4b3a      	ldr	r3, [pc, #232]	; (8007620 <USBD_CDC_DeInit+0xf8>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f002 fa3f 	bl	80099be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007540:	4b37      	ldr	r3, [pc, #220]	; (8007620 <USBD_CDC_DeInit+0xf8>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 020f 	and.w	r2, r3, #15
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	3324      	adds	r3, #36	; 0x24
 8007556:	2200      	movs	r2, #0
 8007558:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800755a:	4b32      	ldr	r3, [pc, #200]	; (8007624 <USBD_CDC_DeInit+0xfc>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 fa2c 	bl	80099be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007566:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <USBD_CDC_DeInit+0xfc>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f003 020f 	and.w	r2, r3, #15
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800757e:	2200      	movs	r2, #0
 8007580:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007582:	4b29      	ldr	r3, [pc, #164]	; (8007628 <USBD_CDC_DeInit+0x100>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f002 fa18 	bl	80099be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800758e:	4b26      	ldr	r3, [pc, #152]	; (8007628 <USBD_CDC_DeInit+0x100>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f003 020f 	and.w	r2, r3, #15
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	3324      	adds	r3, #36	; 0x24
 80075a4:	2200      	movs	r2, #0
 80075a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80075a8:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <USBD_CDC_DeInit+0x100>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	440b      	add	r3, r1
 80075bc:	3326      	adds	r3, #38	; 0x26
 80075be:	2200      	movs	r2, #0
 80075c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32b0      	adds	r2, #176	; 0xb0
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01f      	beq.n	8007614 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	33b0      	adds	r3, #176	; 0xb0
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32b0      	adds	r2, #176	; 0xb0
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fb24 	bl	8009c44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32b0      	adds	r2, #176	; 0xb0
 8007606:	2100      	movs	r1, #0
 8007608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200000db 	.word	0x200000db
 8007624:	200000dc 	.word	0x200000dc
 8007628:	200000dd 	.word	0x200000dd

0800762c <USBD_CDC_Setup>:
=======
 8009394:	4b3a      	ldr	r3, [pc, #232]	; (8009480 <USBD_CDC_DeInit+0xf8>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f002 fa3f 	bl	800b81e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80093a0:	4b37      	ldr	r3, [pc, #220]	; (8009480 <USBD_CDC_DeInit+0xf8>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	f003 020f 	and.w	r2, r3, #15
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	3324      	adds	r3, #36	; 0x24
 80093b6:	2200      	movs	r2, #0
 80093b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80093ba:	4b32      	ldr	r3, [pc, #200]	; (8009484 <USBD_CDC_DeInit+0xfc>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f002 fa2c 	bl	800b81e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80093c6:	4b2f      	ldr	r3, [pc, #188]	; (8009484 <USBD_CDC_DeInit+0xfc>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093de:	2200      	movs	r2, #0
 80093e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80093e2:	4b29      	ldr	r3, [pc, #164]	; (8009488 <USBD_CDC_DeInit+0x100>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f002 fa18 	bl	800b81e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80093ee:	4b26      	ldr	r3, [pc, #152]	; (8009488 <USBD_CDC_DeInit+0x100>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	f003 020f 	and.w	r2, r3, #15
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	440b      	add	r3, r1
 8009402:	3324      	adds	r3, #36	; 0x24
 8009404:	2200      	movs	r2, #0
 8009406:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009408:	4b1f      	ldr	r3, [pc, #124]	; (8009488 <USBD_CDC_DeInit+0x100>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 020f 	and.w	r2, r3, #15
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	3326      	adds	r3, #38	; 0x26
 800941e:	2200      	movs	r2, #0
 8009420:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	32b0      	adds	r2, #176	; 0xb0
 800942c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01f      	beq.n	8009474 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	33b0      	adds	r3, #176	; 0xb0
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	32b0      	adds	r2, #176	; 0xb0
 8009452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009456:	4618      	mov	r0, r3
 8009458:	f002 fb24 	bl	800baa4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	32b0      	adds	r2, #176	; 0xb0
 8009466:	2100      	movs	r1, #0
 8009468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200000db 	.word	0x200000db
 8009484:	200000dc 	.word	0x200000dc
 8009488:	200000dd 	.word	0x200000dd

0800948c <USBD_CDC_Setup>:
>>>>>>> Stashed changes
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	32b0      	adds	r2, #176	; 0xb0
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	e0bf      	b.n	80077dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007664:	2b00      	cmp	r3, #0
 8007666:	d050      	beq.n	800770a <USBD_CDC_Setup+0xde>
 8007668:	2b20      	cmp	r3, #32
 800766a:	f040 80af 	bne.w	80077cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d03a      	beq.n	80076ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b25b      	sxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	da1b      	bge.n	80076b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	33b0      	adds	r3, #176	; 0xb0
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007696:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	88d2      	ldrh	r2, [r2, #6]
 800769c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	88db      	ldrh	r3, [r3, #6]
 80076a2:	2b07      	cmp	r3, #7
 80076a4:	bf28      	it	cs
 80076a6:	2307      	movcs	r3, #7
 80076a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	89fa      	ldrh	r2, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 fd21 	bl	80090f8 <USBD_CtlSendData>
=======
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	32b0      	adds	r2, #176	; 0xb0
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e0bf      	b.n	800963c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d050      	beq.n	800956a <USBD_CDC_Setup+0xde>
 80094c8:	2b20      	cmp	r3, #32
 80094ca:	f040 80af 	bne.w	800962c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	88db      	ldrh	r3, [r3, #6]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d03a      	beq.n	800954c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	b25b      	sxtb	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da1b      	bge.n	8009518 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	33b0      	adds	r3, #176	; 0xb0
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80094f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	88d2      	ldrh	r2, [r2, #6]
 80094fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	88db      	ldrh	r3, [r3, #6]
 8009502:	2b07      	cmp	r3, #7
 8009504:	bf28      	it	cs
 8009506:	2307      	movcs	r3, #7
 8009508:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	89fa      	ldrh	r2, [r7, #14]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fd21 	bl	800af58 <USBD_CtlSendData>
>>>>>>> Stashed changes
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
<<<<<<< Updated upstream
 80076b6:	e090      	b.n	80077da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	785a      	ldrb	r2, [r3, #1]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	88db      	ldrh	r3, [r3, #6]
 80076c6:	2b3f      	cmp	r3, #63	; 0x3f
 80076c8:	d803      	bhi.n	80076d2 <USBD_CDC_Setup+0xa6>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88db      	ldrh	r3, [r3, #6]
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	e000      	b.n	80076d4 <USBD_CDC_Setup+0xa8>
 80076d2:	2240      	movs	r2, #64	; 0x40
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80076da:	6939      	ldr	r1, [r7, #16]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80076e2:	461a      	mov	r2, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fd33 	bl	8009150 <USBD_CtlPrepareRx>
      break;
 80076ea:	e076      	b.n	80077da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	33b0      	adds	r3, #176	; 0xb0
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	7850      	ldrb	r0, [r2, #1]
 8007702:	2200      	movs	r2, #0
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	4798      	blx	r3
      break;
 8007708:	e067      	b.n	80077da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b0b      	cmp	r3, #11
 8007710:	d851      	bhi.n	80077b6 <USBD_CDC_Setup+0x18a>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBD_CDC_Setup+0xec>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007749 	.word	0x08007749
 800771c:	080077c5 	.word	0x080077c5
 8007720:	080077b7 	.word	0x080077b7
 8007724:	080077b7 	.word	0x080077b7
 8007728:	080077b7 	.word	0x080077b7
 800772c:	080077b7 	.word	0x080077b7
 8007730:	080077b7 	.word	0x080077b7
 8007734:	080077b7 	.word	0x080077b7
 8007738:	080077b7 	.word	0x080077b7
 800773c:	080077b7 	.word	0x080077b7
 8007740:	08007773 	.word	0x08007773
 8007744:	0800779d 	.word	0x0800779d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d107      	bne.n	8007764 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007754:	f107 030a 	add.w	r3, r7, #10
 8007758:	2202      	movs	r2, #2
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fccb 	bl	80090f8 <USBD_CtlSendData>
=======
 8009516:	e090      	b.n	800963a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	785a      	ldrb	r2, [r3, #1]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	88db      	ldrh	r3, [r3, #6]
 8009526:	2b3f      	cmp	r3, #63	; 0x3f
 8009528:	d803      	bhi.n	8009532 <USBD_CDC_Setup+0xa6>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	88db      	ldrh	r3, [r3, #6]
 800952e:	b2da      	uxtb	r2, r3
 8009530:	e000      	b.n	8009534 <USBD_CDC_Setup+0xa8>
 8009532:	2240      	movs	r2, #64	; 0x40
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800953a:	6939      	ldr	r1, [r7, #16]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009542:	461a      	mov	r2, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 fd33 	bl	800afb0 <USBD_CtlPrepareRx>
      break;
 800954a:	e076      	b.n	800963a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	33b0      	adds	r3, #176	; 0xb0
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	7850      	ldrb	r0, [r2, #1]
 8009562:	2200      	movs	r2, #0
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	4798      	blx	r3
      break;
 8009568:	e067      	b.n	800963a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b0b      	cmp	r3, #11
 8009570:	d851      	bhi.n	8009616 <USBD_CDC_Setup+0x18a>
 8009572:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <USBD_CDC_Setup+0xec>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	080095a9 	.word	0x080095a9
 800957c:	08009625 	.word	0x08009625
 8009580:	08009617 	.word	0x08009617
 8009584:	08009617 	.word	0x08009617
 8009588:	08009617 	.word	0x08009617
 800958c:	08009617 	.word	0x08009617
 8009590:	08009617 	.word	0x08009617
 8009594:	08009617 	.word	0x08009617
 8009598:	08009617 	.word	0x08009617
 800959c:	08009617 	.word	0x08009617
 80095a0:	080095d3 	.word	0x080095d3
 80095a4:	080095fd 	.word	0x080095fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d107      	bne.n	80095c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095b4:	f107 030a 	add.w	r3, r7, #10
 80095b8:	2202      	movs	r2, #2
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fccb 	bl	800af58 <USBD_CtlSendData>
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< Updated upstream
 8007762:	e032      	b.n	80077ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fc55 	bl	8009016 <USBD_CtlError>
            ret = USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	75fb      	strb	r3, [r7, #23]
          break;
 8007770:	e02b      	b.n	80077ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b03      	cmp	r3, #3
 800777c:	d107      	bne.n	800778e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800777e:	f107 030d 	add.w	r3, r7, #13
 8007782:	2201      	movs	r2, #1
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fcb6 	bl	80090f8 <USBD_CtlSendData>
=======
 80095c2:	e032      	b.n	800962a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 fc55 	bl	800ae76 <USBD_CtlError>
            ret = USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	75fb      	strb	r3, [r7, #23]
          break;
 80095d0:	e02b      	b.n	800962a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d107      	bne.n	80095ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095de:	f107 030d 	add.w	r3, r7, #13
 80095e2:	2201      	movs	r2, #1
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 fcb6 	bl	800af58 <USBD_CtlSendData>
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< Updated upstream
 800778c:	e01d      	b.n	80077ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 fc40 	bl	8009016 <USBD_CtlError>
            ret = USBD_FAIL;
 8007796:	2303      	movs	r3, #3
 8007798:	75fb      	strb	r3, [r7, #23]
          break;
 800779a:	e016      	b.n	80077ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d00f      	beq.n	80077c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fc33 	bl	8009016 <USBD_CtlError>
            ret = USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077b4:	e008      	b.n	80077c8 <USBD_CDC_Setup+0x19c>
=======
 80095ec:	e01d      	b.n	800962a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fc40 	bl	800ae76 <USBD_CtlError>
            ret = USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	75fb      	strb	r3, [r7, #23]
          break;
 80095fa:	e016      	b.n	800962a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b03      	cmp	r3, #3
 8009606:	d00f      	beq.n	8009628 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fc33 	bl	800ae76 <USBD_CtlError>
            ret = USBD_FAIL;
 8009610:	2303      	movs	r3, #3
 8009612:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009614:	e008      	b.n	8009628 <USBD_CDC_Setup+0x19c>
>>>>>>> Stashed changes

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fc2c 	bl	8009016 <USBD_CtlError>
          ret = USBD_FAIL;
 80077be:	2303      	movs	r3, #3
 80077c0:	75fb      	strb	r3, [r7, #23]
          break;
 80077c2:	e002      	b.n	80077ca <USBD_CDC_Setup+0x19e>
          break;
 80077c4:	bf00      	nop
 80077c6:	e008      	b.n	80077da <USBD_CDC_Setup+0x1ae>
          break;
 80077c8:	bf00      	nop
      }
      break;
 80077ca:	e006      	b.n	80077da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fc21 	bl	8009016 <USBD_CtlError>
      ret = USBD_FAIL;
 80077d4:	2303      	movs	r3, #3
 80077d6:	75fb      	strb	r3, [r7, #23]
      break;
 80077d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_CDC_DataIn>:
=======
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 fc2c 	bl	800ae76 <USBD_CtlError>
          ret = USBD_FAIL;
 800961e:	2303      	movs	r3, #3
 8009620:	75fb      	strb	r3, [r7, #23]
          break;
 8009622:	e002      	b.n	800962a <USBD_CDC_Setup+0x19e>
          break;
 8009624:	bf00      	nop
 8009626:	e008      	b.n	800963a <USBD_CDC_Setup+0x1ae>
          break;
 8009628:	bf00      	nop
      }
      break;
 800962a:	e006      	b.n	800963a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fc21 	bl	800ae76 <USBD_CtlError>
      ret = USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	75fb      	strb	r3, [r7, #23]
      break;
 8009638:	bf00      	nop
  }

  return (uint8_t)ret;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_CDC_DataIn>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< Updated upstream
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32b0      	adds	r2, #176	; 0xb0
 8007802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800780a:	2303      	movs	r3, #3
 800780c:	e065      	b.n	80078da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	32b0      	adds	r2, #176	; 0xb0
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	3318      	adds	r3, #24
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d02f      	beq.n	8007898 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	f003 020f 	and.w	r2, r3, #15
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	3318      	adds	r3, #24
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	f003 010f 	and.w	r1, r3, #15
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	460b      	mov	r3, r1
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4403      	add	r3, r0
 8007860:	3338      	adds	r3, #56	; 0x38
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	fbb2 f1f3 	udiv	r1, r2, r3
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800786e:	2b00      	cmp	r3, #0
 8007870:	d112      	bne.n	8007898 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	3318      	adds	r3, #24
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800788a:	78f9      	ldrb	r1, [r7, #3]
 800788c:	2300      	movs	r3, #0
 800788e:	2200      	movs	r2, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f002 f93d 	bl	8009b10 <USBD_LL_Transmit>
 8007896:	e01f      	b.n	80078d8 <USBD_CDC_DataIn+0xf4>
=======
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009656:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32b0      	adds	r2, #176	; 0xb0
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	e065      	b.n	800973a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	32b0      	adds	r2, #176	; 0xb0
 8009678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	f003 020f 	and.w	r2, r3, #15
 8009684:	6879      	ldr	r1, [r7, #4]
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	3318      	adds	r3, #24
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d02f      	beq.n	80096f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	f003 020f 	and.w	r2, r3, #15
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	3318      	adds	r3, #24
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	f003 010f 	and.w	r1, r3, #15
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	460b      	mov	r3, r1
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	4403      	add	r3, r0
 80096c0:	3338      	adds	r3, #56	; 0x38
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80096c8:	fb01 f303 	mul.w	r3, r1, r3
 80096cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d112      	bne.n	80096f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	f003 020f 	and.w	r2, r3, #15
 80096d8:	6879      	ldr	r1, [r7, #4]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	3318      	adds	r3, #24
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096ea:	78f9      	ldrb	r1, [r7, #3]
 80096ec:	2300      	movs	r3, #0
 80096ee:	2200      	movs	r2, #0
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f002 f93d 	bl	800b970 <USBD_LL_Transmit>
 80096f6:	e01f      	b.n	8009738 <USBD_CDC_DataIn+0xf4>
>>>>>>> Stashed changes
  }
  else
  {
    hcdc->TxState = 0U;
<<<<<<< Updated upstream
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	33b0      	adds	r3, #176	; 0xb0
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d010      	beq.n	80078d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	33b0      	adds	r3, #176	; 0xb0
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078d4:	78fa      	ldrb	r2, [r7, #3]
 80078d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	32b0      	adds	r2, #176	; 0xb0
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	32b0      	adds	r2, #176	; 0xb0
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e01a      	b.n	800794a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f002 f93b 	bl	8009b94 <USBD_LL_GetRxDataSize>
 800791e:	4602      	mov	r2, r0
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	33b0      	adds	r3, #176	; 0xb0
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007944:	4611      	mov	r1, r2
 8007946:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32b0      	adds	r2, #176	; 0xb0
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	e025      	b.n	80079c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	33b0      	adds	r3, #176	; 0xb0
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01a      	beq.n	80079be <USBD_CDC_EP0_RxReady+0x6c>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800798e:	2bff      	cmp	r3, #255	; 0xff
 8007990:	d015      	beq.n	80079be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	33b0      	adds	r3, #176	; 0xb0
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80079aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079b2:	b292      	uxth	r2, r2
 80079b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	22ff      	movs	r2, #255	; 0xff
 80079ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_CDC_GetFSCfgDesc>:
=======
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	33b0      	adds	r3, #176	; 0xb0
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d010      	beq.n	8009738 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	33b0      	adds	r3, #176	; 0xb0
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	32b0      	adds	r2, #176	; 0xb0
 8009758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	32b0      	adds	r2, #176	; 0xb0
 8009768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009770:	2303      	movs	r3, #3
 8009772:	e01a      	b.n	80097aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f002 f93b 	bl	800b9f4 <USBD_LL_GetRxDataSize>
 800977e:	4602      	mov	r2, r0
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	33b0      	adds	r3, #176	; 0xb0
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80097a4:	4611      	mov	r1, r2
 80097a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	32b0      	adds	r2, #176	; 0xb0
 80097c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e025      	b.n	8009820 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	33b0      	adds	r3, #176	; 0xb0
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01a      	beq.n	800981e <USBD_CDC_EP0_RxReady+0x6c>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097ee:	2bff      	cmp	r3, #255	; 0xff
 80097f0:	d015      	beq.n	800981e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	33b0      	adds	r3, #176	; 0xb0
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800980a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009812:	b292      	uxth	r2, r2
 8009814:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	22ff      	movs	r2, #255	; 0xff
 800981a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_CDC_GetFSCfgDesc>:
>>>>>>> Stashed changes
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< Updated upstream
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079d0:	2182      	movs	r1, #130	; 0x82
 80079d2:	4818      	ldr	r0, [pc, #96]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079d4:	f000 fcbd 	bl	8008352 <USBD_GetEpDesc>
 80079d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079da:	2101      	movs	r1, #1
 80079dc:	4815      	ldr	r0, [pc, #84]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079de:	f000 fcb8 	bl	8008352 <USBD_GetEpDesc>
 80079e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079e4:	2181      	movs	r1, #129	; 0x81
 80079e6:	4813      	ldr	r0, [pc, #76]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079e8:	f000 fcb3 	bl	8008352 <USBD_GetEpDesc>
 80079ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2210      	movs	r2, #16
 80079f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a08:	711a      	strb	r2, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d006      	beq.n	8007a22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a1c:	711a      	strb	r2, [r3, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2243      	movs	r2, #67	; 0x43
 8007a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000098 	.word	0x20000098

08007a38 <USBD_CDC_GetHSCfgDesc>:
=======
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009830:	2182      	movs	r1, #130	; 0x82
 8009832:	4818      	ldr	r0, [pc, #96]	; (8009894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009834:	f000 fcbd 	bl	800a1b2 <USBD_GetEpDesc>
 8009838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800983a:	2101      	movs	r1, #1
 800983c:	4815      	ldr	r0, [pc, #84]	; (8009894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800983e:	f000 fcb8 	bl	800a1b2 <USBD_GetEpDesc>
 8009842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009844:	2181      	movs	r1, #129	; 0x81
 8009846:	4813      	ldr	r0, [pc, #76]	; (8009894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009848:	f000 fcb3 	bl	800a1b2 <USBD_GetEpDesc>
 800984c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2210      	movs	r2, #16
 8009858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	2200      	movs	r2, #0
 8009864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009868:	711a      	strb	r2, [r3, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800987c:	711a      	strb	r2, [r3, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2243      	movs	r2, #67	; 0x43
 8009886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009888:	4b02      	ldr	r3, [pc, #8]	; (8009894 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20000098 	.word	0x20000098

08009898 <USBD_CDC_GetHSCfgDesc>:
>>>>>>> Stashed changes
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< Updated upstream
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a40:	2182      	movs	r1, #130	; 0x82
 8007a42:	4818      	ldr	r0, [pc, #96]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a44:	f000 fc85 	bl	8008352 <USBD_GetEpDesc>
 8007a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4815      	ldr	r0, [pc, #84]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a4e:	f000 fc80 	bl	8008352 <USBD_GetEpDesc>
 8007a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a54:	2181      	movs	r1, #129	; 0x81
 8007a56:	4813      	ldr	r0, [pc, #76]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a58:	f000 fc7b 	bl	8008352 <USBD_GetEpDesc>
 8007a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2210      	movs	r2, #16
 8007a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d006      	beq.n	8007a7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	711a      	strb	r2, [r3, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f042 0202 	orr.w	r2, r2, #2
 8007a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	711a      	strb	r2, [r3, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f042 0202 	orr.w	r2, r2, #2
 8007a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2243      	movs	r2, #67	; 0x43
 8007a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000098 	.word	0x20000098

08007aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098a0:	2182      	movs	r1, #130	; 0x82
 80098a2:	4818      	ldr	r0, [pc, #96]	; (8009904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098a4:	f000 fc85 	bl	800a1b2 <USBD_GetEpDesc>
 80098a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098aa:	2101      	movs	r1, #1
 80098ac:	4815      	ldr	r0, [pc, #84]	; (8009904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098ae:	f000 fc80 	bl	800a1b2 <USBD_GetEpDesc>
 80098b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098b4:	2181      	movs	r1, #129	; 0x81
 80098b6:	4813      	ldr	r0, [pc, #76]	; (8009904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098b8:	f000 fc7b 	bl	800a1b2 <USBD_GetEpDesc>
 80098bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2210      	movs	r2, #16
 80098c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d006      	beq.n	80098de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2200      	movs	r2, #0
 80098d4:	711a      	strb	r2, [r3, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f042 0202 	orr.w	r2, r2, #2
 80098dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	711a      	strb	r2, [r3, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f042 0202 	orr.w	r2, r2, #2
 80098f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2243      	movs	r2, #67	; 0x43
 80098f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098f8:	4b02      	ldr	r3, [pc, #8]	; (8009904 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20000098 	.word	0x20000098

08009908 <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> Stashed changes
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< Updated upstream
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ab0:	2182      	movs	r1, #130	; 0x82
 8007ab2:	4818      	ldr	r0, [pc, #96]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ab4:	f000 fc4d 	bl	8008352 <USBD_GetEpDesc>
 8007ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007aba:	2101      	movs	r1, #1
 8007abc:	4815      	ldr	r0, [pc, #84]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007abe:	f000 fc48 	bl	8008352 <USBD_GetEpDesc>
 8007ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ac4:	2181      	movs	r1, #129	; 0x81
 8007ac6:	4813      	ldr	r0, [pc, #76]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ac8:	f000 fc43 	bl	8008352 <USBD_GetEpDesc>
 8007acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2210      	movs	r2, #16
 8007ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae8:	711a      	strb	r2, [r3, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d006      	beq.n	8007b02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afc:	711a      	strb	r2, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2243      	movs	r2, #67	; 0x43
 8007b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000098 	.word	0x20000098

08007b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009910:	2182      	movs	r1, #130	; 0x82
 8009912:	4818      	ldr	r0, [pc, #96]	; (8009974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009914:	f000 fc4d 	bl	800a1b2 <USBD_GetEpDesc>
 8009918:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800991a:	2101      	movs	r1, #1
 800991c:	4815      	ldr	r0, [pc, #84]	; (8009974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800991e:	f000 fc48 	bl	800a1b2 <USBD_GetEpDesc>
 8009922:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009924:	2181      	movs	r1, #129	; 0x81
 8009926:	4813      	ldr	r0, [pc, #76]	; (8009974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009928:	f000 fc43 	bl	800a1b2 <USBD_GetEpDesc>
 800992c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2210      	movs	r2, #16
 8009938:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d006      	beq.n	800994e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2200      	movs	r2, #0
 8009944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009948:	711a      	strb	r2, [r3, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d006      	beq.n	8009962 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800995c:	711a      	strb	r2, [r3, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2243      	movs	r2, #67	; 0x43
 8009966:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009968:	4b02      	ldr	r3, [pc, #8]	; (8009974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20000098 	.word	0x20000098

08009978 <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> Stashed changes
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< Updated upstream
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	220a      	movs	r2, #10
 8007b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b26:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20000054 	.word	0x20000054

08007b38 <USBD_CDC_RegisterInterface>:
=======
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	220a      	movs	r2, #10
 8009984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009986:	4b03      	ldr	r3, [pc, #12]	; (8009994 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20000054 	.word	0x20000054

08009998 <USBD_CDC_RegisterInterface>:
>>>>>>> Stashed changes
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< Updated upstream
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e009      	b.n	8007b60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	33b0      	adds	r3, #176	; 0xb0
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USBD_CDC_SetTxBuffer>:
=======
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e009      	b.n	80099c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	33b0      	adds	r3, #176	; 0xb0
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USBD_CDC_SetTxBuffer>:
>>>>>>> Stashed changes
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
<<<<<<< Updated upstream
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	32b0      	adds	r2, #176	; 0xb0
 8007b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e008      	b.n	8007ba4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBD_CDC_SetRxBuffer>:
=======
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	32b0      	adds	r2, #176	; 0xb0
 80099e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e008      	b.n	8009a04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USBD_CDC_SetRxBuffer>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
<<<<<<< Updated upstream
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	32b0      	adds	r2, #176	; 0xb0
 8007bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e004      	b.n	8007bde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <USBD_CDC_TransmitPacket>:
=======
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	32b0      	adds	r2, #176	; 0xb0
 8009a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e004      	b.n	8009a3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
	...

08009a4c <USBD_CDC_TransmitPacket>:
>>>>>>> Stashed changes
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	32b0      	adds	r2, #176	; 0xb0
 8007bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c02:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
=======
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	32b0      	adds	r2, #176	; 0xb0
 8009a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a62:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009a64:	2301      	movs	r3, #1
 8009a66:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
<<<<<<< Updated upstream
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e025      	b.n	8007c5e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d11f      	bne.n	8007c5c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007c24:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <USBD_CDC_TransmitPacket+0x7c>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 020f 	and.w	r2, r3, #15
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4403      	add	r3, r0
 8007c3e:	3318      	adds	r3, #24
 8007c40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <USBD_CDC_TransmitPacket+0x7c>)
 8007c44:	7819      	ldrb	r1, [r3, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 ff5c 	bl	8009b10 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200000db 	.word	0x200000db

08007c6c <USBD_CDC_ReceivePacket>:
=======
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e025      	b.n	8009abe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d11f      	bne.n	8009abc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009a84:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <USBD_CDC_TransmitPacket+0x7c>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4403      	add	r3, r0
 8009a9e:	3318      	adds	r3, #24
 8009aa0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <USBD_CDC_TransmitPacket+0x7c>)
 8009aa4:	7819      	ldrb	r1, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 ff5c 	bl	800b970 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200000db 	.word	0x200000db

08009acc <USBD_CDC_ReceivePacket>:
>>>>>>> Stashed changes
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	32b0      	adds	r2, #176	; 0xb0
 8007c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c82:	60fb      	str	r3, [r7, #12]
=======
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	32b0      	adds	r2, #176	; 0xb0
 8009ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
<<<<<<< Updated upstream
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	32b0      	adds	r2, #176	; 0xb0
 8007c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e018      	b.n	8007ccc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7c1b      	ldrb	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <USBD_CDC_ReceivePacket+0x68>)
 8007ca4:	7819      	ldrb	r1, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 ff4e 	bl	8009b52 <USBD_LL_PrepareReceive>
 8007cb6:	e008      	b.n	8007cca <USBD_CDC_ReceivePacket+0x5e>
=======
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32b0      	adds	r2, #176	; 0xb0
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e018      	b.n	8009b2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	7c1b      	ldrb	r3, [r3, #16]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b02:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <USBD_CDC_ReceivePacket+0x68>)
 8009b04:	7819      	ldrb	r1, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 ff4e 	bl	800b9b2 <USBD_LL_PrepareReceive>
 8009b16:	e008      	b.n	8009b2a <USBD_CDC_ReceivePacket+0x5e>
>>>>>>> Stashed changes
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
<<<<<<< Updated upstream
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <USBD_CDC_ReceivePacket+0x68>)
 8007cba:	7819      	ldrb	r1, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 ff44 	bl	8009b52 <USBD_LL_PrepareReceive>
=======
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <USBD_CDC_ReceivePacket+0x68>)
 8009b1a:	7819      	ldrb	r1, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b22:	2340      	movs	r3, #64	; 0x40
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 ff44 	bl	800b9b2 <USBD_LL_PrepareReceive>
>>>>>>> Stashed changes
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< Updated upstream
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200000dc 	.word	0x200000dc

08007cd8 <USBD_Init>:
=======
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	200000dc 	.word	0x200000dc

08009b38 <USBD_Init>:
>>>>>>> Stashed changes
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< Updated upstream
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71fb      	strb	r3, [r7, #7]
=======
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
<<<<<<< Updated upstream
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <USBD_Init+0x18>
=======
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <USBD_Init+0x18>
>>>>>>> Stashed changes
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
<<<<<<< Updated upstream
 8007cec:	2303      	movs	r3, #3
 8007cee:	e01f      	b.n	8007d30 <USBD_Init+0x58>
=======
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e01f      	b.n	8009b90 <USBD_Init+0x58>
>>>>>>> Stashed changes
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
<<<<<<< Updated upstream
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
=======
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
>>>>>>> Stashed changes
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< Updated upstream
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	79fa      	ldrb	r2, [r7, #7]
 8007d22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f001 fda7 	bl	8009878 <USBD_LL_Init>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_RegisterClass>:
=======
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	79fa      	ldrb	r2, [r7, #7]
 8009b82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f001 fda7 	bl	800b6d8 <USBD_LL_Init>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_RegisterClass>:
>>>>>>> Stashed changes
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< Updated upstream
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <USBD_RegisterClass+0x18>
=======
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <USBD_RegisterClass+0x18>
>>>>>>> Stashed changes
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
<<<<<<< Updated upstream
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e025      	b.n	8007d9c <USBD_RegisterClass+0x64>
=======
 8009bac:	2303      	movs	r3, #3
 8009bae:	e025      	b.n	8009bfc <USBD_RegisterClass+0x64>
>>>>>>> Stashed changes
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
<<<<<<< Updated upstream
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
=======
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
>>>>>>> Stashed changes
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
<<<<<<< Updated upstream
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	32ae      	adds	r2, #174	; 0xae
 8007d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00f      	beq.n	8007d8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	32ae      	adds	r2, #174	; 0xae
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f107 020e 	add.w	r2, r7, #14
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	4602      	mov	r2, r0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
=======
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	32ae      	adds	r2, #174	; 0xae
 8009bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00f      	beq.n	8009bec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32ae      	adds	r2, #174	; 0xae
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	f107 020e 	add.w	r2, r7, #14
 8009be0:	4610      	mov	r0, r2
 8009be2:	4798      	blx	r3
 8009be4:	4602      	mov	r2, r0
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
>>>>>>> Stashed changes
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
<<<<<<< Updated upstream
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_Start>:
=======
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_Start>:
>>>>>>> Stashed changes
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
=======
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
<<<<<<< Updated upstream
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fdc5 	bl	800993c <USBD_LL_Start>
 8007db2:	4603      	mov	r3, r0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_RunTestMode>:
=======
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 fdc5 	bl	800b79c <USBD_LL_Start>
 8009c12:	4603      	mov	r3, r0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_RunTestMode>:
>>>>>>> Stashed changes
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
=======
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< Updated upstream
 8007dc4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBD_SetClassConfig>:
=======
 8009c24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <USBD_SetClassConfig>:
>>>>>>> Stashed changes
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
=======
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
<<<<<<< Updated upstream
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d009      	beq.n	8007e00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	4611      	mov	r1, r2
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
=======
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	4611      	mov	r1, r2
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< Updated upstream
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_ClrClassConfig>:
=======
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_ClrClassConfig>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
=======
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
<<<<<<< Updated upstream
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	4611      	mov	r1, r2
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	73fb      	strb	r3, [r7, #15]
=======
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	78fa      	ldrb	r2, [r7, #3]
 8009c84:	4611      	mov	r1, r2
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4798      	blx	r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009c90:	2303      	movs	r3, #3
 8009c92:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< Updated upstream
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_LL_SetupStage>:
=======
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBD_LL_SetupStage>:
>>>>>>> Stashed changes
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< Updated upstream
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f8a6 	bl	8008fa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e64:	461a      	mov	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d01a      	beq.n	8007eb0 <USBD_LL_SetupStage+0x72>
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d822      	bhi.n	8007ec4 <USBD_LL_SetupStage+0x86>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <USBD_LL_SetupStage+0x4a>
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d00a      	beq.n	8007e9c <USBD_LL_SetupStage+0x5e>
 8007e86:	e01d      	b.n	8007ec4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fad3 	bl	800843c <USBD_StdDevReq>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9a:	e020      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb3b 	bl	8008520 <USBD_StdItfReq>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
      break;
 8007eae:	e016      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fb9d 	bl	80085f8 <USBD_StdEPReq>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec2:	e00c      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fd92 	bl	80099fc <USBD_LL_StallEP>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
      break;
 8007edc:	bf00      	nop
  }

  return ret;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_DataOutStage>:
=======
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f8a6 	bl	800ae02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cd2:	f003 031f 	and.w	r3, r3, #31
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d01a      	beq.n	8009d10 <USBD_LL_SetupStage+0x72>
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d822      	bhi.n	8009d24 <USBD_LL_SetupStage+0x86>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <USBD_LL_SetupStage+0x4a>
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d00a      	beq.n	8009cfc <USBD_LL_SetupStage+0x5e>
 8009ce6:	e01d      	b.n	8009d24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fad3 	bl	800a29c <USBD_StdDevReq>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cfa:	e020      	b.n	8009d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fb3b 	bl	800a380 <USBD_StdItfReq>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d0e:	e016      	b.n	8009d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb9d 	bl	800a458 <USBD_StdEPReq>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
      break;
 8009d22:	e00c      	b.n	8009d3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fd92 	bl	800b85c <USBD_LL_StallEP>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d3c:	bf00      	nop
  }

  return ret;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_DataOutStage>:
>>>>>>> Stashed changes
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< Updated upstream
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d16e      	bne.n	8007fde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	f040 8098 	bne.w	8008044 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d913      	bls.n	8007f48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bf28      	it	cs
 8007f3a:	4613      	movcs	r3, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 f922 	bl	800918a <USBD_CtlContinueRx>
 8007f46:	e07d      	b.n	8008044 <USBD_LL_DataOutStage+0x15c>
=======
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	460b      	mov	r3, r1
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d5a:	7afb      	ldrb	r3, [r7, #11]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d16e      	bne.n	8009e3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	f040 8098 	bne.w	8009ea4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d913      	bls.n	8009da8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	689a      	ldr	r2, [r3, #8]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	1ad2      	subs	r2, r2, r3
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	4293      	cmp	r3, r2
 8009d98:	bf28      	it	cs
 8009d9a:	4613      	movcs	r3, r2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f001 f922 	bl	800afea <USBD_CtlContinueRx>
 8009da6:	e07d      	b.n	8009ea4 <USBD_LL_DataOutStage+0x15c>
>>>>>>> Stashed changes
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
<<<<<<< Updated upstream
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d014      	beq.n	8007f80 <USBD_LL_DataOutStage+0x98>
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d81d      	bhi.n	8007f96 <USBD_LL_DataOutStage+0xae>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <USBD_LL_DataOutStage+0x7c>
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d003      	beq.n	8007f6a <USBD_LL_DataOutStage+0x82>
 8007f62:	e018      	b.n	8007f96 <USBD_LL_DataOutStage+0xae>
=======
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009dae:	f003 031f 	and.w	r3, r3, #31
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d014      	beq.n	8009de0 <USBD_LL_DataOutStage+0x98>
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d81d      	bhi.n	8009df6 <USBD_LL_DataOutStage+0xae>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <USBD_LL_DataOutStage+0x7c>
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d003      	beq.n	8009dca <USBD_LL_DataOutStage+0x82>
 8009dc2:	e018      	b.n	8009df6 <USBD_LL_DataOutStage+0xae>
>>>>>>> Stashed changes
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
<<<<<<< Updated upstream
 8007f64:	2300      	movs	r3, #0
 8007f66:	75bb      	strb	r3, [r7, #22]
            break;
 8007f68:	e018      	b.n	8007f9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	4619      	mov	r1, r3
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f9d2 	bl	800831e <USBD_CoreFindIF>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007f7e:	e00d      	b.n	8007f9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	4619      	mov	r1, r3
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f9d4 	bl	8008338 <USBD_CoreFindEP>
 8007f90:	4603      	mov	r3, r0
 8007f92:	75bb      	strb	r3, [r7, #22]
            break;
 8007f94:	e002      	b.n	8007f9c <USBD_LL_DataOutStage+0xb4>
=======
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8009dc8:	e018      	b.n	8009dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 f9d2 	bl	800a17e <USBD_CoreFindIF>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75bb      	strb	r3, [r7, #22]
            break;
 8009dde:	e00d      	b.n	8009dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	4619      	mov	r1, r3
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f000 f9d4 	bl	800a198 <USBD_CoreFindEP>
 8009df0:	4603      	mov	r3, r0
 8009df2:	75bb      	strb	r3, [r7, #22]
            break;
 8009df4:	e002      	b.n	8009dfc <USBD_LL_DataOutStage+0xb4>
>>>>>>> Stashed changes

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
<<<<<<< Updated upstream
 8007f96:	2300      	movs	r3, #0
 8007f98:	75bb      	strb	r3, [r7, #22]
            break;
 8007f9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f9c:	7dbb      	ldrb	r3, [r7, #22]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d119      	bne.n	8007fd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d113      	bne.n	8007fd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007fae:	7dba      	ldrb	r2, [r7, #22]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	32ae      	adds	r2, #174	; 0xae
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007fbe:	7dba      	ldrb	r2, [r7, #22]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007fc6:	7dba      	ldrb	r2, [r7, #22]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	32ae      	adds	r2, #174	; 0xae
 8007fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	4798      	blx	r3
=======
 8009df6:	2300      	movs	r3, #0
 8009df8:	75bb      	strb	r3, [r7, #22]
            break;
 8009dfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009dfc:	7dbb      	ldrb	r3, [r7, #22]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d119      	bne.n	8009e36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d113      	bne.n	8009e36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e0e:	7dba      	ldrb	r2, [r7, #22]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	32ae      	adds	r2, #174	; 0xae
 8009e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e1e:	7dba      	ldrb	r2, [r7, #22]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e26:	7dba      	ldrb	r2, [r7, #22]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	32ae      	adds	r2, #174	; 0xae
 8009e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	4798      	blx	r3
>>>>>>> Stashed changes
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
<<<<<<< Updated upstream
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f001 f8e8 	bl	80091ac <USBD_CtlSendStatus>
 8007fdc:	e032      	b.n	8008044 <USBD_LL_DataOutStage+0x15c>
=======
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f001 f8e8 	bl	800b00c <USBD_CtlSendStatus>
 8009e3c:	e032      	b.n	8009ea4 <USBD_LL_DataOutStage+0x15c>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
<<<<<<< Updated upstream
 8007fde:	7afb      	ldrb	r3, [r7, #11]
 8007fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 f9a5 	bl	8008338 <USBD_CoreFindEP>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ff2:	7dbb      	ldrb	r3, [r7, #22]
 8007ff4:	2bff      	cmp	r3, #255	; 0xff
 8007ff6:	d025      	beq.n	8008044 <USBD_LL_DataOutStage+0x15c>
 8007ff8:	7dbb      	ldrb	r3, [r7, #22]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d122      	bne.n	8008044 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b03      	cmp	r3, #3
 8008008:	d117      	bne.n	800803a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800800a:	7dba      	ldrb	r2, [r7, #22]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	32ae      	adds	r2, #174	; 0xae
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00f      	beq.n	800803a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800801a:	7dba      	ldrb	r2, [r7, #22]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008022:	7dba      	ldrb	r2, [r7, #22]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	32ae      	adds	r2, #174	; 0xae
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	7afa      	ldrb	r2, [r7, #11]
 8008030:	4611      	mov	r1, r2
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	4798      	blx	r3
 8008036:	4603      	mov	r3, r0
 8008038:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	e000      	b.n	8008046 <USBD_LL_DataOutStage+0x15e>
=======
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
 8009e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f9a5 	bl	800a198 <USBD_CoreFindEP>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e52:	7dbb      	ldrb	r3, [r7, #22]
 8009e54:	2bff      	cmp	r3, #255	; 0xff
 8009e56:	d025      	beq.n	8009ea4 <USBD_LL_DataOutStage+0x15c>
 8009e58:	7dbb      	ldrb	r3, [r7, #22]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d122      	bne.n	8009ea4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d117      	bne.n	8009e9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e6a:	7dba      	ldrb	r2, [r7, #22]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	32ae      	adds	r2, #174	; 0xae
 8009e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00f      	beq.n	8009e9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e7a:	7dba      	ldrb	r2, [r7, #22]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e82:	7dba      	ldrb	r2, [r7, #22]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	32ae      	adds	r2, #174	; 0xae
 8009e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	7afa      	ldrb	r2, [r7, #11]
 8009e90:	4611      	mov	r1, r2
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	4798      	blx	r3
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	e000      	b.n	8009ea6 <USBD_LL_DataOutStage+0x15e>
>>>>>>> Stashed changes
      }
    }
  }

  return USBD_OK;
<<<<<<< Updated upstream
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_LL_DataInStage>:
=======
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_LL_DataInStage>:
>>>>>>> Stashed changes
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< Updated upstream
 800804e:	b580      	push	{r7, lr}
 8008050:	b086      	sub	sp, #24
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	460b      	mov	r3, r1
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	72fb      	strb	r3, [r7, #11]
=======
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b086      	sub	sp, #24
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	607a      	str	r2, [r7, #4]
 8009eba:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
<<<<<<< Updated upstream
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d16f      	bne.n	8008142 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3314      	adds	r3, #20
 8008066:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800806e:	2b02      	cmp	r3, #2
 8008070:	d15a      	bne.n	8008128 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	429a      	cmp	r2, r3
 800807c:	d914      	bls.n	80080a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	1ad2      	subs	r2, r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	461a      	mov	r2, r3
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f001 f84a 	bl	800912e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800809a:	2300      	movs	r3, #0
 800809c:	2200      	movs	r2, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f001 fd56 	bl	8009b52 <USBD_LL_PrepareReceive>
 80080a6:	e03f      	b.n	8008128 <USBD_LL_DataInStage+0xda>
=======
 8009ebc:	7afb      	ldrb	r3, [r7, #11]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d16f      	bne.n	8009fa2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3314      	adds	r3, #20
 8009ec6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d15a      	bne.n	8009f88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	689a      	ldr	r2, [r3, #8]
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d914      	bls.n	8009f08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	689a      	ldr	r2, [r3, #8]
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	1ad2      	subs	r2, r2, r3
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f001 f84a 	bl	800af8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009efa:	2300      	movs	r3, #0
 8009efc:	2200      	movs	r2, #0
 8009efe:	2100      	movs	r1, #0
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f001 fd56 	bl	800b9b2 <USBD_LL_PrepareReceive>
 8009f06:	e03f      	b.n	8009f88 <USBD_LL_DataInStage+0xda>
>>>>>>> Stashed changes
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
<<<<<<< Updated upstream
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d11c      	bne.n	80080ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080bc:	429a      	cmp	r2, r3
 80080be:	d316      	bcc.n	80080ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d20f      	bcs.n	80080ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f001 f82b 	bl	800912e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080e0:	2300      	movs	r3, #0
 80080e2:	2200      	movs	r2, #0
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f001 fd33 	bl	8009b52 <USBD_LL_PrepareReceive>
 80080ec:	e01c      	b.n	8008128 <USBD_LL_DataInStage+0xda>
=======
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d11c      	bne.n	8009f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d316      	bcc.n	8009f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d20f      	bcs.n	8009f4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2100      	movs	r1, #0
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f001 f82b 	bl	800af8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f40:	2300      	movs	r3, #0
 8009f42:	2200      	movs	r2, #0
 8009f44:	2100      	movs	r1, #0
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f001 fd33 	bl	800b9b2 <USBD_LL_PrepareReceive>
 8009f4c:	e01c      	b.n	8009f88 <USBD_LL_DataInStage+0xda>
>>>>>>> Stashed changes
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< Updated upstream
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d10f      	bne.n	800811a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f001 fc6d 	bl	80099fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f001 f855 	bl	80091d2 <USBD_CtlReceiveStatus>
=======
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d10f      	bne.n	8009f7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d009      	beq.n	8009f7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f7a:	2180      	movs	r1, #128	; 0x80
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f001 fc6d 	bl	800b85c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f001 f855 	bl	800b032 <USBD_CtlReceiveStatus>
>>>>>>> Stashed changes
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
<<<<<<< Updated upstream
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d03a      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff fe42 	bl	8007dbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008140:	e032      	b.n	80081a8 <USBD_LL_DataInStage+0x15a>
=======
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d03a      	beq.n	800a008 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff fe42 	bl	8009c1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009fa0:	e032      	b.n	800a008 <USBD_LL_DataInStage+0x15a>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
<<<<<<< Updated upstream
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008148:	b2db      	uxtb	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f8f3 	bl	8008338 <USBD_CoreFindEP>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	2bff      	cmp	r3, #255	; 0xff
 800815a:	d025      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d122      	bne.n	80081a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b03      	cmp	r3, #3
 800816c:	d11c      	bne.n	80081a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800816e:	7dfa      	ldrb	r2, [r7, #23]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	32ae      	adds	r2, #174	; 0xae
 8008174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d014      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800817e:	7dfa      	ldrb	r2, [r7, #23]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008186:	7dfa      	ldrb	r2, [r7, #23]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	32ae      	adds	r2, #174	; 0xae
 800818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	7afa      	ldrb	r2, [r7, #11]
 8008194:	4611      	mov	r1, r2
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800819e:	7dbb      	ldrb	r3, [r7, #22]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081a4:	7dbb      	ldrb	r3, [r7, #22]
 80081a6:	e000      	b.n	80081aa <USBD_LL_DataInStage+0x15c>
=======
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
 8009fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	4619      	mov	r1, r3
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 f8f3 	bl	800a198 <USBD_CoreFindEP>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
 8009fb8:	2bff      	cmp	r3, #255	; 0xff
 8009fba:	d025      	beq.n	800a008 <USBD_LL_DataInStage+0x15a>
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d122      	bne.n	800a008 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d11c      	bne.n	800a008 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009fce:	7dfa      	ldrb	r2, [r7, #23]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	32ae      	adds	r2, #174	; 0xae
 8009fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d014      	beq.n	800a008 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009fde:	7dfa      	ldrb	r2, [r7, #23]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009fe6:	7dfa      	ldrb	r2, [r7, #23]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	32ae      	adds	r2, #174	; 0xae
 8009fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	7afa      	ldrb	r2, [r7, #11]
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	4798      	blx	r3
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009ffe:	7dbb      	ldrb	r3, [r7, #22]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a004:	7dbb      	ldrb	r3, [r7, #22]
 800a006:	e000      	b.n	800a00a <USBD_LL_DataInStage+0x15c>
>>>>>>> Stashed changes
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< Updated upstream
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_Reset>:
=======
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBD_LL_Reset>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
=======
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
>>>>>>> Stashed changes
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
<<<<<<< Updated upstream
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d014      	beq.n	8008218 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6852      	ldr	r2, [r2, #4]
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	4611      	mov	r1, r2
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	73fb      	strb	r3, [r7, #15]
=======
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d014      	beq.n	800a078 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00e      	beq.n	800a078 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	6852      	ldr	r2, [r2, #4]
 800a066:	b2d2      	uxtb	r2, r2
 800a068:	4611      	mov	r1, r2
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	4798      	blx	r3
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a074:	2303      	movs	r3, #3
 800a076:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
<<<<<<< Updated upstream
 8008218:	2340      	movs	r3, #64	; 0x40
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 fba7 	bl	8009972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2240      	movs	r2, #64	; 0x40
 8008230:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	2200      	movs	r2, #0
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fb99 	bl	8009972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2240      	movs	r2, #64	; 0x40
 800824a:	621a      	str	r2, [r3, #32]

  return ret;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_LL_SetSpeed>:
=======
 800a078:	2340      	movs	r3, #64	; 0x40
 800a07a:	2200      	movs	r2, #0
 800a07c:	2100      	movs	r1, #0
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fba7 	bl	800b7d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2240      	movs	r2, #64	; 0x40
 800a090:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a094:	2340      	movs	r3, #64	; 0x40
 800a096:	2200      	movs	r2, #0
 800a098:	2180      	movs	r1, #128	; 0x80
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fb99 	bl	800b7d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2240      	movs	r2, #64	; 0x40
 800a0aa:	621a      	str	r2, [r3, #32]

  return ret;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_LL_SetSpeed>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< Updated upstream
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USBD_LL_Suspend>:
=======
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <USBD_LL_Suspend>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b04      	cmp	r3, #4
 8008288:	d006      	beq.n	8008298 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2204      	movs	r2, #4
 800829c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBD_LL_Resume>:
=======
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d006      	beq.n	800a0f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2204      	movs	r2, #4
 800a0fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <USBD_LL_Resume>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d106      	bne.n	80082d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USBD_LL_SOF>:
=======
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b04      	cmp	r3, #4
 800a120:	d106      	bne.n	800a130 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <USBD_LL_SOF>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d110      	bne.n	8008314 <USBD_LL_SOF+0x36>
=======
 800a13e:	b580      	push	{r7, lr}
 800a140:	b082      	sub	sp, #8
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d110      	bne.n	800a174 <USBD_LL_SOF+0x36>
>>>>>>> Stashed changes
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
<<<<<<< Updated upstream
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
=======
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d005      	beq.n	800a174 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
<<<<<<< Updated upstream
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_CoreFindIF>:
=======
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_CoreFindIF>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
<<<<<<< Updated upstream
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
=======
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
<<<<<<< Updated upstream
 800832a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_CoreFindEP>:
=======
 800a18a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USBD_CoreFindEP>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
<<<<<<< Updated upstream
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
=======
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
<<<<<<< Updated upstream
 8008344:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBD_GetEpDesc>:
=======
 800a1a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <USBD_GetEpDesc>:
>>>>>>> Stashed changes
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
<<<<<<< Updated upstream
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	429a      	cmp	r2, r3
 8008378:	d920      	bls.n	80083bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008382:	e013      	b.n	80083ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008384:	f107 030a 	add.w	r3, r7, #10
 8008388:	4619      	mov	r1, r3
 800838a:	6978      	ldr	r0, [r7, #20]
 800838c:	f000 f81b 	bl	80083c6 <USBD_GetNextDesc>
 8008390:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b05      	cmp	r3, #5
 8008398:	d108      	bne.n	80083ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	789b      	ldrb	r3, [r3, #2]
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d008      	beq.n	80083ba <USBD_GetEpDesc+0x68>
=======
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b086      	sub	sp, #24
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d920      	bls.n	800a21c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a1e2:	e013      	b.n	800a20c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a1e4:	f107 030a 	add.w	r3, r7, #10
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6978      	ldr	r0, [r7, #20]
 800a1ec:	f000 f81b 	bl	800a226 <USBD_GetNextDesc>
 800a1f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	785b      	ldrb	r3, [r3, #1]
 800a1f6:	2b05      	cmp	r3, #5
 800a1f8:	d108      	bne.n	800a20c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	789b      	ldrb	r3, [r3, #2]
 800a202:	78fa      	ldrb	r2, [r7, #3]
 800a204:	429a      	cmp	r2, r3
 800a206:	d008      	beq.n	800a21a <USBD_GetEpDesc+0x68>
>>>>>>> Stashed changes
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
<<<<<<< Updated upstream
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	885b      	ldrh	r3, [r3, #2]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	897b      	ldrh	r3, [r7, #10]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d8e5      	bhi.n	8008384 <USBD_GetEpDesc+0x32>
 80083b8:	e000      	b.n	80083bc <USBD_GetEpDesc+0x6a>
          break;
 80083ba:	bf00      	nop
=======
 800a208:	2300      	movs	r3, #0
 800a20a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	885b      	ldrh	r3, [r3, #2]
 800a210:	b29a      	uxth	r2, r3
 800a212:	897b      	ldrh	r3, [r7, #10]
 800a214:	429a      	cmp	r2, r3
 800a216:	d8e5      	bhi.n	800a1e4 <USBD_GetEpDesc+0x32>
 800a218:	e000      	b.n	800a21c <USBD_GetEpDesc+0x6a>
          break;
 800a21a:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }

  return (void *)pEpDesc;
<<<<<<< Updated upstream
 80083bc:	693b      	ldr	r3, [r7, #16]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_GetNextDesc>:
=======
 800a21c:	693b      	ldr	r3, [r7, #16]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_GetNextDesc>:
>>>>>>> Stashed changes
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
<<<<<<< Updated upstream
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	881a      	ldrh	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4413      	add	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4413      	add	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <SWAPBYTE>:
=======
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	881a      	ldrh	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4413      	add	r3, r2
 800a240:	b29a      	uxth	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4413      	add	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a252:	68fb      	ldr	r3, [r7, #12]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <SWAPBYTE>:
>>>>>>> Stashed changes

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
<<<<<<< Updated upstream
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
=======
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
<<<<<<< Updated upstream
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	3301      	adds	r3, #1
 8008416:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800841e:	8a3b      	ldrh	r3, [r7, #16]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	b21a      	sxth	r2, r3
 8008424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008428:	4313      	orrs	r3, r2
 800842a:	b21b      	sxth	r3, r3
 800842c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800842e:	89fb      	ldrh	r3, [r7, #14]
}
 8008430:	4618      	mov	r0, r3
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_StdDevReq>:
=======
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	3301      	adds	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a27e:	8a3b      	ldrh	r3, [r7, #16]
 800a280:	021b      	lsls	r3, r3, #8
 800a282:	b21a      	sxth	r2, r3
 800a284:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a288:	4313      	orrs	r3, r2
 800a28a:	b21b      	sxth	r3, r3
 800a28c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a28e:	89fb      	ldrh	r3, [r7, #14]
}
 800a290:	4618      	mov	r0, r3
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <USBD_StdDevReq>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008452:	2b40      	cmp	r3, #64	; 0x40
 8008454:	d005      	beq.n	8008462 <USBD_StdDevReq+0x26>
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d857      	bhi.n	800850a <USBD_StdDevReq+0xce>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00f      	beq.n	800847e <USBD_StdDevReq+0x42>
 800845e:	2b20      	cmp	r3, #32
 8008460:	d153      	bne.n	800850a <USBD_StdDevReq+0xce>
=======
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2b2:	2b40      	cmp	r3, #64	; 0x40
 800a2b4:	d005      	beq.n	800a2c2 <USBD_StdDevReq+0x26>
 800a2b6:	2b40      	cmp	r3, #64	; 0x40
 800a2b8:	d857      	bhi.n	800a36a <USBD_StdDevReq+0xce>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00f      	beq.n	800a2de <USBD_StdDevReq+0x42>
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d153      	bne.n	800a36a <USBD_StdDevReq+0xce>
>>>>>>> Stashed changes
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
<<<<<<< Updated upstream
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	32ae      	adds	r2, #174	; 0xae
 800846c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
      break;
 800847c:	e04a      	b.n	8008514 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b09      	cmp	r3, #9
 8008484:	d83b      	bhi.n	80084fe <USBD_StdDevReq+0xc2>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <USBD_StdDevReq+0x50>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084e1 	.word	0x080084e1
 8008490:	080084f5 	.word	0x080084f5
 8008494:	080084ff 	.word	0x080084ff
 8008498:	080084eb 	.word	0x080084eb
 800849c:	080084ff 	.word	0x080084ff
 80084a0:	080084bf 	.word	0x080084bf
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084ff 	.word	0x080084ff
 80084ac:	080084d7 	.word	0x080084d7
 80084b0:	080084c9 	.word	0x080084c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa3c 	bl	8008934 <USBD_GetDescriptor>
          break;
 80084bc:	e024      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fbcb 	bl	8008c5c <USBD_SetAddress>
          break;
 80084c6:	e01f      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc0a 	bl	8008ce4 <USBD_SetConfig>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
          break;
 80084d4:	e018      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fcad 	bl	8008e38 <USBD_GetConfig>
          break;
 80084de:	e013      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fcde 	bl	8008ea4 <USBD_GetStatus>
          break;
 80084e8:	e00e      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fd0d 	bl	8008f0c <USBD_SetFeature>
          break;
 80084f2:	e009      	b.n	8008508 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fd31 	bl	8008f5e <USBD_ClrFeature>
          break;
 80084fc:	e004      	b.n	8008508 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fd88 	bl	8009016 <USBD_CtlError>
          break;
 8008506:	bf00      	nop
      }
      break;
 8008508:	e004      	b.n	8008514 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fd82 	bl	8009016 <USBD_CtlError>
      break;
 8008512:	bf00      	nop
  }

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop

08008520 <USBD_StdItfReq>:
=======
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	32ae      	adds	r2, #174	; 0xae
 800a2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	4798      	blx	r3
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]
      break;
 800a2dc:	e04a      	b.n	800a374 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b09      	cmp	r3, #9
 800a2e4:	d83b      	bhi.n	800a35e <USBD_StdDevReq+0xc2>
 800a2e6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <USBD_StdDevReq+0x50>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a341 	.word	0x0800a341
 800a2f0:	0800a355 	.word	0x0800a355
 800a2f4:	0800a35f 	.word	0x0800a35f
 800a2f8:	0800a34b 	.word	0x0800a34b
 800a2fc:	0800a35f 	.word	0x0800a35f
 800a300:	0800a31f 	.word	0x0800a31f
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a35f 	.word	0x0800a35f
 800a30c:	0800a337 	.word	0x0800a337
 800a310:	0800a329 	.word	0x0800a329
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fa3c 	bl	800a794 <USBD_GetDescriptor>
          break;
 800a31c:	e024      	b.n	800a368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fbcb 	bl	800aabc <USBD_SetAddress>
          break;
 800a326:	e01f      	b.n	800a368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fc0a 	bl	800ab44 <USBD_SetConfig>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
          break;
 800a334:	e018      	b.n	800a368 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fcad 	bl	800ac98 <USBD_GetConfig>
          break;
 800a33e:	e013      	b.n	800a368 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fcde 	bl	800ad04 <USBD_GetStatus>
          break;
 800a348:	e00e      	b.n	800a368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fd0d 	bl	800ad6c <USBD_SetFeature>
          break;
 800a352:	e009      	b.n	800a368 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fd31 	bl	800adbe <USBD_ClrFeature>
          break;
 800a35c:	e004      	b.n	800a368 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fd88 	bl	800ae76 <USBD_CtlError>
          break;
 800a366:	bf00      	nop
      }
      break;
 800a368:	e004      	b.n	800a374 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fd82 	bl	800ae76 <USBD_CtlError>
      break;
 800a372:	bf00      	nop
  }

  return ret;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop

0800a380 <USBD_StdItfReq>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d005      	beq.n	8008546 <USBD_StdItfReq+0x26>
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d852      	bhi.n	80085e4 <USBD_StdItfReq+0xc4>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <USBD_StdItfReq+0x26>
 8008542:	2b20      	cmp	r3, #32
 8008544:	d14e      	bne.n	80085e4 <USBD_StdItfReq+0xc4>
=======
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a396:	2b40      	cmp	r3, #64	; 0x40
 800a398:	d005      	beq.n	800a3a6 <USBD_StdItfReq+0x26>
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	d852      	bhi.n	800a444 <USBD_StdItfReq+0xc4>
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <USBD_StdItfReq+0x26>
 800a3a2:	2b20      	cmp	r3, #32
 800a3a4:	d14e      	bne.n	800a444 <USBD_StdItfReq+0xc4>
>>>>>>> Stashed changes
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< Updated upstream
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854c:	b2db      	uxtb	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	2b02      	cmp	r3, #2
 8008552:	d840      	bhi.n	80085d6 <USBD_StdItfReq+0xb6>
=======
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d840      	bhi.n	800a436 <USBD_StdItfReq+0xb6>
>>>>>>> Stashed changes
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< Updated upstream
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	889b      	ldrh	r3, [r3, #4]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	d836      	bhi.n	80085cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	889b      	ldrh	r3, [r3, #4]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff fed9 	bl	800831e <USBD_CoreFindIF>
 800856c:	4603      	mov	r3, r0
 800856e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2bff      	cmp	r3, #255	; 0xff
 8008574:	d01d      	beq.n	80085b2 <USBD_StdItfReq+0x92>
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11a      	bne.n	80085b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800857c:	7bba      	ldrb	r2, [r7, #14]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	32ae      	adds	r2, #174	; 0xae
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00f      	beq.n	80085ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800858c:	7bba      	ldrb	r2, [r7, #14]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008594:	7bba      	ldrb	r2, [r7, #14]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	; 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085aa:	e004      	b.n	80085b6 <USBD_StdItfReq+0x96>
=======
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	889b      	ldrh	r3, [r3, #4]
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d836      	bhi.n	800a42c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	889b      	ldrh	r3, [r3, #4]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff fed9 	bl	800a17e <USBD_CoreFindIF>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	2bff      	cmp	r3, #255	; 0xff
 800a3d4:	d01d      	beq.n	800a412 <USBD_StdItfReq+0x92>
 800a3d6:	7bbb      	ldrb	r3, [r7, #14]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d11a      	bne.n	800a412 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a3dc:	7bba      	ldrb	r2, [r7, #14]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	32ae      	adds	r2, #174	; 0xae
 800a3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00f      	beq.n	800a40c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a3ec:	7bba      	ldrb	r2, [r7, #14]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3f4:	7bba      	ldrb	r2, [r7, #14]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	32ae      	adds	r2, #174	; 0xae
 800a3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	4798      	blx	r3
 800a406:	4603      	mov	r3, r0
 800a408:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a40a:	e004      	b.n	800a416 <USBD_StdItfReq+0x96>
>>>>>>> Stashed changes
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
<<<<<<< Updated upstream
 80085ac:	2303      	movs	r3, #3
 80085ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085b0:	e001      	b.n	80085b6 <USBD_StdItfReq+0x96>
=======
 800a40c:	2303      	movs	r3, #3
 800a40e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a410:	e001      	b.n	800a416 <USBD_StdItfReq+0x96>
>>>>>>> Stashed changes
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
<<<<<<< Updated upstream
 80085b2:	2303      	movs	r3, #3
 80085b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	88db      	ldrh	r3, [r3, #6]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d110      	bne.n	80085e0 <USBD_StdItfReq+0xc0>
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10d      	bne.n	80085e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fdf1 	bl	80091ac <USBD_CtlSendStatus>
=======
 800a412:	2303      	movs	r3, #3
 800a414:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	88db      	ldrh	r3, [r3, #6]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d110      	bne.n	800a440 <USBD_StdItfReq+0xc0>
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10d      	bne.n	800a440 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fdf1 	bl	800b00c <USBD_CtlSendStatus>
>>>>>>> Stashed changes
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< Updated upstream
 80085ca:	e009      	b.n	80085e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fd21 	bl	8009016 <USBD_CtlError>
          break;
 80085d4:	e004      	b.n	80085e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fd1c 	bl	8009016 <USBD_CtlError>
          break;
 80085de:	e000      	b.n	80085e2 <USBD_StdItfReq+0xc2>
          break;
 80085e0:	bf00      	nop
      }
      break;
 80085e2:	e004      	b.n	80085ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fd15 	bl	8009016 <USBD_CtlError>
      break;
 80085ec:	bf00      	nop
  }

  return ret;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_StdEPReq>:
=======
 800a42a:	e009      	b.n	800a440 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fd21 	bl	800ae76 <USBD_CtlError>
          break;
 800a434:	e004      	b.n	800a440 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fd1c 	bl	800ae76 <USBD_CtlError>
          break;
 800a43e:	e000      	b.n	800a442 <USBD_StdItfReq+0xc2>
          break;
 800a440:	bf00      	nop
      }
      break;
 800a442:	e004      	b.n	800a44e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fd15 	bl	800ae76 <USBD_CtlError>
      break;
 800a44c:	bf00      	nop
  }

  return ret;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_StdEPReq>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
=======
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
<<<<<<< Updated upstream
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	889b      	ldrh	r3, [r3, #4]
 800860a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d007      	beq.n	8008628 <USBD_StdEPReq+0x30>
 8008618:	2b40      	cmp	r3, #64	; 0x40
 800861a:	f200 817f 	bhi.w	800891c <USBD_StdEPReq+0x324>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d02a      	beq.n	8008678 <USBD_StdEPReq+0x80>
 8008622:	2b20      	cmp	r3, #32
 8008624:	f040 817a 	bne.w	800891c <USBD_StdEPReq+0x324>
=======
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	889b      	ldrh	r3, [r3, #4]
 800a46a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a474:	2b40      	cmp	r3, #64	; 0x40
 800a476:	d007      	beq.n	800a488 <USBD_StdEPReq+0x30>
 800a478:	2b40      	cmp	r3, #64	; 0x40
 800a47a:	f200 817f 	bhi.w	800a77c <USBD_StdEPReq+0x324>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d02a      	beq.n	800a4d8 <USBD_StdEPReq+0x80>
 800a482:	2b20      	cmp	r3, #32
 800a484:	f040 817a 	bne.w	800a77c <USBD_StdEPReq+0x324>
>>>>>>> Stashed changes
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
<<<<<<< Updated upstream
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff fe83 	bl	8008338 <USBD_CoreFindEP>
 8008632:	4603      	mov	r3, r0
 8008634:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008636:	7b7b      	ldrb	r3, [r7, #13]
 8008638:	2bff      	cmp	r3, #255	; 0xff
 800863a:	f000 8174 	beq.w	8008926 <USBD_StdEPReq+0x32e>
 800863e:	7b7b      	ldrb	r3, [r7, #13]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f040 8170 	bne.w	8008926 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008646:	7b7a      	ldrb	r2, [r7, #13]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800864e:	7b7a      	ldrb	r2, [r7, #13]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	32ae      	adds	r2, #174	; 0xae
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 8163 	beq.w	8008926 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008660:	7b7a      	ldrb	r2, [r7, #13]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	32ae      	adds	r2, #174	; 0xae
 8008666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008676:	e156      	b.n	8008926 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b03      	cmp	r3, #3
 800867e:	d008      	beq.n	8008692 <USBD_StdEPReq+0x9a>
 8008680:	2b03      	cmp	r3, #3
 8008682:	f300 8145 	bgt.w	8008910 <USBD_StdEPReq+0x318>
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 809b 	beq.w	80087c2 <USBD_StdEPReq+0x1ca>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d03c      	beq.n	800870a <USBD_StdEPReq+0x112>
 8008690:	e13e      	b.n	8008910 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d002      	beq.n	80086a4 <USBD_StdEPReq+0xac>
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d016      	beq.n	80086d0 <USBD_StdEPReq+0xd8>
 80086a2:	e02c      	b.n	80086fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00d      	beq.n	80086c6 <USBD_StdEPReq+0xce>
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d00a      	beq.n	80086c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f9a1 	bl	80099fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ba:	2180      	movs	r1, #128	; 0x80
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 f99d 	bl	80099fc <USBD_LL_StallEP>
 80086c2:	bf00      	nop
=======
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7ff fe83 	bl	800a198 <USBD_CoreFindEP>
 800a492:	4603      	mov	r3, r0
 800a494:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a496:	7b7b      	ldrb	r3, [r7, #13]
 800a498:	2bff      	cmp	r3, #255	; 0xff
 800a49a:	f000 8174 	beq.w	800a786 <USBD_StdEPReq+0x32e>
 800a49e:	7b7b      	ldrb	r3, [r7, #13]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f040 8170 	bne.w	800a786 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a4a6:	7b7a      	ldrb	r2, [r7, #13]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a4ae:	7b7a      	ldrb	r2, [r7, #13]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	32ae      	adds	r2, #174	; 0xae
 800a4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 8163 	beq.w	800a786 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a4c0:	7b7a      	ldrb	r2, [r7, #13]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	32ae      	adds	r2, #174	; 0xae
 800a4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	4798      	blx	r3
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4d6:	e156      	b.n	800a786 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d008      	beq.n	800a4f2 <USBD_StdEPReq+0x9a>
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	f300 8145 	bgt.w	800a770 <USBD_StdEPReq+0x318>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 809b 	beq.w	800a622 <USBD_StdEPReq+0x1ca>
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d03c      	beq.n	800a56a <USBD_StdEPReq+0x112>
 800a4f0:	e13e      	b.n	800a770 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d002      	beq.n	800a504 <USBD_StdEPReq+0xac>
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d016      	beq.n	800a530 <USBD_StdEPReq+0xd8>
 800a502:	e02c      	b.n	800a55e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a504:	7bbb      	ldrb	r3, [r7, #14]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00d      	beq.n	800a526 <USBD_StdEPReq+0xce>
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	2b80      	cmp	r3, #128	; 0x80
 800a50e:	d00a      	beq.n	800a526 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a510:	7bbb      	ldrb	r3, [r7, #14]
 800a512:	4619      	mov	r1, r3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f001 f9a1 	bl	800b85c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a51a:	2180      	movs	r1, #128	; 0x80
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 f99d 	bl	800b85c <USBD_LL_StallEP>
 800a522:	bf00      	nop
>>>>>>> Stashed changes
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< Updated upstream
 80086c4:	e020      	b.n	8008708 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fca4 	bl	8009016 <USBD_CtlError>
              break;
 80086ce:	e01b      	b.n	8008708 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10e      	bne.n	80086f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <USBD_StdEPReq+0xfe>
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b80      	cmp	r3, #128	; 0x80
 80086e2:	d008      	beq.n	80086f6 <USBD_StdEPReq+0xfe>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f983 	bl	80099fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fd58 	bl	80091ac <USBD_CtlSendStatus>

              break;
 80086fc:	e004      	b.n	8008708 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fc88 	bl	8009016 <USBD_CtlError>
              break;
 8008706:	bf00      	nop
          }
          break;
 8008708:	e107      	b.n	800891a <USBD_StdEPReq+0x322>
=======
 800a524:	e020      	b.n	800a568 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fca4 	bl	800ae76 <USBD_CtlError>
              break;
 800a52e:	e01b      	b.n	800a568 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	885b      	ldrh	r3, [r3, #2]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10e      	bne.n	800a556 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00b      	beq.n	800a556 <USBD_StdEPReq+0xfe>
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b80      	cmp	r3, #128	; 0x80
 800a542:	d008      	beq.n	800a556 <USBD_StdEPReq+0xfe>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	88db      	ldrh	r3, [r3, #6]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d104      	bne.n	800a556 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 f983 	bl	800b85c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fd58 	bl	800b00c <USBD_CtlSendStatus>

              break;
 800a55c:	e004      	b.n	800a568 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fc88 	bl	800ae76 <USBD_CtlError>
              break;
 800a566:	bf00      	nop
          }
          break;
 800a568:	e107      	b.n	800a77a <USBD_StdEPReq+0x322>
>>>>>>> Stashed changes

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< Updated upstream
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d002      	beq.n	800871c <USBD_StdEPReq+0x124>
 8008716:	2b03      	cmp	r3, #3
 8008718:	d016      	beq.n	8008748 <USBD_StdEPReq+0x150>
 800871a:	e04b      	b.n	80087b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00d      	beq.n	800873e <USBD_StdEPReq+0x146>
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b80      	cmp	r3, #128	; 0x80
 8008726:	d00a      	beq.n	800873e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 f965 	bl	80099fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008732:	2180      	movs	r1, #128	; 0x80
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f961 	bl	80099fc <USBD_LL_StallEP>
 800873a:	bf00      	nop
=======
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b02      	cmp	r3, #2
 800a574:	d002      	beq.n	800a57c <USBD_StdEPReq+0x124>
 800a576:	2b03      	cmp	r3, #3
 800a578:	d016      	beq.n	800a5a8 <USBD_StdEPReq+0x150>
 800a57a:	e04b      	b.n	800a614 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00d      	beq.n	800a59e <USBD_StdEPReq+0x146>
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	2b80      	cmp	r3, #128	; 0x80
 800a586:	d00a      	beq.n	800a59e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a588:	7bbb      	ldrb	r3, [r7, #14]
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f001 f965 	bl	800b85c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a592:	2180      	movs	r1, #128	; 0x80
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 f961 	bl	800b85c <USBD_LL_StallEP>
 800a59a:	bf00      	nop
>>>>>>> Stashed changes
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< Updated upstream
 800873c:	e040      	b.n	80087c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fc68 	bl	8009016 <USBD_CtlError>
              break;
 8008746:	e03b      	b.n	80087c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	885b      	ldrh	r3, [r3, #2]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d136      	bne.n	80087be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 f96b 	bl	8009a3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fd21 	bl	80091ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fde2 	bl	8008338 <USBD_CoreFindEP>
 8008774:	4603      	mov	r3, r0
 8008776:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008778:	7b7b      	ldrb	r3, [r7, #13]
 800877a:	2bff      	cmp	r3, #255	; 0xff
 800877c:	d01f      	beq.n	80087be <USBD_StdEPReq+0x1c6>
 800877e:	7b7b      	ldrb	r3, [r7, #13]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11c      	bne.n	80087be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008784:	7b7a      	ldrb	r2, [r7, #13]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800878c:	7b7a      	ldrb	r2, [r7, #13]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32ae      	adds	r2, #174	; 0xae
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d010      	beq.n	80087be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800879c:	7b7a      	ldrb	r2, [r7, #13]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	32ae      	adds	r2, #174	; 0xae
 80087a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
=======
 800a59c:	e040      	b.n	800a620 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fc68 	bl	800ae76 <USBD_CtlError>
              break;
 800a5a6:	e03b      	b.n	800a620 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	885b      	ldrh	r3, [r3, #2]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d136      	bne.n	800a61e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d004      	beq.n	800a5c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f001 f96b 	bl	800b89a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fd21 	bl	800b00c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fde2 	bl	800a198 <USBD_CoreFindEP>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5d8:	7b7b      	ldrb	r3, [r7, #13]
 800a5da:	2bff      	cmp	r3, #255	; 0xff
 800a5dc:	d01f      	beq.n	800a61e <USBD_StdEPReq+0x1c6>
 800a5de:	7b7b      	ldrb	r3, [r7, #13]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11c      	bne.n	800a61e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a5e4:	7b7a      	ldrb	r2, [r7, #13]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a5ec:	7b7a      	ldrb	r2, [r7, #13]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32ae      	adds	r2, #174	; 0xae
 800a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d010      	beq.n	800a61e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5fc:	7b7a      	ldrb	r2, [r7, #13]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	32ae      	adds	r2, #174	; 0xae
 800a602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
                  }
                }
              }
              break;
<<<<<<< Updated upstream
 80087b2:	e004      	b.n	80087be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc2d 	bl	8009016 <USBD_CtlError>
              break;
 80087bc:	e000      	b.n	80087c0 <USBD_StdEPReq+0x1c8>
              break;
 80087be:	bf00      	nop
          }
          break;
 80087c0:	e0ab      	b.n	800891a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d002      	beq.n	80087d4 <USBD_StdEPReq+0x1dc>
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d032      	beq.n	8008838 <USBD_StdEPReq+0x240>
 80087d2:	e097      	b.n	8008904 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <USBD_StdEPReq+0x1f2>
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	2b80      	cmp	r3, #128	; 0x80
 80087de:	d004      	beq.n	80087ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fc17 	bl	8009016 <USBD_CtlError>
                break;
 80087e8:	e091      	b.n	800890e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da0b      	bge.n	800880a <USBD_StdEPReq+0x212>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	3310      	adds	r3, #16
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	4413      	add	r3, r2
 8008806:	3304      	adds	r3, #4
 8008808:	e00b      	b.n	8008822 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	4413      	add	r3, r2
 8008820:	3304      	adds	r3, #4
 8008822:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2202      	movs	r2, #2
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fc61 	bl	80090f8 <USBD_CtlSendData>
              break;
 8008836:	e06a      	b.n	800890e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	da11      	bge.n	8008864 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	f003 020f 	and.w	r2, r3, #15
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	3324      	adds	r3, #36	; 0x24
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d117      	bne.n	800888a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fbda 	bl	8009016 <USBD_CtlError>
                  break;
 8008862:	e054      	b.n	800890e <USBD_StdEPReq+0x316>
=======
 800a612:	e004      	b.n	800a61e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fc2d 	bl	800ae76 <USBD_CtlError>
              break;
 800a61c:	e000      	b.n	800a620 <USBD_StdEPReq+0x1c8>
              break;
 800a61e:	bf00      	nop
          }
          break;
 800a620:	e0ab      	b.n	800a77a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d002      	beq.n	800a634 <USBD_StdEPReq+0x1dc>
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d032      	beq.n	800a698 <USBD_StdEPReq+0x240>
 800a632:	e097      	b.n	800a764 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d007      	beq.n	800a64a <USBD_StdEPReq+0x1f2>
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	2b80      	cmp	r3, #128	; 0x80
 800a63e:	d004      	beq.n	800a64a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fc17 	bl	800ae76 <USBD_CtlError>
                break;
 800a648:	e091      	b.n	800a76e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a64a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	da0b      	bge.n	800a66a <USBD_StdEPReq+0x212>
 800a652:	7bbb      	ldrb	r3, [r7, #14]
 800a654:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	3310      	adds	r3, #16
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	4413      	add	r3, r2
 800a666:	3304      	adds	r3, #4
 800a668:	e00b      	b.n	800a682 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a670:	4613      	mov	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4413      	add	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	4413      	add	r3, r2
 800a680:	3304      	adds	r3, #4
 800a682:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2202      	movs	r2, #2
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fc61 	bl	800af58 <USBD_CtlSendData>
              break;
 800a696:	e06a      	b.n	800a76e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da11      	bge.n	800a6c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	f003 020f 	and.w	r2, r3, #15
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	3324      	adds	r3, #36	; 0x24
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d117      	bne.n	800a6ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fbda 	bl	800ae76 <USBD_CtlError>
                  break;
 800a6c2:	e054      	b.n	800a76e <USBD_StdEPReq+0x316>
>>>>>>> Stashed changes
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< Updated upstream
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	f003 020f 	and.w	r2, r3, #15
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d104      	bne.n	800888a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fbc7 	bl	8009016 <USBD_CtlError>
                  break;
 8008888:	e041      	b.n	800890e <USBD_StdEPReq+0x316>
=======
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	f003 020f 	and.w	r2, r3, #15
 800a6ca:	6879      	ldr	r1, [r7, #4]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	440b      	add	r3, r1
 800a6d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fbc7 	bl	800ae76 <USBD_CtlError>
                  break;
 800a6e8:	e041      	b.n	800a76e <USBD_StdEPReq+0x316>
>>>>>>> Stashed changes
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< Updated upstream
 800888a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800888e:	2b00      	cmp	r3, #0
 8008890:	da0b      	bge.n	80088aa <USBD_StdEPReq+0x2b2>
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	3310      	adds	r3, #16
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	3304      	adds	r3, #4
 80088a8:	e00b      	b.n	80088c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	4413      	add	r3, r2
 80088c0:	3304      	adds	r3, #4
 80088c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <USBD_StdEPReq+0x2d8>
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b80      	cmp	r3, #128	; 0x80
 80088ce:	d103      	bne.n	80088d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e00e      	b.n	80088f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 f8cb 	bl	8009a78 <USBD_LL_IsStallEP>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2201      	movs	r2, #1
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e002      	b.n	80088f6 <USBD_StdEPReq+0x2fe>
=======
 800a6ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	da0b      	bge.n	800a70a <USBD_StdEPReq+0x2b2>
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	3310      	adds	r3, #16
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	4413      	add	r3, r2
 800a706:	3304      	adds	r3, #4
 800a708:	e00b      	b.n	800a722 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a710:	4613      	mov	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	4413      	add	r3, r2
 800a720:	3304      	adds	r3, #4
 800a722:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <USBD_StdEPReq+0x2d8>
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	2b80      	cmp	r3, #128	; 0x80
 800a72e:	d103      	bne.n	800a738 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	601a      	str	r2, [r3, #0]
 800a736:	e00e      	b.n	800a756 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a738:	7bbb      	ldrb	r3, [r7, #14]
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 f8cb 	bl	800b8d8 <USBD_LL_IsStallEP>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d003      	beq.n	800a750 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2201      	movs	r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e002      	b.n	800a756 <USBD_StdEPReq+0x2fe>
>>>>>>> Stashed changes
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< Updated upstream
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2202      	movs	r2, #2
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fbfb 	bl	80090f8 <USBD_CtlSendData>
              break;
 8008902:	e004      	b.n	800890e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fb85 	bl	8009016 <USBD_CtlError>
              break;
 800890c:	bf00      	nop
          }
          break;
 800890e:	e004      	b.n	800891a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb7f 	bl	8009016 <USBD_CtlError>
          break;
 8008918:	bf00      	nop
      }
      break;
 800891a:	e005      	b.n	8008928 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fb79 	bl	8009016 <USBD_CtlError>
      break;
 8008924:	e000      	b.n	8008928 <USBD_StdEPReq+0x330>
      break;
 8008926:	bf00      	nop
  }

  return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <USBD_GetDescriptor>:
=======
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2202      	movs	r2, #2
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fbfb 	bl	800af58 <USBD_CtlSendData>
              break;
 800a762:	e004      	b.n	800a76e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fb85 	bl	800ae76 <USBD_CtlError>
              break;
 800a76c:	bf00      	nop
          }
          break;
 800a76e:	e004      	b.n	800a77a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fb7f 	bl	800ae76 <USBD_CtlError>
          break;
 800a778:	bf00      	nop
      }
      break;
 800a77a:	e005      	b.n	800a788 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fb79 	bl	800ae76 <USBD_CtlError>
      break;
 800a784:	e000      	b.n	800a788 <USBD_StdEPReq+0x330>
      break;
 800a786:	bf00      	nop
  }

  return ret;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <USBD_GetDescriptor>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	2b0e      	cmp	r3, #14
 8008956:	f200 8152 	bhi.w	8008bfe <USBD_GetDescriptor+0x2ca>
 800895a:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <USBD_GetDescriptor+0x2c>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	080089d1 	.word	0x080089d1
 8008964:	080089e9 	.word	0x080089e9
 8008968:	08008a29 	.word	0x08008a29
 800896c:	08008bff 	.word	0x08008bff
 8008970:	08008bff 	.word	0x08008bff
 8008974:	08008b9f 	.word	0x08008b9f
 8008978:	08008bcb 	.word	0x08008bcb
 800897c:	08008bff 	.word	0x08008bff
 8008980:	08008bff 	.word	0x08008bff
 8008984:	08008bff 	.word	0x08008bff
 8008988:	08008bff 	.word	0x08008bff
 800898c:	08008bff 	.word	0x08008bff
 8008990:	08008bff 	.word	0x08008bff
 8008994:	08008bff 	.word	0x08008bff
 8008998:	0800899d 	.word	0x0800899d
=======
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	885b      	ldrh	r3, [r3, #2]
 800a7ae:	0a1b      	lsrs	r3, r3, #8
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	2b0e      	cmp	r3, #14
 800a7b6:	f200 8152 	bhi.w	800aa5e <USBD_GetDescriptor+0x2ca>
 800a7ba:	a201      	add	r2, pc, #4	; (adr r2, 800a7c0 <USBD_GetDescriptor+0x2c>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a831 	.word	0x0800a831
 800a7c4:	0800a849 	.word	0x0800a849
 800a7c8:	0800a889 	.word	0x0800a889
 800a7cc:	0800aa5f 	.word	0x0800aa5f
 800a7d0:	0800aa5f 	.word	0x0800aa5f
 800a7d4:	0800a9ff 	.word	0x0800a9ff
 800a7d8:	0800aa2b 	.word	0x0800aa2b
 800a7dc:	0800aa5f 	.word	0x0800aa5f
 800a7e0:	0800aa5f 	.word	0x0800aa5f
 800a7e4:	0800aa5f 	.word	0x0800aa5f
 800a7e8:	0800aa5f 	.word	0x0800aa5f
 800a7ec:	0800aa5f 	.word	0x0800aa5f
 800a7f0:	0800aa5f 	.word	0x0800aa5f
 800a7f4:	0800aa5f 	.word	0x0800aa5f
 800a7f8:	0800a7fd 	.word	0x0800a7fd
>>>>>>> Stashed changes
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
<<<<<<< Updated upstream
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
=======
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a802:	69db      	ldr	r3, [r3, #28]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00b      	beq.n	800a820 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	7c12      	ldrb	r2, [r2, #16]
 800a814:	f107 0108 	add.w	r1, r7, #8
 800a818:	4610      	mov	r0, r2
 800a81a:	4798      	blx	r3
 800a81c:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< Updated upstream
 80089be:	e126      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fb27 	bl	8009016 <USBD_CtlError>
        err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
      break;
 80089ce:	e11e      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
      break;
 80089e6:	e112      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	7c1b      	ldrb	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <USBD_GetDescriptor+0xd8>
=======
 800a81e:	e126      	b.n	800aa6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fb27 	bl	800ae76 <USBD_CtlError>
        err++;
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	3301      	adds	r3, #1
 800a82c:	72fb      	strb	r3, [r7, #11]
      break;
 800a82e:	e11e      	b.n	800aa6e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	7c12      	ldrb	r2, [r2, #16]
 800a83c:	f107 0108 	add.w	r1, r7, #8
 800a840:	4610      	mov	r0, r2
 800a842:	4798      	blx	r3
 800a844:	60f8      	str	r0, [r7, #12]
      break;
 800a846:	e112      	b.n	800aa6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7c1b      	ldrb	r3, [r3, #16]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10d      	bne.n	800a86c <USBD_GetDescriptor+0xd8>
>>>>>>> Stashed changes
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
<<<<<<< Updated upstream
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f8:	f107 0208 	add.w	r2, r7, #8
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
 8008a00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3301      	adds	r3, #1
 8008a06:	2202      	movs	r2, #2
 8008a08:	701a      	strb	r2, [r3, #0]
=======
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a858:	f107 0208 	add.w	r2, r7, #8
 800a85c:	4610      	mov	r0, r2
 800a85e:	4798      	blx	r3
 800a860:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3301      	adds	r3, #1
 800a866:	2202      	movs	r2, #2
 800a868:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< Updated upstream
 8008a0a:	e100      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	f107 0208 	add.w	r2, r7, #8
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	2202      	movs	r2, #2
 8008a24:	701a      	strb	r2, [r3, #0]
      break;
 8008a26:	e0f2      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	885b      	ldrh	r3, [r3, #2]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	f200 80ac 	bhi.w	8008b8c <USBD_GetDescriptor+0x258>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <USBD_GetDescriptor+0x108>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a55 	.word	0x08008a55
 8008a40:	08008a89 	.word	0x08008a89
 8008a44:	08008abd 	.word	0x08008abd
 8008a48:	08008af1 	.word	0x08008af1
 8008a4c:	08008b25 	.word	0x08008b25
 8008a50:	08008b59 	.word	0x08008b59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
=======
 800a86a:	e100      	b.n	800aa6e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	f107 0208 	add.w	r2, r7, #8
 800a878:	4610      	mov	r0, r2
 800a87a:	4798      	blx	r3
 800a87c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3301      	adds	r3, #1
 800a882:	2202      	movs	r2, #2
 800a884:	701a      	strb	r2, [r3, #0]
      break;
 800a886:	e0f2      	b.n	800aa6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	885b      	ldrh	r3, [r3, #2]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b05      	cmp	r3, #5
 800a890:	f200 80ac 	bhi.w	800a9ec <USBD_GetDescriptor+0x258>
 800a894:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <USBD_GetDescriptor+0x108>)
 800a896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89a:	bf00      	nop
 800a89c:	0800a8b5 	.word	0x0800a8b5
 800a8a0:	0800a8e9 	.word	0x0800a8e9
 800a8a4:	0800a91d 	.word	0x0800a91d
 800a8a8:	0800a951 	.word	0x0800a951
 800a8ac:	0800a985 	.word	0x0800a985
 800a8b0:	0800a9b9 	.word	0x0800a9b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00b      	beq.n	800a8d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7c12      	ldrb	r2, [r2, #16]
 800a8cc:	f107 0108 	add.w	r1, r7, #8
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4798      	blx	r3
 800a8d4:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 8008a76:	e091      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 facb 	bl	8009016 <USBD_CtlError>
            err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
          break;
 8008a86:	e089      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	7c12      	ldrb	r2, [r2, #16]
 8008aa0:	f107 0108 	add.w	r1, r7, #8
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	60f8      	str	r0, [r7, #12]
=======
 800a8d6:	e091      	b.n	800a9fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 facb 	bl	800ae76 <USBD_CtlError>
            err++;
 800a8e0:	7afb      	ldrb	r3, [r7, #11]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8e6:	e089      	b.n	800a9fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	7c12      	ldrb	r2, [r2, #16]
 800a900:	f107 0108 	add.w	r1, r7, #8
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 8008aaa:	e077      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fab1 	bl	8009016 <USBD_CtlError>
            err++;
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aba:	e06f      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00b      	beq.n	8008ae0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	7c12      	ldrb	r2, [r2, #16]
 8008ad4:	f107 0108 	add.w	r1, r7, #8
 8008ad8:	4610      	mov	r0, r2
 8008ada:	4798      	blx	r3
 8008adc:	60f8      	str	r0, [r7, #12]
=======
 800a90a:	e077      	b.n	800a9fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fab1 	bl	800ae76 <USBD_CtlError>
            err++;
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	3301      	adds	r3, #1
 800a918:	72fb      	strb	r3, [r7, #11]
          break;
 800a91a:	e06f      	b.n	800a9fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00b      	beq.n	800a940 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	7c12      	ldrb	r2, [r2, #16]
 800a934:	f107 0108 	add.w	r1, r7, #8
 800a938:	4610      	mov	r0, r2
 800a93a:	4798      	blx	r3
 800a93c:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 8008ade:	e05d      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa97 	bl	8009016 <USBD_CtlError>
            err++;
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	3301      	adds	r3, #1
 8008aec:	72fb      	strb	r3, [r7, #11]
          break;
 8008aee:	e055      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7c12      	ldrb	r2, [r2, #16]
 8008b08:	f107 0108 	add.w	r1, r7, #8
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4798      	blx	r3
 8008b10:	60f8      	str	r0, [r7, #12]
=======
 800a93e:	e05d      	b.n	800a9fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fa97 	bl	800ae76 <USBD_CtlError>
            err++;
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	3301      	adds	r3, #1
 800a94c:	72fb      	strb	r3, [r7, #11]
          break;
 800a94e:	e055      	b.n	800a9fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	7c12      	ldrb	r2, [r2, #16]
 800a968:	f107 0108 	add.w	r1, r7, #8
 800a96c:	4610      	mov	r0, r2
 800a96e:	4798      	blx	r3
 800a970:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 8008b12:	e043      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa7d 	bl	8009016 <USBD_CtlError>
            err++;
 8008b1c:	7afb      	ldrb	r3, [r7, #11]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	72fb      	strb	r3, [r7, #11]
          break;
 8008b22:	e03b      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7c12      	ldrb	r2, [r2, #16]
 8008b3c:	f107 0108 	add.w	r1, r7, #8
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	60f8      	str	r0, [r7, #12]
=======
 800a972:	e043      	b.n	800a9fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa7d 	bl	800ae76 <USBD_CtlError>
            err++;
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	3301      	adds	r3, #1
 800a980:	72fb      	strb	r3, [r7, #11]
          break;
 800a982:	e03b      	b.n	800a9fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	7c12      	ldrb	r2, [r2, #16]
 800a99c:	f107 0108 	add.w	r1, r7, #8
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4798      	blx	r3
 800a9a4:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 8008b46:	e029      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fa63 	bl	8009016 <USBD_CtlError>
            err++;
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	3301      	adds	r3, #1
 8008b54:	72fb      	strb	r3, [r7, #11]
          break;
 8008b56:	e021      	b.n	8008b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
=======
 800a9a6:	e029      	b.n	800a9fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa63 	bl	800ae76 <USBD_CtlError>
            err++;
 800a9b0:	7afb      	ldrb	r3, [r7, #11]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9b6:	e021      	b.n	800a9fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00b      	beq.n	800a9dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	7c12      	ldrb	r2, [r2, #16]
 800a9d0:	f107 0108 	add.w	r1, r7, #8
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	4798      	blx	r3
 800a9d8:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 8008b7a:	e00f      	b.n	8008b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa49 	bl	8009016 <USBD_CtlError>
            err++;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	3301      	adds	r3, #1
 8008b88:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8a:	e007      	b.n	8008b9c <USBD_GetDescriptor+0x268>
=======
 800a9da:	e00f      	b.n	800a9fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fa49 	bl	800ae76 <USBD_CtlError>
            err++;
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ea:	e007      	b.n	800a9fc <USBD_GetDescriptor+0x268>
>>>>>>> Stashed changes
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fa41 	bl	8009016 <USBD_CtlError>
          err++;
 8008b94:	7afb      	ldrb	r3, [r7, #11]
 8008b96:	3301      	adds	r3, #1
 8008b98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b9a:	bf00      	nop
      }
      break;
 8008b9c:	e037      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7c1b      	ldrb	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <USBD_GetDescriptor+0x286>
=======
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fa41 	bl	800ae76 <USBD_CtlError>
          err++;
 800a9f4:	7afb      	ldrb	r3, [r7, #11]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a9fa:	bf00      	nop
      }
      break;
 800a9fc:	e037      	b.n	800aa6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7c1b      	ldrb	r3, [r3, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d109      	bne.n	800aa1a <USBD_GetDescriptor+0x286>
>>>>>>> Stashed changes
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
<<<<<<< Updated upstream
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	f107 0208 	add.w	r2, r7, #8
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	4798      	blx	r3
 8008bb6:	60f8      	str	r0, [r7, #12]
=======
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0e:	f107 0208 	add.w	r2, r7, #8
 800aa12:	4610      	mov	r0, r2
 800aa14:	4798      	blx	r3
 800aa16:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< Updated upstream
 8008bb8:	e029      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fa2a 	bl	8009016 <USBD_CtlError>
        err++;
 8008bc2:	7afb      	ldrb	r3, [r7, #11]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc8:	e021      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7c1b      	ldrb	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10d      	bne.n	8008bee <USBD_GetDescriptor+0x2ba>
=======
 800aa18:	e029      	b.n	800aa6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fa2a 	bl	800ae76 <USBD_CtlError>
        err++;
 800aa22:	7afb      	ldrb	r3, [r7, #11]
 800aa24:	3301      	adds	r3, #1
 800aa26:	72fb      	strb	r3, [r7, #11]
      break;
 800aa28:	e021      	b.n	800aa6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	7c1b      	ldrb	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10d      	bne.n	800aa4e <USBD_GetDescriptor+0x2ba>
>>>>>>> Stashed changes
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
<<<<<<< Updated upstream
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	f107 0208 	add.w	r2, r7, #8
 8008bde:	4610      	mov	r0, r2
 8008be0:	4798      	blx	r3
 8008be2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	2207      	movs	r2, #7
 8008bea:	701a      	strb	r2, [r3, #0]
=======
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3a:	f107 0208 	add.w	r2, r7, #8
 800aa3e:	4610      	mov	r0, r2
 800aa40:	4798      	blx	r3
 800aa42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	2207      	movs	r2, #7
 800aa4a:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< Updated upstream
 8008bec:	e00f      	b.n	8008c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fa10 	bl	8009016 <USBD_CtlError>
        err++;
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8008bfc:	e007      	b.n	8008c0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fa08 	bl	8009016 <USBD_CtlError>
      err++;
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c0c:	bf00      	nop
  }

  if (err != 0U)
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11e      	bne.n	8008c52 <USBD_GetDescriptor+0x31e>
=======
 800aa4c:	e00f      	b.n	800aa6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fa10 	bl	800ae76 <USBD_CtlError>
        err++;
 800aa56:	7afb      	ldrb	r3, [r7, #11]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa5c:	e007      	b.n	800aa6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fa08 	bl	800ae76 <USBD_CtlError>
      err++;
 800aa66:	7afb      	ldrb	r3, [r7, #11]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa6c:	bf00      	nop
  }

  if (err != 0U)
 800aa6e:	7afb      	ldrb	r3, [r7, #11]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d11e      	bne.n	800aab2 <USBD_GetDescriptor+0x31e>
>>>>>>> Stashed changes
  {
    return;
  }

  if (req->wLength != 0U)
<<<<<<< Updated upstream
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	88db      	ldrh	r3, [r3, #6]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d016      	beq.n	8008c4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008c1c:	893b      	ldrh	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00e      	beq.n	8008c40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	88da      	ldrh	r2, [r3, #6]
 8008c26:	893b      	ldrh	r3, [r7, #8]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	bf28      	it	cs
 8008c2c:	4613      	movcs	r3, r2
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c32:	893b      	ldrh	r3, [r7, #8]
 8008c34:	461a      	mov	r2, r3
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fa5d 	bl	80090f8 <USBD_CtlSendData>
 8008c3e:	e009      	b.n	8008c54 <USBD_GetDescriptor+0x320>
=======
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	88db      	ldrh	r3, [r3, #6]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d016      	beq.n	800aaaa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aa7c:	893b      	ldrh	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00e      	beq.n	800aaa0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	88da      	ldrh	r2, [r3, #6]
 800aa86:	893b      	ldrh	r3, [r7, #8]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	bf28      	it	cs
 800aa8c:	4613      	movcs	r3, r2
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa92:	893b      	ldrh	r3, [r7, #8]
 800aa94:	461a      	mov	r2, r3
 800aa96:	68f9      	ldr	r1, [r7, #12]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fa5d 	bl	800af58 <USBD_CtlSendData>
 800aa9e:	e009      	b.n	800aab4 <USBD_GetDescriptor+0x320>
>>>>>>> Stashed changes
    }
    else
    {
      USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9e7 	bl	8009016 <USBD_CtlError>
 8008c48:	e004      	b.n	8008c54 <USBD_GetDescriptor+0x320>
=======
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f9e7 	bl	800ae76 <USBD_CtlError>
 800aaa8:	e004      	b.n	800aab4 <USBD_GetDescriptor+0x320>
>>>>>>> Stashed changes
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
<<<<<<< Updated upstream
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 faae 	bl	80091ac <USBD_CtlSendStatus>
 8008c50:	e000      	b.n	8008c54 <USBD_GetDescriptor+0x320>
    return;
 8008c52:	bf00      	nop
  }
}
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop

08008c5c <USBD_SetAddress>:
=======
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 faae 	bl	800b00c <USBD_CtlSendStatus>
 800aab0:	e000      	b.n	800aab4 <USBD_GetDescriptor+0x320>
    return;
 800aab2:	bf00      	nop
  }
}
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop

0800aabc <USBD_SetAddress>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	889b      	ldrh	r3, [r3, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d131      	bne.n	8008cd2 <USBD_SetAddress+0x76>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d12d      	bne.n	8008cd2 <USBD_SetAddress+0x76>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c7c:	d829      	bhi.n	8008cd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	885b      	ldrh	r3, [r3, #2]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d104      	bne.n	8008ca0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f9bc 	bl	8009016 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9e:	e01d      	b.n	8008cdc <USBD_SetAddress+0x80>
=======
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	889b      	ldrh	r3, [r3, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d131      	bne.n	800ab32 <USBD_SetAddress+0x76>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	88db      	ldrh	r3, [r3, #6]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d12d      	bne.n	800ab32 <USBD_SetAddress+0x76>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	885b      	ldrh	r3, [r3, #2]
 800aada:	2b7f      	cmp	r3, #127	; 0x7f
 800aadc:	d829      	bhi.n	800ab32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	885b      	ldrh	r3, [r3, #2]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d104      	bne.n	800ab00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f9bc 	bl	800ae76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafe:	e01d      	b.n	800ab3c <USBD_SetAddress+0x80>
>>>>>>> Stashed changes
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< Updated upstream
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	7bfa      	ldrb	r2, [r7, #15]
 8008ca4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 ff10 	bl	8009ad2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa7a 	bl	80091ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc6:	e009      	b.n	8008cdc <USBD_SetAddress+0x80>
=======
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7bfa      	ldrb	r2, [r7, #15]
 800ab04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 ff10 	bl	800b932 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fa7a 	bl	800b00c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d004      	beq.n	800ab28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2202      	movs	r2, #2
 800ab22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab26:	e009      	b.n	800ab3c <USBD_SetAddress+0x80>
>>>>>>> Stashed changes
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< Updated upstream
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd0:	e004      	b.n	8008cdc <USBD_SetAddress+0x80>
=======
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab30:	e004      	b.n	800ab3c <USBD_SetAddress+0x80>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f99e 	bl	8009016 <USBD_CtlError>
  }
}
 8008cda:	bf00      	nop
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_SetConfig>:
=======
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f99e 	bl	800ae76 <USBD_CtlError>
  }
}
 800ab3a:	bf00      	nop
 800ab3c:	bf00      	nop
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <USBD_SetConfig>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	885b      	ldrh	r3, [r3, #2]
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	4b4e      	ldr	r3, [pc, #312]	; (8008e34 <USBD_SetConfig+0x150>)
 8008cfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cfc:	4b4d      	ldr	r3, [pc, #308]	; (8008e34 <USBD_SetConfig+0x150>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d905      	bls.n	8008d10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f985 	bl	8009016 <USBD_CtlError>
    return USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e08c      	b.n	8008e2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d002      	beq.n	8008d22 <USBD_SetConfig+0x3e>
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d029      	beq.n	8008d74 <USBD_SetConfig+0x90>
 8008d20:	e075      	b.n	8008e0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d22:	4b44      	ldr	r3, [pc, #272]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d020      	beq.n	8008d6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008d2a:	4b42      	ldr	r3, [pc, #264]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d34:	4b3f      	ldr	r3, [pc, #252]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7ff f849 	bl	8007dd2 <USBD_SetClassConfig>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d008      	beq.n	8008d5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f962 	bl	8009016 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2202      	movs	r2, #2
 8008d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
=======
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	885b      	ldrh	r3, [r3, #2]
 800ab56:	b2da      	uxtb	r2, r3
 800ab58:	4b4e      	ldr	r3, [pc, #312]	; (800ac94 <USBD_SetConfig+0x150>)
 800ab5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab5c:	4b4d      	ldr	r3, [pc, #308]	; (800ac94 <USBD_SetConfig+0x150>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d905      	bls.n	800ab70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f985 	bl	800ae76 <USBD_CtlError>
    return USBD_FAIL;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e08c      	b.n	800ac8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d002      	beq.n	800ab82 <USBD_SetConfig+0x3e>
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d029      	beq.n	800abd4 <USBD_SetConfig+0x90>
 800ab80:	e075      	b.n	800ac6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab82:	4b44      	ldr	r3, [pc, #272]	; (800ac94 <USBD_SetConfig+0x150>)
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d020      	beq.n	800abcc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab8a:	4b42      	ldr	r3, [pc, #264]	; (800ac94 <USBD_SetConfig+0x150>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab94:	4b3f      	ldr	r3, [pc, #252]	; (800ac94 <USBD_SetConfig+0x150>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7ff f849 	bl	8009c32 <USBD_SetClassConfig>
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d008      	beq.n	800abbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f962 	bl	800ae76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2202      	movs	r2, #2
 800abb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
>>>>>>> Stashed changes
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< Updated upstream
 8008d5a:	e065      	b.n	8008e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa25 	bl	80091ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2203      	movs	r2, #3
 8008d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d6a:	e05d      	b.n	8008e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa1d 	bl	80091ac <USBD_CtlSendStatus>
      break;
 8008d72:	e059      	b.n	8008e28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d74:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d112      	bne.n	8008da2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d84:	4b2b      	ldr	r3, [pc, #172]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d8e:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <USBD_SetConfig+0x150>)
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff f838 	bl	8007e0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa06 	bl	80091ac <USBD_CtlSendStatus>
=======
 800abba:	e065      	b.n	800ac88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fa25 	bl	800b00c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2203      	movs	r2, #3
 800abc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800abca:	e05d      	b.n	800ac88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fa1d 	bl	800b00c <USBD_CtlSendStatus>
      break;
 800abd2:	e059      	b.n	800ac88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800abd4:	4b2f      	ldr	r3, [pc, #188]	; (800ac94 <USBD_SetConfig+0x150>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d112      	bne.n	800ac02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800abe4:	4b2b      	ldr	r3, [pc, #172]	; (800ac94 <USBD_SetConfig+0x150>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	461a      	mov	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abee:	4b29      	ldr	r3, [pc, #164]	; (800ac94 <USBD_SetConfig+0x150>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff f838 	bl	8009c6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fa06 	bl	800b00c <USBD_CtlSendStatus>
>>>>>>> Stashed changes
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< Updated upstream
 8008da0:	e042      	b.n	8008e28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008da2:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <USBD_SetConfig+0x150>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d02a      	beq.n	8008e06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff f826 	bl	8007e0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008dbe:	4b1d      	ldr	r3, [pc, #116]	; (8008e34 <USBD_SetConfig+0x150>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	; (8008e34 <USBD_SetConfig+0x150>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fe ffff 	bl	8007dd2 <USBD_SetClassConfig>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00f      	beq.n	8008dfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f918 	bl	8009016 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff f80b 	bl	8007e0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dfc:	e014      	b.n	8008e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9d4 	bl	80091ac <USBD_CtlSendStatus>
      break;
 8008e04:	e010      	b.n	8008e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f9d0 	bl	80091ac <USBD_CtlSendStatus>
      break;
 8008e0c:	e00c      	b.n	8008e28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f900 	bl	8009016 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e16:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <USBD_SetConfig+0x150>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7fe fff4 	bl	8007e0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e22:	2303      	movs	r3, #3
 8008e24:	73fb      	strb	r3, [r7, #15]
      break;
 8008e26:	bf00      	nop
  }

  return ret;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000238 	.word	0x20000238

08008e38 <USBD_GetConfig>:
=======
 800ac00:	e042      	b.n	800ac88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ac02:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <USBD_SetConfig+0x150>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d02a      	beq.n	800ac66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7ff f826 	bl	8009c6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac1e:	4b1d      	ldr	r3, [pc, #116]	; (800ac94 <USBD_SetConfig+0x150>)
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <USBD_SetConfig+0x150>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fe ffff 	bl	8009c32 <USBD_SetClassConfig>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00f      	beq.n	800ac5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f918 	bl	800ae76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff f80b 	bl	8009c6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac5c:	e014      	b.n	800ac88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f9d4 	bl	800b00c <USBD_CtlSendStatus>
      break;
 800ac64:	e010      	b.n	800ac88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f9d0 	bl	800b00c <USBD_CtlSendStatus>
      break;
 800ac6c:	e00c      	b.n	800ac88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f900 	bl	800ae76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac76:	4b07      	ldr	r3, [pc, #28]	; (800ac94 <USBD_SetConfig+0x150>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fe fff4 	bl	8009c6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac82:	2303      	movs	r3, #3
 800ac84:	73fb      	strb	r3, [r7, #15]
      break;
 800ac86:	bf00      	nop
  }

  return ret;
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	2000030c 	.word	0x2000030c

0800ac98 <USBD_GetConfig>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88db      	ldrh	r3, [r3, #6]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d004      	beq.n	8008e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f8e2 	bl	8009016 <USBD_CtlError>
=======
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	88db      	ldrh	r3, [r3, #6]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d004      	beq.n	800acb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f8e2 	bl	800ae76 <USBD_CtlError>
>>>>>>> Stashed changes
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< Updated upstream
 8008e52:	e023      	b.n	8008e9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	dc02      	bgt.n	8008e66 <USBD_GetConfig+0x2e>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc03      	bgt.n	8008e6c <USBD_GetConfig+0x34>
 8008e64:	e015      	b.n	8008e92 <USBD_GetConfig+0x5a>
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d00b      	beq.n	8008e82 <USBD_GetConfig+0x4a>
 8008e6a:	e012      	b.n	8008e92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	3308      	adds	r3, #8
 8008e76:	2201      	movs	r2, #1
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f93c 	bl	80090f8 <USBD_CtlSendData>
        break;
 8008e80:	e00c      	b.n	8008e9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3304      	adds	r3, #4
 8008e86:	2201      	movs	r2, #1
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f934 	bl	80090f8 <USBD_CtlSendData>
        break;
 8008e90:	e004      	b.n	8008e9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f8be 	bl	8009016 <USBD_CtlError>
        break;
 8008e9a:	bf00      	nop
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_GetStatus>:
=======
 800acb2:	e023      	b.n	800acfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	dc02      	bgt.n	800acc6 <USBD_GetConfig+0x2e>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dc03      	bgt.n	800accc <USBD_GetConfig+0x34>
 800acc4:	e015      	b.n	800acf2 <USBD_GetConfig+0x5a>
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d00b      	beq.n	800ace2 <USBD_GetConfig+0x4a>
 800acca:	e012      	b.n	800acf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3308      	adds	r3, #8
 800acd6:	2201      	movs	r2, #1
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f93c 	bl	800af58 <USBD_CtlSendData>
        break;
 800ace0:	e00c      	b.n	800acfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3304      	adds	r3, #4
 800ace6:	2201      	movs	r2, #1
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f934 	bl	800af58 <USBD_CtlSendData>
        break;
 800acf0:	e004      	b.n	800acfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f8be 	bl	800ae76 <USBD_CtlError>
        break;
 800acfa:	bf00      	nop
}
 800acfc:	bf00      	nop
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBD_GetStatus>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d81e      	bhi.n	8008efa <USBD_GetStatus+0x56>
=======
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	3b01      	subs	r3, #1
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d81e      	bhi.n	800ad5a <USBD_GetStatus+0x56>
>>>>>>> Stashed changes
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< Updated upstream
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	88db      	ldrh	r3, [r3, #6]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d004      	beq.n	8008ece <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f8a5 	bl	8009016 <USBD_CtlError>
        break;
 8008ecc:	e01a      	b.n	8008f04 <USBD_GetStatus+0x60>
=======
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	88db      	ldrh	r3, [r3, #6]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d004      	beq.n	800ad2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f8a5 	bl	800ae76 <USBD_CtlError>
        break;
 800ad2c:	e01a      	b.n	800ad64 <USBD_GetStatus+0x60>
>>>>>>> Stashed changes
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< Updated upstream
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	60da      	str	r2, [r3, #12]
=======
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
<<<<<<< Updated upstream
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f043 0202 	orr.w	r2, r3, #2
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	330c      	adds	r3, #12
 8008eee:	2202      	movs	r2, #2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f900 	bl	80090f8 <USBD_CtlSendData>
      break;
 8008ef8:	e004      	b.n	8008f04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f88a 	bl	8009016 <USBD_CtlError>
      break;
 8008f02:	bf00      	nop
  }
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_SetFeature>:
=======
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d005      	beq.n	800ad4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f043 0202 	orr.w	r2, r3, #2
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	330c      	adds	r3, #12
 800ad4e:	2202      	movs	r2, #2
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f900 	bl	800af58 <USBD_CtlSendData>
      break;
 800ad58:	e004      	b.n	800ad64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f88a 	bl	800ae76 <USBD_CtlError>
      break;
 800ad62:	bf00      	nop
  }
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <USBD_SetFeature>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	885b      	ldrh	r3, [r3, #2]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d107      	bne.n	8008f2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f940 	bl	80091ac <USBD_CtlSendStatus>
=======
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	885b      	ldrh	r3, [r3, #2]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d107      	bne.n	800ad8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f940 	bl	800b00c <USBD_CtlSendStatus>
>>>>>>> Stashed changes
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
<<<<<<< Updated upstream
 8008f2c:	e013      	b.n	8008f56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	885b      	ldrh	r3, [r3, #2]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d10b      	bne.n	8008f4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	889b      	ldrh	r3, [r3, #4]
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f930 	bl	80091ac <USBD_CtlSendStatus>
}
 8008f4c:	e003      	b.n	8008f56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f860 	bl	8009016 <USBD_CtlError>
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_ClrFeature>:
=======
 800ad8c:	e013      	b.n	800adb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	885b      	ldrh	r3, [r3, #2]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d10b      	bne.n	800adae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	889b      	ldrh	r3, [r3, #4]
 800ad9a:	0a1b      	lsrs	r3, r3, #8
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f930 	bl	800b00c <USBD_CtlSendStatus>
}
 800adac:	e003      	b.n	800adb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f860 	bl	800ae76 <USBD_CtlError>
}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_ClrFeature>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	3b01      	subs	r3, #1
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d80b      	bhi.n	8008f8e <USBD_ClrFeature+0x30>
=======
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adce:	b2db      	uxtb	r3, r3
 800add0:	3b01      	subs	r3, #1
 800add2:	2b02      	cmp	r3, #2
 800add4:	d80b      	bhi.n	800adee <USBD_ClrFeature+0x30>
>>>>>>> Stashed changes
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< Updated upstream
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	885b      	ldrh	r3, [r3, #2]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d10c      	bne.n	8008f98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f910 	bl	80091ac <USBD_CtlSendStatus>
      }
      break;
 8008f8c:	e004      	b.n	8008f98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f840 	bl	8009016 <USBD_CtlError>
      break;
 8008f96:	e000      	b.n	8008f9a <USBD_ClrFeature+0x3c>
      break;
 8008f98:	bf00      	nop
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_ParseSetupRequest>:
=======
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	885b      	ldrh	r3, [r3, #2]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d10c      	bne.n	800adf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f910 	bl	800b00c <USBD_CtlSendStatus>
      }
      break;
 800adec:	e004      	b.n	800adf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f840 	bl	800ae76 <USBD_CtlError>
      break;
 800adf6:	e000      	b.n	800adfa <USBD_ClrFeature+0x3c>
      break;
 800adf8:	bf00      	nop
  }
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_ParseSetupRequest>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< Updated upstream
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	781a      	ldrb	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f7ff fa17 	bl	8008400 <SWAPBYTE>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff fa0a 	bl	8008400 <SWAPBYTE>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff f9fd 	bl	8008400 <SWAPBYTE>
 8009006:	4603      	mov	r3, r0
 8009008:	461a      	mov	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	80da      	strh	r2, [r3, #6]
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_CtlError>:
=======
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	781a      	ldrb	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f7ff fa17 	bl	800a260 <SWAPBYTE>
 800ae32:	4603      	mov	r3, r0
 800ae34:	461a      	mov	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3301      	adds	r3, #1
 800ae44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff fa0a 	bl	800a260 <SWAPBYTE>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	461a      	mov	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7ff f9fd 	bl	800a260 <SWAPBYTE>
 800ae66:	4603      	mov	r3, r0
 800ae68:	461a      	mov	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	80da      	strh	r2, [r3, #6]
}
 800ae6e:	bf00      	nop
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_CtlError>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009020:	2180      	movs	r1, #128	; 0x80
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fcea 	bl	80099fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009028:	2100      	movs	r1, #0
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fce6 	bl	80099fc <USBD_LL_StallEP>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_GetString>:
=======
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae80:	2180      	movs	r1, #128	; 0x80
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fcea 	bl	800b85c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae88:	2100      	movs	r1, #0
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fce6 	bl	800b85c <USBD_LL_StallEP>
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_GetString>:
>>>>>>> Stashed changes
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< Updated upstream
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d036      	beq.n	80090bc <USBD_GetString+0x84>
=======
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d036      	beq.n	800af1c <USBD_GetString+0x84>
>>>>>>> Stashed changes
  {
    return;
  }

  pdesc = desc;
<<<<<<< Updated upstream
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009052:	6938      	ldr	r0, [r7, #16]
 8009054:	f000 f836 	bl	80090c4 <USBD_GetLen>
 8009058:	4603      	mov	r3, r0
 800905a:	3301      	adds	r3, #1
 800905c:	b29b      	uxth	r3, r3
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	4413      	add	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	701a      	strb	r2, [r3, #0]
  idx++;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	3301      	adds	r3, #1
 8009076:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009078:	7dfb      	ldrb	r3, [r7, #23]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	2203      	movs	r2, #3
 8009080:	701a      	strb	r2, [r3, #0]
  idx++;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	3301      	adds	r3, #1
 8009086:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009088:	e013      	b.n	80090b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	4413      	add	r3, r2
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	7812      	ldrb	r2, [r2, #0]
 8009094:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	3301      	adds	r3, #1
 800909a:	613b      	str	r3, [r7, #16]
    idx++;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	3301      	adds	r3, #1
 80090a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4413      	add	r3, r2
 80090a8:	2200      	movs	r2, #0
 80090aa:	701a      	strb	r2, [r3, #0]
    idx++;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	3301      	adds	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e7      	bne.n	800908a <USBD_GetString+0x52>
 80090ba:	e000      	b.n	80090be <USBD_GetString+0x86>
    return;
 80090bc:	bf00      	nop
  }
}
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_GetLen>:
=======
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aeb2:	6938      	ldr	r0, [r7, #16]
 800aeb4:	f000 f836 	bl	800af24 <USBD_GetLen>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	3301      	adds	r3, #1
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4413      	add	r3, r2
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	7812      	ldrb	r2, [r2, #0]
 800aed0:	701a      	strb	r2, [r3, #0]
  idx++;
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	3301      	adds	r3, #1
 800aed6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	4413      	add	r3, r2
 800aede:	2203      	movs	r2, #3
 800aee0:	701a      	strb	r2, [r3, #0]
  idx++;
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
 800aee4:	3301      	adds	r3, #1
 800aee6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aee8:	e013      	b.n	800af12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	4413      	add	r3, r2
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	7812      	ldrb	r2, [r2, #0]
 800aef4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	3301      	adds	r3, #1
 800aefa:	613b      	str	r3, [r7, #16]
    idx++;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
 800aefe:	3301      	adds	r3, #1
 800af00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af02:	7dfb      	ldrb	r3, [r7, #23]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	4413      	add	r3, r2
 800af08:	2200      	movs	r2, #0
 800af0a:	701a      	strb	r2, [r3, #0]
    idx++;
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	3301      	adds	r3, #1
 800af10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e7      	bne.n	800aeea <USBD_GetString+0x52>
 800af1a:	e000      	b.n	800af1e <USBD_GetString+0x86>
    return;
 800af1c:	bf00      	nop
  }
}
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBD_GetLen>:
>>>>>>> Stashed changes
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< Updated upstream
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090d4:	e005      	b.n	80090e2 <USBD_GetLen+0x1e>
  {
    len++;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	3301      	adds	r3, #1
 80090da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	3301      	adds	r3, #1
 80090e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f5      	bne.n	80090d6 <USBD_GetLen+0x12>
  }

  return len;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USBD_CtlSendData>:
=======
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af34:	e005      	b.n	800af42 <USBD_GetLen+0x1e>
  {
    len++;
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	3301      	adds	r3, #1
 800af3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	3301      	adds	r3, #1
 800af40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f5      	bne.n	800af36 <USBD_GetLen+0x12>
  }

  return len;
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USBD_CtlSendData>:
>>>>>>> Stashed changes
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2202      	movs	r2, #2
 8009108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	619a      	str	r2, [r3, #24]
=======
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2202      	movs	r2, #2
 800af68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
<<<<<<< Updated upstream
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	61da      	str	r2, [r3, #28]
=======
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
<<<<<<< Updated upstream
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	2100      	movs	r1, #0
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fcf6 	bl	8009b10 <USBD_LL_Transmit>

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_CtlContinueSendData>:
=======
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	2100      	movs	r1, #0
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 fcf6 	bl	800b970 <USBD_LL_Transmit>

  return USBD_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBD_CtlContinueSendData>:
>>>>>>> Stashed changes
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fce5 	bl	8009b10 <USBD_LL_Transmit>

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_CtlPrepareRx>:
=======
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	2100      	movs	r1, #0
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 fce5 	bl	800b970 <USBD_LL_Transmit>

  return USBD_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBD_CtlPrepareRx>:
>>>>>>> Stashed changes
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2203      	movs	r2, #3
 8009160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
=======
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2203      	movs	r2, #3
 800afc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
>>>>>>> Stashed changes

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
<<<<<<< Updated upstream
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
=======
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
>>>>>>> Stashed changes
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
<<<<<<< Updated upstream
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	2100      	movs	r1, #0
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 fce9 	bl	8009b52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_CtlContinueRx>:
=======
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	2100      	movs	r1, #0
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f000 fce9 	bl	800b9b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_CtlContinueRx>:
>>>>>>> Stashed changes
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	2100      	movs	r1, #0
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fcd8 	bl	8009b52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_CtlSendStatus>:
=======
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	2100      	movs	r1, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fcd8 	bl	800b9b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBD_CtlSendStatus>:
>>>>>>> Stashed changes
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2204      	movs	r2, #4
 80091b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091bc:	2300      	movs	r3, #0
 80091be:	2200      	movs	r2, #0
 80091c0:	2100      	movs	r1, #0
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fca4 	bl	8009b10 <USBD_LL_Transmit>

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_CtlReceiveStatus>:
=======
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2204      	movs	r2, #4
 800b018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b01c:	2300      	movs	r3, #0
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fca4 	bl	800b970 <USBD_LL_Transmit>

  return USBD_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_CtlReceiveStatus>:
>>>>>>> Stashed changes
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2205      	movs	r2, #5
 80091de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091e2:	2300      	movs	r3, #0
 80091e4:	2200      	movs	r2, #0
 80091e6:	2100      	movs	r1, #0
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fcb2 	bl	8009b52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <MX_USB_Device_Init>:
=======
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2205      	movs	r2, #5
 800b03e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b042:	2300      	movs	r3, #0
 800b044:	2200      	movs	r2, #0
 800b046:	2100      	movs	r1, #0
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fcb2 	bl	800b9b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <MX_USB_Device_Init>:
>>>>>>> Stashed changes
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
<<<<<<< Updated upstream
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
=======
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
<<<<<<< Updated upstream
 80091fc:	2200      	movs	r2, #0
 80091fe:	4912      	ldr	r1, [pc, #72]	; (8009248 <MX_USB_Device_Init+0x50>)
 8009200:	4812      	ldr	r0, [pc, #72]	; (800924c <MX_USB_Device_Init+0x54>)
 8009202:	f7fe fd69 	bl	8007cd8 <USBD_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800920c:	f7f7 f982 	bl	8000514 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009210:	490f      	ldr	r1, [pc, #60]	; (8009250 <MX_USB_Device_Init+0x58>)
 8009212:	480e      	ldr	r0, [pc, #56]	; (800924c <MX_USB_Device_Init+0x54>)
 8009214:	f7fe fd90 	bl	8007d38 <USBD_RegisterClass>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800921e:	f7f7 f979 	bl	8000514 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009222:	490c      	ldr	r1, [pc, #48]	; (8009254 <MX_USB_Device_Init+0x5c>)
 8009224:	4809      	ldr	r0, [pc, #36]	; (800924c <MX_USB_Device_Init+0x54>)
 8009226:	f7fe fc87 	bl	8007b38 <USBD_CDC_RegisterInterface>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009230:	f7f7 f970 	bl	8000514 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009234:	4805      	ldr	r0, [pc, #20]	; (800924c <MX_USB_Device_Init+0x54>)
 8009236:	f7fe fdb5 	bl	8007da4 <USBD_Start>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009240:	f7f7 f968 	bl	8000514 <Error_Handler>
=======
 800b05c:	2200      	movs	r2, #0
 800b05e:	4912      	ldr	r1, [pc, #72]	; (800b0a8 <MX_USB_Device_Init+0x50>)
 800b060:	4812      	ldr	r0, [pc, #72]	; (800b0ac <MX_USB_Device_Init+0x54>)
 800b062:	f7fe fd69 	bl	8009b38 <USBD_Init>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b06c:	f7f5 fbfe 	bl	800086c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b070:	490f      	ldr	r1, [pc, #60]	; (800b0b0 <MX_USB_Device_Init+0x58>)
 800b072:	480e      	ldr	r0, [pc, #56]	; (800b0ac <MX_USB_Device_Init+0x54>)
 800b074:	f7fe fd90 	bl	8009b98 <USBD_RegisterClass>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b07e:	f7f5 fbf5 	bl	800086c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b082:	490c      	ldr	r1, [pc, #48]	; (800b0b4 <MX_USB_Device_Init+0x5c>)
 800b084:	4809      	ldr	r0, [pc, #36]	; (800b0ac <MX_USB_Device_Init+0x54>)
 800b086:	f7fe fc87 	bl	8009998 <USBD_CDC_RegisterInterface>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b090:	f7f5 fbec 	bl	800086c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b094:	4805      	ldr	r0, [pc, #20]	; (800b0ac <MX_USB_Device_Init+0x54>)
 800b096:	f7fe fdb5 	bl	8009c04 <USBD_Start>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b0a0:	f7f5 fbe4 	bl	800086c <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
<<<<<<< Updated upstream
 8009244:	bf00      	nop
 8009246:	bd80      	pop	{r7, pc}
 8009248:	200000f4 	.word	0x200000f4
 800924c:	2000023c 	.word	0x2000023c
 8009250:	20000060 	.word	0x20000060
 8009254:	200000e0 	.word	0x200000e0

08009258 <CDC_Init_FS>:
=======
 800b0a4:	bf00      	nop
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200000f4 	.word	0x200000f4
 800b0ac:	20000310 	.word	0x20000310
 800b0b0:	20000060 	.word	0x20000060
 800b0b4:	200000e0 	.word	0x200000e0

0800b0b8 <CDC_Init_FS>:
>>>>>>> Stashed changes
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< Updated upstream
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800925c:	2200      	movs	r2, #0
 800925e:	4905      	ldr	r1, [pc, #20]	; (8009274 <CDC_Init_FS+0x1c>)
 8009260:	4805      	ldr	r0, [pc, #20]	; (8009278 <CDC_Init_FS+0x20>)
 8009262:	f7fe fc83 	bl	8007b6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009266:	4905      	ldr	r1, [pc, #20]	; (800927c <CDC_Init_FS+0x24>)
 8009268:	4803      	ldr	r0, [pc, #12]	; (8009278 <CDC_Init_FS+0x20>)
 800926a:	f7fe fca1 	bl	8007bb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800926e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009270:	4618      	mov	r0, r3
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000d18 	.word	0x20000d18
 8009278:	2000023c 	.word	0x2000023c
 800927c:	20000518 	.word	0x20000518

08009280 <CDC_DeInit_FS>:
=======
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4905      	ldr	r1, [pc, #20]	; (800b0d4 <CDC_Init_FS+0x1c>)
 800b0c0:	4805      	ldr	r0, [pc, #20]	; (800b0d8 <CDC_Init_FS+0x20>)
 800b0c2:	f7fe fc83 	bl	80099cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0c6:	4905      	ldr	r1, [pc, #20]	; (800b0dc <CDC_Init_FS+0x24>)
 800b0c8:	4803      	ldr	r0, [pc, #12]	; (800b0d8 <CDC_Init_FS+0x20>)
 800b0ca:	f7fe fca1 	bl	8009a10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20000dec 	.word	0x20000dec
 800b0d8:	20000310 	.word	0x20000310
 800b0dc:	200005ec 	.word	0x200005ec

0800b0e0 <CDC_DeInit_FS>:
>>>>>>> Stashed changes
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< Updated upstream
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009284:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009286:	4618      	mov	r0, r3
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <CDC_Control_FS>:
=======
 800b0e0:	b480      	push	{r7}
 800b0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <CDC_Control_FS>:
>>>>>>> Stashed changes
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< Updated upstream
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
 800929c:	4613      	mov	r3, r2
 800929e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b23      	cmp	r3, #35	; 0x23
 80092a4:	d84a      	bhi.n	800933c <CDC_Control_FS+0xac>
 80092a6:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <CDC_Control_FS+0x1c>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	0800933d 	.word	0x0800933d
 80092b0:	0800933d 	.word	0x0800933d
 80092b4:	0800933d 	.word	0x0800933d
 80092b8:	0800933d 	.word	0x0800933d
 80092bc:	0800933d 	.word	0x0800933d
 80092c0:	0800933d 	.word	0x0800933d
 80092c4:	0800933d 	.word	0x0800933d
 80092c8:	0800933d 	.word	0x0800933d
 80092cc:	0800933d 	.word	0x0800933d
 80092d0:	0800933d 	.word	0x0800933d
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	0800933d 	.word	0x0800933d
 80092dc:	0800933d 	.word	0x0800933d
 80092e0:	0800933d 	.word	0x0800933d
 80092e4:	0800933d 	.word	0x0800933d
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	0800933d 	.word	0x0800933d
 80092f0:	0800933d 	.word	0x0800933d
 80092f4:	0800933d 	.word	0x0800933d
 80092f8:	0800933d 	.word	0x0800933d
 80092fc:	0800933d 	.word	0x0800933d
 8009300:	0800933d 	.word	0x0800933d
 8009304:	0800933d 	.word	0x0800933d
 8009308:	0800933d 	.word	0x0800933d
 800930c:	0800933d 	.word	0x0800933d
 8009310:	0800933d 	.word	0x0800933d
 8009314:	0800933d 	.word	0x0800933d
 8009318:	0800933d 	.word	0x0800933d
 800931c:	0800933d 	.word	0x0800933d
 8009320:	0800933d 	.word	0x0800933d
 8009324:	0800933d 	.word	0x0800933d
 8009328:	0800933d 	.word	0x0800933d
 800932c:	0800933d 	.word	0x0800933d
 8009330:	0800933d 	.word	0x0800933d
 8009334:	0800933d 	.word	0x0800933d
 8009338:	0800933d 	.word	0x0800933d
=======
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	2b23      	cmp	r3, #35	; 0x23
 800b104:	d84a      	bhi.n	800b19c <CDC_Control_FS+0xac>
 800b106:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <CDC_Control_FS+0x1c>)
 800b108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10c:	0800b19d 	.word	0x0800b19d
 800b110:	0800b19d 	.word	0x0800b19d
 800b114:	0800b19d 	.word	0x0800b19d
 800b118:	0800b19d 	.word	0x0800b19d
 800b11c:	0800b19d 	.word	0x0800b19d
 800b120:	0800b19d 	.word	0x0800b19d
 800b124:	0800b19d 	.word	0x0800b19d
 800b128:	0800b19d 	.word	0x0800b19d
 800b12c:	0800b19d 	.word	0x0800b19d
 800b130:	0800b19d 	.word	0x0800b19d
 800b134:	0800b19d 	.word	0x0800b19d
 800b138:	0800b19d 	.word	0x0800b19d
 800b13c:	0800b19d 	.word	0x0800b19d
 800b140:	0800b19d 	.word	0x0800b19d
 800b144:	0800b19d 	.word	0x0800b19d
 800b148:	0800b19d 	.word	0x0800b19d
 800b14c:	0800b19d 	.word	0x0800b19d
 800b150:	0800b19d 	.word	0x0800b19d
 800b154:	0800b19d 	.word	0x0800b19d
 800b158:	0800b19d 	.word	0x0800b19d
 800b15c:	0800b19d 	.word	0x0800b19d
 800b160:	0800b19d 	.word	0x0800b19d
 800b164:	0800b19d 	.word	0x0800b19d
 800b168:	0800b19d 	.word	0x0800b19d
 800b16c:	0800b19d 	.word	0x0800b19d
 800b170:	0800b19d 	.word	0x0800b19d
 800b174:	0800b19d 	.word	0x0800b19d
 800b178:	0800b19d 	.word	0x0800b19d
 800b17c:	0800b19d 	.word	0x0800b19d
 800b180:	0800b19d 	.word	0x0800b19d
 800b184:	0800b19d 	.word	0x0800b19d
 800b188:	0800b19d 	.word	0x0800b19d
 800b18c:	0800b19d 	.word	0x0800b19d
 800b190:	0800b19d 	.word	0x0800b19d
 800b194:	0800b19d 	.word	0x0800b19d
 800b198:	0800b19d 	.word	0x0800b19d
>>>>>>> Stashed changes
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< Updated upstream
 800933c:	bf00      	nop
  }

  return (USBD_OK);
 800933e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <CDC_Receive_FS>:
=======
 800b19c:	bf00      	nop
  }

  return (USBD_OK);
 800b19e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <CDC_Receive_FS>:
>>>>>>> Stashed changes
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< Updated upstream
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	4805      	ldr	r0, [pc, #20]	; (8009370 <CDC_Receive_FS+0x24>)
 800935a:	f7fe fc29 	bl	8007bb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800935e:	4804      	ldr	r0, [pc, #16]	; (8009370 <CDC_Receive_FS+0x24>)
 8009360:	f7fe fc84 	bl	8007c6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009364:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	2000023c 	.word	0x2000023c

08009374 <CDC_Transmit_FS>:
=======
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <CDC_Receive_FS+0x24>)
 800b1ba:	f7fe fc29 	bl	8009a10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1be:	4804      	ldr	r0, [pc, #16]	; (800b1d0 <CDC_Receive_FS+0x24>)
 800b1c0:	f7fe fc84 	bl	8009acc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20000310 	.word	0x20000310

0800b1d4 <CDC_Transmit_FS>:
>>>>>>> Stashed changes
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
<<<<<<< Updated upstream
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <CDC_Transmit_FS+0x48>)
 8009386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800938a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009396:	2301      	movs	r3, #1
 8009398:	e00b      	b.n	80093b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800939a:	887b      	ldrh	r3, [r7, #2]
 800939c:	461a      	mov	r2, r3
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4806      	ldr	r0, [pc, #24]	; (80093bc <CDC_Transmit_FS+0x48>)
 80093a2:	f7fe fbe3 	bl	8007b6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093a6:	4805      	ldr	r0, [pc, #20]	; (80093bc <CDC_Transmit_FS+0x48>)
 80093a8:	f7fe fc20 	bl	8007bec <USBD_CDC_TransmitPacket>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000023c 	.word	0x2000023c

080093c0 <CDC_TransmitCplt_FS>:
=======
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e00b      	b.n	800b212 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1fa:	887b      	ldrh	r3, [r7, #2]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	4806      	ldr	r0, [pc, #24]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b202:	f7fe fbe3 	bl	80099cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b206:	4805      	ldr	r0, [pc, #20]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b208:	f7fe fc20 	bl	8009a4c <USBD_CDC_TransmitPacket>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	20000310 	.word	0x20000310

0800b220 <CDC_TransmitCplt_FS>:
>>>>>>> Stashed changes
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
<<<<<<< Updated upstream
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
=======
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	4613      	mov	r3, r2
 800b22c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
<<<<<<< Updated upstream
 80093d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
	...

080093e4 <USBD_CDC_DeviceDescriptor>:
=======
 800b232:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b236:	4618      	mov	r0, r3
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
	...

0800b244 <USBD_CDC_DeviceDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2212      	movs	r2, #18
 80093f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80093f6:	4b03      	ldr	r3, [pc, #12]	; (8009404 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	20000114 	.word	0x20000114

08009408 <USBD_CDC_LangIDStrDescriptor>:
=======
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2212      	movs	r2, #18
 800b254:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b256:	4b03      	ldr	r3, [pc, #12]	; (800b264 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b258:	4618      	mov	r0, r3
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	20000114 	.word	0x20000114

0800b268 <USBD_CDC_LangIDStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2204      	movs	r2, #4
 8009418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800941a:	4b03      	ldr	r3, [pc, #12]	; (8009428 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20000128 	.word	0x20000128

0800942c <USBD_CDC_ProductStrDescriptor>:
=======
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2204      	movs	r2, #4
 800b278:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b27a:	4b03      	ldr	r3, [pc, #12]	; (800b288 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	20000128 	.word	0x20000128

0800b28c <USBD_CDC_ProductStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d105      	bne.n	800944a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4907      	ldr	r1, [pc, #28]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009442:	4808      	ldr	r0, [pc, #32]	; (8009464 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009444:	f7ff fdf8 	bl	8009038 <USBD_GetString>
 8009448:	e004      	b.n	8009454 <USBD_CDC_ProductStrDescriptor+0x28>
=======
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	4603      	mov	r3, r0
 800b294:	6039      	str	r1, [r7, #0]
 800b296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b298:	79fb      	ldrb	r3, [r7, #7]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d105      	bne.n	800b2aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	4907      	ldr	r1, [pc, #28]	; (800b2c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b2a2:	4808      	ldr	r0, [pc, #32]	; (800b2c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b2a4:	f7ff fdf8 	bl	800ae98 <USBD_GetString>
 800b2a8:	e004      	b.n	800b2b4 <USBD_CDC_ProductStrDescriptor+0x28>
>>>>>>> Stashed changes
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
<<<<<<< Updated upstream
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4904      	ldr	r1, [pc, #16]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x34>)
 800944e:	4805      	ldr	r0, [pc, #20]	; (8009464 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009450:	f7ff fdf2 	bl	8009038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20001518 	.word	0x20001518
 8009464:	0800ad10 	.word	0x0800ad10

08009468 <USBD_CDC_ManufacturerStrDescriptor>:
=======
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	4904      	ldr	r1, [pc, #16]	; (800b2c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b2ae:	4805      	ldr	r0, [pc, #20]	; (800b2c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b2b0:	f7ff fdf2 	bl	800ae98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2b4:	4b02      	ldr	r3, [pc, #8]	; (800b2c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200015ec 	.word	0x200015ec
 800b2c4:	0800cb38 	.word	0x0800cb38

0800b2c8 <USBD_CDC_ManufacturerStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	4904      	ldr	r1, [pc, #16]	; (8009488 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009478:	4804      	ldr	r0, [pc, #16]	; (800948c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800947a:	f7ff fddd 	bl	8009038 <USBD_GetString>
  return USBD_StrDesc;
 800947e:	4b02      	ldr	r3, [pc, #8]	; (8009488 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20001518 	.word	0x20001518
 800948c:	0800ad28 	.word	0x0800ad28

08009490 <USBD_CDC_SerialStrDescriptor>:
=======
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	6039      	str	r1, [r7, #0]
 800b2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	4904      	ldr	r1, [pc, #16]	; (800b2e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b2d8:	4804      	ldr	r0, [pc, #16]	; (800b2ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b2da:	f7ff fddd 	bl	800ae98 <USBD_GetString>
  return USBD_StrDesc;
 800b2de:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	200015ec 	.word	0x200015ec
 800b2ec:	0800cb50 	.word	0x0800cb50

0800b2f0 <USBD_CDC_SerialStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	221a      	movs	r2, #26
 80094a0:	801a      	strh	r2, [r3, #0]
=======
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	6039      	str	r1, [r7, #0]
 800b2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	221a      	movs	r2, #26
 800b300:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< Updated upstream
 80094a2:	f000 f843 	bl	800952c <Get_SerialNum>
=======
 800b302:	f000 f843 	bl	800b38c <Get_SerialNum>
>>>>>>> Stashed changes

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
<<<<<<< Updated upstream
 80094a6:	4b02      	ldr	r3, [pc, #8]	; (80094b0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	2000012c 	.word	0x2000012c

080094b4 <USBD_CDC_ConfigStrDescriptor>:
=======
 800b306:	4b02      	ldr	r3, [pc, #8]	; (800b310 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	2000012c 	.word	0x2000012c

0800b314 <USBD_CDC_ConfigStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4603      	mov	r3, r0
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d105      	bne.n	80094d2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	4907      	ldr	r1, [pc, #28]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094ca:	4808      	ldr	r0, [pc, #32]	; (80094ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094cc:	f7ff fdb4 	bl	8009038 <USBD_GetString>
 80094d0:	e004      	b.n	80094dc <USBD_CDC_ConfigStrDescriptor+0x28>
=======
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	6039      	str	r1, [r7, #0]
 800b31e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d105      	bne.n	800b332 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	4907      	ldr	r1, [pc, #28]	; (800b348 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b32a:	4808      	ldr	r0, [pc, #32]	; (800b34c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b32c:	f7ff fdb4 	bl	800ae98 <USBD_GetString>
 800b330:	e004      	b.n	800b33c <USBD_CDC_ConfigStrDescriptor+0x28>
>>>>>>> Stashed changes
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
<<<<<<< Updated upstream
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4904      	ldr	r1, [pc, #16]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094d6:	4805      	ldr	r0, [pc, #20]	; (80094ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094d8:	f7ff fdae 	bl	8009038 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20001518 	.word	0x20001518
 80094ec:	0800ad3c 	.word	0x0800ad3c

080094f0 <USBD_CDC_InterfaceStrDescriptor>:
=======
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	4904      	ldr	r1, [pc, #16]	; (800b348 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b336:	4805      	ldr	r0, [pc, #20]	; (800b34c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b338:	f7ff fdae 	bl	800ae98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	200015ec 	.word	0x200015ec
 800b34c:	0800cb64 	.word	0x0800cb64

0800b350 <USBD_CDC_InterfaceStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d105      	bne.n	800950e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4907      	ldr	r1, [pc, #28]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009506:	4808      	ldr	r0, [pc, #32]	; (8009528 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009508:	f7ff fd96 	bl	8009038 <USBD_GetString>
 800950c:	e004      	b.n	8009518 <USBD_CDC_InterfaceStrDescriptor+0x28>
=======
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d105      	bne.n	800b36e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	4907      	ldr	r1, [pc, #28]	; (800b384 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b366:	4808      	ldr	r0, [pc, #32]	; (800b388 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b368:	f7ff fd96 	bl	800ae98 <USBD_GetString>
 800b36c:	e004      	b.n	800b378 <USBD_CDC_InterfaceStrDescriptor+0x28>
>>>>>>> Stashed changes
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
<<<<<<< Updated upstream
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	4904      	ldr	r1, [pc, #16]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009512:	4805      	ldr	r0, [pc, #20]	; (8009528 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009514:	f7ff fd90 	bl	8009038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009518:	4b02      	ldr	r3, [pc, #8]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20001518 	.word	0x20001518
 8009528:	0800ad48 	.word	0x0800ad48

0800952c <Get_SerialNum>:
=======
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	4904      	ldr	r1, [pc, #16]	; (800b384 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b372:	4805      	ldr	r0, [pc, #20]	; (800b388 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b374:	f7ff fd90 	bl	800ae98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b378:	4b02      	ldr	r3, [pc, #8]	; (800b384 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	200015ec 	.word	0x200015ec
 800b388:	0800cb70 	.word	0x0800cb70

0800b38c <Get_SerialNum>:
>>>>>>> Stashed changes
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< Updated upstream
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
=======
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
<<<<<<< Updated upstream
 8009532:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <Get_SerialNum+0x44>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009538:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <Get_SerialNum+0x48>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800953e:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <Get_SerialNum+0x4c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d009      	beq.n	8009566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009552:	2208      	movs	r2, #8
 8009554:	4909      	ldr	r1, [pc, #36]	; (800957c <Get_SerialNum+0x50>)
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f814 	bl	8009584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800955c:	2204      	movs	r2, #4
 800955e:	4908      	ldr	r1, [pc, #32]	; (8009580 <Get_SerialNum+0x54>)
 8009560:	68b8      	ldr	r0, [r7, #8]
 8009562:	f000 f80f 	bl	8009584 <IntToUnicode>
  }
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	1fff7590 	.word	0x1fff7590
 8009574:	1fff7594 	.word	0x1fff7594
 8009578:	1fff7598 	.word	0x1fff7598
 800957c:	2000012e 	.word	0x2000012e
 8009580:	2000013e 	.word	0x2000013e

08009584 <IntToUnicode>:
=======
 800b392:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <Get_SerialNum+0x44>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b398:	4b0e      	ldr	r3, [pc, #56]	; (800b3d4 <Get_SerialNum+0x48>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b39e:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <Get_SerialNum+0x4c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3b2:	2208      	movs	r2, #8
 800b3b4:	4909      	ldr	r1, [pc, #36]	; (800b3dc <Get_SerialNum+0x50>)
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 f814 	bl	800b3e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3bc:	2204      	movs	r2, #4
 800b3be:	4908      	ldr	r1, [pc, #32]	; (800b3e0 <Get_SerialNum+0x54>)
 800b3c0:	68b8      	ldr	r0, [r7, #8]
 800b3c2:	f000 f80f 	bl	800b3e4 <IntToUnicode>
  }
}
 800b3c6:	bf00      	nop
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	1fff7590 	.word	0x1fff7590
 800b3d4:	1fff7594 	.word	0x1fff7594
 800b3d8:	1fff7598 	.word	0x1fff7598
 800b3dc:	2000012e 	.word	0x2000012e
 800b3e0:	2000013e 	.word	0x2000013e

0800b3e4 <IntToUnicode>:
>>>>>>> Stashed changes
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< Updated upstream
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
 800959a:	e027      	b.n	80095ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	0f1b      	lsrs	r3, r3, #28
 80095a0:	2b09      	cmp	r3, #9
 80095a2:	d80b      	bhi.n	80095bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	0f1b      	lsrs	r3, r3, #28
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	4619      	mov	r1, r3
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	440b      	add	r3, r1
 80095b4:	3230      	adds	r2, #48	; 0x30
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	e00a      	b.n	80095d2 <IntToUnicode+0x4e>
=======
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]
 800b3fa:	e027      	b.n	800b44c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	0f1b      	lsrs	r3, r3, #28
 800b400:	2b09      	cmp	r3, #9
 800b402:	d80b      	bhi.n	800b41c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	0f1b      	lsrs	r3, r3, #28
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4619      	mov	r1, r3
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	440b      	add	r3, r1
 800b414:	3230      	adds	r2, #48	; 0x30
 800b416:	b2d2      	uxtb	r2, r2
 800b418:	701a      	strb	r2, [r3, #0]
 800b41a:	e00a      	b.n	800b432 <IntToUnicode+0x4e>
>>>>>>> Stashed changes
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< Updated upstream
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	0f1b      	lsrs	r3, r3, #28
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4619      	mov	r1, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	440b      	add	r3, r1
 80095cc:	3237      	adds	r2, #55	; 0x37
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	3301      	adds	r3, #1
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4413      	add	r3, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	3301      	adds	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]
 80095ec:	7dfa      	ldrb	r2, [r7, #23]
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d3d3      	bcc.n	800959c <IntToUnicode+0x18>
  }
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <LL_AHB2_GRP1_EnableClock>:
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800960a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800960e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4313      	orrs	r3, r2
 8009618:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800961a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800961e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4013      	ands	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009626:	68fb      	ldr	r3, [r7, #12]
}
 8009628:	bf00      	nop
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <LL_APB1_GRP1_EnableClock>:
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800963c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4313      	orrs	r3, r2
 800964a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800964c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009650:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4013      	ands	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009658:	68fb      	ldr	r3, [r7, #12]
}
 800965a:	bf00      	nop
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
	...

08009668 <HAL_PCD_MspInit>:
=======
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	0f1b      	lsrs	r3, r3, #28
 800b420:	b2da      	uxtb	r2, r3
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	005b      	lsls	r3, r3, #1
 800b426:	4619      	mov	r1, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	440b      	add	r3, r1
 800b42c:	3237      	adds	r2, #55	; 0x37
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	011b      	lsls	r3, r3, #4
 800b436:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	3301      	adds	r3, #1
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	4413      	add	r3, r2
 800b442:	2200      	movs	r2, #0
 800b444:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	3301      	adds	r3, #1
 800b44a:	75fb      	strb	r3, [r7, #23]
 800b44c:	7dfa      	ldrb	r2, [r7, #23]
 800b44e:	79fb      	ldrb	r3, [r7, #7]
 800b450:	429a      	cmp	r2, r3
 800b452:	d3d3      	bcc.n	800b3fc <IntToUnicode+0x18>
  }
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	371c      	adds	r7, #28
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <LL_AHB2_GRP1_EnableClock>:
{
 800b462:	b480      	push	{r7}
 800b464:	b085      	sub	sp, #20
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b46a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b46e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4313      	orrs	r3, r2
 800b478:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b47a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b47e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4013      	ands	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b486:	68fb      	ldr	r3, [r7, #12]
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <LL_APB1_GRP1_EnableClock>:
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b49c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b4ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ba:	bf00      	nop
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <HAL_PCD_MspInit>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 8009668:	b580      	push	{r7, lr}
 800966a:	b09c      	sub	sp, #112	; 0x70
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009670:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	605a      	str	r2, [r3, #4]
 800967a:	609a      	str	r2, [r3, #8]
 800967c:	60da      	str	r2, [r3, #12]
 800967e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009680:	f107 030c 	add.w	r3, r7, #12
 8009684:	2250      	movs	r2, #80	; 0x50
 8009686:	2100      	movs	r1, #0
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fb41 	bl	8009d10 <memset>
  if(pcdHandle->Instance==USB)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a23      	ldr	r2, [pc, #140]	; (8009720 <HAL_PCD_MspInit+0xb8>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d13e      	bne.n	8009716 <HAL_PCD_MspInit+0xae>
=======
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b09c      	sub	sp, #112	; 0x70
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	605a      	str	r2, [r3, #4]
 800b4da:	609a      	str	r2, [r3, #8]
 800b4dc:	60da      	str	r2, [r3, #12]
 800b4de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b4e0:	f107 030c 	add.w	r3, r7, #12
 800b4e4:	2250      	movs	r2, #80	; 0x50
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fb41 	bl	800bb70 <memset>
  if(pcdHandle->Instance==USB)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a23      	ldr	r2, [pc, #140]	; (800b580 <HAL_PCD_MspInit+0xb8>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d13e      	bne.n	800b576 <HAL_PCD_MspInit+0xae>
>>>>>>> Stashed changes

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
<<<<<<< Updated upstream
 8009698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800969e:	2318      	movs	r3, #24
 80096a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80096a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096a6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80096a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80096ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80096b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80096b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096b8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80096ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80096be:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80096c0:	f107 030c 	add.w	r3, r7, #12
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fa fdbd 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80096d0:	f7f6 ff20 	bl	8000514 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096d4:	2001      	movs	r0, #1
 80096d6:	f7ff ff94 	bl	8009602 <LL_AHB2_GRP1_EnableClock>
=======
 800b4f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800b4fe:	2318      	movs	r3, #24
 800b500:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800b502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b506:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800b508:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b50c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800b50e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b512:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800b514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b518:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b51a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b51e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b520:	f107 030c 	add.w	r3, r7, #12
 800b524:	4618      	mov	r0, r3
 800b526:	f7f9 fb99 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800b530:	f7f5 f99c 	bl	800086c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b534:	2001      	movs	r0, #1
 800b536:	f7ff ff94 	bl	800b462 <LL_AHB2_GRP1_EnableClock>
>>>>>>> Stashed changes
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< Updated upstream
 80096da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e0:	2302      	movs	r3, #2
 80096e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e8:	2300      	movs	r3, #0
 80096ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80096ec:	230a      	movs	r3, #10
 80096ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80096f4:	4619      	mov	r1, r3
 80096f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096fa:	f7f7 fb9d 	bl	8000e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009702:	f7ff ff97 	bl	8009634 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009706:	2200      	movs	r2, #0
 8009708:	2100      	movs	r1, #0
 800970a:	2014      	movs	r0, #20
 800970c:	f7f7 fb5f 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009710:	2014      	movs	r0, #20
 8009712:	f7f7 fb76 	bl	8000e02 <HAL_NVIC_EnableIRQ>
=======
 800b53a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b53e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b540:	2302      	movs	r3, #2
 800b542:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b544:	2300      	movs	r3, #0
 800b546:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b548:	2300      	movs	r3, #0
 800b54a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800b54c:	230a      	movs	r3, #10
 800b54e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b550:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b554:	4619      	mov	r1, r3
 800b556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b55a:	f7f6 f979 	bl	8001850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b55e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b562:	f7ff ff97 	bl	800b494 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b566:	2200      	movs	r2, #0
 800b568:	2100      	movs	r1, #0
 800b56a:	2014      	movs	r0, #20
 800b56c:	f7f5 fe67 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b570:	2014      	movs	r0, #20
 800b572:	f7f5 fe7e 	bl	8001272 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8009716:	bf00      	nop
 8009718:	3770      	adds	r7, #112	; 0x70
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40006800 	.word	0x40006800

08009724 <HAL_PCD_SetupStageCallback>:
=======
 800b576:	bf00      	nop
 800b578:	3770      	adds	r7, #112	; 0x70
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	40006800 	.word	0x40006800

0800b584 <HAL_PCD_SetupStageCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
=======
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
<<<<<<< Updated upstream
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe fb7f 	bl	8007e3e <USBD_LL_SetupStage>
=======
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f7fe fb7f 	bl	8009c9e <USBD_LL_SetupStage>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
<<<<<<< Updated upstream
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_PCD_DataOutStageCallback>:
=======
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <HAL_PCD_DataOutStageCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	70fb      	strb	r3, [r7, #3]
=======
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
<<<<<<< Updated upstream
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	440b      	add	r3, r1
 8009768:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	4619      	mov	r1, r3
 8009772:	f7fe fbb9 	bl	8007ee8 <USBD_LL_DataOutStage>
=======
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b5ba:	78fa      	ldrb	r2, [r7, #3]
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	440b      	add	r3, r1
 800b5c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	78fb      	ldrb	r3, [r7, #3]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f7fe fbb9 	bl	8009d48 <USBD_LL_DataOutStage>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
<<<<<<< Updated upstream
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_PCD_DataInStageCallback>:
=======
 800b5d6:	bf00      	nop
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <HAL_PCD_DataInStageCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	70fb      	strb	r3, [r7, #3]
=======
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
<<<<<<< Updated upstream
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	440b      	add	r3, r1
 800979e:	333c      	adds	r3, #60	; 0x3c
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	4619      	mov	r1, r3
 80097a6:	f7fe fc52 	bl	800804e <USBD_LL_DataInStage>
=======
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	00db      	lsls	r3, r3, #3
 800b5fc:	440b      	add	r3, r1
 800b5fe:	333c      	adds	r3, #60	; 0x3c
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	78fb      	ldrb	r3, [r7, #3]
 800b604:	4619      	mov	r1, r3
 800b606:	f7fe fc52 	bl	8009eae <USBD_LL_DataInStage>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
<<<<<<< Updated upstream
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_PCD_SOFCallback>:
=======
 800b60a:	bf00      	nop
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <HAL_PCD_SOFCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
=======
 800b612:	b580      	push	{r7, lr}
 800b614:	b082      	sub	sp, #8
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< Updated upstream
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fd8c 	bl	80082de <USBD_LL_SOF>
=======
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fd8c 	bl	800a13e <USBD_LL_SOF>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
<<<<<<< Updated upstream
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_PCD_ResetCallback>:
=======
 800b626:	bf00      	nop
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <HAL_PCD_ResetCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
=======
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
<<<<<<< Updated upstream
 80097d6:	2301      	movs	r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d001      	beq.n	80097e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097e2:	f7f6 fe97 	bl	8000514 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097ec:	7bfa      	ldrb	r2, [r7, #15]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fd30 	bl	8008256 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fcd8 	bl	80081b2 <USBD_LL_Reset>
=======
 800b636:	2301      	movs	r3, #1
 800b638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d001      	beq.n	800b646 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b642:	f7f5 f913 	bl	800086c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b64c:	7bfa      	ldrb	r2, [r7, #15]
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f7fe fd30 	bl	800a0b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fcd8 	bl	800a012 <USBD_LL_Reset>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
<<<<<<< Updated upstream
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <HAL_PCD_SuspendCallback>:
=======
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <HAL_PCD_SuspendCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
=======
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< Updated upstream
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fd2b 	bl	8008276 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <HAL_PCD_SuspendCallback+0x30>)
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	4a03      	ldr	r2, [pc, #12]	; (800983c <HAL_PCD_SuspendCallback+0x30>)
 800982e:	f043 0306 	orr.w	r3, r3, #6
 8009832:	6113      	str	r3, [r2, #16]
=======
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe fd2b 	bl	800a0d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d005      	beq.n	800b694 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b688:	4b04      	ldr	r3, [pc, #16]	; (800b69c <HAL_PCD_SuspendCallback+0x30>)
 800b68a:	691b      	ldr	r3, [r3, #16]
 800b68c:	4a03      	ldr	r2, [pc, #12]	; (800b69c <HAL_PCD_SuspendCallback+0x30>)
 800b68e:	f043 0306 	orr.w	r3, r3, #6
 800b692:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
<<<<<<< Updated upstream
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	e000ed00 	.word	0xe000ed00

08009840 <HAL_PCD_ResumeCallback>:
=======
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	e000ed00 	.word	0xe000ed00

0800b6a0 <HAL_PCD_ResumeCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
=======
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
<<<<<<< Updated upstream
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <HAL_PCD_ResumeCallback+0x34>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	4a07      	ldr	r2, [pc, #28]	; (8009874 <HAL_PCD_ResumeCallback+0x34>)
 8009856:	f023 0306 	bic.w	r3, r3, #6
 800985a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800985c:	f000 f9fc 	bl	8009c58 <SystemClockConfig_Resume>
=======
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d007      	beq.n	800b6c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6b0:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <HAL_PCD_ResumeCallback+0x34>)
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	4a07      	ldr	r2, [pc, #28]	; (800b6d4 <HAL_PCD_ResumeCallback+0x34>)
 800b6b6:	f023 0306 	bic.w	r3, r3, #6
 800b6ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b6bc:	f000 f9fc 	bl	800bab8 <SystemClockConfig_Resume>
>>>>>>> Stashed changes
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< Updated upstream
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fd21 	bl	80082ae <USBD_LL_Resume>
=======
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fd21 	bl	800a10e <USBD_LL_Resume>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <USBD_LL_Init>:
=======
 800b6cc:	bf00      	nop
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	e000ed00 	.word	0xe000ed00

0800b6d8 <USBD_LL_Init>:
>>>>>>> Stashed changes
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009880:	4a2c      	ldr	r2, [pc, #176]	; (8009934 <USBD_LL_Init+0xbc>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a2a      	ldr	r2, [pc, #168]	; (8009934 <USBD_LL_Init+0xbc>)
 800988c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009890:	f7f9 f9d4 	bl	8002c3c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009894:	4b27      	ldr	r3, [pc, #156]	; (8009934 <USBD_LL_Init+0xbc>)
 8009896:	4a28      	ldr	r2, [pc, #160]	; (8009938 <USBD_LL_Init+0xc0>)
 8009898:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800989a:	4b26      	ldr	r3, [pc, #152]	; (8009934 <USBD_LL_Init+0xbc>)
 800989c:	2208      	movs	r2, #8
 800989e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098a0:	4b24      	ldr	r3, [pc, #144]	; (8009934 <USBD_LL_Init+0xbc>)
 80098a2:	2202      	movs	r2, #2
 80098a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098a6:	4b23      	ldr	r3, [pc, #140]	; (8009934 <USBD_LL_Init+0xbc>)
 80098a8:	2202      	movs	r2, #2
 80098aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80098ac:	4b21      	ldr	r3, [pc, #132]	; (8009934 <USBD_LL_Init+0xbc>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098b2:	4b20      	ldr	r3, [pc, #128]	; (8009934 <USBD_LL_Init+0xbc>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098b8:	4b1e      	ldr	r3, [pc, #120]	; (8009934 <USBD_LL_Init+0xbc>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098be:	4b1d      	ldr	r3, [pc, #116]	; (8009934 <USBD_LL_Init+0xbc>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	621a      	str	r2, [r3, #32]
=======
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b6e0:	4a2c      	ldr	r2, [pc, #176]	; (800b794 <USBD_LL_Init+0xbc>)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a2a      	ldr	r2, [pc, #168]	; (800b794 <USBD_LL_Init+0xbc>)
 800b6ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b6f0:	f7f7 ffb0 	bl	8003654 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800b6f4:	4b27      	ldr	r3, [pc, #156]	; (800b794 <USBD_LL_Init+0xbc>)
 800b6f6:	4a28      	ldr	r2, [pc, #160]	; (800b798 <USBD_LL_Init+0xc0>)
 800b6f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b6fa:	4b26      	ldr	r3, [pc, #152]	; (800b794 <USBD_LL_Init+0xbc>)
 800b6fc:	2208      	movs	r2, #8
 800b6fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b700:	4b24      	ldr	r3, [pc, #144]	; (800b794 <USBD_LL_Init+0xbc>)
 800b702:	2202      	movs	r2, #2
 800b704:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b706:	4b23      	ldr	r3, [pc, #140]	; (800b794 <USBD_LL_Init+0xbc>)
 800b708:	2202      	movs	r2, #2
 800b70a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b70c:	4b21      	ldr	r3, [pc, #132]	; (800b794 <USBD_LL_Init+0xbc>)
 800b70e:	2200      	movs	r2, #0
 800b710:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b712:	4b20      	ldr	r3, [pc, #128]	; (800b794 <USBD_LL_Init+0xbc>)
 800b714:	2200      	movs	r2, #0
 800b716:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b718:	4b1e      	ldr	r3, [pc, #120]	; (800b794 <USBD_LL_Init+0xbc>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b71e:	4b1d      	ldr	r3, [pc, #116]	; (800b794 <USBD_LL_Init+0xbc>)
 800b720:	2200      	movs	r2, #0
 800b722:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
<<<<<<< Updated upstream
 80098c4:	481b      	ldr	r0, [pc, #108]	; (8009934 <USBD_LL_Init+0xbc>)
 80098c6:	f7f7 fc57 	bl	8001178 <HAL_PCD_Init>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80098d0:	f7f6 fe20 	bl	8000514 <Error_Handler>
=======
 800b724:	481b      	ldr	r0, [pc, #108]	; (800b794 <USBD_LL_Init+0xbc>)
 800b726:	f7f6 fa33 	bl	8001b90 <HAL_PCD_Init>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b730:	f7f5 f89c 	bl	800086c <Error_Handler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
<<<<<<< Updated upstream
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098da:	2318      	movs	r3, #24
 80098dc:	2200      	movs	r2, #0
 80098de:	2100      	movs	r1, #0
 80098e0:	f7f9 f920 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098ea:	2358      	movs	r3, #88	; 0x58
 80098ec:	2200      	movs	r2, #0
 80098ee:	2180      	movs	r1, #128	; 0x80
 80098f0:	f7f9 f918 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098fa:	23c0      	movs	r3, #192	; 0xc0
 80098fc:	2200      	movs	r2, #0
 80098fe:	2181      	movs	r1, #129	; 0x81
 8009900:	f7f9 f910 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800990a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800990e:	2200      	movs	r2, #0
 8009910:	2101      	movs	r1, #1
 8009912:	f7f9 f907 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800991c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009920:	2200      	movs	r2, #0
 8009922:	2182      	movs	r1, #130	; 0x82
 8009924:	f7f9 f8fe 	bl	8002b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20001718 	.word	0x20001718
 8009938:	40006800 	.word	0x40006800

0800993c <USBD_LL_Start>:
=======
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b73a:	2318      	movs	r3, #24
 800b73c:	2200      	movs	r2, #0
 800b73e:	2100      	movs	r1, #0
 800b740:	f7f7 fefc 	bl	800353c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b74a:	2358      	movs	r3, #88	; 0x58
 800b74c:	2200      	movs	r2, #0
 800b74e:	2180      	movs	r1, #128	; 0x80
 800b750:	f7f7 fef4 	bl	800353c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b75a:	23c0      	movs	r3, #192	; 0xc0
 800b75c:	2200      	movs	r2, #0
 800b75e:	2181      	movs	r1, #129	; 0x81
 800b760:	f7f7 feec 	bl	800353c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b76a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b76e:	2200      	movs	r2, #0
 800b770:	2101      	movs	r1, #1
 800b772:	f7f7 fee3 	bl	800353c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b77c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b780:	2200      	movs	r2, #0
 800b782:	2182      	movs	r1, #130	; 0x82
 800b784:	f7f7 feda 	bl	800353c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	200017ec 	.word	0x200017ec
 800b798:	40006800 	.word	0x40006800

0800b79c <USBD_LL_Start>:
>>>>>>> Stashed changes
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009952:	4618      	mov	r0, r3
 8009954:	f7f7 fce9 	bl	800132a <HAL_PCD_Start>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f980 	bl	8009c64 <USBD_Get_USB_Status>
 8009964:	4603      	mov	r3, r0
 8009966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009968:	7bbb      	ldrb	r3, [r7, #14]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_OpenEP>:
=======
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7f6 fac5 	bl	8001d42 <HAL_PCD_Start>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 f980 	bl	800bac4 <USBD_Get_USB_Status>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <USBD_LL_OpenEP>:
>>>>>>> Stashed changes
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< Updated upstream
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	4608      	mov	r0, r1
 800997c:	4611      	mov	r1, r2
 800997e:	461a      	mov	r2, r3
 8009980:	4603      	mov	r3, r0
 8009982:	70fb      	strb	r3, [r7, #3]
 8009984:	460b      	mov	r3, r1
 8009986:	70bb      	strb	r3, [r7, #2]
 8009988:	4613      	mov	r3, r2
 800998a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800999a:	78bb      	ldrb	r3, [r7, #2]
 800999c:	883a      	ldrh	r2, [r7, #0]
 800999e:	78f9      	ldrb	r1, [r7, #3]
 80099a0:	f7f7 fe31 	bl	8001606 <HAL_PCD_EP_Open>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f95a 	bl	8009c64 <USBD_Get_USB_Status>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_LL_CloseEP>:
=======
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b084      	sub	sp, #16
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	4608      	mov	r0, r1
 800b7dc:	4611      	mov	r1, r2
 800b7de:	461a      	mov	r2, r3
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	70fb      	strb	r3, [r7, #3]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70bb      	strb	r3, [r7, #2]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7fa:	78bb      	ldrb	r3, [r7, #2]
 800b7fc:	883a      	ldrh	r2, [r7, #0]
 800b7fe:	78f9      	ldrb	r1, [r7, #3]
 800b800:	f7f6 fc0d 	bl	800201e <HAL_PCD_EP_Open>
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 f95a 	bl	800bac4 <USBD_Get_USB_Status>
 800b810:	4603      	mov	r3, r0
 800b812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b814:	7bbb      	ldrb	r3, [r7, #14]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_LL_CloseEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f7f7 fe6f 	bl	80016c0 <HAL_PCD_EP_Close>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f93b 	bl	8009c64 <USBD_Get_USB_Status>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_StallEP>:
=======
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	460b      	mov	r3, r1
 800b828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82a:	2300      	movs	r3, #0
 800b82c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b838:	78fa      	ldrb	r2, [r7, #3]
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7f6 fc4b 	bl	80020d8 <HAL_PCD_EP_Close>
 800b842:	4603      	mov	r3, r0
 800b844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 f93b 	bl	800bac4 <USBD_Get_USB_Status>
 800b84e:	4603      	mov	r3, r0
 800b850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b852:	7bbb      	ldrb	r3, [r7, #14]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_LL_StallEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f7 ff18 	bl	8001850 <HAL_PCD_EP_SetStall>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 f91c 	bl	8009c64 <USBD_Get_USB_Status>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBD_LL_ClearStallEP>:
=======
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b868:	2300      	movs	r3, #0
 800b86a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b876:	78fa      	ldrb	r2, [r7, #3]
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7f6 fcf4 	bl	8002268 <HAL_PCD_EP_SetStall>
 800b880:	4603      	mov	r3, r0
 800b882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	4618      	mov	r0, r3
 800b888:	f000 f91c 	bl	800bac4 <USBD_Get_USB_Status>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b890:	7bbb      	ldrb	r3, [r7, #14]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_LL_ClearStallEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f7 ff4b 	bl	80018f4 <HAL_PCD_EP_ClrStall>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 f8fd 	bl	8009c64 <USBD_Get_USB_Status>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_LL_IsStallEP>:
=======
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8b4:	78fa      	ldrb	r2, [r7, #3]
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7f6 fd27 	bl	800230c <HAL_PCD_EP_ClrStall>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 f8fd 	bl	800bac4 <USBD_Get_USB_Status>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBD_LL_IsStallEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da0c      	bge.n	8009aae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	440b      	add	r3, r1
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	e00b      	b.n	8009ac6 <USBD_LL_IsStallEP+0x4e>
=======
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	da0c      	bge.n	800b90e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	00db      	lsls	r3, r3, #3
 800b906:	440b      	add	r3, r1
 800b908:	3302      	adds	r3, #2
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	e00b      	b.n	800b926 <USBD_LL_IsStallEP+0x4e>
>>>>>>> Stashed changes
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< Updated upstream
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ab4:	68f9      	ldr	r1, [r7, #12]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	440b      	add	r3, r1
 8009ac0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ac4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USBD_LL_SetUSBAddress>:
=======
 800b90e:	78fb      	ldrb	r3, [r7, #3]
 800b910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b914:	68f9      	ldr	r1, [r7, #12]
 800b916:	4613      	mov	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	440b      	add	r3, r1
 800b920:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b924:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <USBD_LL_SetUSBAddress>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< Updated upstream
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7f7 fd63 	bl	80015bc <HAL_PCD_SetAddress>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 f8b1 	bl	8009c64 <USBD_Get_USB_Status>
 8009b02:	4603      	mov	r3, r0
 8009b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_LL_Transmit>:
=======
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	460b      	mov	r3, r1
 800b93c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b94c:	78fa      	ldrb	r2, [r7, #3]
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f7f6 fb3f 	bl	8001fd4 <HAL_PCD_SetAddress>
 800b956:	4603      	mov	r3, r0
 800b958:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 f8b1 	bl	800bac4 <USBD_Get_USB_Status>
 800b962:	4603      	mov	r3, r0
 800b964:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b966:	7bbb      	ldrb	r3, [r7, #14]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_LL_Transmit>:
>>>>>>> Stashed changes
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< Updated upstream
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b2e:	7af9      	ldrb	r1, [r7, #11]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	f7f7 fe55 	bl	80017e2 <HAL_PCD_EP_Transmit>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f890 	bl	8009c64 <USBD_Get_USB_Status>
 8009b44:	4603      	mov	r3, r0
 8009b46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b48:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_LL_PrepareReceive>:
=======
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	607a      	str	r2, [r7, #4]
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	460b      	mov	r3, r1
 800b97e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b98e:	7af9      	ldrb	r1, [r7, #11]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	f7f6 fc31 	bl	80021fa <HAL_PCD_EP_Transmit>
 800b998:	4603      	mov	r3, r0
 800b99a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f890 	bl	800bac4 <USBD_Get_USB_Status>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_PrepareReceive>:
>>>>>>> Stashed changes
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< Updated upstream
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b70:	7af9      	ldrb	r1, [r7, #11]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	f7f7 fdeb 	bl	8001750 <HAL_PCD_EP_Receive>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f86f 	bl	8009c64 <USBD_Get_USB_Status>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_GetRxDataSize>:
=======
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9d0:	7af9      	ldrb	r1, [r7, #11]
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	f7f6 fbc7 	bl	8002168 <HAL_PCD_EP_Receive>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 f86f 	bl	800bac4 <USBD_Get_USB_Status>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_LL_GetRxDataSize>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7f7 fe01 	bl	80017b2 <HAL_PCD_EP_GetRxCount>
 8009bb0:	4603      	mov	r3, r0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <HAL_PCDEx_LPM_Callback>:
=======
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f6 fbdd 	bl	80021ca <HAL_PCD_EP_GetRxCount>
 800ba10:	4603      	mov	r3, r0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
	...

0800ba1c <HAL_PCDEx_LPM_Callback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009bc8:	78fb      	ldrb	r3, [r7, #3]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <HAL_PCDEx_LPM_Callback+0x18>
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d013      	beq.n	8009bfa <HAL_PCDEx_LPM_Callback+0x3e>
=======
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <HAL_PCDEx_LPM_Callback+0x18>
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d013      	beq.n	800ba5a <HAL_PCDEx_LPM_Callback+0x3e>
>>>>>>> Stashed changes
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
<<<<<<< Updated upstream
 8009bd2:	e023      	b.n	8009c1c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d007      	beq.n	8009bec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009bdc:	f000 f83c 	bl	8009c58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be0:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4a0f      	ldr	r2, [pc, #60]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009be6:	f023 0306 	bic.w	r3, r3, #6
 8009bea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fb5b 	bl	80082ae <USBD_LL_Resume>
    break;
 8009bf8:	e010      	b.n	8009c1c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fb38 	bl	8008276 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d005      	beq.n	8009c1a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	4a04      	ldr	r2, [pc, #16]	; (8009c24 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c14:	f043 0306 	orr.w	r3, r3, #6
 8009c18:	6113      	str	r3, [r2, #16]
    break;
 8009c1a:	bf00      	nop
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	e000ed00 	.word	0xe000ed00

08009c28 <USBD_static_malloc>:
=======
 800ba32:	e023      	b.n	800ba7c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d007      	beq.n	800ba4c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ba3c:	f000 f83c 	bl	800bab8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba40:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	4a0f      	ldr	r2, [pc, #60]	; (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba46:	f023 0306 	bic.w	r3, r3, #6
 800ba4a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fb5b 	bl	800a10e <USBD_LL_Resume>
    break;
 800ba58:	e010      	b.n	800ba7c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fb38 	bl	800a0d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d005      	beq.n	800ba7a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	4a04      	ldr	r2, [pc, #16]	; (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba74:	f043 0306 	orr.w	r3, r3, #6
 800ba78:	6113      	str	r3, [r2, #16]
    break;
 800ba7a:	bf00      	nop
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	e000ed00 	.word	0xe000ed00

0800ba88 <USBD_static_malloc>:
>>>>>>> Stashed changes
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< Updated upstream
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c30:	4b03      	ldr	r3, [pc, #12]	; (8009c40 <USBD_static_malloc+0x18>)
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20001a0c 	.word	0x20001a0c

08009c44 <USBD_static_free>:
=======
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba90:	4b03      	ldr	r3, [pc, #12]	; (800baa0 <USBD_static_malloc+0x18>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20001ae0 	.word	0x20001ae0

0800baa4 <USBD_static_free>:
>>>>>>> Stashed changes
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< Updated upstream
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <SystemClockConfig_Resume>:
=======
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <SystemClockConfig_Resume>:
>>>>>>> Stashed changes
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
<<<<<<< Updated upstream
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009c5c:	f7f6 fb4a 	bl	80002f4 <SystemClock_Config>
}
 8009c60:	bf00      	nop
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_Get_USB_Status>:
=======
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800babc:	f7f4 fd04 	bl	80004c8 <SystemClock_Config>
}
 800bac0:	bf00      	nop
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_Get_USB_Status>:
>>>>>>> Stashed changes
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< Updated upstream
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d817      	bhi.n	8009ca8 <USBD_Get_USB_Status+0x44>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <USBD_Get_USB_Status+0x1c>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009c91 	.word	0x08009c91
 8009c84:	08009c97 	.word	0x08009c97
 8009c88:	08009c9d 	.word	0x08009c9d
 8009c8c:	08009ca3 	.word	0x08009ca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	e00b      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c96:	2303      	movs	r3, #3
 8009c98:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9a:	e008      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca0:	e005      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca6:	e002      	b.n	8009cae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cac:	bf00      	nop
  }
  return usb_status;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <__errno>:
 8009cbc:	4b01      	ldr	r3, [pc, #4]	; (8009cc4 <__errno+0x8>)
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20000148 	.word	0x20000148

08009cc8 <__libc_init_array>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	4d0d      	ldr	r5, [pc, #52]	; (8009d00 <__libc_init_array+0x38>)
 8009ccc:	4c0d      	ldr	r4, [pc, #52]	; (8009d04 <__libc_init_array+0x3c>)
 8009cce:	1b64      	subs	r4, r4, r5
 8009cd0:	10a4      	asrs	r4, r4, #2
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	42a6      	cmp	r6, r4
 8009cd6:	d109      	bne.n	8009cec <__libc_init_array+0x24>
 8009cd8:	4d0b      	ldr	r5, [pc, #44]	; (8009d08 <__libc_init_array+0x40>)
 8009cda:	4c0c      	ldr	r4, [pc, #48]	; (8009d0c <__libc_init_array+0x44>)
 8009cdc:	f000 ffae 	bl	800ac3c <_init>
 8009ce0:	1b64      	subs	r4, r4, r5
 8009ce2:	10a4      	asrs	r4, r4, #2
 8009ce4:	2600      	movs	r6, #0
 8009ce6:	42a6      	cmp	r6, r4
 8009ce8:	d105      	bne.n	8009cf6 <__libc_init_array+0x2e>
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf0:	4798      	blx	r3
 8009cf2:	3601      	adds	r6, #1
 8009cf4:	e7ee      	b.n	8009cd4 <__libc_init_array+0xc>
 8009cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfa:	4798      	blx	r3
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	e7f2      	b.n	8009ce6 <__libc_init_array+0x1e>
 8009d00:	0800ae70 	.word	0x0800ae70
 8009d04:	0800ae70 	.word	0x0800ae70
 8009d08:	0800ae70 	.word	0x0800ae70
 8009d0c:	0800ae74 	.word	0x0800ae74

08009d10 <memset>:
 8009d10:	4402      	add	r2, r0
 8009d12:	4603      	mov	r3, r0
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d100      	bne.n	8009d1a <memset+0xa>
 8009d18:	4770      	bx	lr
 8009d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1e:	e7f9      	b.n	8009d14 <memset+0x4>

08009d20 <iprintf>:
 8009d20:	b40f      	push	{r0, r1, r2, r3}
 8009d22:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <iprintf+0x2c>)
 8009d24:	b513      	push	{r0, r1, r4, lr}
 8009d26:	681c      	ldr	r4, [r3, #0]
 8009d28:	b124      	cbz	r4, 8009d34 <iprintf+0x14>
 8009d2a:	69a3      	ldr	r3, [r4, #24]
 8009d2c:	b913      	cbnz	r3, 8009d34 <iprintf+0x14>
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 f866 	bl	8009e00 <__sinit>
 8009d34:	ab05      	add	r3, sp, #20
 8009d36:	9a04      	ldr	r2, [sp, #16]
 8009d38:	68a1      	ldr	r1, [r4, #8]
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 f9bd 	bl	800a0bc <_vfiprintf_r>
 8009d42:	b002      	add	sp, #8
 8009d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d48:	b004      	add	sp, #16
 8009d4a:	4770      	bx	lr
 8009d4c:	20000148 	.word	0x20000148

08009d50 <std>:
 8009d50:	2300      	movs	r3, #0
 8009d52:	b510      	push	{r4, lr}
 8009d54:	4604      	mov	r4, r0
 8009d56:	e9c0 3300 	strd	r3, r3, [r0]
 8009d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d5e:	6083      	str	r3, [r0, #8]
 8009d60:	8181      	strh	r1, [r0, #12]
 8009d62:	6643      	str	r3, [r0, #100]	; 0x64
 8009d64:	81c2      	strh	r2, [r0, #14]
 8009d66:	6183      	str	r3, [r0, #24]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	2208      	movs	r2, #8
 8009d6c:	305c      	adds	r0, #92	; 0x5c
 8009d6e:	f7ff ffcf 	bl	8009d10 <memset>
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <std+0x38>)
 8009d74:	6263      	str	r3, [r4, #36]	; 0x24
 8009d76:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <std+0x3c>)
 8009d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d7a:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <std+0x40>)
 8009d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <std+0x44>)
 8009d80:	6224      	str	r4, [r4, #32]
 8009d82:	6323      	str	r3, [r4, #48]	; 0x30
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	bf00      	nop
 8009d88:	0800a665 	.word	0x0800a665
 8009d8c:	0800a687 	.word	0x0800a687
 8009d90:	0800a6bf 	.word	0x0800a6bf
 8009d94:	0800a6e3 	.word	0x0800a6e3

08009d98 <_cleanup_r>:
 8009d98:	4901      	ldr	r1, [pc, #4]	; (8009da0 <_cleanup_r+0x8>)
 8009d9a:	f000 b8af 	b.w	8009efc <_fwalk_reent>
 8009d9e:	bf00      	nop
 8009da0:	0800a9bd 	.word	0x0800a9bd

08009da4 <__sfmoreglue>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	2268      	movs	r2, #104	; 0x68
 8009da8:	1e4d      	subs	r5, r1, #1
 8009daa:	4355      	muls	r5, r2
 8009dac:	460e      	mov	r6, r1
 8009dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009db2:	f000 f8e5 	bl	8009f80 <_malloc_r>
 8009db6:	4604      	mov	r4, r0
 8009db8:	b140      	cbz	r0, 8009dcc <__sfmoreglue+0x28>
 8009dba:	2100      	movs	r1, #0
 8009dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8009dc0:	300c      	adds	r0, #12
 8009dc2:	60a0      	str	r0, [r4, #8]
 8009dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dc8:	f7ff ffa2 	bl	8009d10 <memset>
 8009dcc:	4620      	mov	r0, r4
 8009dce:	bd70      	pop	{r4, r5, r6, pc}

08009dd0 <__sfp_lock_acquire>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__sfp_lock_acquire+0x8>)
 8009dd2:	f000 b8b3 	b.w	8009f3c <__retarget_lock_acquire_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	20001c2d 	.word	0x20001c2d

08009ddc <__sfp_lock_release>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__sfp_lock_release+0x8>)
 8009dde:	f000 b8ae 	b.w	8009f3e <__retarget_lock_release_recursive>
 8009de2:	bf00      	nop
 8009de4:	20001c2d 	.word	0x20001c2d

08009de8 <__sinit_lock_acquire>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__sinit_lock_acquire+0x8>)
 8009dea:	f000 b8a7 	b.w	8009f3c <__retarget_lock_acquire_recursive>
 8009dee:	bf00      	nop
 8009df0:	20001c2e 	.word	0x20001c2e

08009df4 <__sinit_lock_release>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sinit_lock_release+0x8>)
 8009df6:	f000 b8a2 	b.w	8009f3e <__retarget_lock_release_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	20001c2e 	.word	0x20001c2e

08009e00 <__sinit>:
 8009e00:	b510      	push	{r4, lr}
 8009e02:	4604      	mov	r4, r0
 8009e04:	f7ff fff0 	bl	8009de8 <__sinit_lock_acquire>
 8009e08:	69a3      	ldr	r3, [r4, #24]
 8009e0a:	b11b      	cbz	r3, 8009e14 <__sinit+0x14>
 8009e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e10:	f7ff bff0 	b.w	8009df4 <__sinit_lock_release>
 8009e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e18:	6523      	str	r3, [r4, #80]	; 0x50
 8009e1a:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <__sinit+0x68>)
 8009e1c:	4a13      	ldr	r2, [pc, #76]	; (8009e6c <__sinit+0x6c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e22:	42a3      	cmp	r3, r4
 8009e24:	bf04      	itt	eq
 8009e26:	2301      	moveq	r3, #1
 8009e28:	61a3      	streq	r3, [r4, #24]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 f820 	bl	8009e70 <__sfp>
 8009e30:	6060      	str	r0, [r4, #4]
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 f81c 	bl	8009e70 <__sfp>
 8009e38:	60a0      	str	r0, [r4, #8]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 f818 	bl	8009e70 <__sfp>
 8009e40:	2200      	movs	r2, #0
 8009e42:	60e0      	str	r0, [r4, #12]
 8009e44:	2104      	movs	r1, #4
 8009e46:	6860      	ldr	r0, [r4, #4]
 8009e48:	f7ff ff82 	bl	8009d50 <std>
 8009e4c:	68a0      	ldr	r0, [r4, #8]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	2109      	movs	r1, #9
 8009e52:	f7ff ff7d 	bl	8009d50 <std>
 8009e56:	68e0      	ldr	r0, [r4, #12]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	2112      	movs	r1, #18
 8009e5c:	f7ff ff78 	bl	8009d50 <std>
 8009e60:	2301      	movs	r3, #1
 8009e62:	61a3      	str	r3, [r4, #24]
 8009e64:	e7d2      	b.n	8009e0c <__sinit+0xc>
 8009e66:	bf00      	nop
 8009e68:	0800add8 	.word	0x0800add8
 8009e6c:	08009d99 	.word	0x08009d99

08009e70 <__sfp>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	4607      	mov	r7, r0
 8009e74:	f7ff ffac 	bl	8009dd0 <__sfp_lock_acquire>
 8009e78:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <__sfp+0x84>)
 8009e7a:	681e      	ldr	r6, [r3, #0]
 8009e7c:	69b3      	ldr	r3, [r6, #24]
 8009e7e:	b913      	cbnz	r3, 8009e86 <__sfp+0x16>
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7ff ffbd 	bl	8009e00 <__sinit>
 8009e86:	3648      	adds	r6, #72	; 0x48
 8009e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	d503      	bpl.n	8009e98 <__sfp+0x28>
 8009e90:	6833      	ldr	r3, [r6, #0]
 8009e92:	b30b      	cbz	r3, 8009ed8 <__sfp+0x68>
 8009e94:	6836      	ldr	r6, [r6, #0]
 8009e96:	e7f7      	b.n	8009e88 <__sfp+0x18>
 8009e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e9c:	b9d5      	cbnz	r5, 8009ed4 <__sfp+0x64>
 8009e9e:	4b16      	ldr	r3, [pc, #88]	; (8009ef8 <__sfp+0x88>)
 8009ea0:	60e3      	str	r3, [r4, #12]
 8009ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ea8:	f000 f847 	bl	8009f3a <__retarget_lock_init_recursive>
 8009eac:	f7ff ff96 	bl	8009ddc <__sfp_lock_release>
 8009eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009eb8:	6025      	str	r5, [r4, #0]
 8009eba:	61a5      	str	r5, [r4, #24]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ec4:	f7ff ff24 	bl	8009d10 <memset>
 8009ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed4:	3468      	adds	r4, #104	; 0x68
 8009ed6:	e7d9      	b.n	8009e8c <__sfp+0x1c>
 8009ed8:	2104      	movs	r1, #4
 8009eda:	4638      	mov	r0, r7
 8009edc:	f7ff ff62 	bl	8009da4 <__sfmoreglue>
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	6030      	str	r0, [r6, #0]
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d1d5      	bne.n	8009e94 <__sfp+0x24>
 8009ee8:	f7ff ff78 	bl	8009ddc <__sfp_lock_release>
 8009eec:	230c      	movs	r3, #12
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	e7ee      	b.n	8009ed0 <__sfp+0x60>
 8009ef2:	bf00      	nop
 8009ef4:	0800add8 	.word	0x0800add8
 8009ef8:	ffff0001 	.word	0xffff0001

08009efc <_fwalk_reent>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	4606      	mov	r6, r0
 8009f02:	4688      	mov	r8, r1
 8009f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f08:	2700      	movs	r7, #0
 8009f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f12:	d505      	bpl.n	8009f20 <_fwalk_reent+0x24>
 8009f14:	6824      	ldr	r4, [r4, #0]
 8009f16:	2c00      	cmp	r4, #0
 8009f18:	d1f7      	bne.n	8009f0a <_fwalk_reent+0xe>
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f20:	89ab      	ldrh	r3, [r5, #12]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d907      	bls.n	8009f36 <_fwalk_reent+0x3a>
 8009f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	d003      	beq.n	8009f36 <_fwalk_reent+0x3a>
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4630      	mov	r0, r6
 8009f32:	47c0      	blx	r8
 8009f34:	4307      	orrs	r7, r0
 8009f36:	3568      	adds	r5, #104	; 0x68
 8009f38:	e7e9      	b.n	8009f0e <_fwalk_reent+0x12>

08009f3a <__retarget_lock_init_recursive>:
 8009f3a:	4770      	bx	lr

08009f3c <__retarget_lock_acquire_recursive>:
 8009f3c:	4770      	bx	lr

08009f3e <__retarget_lock_release_recursive>:
 8009f3e:	4770      	bx	lr

08009f40 <sbrk_aligned>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4e0e      	ldr	r6, [pc, #56]	; (8009f7c <sbrk_aligned+0x3c>)
 8009f44:	460c      	mov	r4, r1
 8009f46:	6831      	ldr	r1, [r6, #0]
 8009f48:	4605      	mov	r5, r0
 8009f4a:	b911      	cbnz	r1, 8009f52 <sbrk_aligned+0x12>
 8009f4c:	f000 fb7a 	bl	800a644 <_sbrk_r>
 8009f50:	6030      	str	r0, [r6, #0]
 8009f52:	4621      	mov	r1, r4
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 fb75 	bl	800a644 <_sbrk_r>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d00a      	beq.n	8009f74 <sbrk_aligned+0x34>
 8009f5e:	1cc4      	adds	r4, r0, #3
 8009f60:	f024 0403 	bic.w	r4, r4, #3
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d007      	beq.n	8009f78 <sbrk_aligned+0x38>
 8009f68:	1a21      	subs	r1, r4, r0
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 fb6a 	bl	800a644 <_sbrk_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d101      	bne.n	8009f78 <sbrk_aligned+0x38>
 8009f74:	f04f 34ff 	mov.w	r4, #4294967295
 8009f78:	4620      	mov	r0, r4
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	20001c34 	.word	0x20001c34

08009f80 <_malloc_r>:
 8009f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	1ccd      	adds	r5, r1, #3
 8009f86:	f025 0503 	bic.w	r5, r5, #3
 8009f8a:	3508      	adds	r5, #8
 8009f8c:	2d0c      	cmp	r5, #12
 8009f8e:	bf38      	it	cc
 8009f90:	250c      	movcc	r5, #12
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	4607      	mov	r7, r0
 8009f96:	db01      	blt.n	8009f9c <_malloc_r+0x1c>
 8009f98:	42a9      	cmp	r1, r5
 8009f9a:	d905      	bls.n	8009fa8 <_malloc_r+0x28>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa8:	4e2e      	ldr	r6, [pc, #184]	; (800a064 <_malloc_r+0xe4>)
 8009faa:	f000 fdbb 	bl	800ab24 <__malloc_lock>
 8009fae:	6833      	ldr	r3, [r6, #0]
 8009fb0:	461c      	mov	r4, r3
 8009fb2:	bb34      	cbnz	r4, 800a002 <_malloc_r+0x82>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7ff ffc2 	bl	8009f40 <sbrk_aligned>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	d14d      	bne.n	800a05e <_malloc_r+0xde>
 8009fc2:	6834      	ldr	r4, [r6, #0]
 8009fc4:	4626      	mov	r6, r4
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	d140      	bne.n	800a04c <_malloc_r+0xcc>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4638      	mov	r0, r7
 8009fd0:	eb04 0803 	add.w	r8, r4, r3
 8009fd4:	f000 fb36 	bl	800a644 <_sbrk_r>
 8009fd8:	4580      	cmp	r8, r0
 8009fda:	d13a      	bne.n	800a052 <_malloc_r+0xd2>
 8009fdc:	6821      	ldr	r1, [r4, #0]
 8009fde:	3503      	adds	r5, #3
 8009fe0:	1a6d      	subs	r5, r5, r1
 8009fe2:	f025 0503 	bic.w	r5, r5, #3
 8009fe6:	3508      	adds	r5, #8
 8009fe8:	2d0c      	cmp	r5, #12
 8009fea:	bf38      	it	cc
 8009fec:	250c      	movcc	r5, #12
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f7ff ffa5 	bl	8009f40 <sbrk_aligned>
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d02b      	beq.n	800a052 <_malloc_r+0xd2>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	442b      	add	r3, r5
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	e00e      	b.n	800a020 <_malloc_r+0xa0>
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	1b52      	subs	r2, r2, r5
 800a006:	d41e      	bmi.n	800a046 <_malloc_r+0xc6>
 800a008:	2a0b      	cmp	r2, #11
 800a00a:	d916      	bls.n	800a03a <_malloc_r+0xba>
 800a00c:	1961      	adds	r1, r4, r5
 800a00e:	42a3      	cmp	r3, r4
 800a010:	6025      	str	r5, [r4, #0]
 800a012:	bf18      	it	ne
 800a014:	6059      	strne	r1, [r3, #4]
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	bf08      	it	eq
 800a01a:	6031      	streq	r1, [r6, #0]
 800a01c:	5162      	str	r2, [r4, r5]
 800a01e:	604b      	str	r3, [r1, #4]
 800a020:	4638      	mov	r0, r7
 800a022:	f104 060b 	add.w	r6, r4, #11
 800a026:	f000 fd83 	bl	800ab30 <__malloc_unlock>
 800a02a:	f026 0607 	bic.w	r6, r6, #7
 800a02e:	1d23      	adds	r3, r4, #4
 800a030:	1af2      	subs	r2, r6, r3
 800a032:	d0b6      	beq.n	8009fa2 <_malloc_r+0x22>
 800a034:	1b9b      	subs	r3, r3, r6
 800a036:	50a3      	str	r3, [r4, r2]
 800a038:	e7b3      	b.n	8009fa2 <_malloc_r+0x22>
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	bf0c      	ite	eq
 800a040:	6032      	streq	r2, [r6, #0]
 800a042:	605a      	strne	r2, [r3, #4]
 800a044:	e7ec      	b.n	800a020 <_malloc_r+0xa0>
 800a046:	4623      	mov	r3, r4
 800a048:	6864      	ldr	r4, [r4, #4]
 800a04a:	e7b2      	b.n	8009fb2 <_malloc_r+0x32>
 800a04c:	4634      	mov	r4, r6
 800a04e:	6876      	ldr	r6, [r6, #4]
 800a050:	e7b9      	b.n	8009fc6 <_malloc_r+0x46>
 800a052:	230c      	movs	r3, #12
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	4638      	mov	r0, r7
 800a058:	f000 fd6a 	bl	800ab30 <__malloc_unlock>
 800a05c:	e7a1      	b.n	8009fa2 <_malloc_r+0x22>
 800a05e:	6025      	str	r5, [r4, #0]
 800a060:	e7de      	b.n	800a020 <_malloc_r+0xa0>
 800a062:	bf00      	nop
 800a064:	20001c30 	.word	0x20001c30

0800a068 <__sfputc_r>:
 800a068:	6893      	ldr	r3, [r2, #8]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	b410      	push	{r4}
 800a070:	6093      	str	r3, [r2, #8]
 800a072:	da08      	bge.n	800a086 <__sfputc_r+0x1e>
 800a074:	6994      	ldr	r4, [r2, #24]
 800a076:	42a3      	cmp	r3, r4
 800a078:	db01      	blt.n	800a07e <__sfputc_r+0x16>
 800a07a:	290a      	cmp	r1, #10
 800a07c:	d103      	bne.n	800a086 <__sfputc_r+0x1e>
 800a07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a082:	f000 bb33 	b.w	800a6ec <__swbuf_r>
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	1c58      	adds	r0, r3, #1
 800a08a:	6010      	str	r0, [r2, #0]
 800a08c:	7019      	strb	r1, [r3, #0]
 800a08e:	4608      	mov	r0, r1
 800a090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <__sfputs_r>:
 800a096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a098:	4606      	mov	r6, r0
 800a09a:	460f      	mov	r7, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	18d5      	adds	r5, r2, r3
 800a0a0:	42ac      	cmp	r4, r5
 800a0a2:	d101      	bne.n	800a0a8 <__sfputs_r+0x12>
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	e007      	b.n	800a0b8 <__sfputs_r+0x22>
 800a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ac:	463a      	mov	r2, r7
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7ff ffda 	bl	800a068 <__sfputc_r>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d1f3      	bne.n	800a0a0 <__sfputs_r+0xa>
 800a0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0bc <_vfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	b09d      	sub	sp, #116	; 0x74
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	4698      	mov	r8, r3
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	b118      	cbz	r0, 800a0d4 <_vfiprintf_r+0x18>
 800a0cc:	6983      	ldr	r3, [r0, #24]
 800a0ce:	b90b      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x18>
 800a0d0:	f7ff fe96 	bl	8009e00 <__sinit>
 800a0d4:	4b89      	ldr	r3, [pc, #548]	; (800a2fc <_vfiprintf_r+0x240>)
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	d11b      	bne.n	800a112 <_vfiprintf_r+0x56>
 800a0da:	6875      	ldr	r5, [r6, #4]
 800a0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0de:	07d9      	lsls	r1, r3, #31
 800a0e0:	d405      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	059a      	lsls	r2, r3, #22
 800a0e6:	d402      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ea:	f7ff ff27 	bl	8009f3c <__retarget_lock_acquire_recursive>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	071b      	lsls	r3, r3, #28
 800a0f2:	d501      	bpl.n	800a0f8 <_vfiprintf_r+0x3c>
 800a0f4:	692b      	ldr	r3, [r5, #16]
 800a0f6:	b9eb      	cbnz	r3, 800a134 <_vfiprintf_r+0x78>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f000 fb5a 	bl	800a7b4 <__swsetup_r>
 800a100:	b1c0      	cbz	r0, 800a134 <_vfiprintf_r+0x78>
 800a102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a104:	07dc      	lsls	r4, r3, #31
 800a106:	d50e      	bpl.n	800a126 <_vfiprintf_r+0x6a>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b01d      	add	sp, #116	; 0x74
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	4b7b      	ldr	r3, [pc, #492]	; (800a300 <_vfiprintf_r+0x244>)
 800a114:	429d      	cmp	r5, r3
 800a116:	d101      	bne.n	800a11c <_vfiprintf_r+0x60>
 800a118:	68b5      	ldr	r5, [r6, #8]
 800a11a:	e7df      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a11c:	4b79      	ldr	r3, [pc, #484]	; (800a304 <_vfiprintf_r+0x248>)
 800a11e:	429d      	cmp	r5, r3
 800a120:	bf08      	it	eq
 800a122:	68f5      	ldreq	r5, [r6, #12]
 800a124:	e7da      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	0598      	lsls	r0, r3, #22
 800a12a:	d4ed      	bmi.n	800a108 <_vfiprintf_r+0x4c>
 800a12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12e:	f7ff ff06 	bl	8009f3e <__retarget_lock_release_recursive>
 800a132:	e7e9      	b.n	800a108 <_vfiprintf_r+0x4c>
 800a134:	2300      	movs	r3, #0
 800a136:	9309      	str	r3, [sp, #36]	; 0x24
 800a138:	2320      	movs	r3, #32
 800a13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a142:	2330      	movs	r3, #48	; 0x30
 800a144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a308 <_vfiprintf_r+0x24c>
 800a148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a14c:	f04f 0901 	mov.w	r9, #1
 800a150:	4623      	mov	r3, r4
 800a152:	469a      	mov	sl, r3
 800a154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a158:	b10a      	cbz	r2, 800a15e <_vfiprintf_r+0xa2>
 800a15a:	2a25      	cmp	r2, #37	; 0x25
 800a15c:	d1f9      	bne.n	800a152 <_vfiprintf_r+0x96>
 800a15e:	ebba 0b04 	subs.w	fp, sl, r4
 800a162:	d00b      	beq.n	800a17c <_vfiprintf_r+0xc0>
 800a164:	465b      	mov	r3, fp
 800a166:	4622      	mov	r2, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ff93 	bl	800a096 <__sfputs_r>
 800a170:	3001      	adds	r0, #1
 800a172:	f000 80aa 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a178:	445a      	add	r2, fp
 800a17a:	9209      	str	r2, [sp, #36]	; 0x24
 800a17c:	f89a 3000 	ldrb.w	r3, [sl]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80a2 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a186:	2300      	movs	r3, #0
 800a188:	f04f 32ff 	mov.w	r2, #4294967295
 800a18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a190:	f10a 0a01 	add.w	sl, sl, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a19c:	931a      	str	r3, [sp, #104]	; 0x68
 800a19e:	4654      	mov	r4, sl
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a6:	4858      	ldr	r0, [pc, #352]	; (800a308 <_vfiprintf_r+0x24c>)
 800a1a8:	f7f5 ffea 	bl	8000180 <memchr>
 800a1ac:	9a04      	ldr	r2, [sp, #16]
 800a1ae:	b9d8      	cbnz	r0, 800a1e8 <_vfiprintf_r+0x12c>
 800a1b0:	06d1      	lsls	r1, r2, #27
 800a1b2:	bf44      	itt	mi
 800a1b4:	2320      	movmi	r3, #32
 800a1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ba:	0713      	lsls	r3, r2, #28
 800a1bc:	bf44      	itt	mi
 800a1be:	232b      	movmi	r3, #43	; 0x2b
 800a1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ca:	d015      	beq.n	800a1f8 <_vfiprintf_r+0x13c>
 800a1cc:	9a07      	ldr	r2, [sp, #28]
 800a1ce:	4654      	mov	r4, sl
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	f04f 0c0a 	mov.w	ip, #10
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1dc:	3b30      	subs	r3, #48	; 0x30
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d94e      	bls.n	800a280 <_vfiprintf_r+0x1c4>
 800a1e2:	b1b0      	cbz	r0, 800a212 <_vfiprintf_r+0x156>
 800a1e4:	9207      	str	r2, [sp, #28]
 800a1e6:	e014      	b.n	800a212 <_vfiprintf_r+0x156>
 800a1e8:	eba0 0308 	sub.w	r3, r0, r8
 800a1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	46a2      	mov	sl, r4
 800a1f6:	e7d2      	b.n	800a19e <_vfiprintf_r+0xe2>
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	1d19      	adds	r1, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9103      	str	r1, [sp, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfbb      	ittet	lt
 800a204:	425b      	neglt	r3, r3
 800a206:	f042 0202 	orrlt.w	r2, r2, #2
 800a20a:	9307      	strge	r3, [sp, #28]
 800a20c:	9307      	strlt	r3, [sp, #28]
 800a20e:	bfb8      	it	lt
 800a210:	9204      	strlt	r2, [sp, #16]
 800a212:	7823      	ldrb	r3, [r4, #0]
 800a214:	2b2e      	cmp	r3, #46	; 0x2e
 800a216:	d10c      	bne.n	800a232 <_vfiprintf_r+0x176>
 800a218:	7863      	ldrb	r3, [r4, #1]
 800a21a:	2b2a      	cmp	r3, #42	; 0x2a
 800a21c:	d135      	bne.n	800a28a <_vfiprintf_r+0x1ce>
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	1d1a      	adds	r2, r3, #4
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	9203      	str	r2, [sp, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	bfb8      	it	lt
 800a22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a22e:	3402      	adds	r4, #2
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a318 <_vfiprintf_r+0x25c>
 800a236:	7821      	ldrb	r1, [r4, #0]
 800a238:	2203      	movs	r2, #3
 800a23a:	4650      	mov	r0, sl
 800a23c:	f7f5 ffa0 	bl	8000180 <memchr>
 800a240:	b140      	cbz	r0, 800a254 <_vfiprintf_r+0x198>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	eba0 000a 	sub.w	r0, r0, sl
 800a248:	fa03 f000 	lsl.w	r0, r3, r0
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	4303      	orrs	r3, r0
 800a250:	3401      	adds	r4, #1
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	482c      	ldr	r0, [pc, #176]	; (800a30c <_vfiprintf_r+0x250>)
 800a25a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25e:	2206      	movs	r2, #6
 800a260:	f7f5 ff8e 	bl	8000180 <memchr>
 800a264:	2800      	cmp	r0, #0
 800a266:	d03f      	beq.n	800a2e8 <_vfiprintf_r+0x22c>
 800a268:	4b29      	ldr	r3, [pc, #164]	; (800a310 <_vfiprintf_r+0x254>)
 800a26a:	bb1b      	cbnz	r3, 800a2b4 <_vfiprintf_r+0x1f8>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	3307      	adds	r3, #7
 800a270:	f023 0307 	bic.w	r3, r3, #7
 800a274:	3308      	adds	r3, #8
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	443b      	add	r3, r7
 800a27c:	9309      	str	r3, [sp, #36]	; 0x24
 800a27e:	e767      	b.n	800a150 <_vfiprintf_r+0x94>
 800a280:	fb0c 3202 	mla	r2, ip, r2, r3
 800a284:	460c      	mov	r4, r1
 800a286:	2001      	movs	r0, #1
 800a288:	e7a5      	b.n	800a1d6 <_vfiprintf_r+0x11a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	3401      	adds	r4, #1
 800a28e:	9305      	str	r3, [sp, #20]
 800a290:	4619      	mov	r1, r3
 800a292:	f04f 0c0a 	mov.w	ip, #10
 800a296:	4620      	mov	r0, r4
 800a298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29c:	3a30      	subs	r2, #48	; 0x30
 800a29e:	2a09      	cmp	r2, #9
 800a2a0:	d903      	bls.n	800a2aa <_vfiprintf_r+0x1ee>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0c5      	beq.n	800a232 <_vfiprintf_r+0x176>
 800a2a6:	9105      	str	r1, [sp, #20]
 800a2a8:	e7c3      	b.n	800a232 <_vfiprintf_r+0x176>
 800a2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e7f0      	b.n	800a296 <_vfiprintf_r+0x1da>
 800a2b4:	ab03      	add	r3, sp, #12
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	4b16      	ldr	r3, [pc, #88]	; (800a314 <_vfiprintf_r+0x258>)
 800a2bc:	a904      	add	r1, sp, #16
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f3af 8000 	nop.w
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	1c78      	adds	r0, r7, #1
 800a2c8:	d1d6      	bne.n	800a278 <_vfiprintf_r+0x1bc>
 800a2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2cc:	07d9      	lsls	r1, r3, #31
 800a2ce:	d405      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d0:	89ab      	ldrh	r3, [r5, #12]
 800a2d2:	059a      	lsls	r2, r3, #22
 800a2d4:	d402      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d8:	f7ff fe31 	bl	8009f3e <__retarget_lock_release_recursive>
 800a2dc:	89ab      	ldrh	r3, [r5, #12]
 800a2de:	065b      	lsls	r3, r3, #25
 800a2e0:	f53f af12 	bmi.w	800a108 <_vfiprintf_r+0x4c>
 800a2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e6:	e711      	b.n	800a10c <_vfiprintf_r+0x50>
 800a2e8:	ab03      	add	r3, sp, #12
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <_vfiprintf_r+0x258>)
 800a2f0:	a904      	add	r1, sp, #16
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f000 f880 	bl	800a3f8 <_printf_i>
 800a2f8:	e7e4      	b.n	800a2c4 <_vfiprintf_r+0x208>
 800a2fa:	bf00      	nop
 800a2fc:	0800adfc 	.word	0x0800adfc
 800a300:	0800ae1c 	.word	0x0800ae1c
 800a304:	0800addc 	.word	0x0800addc
 800a308:	0800ae3c 	.word	0x0800ae3c
 800a30c:	0800ae46 	.word	0x0800ae46
 800a310:	00000000 	.word	0x00000000
 800a314:	0800a097 	.word	0x0800a097
 800a318:	0800ae42 	.word	0x0800ae42

0800a31c <_printf_common>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	4616      	mov	r6, r2
 800a322:	4699      	mov	r9, r3
 800a324:	688a      	ldr	r2, [r1, #8]
 800a326:	690b      	ldr	r3, [r1, #16]
 800a328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	bfb8      	it	lt
 800a330:	4613      	movlt	r3, r2
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a338:	4607      	mov	r7, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	b10a      	cbz	r2, 800a342 <_printf_common+0x26>
 800a33e:	3301      	adds	r3, #1
 800a340:	6033      	str	r3, [r6, #0]
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	0699      	lsls	r1, r3, #26
 800a346:	bf42      	ittt	mi
 800a348:	6833      	ldrmi	r3, [r6, #0]
 800a34a:	3302      	addmi	r3, #2
 800a34c:	6033      	strmi	r3, [r6, #0]
 800a34e:	6825      	ldr	r5, [r4, #0]
 800a350:	f015 0506 	ands.w	r5, r5, #6
 800a354:	d106      	bne.n	800a364 <_printf_common+0x48>
 800a356:	f104 0a19 	add.w	sl, r4, #25
 800a35a:	68e3      	ldr	r3, [r4, #12]
 800a35c:	6832      	ldr	r2, [r6, #0]
 800a35e:	1a9b      	subs	r3, r3, r2
 800a360:	42ab      	cmp	r3, r5
 800a362:	dc26      	bgt.n	800a3b2 <_printf_common+0x96>
 800a364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a368:	1e13      	subs	r3, r2, #0
 800a36a:	6822      	ldr	r2, [r4, #0]
 800a36c:	bf18      	it	ne
 800a36e:	2301      	movne	r3, #1
 800a370:	0692      	lsls	r2, r2, #26
 800a372:	d42b      	bmi.n	800a3cc <_printf_common+0xb0>
 800a374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a378:	4649      	mov	r1, r9
 800a37a:	4638      	mov	r0, r7
 800a37c:	47c0      	blx	r8
 800a37e:	3001      	adds	r0, #1
 800a380:	d01e      	beq.n	800a3c0 <_printf_common+0xa4>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	68e5      	ldr	r5, [r4, #12]
 800a386:	6832      	ldr	r2, [r6, #0]
 800a388:	f003 0306 	and.w	r3, r3, #6
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	bf08      	it	eq
 800a390:	1aad      	subeq	r5, r5, r2
 800a392:	68a3      	ldr	r3, [r4, #8]
 800a394:	6922      	ldr	r2, [r4, #16]
 800a396:	bf0c      	ite	eq
 800a398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a39c:	2500      	movne	r5, #0
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	bfc4      	itt	gt
 800a3a2:	1a9b      	subgt	r3, r3, r2
 800a3a4:	18ed      	addgt	r5, r5, r3
 800a3a6:	2600      	movs	r6, #0
 800a3a8:	341a      	adds	r4, #26
 800a3aa:	42b5      	cmp	r5, r6
 800a3ac:	d11a      	bne.n	800a3e4 <_printf_common+0xc8>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e008      	b.n	800a3c4 <_printf_common+0xa8>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	47c0      	blx	r8
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d103      	bne.n	800a3c8 <_printf_common+0xac>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	e7c6      	b.n	800a35a <_printf_common+0x3e>
 800a3cc:	18e1      	adds	r1, r4, r3
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	2030      	movs	r0, #48	; 0x30
 800a3d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3d6:	4422      	add	r2, r4
 800a3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	e7c7      	b.n	800a374 <_printf_common+0x58>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c0      	blx	r8
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d0e6      	beq.n	800a3c0 <_printf_common+0xa4>
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	e7d9      	b.n	800a3aa <_printf_common+0x8e>
	...

0800a3f8 <_printf_i>:
 800a3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fc:	7e0f      	ldrb	r7, [r1, #24]
 800a3fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a400:	2f78      	cmp	r7, #120	; 0x78
 800a402:	4691      	mov	r9, r2
 800a404:	4680      	mov	r8, r0
 800a406:	460c      	mov	r4, r1
 800a408:	469a      	mov	sl, r3
 800a40a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a40e:	d807      	bhi.n	800a420 <_printf_i+0x28>
 800a410:	2f62      	cmp	r7, #98	; 0x62
 800a412:	d80a      	bhi.n	800a42a <_printf_i+0x32>
 800a414:	2f00      	cmp	r7, #0
 800a416:	f000 80d8 	beq.w	800a5ca <_printf_i+0x1d2>
 800a41a:	2f58      	cmp	r7, #88	; 0x58
 800a41c:	f000 80a3 	beq.w	800a566 <_printf_i+0x16e>
 800a420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a428:	e03a      	b.n	800a4a0 <_printf_i+0xa8>
 800a42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a42e:	2b15      	cmp	r3, #21
 800a430:	d8f6      	bhi.n	800a420 <_printf_i+0x28>
 800a432:	a101      	add	r1, pc, #4	; (adr r1, 800a438 <_printf_i+0x40>)
 800a434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a438:	0800a491 	.word	0x0800a491
 800a43c:	0800a4a5 	.word	0x0800a4a5
 800a440:	0800a421 	.word	0x0800a421
 800a444:	0800a421 	.word	0x0800a421
 800a448:	0800a421 	.word	0x0800a421
 800a44c:	0800a421 	.word	0x0800a421
 800a450:	0800a4a5 	.word	0x0800a4a5
 800a454:	0800a421 	.word	0x0800a421
 800a458:	0800a421 	.word	0x0800a421
 800a45c:	0800a421 	.word	0x0800a421
 800a460:	0800a421 	.word	0x0800a421
 800a464:	0800a5b1 	.word	0x0800a5b1
 800a468:	0800a4d5 	.word	0x0800a4d5
 800a46c:	0800a593 	.word	0x0800a593
 800a470:	0800a421 	.word	0x0800a421
 800a474:	0800a421 	.word	0x0800a421
 800a478:	0800a5d3 	.word	0x0800a5d3
 800a47c:	0800a421 	.word	0x0800a421
 800a480:	0800a4d5 	.word	0x0800a4d5
 800a484:	0800a421 	.word	0x0800a421
 800a488:	0800a421 	.word	0x0800a421
 800a48c:	0800a59b 	.word	0x0800a59b
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	1d1a      	adds	r2, r3, #4
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	602a      	str	r2, [r5, #0]
 800a498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0a3      	b.n	800a5ec <_printf_i+0x1f4>
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	6829      	ldr	r1, [r5, #0]
 800a4a8:	0606      	lsls	r6, r0, #24
 800a4aa:	f101 0304 	add.w	r3, r1, #4
 800a4ae:	d50a      	bpl.n	800a4c6 <_printf_i+0xce>
 800a4b0:	680e      	ldr	r6, [r1, #0]
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	2e00      	cmp	r6, #0
 800a4b6:	da03      	bge.n	800a4c0 <_printf_i+0xc8>
 800a4b8:	232d      	movs	r3, #45	; 0x2d
 800a4ba:	4276      	negs	r6, r6
 800a4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c0:	485e      	ldr	r0, [pc, #376]	; (800a63c <_printf_i+0x244>)
 800a4c2:	230a      	movs	r3, #10
 800a4c4:	e019      	b.n	800a4fa <_printf_i+0x102>
 800a4c6:	680e      	ldr	r6, [r1, #0]
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4ce:	bf18      	it	ne
 800a4d0:	b236      	sxthne	r6, r6
 800a4d2:	e7ef      	b.n	800a4b4 <_printf_i+0xbc>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	6820      	ldr	r0, [r4, #0]
 800a4d8:	1d19      	adds	r1, r3, #4
 800a4da:	6029      	str	r1, [r5, #0]
 800a4dc:	0601      	lsls	r1, r0, #24
 800a4de:	d501      	bpl.n	800a4e4 <_printf_i+0xec>
 800a4e0:	681e      	ldr	r6, [r3, #0]
 800a4e2:	e002      	b.n	800a4ea <_printf_i+0xf2>
 800a4e4:	0646      	lsls	r6, r0, #25
 800a4e6:	d5fb      	bpl.n	800a4e0 <_printf_i+0xe8>
 800a4e8:	881e      	ldrh	r6, [r3, #0]
 800a4ea:	4854      	ldr	r0, [pc, #336]	; (800a63c <_printf_i+0x244>)
 800a4ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2308      	moveq	r3, #8
 800a4f2:	230a      	movne	r3, #10
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4fa:	6865      	ldr	r5, [r4, #4]
 800a4fc:	60a5      	str	r5, [r4, #8]
 800a4fe:	2d00      	cmp	r5, #0
 800a500:	bfa2      	ittt	ge
 800a502:	6821      	ldrge	r1, [r4, #0]
 800a504:	f021 0104 	bicge.w	r1, r1, #4
 800a508:	6021      	strge	r1, [r4, #0]
 800a50a:	b90e      	cbnz	r6, 800a510 <_printf_i+0x118>
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	d04d      	beq.n	800a5ac <_printf_i+0x1b4>
 800a510:	4615      	mov	r5, r2
 800a512:	fbb6 f1f3 	udiv	r1, r6, r3
 800a516:	fb03 6711 	mls	r7, r3, r1, r6
 800a51a:	5dc7      	ldrb	r7, [r0, r7]
 800a51c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a520:	4637      	mov	r7, r6
 800a522:	42bb      	cmp	r3, r7
 800a524:	460e      	mov	r6, r1
 800a526:	d9f4      	bls.n	800a512 <_printf_i+0x11a>
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d10b      	bne.n	800a544 <_printf_i+0x14c>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	07de      	lsls	r6, r3, #31
 800a530:	d508      	bpl.n	800a544 <_printf_i+0x14c>
 800a532:	6923      	ldr	r3, [r4, #16]
 800a534:	6861      	ldr	r1, [r4, #4]
 800a536:	4299      	cmp	r1, r3
 800a538:	bfde      	ittt	le
 800a53a:	2330      	movle	r3, #48	; 0x30
 800a53c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a540:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a544:	1b52      	subs	r2, r2, r5
 800a546:	6122      	str	r2, [r4, #16]
 800a548:	f8cd a000 	str.w	sl, [sp]
 800a54c:	464b      	mov	r3, r9
 800a54e:	aa03      	add	r2, sp, #12
 800a550:	4621      	mov	r1, r4
 800a552:	4640      	mov	r0, r8
 800a554:	f7ff fee2 	bl	800a31c <_printf_common>
 800a558:	3001      	adds	r0, #1
 800a55a:	d14c      	bne.n	800a5f6 <_printf_i+0x1fe>
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	b004      	add	sp, #16
 800a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a566:	4835      	ldr	r0, [pc, #212]	; (800a63c <_printf_i+0x244>)
 800a568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a56c:	6829      	ldr	r1, [r5, #0]
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	f851 6b04 	ldr.w	r6, [r1], #4
 800a574:	6029      	str	r1, [r5, #0]
 800a576:	061d      	lsls	r5, r3, #24
 800a578:	d514      	bpl.n	800a5a4 <_printf_i+0x1ac>
 800a57a:	07df      	lsls	r7, r3, #31
 800a57c:	bf44      	itt	mi
 800a57e:	f043 0320 	orrmi.w	r3, r3, #32
 800a582:	6023      	strmi	r3, [r4, #0]
 800a584:	b91e      	cbnz	r6, 800a58e <_printf_i+0x196>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	f023 0320 	bic.w	r3, r3, #32
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	2310      	movs	r3, #16
 800a590:	e7b0      	b.n	800a4f4 <_printf_i+0xfc>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	f043 0320 	orr.w	r3, r3, #32
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	2378      	movs	r3, #120	; 0x78
 800a59c:	4828      	ldr	r0, [pc, #160]	; (800a640 <_printf_i+0x248>)
 800a59e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5a2:	e7e3      	b.n	800a56c <_printf_i+0x174>
 800a5a4:	0659      	lsls	r1, r3, #25
 800a5a6:	bf48      	it	mi
 800a5a8:	b2b6      	uxthmi	r6, r6
 800a5aa:	e7e6      	b.n	800a57a <_printf_i+0x182>
 800a5ac:	4615      	mov	r5, r2
 800a5ae:	e7bb      	b.n	800a528 <_printf_i+0x130>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	6826      	ldr	r6, [r4, #0]
 800a5b4:	6961      	ldr	r1, [r4, #20]
 800a5b6:	1d18      	adds	r0, r3, #4
 800a5b8:	6028      	str	r0, [r5, #0]
 800a5ba:	0635      	lsls	r5, r6, #24
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	d501      	bpl.n	800a5c4 <_printf_i+0x1cc>
 800a5c0:	6019      	str	r1, [r3, #0]
 800a5c2:	e002      	b.n	800a5ca <_printf_i+0x1d2>
 800a5c4:	0670      	lsls	r0, r6, #25
 800a5c6:	d5fb      	bpl.n	800a5c0 <_printf_i+0x1c8>
 800a5c8:	8019      	strh	r1, [r3, #0]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	4615      	mov	r5, r2
 800a5d0:	e7ba      	b.n	800a548 <_printf_i+0x150>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	1d1a      	adds	r2, r3, #4
 800a5d6:	602a      	str	r2, [r5, #0]
 800a5d8:	681d      	ldr	r5, [r3, #0]
 800a5da:	6862      	ldr	r2, [r4, #4]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f7f5 fdce 	bl	8000180 <memchr>
 800a5e4:	b108      	cbz	r0, 800a5ea <_printf_i+0x1f2>
 800a5e6:	1b40      	subs	r0, r0, r5
 800a5e8:	6060      	str	r0, [r4, #4]
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	6123      	str	r3, [r4, #16]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f4:	e7a8      	b.n	800a548 <_printf_i+0x150>
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	47d0      	blx	sl
 800a600:	3001      	adds	r0, #1
 800a602:	d0ab      	beq.n	800a55c <_printf_i+0x164>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	079b      	lsls	r3, r3, #30
 800a608:	d413      	bmi.n	800a632 <_printf_i+0x23a>
 800a60a:	68e0      	ldr	r0, [r4, #12]
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	4298      	cmp	r0, r3
 800a610:	bfb8      	it	lt
 800a612:	4618      	movlt	r0, r3
 800a614:	e7a4      	b.n	800a560 <_printf_i+0x168>
 800a616:	2301      	movs	r3, #1
 800a618:	4632      	mov	r2, r6
 800a61a:	4649      	mov	r1, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	47d0      	blx	sl
 800a620:	3001      	adds	r0, #1
 800a622:	d09b      	beq.n	800a55c <_printf_i+0x164>
 800a624:	3501      	adds	r5, #1
 800a626:	68e3      	ldr	r3, [r4, #12]
 800a628:	9903      	ldr	r1, [sp, #12]
 800a62a:	1a5b      	subs	r3, r3, r1
 800a62c:	42ab      	cmp	r3, r5
 800a62e:	dcf2      	bgt.n	800a616 <_printf_i+0x21e>
 800a630:	e7eb      	b.n	800a60a <_printf_i+0x212>
 800a632:	2500      	movs	r5, #0
 800a634:	f104 0619 	add.w	r6, r4, #25
 800a638:	e7f5      	b.n	800a626 <_printf_i+0x22e>
 800a63a:	bf00      	nop
 800a63c:	0800ae4d 	.word	0x0800ae4d
 800a640:	0800ae5e 	.word	0x0800ae5e

0800a644 <_sbrk_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d06      	ldr	r5, [pc, #24]	; (800a660 <_sbrk_r+0x1c>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	f7f6 f976 	bl	8000940 <_sbrk>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_sbrk_r+0x1a>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_sbrk_r+0x1a>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20001c38 	.word	0x20001c38

0800a664 <__sread>:
 800a664:	b510      	push	{r4, lr}
 800a666:	460c      	mov	r4, r1
 800a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a66c:	f000 fab2 	bl	800abd4 <_read_r>
 800a670:	2800      	cmp	r0, #0
 800a672:	bfab      	itete	ge
 800a674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a676:	89a3      	ldrhlt	r3, [r4, #12]
 800a678:	181b      	addge	r3, r3, r0
 800a67a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a67e:	bfac      	ite	ge
 800a680:	6563      	strge	r3, [r4, #84]	; 0x54
 800a682:	81a3      	strhlt	r3, [r4, #12]
 800a684:	bd10      	pop	{r4, pc}

0800a686 <__swrite>:
 800a686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68a:	461f      	mov	r7, r3
 800a68c:	898b      	ldrh	r3, [r1, #12]
 800a68e:	05db      	lsls	r3, r3, #23
 800a690:	4605      	mov	r5, r0
 800a692:	460c      	mov	r4, r1
 800a694:	4616      	mov	r6, r2
 800a696:	d505      	bpl.n	800a6a4 <__swrite+0x1e>
 800a698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69c:	2302      	movs	r3, #2
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f000 f9c8 	bl	800aa34 <_lseek_r>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	463b      	mov	r3, r7
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ba:	f000 b869 	b.w	800a790 <_write_r>

0800a6be <__sseek>:
 800a6be:	b510      	push	{r4, lr}
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c6:	f000 f9b5 	bl	800aa34 <_lseek_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	bf15      	itete	ne
 800a6d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6da:	81a3      	strheq	r3, [r4, #12]
 800a6dc:	bf18      	it	ne
 800a6de:	81a3      	strhne	r3, [r4, #12]
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <__sclose>:
 800a6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e6:	f000 b8d3 	b.w	800a890 <_close_r>
	...

0800a6ec <__swbuf_r>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	b118      	cbz	r0, 800a6fe <__swbuf_r+0x12>
 800a6f6:	6983      	ldr	r3, [r0, #24]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <__swbuf_r+0x12>
 800a6fa:	f7ff fb81 	bl	8009e00 <__sinit>
 800a6fe:	4b21      	ldr	r3, [pc, #132]	; (800a784 <__swbuf_r+0x98>)
 800a700:	429c      	cmp	r4, r3
 800a702:	d12b      	bne.n	800a75c <__swbuf_r+0x70>
 800a704:	686c      	ldr	r4, [r5, #4]
 800a706:	69a3      	ldr	r3, [r4, #24]
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	071a      	lsls	r2, r3, #28
 800a70e:	d52f      	bpl.n	800a770 <__swbuf_r+0x84>
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	b36b      	cbz	r3, 800a770 <__swbuf_r+0x84>
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	6820      	ldr	r0, [r4, #0]
 800a718:	1ac0      	subs	r0, r0, r3
 800a71a:	6963      	ldr	r3, [r4, #20]
 800a71c:	b2f6      	uxtb	r6, r6
 800a71e:	4283      	cmp	r3, r0
 800a720:	4637      	mov	r7, r6
 800a722:	dc04      	bgt.n	800a72e <__swbuf_r+0x42>
 800a724:	4621      	mov	r1, r4
 800a726:	4628      	mov	r0, r5
 800a728:	f000 f948 	bl	800a9bc <_fflush_r>
 800a72c:	bb30      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	3b01      	subs	r3, #1
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	6022      	str	r2, [r4, #0]
 800a73a:	701e      	strb	r6, [r3, #0]
 800a73c:	6963      	ldr	r3, [r4, #20]
 800a73e:	3001      	adds	r0, #1
 800a740:	4283      	cmp	r3, r0
 800a742:	d004      	beq.n	800a74e <__swbuf_r+0x62>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	07db      	lsls	r3, r3, #31
 800a748:	d506      	bpl.n	800a758 <__swbuf_r+0x6c>
 800a74a:	2e0a      	cmp	r6, #10
 800a74c:	d104      	bne.n	800a758 <__swbuf_r+0x6c>
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f000 f933 	bl	800a9bc <_fflush_r>
 800a756:	b988      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a758:	4638      	mov	r0, r7
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <__swbuf_r+0x9c>)
 800a75e:	429c      	cmp	r4, r3
 800a760:	d101      	bne.n	800a766 <__swbuf_r+0x7a>
 800a762:	68ac      	ldr	r4, [r5, #8]
 800a764:	e7cf      	b.n	800a706 <__swbuf_r+0x1a>
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <__swbuf_r+0xa0>)
 800a768:	429c      	cmp	r4, r3
 800a76a:	bf08      	it	eq
 800a76c:	68ec      	ldreq	r4, [r5, #12]
 800a76e:	e7ca      	b.n	800a706 <__swbuf_r+0x1a>
 800a770:	4621      	mov	r1, r4
 800a772:	4628      	mov	r0, r5
 800a774:	f000 f81e 	bl	800a7b4 <__swsetup_r>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d0cb      	beq.n	800a714 <__swbuf_r+0x28>
 800a77c:	f04f 37ff 	mov.w	r7, #4294967295
 800a780:	e7ea      	b.n	800a758 <__swbuf_r+0x6c>
 800a782:	bf00      	nop
 800a784:	0800adfc 	.word	0x0800adfc
 800a788:	0800ae1c 	.word	0x0800ae1c
 800a78c:	0800addc 	.word	0x0800addc

0800a790 <_write_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_write_r+0x20>)
 800a794:	4604      	mov	r4, r0
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f5 ff2e 	bl	8000600 <_write>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_write_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_write_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20001c38 	.word	0x20001c38

0800a7b4 <__swsetup_r>:
 800a7b4:	4b32      	ldr	r3, [pc, #200]	; (800a880 <__swsetup_r+0xcc>)
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	681d      	ldr	r5, [r3, #0]
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460c      	mov	r4, r1
 800a7be:	b125      	cbz	r5, 800a7ca <__swsetup_r+0x16>
 800a7c0:	69ab      	ldr	r3, [r5, #24]
 800a7c2:	b913      	cbnz	r3, 800a7ca <__swsetup_r+0x16>
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f7ff fb1b 	bl	8009e00 <__sinit>
 800a7ca:	4b2e      	ldr	r3, [pc, #184]	; (800a884 <__swsetup_r+0xd0>)
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	d10f      	bne.n	800a7f0 <__swsetup_r+0x3c>
 800a7d0:	686c      	ldr	r4, [r5, #4]
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7d8:	0719      	lsls	r1, r3, #28
 800a7da:	d42c      	bmi.n	800a836 <__swsetup_r+0x82>
 800a7dc:	06dd      	lsls	r5, r3, #27
 800a7de:	d411      	bmi.n	800a804 <__swsetup_r+0x50>
 800a7e0:	2309      	movs	r3, #9
 800a7e2:	6033      	str	r3, [r6, #0]
 800a7e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7e8:	81a3      	strh	r3, [r4, #12]
 800a7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ee:	e03e      	b.n	800a86e <__swsetup_r+0xba>
 800a7f0:	4b25      	ldr	r3, [pc, #148]	; (800a888 <__swsetup_r+0xd4>)
 800a7f2:	429c      	cmp	r4, r3
 800a7f4:	d101      	bne.n	800a7fa <__swsetup_r+0x46>
 800a7f6:	68ac      	ldr	r4, [r5, #8]
 800a7f8:	e7eb      	b.n	800a7d2 <__swsetup_r+0x1e>
 800a7fa:	4b24      	ldr	r3, [pc, #144]	; (800a88c <__swsetup_r+0xd8>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	bf08      	it	eq
 800a800:	68ec      	ldreq	r4, [r5, #12]
 800a802:	e7e6      	b.n	800a7d2 <__swsetup_r+0x1e>
 800a804:	0758      	lsls	r0, r3, #29
 800a806:	d512      	bpl.n	800a82e <__swsetup_r+0x7a>
 800a808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a80a:	b141      	cbz	r1, 800a81e <__swsetup_r+0x6a>
 800a80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a810:	4299      	cmp	r1, r3
 800a812:	d002      	beq.n	800a81a <__swsetup_r+0x66>
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f991 	bl	800ab3c <_free_r>
 800a81a:	2300      	movs	r3, #0
 800a81c:	6363      	str	r3, [r4, #52]	; 0x34
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	2300      	movs	r3, #0
 800a828:	6063      	str	r3, [r4, #4]
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	f043 0308 	orr.w	r3, r3, #8
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	b94b      	cbnz	r3, 800a84e <__swsetup_r+0x9a>
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a844:	d003      	beq.n	800a84e <__swsetup_r+0x9a>
 800a846:	4621      	mov	r1, r4
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 f92b 	bl	800aaa4 <__smakebuf_r>
 800a84e:	89a0      	ldrh	r0, [r4, #12]
 800a850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a854:	f010 0301 	ands.w	r3, r0, #1
 800a858:	d00a      	beq.n	800a870 <__swsetup_r+0xbc>
 800a85a:	2300      	movs	r3, #0
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	6963      	ldr	r3, [r4, #20]
 800a860:	425b      	negs	r3, r3
 800a862:	61a3      	str	r3, [r4, #24]
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	b943      	cbnz	r3, 800a87a <__swsetup_r+0xc6>
 800a868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a86c:	d1ba      	bne.n	800a7e4 <__swsetup_r+0x30>
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	0781      	lsls	r1, r0, #30
 800a872:	bf58      	it	pl
 800a874:	6963      	ldrpl	r3, [r4, #20]
 800a876:	60a3      	str	r3, [r4, #8]
 800a878:	e7f4      	b.n	800a864 <__swsetup_r+0xb0>
 800a87a:	2000      	movs	r0, #0
 800a87c:	e7f7      	b.n	800a86e <__swsetup_r+0xba>
 800a87e:	bf00      	nop
 800a880:	20000148 	.word	0x20000148
 800a884:	0800adfc 	.word	0x0800adfc
 800a888:	0800ae1c 	.word	0x0800ae1c
 800a88c:	0800addc 	.word	0x0800addc

0800a890 <_close_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d06      	ldr	r5, [pc, #24]	; (800a8ac <_close_r+0x1c>)
 800a894:	2300      	movs	r3, #0
 800a896:	4604      	mov	r4, r0
 800a898:	4608      	mov	r0, r1
 800a89a:	602b      	str	r3, [r5, #0]
 800a89c:	f7f6 f81b 	bl	80008d6 <_close>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d102      	bne.n	800a8aa <_close_r+0x1a>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b103      	cbz	r3, 800a8aa <_close_r+0x1a>
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	20001c38 	.word	0x20001c38

0800a8b0 <__sflush_r>:
 800a8b0:	898a      	ldrh	r2, [r1, #12]
 800a8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	0710      	lsls	r0, r2, #28
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	d458      	bmi.n	800a970 <__sflush_r+0xc0>
 800a8be:	684b      	ldr	r3, [r1, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dc05      	bgt.n	800a8d0 <__sflush_r+0x20>
 800a8c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dc02      	bgt.n	800a8d0 <__sflush_r+0x20>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	d0f9      	beq.n	800a8ca <__sflush_r+0x1a>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8dc:	682f      	ldr	r7, [r5, #0]
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	d032      	beq.n	800a948 <__sflush_r+0x98>
 800a8e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	075a      	lsls	r2, r3, #29
 800a8e8:	d505      	bpl.n	800a8f6 <__sflush_r+0x46>
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	1ac0      	subs	r0, r0, r3
 800a8ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8f0:	b10b      	cbz	r3, 800a8f6 <__sflush_r+0x46>
 800a8f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8f4:	1ac0      	subs	r0, r0, r3
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fc:	6a21      	ldr	r1, [r4, #32]
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b0      	blx	r6
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	d106      	bne.n	800a916 <__sflush_r+0x66>
 800a908:	6829      	ldr	r1, [r5, #0]
 800a90a:	291d      	cmp	r1, #29
 800a90c:	d82c      	bhi.n	800a968 <__sflush_r+0xb8>
 800a90e:	4a2a      	ldr	r2, [pc, #168]	; (800a9b8 <__sflush_r+0x108>)
 800a910:	40ca      	lsrs	r2, r1
 800a912:	07d6      	lsls	r6, r2, #31
 800a914:	d528      	bpl.n	800a968 <__sflush_r+0xb8>
 800a916:	2200      	movs	r2, #0
 800a918:	6062      	str	r2, [r4, #4]
 800a91a:	04d9      	lsls	r1, r3, #19
 800a91c:	6922      	ldr	r2, [r4, #16]
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	d504      	bpl.n	800a92c <__sflush_r+0x7c>
 800a922:	1c42      	adds	r2, r0, #1
 800a924:	d101      	bne.n	800a92a <__sflush_r+0x7a>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	b903      	cbnz	r3, 800a92c <__sflush_r+0x7c>
 800a92a:	6560      	str	r0, [r4, #84]	; 0x54
 800a92c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a92e:	602f      	str	r7, [r5, #0]
 800a930:	2900      	cmp	r1, #0
 800a932:	d0ca      	beq.n	800a8ca <__sflush_r+0x1a>
 800a934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a938:	4299      	cmp	r1, r3
 800a93a:	d002      	beq.n	800a942 <__sflush_r+0x92>
 800a93c:	4628      	mov	r0, r5
 800a93e:	f000 f8fd 	bl	800ab3c <_free_r>
 800a942:	2000      	movs	r0, #0
 800a944:	6360      	str	r0, [r4, #52]	; 0x34
 800a946:	e7c1      	b.n	800a8cc <__sflush_r+0x1c>
 800a948:	6a21      	ldr	r1, [r4, #32]
 800a94a:	2301      	movs	r3, #1
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b0      	blx	r6
 800a950:	1c41      	adds	r1, r0, #1
 800a952:	d1c7      	bne.n	800a8e4 <__sflush_r+0x34>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0c4      	beq.n	800a8e4 <__sflush_r+0x34>
 800a95a:	2b1d      	cmp	r3, #29
 800a95c:	d001      	beq.n	800a962 <__sflush_r+0xb2>
 800a95e:	2b16      	cmp	r3, #22
 800a960:	d101      	bne.n	800a966 <__sflush_r+0xb6>
 800a962:	602f      	str	r7, [r5, #0]
 800a964:	e7b1      	b.n	800a8ca <__sflush_r+0x1a>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	e7ad      	b.n	800a8cc <__sflush_r+0x1c>
 800a970:	690f      	ldr	r7, [r1, #16]
 800a972:	2f00      	cmp	r7, #0
 800a974:	d0a9      	beq.n	800a8ca <__sflush_r+0x1a>
 800a976:	0793      	lsls	r3, r2, #30
 800a978:	680e      	ldr	r6, [r1, #0]
 800a97a:	bf08      	it	eq
 800a97c:	694b      	ldreq	r3, [r1, #20]
 800a97e:	600f      	str	r7, [r1, #0]
 800a980:	bf18      	it	ne
 800a982:	2300      	movne	r3, #0
 800a984:	eba6 0807 	sub.w	r8, r6, r7
 800a988:	608b      	str	r3, [r1, #8]
 800a98a:	f1b8 0f00 	cmp.w	r8, #0
 800a98e:	dd9c      	ble.n	800a8ca <__sflush_r+0x1a>
 800a990:	6a21      	ldr	r1, [r4, #32]
 800a992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a994:	4643      	mov	r3, r8
 800a996:	463a      	mov	r2, r7
 800a998:	4628      	mov	r0, r5
 800a99a:	47b0      	blx	r6
 800a99c:	2800      	cmp	r0, #0
 800a99e:	dc06      	bgt.n	800a9ae <__sflush_r+0xfe>
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ac:	e78e      	b.n	800a8cc <__sflush_r+0x1c>
 800a9ae:	4407      	add	r7, r0
 800a9b0:	eba8 0800 	sub.w	r8, r8, r0
 800a9b4:	e7e9      	b.n	800a98a <__sflush_r+0xda>
 800a9b6:	bf00      	nop
 800a9b8:	20400001 	.word	0x20400001

0800a9bc <_fflush_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	690b      	ldr	r3, [r1, #16]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	b913      	cbnz	r3, 800a9cc <_fflush_r+0x10>
 800a9c6:	2500      	movs	r5, #0
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	b118      	cbz	r0, 800a9d6 <_fflush_r+0x1a>
 800a9ce:	6983      	ldr	r3, [r0, #24]
 800a9d0:	b90b      	cbnz	r3, 800a9d6 <_fflush_r+0x1a>
 800a9d2:	f7ff fa15 	bl	8009e00 <__sinit>
 800a9d6:	4b14      	ldr	r3, [pc, #80]	; (800aa28 <_fflush_r+0x6c>)
 800a9d8:	429c      	cmp	r4, r3
 800a9da:	d11b      	bne.n	800aa14 <_fflush_r+0x58>
 800a9dc:	686c      	ldr	r4, [r5, #4]
 800a9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0ef      	beq.n	800a9c6 <_fflush_r+0xa>
 800a9e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9e8:	07d0      	lsls	r0, r2, #31
 800a9ea:	d404      	bmi.n	800a9f6 <_fflush_r+0x3a>
 800a9ec:	0599      	lsls	r1, r3, #22
 800a9ee:	d402      	bmi.n	800a9f6 <_fflush_r+0x3a>
 800a9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9f2:	f7ff faa3 	bl	8009f3c <__retarget_lock_acquire_recursive>
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	f7ff ff59 	bl	800a8b0 <__sflush_r>
 800a9fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa00:	07da      	lsls	r2, r3, #31
 800aa02:	4605      	mov	r5, r0
 800aa04:	d4e0      	bmi.n	800a9c8 <_fflush_r+0xc>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	059b      	lsls	r3, r3, #22
 800aa0a:	d4dd      	bmi.n	800a9c8 <_fflush_r+0xc>
 800aa0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa0e:	f7ff fa96 	bl	8009f3e <__retarget_lock_release_recursive>
 800aa12:	e7d9      	b.n	800a9c8 <_fflush_r+0xc>
 800aa14:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <_fflush_r+0x70>)
 800aa16:	429c      	cmp	r4, r3
 800aa18:	d101      	bne.n	800aa1e <_fflush_r+0x62>
 800aa1a:	68ac      	ldr	r4, [r5, #8]
 800aa1c:	e7df      	b.n	800a9de <_fflush_r+0x22>
 800aa1e:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <_fflush_r+0x74>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	bf08      	it	eq
 800aa24:	68ec      	ldreq	r4, [r5, #12]
 800aa26:	e7da      	b.n	800a9de <_fflush_r+0x22>
 800aa28:	0800adfc 	.word	0x0800adfc
 800aa2c:	0800ae1c 	.word	0x0800ae1c
 800aa30:	0800addc 	.word	0x0800addc

0800aa34 <_lseek_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	; (800aa54 <_lseek_r+0x20>)
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	2200      	movs	r2, #0
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7f5 ff6e 	bl	8000924 <_lseek>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_lseek_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_lseek_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20001c38 	.word	0x20001c38

0800aa58 <__swhatbuf_r>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	460e      	mov	r6, r1
 800aa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa60:	2900      	cmp	r1, #0
 800aa62:	b096      	sub	sp, #88	; 0x58
 800aa64:	4614      	mov	r4, r2
 800aa66:	461d      	mov	r5, r3
 800aa68:	da08      	bge.n	800aa7c <__swhatbuf_r+0x24>
 800aa6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	602a      	str	r2, [r5, #0]
 800aa72:	061a      	lsls	r2, r3, #24
 800aa74:	d410      	bmi.n	800aa98 <__swhatbuf_r+0x40>
 800aa76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7a:	e00e      	b.n	800aa9a <__swhatbuf_r+0x42>
 800aa7c:	466a      	mov	r2, sp
 800aa7e:	f000 f8bb 	bl	800abf8 <_fstat_r>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	dbf1      	blt.n	800aa6a <__swhatbuf_r+0x12>
 800aa86:	9a01      	ldr	r2, [sp, #4]
 800aa88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa90:	425a      	negs	r2, r3
 800aa92:	415a      	adcs	r2, r3
 800aa94:	602a      	str	r2, [r5, #0]
 800aa96:	e7ee      	b.n	800aa76 <__swhatbuf_r+0x1e>
 800aa98:	2340      	movs	r3, #64	; 0x40
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	b016      	add	sp, #88	; 0x58
 800aaa0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aaa4 <__smakebuf_r>:
 800aaa4:	898b      	ldrh	r3, [r1, #12]
 800aaa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaa8:	079d      	lsls	r5, r3, #30
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460c      	mov	r4, r1
 800aaae:	d507      	bpl.n	800aac0 <__smakebuf_r+0x1c>
 800aab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	6123      	str	r3, [r4, #16]
 800aab8:	2301      	movs	r3, #1
 800aaba:	6163      	str	r3, [r4, #20]
 800aabc:	b002      	add	sp, #8
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	ab01      	add	r3, sp, #4
 800aac2:	466a      	mov	r2, sp
 800aac4:	f7ff ffc8 	bl	800aa58 <__swhatbuf_r>
 800aac8:	9900      	ldr	r1, [sp, #0]
 800aaca:	4605      	mov	r5, r0
 800aacc:	4630      	mov	r0, r6
 800aace:	f7ff fa57 	bl	8009f80 <_malloc_r>
 800aad2:	b948      	cbnz	r0, 800aae8 <__smakebuf_r+0x44>
 800aad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad8:	059a      	lsls	r2, r3, #22
 800aada:	d4ef      	bmi.n	800aabc <__smakebuf_r+0x18>
 800aadc:	f023 0303 	bic.w	r3, r3, #3
 800aae0:	f043 0302 	orr.w	r3, r3, #2
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	e7e3      	b.n	800aab0 <__smakebuf_r+0xc>
 800aae8:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <__smakebuf_r+0x7c>)
 800aaea:	62b3      	str	r3, [r6, #40]	; 0x28
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	6020      	str	r0, [r4, #0]
 800aaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf4:	81a3      	strh	r3, [r4, #12]
 800aaf6:	9b00      	ldr	r3, [sp, #0]
 800aaf8:	6163      	str	r3, [r4, #20]
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	6120      	str	r0, [r4, #16]
 800aafe:	b15b      	cbz	r3, 800ab18 <__smakebuf_r+0x74>
 800ab00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab04:	4630      	mov	r0, r6
 800ab06:	f000 f889 	bl	800ac1c <_isatty_r>
 800ab0a:	b128      	cbz	r0, 800ab18 <__smakebuf_r+0x74>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	f043 0301 	orr.w	r3, r3, #1
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	89a0      	ldrh	r0, [r4, #12]
 800ab1a:	4305      	orrs	r5, r0
 800ab1c:	81a5      	strh	r5, [r4, #12]
 800ab1e:	e7cd      	b.n	800aabc <__smakebuf_r+0x18>
 800ab20:	08009d99 	.word	0x08009d99

0800ab24 <__malloc_lock>:
 800ab24:	4801      	ldr	r0, [pc, #4]	; (800ab2c <__malloc_lock+0x8>)
 800ab26:	f7ff ba09 	b.w	8009f3c <__retarget_lock_acquire_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	20001c2c 	.word	0x20001c2c

0800ab30 <__malloc_unlock>:
 800ab30:	4801      	ldr	r0, [pc, #4]	; (800ab38 <__malloc_unlock+0x8>)
 800ab32:	f7ff ba04 	b.w	8009f3e <__retarget_lock_release_recursive>
 800ab36:	bf00      	nop
 800ab38:	20001c2c 	.word	0x20001c2c

0800ab3c <_free_r>:
 800ab3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	d044      	beq.n	800abcc <_free_r+0x90>
 800ab42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab46:	9001      	str	r0, [sp, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab4e:	bfb8      	it	lt
 800ab50:	18e4      	addlt	r4, r4, r3
 800ab52:	f7ff ffe7 	bl	800ab24 <__malloc_lock>
 800ab56:	4a1e      	ldr	r2, [pc, #120]	; (800abd0 <_free_r+0x94>)
 800ab58:	9801      	ldr	r0, [sp, #4]
 800ab5a:	6813      	ldr	r3, [r2, #0]
 800ab5c:	b933      	cbnz	r3, 800ab6c <_free_r+0x30>
 800ab5e:	6063      	str	r3, [r4, #4]
 800ab60:	6014      	str	r4, [r2, #0]
 800ab62:	b003      	add	sp, #12
 800ab64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab68:	f7ff bfe2 	b.w	800ab30 <__malloc_unlock>
 800ab6c:	42a3      	cmp	r3, r4
 800ab6e:	d908      	bls.n	800ab82 <_free_r+0x46>
 800ab70:	6825      	ldr	r5, [r4, #0]
 800ab72:	1961      	adds	r1, r4, r5
 800ab74:	428b      	cmp	r3, r1
 800ab76:	bf01      	itttt	eq
 800ab78:	6819      	ldreq	r1, [r3, #0]
 800ab7a:	685b      	ldreq	r3, [r3, #4]
 800ab7c:	1949      	addeq	r1, r1, r5
 800ab7e:	6021      	streq	r1, [r4, #0]
 800ab80:	e7ed      	b.n	800ab5e <_free_r+0x22>
 800ab82:	461a      	mov	r2, r3
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	b10b      	cbz	r3, 800ab8c <_free_r+0x50>
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	d9fa      	bls.n	800ab82 <_free_r+0x46>
 800ab8c:	6811      	ldr	r1, [r2, #0]
 800ab8e:	1855      	adds	r5, r2, r1
 800ab90:	42a5      	cmp	r5, r4
 800ab92:	d10b      	bne.n	800abac <_free_r+0x70>
 800ab94:	6824      	ldr	r4, [r4, #0]
 800ab96:	4421      	add	r1, r4
 800ab98:	1854      	adds	r4, r2, r1
 800ab9a:	42a3      	cmp	r3, r4
 800ab9c:	6011      	str	r1, [r2, #0]
 800ab9e:	d1e0      	bne.n	800ab62 <_free_r+0x26>
 800aba0:	681c      	ldr	r4, [r3, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	6053      	str	r3, [r2, #4]
 800aba6:	4421      	add	r1, r4
 800aba8:	6011      	str	r1, [r2, #0]
 800abaa:	e7da      	b.n	800ab62 <_free_r+0x26>
 800abac:	d902      	bls.n	800abb4 <_free_r+0x78>
 800abae:	230c      	movs	r3, #12
 800abb0:	6003      	str	r3, [r0, #0]
 800abb2:	e7d6      	b.n	800ab62 <_free_r+0x26>
 800abb4:	6825      	ldr	r5, [r4, #0]
 800abb6:	1961      	adds	r1, r4, r5
 800abb8:	428b      	cmp	r3, r1
 800abba:	bf04      	itt	eq
 800abbc:	6819      	ldreq	r1, [r3, #0]
 800abbe:	685b      	ldreq	r3, [r3, #4]
 800abc0:	6063      	str	r3, [r4, #4]
 800abc2:	bf04      	itt	eq
 800abc4:	1949      	addeq	r1, r1, r5
 800abc6:	6021      	streq	r1, [r4, #0]
 800abc8:	6054      	str	r4, [r2, #4]
 800abca:	e7ca      	b.n	800ab62 <_free_r+0x26>
 800abcc:	b003      	add	sp, #12
 800abce:	bd30      	pop	{r4, r5, pc}
 800abd0:	20001c30 	.word	0x20001c30

0800abd4 <_read_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d07      	ldr	r5, [pc, #28]	; (800abf4 <_read_r+0x20>)
 800abd8:	4604      	mov	r4, r0
 800abda:	4608      	mov	r0, r1
 800abdc:	4611      	mov	r1, r2
 800abde:	2200      	movs	r2, #0
 800abe0:	602a      	str	r2, [r5, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f7f5 fe5a 	bl	800089c <_read>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_read_r+0x1e>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_read_r+0x1e>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20001c38 	.word	0x20001c38

0800abf8 <_fstat_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d07      	ldr	r5, [pc, #28]	; (800ac18 <_fstat_r+0x20>)
 800abfc:	2300      	movs	r3, #0
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	4611      	mov	r1, r2
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f7f5 fe72 	bl	80008ee <_fstat>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d102      	bne.n	800ac14 <_fstat_r+0x1c>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	b103      	cbz	r3, 800ac14 <_fstat_r+0x1c>
 800ac12:	6023      	str	r3, [r4, #0]
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	bf00      	nop
 800ac18:	20001c38 	.word	0x20001c38

0800ac1c <_isatty_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d06      	ldr	r5, [pc, #24]	; (800ac38 <_isatty_r+0x1c>)
 800ac20:	2300      	movs	r3, #0
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	f7f5 fe71 	bl	800090e <_isatty>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_isatty_r+0x1a>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_isatty_r+0x1a>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	20001c38 	.word	0x20001c38

0800ac3c <_init>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	bf00      	nop
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr

0800ac48 <_fini>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	bf00      	nop
 800ac4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4e:	bc08      	pop	{r3}
 800ac50:	469e      	mov	lr, r3
 800ac52:	4770      	bx	lr
=======
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d817      	bhi.n	800bb08 <USBD_Get_USB_Status+0x44>
 800bad8:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <USBD_Get_USB_Status+0x1c>)
 800bada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bade:	bf00      	nop
 800bae0:	0800baf1 	.word	0x0800baf1
 800bae4:	0800baf7 	.word	0x0800baf7
 800bae8:	0800bafd 	.word	0x0800bafd
 800baec:	0800bb03 	.word	0x0800bb03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	e00b      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baf6:	2303      	movs	r3, #3
 800baf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bafa:	e008      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bafc:	2301      	movs	r3, #1
 800bafe:	73fb      	strb	r3, [r7, #15]
    break;
 800bb00:	e005      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb02:	2303      	movs	r3, #3
 800bb04:	73fb      	strb	r3, [r7, #15]
    break;
 800bb06:	e002      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb0c:	bf00      	nop
  }
  return usb_status;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <__errno>:
 800bb1c:	4b01      	ldr	r3, [pc, #4]	; (800bb24 <__errno+0x8>)
 800bb1e:	6818      	ldr	r0, [r3, #0]
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	20000148 	.word	0x20000148

0800bb28 <__libc_init_array>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	4d0d      	ldr	r5, [pc, #52]	; (800bb60 <__libc_init_array+0x38>)
 800bb2c:	4c0d      	ldr	r4, [pc, #52]	; (800bb64 <__libc_init_array+0x3c>)
 800bb2e:	1b64      	subs	r4, r4, r5
 800bb30:	10a4      	asrs	r4, r4, #2
 800bb32:	2600      	movs	r6, #0
 800bb34:	42a6      	cmp	r6, r4
 800bb36:	d109      	bne.n	800bb4c <__libc_init_array+0x24>
 800bb38:	4d0b      	ldr	r5, [pc, #44]	; (800bb68 <__libc_init_array+0x40>)
 800bb3a:	4c0c      	ldr	r4, [pc, #48]	; (800bb6c <__libc_init_array+0x44>)
 800bb3c:	f000 ffae 	bl	800ca9c <_init>
 800bb40:	1b64      	subs	r4, r4, r5
 800bb42:	10a4      	asrs	r4, r4, #2
 800bb44:	2600      	movs	r6, #0
 800bb46:	42a6      	cmp	r6, r4
 800bb48:	d105      	bne.n	800bb56 <__libc_init_array+0x2e>
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}
 800bb4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb50:	4798      	blx	r3
 800bb52:	3601      	adds	r6, #1
 800bb54:	e7ee      	b.n	800bb34 <__libc_init_array+0xc>
 800bb56:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb5a:	4798      	blx	r3
 800bb5c:	3601      	adds	r6, #1
 800bb5e:	e7f2      	b.n	800bb46 <__libc_init_array+0x1e>
 800bb60:	0800cc98 	.word	0x0800cc98
 800bb64:	0800cc98 	.word	0x0800cc98
 800bb68:	0800cc98 	.word	0x0800cc98
 800bb6c:	0800cc9c 	.word	0x0800cc9c

0800bb70 <memset>:
 800bb70:	4402      	add	r2, r0
 800bb72:	4603      	mov	r3, r0
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d100      	bne.n	800bb7a <memset+0xa>
 800bb78:	4770      	bx	lr
 800bb7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb7e:	e7f9      	b.n	800bb74 <memset+0x4>

0800bb80 <iprintf>:
 800bb80:	b40f      	push	{r0, r1, r2, r3}
 800bb82:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <iprintf+0x2c>)
 800bb84:	b513      	push	{r0, r1, r4, lr}
 800bb86:	681c      	ldr	r4, [r3, #0]
 800bb88:	b124      	cbz	r4, 800bb94 <iprintf+0x14>
 800bb8a:	69a3      	ldr	r3, [r4, #24]
 800bb8c:	b913      	cbnz	r3, 800bb94 <iprintf+0x14>
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 f866 	bl	800bc60 <__sinit>
 800bb94:	ab05      	add	r3, sp, #20
 800bb96:	9a04      	ldr	r2, [sp, #16]
 800bb98:	68a1      	ldr	r1, [r4, #8]
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f000 f9bd 	bl	800bf1c <_vfiprintf_r>
 800bba2:	b002      	add	sp, #8
 800bba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba8:	b004      	add	sp, #16
 800bbaa:	4770      	bx	lr
 800bbac:	20000148 	.word	0x20000148

0800bbb0 <std>:
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	b510      	push	{r4, lr}
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	e9c0 3300 	strd	r3, r3, [r0]
 800bbba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbbe:	6083      	str	r3, [r0, #8]
 800bbc0:	8181      	strh	r1, [r0, #12]
 800bbc2:	6643      	str	r3, [r0, #100]	; 0x64
 800bbc4:	81c2      	strh	r2, [r0, #14]
 800bbc6:	6183      	str	r3, [r0, #24]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	2208      	movs	r2, #8
 800bbcc:	305c      	adds	r0, #92	; 0x5c
 800bbce:	f7ff ffcf 	bl	800bb70 <memset>
 800bbd2:	4b05      	ldr	r3, [pc, #20]	; (800bbe8 <std+0x38>)
 800bbd4:	6263      	str	r3, [r4, #36]	; 0x24
 800bbd6:	4b05      	ldr	r3, [pc, #20]	; (800bbec <std+0x3c>)
 800bbd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbda:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <std+0x40>)
 800bbdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbde:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <std+0x44>)
 800bbe0:	6224      	str	r4, [r4, #32]
 800bbe2:	6323      	str	r3, [r4, #48]	; 0x30
 800bbe4:	bd10      	pop	{r4, pc}
 800bbe6:	bf00      	nop
 800bbe8:	0800c4c5 	.word	0x0800c4c5
 800bbec:	0800c4e7 	.word	0x0800c4e7
 800bbf0:	0800c51f 	.word	0x0800c51f
 800bbf4:	0800c543 	.word	0x0800c543

0800bbf8 <_cleanup_r>:
 800bbf8:	4901      	ldr	r1, [pc, #4]	; (800bc00 <_cleanup_r+0x8>)
 800bbfa:	f000 b8af 	b.w	800bd5c <_fwalk_reent>
 800bbfe:	bf00      	nop
 800bc00:	0800c81d 	.word	0x0800c81d

0800bc04 <__sfmoreglue>:
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	2268      	movs	r2, #104	; 0x68
 800bc08:	1e4d      	subs	r5, r1, #1
 800bc0a:	4355      	muls	r5, r2
 800bc0c:	460e      	mov	r6, r1
 800bc0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc12:	f000 f8e5 	bl	800bde0 <_malloc_r>
 800bc16:	4604      	mov	r4, r0
 800bc18:	b140      	cbz	r0, 800bc2c <__sfmoreglue+0x28>
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc20:	300c      	adds	r0, #12
 800bc22:	60a0      	str	r0, [r4, #8]
 800bc24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc28:	f7ff ffa2 	bl	800bb70 <memset>
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}

0800bc30 <__sfp_lock_acquire>:
 800bc30:	4801      	ldr	r0, [pc, #4]	; (800bc38 <__sfp_lock_acquire+0x8>)
 800bc32:	f000 b8b3 	b.w	800bd9c <__retarget_lock_acquire_recursive>
 800bc36:	bf00      	nop
 800bc38:	20001d01 	.word	0x20001d01

0800bc3c <__sfp_lock_release>:
 800bc3c:	4801      	ldr	r0, [pc, #4]	; (800bc44 <__sfp_lock_release+0x8>)
 800bc3e:	f000 b8ae 	b.w	800bd9e <__retarget_lock_release_recursive>
 800bc42:	bf00      	nop
 800bc44:	20001d01 	.word	0x20001d01

0800bc48 <__sinit_lock_acquire>:
 800bc48:	4801      	ldr	r0, [pc, #4]	; (800bc50 <__sinit_lock_acquire+0x8>)
 800bc4a:	f000 b8a7 	b.w	800bd9c <__retarget_lock_acquire_recursive>
 800bc4e:	bf00      	nop
 800bc50:	20001d02 	.word	0x20001d02

0800bc54 <__sinit_lock_release>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__sinit_lock_release+0x8>)
 800bc56:	f000 b8a2 	b.w	800bd9e <__retarget_lock_release_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	20001d02 	.word	0x20001d02

0800bc60 <__sinit>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	f7ff fff0 	bl	800bc48 <__sinit_lock_acquire>
 800bc68:	69a3      	ldr	r3, [r4, #24]
 800bc6a:	b11b      	cbz	r3, 800bc74 <__sinit+0x14>
 800bc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc70:	f7ff bff0 	b.w	800bc54 <__sinit_lock_release>
 800bc74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc78:	6523      	str	r3, [r4, #80]	; 0x50
 800bc7a:	4b13      	ldr	r3, [pc, #76]	; (800bcc8 <__sinit+0x68>)
 800bc7c:	4a13      	ldr	r2, [pc, #76]	; (800bccc <__sinit+0x6c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	bf04      	itt	eq
 800bc86:	2301      	moveq	r3, #1
 800bc88:	61a3      	streq	r3, [r4, #24]
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f820 	bl	800bcd0 <__sfp>
 800bc90:	6060      	str	r0, [r4, #4]
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 f81c 	bl	800bcd0 <__sfp>
 800bc98:	60a0      	str	r0, [r4, #8]
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 f818 	bl	800bcd0 <__sfp>
 800bca0:	2200      	movs	r2, #0
 800bca2:	60e0      	str	r0, [r4, #12]
 800bca4:	2104      	movs	r1, #4
 800bca6:	6860      	ldr	r0, [r4, #4]
 800bca8:	f7ff ff82 	bl	800bbb0 <std>
 800bcac:	68a0      	ldr	r0, [r4, #8]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	2109      	movs	r1, #9
 800bcb2:	f7ff ff7d 	bl	800bbb0 <std>
 800bcb6:	68e0      	ldr	r0, [r4, #12]
 800bcb8:	2202      	movs	r2, #2
 800bcba:	2112      	movs	r1, #18
 800bcbc:	f7ff ff78 	bl	800bbb0 <std>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	61a3      	str	r3, [r4, #24]
 800bcc4:	e7d2      	b.n	800bc6c <__sinit+0xc>
 800bcc6:	bf00      	nop
 800bcc8:	0800cc00 	.word	0x0800cc00
 800bccc:	0800bbf9 	.word	0x0800bbf9

0800bcd0 <__sfp>:
 800bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	f7ff ffac 	bl	800bc30 <__sfp_lock_acquire>
 800bcd8:	4b1e      	ldr	r3, [pc, #120]	; (800bd54 <__sfp+0x84>)
 800bcda:	681e      	ldr	r6, [r3, #0]
 800bcdc:	69b3      	ldr	r3, [r6, #24]
 800bcde:	b913      	cbnz	r3, 800bce6 <__sfp+0x16>
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7ff ffbd 	bl	800bc60 <__sinit>
 800bce6:	3648      	adds	r6, #72	; 0x48
 800bce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	d503      	bpl.n	800bcf8 <__sfp+0x28>
 800bcf0:	6833      	ldr	r3, [r6, #0]
 800bcf2:	b30b      	cbz	r3, 800bd38 <__sfp+0x68>
 800bcf4:	6836      	ldr	r6, [r6, #0]
 800bcf6:	e7f7      	b.n	800bce8 <__sfp+0x18>
 800bcf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcfc:	b9d5      	cbnz	r5, 800bd34 <__sfp+0x64>
 800bcfe:	4b16      	ldr	r3, [pc, #88]	; (800bd58 <__sfp+0x88>)
 800bd00:	60e3      	str	r3, [r4, #12]
 800bd02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd06:	6665      	str	r5, [r4, #100]	; 0x64
 800bd08:	f000 f847 	bl	800bd9a <__retarget_lock_init_recursive>
 800bd0c:	f7ff ff96 	bl	800bc3c <__sfp_lock_release>
 800bd10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd18:	6025      	str	r5, [r4, #0]
 800bd1a:	61a5      	str	r5, [r4, #24]
 800bd1c:	2208      	movs	r2, #8
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd24:	f7ff ff24 	bl	800bb70 <memset>
 800bd28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd30:	4620      	mov	r0, r4
 800bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd34:	3468      	adds	r4, #104	; 0x68
 800bd36:	e7d9      	b.n	800bcec <__sfp+0x1c>
 800bd38:	2104      	movs	r1, #4
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	f7ff ff62 	bl	800bc04 <__sfmoreglue>
 800bd40:	4604      	mov	r4, r0
 800bd42:	6030      	str	r0, [r6, #0]
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d1d5      	bne.n	800bcf4 <__sfp+0x24>
 800bd48:	f7ff ff78 	bl	800bc3c <__sfp_lock_release>
 800bd4c:	230c      	movs	r3, #12
 800bd4e:	603b      	str	r3, [r7, #0]
 800bd50:	e7ee      	b.n	800bd30 <__sfp+0x60>
 800bd52:	bf00      	nop
 800bd54:	0800cc00 	.word	0x0800cc00
 800bd58:	ffff0001 	.word	0xffff0001

0800bd5c <_fwalk_reent>:
 800bd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd60:	4606      	mov	r6, r0
 800bd62:	4688      	mov	r8, r1
 800bd64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd68:	2700      	movs	r7, #0
 800bd6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd6e:	f1b9 0901 	subs.w	r9, r9, #1
 800bd72:	d505      	bpl.n	800bd80 <_fwalk_reent+0x24>
 800bd74:	6824      	ldr	r4, [r4, #0]
 800bd76:	2c00      	cmp	r4, #0
 800bd78:	d1f7      	bne.n	800bd6a <_fwalk_reent+0xe>
 800bd7a:	4638      	mov	r0, r7
 800bd7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd80:	89ab      	ldrh	r3, [r5, #12]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d907      	bls.n	800bd96 <_fwalk_reent+0x3a>
 800bd86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	d003      	beq.n	800bd96 <_fwalk_reent+0x3a>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4630      	mov	r0, r6
 800bd92:	47c0      	blx	r8
 800bd94:	4307      	orrs	r7, r0
 800bd96:	3568      	adds	r5, #104	; 0x68
 800bd98:	e7e9      	b.n	800bd6e <_fwalk_reent+0x12>

0800bd9a <__retarget_lock_init_recursive>:
 800bd9a:	4770      	bx	lr

0800bd9c <__retarget_lock_acquire_recursive>:
 800bd9c:	4770      	bx	lr

0800bd9e <__retarget_lock_release_recursive>:
 800bd9e:	4770      	bx	lr

0800bda0 <sbrk_aligned>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	4e0e      	ldr	r6, [pc, #56]	; (800bddc <sbrk_aligned+0x3c>)
 800bda4:	460c      	mov	r4, r1
 800bda6:	6831      	ldr	r1, [r6, #0]
 800bda8:	4605      	mov	r5, r0
 800bdaa:	b911      	cbnz	r1, 800bdb2 <sbrk_aligned+0x12>
 800bdac:	f000 fb7a 	bl	800c4a4 <_sbrk_r>
 800bdb0:	6030      	str	r0, [r6, #0]
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f000 fb75 	bl	800c4a4 <_sbrk_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d00a      	beq.n	800bdd4 <sbrk_aligned+0x34>
 800bdbe:	1cc4      	adds	r4, r0, #3
 800bdc0:	f024 0403 	bic.w	r4, r4, #3
 800bdc4:	42a0      	cmp	r0, r4
 800bdc6:	d007      	beq.n	800bdd8 <sbrk_aligned+0x38>
 800bdc8:	1a21      	subs	r1, r4, r0
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f000 fb6a 	bl	800c4a4 <_sbrk_r>
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d101      	bne.n	800bdd8 <sbrk_aligned+0x38>
 800bdd4:	f04f 34ff 	mov.w	r4, #4294967295
 800bdd8:	4620      	mov	r0, r4
 800bdda:	bd70      	pop	{r4, r5, r6, pc}
 800bddc:	20001d08 	.word	0x20001d08

0800bde0 <_malloc_r>:
 800bde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde4:	1ccd      	adds	r5, r1, #3
 800bde6:	f025 0503 	bic.w	r5, r5, #3
 800bdea:	3508      	adds	r5, #8
 800bdec:	2d0c      	cmp	r5, #12
 800bdee:	bf38      	it	cc
 800bdf0:	250c      	movcc	r5, #12
 800bdf2:	2d00      	cmp	r5, #0
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	db01      	blt.n	800bdfc <_malloc_r+0x1c>
 800bdf8:	42a9      	cmp	r1, r5
 800bdfa:	d905      	bls.n	800be08 <_malloc_r+0x28>
 800bdfc:	230c      	movs	r3, #12
 800bdfe:	603b      	str	r3, [r7, #0]
 800be00:	2600      	movs	r6, #0
 800be02:	4630      	mov	r0, r6
 800be04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be08:	4e2e      	ldr	r6, [pc, #184]	; (800bec4 <_malloc_r+0xe4>)
 800be0a:	f000 fdbb 	bl	800c984 <__malloc_lock>
 800be0e:	6833      	ldr	r3, [r6, #0]
 800be10:	461c      	mov	r4, r3
 800be12:	bb34      	cbnz	r4, 800be62 <_malloc_r+0x82>
 800be14:	4629      	mov	r1, r5
 800be16:	4638      	mov	r0, r7
 800be18:	f7ff ffc2 	bl	800bda0 <sbrk_aligned>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	4604      	mov	r4, r0
 800be20:	d14d      	bne.n	800bebe <_malloc_r+0xde>
 800be22:	6834      	ldr	r4, [r6, #0]
 800be24:	4626      	mov	r6, r4
 800be26:	2e00      	cmp	r6, #0
 800be28:	d140      	bne.n	800beac <_malloc_r+0xcc>
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	4631      	mov	r1, r6
 800be2e:	4638      	mov	r0, r7
 800be30:	eb04 0803 	add.w	r8, r4, r3
 800be34:	f000 fb36 	bl	800c4a4 <_sbrk_r>
 800be38:	4580      	cmp	r8, r0
 800be3a:	d13a      	bne.n	800beb2 <_malloc_r+0xd2>
 800be3c:	6821      	ldr	r1, [r4, #0]
 800be3e:	3503      	adds	r5, #3
 800be40:	1a6d      	subs	r5, r5, r1
 800be42:	f025 0503 	bic.w	r5, r5, #3
 800be46:	3508      	adds	r5, #8
 800be48:	2d0c      	cmp	r5, #12
 800be4a:	bf38      	it	cc
 800be4c:	250c      	movcc	r5, #12
 800be4e:	4629      	mov	r1, r5
 800be50:	4638      	mov	r0, r7
 800be52:	f7ff ffa5 	bl	800bda0 <sbrk_aligned>
 800be56:	3001      	adds	r0, #1
 800be58:	d02b      	beq.n	800beb2 <_malloc_r+0xd2>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	442b      	add	r3, r5
 800be5e:	6023      	str	r3, [r4, #0]
 800be60:	e00e      	b.n	800be80 <_malloc_r+0xa0>
 800be62:	6822      	ldr	r2, [r4, #0]
 800be64:	1b52      	subs	r2, r2, r5
 800be66:	d41e      	bmi.n	800bea6 <_malloc_r+0xc6>
 800be68:	2a0b      	cmp	r2, #11
 800be6a:	d916      	bls.n	800be9a <_malloc_r+0xba>
 800be6c:	1961      	adds	r1, r4, r5
 800be6e:	42a3      	cmp	r3, r4
 800be70:	6025      	str	r5, [r4, #0]
 800be72:	bf18      	it	ne
 800be74:	6059      	strne	r1, [r3, #4]
 800be76:	6863      	ldr	r3, [r4, #4]
 800be78:	bf08      	it	eq
 800be7a:	6031      	streq	r1, [r6, #0]
 800be7c:	5162      	str	r2, [r4, r5]
 800be7e:	604b      	str	r3, [r1, #4]
 800be80:	4638      	mov	r0, r7
 800be82:	f104 060b 	add.w	r6, r4, #11
 800be86:	f000 fd83 	bl	800c990 <__malloc_unlock>
 800be8a:	f026 0607 	bic.w	r6, r6, #7
 800be8e:	1d23      	adds	r3, r4, #4
 800be90:	1af2      	subs	r2, r6, r3
 800be92:	d0b6      	beq.n	800be02 <_malloc_r+0x22>
 800be94:	1b9b      	subs	r3, r3, r6
 800be96:	50a3      	str	r3, [r4, r2]
 800be98:	e7b3      	b.n	800be02 <_malloc_r+0x22>
 800be9a:	6862      	ldr	r2, [r4, #4]
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	bf0c      	ite	eq
 800bea0:	6032      	streq	r2, [r6, #0]
 800bea2:	605a      	strne	r2, [r3, #4]
 800bea4:	e7ec      	b.n	800be80 <_malloc_r+0xa0>
 800bea6:	4623      	mov	r3, r4
 800bea8:	6864      	ldr	r4, [r4, #4]
 800beaa:	e7b2      	b.n	800be12 <_malloc_r+0x32>
 800beac:	4634      	mov	r4, r6
 800beae:	6876      	ldr	r6, [r6, #4]
 800beb0:	e7b9      	b.n	800be26 <_malloc_r+0x46>
 800beb2:	230c      	movs	r3, #12
 800beb4:	603b      	str	r3, [r7, #0]
 800beb6:	4638      	mov	r0, r7
 800beb8:	f000 fd6a 	bl	800c990 <__malloc_unlock>
 800bebc:	e7a1      	b.n	800be02 <_malloc_r+0x22>
 800bebe:	6025      	str	r5, [r4, #0]
 800bec0:	e7de      	b.n	800be80 <_malloc_r+0xa0>
 800bec2:	bf00      	nop
 800bec4:	20001d04 	.word	0x20001d04

0800bec8 <__sfputc_r>:
 800bec8:	6893      	ldr	r3, [r2, #8]
 800beca:	3b01      	subs	r3, #1
 800becc:	2b00      	cmp	r3, #0
 800bece:	b410      	push	{r4}
 800bed0:	6093      	str	r3, [r2, #8]
 800bed2:	da08      	bge.n	800bee6 <__sfputc_r+0x1e>
 800bed4:	6994      	ldr	r4, [r2, #24]
 800bed6:	42a3      	cmp	r3, r4
 800bed8:	db01      	blt.n	800bede <__sfputc_r+0x16>
 800beda:	290a      	cmp	r1, #10
 800bedc:	d103      	bne.n	800bee6 <__sfputc_r+0x1e>
 800bede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bee2:	f000 bb33 	b.w	800c54c <__swbuf_r>
 800bee6:	6813      	ldr	r3, [r2, #0]
 800bee8:	1c58      	adds	r0, r3, #1
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	7019      	strb	r1, [r3, #0]
 800beee:	4608      	mov	r0, r1
 800bef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <__sfputs_r>:
 800bef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef8:	4606      	mov	r6, r0
 800befa:	460f      	mov	r7, r1
 800befc:	4614      	mov	r4, r2
 800befe:	18d5      	adds	r5, r2, r3
 800bf00:	42ac      	cmp	r4, r5
 800bf02:	d101      	bne.n	800bf08 <__sfputs_r+0x12>
 800bf04:	2000      	movs	r0, #0
 800bf06:	e007      	b.n	800bf18 <__sfputs_r+0x22>
 800bf08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf0c:	463a      	mov	r2, r7
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ffda 	bl	800bec8 <__sfputc_r>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d1f3      	bne.n	800bf00 <__sfputs_r+0xa>
 800bf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf1c <_vfiprintf_r>:
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	460d      	mov	r5, r1
 800bf22:	b09d      	sub	sp, #116	; 0x74
 800bf24:	4614      	mov	r4, r2
 800bf26:	4698      	mov	r8, r3
 800bf28:	4606      	mov	r6, r0
 800bf2a:	b118      	cbz	r0, 800bf34 <_vfiprintf_r+0x18>
 800bf2c:	6983      	ldr	r3, [r0, #24]
 800bf2e:	b90b      	cbnz	r3, 800bf34 <_vfiprintf_r+0x18>
 800bf30:	f7ff fe96 	bl	800bc60 <__sinit>
 800bf34:	4b89      	ldr	r3, [pc, #548]	; (800c15c <_vfiprintf_r+0x240>)
 800bf36:	429d      	cmp	r5, r3
 800bf38:	d11b      	bne.n	800bf72 <_vfiprintf_r+0x56>
 800bf3a:	6875      	ldr	r5, [r6, #4]
 800bf3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf3e:	07d9      	lsls	r1, r3, #31
 800bf40:	d405      	bmi.n	800bf4e <_vfiprintf_r+0x32>
 800bf42:	89ab      	ldrh	r3, [r5, #12]
 800bf44:	059a      	lsls	r2, r3, #22
 800bf46:	d402      	bmi.n	800bf4e <_vfiprintf_r+0x32>
 800bf48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf4a:	f7ff ff27 	bl	800bd9c <__retarget_lock_acquire_recursive>
 800bf4e:	89ab      	ldrh	r3, [r5, #12]
 800bf50:	071b      	lsls	r3, r3, #28
 800bf52:	d501      	bpl.n	800bf58 <_vfiprintf_r+0x3c>
 800bf54:	692b      	ldr	r3, [r5, #16]
 800bf56:	b9eb      	cbnz	r3, 800bf94 <_vfiprintf_r+0x78>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f000 fb5a 	bl	800c614 <__swsetup_r>
 800bf60:	b1c0      	cbz	r0, 800bf94 <_vfiprintf_r+0x78>
 800bf62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf64:	07dc      	lsls	r4, r3, #31
 800bf66:	d50e      	bpl.n	800bf86 <_vfiprintf_r+0x6a>
 800bf68:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6c:	b01d      	add	sp, #116	; 0x74
 800bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf72:	4b7b      	ldr	r3, [pc, #492]	; (800c160 <_vfiprintf_r+0x244>)
 800bf74:	429d      	cmp	r5, r3
 800bf76:	d101      	bne.n	800bf7c <_vfiprintf_r+0x60>
 800bf78:	68b5      	ldr	r5, [r6, #8]
 800bf7a:	e7df      	b.n	800bf3c <_vfiprintf_r+0x20>
 800bf7c:	4b79      	ldr	r3, [pc, #484]	; (800c164 <_vfiprintf_r+0x248>)
 800bf7e:	429d      	cmp	r5, r3
 800bf80:	bf08      	it	eq
 800bf82:	68f5      	ldreq	r5, [r6, #12]
 800bf84:	e7da      	b.n	800bf3c <_vfiprintf_r+0x20>
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	0598      	lsls	r0, r3, #22
 800bf8a:	d4ed      	bmi.n	800bf68 <_vfiprintf_r+0x4c>
 800bf8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf8e:	f7ff ff06 	bl	800bd9e <__retarget_lock_release_recursive>
 800bf92:	e7e9      	b.n	800bf68 <_vfiprintf_r+0x4c>
 800bf94:	2300      	movs	r3, #0
 800bf96:	9309      	str	r3, [sp, #36]	; 0x24
 800bf98:	2320      	movs	r3, #32
 800bf9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfa2:	2330      	movs	r3, #48	; 0x30
 800bfa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c168 <_vfiprintf_r+0x24c>
 800bfa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfac:	f04f 0901 	mov.w	r9, #1
 800bfb0:	4623      	mov	r3, r4
 800bfb2:	469a      	mov	sl, r3
 800bfb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfb8:	b10a      	cbz	r2, 800bfbe <_vfiprintf_r+0xa2>
 800bfba:	2a25      	cmp	r2, #37	; 0x25
 800bfbc:	d1f9      	bne.n	800bfb2 <_vfiprintf_r+0x96>
 800bfbe:	ebba 0b04 	subs.w	fp, sl, r4
 800bfc2:	d00b      	beq.n	800bfdc <_vfiprintf_r+0xc0>
 800bfc4:	465b      	mov	r3, fp
 800bfc6:	4622      	mov	r2, r4
 800bfc8:	4629      	mov	r1, r5
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7ff ff93 	bl	800bef6 <__sfputs_r>
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	f000 80aa 	beq.w	800c12a <_vfiprintf_r+0x20e>
 800bfd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfd8:	445a      	add	r2, fp
 800bfda:	9209      	str	r2, [sp, #36]	; 0x24
 800bfdc:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f000 80a2 	beq.w	800c12a <_vfiprintf_r+0x20e>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bff0:	f10a 0a01 	add.w	sl, sl, #1
 800bff4:	9304      	str	r3, [sp, #16]
 800bff6:	9307      	str	r3, [sp, #28]
 800bff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bffc:	931a      	str	r3, [sp, #104]	; 0x68
 800bffe:	4654      	mov	r4, sl
 800c000:	2205      	movs	r2, #5
 800c002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c006:	4858      	ldr	r0, [pc, #352]	; (800c168 <_vfiprintf_r+0x24c>)
 800c008:	f7f4 f8ba 	bl	8000180 <memchr>
 800c00c:	9a04      	ldr	r2, [sp, #16]
 800c00e:	b9d8      	cbnz	r0, 800c048 <_vfiprintf_r+0x12c>
 800c010:	06d1      	lsls	r1, r2, #27
 800c012:	bf44      	itt	mi
 800c014:	2320      	movmi	r3, #32
 800c016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c01a:	0713      	lsls	r3, r2, #28
 800c01c:	bf44      	itt	mi
 800c01e:	232b      	movmi	r3, #43	; 0x2b
 800c020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c024:	f89a 3000 	ldrb.w	r3, [sl]
 800c028:	2b2a      	cmp	r3, #42	; 0x2a
 800c02a:	d015      	beq.n	800c058 <_vfiprintf_r+0x13c>
 800c02c:	9a07      	ldr	r2, [sp, #28]
 800c02e:	4654      	mov	r4, sl
 800c030:	2000      	movs	r0, #0
 800c032:	f04f 0c0a 	mov.w	ip, #10
 800c036:	4621      	mov	r1, r4
 800c038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c03c:	3b30      	subs	r3, #48	; 0x30
 800c03e:	2b09      	cmp	r3, #9
 800c040:	d94e      	bls.n	800c0e0 <_vfiprintf_r+0x1c4>
 800c042:	b1b0      	cbz	r0, 800c072 <_vfiprintf_r+0x156>
 800c044:	9207      	str	r2, [sp, #28]
 800c046:	e014      	b.n	800c072 <_vfiprintf_r+0x156>
 800c048:	eba0 0308 	sub.w	r3, r0, r8
 800c04c:	fa09 f303 	lsl.w	r3, r9, r3
 800c050:	4313      	orrs	r3, r2
 800c052:	9304      	str	r3, [sp, #16]
 800c054:	46a2      	mov	sl, r4
 800c056:	e7d2      	b.n	800bffe <_vfiprintf_r+0xe2>
 800c058:	9b03      	ldr	r3, [sp, #12]
 800c05a:	1d19      	adds	r1, r3, #4
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	9103      	str	r1, [sp, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	bfbb      	ittet	lt
 800c064:	425b      	neglt	r3, r3
 800c066:	f042 0202 	orrlt.w	r2, r2, #2
 800c06a:	9307      	strge	r3, [sp, #28]
 800c06c:	9307      	strlt	r3, [sp, #28]
 800c06e:	bfb8      	it	lt
 800c070:	9204      	strlt	r2, [sp, #16]
 800c072:	7823      	ldrb	r3, [r4, #0]
 800c074:	2b2e      	cmp	r3, #46	; 0x2e
 800c076:	d10c      	bne.n	800c092 <_vfiprintf_r+0x176>
 800c078:	7863      	ldrb	r3, [r4, #1]
 800c07a:	2b2a      	cmp	r3, #42	; 0x2a
 800c07c:	d135      	bne.n	800c0ea <_vfiprintf_r+0x1ce>
 800c07e:	9b03      	ldr	r3, [sp, #12]
 800c080:	1d1a      	adds	r2, r3, #4
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	9203      	str	r2, [sp, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	bfb8      	it	lt
 800c08a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c08e:	3402      	adds	r4, #2
 800c090:	9305      	str	r3, [sp, #20]
 800c092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c178 <_vfiprintf_r+0x25c>
 800c096:	7821      	ldrb	r1, [r4, #0]
 800c098:	2203      	movs	r2, #3
 800c09a:	4650      	mov	r0, sl
 800c09c:	f7f4 f870 	bl	8000180 <memchr>
 800c0a0:	b140      	cbz	r0, 800c0b4 <_vfiprintf_r+0x198>
 800c0a2:	2340      	movs	r3, #64	; 0x40
 800c0a4:	eba0 000a 	sub.w	r0, r0, sl
 800c0a8:	fa03 f000 	lsl.w	r0, r3, r0
 800c0ac:	9b04      	ldr	r3, [sp, #16]
 800c0ae:	4303      	orrs	r3, r0
 800c0b0:	3401      	adds	r4, #1
 800c0b2:	9304      	str	r3, [sp, #16]
 800c0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b8:	482c      	ldr	r0, [pc, #176]	; (800c16c <_vfiprintf_r+0x250>)
 800c0ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0be:	2206      	movs	r2, #6
 800c0c0:	f7f4 f85e 	bl	8000180 <memchr>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d03f      	beq.n	800c148 <_vfiprintf_r+0x22c>
 800c0c8:	4b29      	ldr	r3, [pc, #164]	; (800c170 <_vfiprintf_r+0x254>)
 800c0ca:	bb1b      	cbnz	r3, 800c114 <_vfiprintf_r+0x1f8>
 800c0cc:	9b03      	ldr	r3, [sp, #12]
 800c0ce:	3307      	adds	r3, #7
 800c0d0:	f023 0307 	bic.w	r3, r3, #7
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	9303      	str	r3, [sp, #12]
 800c0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0da:	443b      	add	r3, r7
 800c0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0de:	e767      	b.n	800bfb0 <_vfiprintf_r+0x94>
 800c0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0e4:	460c      	mov	r4, r1
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	e7a5      	b.n	800c036 <_vfiprintf_r+0x11a>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	3401      	adds	r4, #1
 800c0ee:	9305      	str	r3, [sp, #20]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	f04f 0c0a 	mov.w	ip, #10
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0fc:	3a30      	subs	r2, #48	; 0x30
 800c0fe:	2a09      	cmp	r2, #9
 800c100:	d903      	bls.n	800c10a <_vfiprintf_r+0x1ee>
 800c102:	2b00      	cmp	r3, #0
 800c104:	d0c5      	beq.n	800c092 <_vfiprintf_r+0x176>
 800c106:	9105      	str	r1, [sp, #20]
 800c108:	e7c3      	b.n	800c092 <_vfiprintf_r+0x176>
 800c10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c10e:	4604      	mov	r4, r0
 800c110:	2301      	movs	r3, #1
 800c112:	e7f0      	b.n	800c0f6 <_vfiprintf_r+0x1da>
 800c114:	ab03      	add	r3, sp, #12
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	462a      	mov	r2, r5
 800c11a:	4b16      	ldr	r3, [pc, #88]	; (800c174 <_vfiprintf_r+0x258>)
 800c11c:	a904      	add	r1, sp, #16
 800c11e:	4630      	mov	r0, r6
 800c120:	f3af 8000 	nop.w
 800c124:	4607      	mov	r7, r0
 800c126:	1c78      	adds	r0, r7, #1
 800c128:	d1d6      	bne.n	800c0d8 <_vfiprintf_r+0x1bc>
 800c12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c12c:	07d9      	lsls	r1, r3, #31
 800c12e:	d405      	bmi.n	800c13c <_vfiprintf_r+0x220>
 800c130:	89ab      	ldrh	r3, [r5, #12]
 800c132:	059a      	lsls	r2, r3, #22
 800c134:	d402      	bmi.n	800c13c <_vfiprintf_r+0x220>
 800c136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c138:	f7ff fe31 	bl	800bd9e <__retarget_lock_release_recursive>
 800c13c:	89ab      	ldrh	r3, [r5, #12]
 800c13e:	065b      	lsls	r3, r3, #25
 800c140:	f53f af12 	bmi.w	800bf68 <_vfiprintf_r+0x4c>
 800c144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c146:	e711      	b.n	800bf6c <_vfiprintf_r+0x50>
 800c148:	ab03      	add	r3, sp, #12
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	462a      	mov	r2, r5
 800c14e:	4b09      	ldr	r3, [pc, #36]	; (800c174 <_vfiprintf_r+0x258>)
 800c150:	a904      	add	r1, sp, #16
 800c152:	4630      	mov	r0, r6
 800c154:	f000 f880 	bl	800c258 <_printf_i>
 800c158:	e7e4      	b.n	800c124 <_vfiprintf_r+0x208>
 800c15a:	bf00      	nop
 800c15c:	0800cc24 	.word	0x0800cc24
 800c160:	0800cc44 	.word	0x0800cc44
 800c164:	0800cc04 	.word	0x0800cc04
 800c168:	0800cc64 	.word	0x0800cc64
 800c16c:	0800cc6e 	.word	0x0800cc6e
 800c170:	00000000 	.word	0x00000000
 800c174:	0800bef7 	.word	0x0800bef7
 800c178:	0800cc6a 	.word	0x0800cc6a

0800c17c <_printf_common>:
 800c17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c180:	4616      	mov	r6, r2
 800c182:	4699      	mov	r9, r3
 800c184:	688a      	ldr	r2, [r1, #8]
 800c186:	690b      	ldr	r3, [r1, #16]
 800c188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	bfb8      	it	lt
 800c190:	4613      	movlt	r3, r2
 800c192:	6033      	str	r3, [r6, #0]
 800c194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c198:	4607      	mov	r7, r0
 800c19a:	460c      	mov	r4, r1
 800c19c:	b10a      	cbz	r2, 800c1a2 <_printf_common+0x26>
 800c19e:	3301      	adds	r3, #1
 800c1a0:	6033      	str	r3, [r6, #0]
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	0699      	lsls	r1, r3, #26
 800c1a6:	bf42      	ittt	mi
 800c1a8:	6833      	ldrmi	r3, [r6, #0]
 800c1aa:	3302      	addmi	r3, #2
 800c1ac:	6033      	strmi	r3, [r6, #0]
 800c1ae:	6825      	ldr	r5, [r4, #0]
 800c1b0:	f015 0506 	ands.w	r5, r5, #6
 800c1b4:	d106      	bne.n	800c1c4 <_printf_common+0x48>
 800c1b6:	f104 0a19 	add.w	sl, r4, #25
 800c1ba:	68e3      	ldr	r3, [r4, #12]
 800c1bc:	6832      	ldr	r2, [r6, #0]
 800c1be:	1a9b      	subs	r3, r3, r2
 800c1c0:	42ab      	cmp	r3, r5
 800c1c2:	dc26      	bgt.n	800c212 <_printf_common+0x96>
 800c1c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1c8:	1e13      	subs	r3, r2, #0
 800c1ca:	6822      	ldr	r2, [r4, #0]
 800c1cc:	bf18      	it	ne
 800c1ce:	2301      	movne	r3, #1
 800c1d0:	0692      	lsls	r2, r2, #26
 800c1d2:	d42b      	bmi.n	800c22c <_printf_common+0xb0>
 800c1d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1d8:	4649      	mov	r1, r9
 800c1da:	4638      	mov	r0, r7
 800c1dc:	47c0      	blx	r8
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d01e      	beq.n	800c220 <_printf_common+0xa4>
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	68e5      	ldr	r5, [r4, #12]
 800c1e6:	6832      	ldr	r2, [r6, #0]
 800c1e8:	f003 0306 	and.w	r3, r3, #6
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	bf08      	it	eq
 800c1f0:	1aad      	subeq	r5, r5, r2
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	6922      	ldr	r2, [r4, #16]
 800c1f6:	bf0c      	ite	eq
 800c1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1fc:	2500      	movne	r5, #0
 800c1fe:	4293      	cmp	r3, r2
 800c200:	bfc4      	itt	gt
 800c202:	1a9b      	subgt	r3, r3, r2
 800c204:	18ed      	addgt	r5, r5, r3
 800c206:	2600      	movs	r6, #0
 800c208:	341a      	adds	r4, #26
 800c20a:	42b5      	cmp	r5, r6
 800c20c:	d11a      	bne.n	800c244 <_printf_common+0xc8>
 800c20e:	2000      	movs	r0, #0
 800c210:	e008      	b.n	800c224 <_printf_common+0xa8>
 800c212:	2301      	movs	r3, #1
 800c214:	4652      	mov	r2, sl
 800c216:	4649      	mov	r1, r9
 800c218:	4638      	mov	r0, r7
 800c21a:	47c0      	blx	r8
 800c21c:	3001      	adds	r0, #1
 800c21e:	d103      	bne.n	800c228 <_printf_common+0xac>
 800c220:	f04f 30ff 	mov.w	r0, #4294967295
 800c224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c228:	3501      	adds	r5, #1
 800c22a:	e7c6      	b.n	800c1ba <_printf_common+0x3e>
 800c22c:	18e1      	adds	r1, r4, r3
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	2030      	movs	r0, #48	; 0x30
 800c232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c236:	4422      	add	r2, r4
 800c238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c23c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c240:	3302      	adds	r3, #2
 800c242:	e7c7      	b.n	800c1d4 <_printf_common+0x58>
 800c244:	2301      	movs	r3, #1
 800c246:	4622      	mov	r2, r4
 800c248:	4649      	mov	r1, r9
 800c24a:	4638      	mov	r0, r7
 800c24c:	47c0      	blx	r8
 800c24e:	3001      	adds	r0, #1
 800c250:	d0e6      	beq.n	800c220 <_printf_common+0xa4>
 800c252:	3601      	adds	r6, #1
 800c254:	e7d9      	b.n	800c20a <_printf_common+0x8e>
	...

0800c258 <_printf_i>:
 800c258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	7e0f      	ldrb	r7, [r1, #24]
 800c25e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c260:	2f78      	cmp	r7, #120	; 0x78
 800c262:	4691      	mov	r9, r2
 800c264:	4680      	mov	r8, r0
 800c266:	460c      	mov	r4, r1
 800c268:	469a      	mov	sl, r3
 800c26a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c26e:	d807      	bhi.n	800c280 <_printf_i+0x28>
 800c270:	2f62      	cmp	r7, #98	; 0x62
 800c272:	d80a      	bhi.n	800c28a <_printf_i+0x32>
 800c274:	2f00      	cmp	r7, #0
 800c276:	f000 80d8 	beq.w	800c42a <_printf_i+0x1d2>
 800c27a:	2f58      	cmp	r7, #88	; 0x58
 800c27c:	f000 80a3 	beq.w	800c3c6 <_printf_i+0x16e>
 800c280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c288:	e03a      	b.n	800c300 <_printf_i+0xa8>
 800c28a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c28e:	2b15      	cmp	r3, #21
 800c290:	d8f6      	bhi.n	800c280 <_printf_i+0x28>
 800c292:	a101      	add	r1, pc, #4	; (adr r1, 800c298 <_printf_i+0x40>)
 800c294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c298:	0800c2f1 	.word	0x0800c2f1
 800c29c:	0800c305 	.word	0x0800c305
 800c2a0:	0800c281 	.word	0x0800c281
 800c2a4:	0800c281 	.word	0x0800c281
 800c2a8:	0800c281 	.word	0x0800c281
 800c2ac:	0800c281 	.word	0x0800c281
 800c2b0:	0800c305 	.word	0x0800c305
 800c2b4:	0800c281 	.word	0x0800c281
 800c2b8:	0800c281 	.word	0x0800c281
 800c2bc:	0800c281 	.word	0x0800c281
 800c2c0:	0800c281 	.word	0x0800c281
 800c2c4:	0800c411 	.word	0x0800c411
 800c2c8:	0800c335 	.word	0x0800c335
 800c2cc:	0800c3f3 	.word	0x0800c3f3
 800c2d0:	0800c281 	.word	0x0800c281
 800c2d4:	0800c281 	.word	0x0800c281
 800c2d8:	0800c433 	.word	0x0800c433
 800c2dc:	0800c281 	.word	0x0800c281
 800c2e0:	0800c335 	.word	0x0800c335
 800c2e4:	0800c281 	.word	0x0800c281
 800c2e8:	0800c281 	.word	0x0800c281
 800c2ec:	0800c3fb 	.word	0x0800c3fb
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	1d1a      	adds	r2, r3, #4
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	602a      	str	r2, [r5, #0]
 800c2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c300:	2301      	movs	r3, #1
 800c302:	e0a3      	b.n	800c44c <_printf_i+0x1f4>
 800c304:	6820      	ldr	r0, [r4, #0]
 800c306:	6829      	ldr	r1, [r5, #0]
 800c308:	0606      	lsls	r6, r0, #24
 800c30a:	f101 0304 	add.w	r3, r1, #4
 800c30e:	d50a      	bpl.n	800c326 <_printf_i+0xce>
 800c310:	680e      	ldr	r6, [r1, #0]
 800c312:	602b      	str	r3, [r5, #0]
 800c314:	2e00      	cmp	r6, #0
 800c316:	da03      	bge.n	800c320 <_printf_i+0xc8>
 800c318:	232d      	movs	r3, #45	; 0x2d
 800c31a:	4276      	negs	r6, r6
 800c31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c320:	485e      	ldr	r0, [pc, #376]	; (800c49c <_printf_i+0x244>)
 800c322:	230a      	movs	r3, #10
 800c324:	e019      	b.n	800c35a <_printf_i+0x102>
 800c326:	680e      	ldr	r6, [r1, #0]
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c32e:	bf18      	it	ne
 800c330:	b236      	sxthne	r6, r6
 800c332:	e7ef      	b.n	800c314 <_printf_i+0xbc>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	6820      	ldr	r0, [r4, #0]
 800c338:	1d19      	adds	r1, r3, #4
 800c33a:	6029      	str	r1, [r5, #0]
 800c33c:	0601      	lsls	r1, r0, #24
 800c33e:	d501      	bpl.n	800c344 <_printf_i+0xec>
 800c340:	681e      	ldr	r6, [r3, #0]
 800c342:	e002      	b.n	800c34a <_printf_i+0xf2>
 800c344:	0646      	lsls	r6, r0, #25
 800c346:	d5fb      	bpl.n	800c340 <_printf_i+0xe8>
 800c348:	881e      	ldrh	r6, [r3, #0]
 800c34a:	4854      	ldr	r0, [pc, #336]	; (800c49c <_printf_i+0x244>)
 800c34c:	2f6f      	cmp	r7, #111	; 0x6f
 800c34e:	bf0c      	ite	eq
 800c350:	2308      	moveq	r3, #8
 800c352:	230a      	movne	r3, #10
 800c354:	2100      	movs	r1, #0
 800c356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c35a:	6865      	ldr	r5, [r4, #4]
 800c35c:	60a5      	str	r5, [r4, #8]
 800c35e:	2d00      	cmp	r5, #0
 800c360:	bfa2      	ittt	ge
 800c362:	6821      	ldrge	r1, [r4, #0]
 800c364:	f021 0104 	bicge.w	r1, r1, #4
 800c368:	6021      	strge	r1, [r4, #0]
 800c36a:	b90e      	cbnz	r6, 800c370 <_printf_i+0x118>
 800c36c:	2d00      	cmp	r5, #0
 800c36e:	d04d      	beq.n	800c40c <_printf_i+0x1b4>
 800c370:	4615      	mov	r5, r2
 800c372:	fbb6 f1f3 	udiv	r1, r6, r3
 800c376:	fb03 6711 	mls	r7, r3, r1, r6
 800c37a:	5dc7      	ldrb	r7, [r0, r7]
 800c37c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c380:	4637      	mov	r7, r6
 800c382:	42bb      	cmp	r3, r7
 800c384:	460e      	mov	r6, r1
 800c386:	d9f4      	bls.n	800c372 <_printf_i+0x11a>
 800c388:	2b08      	cmp	r3, #8
 800c38a:	d10b      	bne.n	800c3a4 <_printf_i+0x14c>
 800c38c:	6823      	ldr	r3, [r4, #0]
 800c38e:	07de      	lsls	r6, r3, #31
 800c390:	d508      	bpl.n	800c3a4 <_printf_i+0x14c>
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	6861      	ldr	r1, [r4, #4]
 800c396:	4299      	cmp	r1, r3
 800c398:	bfde      	ittt	le
 800c39a:	2330      	movle	r3, #48	; 0x30
 800c39c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3a4:	1b52      	subs	r2, r2, r5
 800c3a6:	6122      	str	r2, [r4, #16]
 800c3a8:	f8cd a000 	str.w	sl, [sp]
 800c3ac:	464b      	mov	r3, r9
 800c3ae:	aa03      	add	r2, sp, #12
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	f7ff fee2 	bl	800c17c <_printf_common>
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	d14c      	bne.n	800c456 <_printf_i+0x1fe>
 800c3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c0:	b004      	add	sp, #16
 800c3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c6:	4835      	ldr	r0, [pc, #212]	; (800c49c <_printf_i+0x244>)
 800c3c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c3cc:	6829      	ldr	r1, [r5, #0]
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3d4:	6029      	str	r1, [r5, #0]
 800c3d6:	061d      	lsls	r5, r3, #24
 800c3d8:	d514      	bpl.n	800c404 <_printf_i+0x1ac>
 800c3da:	07df      	lsls	r7, r3, #31
 800c3dc:	bf44      	itt	mi
 800c3de:	f043 0320 	orrmi.w	r3, r3, #32
 800c3e2:	6023      	strmi	r3, [r4, #0]
 800c3e4:	b91e      	cbnz	r6, 800c3ee <_printf_i+0x196>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	f023 0320 	bic.w	r3, r3, #32
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	2310      	movs	r3, #16
 800c3f0:	e7b0      	b.n	800c354 <_printf_i+0xfc>
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	f043 0320 	orr.w	r3, r3, #32
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	2378      	movs	r3, #120	; 0x78
 800c3fc:	4828      	ldr	r0, [pc, #160]	; (800c4a0 <_printf_i+0x248>)
 800c3fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c402:	e7e3      	b.n	800c3cc <_printf_i+0x174>
 800c404:	0659      	lsls	r1, r3, #25
 800c406:	bf48      	it	mi
 800c408:	b2b6      	uxthmi	r6, r6
 800c40a:	e7e6      	b.n	800c3da <_printf_i+0x182>
 800c40c:	4615      	mov	r5, r2
 800c40e:	e7bb      	b.n	800c388 <_printf_i+0x130>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	6826      	ldr	r6, [r4, #0]
 800c414:	6961      	ldr	r1, [r4, #20]
 800c416:	1d18      	adds	r0, r3, #4
 800c418:	6028      	str	r0, [r5, #0]
 800c41a:	0635      	lsls	r5, r6, #24
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	d501      	bpl.n	800c424 <_printf_i+0x1cc>
 800c420:	6019      	str	r1, [r3, #0]
 800c422:	e002      	b.n	800c42a <_printf_i+0x1d2>
 800c424:	0670      	lsls	r0, r6, #25
 800c426:	d5fb      	bpl.n	800c420 <_printf_i+0x1c8>
 800c428:	8019      	strh	r1, [r3, #0]
 800c42a:	2300      	movs	r3, #0
 800c42c:	6123      	str	r3, [r4, #16]
 800c42e:	4615      	mov	r5, r2
 800c430:	e7ba      	b.n	800c3a8 <_printf_i+0x150>
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	1d1a      	adds	r2, r3, #4
 800c436:	602a      	str	r2, [r5, #0]
 800c438:	681d      	ldr	r5, [r3, #0]
 800c43a:	6862      	ldr	r2, [r4, #4]
 800c43c:	2100      	movs	r1, #0
 800c43e:	4628      	mov	r0, r5
 800c440:	f7f3 fe9e 	bl	8000180 <memchr>
 800c444:	b108      	cbz	r0, 800c44a <_printf_i+0x1f2>
 800c446:	1b40      	subs	r0, r0, r5
 800c448:	6060      	str	r0, [r4, #4]
 800c44a:	6863      	ldr	r3, [r4, #4]
 800c44c:	6123      	str	r3, [r4, #16]
 800c44e:	2300      	movs	r3, #0
 800c450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c454:	e7a8      	b.n	800c3a8 <_printf_i+0x150>
 800c456:	6923      	ldr	r3, [r4, #16]
 800c458:	462a      	mov	r2, r5
 800c45a:	4649      	mov	r1, r9
 800c45c:	4640      	mov	r0, r8
 800c45e:	47d0      	blx	sl
 800c460:	3001      	adds	r0, #1
 800c462:	d0ab      	beq.n	800c3bc <_printf_i+0x164>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	079b      	lsls	r3, r3, #30
 800c468:	d413      	bmi.n	800c492 <_printf_i+0x23a>
 800c46a:	68e0      	ldr	r0, [r4, #12]
 800c46c:	9b03      	ldr	r3, [sp, #12]
 800c46e:	4298      	cmp	r0, r3
 800c470:	bfb8      	it	lt
 800c472:	4618      	movlt	r0, r3
 800c474:	e7a4      	b.n	800c3c0 <_printf_i+0x168>
 800c476:	2301      	movs	r3, #1
 800c478:	4632      	mov	r2, r6
 800c47a:	4649      	mov	r1, r9
 800c47c:	4640      	mov	r0, r8
 800c47e:	47d0      	blx	sl
 800c480:	3001      	adds	r0, #1
 800c482:	d09b      	beq.n	800c3bc <_printf_i+0x164>
 800c484:	3501      	adds	r5, #1
 800c486:	68e3      	ldr	r3, [r4, #12]
 800c488:	9903      	ldr	r1, [sp, #12]
 800c48a:	1a5b      	subs	r3, r3, r1
 800c48c:	42ab      	cmp	r3, r5
 800c48e:	dcf2      	bgt.n	800c476 <_printf_i+0x21e>
 800c490:	e7eb      	b.n	800c46a <_printf_i+0x212>
 800c492:	2500      	movs	r5, #0
 800c494:	f104 0619 	add.w	r6, r4, #25
 800c498:	e7f5      	b.n	800c486 <_printf_i+0x22e>
 800c49a:	bf00      	nop
 800c49c:	0800cc75 	.word	0x0800cc75
 800c4a0:	0800cc86 	.word	0x0800cc86

0800c4a4 <_sbrk_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d06      	ldr	r5, [pc, #24]	; (800c4c0 <_sbrk_r+0x1c>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	f7f4 fc7e 	bl	8000db0 <_sbrk>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_sbrk_r+0x1a>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_sbrk_r+0x1a>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20001d0c 	.word	0x20001d0c

0800c4c4 <__sread>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4cc:	f000 fab2 	bl	800ca34 <_read_r>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	bfab      	itete	ge
 800c4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c4d8:	181b      	addge	r3, r3, r0
 800c4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4de:	bfac      	ite	ge
 800c4e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4e2:	81a3      	strhlt	r3, [r4, #12]
 800c4e4:	bd10      	pop	{r4, pc}

0800c4e6 <__swrite>:
 800c4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ea:	461f      	mov	r7, r3
 800c4ec:	898b      	ldrh	r3, [r1, #12]
 800c4ee:	05db      	lsls	r3, r3, #23
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	4616      	mov	r6, r2
 800c4f6:	d505      	bpl.n	800c504 <__swrite+0x1e>
 800c4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	2200      	movs	r2, #0
 800c500:	f000 f9c8 	bl	800c894 <_lseek_r>
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c50a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	4632      	mov	r2, r6
 800c512:	463b      	mov	r3, r7
 800c514:	4628      	mov	r0, r5
 800c516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c51a:	f000 b869 	b.w	800c5f0 <_write_r>

0800c51e <__sseek>:
 800c51e:	b510      	push	{r4, lr}
 800c520:	460c      	mov	r4, r1
 800c522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c526:	f000 f9b5 	bl	800c894 <_lseek_r>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	bf15      	itete	ne
 800c530:	6560      	strne	r0, [r4, #84]	; 0x54
 800c532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c53a:	81a3      	strheq	r3, [r4, #12]
 800c53c:	bf18      	it	ne
 800c53e:	81a3      	strhne	r3, [r4, #12]
 800c540:	bd10      	pop	{r4, pc}

0800c542 <__sclose>:
 800c542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c546:	f000 b8d3 	b.w	800c6f0 <_close_r>
	...

0800c54c <__swbuf_r>:
 800c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54e:	460e      	mov	r6, r1
 800c550:	4614      	mov	r4, r2
 800c552:	4605      	mov	r5, r0
 800c554:	b118      	cbz	r0, 800c55e <__swbuf_r+0x12>
 800c556:	6983      	ldr	r3, [r0, #24]
 800c558:	b90b      	cbnz	r3, 800c55e <__swbuf_r+0x12>
 800c55a:	f7ff fb81 	bl	800bc60 <__sinit>
 800c55e:	4b21      	ldr	r3, [pc, #132]	; (800c5e4 <__swbuf_r+0x98>)
 800c560:	429c      	cmp	r4, r3
 800c562:	d12b      	bne.n	800c5bc <__swbuf_r+0x70>
 800c564:	686c      	ldr	r4, [r5, #4]
 800c566:	69a3      	ldr	r3, [r4, #24]
 800c568:	60a3      	str	r3, [r4, #8]
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	071a      	lsls	r2, r3, #28
 800c56e:	d52f      	bpl.n	800c5d0 <__swbuf_r+0x84>
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	b36b      	cbz	r3, 800c5d0 <__swbuf_r+0x84>
 800c574:	6923      	ldr	r3, [r4, #16]
 800c576:	6820      	ldr	r0, [r4, #0]
 800c578:	1ac0      	subs	r0, r0, r3
 800c57a:	6963      	ldr	r3, [r4, #20]
 800c57c:	b2f6      	uxtb	r6, r6
 800c57e:	4283      	cmp	r3, r0
 800c580:	4637      	mov	r7, r6
 800c582:	dc04      	bgt.n	800c58e <__swbuf_r+0x42>
 800c584:	4621      	mov	r1, r4
 800c586:	4628      	mov	r0, r5
 800c588:	f000 f948 	bl	800c81c <_fflush_r>
 800c58c:	bb30      	cbnz	r0, 800c5dc <__swbuf_r+0x90>
 800c58e:	68a3      	ldr	r3, [r4, #8]
 800c590:	3b01      	subs	r3, #1
 800c592:	60a3      	str	r3, [r4, #8]
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	6022      	str	r2, [r4, #0]
 800c59a:	701e      	strb	r6, [r3, #0]
 800c59c:	6963      	ldr	r3, [r4, #20]
 800c59e:	3001      	adds	r0, #1
 800c5a0:	4283      	cmp	r3, r0
 800c5a2:	d004      	beq.n	800c5ae <__swbuf_r+0x62>
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	07db      	lsls	r3, r3, #31
 800c5a8:	d506      	bpl.n	800c5b8 <__swbuf_r+0x6c>
 800c5aa:	2e0a      	cmp	r6, #10
 800c5ac:	d104      	bne.n	800c5b8 <__swbuf_r+0x6c>
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	f000 f933 	bl	800c81c <_fflush_r>
 800c5b6:	b988      	cbnz	r0, 800c5dc <__swbuf_r+0x90>
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <__swbuf_r+0x9c>)
 800c5be:	429c      	cmp	r4, r3
 800c5c0:	d101      	bne.n	800c5c6 <__swbuf_r+0x7a>
 800c5c2:	68ac      	ldr	r4, [r5, #8]
 800c5c4:	e7cf      	b.n	800c566 <__swbuf_r+0x1a>
 800c5c6:	4b09      	ldr	r3, [pc, #36]	; (800c5ec <__swbuf_r+0xa0>)
 800c5c8:	429c      	cmp	r4, r3
 800c5ca:	bf08      	it	eq
 800c5cc:	68ec      	ldreq	r4, [r5, #12]
 800c5ce:	e7ca      	b.n	800c566 <__swbuf_r+0x1a>
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f000 f81e 	bl	800c614 <__swsetup_r>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d0cb      	beq.n	800c574 <__swbuf_r+0x28>
 800c5dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c5e0:	e7ea      	b.n	800c5b8 <__swbuf_r+0x6c>
 800c5e2:	bf00      	nop
 800c5e4:	0800cc24 	.word	0x0800cc24
 800c5e8:	0800cc44 	.word	0x0800cc44
 800c5ec:	0800cc04 	.word	0x0800cc04

0800c5f0 <_write_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4d07      	ldr	r5, [pc, #28]	; (800c610 <_write_r+0x20>)
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	4608      	mov	r0, r1
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	602a      	str	r2, [r5, #0]
 800c5fe:	461a      	mov	r2, r3
 800c600:	f7f4 f9a0 	bl	8000944 <_write>
 800c604:	1c43      	adds	r3, r0, #1
 800c606:	d102      	bne.n	800c60e <_write_r+0x1e>
 800c608:	682b      	ldr	r3, [r5, #0]
 800c60a:	b103      	cbz	r3, 800c60e <_write_r+0x1e>
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	bd38      	pop	{r3, r4, r5, pc}
 800c610:	20001d0c 	.word	0x20001d0c

0800c614 <__swsetup_r>:
 800c614:	4b32      	ldr	r3, [pc, #200]	; (800c6e0 <__swsetup_r+0xcc>)
 800c616:	b570      	push	{r4, r5, r6, lr}
 800c618:	681d      	ldr	r5, [r3, #0]
 800c61a:	4606      	mov	r6, r0
 800c61c:	460c      	mov	r4, r1
 800c61e:	b125      	cbz	r5, 800c62a <__swsetup_r+0x16>
 800c620:	69ab      	ldr	r3, [r5, #24]
 800c622:	b913      	cbnz	r3, 800c62a <__swsetup_r+0x16>
 800c624:	4628      	mov	r0, r5
 800c626:	f7ff fb1b 	bl	800bc60 <__sinit>
 800c62a:	4b2e      	ldr	r3, [pc, #184]	; (800c6e4 <__swsetup_r+0xd0>)
 800c62c:	429c      	cmp	r4, r3
 800c62e:	d10f      	bne.n	800c650 <__swsetup_r+0x3c>
 800c630:	686c      	ldr	r4, [r5, #4]
 800c632:	89a3      	ldrh	r3, [r4, #12]
 800c634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c638:	0719      	lsls	r1, r3, #28
 800c63a:	d42c      	bmi.n	800c696 <__swsetup_r+0x82>
 800c63c:	06dd      	lsls	r5, r3, #27
 800c63e:	d411      	bmi.n	800c664 <__swsetup_r+0x50>
 800c640:	2309      	movs	r3, #9
 800c642:	6033      	str	r3, [r6, #0]
 800c644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c648:	81a3      	strh	r3, [r4, #12]
 800c64a:	f04f 30ff 	mov.w	r0, #4294967295
 800c64e:	e03e      	b.n	800c6ce <__swsetup_r+0xba>
 800c650:	4b25      	ldr	r3, [pc, #148]	; (800c6e8 <__swsetup_r+0xd4>)
 800c652:	429c      	cmp	r4, r3
 800c654:	d101      	bne.n	800c65a <__swsetup_r+0x46>
 800c656:	68ac      	ldr	r4, [r5, #8]
 800c658:	e7eb      	b.n	800c632 <__swsetup_r+0x1e>
 800c65a:	4b24      	ldr	r3, [pc, #144]	; (800c6ec <__swsetup_r+0xd8>)
 800c65c:	429c      	cmp	r4, r3
 800c65e:	bf08      	it	eq
 800c660:	68ec      	ldreq	r4, [r5, #12]
 800c662:	e7e6      	b.n	800c632 <__swsetup_r+0x1e>
 800c664:	0758      	lsls	r0, r3, #29
 800c666:	d512      	bpl.n	800c68e <__swsetup_r+0x7a>
 800c668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c66a:	b141      	cbz	r1, 800c67e <__swsetup_r+0x6a>
 800c66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c670:	4299      	cmp	r1, r3
 800c672:	d002      	beq.n	800c67a <__swsetup_r+0x66>
 800c674:	4630      	mov	r0, r6
 800c676:	f000 f991 	bl	800c99c <_free_r>
 800c67a:	2300      	movs	r3, #0
 800c67c:	6363      	str	r3, [r4, #52]	; 0x34
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c684:	81a3      	strh	r3, [r4, #12]
 800c686:	2300      	movs	r3, #0
 800c688:	6063      	str	r3, [r4, #4]
 800c68a:	6923      	ldr	r3, [r4, #16]
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f043 0308 	orr.w	r3, r3, #8
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	6923      	ldr	r3, [r4, #16]
 800c698:	b94b      	cbnz	r3, 800c6ae <__swsetup_r+0x9a>
 800c69a:	89a3      	ldrh	r3, [r4, #12]
 800c69c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6a4:	d003      	beq.n	800c6ae <__swsetup_r+0x9a>
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f000 f92b 	bl	800c904 <__smakebuf_r>
 800c6ae:	89a0      	ldrh	r0, [r4, #12]
 800c6b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6b4:	f010 0301 	ands.w	r3, r0, #1
 800c6b8:	d00a      	beq.n	800c6d0 <__swsetup_r+0xbc>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60a3      	str	r3, [r4, #8]
 800c6be:	6963      	ldr	r3, [r4, #20]
 800c6c0:	425b      	negs	r3, r3
 800c6c2:	61a3      	str	r3, [r4, #24]
 800c6c4:	6923      	ldr	r3, [r4, #16]
 800c6c6:	b943      	cbnz	r3, 800c6da <__swsetup_r+0xc6>
 800c6c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6cc:	d1ba      	bne.n	800c644 <__swsetup_r+0x30>
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	0781      	lsls	r1, r0, #30
 800c6d2:	bf58      	it	pl
 800c6d4:	6963      	ldrpl	r3, [r4, #20]
 800c6d6:	60a3      	str	r3, [r4, #8]
 800c6d8:	e7f4      	b.n	800c6c4 <__swsetup_r+0xb0>
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e7f7      	b.n	800c6ce <__swsetup_r+0xba>
 800c6de:	bf00      	nop
 800c6e0:	20000148 	.word	0x20000148
 800c6e4:	0800cc24 	.word	0x0800cc24
 800c6e8:	0800cc44 	.word	0x0800cc44
 800c6ec:	0800cc04 	.word	0x0800cc04

0800c6f0 <_close_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4d06      	ldr	r5, [pc, #24]	; (800c70c <_close_r+0x1c>)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	4608      	mov	r0, r1
 800c6fa:	602b      	str	r3, [r5, #0]
 800c6fc:	f7f4 fb23 	bl	8000d46 <_close>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d102      	bne.n	800c70a <_close_r+0x1a>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	b103      	cbz	r3, 800c70a <_close_r+0x1a>
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
 800c70c:	20001d0c 	.word	0x20001d0c

0800c710 <__sflush_r>:
 800c710:	898a      	ldrh	r2, [r1, #12]
 800c712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c716:	4605      	mov	r5, r0
 800c718:	0710      	lsls	r0, r2, #28
 800c71a:	460c      	mov	r4, r1
 800c71c:	d458      	bmi.n	800c7d0 <__sflush_r+0xc0>
 800c71e:	684b      	ldr	r3, [r1, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	dc05      	bgt.n	800c730 <__sflush_r+0x20>
 800c724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c726:	2b00      	cmp	r3, #0
 800c728:	dc02      	bgt.n	800c730 <__sflush_r+0x20>
 800c72a:	2000      	movs	r0, #0
 800c72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c732:	2e00      	cmp	r6, #0
 800c734:	d0f9      	beq.n	800c72a <__sflush_r+0x1a>
 800c736:	2300      	movs	r3, #0
 800c738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c73c:	682f      	ldr	r7, [r5, #0]
 800c73e:	602b      	str	r3, [r5, #0]
 800c740:	d032      	beq.n	800c7a8 <__sflush_r+0x98>
 800c742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c744:	89a3      	ldrh	r3, [r4, #12]
 800c746:	075a      	lsls	r2, r3, #29
 800c748:	d505      	bpl.n	800c756 <__sflush_r+0x46>
 800c74a:	6863      	ldr	r3, [r4, #4]
 800c74c:	1ac0      	subs	r0, r0, r3
 800c74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c750:	b10b      	cbz	r3, 800c756 <__sflush_r+0x46>
 800c752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c754:	1ac0      	subs	r0, r0, r3
 800c756:	2300      	movs	r3, #0
 800c758:	4602      	mov	r2, r0
 800c75a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c75c:	6a21      	ldr	r1, [r4, #32]
 800c75e:	4628      	mov	r0, r5
 800c760:	47b0      	blx	r6
 800c762:	1c43      	adds	r3, r0, #1
 800c764:	89a3      	ldrh	r3, [r4, #12]
 800c766:	d106      	bne.n	800c776 <__sflush_r+0x66>
 800c768:	6829      	ldr	r1, [r5, #0]
 800c76a:	291d      	cmp	r1, #29
 800c76c:	d82c      	bhi.n	800c7c8 <__sflush_r+0xb8>
 800c76e:	4a2a      	ldr	r2, [pc, #168]	; (800c818 <__sflush_r+0x108>)
 800c770:	40ca      	lsrs	r2, r1
 800c772:	07d6      	lsls	r6, r2, #31
 800c774:	d528      	bpl.n	800c7c8 <__sflush_r+0xb8>
 800c776:	2200      	movs	r2, #0
 800c778:	6062      	str	r2, [r4, #4]
 800c77a:	04d9      	lsls	r1, r3, #19
 800c77c:	6922      	ldr	r2, [r4, #16]
 800c77e:	6022      	str	r2, [r4, #0]
 800c780:	d504      	bpl.n	800c78c <__sflush_r+0x7c>
 800c782:	1c42      	adds	r2, r0, #1
 800c784:	d101      	bne.n	800c78a <__sflush_r+0x7a>
 800c786:	682b      	ldr	r3, [r5, #0]
 800c788:	b903      	cbnz	r3, 800c78c <__sflush_r+0x7c>
 800c78a:	6560      	str	r0, [r4, #84]	; 0x54
 800c78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c78e:	602f      	str	r7, [r5, #0]
 800c790:	2900      	cmp	r1, #0
 800c792:	d0ca      	beq.n	800c72a <__sflush_r+0x1a>
 800c794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c798:	4299      	cmp	r1, r3
 800c79a:	d002      	beq.n	800c7a2 <__sflush_r+0x92>
 800c79c:	4628      	mov	r0, r5
 800c79e:	f000 f8fd 	bl	800c99c <_free_r>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	6360      	str	r0, [r4, #52]	; 0x34
 800c7a6:	e7c1      	b.n	800c72c <__sflush_r+0x1c>
 800c7a8:	6a21      	ldr	r1, [r4, #32]
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	47b0      	blx	r6
 800c7b0:	1c41      	adds	r1, r0, #1
 800c7b2:	d1c7      	bne.n	800c744 <__sflush_r+0x34>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0c4      	beq.n	800c744 <__sflush_r+0x34>
 800c7ba:	2b1d      	cmp	r3, #29
 800c7bc:	d001      	beq.n	800c7c2 <__sflush_r+0xb2>
 800c7be:	2b16      	cmp	r3, #22
 800c7c0:	d101      	bne.n	800c7c6 <__sflush_r+0xb6>
 800c7c2:	602f      	str	r7, [r5, #0]
 800c7c4:	e7b1      	b.n	800c72a <__sflush_r+0x1a>
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	e7ad      	b.n	800c72c <__sflush_r+0x1c>
 800c7d0:	690f      	ldr	r7, [r1, #16]
 800c7d2:	2f00      	cmp	r7, #0
 800c7d4:	d0a9      	beq.n	800c72a <__sflush_r+0x1a>
 800c7d6:	0793      	lsls	r3, r2, #30
 800c7d8:	680e      	ldr	r6, [r1, #0]
 800c7da:	bf08      	it	eq
 800c7dc:	694b      	ldreq	r3, [r1, #20]
 800c7de:	600f      	str	r7, [r1, #0]
 800c7e0:	bf18      	it	ne
 800c7e2:	2300      	movne	r3, #0
 800c7e4:	eba6 0807 	sub.w	r8, r6, r7
 800c7e8:	608b      	str	r3, [r1, #8]
 800c7ea:	f1b8 0f00 	cmp.w	r8, #0
 800c7ee:	dd9c      	ble.n	800c72a <__sflush_r+0x1a>
 800c7f0:	6a21      	ldr	r1, [r4, #32]
 800c7f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7f4:	4643      	mov	r3, r8
 800c7f6:	463a      	mov	r2, r7
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	47b0      	blx	r6
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	dc06      	bgt.n	800c80e <__sflush_r+0xfe>
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	e78e      	b.n	800c72c <__sflush_r+0x1c>
 800c80e:	4407      	add	r7, r0
 800c810:	eba8 0800 	sub.w	r8, r8, r0
 800c814:	e7e9      	b.n	800c7ea <__sflush_r+0xda>
 800c816:	bf00      	nop
 800c818:	20400001 	.word	0x20400001

0800c81c <_fflush_r>:
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	690b      	ldr	r3, [r1, #16]
 800c820:	4605      	mov	r5, r0
 800c822:	460c      	mov	r4, r1
 800c824:	b913      	cbnz	r3, 800c82c <_fflush_r+0x10>
 800c826:	2500      	movs	r5, #0
 800c828:	4628      	mov	r0, r5
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	b118      	cbz	r0, 800c836 <_fflush_r+0x1a>
 800c82e:	6983      	ldr	r3, [r0, #24]
 800c830:	b90b      	cbnz	r3, 800c836 <_fflush_r+0x1a>
 800c832:	f7ff fa15 	bl	800bc60 <__sinit>
 800c836:	4b14      	ldr	r3, [pc, #80]	; (800c888 <_fflush_r+0x6c>)
 800c838:	429c      	cmp	r4, r3
 800c83a:	d11b      	bne.n	800c874 <_fflush_r+0x58>
 800c83c:	686c      	ldr	r4, [r5, #4]
 800c83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0ef      	beq.n	800c826 <_fflush_r+0xa>
 800c846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c848:	07d0      	lsls	r0, r2, #31
 800c84a:	d404      	bmi.n	800c856 <_fflush_r+0x3a>
 800c84c:	0599      	lsls	r1, r3, #22
 800c84e:	d402      	bmi.n	800c856 <_fflush_r+0x3a>
 800c850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c852:	f7ff faa3 	bl	800bd9c <__retarget_lock_acquire_recursive>
 800c856:	4628      	mov	r0, r5
 800c858:	4621      	mov	r1, r4
 800c85a:	f7ff ff59 	bl	800c710 <__sflush_r>
 800c85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c860:	07da      	lsls	r2, r3, #31
 800c862:	4605      	mov	r5, r0
 800c864:	d4e0      	bmi.n	800c828 <_fflush_r+0xc>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	059b      	lsls	r3, r3, #22
 800c86a:	d4dd      	bmi.n	800c828 <_fflush_r+0xc>
 800c86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c86e:	f7ff fa96 	bl	800bd9e <__retarget_lock_release_recursive>
 800c872:	e7d9      	b.n	800c828 <_fflush_r+0xc>
 800c874:	4b05      	ldr	r3, [pc, #20]	; (800c88c <_fflush_r+0x70>)
 800c876:	429c      	cmp	r4, r3
 800c878:	d101      	bne.n	800c87e <_fflush_r+0x62>
 800c87a:	68ac      	ldr	r4, [r5, #8]
 800c87c:	e7df      	b.n	800c83e <_fflush_r+0x22>
 800c87e:	4b04      	ldr	r3, [pc, #16]	; (800c890 <_fflush_r+0x74>)
 800c880:	429c      	cmp	r4, r3
 800c882:	bf08      	it	eq
 800c884:	68ec      	ldreq	r4, [r5, #12]
 800c886:	e7da      	b.n	800c83e <_fflush_r+0x22>
 800c888:	0800cc24 	.word	0x0800cc24
 800c88c:	0800cc44 	.word	0x0800cc44
 800c890:	0800cc04 	.word	0x0800cc04

0800c894 <_lseek_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	; (800c8b4 <_lseek_r+0x20>)
 800c898:	4604      	mov	r4, r0
 800c89a:	4608      	mov	r0, r1
 800c89c:	4611      	mov	r1, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f7f4 fa76 	bl	8000d94 <_lseek>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_lseek_r+0x1e>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_lseek_r+0x1e>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	20001d0c 	.word	0x20001d0c

0800c8b8 <__swhatbuf_r>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	460e      	mov	r6, r1
 800c8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c0:	2900      	cmp	r1, #0
 800c8c2:	b096      	sub	sp, #88	; 0x58
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	461d      	mov	r5, r3
 800c8c8:	da08      	bge.n	800c8dc <__swhatbuf_r+0x24>
 800c8ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	602a      	str	r2, [r5, #0]
 800c8d2:	061a      	lsls	r2, r3, #24
 800c8d4:	d410      	bmi.n	800c8f8 <__swhatbuf_r+0x40>
 800c8d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8da:	e00e      	b.n	800c8fa <__swhatbuf_r+0x42>
 800c8dc:	466a      	mov	r2, sp
 800c8de:	f000 f8bb 	bl	800ca58 <_fstat_r>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	dbf1      	blt.n	800c8ca <__swhatbuf_r+0x12>
 800c8e6:	9a01      	ldr	r2, [sp, #4]
 800c8e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c8f0:	425a      	negs	r2, r3
 800c8f2:	415a      	adcs	r2, r3
 800c8f4:	602a      	str	r2, [r5, #0]
 800c8f6:	e7ee      	b.n	800c8d6 <__swhatbuf_r+0x1e>
 800c8f8:	2340      	movs	r3, #64	; 0x40
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	b016      	add	sp, #88	; 0x58
 800c900:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c904 <__smakebuf_r>:
 800c904:	898b      	ldrh	r3, [r1, #12]
 800c906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c908:	079d      	lsls	r5, r3, #30
 800c90a:	4606      	mov	r6, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	d507      	bpl.n	800c920 <__smakebuf_r+0x1c>
 800c910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	6123      	str	r3, [r4, #16]
 800c918:	2301      	movs	r3, #1
 800c91a:	6163      	str	r3, [r4, #20]
 800c91c:	b002      	add	sp, #8
 800c91e:	bd70      	pop	{r4, r5, r6, pc}
 800c920:	ab01      	add	r3, sp, #4
 800c922:	466a      	mov	r2, sp
 800c924:	f7ff ffc8 	bl	800c8b8 <__swhatbuf_r>
 800c928:	9900      	ldr	r1, [sp, #0]
 800c92a:	4605      	mov	r5, r0
 800c92c:	4630      	mov	r0, r6
 800c92e:	f7ff fa57 	bl	800bde0 <_malloc_r>
 800c932:	b948      	cbnz	r0, 800c948 <__smakebuf_r+0x44>
 800c934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c938:	059a      	lsls	r2, r3, #22
 800c93a:	d4ef      	bmi.n	800c91c <__smakebuf_r+0x18>
 800c93c:	f023 0303 	bic.w	r3, r3, #3
 800c940:	f043 0302 	orr.w	r3, r3, #2
 800c944:	81a3      	strh	r3, [r4, #12]
 800c946:	e7e3      	b.n	800c910 <__smakebuf_r+0xc>
 800c948:	4b0d      	ldr	r3, [pc, #52]	; (800c980 <__smakebuf_r+0x7c>)
 800c94a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	6020      	str	r0, [r4, #0]
 800c950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	9b00      	ldr	r3, [sp, #0]
 800c958:	6163      	str	r3, [r4, #20]
 800c95a:	9b01      	ldr	r3, [sp, #4]
 800c95c:	6120      	str	r0, [r4, #16]
 800c95e:	b15b      	cbz	r3, 800c978 <__smakebuf_r+0x74>
 800c960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c964:	4630      	mov	r0, r6
 800c966:	f000 f889 	bl	800ca7c <_isatty_r>
 800c96a:	b128      	cbz	r0, 800c978 <__smakebuf_r+0x74>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	f023 0303 	bic.w	r3, r3, #3
 800c972:	f043 0301 	orr.w	r3, r3, #1
 800c976:	81a3      	strh	r3, [r4, #12]
 800c978:	89a0      	ldrh	r0, [r4, #12]
 800c97a:	4305      	orrs	r5, r0
 800c97c:	81a5      	strh	r5, [r4, #12]
 800c97e:	e7cd      	b.n	800c91c <__smakebuf_r+0x18>
 800c980:	0800bbf9 	.word	0x0800bbf9

0800c984 <__malloc_lock>:
 800c984:	4801      	ldr	r0, [pc, #4]	; (800c98c <__malloc_lock+0x8>)
 800c986:	f7ff ba09 	b.w	800bd9c <__retarget_lock_acquire_recursive>
 800c98a:	bf00      	nop
 800c98c:	20001d00 	.word	0x20001d00

0800c990 <__malloc_unlock>:
 800c990:	4801      	ldr	r0, [pc, #4]	; (800c998 <__malloc_unlock+0x8>)
 800c992:	f7ff ba04 	b.w	800bd9e <__retarget_lock_release_recursive>
 800c996:	bf00      	nop
 800c998:	20001d00 	.word	0x20001d00

0800c99c <_free_r>:
 800c99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	d044      	beq.n	800ca2c <_free_r+0x90>
 800c9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a6:	9001      	str	r0, [sp, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ae:	bfb8      	it	lt
 800c9b0:	18e4      	addlt	r4, r4, r3
 800c9b2:	f7ff ffe7 	bl	800c984 <__malloc_lock>
 800c9b6:	4a1e      	ldr	r2, [pc, #120]	; (800ca30 <_free_r+0x94>)
 800c9b8:	9801      	ldr	r0, [sp, #4]
 800c9ba:	6813      	ldr	r3, [r2, #0]
 800c9bc:	b933      	cbnz	r3, 800c9cc <_free_r+0x30>
 800c9be:	6063      	str	r3, [r4, #4]
 800c9c0:	6014      	str	r4, [r2, #0]
 800c9c2:	b003      	add	sp, #12
 800c9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9c8:	f7ff bfe2 	b.w	800c990 <__malloc_unlock>
 800c9cc:	42a3      	cmp	r3, r4
 800c9ce:	d908      	bls.n	800c9e2 <_free_r+0x46>
 800c9d0:	6825      	ldr	r5, [r4, #0]
 800c9d2:	1961      	adds	r1, r4, r5
 800c9d4:	428b      	cmp	r3, r1
 800c9d6:	bf01      	itttt	eq
 800c9d8:	6819      	ldreq	r1, [r3, #0]
 800c9da:	685b      	ldreq	r3, [r3, #4]
 800c9dc:	1949      	addeq	r1, r1, r5
 800c9de:	6021      	streq	r1, [r4, #0]
 800c9e0:	e7ed      	b.n	800c9be <_free_r+0x22>
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	b10b      	cbz	r3, 800c9ec <_free_r+0x50>
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	d9fa      	bls.n	800c9e2 <_free_r+0x46>
 800c9ec:	6811      	ldr	r1, [r2, #0]
 800c9ee:	1855      	adds	r5, r2, r1
 800c9f0:	42a5      	cmp	r5, r4
 800c9f2:	d10b      	bne.n	800ca0c <_free_r+0x70>
 800c9f4:	6824      	ldr	r4, [r4, #0]
 800c9f6:	4421      	add	r1, r4
 800c9f8:	1854      	adds	r4, r2, r1
 800c9fa:	42a3      	cmp	r3, r4
 800c9fc:	6011      	str	r1, [r2, #0]
 800c9fe:	d1e0      	bne.n	800c9c2 <_free_r+0x26>
 800ca00:	681c      	ldr	r4, [r3, #0]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	6053      	str	r3, [r2, #4]
 800ca06:	4421      	add	r1, r4
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	e7da      	b.n	800c9c2 <_free_r+0x26>
 800ca0c:	d902      	bls.n	800ca14 <_free_r+0x78>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	e7d6      	b.n	800c9c2 <_free_r+0x26>
 800ca14:	6825      	ldr	r5, [r4, #0]
 800ca16:	1961      	adds	r1, r4, r5
 800ca18:	428b      	cmp	r3, r1
 800ca1a:	bf04      	itt	eq
 800ca1c:	6819      	ldreq	r1, [r3, #0]
 800ca1e:	685b      	ldreq	r3, [r3, #4]
 800ca20:	6063      	str	r3, [r4, #4]
 800ca22:	bf04      	itt	eq
 800ca24:	1949      	addeq	r1, r1, r5
 800ca26:	6021      	streq	r1, [r4, #0]
 800ca28:	6054      	str	r4, [r2, #4]
 800ca2a:	e7ca      	b.n	800c9c2 <_free_r+0x26>
 800ca2c:	b003      	add	sp, #12
 800ca2e:	bd30      	pop	{r4, r5, pc}
 800ca30:	20001d04 	.word	0x20001d04

0800ca34 <_read_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4d07      	ldr	r5, [pc, #28]	; (800ca54 <_read_r+0x20>)
 800ca38:	4604      	mov	r4, r0
 800ca3a:	4608      	mov	r0, r1
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	2200      	movs	r2, #0
 800ca40:	602a      	str	r2, [r5, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	f7f4 f962 	bl	8000d0c <_read>
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	d102      	bne.n	800ca52 <_read_r+0x1e>
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	b103      	cbz	r3, 800ca52 <_read_r+0x1e>
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	20001d0c 	.word	0x20001d0c

0800ca58 <_fstat_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4d07      	ldr	r5, [pc, #28]	; (800ca78 <_fstat_r+0x20>)
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	4604      	mov	r4, r0
 800ca60:	4608      	mov	r0, r1
 800ca62:	4611      	mov	r1, r2
 800ca64:	602b      	str	r3, [r5, #0]
 800ca66:	f7f4 f97a 	bl	8000d5e <_fstat>
 800ca6a:	1c43      	adds	r3, r0, #1
 800ca6c:	d102      	bne.n	800ca74 <_fstat_r+0x1c>
 800ca6e:	682b      	ldr	r3, [r5, #0]
 800ca70:	b103      	cbz	r3, 800ca74 <_fstat_r+0x1c>
 800ca72:	6023      	str	r3, [r4, #0]
 800ca74:	bd38      	pop	{r3, r4, r5, pc}
 800ca76:	bf00      	nop
 800ca78:	20001d0c 	.word	0x20001d0c

0800ca7c <_isatty_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	4d06      	ldr	r5, [pc, #24]	; (800ca98 <_isatty_r+0x1c>)
 800ca80:	2300      	movs	r3, #0
 800ca82:	4604      	mov	r4, r0
 800ca84:	4608      	mov	r0, r1
 800ca86:	602b      	str	r3, [r5, #0]
 800ca88:	f7f4 f979 	bl	8000d7e <_isatty>
 800ca8c:	1c43      	adds	r3, r0, #1
 800ca8e:	d102      	bne.n	800ca96 <_isatty_r+0x1a>
 800ca90:	682b      	ldr	r3, [r5, #0]
 800ca92:	b103      	cbz	r3, 800ca96 <_isatty_r+0x1a>
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	bd38      	pop	{r3, r4, r5, pc}
 800ca98:	20001d0c 	.word	0x20001d0c

0800ca9c <_init>:
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	bf00      	nop
 800caa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caa2:	bc08      	pop	{r3}
 800caa4:	469e      	mov	lr, r3
 800caa6:	4770      	bx	lr

0800caa8 <_fini>:
 800caa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caaa:	bf00      	nop
 800caac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caae:	bc08      	pop	{r3}
 800cab0:	469e      	mov	lr, r3
 800cab2:	4770      	bx	lr
>>>>>>> Stashed changes
