
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca20  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800cb60  0800cb60  0001cb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cd60  0800cd60  0001cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cd64  0800cd64  0001cd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a8  20000008  0800cd68  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b70  200001b0  0800cf10  000201b0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d20  0800cf10  00021d20  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c440  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000044fd  00000000  00000000  0003c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001cf0  00000000  00000000  00040b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001af8  00000000  00000000  00042810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00027012  00000000  00000000  00044308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d805  00000000  00000000  0006b31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e22fe  00000000  00000000  00088b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0016ae1d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007ecc  00000000  00000000  0016ae70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b0 	.word	0x200001b0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cb48 	.word	0x0800cb48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b4 	.word	0x200001b4
 800017c:	0800cb48 	.word	0x0800cb48

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <Play_Buzzer>:

int iBuzzTeller = 0;
bool bAlreadyPlayed = false;

void Play_Buzzer(bool buzzer)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
	if (buzzer){
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d02e      	beq.n	800028e <Play_Buzzer+0x6e>
		iBuzzTeller++;
 8000230:	4b19      	ldr	r3, [pc, #100]	; (8000298 <Play_Buzzer+0x78>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <Play_Buzzer+0x78>)
 8000238:	6013      	str	r3, [r2, #0]
		if (iBuzzTeller >= 40000 && !bAlreadyPlayed) {
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <Play_Buzzer+0x78>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000242:	4293      	cmp	r3, r2
 8000244:	dd0f      	ble.n	8000266 <Play_Buzzer+0x46>
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <Play_Buzzer+0x7c>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	f083 0301 	eor.w	r3, r3, #1
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <Play_Buzzer+0x46>
			HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	4811      	ldr	r0, [pc, #68]	; (80002a0 <Play_Buzzer+0x80>)
 800025a:	f001 fcd7 	bl	8001c0c <HAL_GPIO_WritePin>
			bAlreadyPlayed = true;
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <Play_Buzzer+0x7c>)
 8000260:	2201      	movs	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
			bAlreadyPlayed = false;
			iBuzzTeller = 0;
		}
	}
}
 8000264:	e013      	b.n	800028e <Play_Buzzer+0x6e>
		} else if (iBuzzTeller >= 80000 && bAlreadyPlayed) {
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <Play_Buzzer+0x78>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <Play_Buzzer+0x84>)
 800026c:	4293      	cmp	r3, r2
 800026e:	dd0e      	ble.n	800028e <Play_Buzzer+0x6e>
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <Play_Buzzer+0x7c>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00a      	beq.n	800028e <Play_Buzzer+0x6e>
			HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2101      	movs	r1, #1
 800027c:	4808      	ldr	r0, [pc, #32]	; (80002a0 <Play_Buzzer+0x80>)
 800027e:	f001 fcc5 	bl	8001c0c <HAL_GPIO_WritePin>
			bAlreadyPlayed = false;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <Play_Buzzer+0x7c>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
			iBuzzTeller = 0;
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <Play_Buzzer+0x78>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	200001cc 	.word	0x200001cc
 800029c:	200001d0 	.word	0x200001d0
 80002a0:	48000400 	.word	0x48000400
 80002a4:	0001387f 	.word	0x0001387f

080002a8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80002b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4313      	orrs	r3, r2
 80002be:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4013      	ands	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002cc:	68fb      	ldr	r3, [r7, #12]
}
 80002ce:	bf00      	nop
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4013      	ands	r3, r2
 80002fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fe:	68fb      	ldr	r3, [r7, #12]
}
 8000300:	bf00      	nop
 8000302:	3714      	adds	r7, #20
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <HAL_TIM_PWM_PulseFinishedCallback>:
#define WS2812_LED_MAX 10
uint8_t LED_Data[WS2812_LED_MAX][4];
int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8000314:	2108      	movs	r1, #8
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000318:	f005 fa7c 	bl	8005814 <HAL_TIM_PWM_Stop_DMA>
  datasentflag = 1;
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800031e:	2201      	movs	r2, #1
 8000320:	601a      	str	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200001d4 	.word	0x200001d4
 8000330:	200002f4 	.word	0x200002f4

08000334 <ws2812_Set_LED>:

void ws2812_Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	b2d9      	uxtb	r1, r3
 8000346:	4a11      	ldr	r2, [pc, #68]	; (800038c <ws2812_Set_LED+0x58>)
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	b2d9      	uxtb	r1, r3
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <ws2812_Set_LED+0x58>)
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	460a      	mov	r2, r1
 800035c:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	b2d9      	uxtb	r1, r3
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <ws2812_Set_LED+0x58>)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	460a      	mov	r2, r1
 800036c:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <ws2812_Set_LED+0x58>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	460a      	mov	r2, r1
 800037c:	70da      	strb	r2, [r3, #3]
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	200002cc 	.word	0x200002cc

08000390 <ws2812_SetAll_LED>:

void ws2812_SetAll_LED(int Red, int Green, int Blue)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < WS2812_LED_MAX; i++)
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	e008      	b.n	80003b4 <ws2812_SetAll_LED+0x24>
  {
    ws2812_Set_LED(i, Red, Green, Blue);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	68ba      	ldr	r2, [r7, #8]
 80003a6:	68f9      	ldr	r1, [r7, #12]
 80003a8:	6978      	ldr	r0, [r7, #20]
 80003aa:	f7ff ffc3 	bl	8000334 <ws2812_Set_LED>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	3301      	adds	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2b09      	cmp	r3, #9
 80003b8:	ddf3      	ble.n	80003a2 <ws2812_SetAll_LED+0x12>
  }
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <ws2812_Send_PWM>:

void ws2812_Send_PWM(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80003ca:	af00      	add	r7, sp, #0
  uint16_t pwmData[24 * (WS2812_LED_MAX) + 50];
  uint32_t indx = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  uint32_t color;
  for (int i = 0; i < WS2812_LED_MAX; i++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80003d8:	e04c      	b.n	8000474 <ws2812_Send_PWM+0xb0>
  {
    color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
 80003da:	4a40      	ldr	r2, [pc, #256]	; (80004dc <ws2812_Send_PWM+0x118>)
 80003dc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	785b      	ldrb	r3, [r3, #1]
 80003e6:	041a      	lsls	r2, r3, #16
 80003e8:	493c      	ldr	r1, [pc, #240]	; (80004dc <ws2812_Send_PWM+0x118>)
 80003ea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	440b      	add	r3, r1
 80003f2:	789b      	ldrb	r3, [r3, #2]
 80003f4:	021b      	lsls	r3, r3, #8
 80003f6:	431a      	orrs	r2, r3
 80003f8:	4938      	ldr	r1, [pc, #224]	; (80004dc <ws2812_Send_PWM+0x118>)
 80003fa:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	440b      	add	r3, r1
 8000402:	78db      	ldrb	r3, [r3, #3]
 8000404:	4313      	orrs	r3, r2
 8000406:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    for (int i = 23; i >= 0; i--)
 800040a:	2317      	movs	r3, #23
 800040c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8000410:	e027      	b.n	8000462 <ws2812_Send_PWM+0x9e>
    {
      if (color & (1 << i))
 8000412:	2201      	movs	r2, #1
 8000414:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	461a      	mov	r2, r3
 800041e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000422:	4013      	ands	r3, r2
 8000424:	2b00      	cmp	r3, #0
 8000426:	d009      	beq.n	800043c <ws2812_Send_PWM+0x78>
      {
        pwmData[indx] = 50; // 2/3 of ARR=75
 8000428:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800042c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000430:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000434:	2132      	movs	r1, #50	; 0x32
 8000436:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800043a:	e008      	b.n	800044e <ws2812_Send_PWM+0x8a>
      }

      else
        pwmData[indx] = 25; // 1/3 of ARR=75
 800043c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000440:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000444:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000448:	2119      	movs	r1, #25
 800044a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

      indx++;
 800044e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000452:	3301      	adds	r3, #1
 8000454:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    for (int i = 23; i >= 0; i--)
 8000458:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800045c:	3b01      	subs	r3, #1
 800045e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8000462:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000466:	2b00      	cmp	r3, #0
 8000468:	dad3      	bge.n	8000412 <ws2812_Send_PWM+0x4e>
  for (int i = 0; i < WS2812_LED_MAX; i++)
 800046a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800046e:	3301      	adds	r3, #1
 8000470:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8000474:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000478:	2b09      	cmp	r3, #9
 800047a:	ddae      	ble.n	80003da <ws2812_Send_PWM+0x16>
    }
  }
  for (int i = 0; i < 50; i++)
 800047c:	2300      	movs	r3, #0
 800047e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8000482:	e012      	b.n	80004aa <ws2812_Send_PWM+0xe6>
  {
    pwmData[indx] = 0;
 8000484:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000488:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800048c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000490:	2100      	movs	r1, #0
 8000492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    indx++;
 8000496:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800049a:	3301      	adds	r3, #1
 800049c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  for (int i = 0; i < 50; i++)
 80004a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80004a4:	3301      	adds	r3, #1
 80004a6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80004aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80004ae:	2b31      	cmp	r3, #49	; 0x31
 80004b0:	dde8      	ble.n	8000484 <ws2812_Send_PWM+0xc0>
  }
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 80004b2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	463a      	mov	r2, r7
 80004ba:	2108      	movs	r1, #8
 80004bc:	4808      	ldr	r0, [pc, #32]	; (80004e0 <ws2812_Send_PWM+0x11c>)
 80004be:	f004 ffb7 	bl	8005430 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag)
 80004c2:	bf00      	nop
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <ws2812_Send_PWM+0x120>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0fb      	beq.n	80004c4 <ws2812_Send_PWM+0x100>
  {
  };
  datasentflag = 0;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <ws2812_Send_PWM+0x120>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200002cc 	.word	0x200002cc
 80004e0:	200001d4 	.word	0x200001d4
 80004e4:	200002f4 	.word	0x200002f4

080004e8 <StartAlarm>:

bool bAlarmGestart = false;
bool buzzerIsPlaying = true;

void StartAlarm() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	if(!bAlarmGestart) {
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <StartAlarm+0x24>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	f083 0301 	eor.w	r3, r3, #1
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d005      	beq.n	8000506 <StartAlarm+0x1e>
		printf("Alarm aan het starten....");
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <StartAlarm+0x28>)
 80004fc:	f00b fb96 	bl	800bc2c <iprintf>
		bAlarmGestart = true;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <StartAlarm+0x24>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
	  // set state of bool
	}
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200002f8 	.word	0x200002f8
 8000510:	0800cb60 	.word	0x0800cb60

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd86 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82a 	bl	8000574 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000520:	f000 f894 	bl	800064c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f99a 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 f986 	bl	8000838 <MX_DMA_Init>
  MX_USB_Device_Init();
 800052c:	f00a fdea 	bl	800b104 <MX_USB_Device_Init>
  MX_TIM16_Init();
 8000530:	f000 f95a 	bl	80007e8 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000534:	f000 f8a8 	bl	8000688 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ws2812_SetAll_LED(0, 0, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ff27 	bl	8000390 <ws2812_SetAll_LED>
  ws2812_Send_PWM();
 8000542:	f7ff ff3f 	bl	80003c4 <ws2812_Send_PWM>

  while (1)
  {
	if(buzzerIsPlaying) {
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <main+0x5c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d005      	beq.n	800055a <main+0x46>
		Play_Buzzer(true);
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff fe66 	bl	8000220 <Play_Buzzer>
		Relay_On();
 8000554:	f000 fa58 	bl	8000a08 <Relay_On>
 8000558:	e004      	b.n	8000564 <main+0x50>
	}
	else {
		Play_Buzzer(false);
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff fe60 	bl	8000220 <Play_Buzzer>
		Relay_Off();
 8000560:	f000 fa5e 	bl	8000a20 <Relay_Off>
	}
	//ledstrip_Pulse();

	//Play_Buzzer();
    Read_Rotary();
 8000564:	f000 fa78 	bl	8000a58 <Read_Rotary>
    Read_Reed();
 8000568:	f000 fa0a 	bl	8000980 <Read_Reed>
	if(buzzerIsPlaying) {
 800056c:	e7eb      	b.n	8000546 <main+0x32>
 800056e:	bf00      	nop
 8000570:	20000008 	.word	0x20000008

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09a      	sub	sp, #104	; 0x68
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2248      	movs	r2, #72	; 0x48
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f00b fb4a 	bl	800bc1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <SystemClock_Config+0xd4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005a2:	4a29      	ldr	r2, [pc, #164]	; (8000648 <SystemClock_Config+0xd4>)
 80005a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b27      	ldr	r3, [pc, #156]	; (8000648 <SystemClock_Config+0xd4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80005b6:	2326      	movs	r3, #38	; 0x26
 80005b8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d0:	2360      	movs	r3, #96	; 0x60
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d8:	2301      	movs	r3, #1
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005e0:	2320      	movs	r3, #32
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fbee 	bl	8003ddc <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000606:	f000 f987 	bl	8000918 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800060a:	236f      	movs	r3, #111	; 0x6f
 800060c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2303      	movs	r3, #3
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f003 ff4a 	bl	80044c4 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000636:	f000 f96f 	bl	8000918 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800063a:	f004 fcdb 	bl	8004ff4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800063e:	bf00      	nop
 8000640:	3768      	adds	r7, #104	; 0x68
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	58000400 	.word	0x58000400

0800064c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2250      	movs	r2, #80	; 0x50
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f00b fadf 	bl	800bc1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800065e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000662:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000668:	2310      	movs	r3, #16
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fb4a 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800067a:	f000 f94d 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	; 0x70
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]
 80006ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00b faaa 	bl	800bc1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006ca:	4a46      	ldr	r2, [pc, #280]	; (80007e4 <MX_TIM1_Init+0x15c>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ce:	4b44      	ldr	r3, [pc, #272]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 75- 1;
 80006da:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006dc:	224a      	movs	r2, #74	; 0x4a
 80006de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e6:	4b3e      	ldr	r3, [pc, #248]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ec:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f2:	483b      	ldr	r0, [pc, #236]	; (80007e0 <MX_TIM1_Init+0x158>)
 80006f4:	f004 fd95 	bl	8005222 <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006fe:	f000 f90b 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000708:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800070c:	4619      	mov	r1, r3
 800070e:	4834      	ldr	r0, [pc, #208]	; (80007e0 <MX_TIM1_Init+0x158>)
 8000710:	f005 fb9c 	bl	8005e4c <HAL_TIM_ConfigClockSource>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800071a:	f000 f8fd 	bl	8000918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800071e:	4830      	ldr	r0, [pc, #192]	; (80007e0 <MX_TIM1_Init+0x158>)
 8000720:	f004 fe24 	bl	800536c <HAL_TIM_PWM_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800072a:	f000 f8f5 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800073e:	4619      	mov	r1, r3
 8000740:	4827      	ldr	r0, [pc, #156]	; (80007e0 <MX_TIM1_Init+0x158>)
 8000742:	f006 f8f3 	bl	800692c <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800074c:	f000 f8e4 	bl	8000918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075c:	2300      	movs	r3, #0
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800076c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000770:	2208      	movs	r2, #8
 8000772:	4619      	mov	r1, r3
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <MX_TIM1_Init+0x158>)
 8000776:	f005 fa55 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000780:	f000 f8ca 	bl	8000918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM1_Init+0x158>)
 80007c2:	f006 f913 	bl	80069ec <HAL_TIMEx_ConfigBreakDeadTime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80007cc:	f000 f8a4 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM1_Init+0x158>)
 80007d2:	f000 fa9d 	bl	8000d10 <HAL_TIM_MspPostInit>

}
 80007d6:	bf00      	nop
 80007d8:	3770      	adds	r7, #112	; 0x70
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200001d4 	.word	0x200001d4
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_TIM16_Init+0x48>)
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <MX_TIM16_Init+0x4c>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63998;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_TIM16_Init+0x48>)
 80007f4:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 80007f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_TIM16_Init+0x48>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_TIM16_Init+0x48>)
 8000802:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000806:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_TIM16_Init+0x48>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_TIM16_Init+0x48>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_TIM16_Init+0x48>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_TIM16_Init+0x48>)
 800081c:	f004 fd01 	bl	8005222 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000826:	f000 f877 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000220 	.word	0x20000220
 8000834:	40014400 	.word	0x40014400

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800083c:	2004      	movs	r0, #4
 800083e:	f7ff fd33 	bl	80002a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fd30 	bl	80002a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	200b      	movs	r0, #11
 800084e:	f000 fd4c 	bl	80012ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000852:	200b      	movs	r0, #11
 8000854:	f000 fd63 	bl	800131e <HAL_NVIC_EnableIRQ>

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff fd32 	bl	80002da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2002      	movs	r0, #2
 8000878:	f7ff fd2f 	bl	80002da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff fd2c 	bl	80002da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2008      	movs	r0, #8
 8000884:	f7ff fd29 	bl	80002da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800088e:	481f      	ldr	r0, [pc, #124]	; (800090c <MX_GPIO_Init+0xb0>)
 8000890:	f001 f9bc 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GROVE_GPIO_Port, BUZZER_GROVE_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <MX_GPIO_Init+0xb4>)
 800089a:	f001 f9b7 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RELAY_Pin;
 800089e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80008a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4815      	ldr	r0, [pc, #84]	; (800090c <MX_GPIO_Init+0xb0>)
 80008b6:	f001 f821 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin REED_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|REED_Pin|ROTARY1_Pin|ROTARY2_Pin;
 80008ba:	f641 030a 	movw	r3, #6154	; 0x180a
 80008be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <MX_GPIO_Init+0xb0>)
 80008ce:	f001 f815 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_GROVE_Pin */
  GPIO_InitStruct.Pin = BUZZER_GROVE_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUZZER_GROVE_GPIO_Port, &GPIO_InitStruct);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	480a      	ldr	r0, [pc, #40]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008e8:	f001 f808 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80008ec:	2301      	movs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_GPIO_Init+0xb8>)
 80008fe:	f000 fffd 	bl	80018fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	48000800 	.word	0x48000800
 8000910:	48000400 	.word	0x48000400
 8000914:	48000c00 	.word	0x48000c00

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <REED_status>:
bool isTimerOn = false;
extern TIM_HandleTypeDef htim16;
extern bool buzzerIsPlaying;

GPIO_PinState REED_status()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(REED_GPIO_Port, REED_Pin);
 8000928:	2108      	movs	r1, #8
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <REED_status+0x14>)
 800092c:	f001 f956 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	48000800 	.word	0x48000800

0800093c <SetTimer>:

void SetTimer() {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim16);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <SetTimer+0x10>)
 8000942:	f004 fcc5 	bl	80052d0 <HAL_TIM_Base_Start_IT>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000220 	.word	0x20000220

08000950 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if (!bHasContact) { // kijken of contact is anders starten we het alarm.
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f083 0301 	eor.w	r3, r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d004      	beq.n	8000970 <HAL_TIM_PeriodElapsedCallback+0x20>
		printf("Timer is gestart!");
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000968:	f00b f960 	bl	800bc2c <iprintf>
		// Trigger function
		StartAlarm();
 800096c:	f7ff fdbc 	bl	80004e8 <StartAlarm>
	}
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200002f9 	.word	0x200002f9
 800097c:	0800cb7c 	.word	0x0800cb7c

08000980 <Read_Reed>:


void Read_Reed()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

	if (!REED_status() && !bHasContact)
 8000984:	f7ff ffce 	bl	8000924 <REED_status>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d11b      	bne.n	80009c6 <Read_Reed+0x46>
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <Read_Reed+0x74>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	f083 0301 	eor.w	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d014      	beq.n	80009c6 <Read_Reed+0x46>
	{
		printf("Reed heeft nu contact");
 800099c:	4816      	ldr	r0, [pc, #88]	; (80009f8 <Read_Reed+0x78>)
 800099e:	f00b f945 	bl	800bc2c <iprintf>
		ws2812_SetAll_LED(0, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fcf2 	bl	8000390 <ws2812_SetAll_LED>
		ws2812_Send_PWM();
 80009ac:	f7ff fd0a 	bl	80003c4 <ws2812_Send_PWM>
		buzzerIsPlaying = true;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <Read_Reed+0x7c>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
		bHasContact = true;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <Read_Reed+0x74>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
		isTimerOn = false;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <Read_Reed+0x80>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
	{
 80009c2:	bf00      	nop

		printf("Reed heeft geen contact");
		bHasContact = false;
	}

}
 80009c4:	e013      	b.n	80009ee <Read_Reed+0x6e>
	else if (REED_status() && bHasContact)
 80009c6:	f7ff ffad 	bl	8000924 <REED_status>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00e      	beq.n	80009ee <Read_Reed+0x6e>
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <Read_Reed+0x74>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00a      	beq.n	80009ee <Read_Reed+0x6e>
		isTimerOn = true;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <Read_Reed+0x80>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
		SetTimer();
 80009de:	f7ff ffad 	bl	800093c <SetTimer>
		printf("Reed heeft geen contact");
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <Read_Reed+0x84>)
 80009e4:	f00b f922 	bl	800bc2c <iprintf>
		bHasContact = false;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <Read_Reed+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200002f9 	.word	0x200002f9
 80009f8:	0800cb90 	.word	0x0800cb90
 80009fc:	20000008 	.word	0x20000008
 8000a00:	200002fa 	.word	0x200002fa
 8000a04:	0800cba8 	.word	0x0800cba8

08000a08 <Relay_On>:
#include "main.h"
#include <stdio.h>
#include <stdbool.h>

void Relay_On()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2140      	movs	r1, #64	; 0x40
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <Relay_On+0x14>)
 8000a12:	f001 f8fb 	bl	8001c0c <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	48000800 	.word	0x48000800

08000a20 <Relay_Off>:

void Relay_Off()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <Relay_Off+0x14>)
 8000a2a:	f001 f8ef 	bl	8001c0c <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000800 	.word	0x48000800

08000a38 <_write>:
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	68b8      	ldr	r0, [r7, #8]
 8000a48:	f00a fc1a 	bl	800b280 <CDC_Transmit_FS>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <Read_Rotary>:
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4855      	ldr	r0, [pc, #340]	; (8000bb8 <Read_Rotary+0x160>)
 8000a64:	f001 f8ba 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4851      	ldr	r0, [pc, #324]	; (8000bb8 <Read_Rotary+0x160>)
 8000a72:	f001 f8b3 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	005a      	lsls	r2, r3, #1
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <Read_Rotary+0x164>)
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <Read_Rotary+0x168>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <Read_Rotary+0x164>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	494d      	ldr	r1, [pc, #308]	; (8000bc4 <Read_Rotary+0x16c>)
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d109      	bne.n	8000ab4 <Read_Rotary+0x5c>
 8000aa0:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <Read_Rotary+0x164>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <Read_Rotary+0x170>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	4a46      	ldr	r2, [pc, #280]	; (8000bc8 <Read_Rotary+0x170>)
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e00c      	b.n	8000ace <Read_Rotary+0x76>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aba:	d108      	bne.n	8000ace <Read_Rotary+0x76>
 8000abc:	4b3f      	ldr	r3, [pc, #252]	; (8000bbc <Read_Rotary+0x164>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <Read_Rotary+0x174>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	4a40      	ldr	r2, [pc, #256]	; (8000bcc <Read_Rotary+0x174>)
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <Read_Rotary+0x168>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <Read_Rotary+0x164>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d047      	beq.n	8000b6a <Read_Rotary+0x112>
 8000ada:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <Read_Rotary+0x164>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d143      	bne.n	8000b6a <Read_Rotary+0x112>
 8000ae2:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <Read_Rotary+0x170>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b0b      	cmp	r3, #11
 8000ae8:	d00b      	beq.n	8000b02 <Read_Rotary+0xaa>
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <Read_Rotary+0x170>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b0d      	cmp	r3, #13
 8000af0:	d007      	beq.n	8000b02 <Read_Rotary+0xaa>
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <Read_Rotary+0x170>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b0e      	cmp	r3, #14
 8000af8:	d003      	beq.n	8000b02 <Read_Rotary+0xaa>
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <Read_Rotary+0x170>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	d10e      	bne.n	8000b20 <Read_Rotary+0xc8>
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <Read_Rotary+0x178>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <Read_Rotary+0x178>)
 8000b12:	801a      	strh	r2, [r3, #0]
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1a:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <Read_Rotary+0x160>)
 8000b1c:	f001 f876 	bl	8001c0c <HAL_GPIO_WritePin>
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <Read_Rotary+0x174>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b0b      	cmp	r3, #11
 8000b26:	d00b      	beq.n	8000b40 <Read_Rotary+0xe8>
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <Read_Rotary+0x174>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b0d      	cmp	r3, #13
 8000b2e:	d007      	beq.n	8000b40 <Read_Rotary+0xe8>
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <Read_Rotary+0x174>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b0e      	cmp	r3, #14
 8000b36:	d003      	beq.n	8000b40 <Read_Rotary+0xe8>
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <Read_Rotary+0x174>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d10e      	bne.n	8000b5e <Read_Rotary+0x106>
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <Read_Rotary+0x178>)
 8000b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <Read_Rotary+0x178>)
 8000b50:	801a      	strh	r2, [r3, #0]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <Read_Rotary+0x160>)
 8000b5a:	f001 f857 	bl	8001c0c <HAL_GPIO_WritePin>
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <Read_Rotary+0x170>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <Read_Rotary+0x174>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <Read_Rotary+0x164>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <Read_Rotary+0x168>)
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <Read_Rotary+0x17c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	dd09      	ble.n	8000b92 <Read_Rotary+0x13a>
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <Read_Rotary+0x178>)
 8000b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <Read_Rotary+0x180>)
 8000b88:	f00b f850 	bl	800bc2c <iprintf>
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <Read_Rotary+0x17c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <Read_Rotary+0x17c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <Read_Rotary+0x17c>)
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <Read_Rotary+0x184>)
 8000ba0:	f001 f81c 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <Read_Rotary+0x158>
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <Read_Rotary+0x178>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	801a      	strh	r2, [r3, #0]
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	20000308 	.word	0x20000308
 8000bc0:	20000300 	.word	0x20000300
 8000bc4:	2000000c 	.word	0x2000000c
 8000bc8:	2000030c 	.word	0x2000030c
 8000bcc:	20000310 	.word	0x20000310
 8000bd0:	200002fc 	.word	0x200002fc
 8000bd4:	20000304 	.word	0x20000304
 8000bd8:	0800cbc0 	.word	0x0800cbc0
 8000bdc:	48000c00 	.word	0x48000c00

08000be0 <LL_AHB2_GRP1_EnableClock>:
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8000bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <LL_APB2_GRP1_EnableClock>:
 8000c12:	b480      	push	{r7}
 8000c14:	b085      	sub	sp, #20
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	660b      	str	r3, [r1, #96]	; 0x60
 8000c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4013      	ands	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <HAL_MspInit>:
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <HAL_TIM_Base_MspInit>:
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <HAL_TIM_Base_MspInit+0xac>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d137      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x82>
 8000c66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c6a:	f7ff ffd2 	bl	8000c12 <LL_APB2_GRP1_EnableClock>
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c70:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <HAL_TIM_Base_MspInit+0xb4>)
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c76:	2217      	movs	r2, #23
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9a:	619a      	str	r2, [r3, #24]
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
 8000ca8:	4816      	ldr	r0, [pc, #88]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000caa:	f000 fb53 	bl	8001354 <HAL_DMA_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_TIM_Base_MspInit+0x64>
 8000cb4:	f7ff fe30 	bl	8000918 <Error_Handler>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_TIM_Base_MspInit+0xb0>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6293      	str	r3, [r2, #40]	; 0x28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2019      	movs	r0, #25
 8000cca:	f000 fb0e 	bl	80012ea <HAL_NVIC_SetPriority>
 8000cce:	2019      	movs	r0, #25
 8000cd0:	f000 fb25 	bl	800131e <HAL_NVIC_EnableIRQ>
 8000cd4:	e010      	b.n	8000cf8 <HAL_TIM_Base_MspInit+0xa4>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_TIM_Base_MspInit+0xb8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d10b      	bne.n	8000cf8 <HAL_TIM_Base_MspInit+0xa4>
 8000ce0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ce4:	f7ff ff95 	bl	8000c12 <LL_APB2_GRP1_EnableClock>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2019      	movs	r0, #25
 8000cee:	f000 fafc 	bl	80012ea <HAL_NVIC_SetPriority>
 8000cf2:	2019      	movs	r0, #25
 8000cf4:	f000 fb13 	bl	800131e <HAL_NVIC_EnableIRQ>
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40012c00 	.word	0x40012c00
 8000d04:	2000026c 	.word	0x2000026c
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	40014400 	.word	0x40014400

08000d10 <HAL_TIM_MspPostInit>:
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_TIM_MspPostInit+0x54>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d114      	bne.n	8000d5c <HAL_TIM_MspPostInit+0x4c>
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff ff54 	bl	8000be0 <LL_AHB2_GRP1_EnableClock>
 8000d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	2302      	movs	r3, #2
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f000 fdd0 	bl	80018fc <HAL_GPIO_Init>
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40012c00 	.word	0x40012c00

08000d68 <NMI_Handler>:
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	f000 f992 	bl	80010dc <HAL_IncTick>
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DMA1_Channel1_IRQHandler>:
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA1_Channel1_IRQHandler+0x10>)
 8000dc2:	f000 fc49 	bl	8001658 <HAL_DMA_IRQHandler>
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000026c 	.word	0x2000026c

08000dd0 <USB_LP_IRQHandler>:
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <USB_LP_IRQHandler+0x10>)
 8000dd6:	f001 f82c 	bl	8001e32 <HAL_PCD_IRQHandler>
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200017fc 	.word	0x200017fc

08000de4 <TIM1_UP_TIM16_IRQHandler>:
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000dea:	f004 fdfb 	bl	80059e4 <HAL_TIM_IRQHandler>
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000df0:	f004 fdf8 	bl	80059e4 <HAL_TIM_IRQHandler>
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200001d4 	.word	0x200001d4
 8000dfc:	20000220 	.word	0x20000220

08000e00 <_read>:
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e00a      	b.n	8000e28 <_read+0x28>
 8000e12:	f3af 8000 	nop.w
 8000e16:	4601      	mov	r1, r0
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	b2ca      	uxtb	r2, r1
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbf0      	blt.n	8000e12 <_read+0x12>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_close>:
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_fstat>:
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	2300      	movs	r3, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_isatty>:
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_lseek>:
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	2300      	movs	r3, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_sbrk>:
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
 8000ed4:	f00a fe78 	bl	800bbc8 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20030000 	.word	0x20030000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000314 	.word	0x20000314
 8000f0c:	20001d20 	.word	0x20001d20

08000f10 <SystemInit>:
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <SystemInit+0x98>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <SystemInit+0x98>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f38:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <SystemInit+0x9c>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f5a:	f023 0305 	bic.w	r3, r3, #5
 8000f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <SystemInit+0xa0>)
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <SystemInit+0xa0>)
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	faf6fefb 	.word	0xfaf6fefb
 8000fb0:	22041000 	.word	0x22041000

08000fb4 <CopyDataInit>:
 8000fb4:	58d4      	ldr	r4, [r2, r3]
 8000fb6:	50c4      	str	r4, [r0, r3]
 8000fb8:	3304      	adds	r3, #4

08000fba <LoopCopyDataInit>:
 8000fba:	18c4      	adds	r4, r0, r3
 8000fbc:	428c      	cmp	r4, r1
 8000fbe:	d3f9      	bcc.n	8000fb4 <CopyDataInit>
 8000fc0:	4770      	bx	lr

08000fc2 <FillZerobss>:
 8000fc2:	6003      	str	r3, [r0, #0]
 8000fc4:	3004      	adds	r0, #4

08000fc6 <LoopFillZerobss>:
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>
 8000fca:	4770      	bx	lr

08000fcc <Reset_Handler>:
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <LoopForever+0x2>)
 8000fce:	4685      	mov	sp, r0
 8000fd0:	f7ff ff9e 	bl	8000f10 <SystemInit>
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <LoopForever+0x6>)
 8000fd6:	490c      	ldr	r1, [pc, #48]	; (8001008 <LoopForever+0xa>)
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <LoopForever+0xe>)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f7ff ffed 	bl	8000fba <LoopCopyDataInit>
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopForever+0x12>)
 8000fe2:	490c      	ldr	r1, [pc, #48]	; (8001014 <LoopForever+0x16>)
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <LoopForever+0x1a>)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f7ff ffe7 	bl	8000fba <LoopCopyDataInit>
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <LoopForever+0x1e>)
 8000fee:	490c      	ldr	r1, [pc, #48]	; (8001020 <LoopForever+0x22>)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f7ff ffe8 	bl	8000fc6 <LoopFillZerobss>
 8000ff6:	f00a fded 	bl	800bbd4 <__libc_init_array>
 8000ffa:	f7ff fa8b 	bl	8000514 <main>

08000ffe <LoopForever>:
 8000ffe:	e7fe      	b.n	8000ffe <LoopForever>
 8001000:	20030000 	.word	0x20030000
 8001004:	20000008 	.word	0x20000008
 8001008:	200001b0 	.word	0x200001b0
 800100c:	0800cd68 	.word	0x0800cd68
 8001010:	20030000 	.word	0x20030000
 8001014:	20030000 	.word	0x20030000
 8001018:	0800cf10 	.word	0x0800cf10
 800101c:	200001b0 	.word	0x200001b0
 8001020:	20001d20 	.word	0x20001d20

08001024 <ADC1_IRQHandler>:
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>
	...

08001028 <HAL_Init>:
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_Init+0x3c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_Init+0x3c>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f948 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>
 8001044:	200f      	movs	r0, #15
 8001046:	f000 f80f 	bl	8001068 <HAL_InitTick>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_Init+0x2e>
 8001050:	2301      	movs	r3, #1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	e001      	b.n	800105a <HAL_Init+0x32>
 8001056:	f7ff fdf5 	bl	8000c44 <HAL_MspInit>
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58004000 	.word	0x58004000

08001068 <HAL_InitTick>:
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_InitTick+0x6c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d024      	beq.n	80010c6 <HAL_InitTick+0x5e>
 800107c:	f003 fbd0 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8001080:	4602      	mov	r2, r0
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_InitTick+0x6c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001090:	fbb2 f3f3 	udiv	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f950 	bl	800133a <HAL_SYSTICK_Config>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10f      	bne.n	80010c0 <HAL_InitTick+0x58>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	d809      	bhi.n	80010ba <HAL_InitTick+0x52>
 80010a6:	2200      	movs	r2, #0
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	f04f 30ff 	mov.w	r0, #4294967295
 80010ae:	f000 f91c 	bl	80012ea <HAL_NVIC_SetPriority>
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_InitTick+0x70>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e007      	b.n	80010ca <HAL_InitTick+0x62>
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e004      	b.n	80010ca <HAL_InitTick+0x62>
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e001      	b.n	80010ca <HAL_InitTick+0x62>
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000054 	.word	0x20000054
 80010d8:	20000050 	.word	0x20000050

080010dc <HAL_IncTick>:
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000054 	.word	0x20000054
 8001100:	20000318 	.word	0x20000318

08001104 <HAL_GetTick>:
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000318 	.word	0x20000318

0800111c <HAL_GetTickPrio>:
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTickPrio+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000050 	.word	0x20000050

08001134 <__NVIC_SetPriorityGrouping>:
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
 8001280:	4313      	orrs	r3, r2
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	f7ff ff40 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff33 	bl	8001198 <__NVIC_EnableIRQ>
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa4 	bl	8001290 <SysTick_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_DMA_Init>:
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_DMA_Init+0x12>
 8001362:	2301      	movs	r3, #1
 8001364:	e08e      	b.n	8001484 <HAL_DMA_Init+0x130>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_DMA_Init+0x138>)
 800136e:	429a      	cmp	r2, r3
 8001370:	d80f      	bhi.n	8001392 <HAL_DMA_Init+0x3e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <HAL_DMA_Init+0x13c>)
 800137a:	4413      	add	r3, r2
 800137c:	4a45      	ldr	r2, [pc, #276]	; (8001494 <HAL_DMA_Init+0x140>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	009a      	lsls	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	645a      	str	r2, [r3, #68]	; 0x44
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a42      	ldr	r2, [pc, #264]	; (8001498 <HAL_DMA_Init+0x144>)
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
 8001390:	e00e      	b.n	80013b0 <HAL_DMA_Init+0x5c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_DMA_Init+0x148>)
 800139a:	4413      	add	r3, r2
 800139c:	4a3d      	ldr	r2, [pc, #244]	; (8001494 <HAL_DMA_Init+0x140>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	009a      	lsls	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_DMA_Init+0x14c>)
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fa16 	bl	8001834 <DMA_CalcDMAMUXChannelBaseAndMask>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001410:	d102      	bne.n	8001418 <HAL_DMA_Init+0xc4>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001420:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <HAL_DMA_Init+0x106>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b04      	cmp	r3, #4
 800143e:	d80c      	bhi.n	800145a <HAL_DMA_Init+0x106>
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fa35 	bl	80018b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	e008      	b.n	800146c <HAL_DMA_Init+0x118>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	655a      	str	r2, [r3, #84]	; 0x54
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	659a      	str	r2, [r3, #88]	; 0x58
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	65da      	str	r2, [r3, #92]	; 0x5c
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001482:	2300      	movs	r3, #0
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020407 	.word	0x40020407
 8001490:	bffdfff8 	.word	0xbffdfff8
 8001494:	cccccccd 	.word	0xcccccccd
 8001498:	40020000 	.word	0x40020000
 800149c:	bffdfbf8 	.word	0xbffdfbf8
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_DMA_Start_IT>:
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_DMA_Start_IT+0x20>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e066      	b.n	8001592 <HAL_DMA_Start_IT+0xee>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d155      	bne.n	8001584 <HAL_DMA_Start_IT+0xe0>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 f95a 	bl	80017b6 <DMA_SetConfig>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_DMA_Start_IT+0x78>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 020e 	orr.w	r2, r2, #14
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e00f      	b.n	800153c <HAL_DMA_Start_IT+0x98>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 020a 	orr.w	r2, r2, #10
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_DMA_Start_IT+0xb6>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_DMA_Start_IT+0xce>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e005      	b.n	8001590 <HAL_DMA_Start_IT+0xec>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800158c:	2302      	movs	r3, #2
 800158e:	75fb      	strb	r3, [r7, #23]
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_DMA_Abort_IT>:
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d005      	beq.n	80015be <HAL_DMA_Abort_IT+0x24>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2204      	movs	r2, #4
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e047      	b.n	800164e <HAL_DMA_Abort_IT+0xb4>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 020e 	bic.w	r2, r2, #14
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0201 	bic.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 021c 	and.w	r2, r3, #28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00c      	beq.n	800162e <HAL_DMA_Abort_IT+0x94>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_DMA_Abort_IT+0xb4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_DMA_IRQHandler>:
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f003 031c 	and.w	r3, r3, #28
 8001678:	2204      	movs	r2, #4
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d026      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x7a>
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d021      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x7a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <HAL_DMA_IRQHandler+0x54>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0204 	bic.w	r2, r2, #4
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	f003 021c 	and.w	r2, r3, #28
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	2104      	movs	r1, #4
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d071      	beq.n	80017ac <HAL_DMA_IRQHandler+0x154>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
 80016d0:	e06c      	b.n	80017ac <HAL_DMA_IRQHandler+0x154>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f003 031c 	and.w	r3, r3, #28
 80016da:	2202      	movs	r2, #2
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d02e      	beq.n	8001744 <HAL_DMA_IRQHandler+0xec>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d029      	beq.n	8001744 <HAL_DMA_IRQHandler+0xec>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <HAL_DMA_IRQHandler+0xbe>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 020a 	bic.w	r2, r2, #10
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f003 021c 	and.w	r2, r3, #28
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2102      	movs	r1, #2
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	2b00      	cmp	r3, #0
 8001738:	d038      	beq.n	80017ac <HAL_DMA_IRQHandler+0x154>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
 8001742:	e033      	b.n	80017ac <HAL_DMA_IRQHandler+0x154>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	f003 031c 	and.w	r3, r3, #28
 800174c:	2208      	movs	r2, #8
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d02a      	beq.n	80017ae <HAL_DMA_IRQHandler+0x156>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d025      	beq.n	80017ae <HAL_DMA_IRQHandler+0x156>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 020e 	bic.w	r2, r2, #14
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f003 021c 	and.w	r2, r3, #28
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_DMA_IRQHandler+0x156>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <DMA_SetConfig>:
 80017b6:	b480      	push	{r7}
 80017b8:	b085      	sub	sp, #20
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <DMA_SetConfig+0x2a>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	f003 021c 	and.w	r2, r3, #28
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b10      	cmp	r3, #16
 8001802:	d108      	bne.n	8001816 <DMA_SetConfig+0x60>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	e007      	b.n	8001826 <DMA_SetConfig+0x70>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <DMA_CalcDMAMUXChannelBaseAndMask>:
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001844:	429a      	cmp	r2, r3
 8001846:	d80a      	bhi.n	800185e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001854:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6493      	str	r3, [r2, #72]	; 0x48
 800185c:	e007      	b.n	800186e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	009a      	lsls	r2, r3, #2
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001868:	4413      	add	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6493      	str	r3, [r2, #72]	; 0x48
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	3b08      	subs	r3, #8
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001884:	64da      	str	r2, [r3, #76]	; 0x4c
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2201      	movs	r2, #1
 800188e:	409a      	lsls	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	651a      	str	r2, [r3, #80]	; 0x50
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40020407 	.word	0x40020407
 80018a4:	4002081c 	.word	0x4002081c
 80018a8:	cccccccd 	.word	0xcccccccd
 80018ac:	40020880 	.word	0x40020880

080018b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80018d4:	659a      	str	r2, [r3, #88]	; 0x58
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3b01      	subs	r3, #1
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2201      	movs	r2, #1
 80018e0:	409a      	lsls	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	1000823f 	.word	0x1000823f
 80018f8:	40020940 	.word	0x40020940

080018fc <HAL_GPIO_Init>:
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e14c      	b.n	8001ba6 <HAL_GPIO_Init+0x2aa>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 813e 	beq.w	8001ba0 <HAL_GPIO_Init+0x2a4>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 0201 	and.w	r2, r3, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d017      	beq.n	80019da <HAL_GPIO_Init+0xde>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x132>
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	6939      	ldr	r1, [r7, #16]
 8001a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0203 	and.w	r2, r3, #3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8098 	beq.w	8001ba0 <HAL_GPIO_Init+0x2a4>
 8001a70:	4a54      	ldr	r2, [pc, #336]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a9a:	d019      	beq.n	8001ad0 <HAL_GPIO_Init+0x1d4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a4a      	ldr	r2, [pc, #296]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <HAL_GPIO_Init+0x1d0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a49      	ldr	r2, [pc, #292]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1cc>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a48      	ldr	r2, [pc, #288]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1c8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a47      	ldr	r2, [pc, #284]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1c4>
 8001abc:	2304      	movs	r3, #4
 8001abe:	e008      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	e006      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e004      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	f002 0203 	and.w	r2, r2, #3
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	4093      	lsls	r3, r2
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4938      	ldr	r1, [pc, #224]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x218>
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x242>
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6053      	str	r3, [r2, #4]
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x26e>
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x29c>
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f47f aeab 	bne.w	800190c <HAL_GPIO_Init+0x10>
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48000800 	.word	0x48000800
 8001bd0:	48000c00 	.word	0x48000c00
 8001bd4:	48001000 	.word	0x48001000
 8001bd8:	58000800 	.word	0x58000800

08001bdc <HAL_GPIO_ReadPin>:
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_GPIO_ReadPin+0x1e>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_ReadPin+0x22>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_GPIO_WritePin>:
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
 8001c1c:	787b      	ldrb	r3, [r7, #1]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_WritePin+0x1e>
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]
 8001c28:	e002      	b.n	8001c30 <HAL_GPIO_WritePin+0x24>
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_PCD_Init>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	b08b      	sub	sp, #44	; 0x2c
 8001c40:	af06      	add	r7, sp, #24
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_PCD_Init+0x12>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0cb      	b.n	8001de6 <HAL_PCD_Init+0x1aa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_PCD_Init+0x2c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f009 fc86 	bl	800b574 <HAL_PCD_MspInit>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 ff7e 	bl	8006b76 <USB_DisableGlobalInt>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	e040      	b.n	8001d02 <HAL_PCD_Init+0xc6>
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	3301      	adds	r3, #1
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	3303      	adds	r3, #3
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	3338      	adds	r3, #56	; 0x38
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	333c      	adds	r3, #60	; 0x3c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3340      	adds	r3, #64	; 0x40
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3b9      	bcc.n	8001c80 <HAL_PCD_Init+0x44>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e044      	b.n	8001d9c <HAL_PCD_Init+0x160>
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d3b5      	bcc.n	8001d12 <HAL_PCD_Init+0xd6>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	687e      	ldr	r6, [r7, #4]
 8001dae:	466d      	mov	r5, sp
 8001db0:	f106 0410 	add.w	r4, r6, #16
 8001db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	602b      	str	r3, [r5, #0]
 8001dbc:	1d33      	adds	r3, r6, #4
 8001dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f004 fef3 	bl	8006bac <USB_DevInit>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_PCD_Init+0x1a8>
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f001 fc45 	bl	800366e <HAL_PCDEx_ActivateLPM>
 8001de4:	2300      	movs	r3, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dee <HAL_PCD_Start>:
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_PCD_Start+0x16>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e012      	b.n	8001e2a <HAL_PCD_Start+0x3c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fe99 	bl	8006b48 <USB_EnableGlobalInt>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f007 f95d 	bl	80090da <USB_DevConnect>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_IRQHandler>:
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f007 f962 	bl	8009108 <USB_ReadInterrupts>
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x26>
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb05 	bl	8002460 <PCD_EP_ISR_Handler>
 8001e56:	e110      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d013      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x58>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e74:	b292      	uxth	r2, r2
 8001e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f009 fc2d 	bl	800b6da <HAL_PCD_ResetCallback>
 8001e80:	2100      	movs	r1, #0
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8fc 	bl	8002080 <HAL_PCD_SetAddress>
 8001e88:	e0f7      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00c      	beq.n	8001eae <HAL_PCD_IRQHandler+0x7c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001eac:	e0e5      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0xa0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001ed0:	e0d3      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d034      	beq.n	8001f46 <HAL_PCD_IRQHandler+0x114>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0208 	bic.w	r2, r2, #8
 8001f06:	b292      	uxth	r2, r2
 8001f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_PCD_IRQHandler+0xf4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f009 fdd1 	bl	800bac8 <HAL_PCDEx_LPM_Callback>
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f009 fc10 	bl	800b74c <HAL_PCD_ResumeCallback>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001f44:	e099      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d027      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x16e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0208 	orr.w	r2, r2, #8
 8001f62:	b292      	uxth	r2, r2
 8001f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0204 	orr.w	r2, r2, #4
 8001f92:	b292      	uxth	r2, r2
 8001f94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f009 fbbd 	bl	800b718 <HAL_PCD_SuspendCallback>
 8001f9e:	e06c      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_PCD_IRQHandler+0x1fa>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d12b      	bne.n	8002024 <HAL_PCD_IRQHandler+0x1f2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0204 	orr.w	r2, r2, #4
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800200c:	b29b      	uxth	r3, r3
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 800201a:	2101      	movs	r1, #1
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f009 fd53 	bl	800bac8 <HAL_PCDEx_LPM_Callback>
 8002022:	e02a      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f009 fb77 	bl	800b718 <HAL_PCD_SuspendCallback>
 800202a:	e026      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00f      	beq.n	8002056 <HAL_PCD_IRQHandler+0x224>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800203e:	b29a      	uxth	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002048:	b292      	uxth	r2, r2
 800204a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f009 fb35 	bl	800b6be <HAL_PCD_SOFCallback>
 8002054:	e011      	b.n	800207a <HAL_PCD_IRQHandler+0x248>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00c      	beq.n	800207a <HAL_PCD_IRQHandler+0x248>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002072:	b292      	uxth	r2, r2
 8002074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_PCD_SetAddress>:
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_PCD_SetAddress+0x1a>
 8002096:	2302      	movs	r3, #2
 8002098:	e013      	b.n	80020c2 <HAL_PCD_SetAddress+0x42>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f006 fffd 	bl	80090b2 <USB_SetDevAddress>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80020c0:	2300      	movs	r3, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_PCD_EP_Open>:
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	4608      	mov	r0, r1
 80020d4:	4611      	mov	r1, r2
 80020d6:	461a      	mov	r2, r3
 80020d8:	4603      	mov	r3, r0
 80020da:	70fb      	strb	r3, [r7, #3]
 80020dc:	460b      	mov	r3, r1
 80020de:	803b      	strh	r3, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	70bb      	strb	r3, [r7, #2]
 80020e4:	2300      	movs	r3, #0
 80020e6:	72fb      	strb	r3, [r7, #11]
 80020e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da0e      	bge.n	800210e <HAL_PCD_EP_Open+0x44>
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	705a      	strb	r2, [r3, #1]
 800210c:	e00e      	b.n	800212c <HAL_PCD_EP_Open+0x62>
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 0207 	and.w	r2, r3, #7
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	705a      	strb	r2, [r3, #1]
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	883a      	ldrh	r2, [r7, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	78ba      	ldrb	r2, [r7, #2]
 8002142:	70da      	strb	r2, [r3, #3]
 8002144:	78bb      	ldrb	r3, [r7, #2]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d102      	bne.n	8002150 <HAL_PCD_EP_Open+0x86>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	711a      	strb	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_PCD_EP_Open+0x94>
 800215a:	2302      	movs	r3, #2
 800215c:	e00e      	b.n	800217c <HAL_PCD_EP_Open+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68f9      	ldr	r1, [r7, #12]
 800216c:	4618      	mov	r0, r3
 800216e:	f004 fd3f 	bl	8006bf0 <USB_ActivateEndpoint>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800217a:	7afb      	ldrb	r3, [r7, #11]
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_EP_Close>:
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
 8002190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002194:	2b00      	cmp	r3, #0
 8002196:	da0e      	bge.n	80021b6 <HAL_PCD_EP_Close+0x32>
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	705a      	strb	r2, [r3, #1]
 80021b4:	e00e      	b.n	80021d4 <HAL_PCD_EP_Close+0x50>
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 0207 	and.w	r2, r3, #7
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	705a      	strb	r2, [r3, #1]
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_PCD_EP_Close+0x6a>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e00e      	b.n	800220c <HAL_PCD_EP_Close+0x88>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f005 f8bb 	bl	8007378 <USB_DeactivateEndpoint>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800220a:	2300      	movs	r3, #0
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_Receive>:
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	460b      	mov	r3, r1
 8002222:	72fb      	strb	r3, [r7, #11]
 8002224:	7afb      	ldrb	r3, [r7, #11]
 8002226:	f003 0207 	and.w	r2, r3, #7
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	615a      	str	r2, [r3, #20]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	619a      	str	r2, [r3, #24]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	705a      	strb	r2, [r3, #1]
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	b2da      	uxtb	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	4618      	mov	r0, r3
 8002268:	f005 fa73 	bl	8007752 <USB_EPStartXfer>
 800226c:	2300      	movs	r3, #0
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_PCD_EP_GetRxCount>:
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 0207 	and.w	r2, r3, #7
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_PCD_EP_Transmit>:
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	460b      	mov	r3, r1
 80022b4:	72fb      	strb	r3, [r7, #11]
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	619a      	str	r2, [r3, #24]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	621a      	str	r2, [r3, #32]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2201      	movs	r2, #1
 80022f0:	705a      	strb	r2, [r3, #1]
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	4618      	mov	r0, r3
 8002306:	f005 fa24 	bl	8007752 <USB_EPStartXfer>
 800230a:	2300      	movs	r3, #0
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_PCD_EP_SetStall>:
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 0207 	and.w	r2, r3, #7
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	429a      	cmp	r2, r3
 800232c:	d901      	bls.n	8002332 <HAL_PCD_EP_SetStall+0x1e>
 800232e:	2301      	movs	r3, #1
 8002330:	e03e      	b.n	80023b0 <HAL_PCD_EP_SetStall+0x9c>
 8002332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	da0e      	bge.n	8002358 <HAL_PCD_EP_SetStall+0x44>
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	705a      	strb	r2, [r3, #1]
 8002356:	e00c      	b.n	8002372 <HAL_PCD_EP_SetStall+0x5e>
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	705a      	strb	r2, [r3, #1]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	709a      	strb	r2, [r3, #2]
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	b2da      	uxtb	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_PCD_EP_SetStall+0x7e>
 800238e:	2302      	movs	r3, #2
 8002390:	e00e      	b.n	80023b0 <HAL_PCD_EP_SetStall+0x9c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f006 fd87 	bl	8008eb4 <USB_EPSetStall>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80023ae:	2300      	movs	r3, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_PCD_EP_ClrStall>:
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d901      	bls.n	80023d6 <HAL_PCD_EP_ClrStall+0x1e>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e040      	b.n	8002458 <HAL_PCD_EP_ClrStall+0xa0>
 80023d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da0e      	bge.n	80023fc <HAL_PCD_EP_ClrStall+0x44>
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	705a      	strb	r2, [r3, #1]
 80023fa:	e00e      	b.n	800241a <HAL_PCD_EP_ClrStall+0x62>
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 0207 	and.w	r2, r3, #7
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	705a      	strb	r2, [r3, #1]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	709a      	strb	r2, [r3, #2]
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	b2da      	uxtb	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_PCD_EP_ClrStall+0x82>
 8002436:	2302      	movs	r3, #2
 8002438:	e00e      	b.n	8002458 <HAL_PCD_EP_ClrStall+0xa0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	4618      	mov	r0, r3
 800244a:	f006 fd84 	bl	8008f56 <USB_EPClearStall>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8002456:	2300      	movs	r3, #0
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <PCD_EP_ISR_Handler>:
 8002460:	b580      	push	{r7, lr}
 8002462:	b096      	sub	sp, #88	; 0x58
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	e3b1      	b.n	8002bce <PCD_EP_ISR_Handler+0x76e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002472:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002484:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 8173 	bne.w	8002774 <PCD_EP_ISR_Handler+0x314>
 800248e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d150      	bne.n	800253c <PCD_EP_ISR_Handler+0xdc>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	81fb      	strh	r3, [r7, #14]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3328      	adds	r3, #40	; 0x28
 80024c2:	657b      	str	r3, [r7, #84]	; 0x54
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ea:	61da      	str	r2, [r3, #28]
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	441a      	add	r2, r3
 80024f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f009 f8c4 	bl	800b68a <HAL_PCD_DataInStageCallback>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 835f 	beq.w	8002bce <PCD_EP_ISR_Handler+0x76e>
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 835a 	bne.w	8002bce <PCD_EP_ISR_Handler+0x76e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002526:	b2da      	uxtb	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b292      	uxth	r2, r2
 800252e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800253a:	e348      	b.n	8002bce <PCD_EP_ISR_Handler+0x76e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002542:	657b      	str	r3, [r7, #84]	; 0x54
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800254e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	2b00      	cmp	r3, #0
 8002558:	d032      	beq.n	80025c0 <PCD_EP_ISR_Handler+0x160>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	4413      	add	r3, r2
 8002574:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002580:	61da      	str	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	88da      	ldrh	r2, [r3, #6]
 8002590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f006 fe09 	bl	80091ac <USB_ReadPMA>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a6:	4013      	ands	r3, r2
 80025a8:	823b      	strh	r3, [r7, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	8a3a      	ldrh	r2, [r7, #16]
 80025b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b4:	b292      	uxth	r2, r2
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f009 f839 	bl	800b630 <HAL_PCD_SetupStageCallback>
 80025be:	e306      	b.n	8002bce <PCD_EP_ISR_Handler+0x76e>
 80025c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f280 8302 	bge.w	8002bce <PCD_EP_ISR_Handler+0x76e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d6:	4013      	ands	r3, r2
 80025d8:	83fb      	strh	r3, [r7, #30]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	8bfa      	ldrh	r2, [r7, #30]
 80025e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e4:	b292      	uxth	r2, r2
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4413      	add	r3, r2
 8002602:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260e:	61da      	str	r2, [r3, #28]
 8002610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d019      	beq.n	800264c <PCD_EP_ISR_Handler+0x1ec>
 8002618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <PCD_EP_ISR_Handler+0x1ec>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	6959      	ldr	r1, [r3, #20]
 8002628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262a:	88da      	ldrh	r2, [r3, #6]
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f006 fdbb 	bl	80091ac <USB_ReadPMA>
 8002636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	441a      	add	r2, r3
 8002640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002642:	615a      	str	r2, [r3, #20]
 8002644:	2100      	movs	r1, #0
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f009 f804 	bl	800b654 <HAL_PCD_DataOutStageCallback>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002656:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800265a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 82b5 	bne.w	8002bce <PCD_EP_ISR_Handler+0x76e>
 8002664:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002668:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800266c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002670:	f000 82ad 	beq.w	8002bce <PCD_EP_ISR_Handler+0x76e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4413      	add	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269e:	b29a      	uxth	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b3e      	cmp	r3, #62	; 0x3e
 80026aa:	d91d      	bls.n	80026e8 <PCD_EP_ISR_Handler+0x288>
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <PCD_EP_ISR_Handler+0x266>
 80026c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c2:	3b01      	subs	r3, #1
 80026c4:	647b      	str	r3, [r7, #68]	; 0x44
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	e026      	b.n	8002736 <PCD_EP_ISR_Handler+0x2d6>
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <PCD_EP_ISR_Handler+0x2a6>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e017      	b.n	8002736 <PCD_EP_ISR_Handler+0x2d6>
 8002706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <PCD_EP_ISR_Handler+0x2c0>
 800271a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271c:	3301      	adds	r3, #1
 800271e:	647b      	str	r3, [r7, #68]	; 0x44
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29a      	uxth	r2, r3
 8002726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002728:	b29b      	uxth	r3, r3
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	b29b      	uxth	r3, r3
 800272e:	4313      	orrs	r3, r2
 8002730:	b29a      	uxth	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	827b      	strh	r3, [r7, #18]
 8002748:	8a7b      	ldrh	r3, [r7, #18]
 800274a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800274e:	827b      	strh	r3, [r7, #18]
 8002750:	8a7b      	ldrh	r3, [r7, #18]
 8002752:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002756:	827b      	strh	r3, [r7, #18]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	8a7b      	ldrh	r3, [r7, #18]
 800275e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276e:	b29b      	uxth	r3, r3
 8002770:	8013      	strh	r3, [r2, #0]
 8002772:	e22c      	b.n	8002bce <PCD_EP_ISR_Handler+0x76e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002788:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800278c:	2b00      	cmp	r3, #0
 800278e:	f280 80f6 	bge.w	800297e <PCD_EP_ISR_Handler+0x51e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027a8:	4013      	ands	r3, r2
 80027aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80027c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027c4:	b292      	uxth	r2, r2
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	657b      	str	r3, [r7, #84]	; 0x54
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	7b1b      	ldrb	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d123      	bne.n	800282e <PCD_EP_ISR_Handler+0x3ce>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800280e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 808e 	beq.w	8002934 <PCD_EP_ISR_Handler+0x4d4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281e:	6959      	ldr	r1, [r3, #20]
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	88da      	ldrh	r2, [r3, #6]
 8002824:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002828:	f006 fcc0 	bl	80091ac <USB_ReadPMA>
 800282c:	e082      	b.n	8002934 <PCD_EP_ISR_Handler+0x4d4>
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	78db      	ldrb	r3, [r3, #3]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d10a      	bne.n	800284c <PCD_EP_ISR_Handler+0x3ec>
 8002836:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800283a:	461a      	mov	r2, r3
 800283c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f9d3 	bl	8002bea <HAL_PCD_EP_DB_Receive>
 8002844:	4603      	mov	r3, r0
 8002846:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800284a:	e073      	b.n	8002934 <PCD_EP_ISR_Handler+0x4d4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	441a      	add	r2, r3
 8002878:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800287c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800288c:	b29b      	uxth	r3, r3
 800288e:	8013      	strh	r3, [r2, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d022      	beq.n	80028f0 <PCD_EP_ISR_Handler+0x490>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80028d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d02c      	beq.n	8002934 <PCD_EP_ISR_Handler+0x4d4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e0:	6959      	ldr	r1, [r3, #20]
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	891a      	ldrh	r2, [r3, #8]
 80028e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ea:	f006 fc5f 	bl	80091ac <USB_ReadPMA>
 80028ee:	e021      	b.n	8002934 <PCD_EP_ISR_Handler+0x4d4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	4413      	add	r3, r2
 800290a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002914:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002918:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <PCD_EP_ISR_Handler+0x4d4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	6959      	ldr	r1, [r3, #20]
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	895a      	ldrh	r2, [r3, #10]
 800292c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002930:	f006 fc3c 	bl	80091ac <USB_ReadPMA>
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800293c:	441a      	add	r2, r3
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	61da      	str	r2, [r3, #28]
 8002942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800294a:	441a      	add	r2, r3
 800294c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294e:	615a      	str	r2, [r3, #20]
 8002950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <PCD_EP_ISR_Handler+0x504>
 8002958:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800295c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d206      	bcs.n	8002972 <PCD_EP_ISR_Handler+0x512>
 8002964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f008 fe72 	bl	800b654 <HAL_PCD_DataOutStageCallback>
 8002970:	e005      	b.n	800297e <PCD_EP_ISR_Handler+0x51e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002978:	4618      	mov	r0, r3
 800297a:	f004 feea 	bl	8007752 <USB_EPStartXfer>
 800297e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8121 	beq.w	8002bce <PCD_EP_ISR_Handler+0x76e>
 800298c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	657b      	str	r3, [r7, #84]	; 0x54
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	441a      	add	r2, r3
 80029cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8013      	strh	r3, [r2, #0]
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	78db      	ldrb	r3, [r3, #3]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	f040 80a2 	bne.w	8002b2a <PCD_EP_ISR_Handler+0x6ca>
 80029e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ee:	7b1b      	ldrb	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8093 	beq.w	8002b1c <PCD_EP_ISR_Handler+0x6bc>
 80029f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d046      	beq.n	8002a90 <PCD_EP_ISR_Handler+0x630>
 8002a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d126      	bne.n	8002a58 <PCD_EP_ISR_Handler+0x5f8>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	4413      	add	r3, r2
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	00da      	lsls	r2, r3, #3
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	e061      	b.n	8002b1c <PCD_EP_ISR_Handler+0x6bc>
 8002a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d15d      	bne.n	8002b1c <PCD_EP_ISR_Handler+0x6bc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	4413      	add	r3, r2
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	00da      	lsls	r2, r3, #3
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	4413      	add	r3, r2
 8002a82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	801a      	strh	r2, [r3, #0]
 8002a8e:	e045      	b.n	8002b1c <PCD_EP_ISR_Handler+0x6bc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d126      	bne.n	8002aec <PCD_EP_ISR_Handler+0x68c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	4413      	add	r3, r2
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	00da      	lsls	r2, r3, #3
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	4413      	add	r3, r2
 8002ac0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e017      	b.n	8002b1c <PCD_EP_ISR_Handler+0x6bc>
 8002aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d113      	bne.n	8002b1c <PCD_EP_ISR_Handler+0x6bc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b02:	4413      	add	r3, r2
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	00da      	lsls	r2, r3, #3
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	4413      	add	r3, r2
 8002b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	2200      	movs	r2, #0
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f008 fdb1 	bl	800b68a <HAL_PCD_DataInStageCallback>
 8002b28:	e051      	b.n	8002bce <PCD_EP_ISR_Handler+0x76e>
 8002b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d144      	bne.n	8002bc0 <PCD_EP_ISR_Handler+0x760>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d907      	bls.n	8002b7a <PCD_EP_ISR_Handler+0x71a>
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	619a      	str	r2, [r3, #24]
 8002b78:	e002      	b.n	8002b80 <PCD_EP_ISR_Handler+0x720>
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <PCD_EP_ISR_Handler+0x736>
 8002b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f008 fd7b 	bl	800b68a <HAL_PCD_DataInStageCallback>
 8002b94:	e01b      	b.n	8002bce <PCD_EP_ISR_Handler+0x76e>
 8002b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b9e:	441a      	add	r2, r3
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	615a      	str	r2, [r3, #20]
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bac:	441a      	add	r2, r3
 8002bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb0:	61da      	str	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fdca 	bl	8007752 <USB_EPStartXfer>
 8002bbe:	e006      	b.n	8002bce <PCD_EP_ISR_Handler+0x76e>
 8002bc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f917 	bl	8002dfc <HAL_PCD_EP_DB_Transmit>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f6ff ac45 	blt.w	800246a <PCD_EP_ISR_Handler+0xa>
 8002be0:	2300      	movs	r3, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	3758      	adds	r7, #88	; 0x58
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_PCD_EP_DB_Receive>:
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b088      	sub	sp, #32
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	80fb      	strh	r3, [r7, #6]
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d07c      	beq.n	8002cfc <HAL_PCD_EP_DB_Receive+0x112>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c26:	837b      	strh	r3, [r7, #26]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	8b7b      	ldrh	r3, [r7, #26]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d306      	bcc.n	8002c40 <HAL_PCD_EP_DB_Receive+0x56>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	8b7b      	ldrh	r3, [r7, #26]
 8002c38:	1ad2      	subs	r2, r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	619a      	str	r2, [r3, #24]
 8002c3e:	e002      	b.n	8002c46 <HAL_PCD_EP_DB_Receive+0x5c>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d123      	bne.n	8002c96 <HAL_PCD_EP_DB_Receive+0xac>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	833b      	strh	r3, [r7, #24]
 8002c6a:	8b3b      	ldrh	r3, [r7, #24]
 8002c6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c70:	833b      	strh	r3, [r7, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	441a      	add	r2, r3
 8002c80:	8b3b      	ldrh	r3, [r7, #24]
 8002c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	8013      	strh	r3, [r2, #0]
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01f      	beq.n	8002ce0 <HAL_PCD_EP_DB_Receive+0xf6>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	82fb      	strh	r3, [r7, #22]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	8afb      	ldrh	r3, [r7, #22]
 8002ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	8013      	strh	r3, [r2, #0]
 8002ce0:	8b7b      	ldrh	r3, [r7, #26]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8085 	beq.w	8002df2 <HAL_PCD_EP_DB_Receive+0x208>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6959      	ldr	r1, [r3, #20]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	891a      	ldrh	r2, [r3, #8]
 8002cf4:	8b7b      	ldrh	r3, [r7, #26]
 8002cf6:	f006 fa59 	bl	80091ac <USB_ReadPMA>
 8002cfa:	e07a      	b.n	8002df2 <HAL_PCD_EP_DB_Receive+0x208>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d20:	837b      	strh	r3, [r7, #26]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	8b7b      	ldrh	r3, [r7, #26]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d306      	bcc.n	8002d3a <HAL_PCD_EP_DB_Receive+0x150>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	8b7b      	ldrh	r3, [r7, #26]
 8002d32:	1ad2      	subs	r2, r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	619a      	str	r2, [r3, #24]
 8002d38:	e002      	b.n	8002d40 <HAL_PCD_EP_DB_Receive+0x156>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d123      	bne.n	8002d90 <HAL_PCD_EP_DB_Receive+0x1a6>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	83fb      	strh	r3, [r7, #30]
 8002d64:	8bfb      	ldrh	r3, [r7, #30]
 8002d66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d6a:	83fb      	strh	r3, [r7, #30]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	8bfb      	ldrh	r3, [r7, #30]
 8002d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8013      	strh	r3, [r2, #0]
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11f      	bne.n	8002dda <HAL_PCD_EP_DB_Receive+0x1f0>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db4:	83bb      	strh	r3, [r7, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	441a      	add	r2, r3
 8002dc4:	8bbb      	ldrh	r3, [r7, #28]
 8002dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	8013      	strh	r3, [r2, #0]
 8002dda:	8b7b      	ldrh	r3, [r7, #26]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_PCD_EP_DB_Receive+0x208>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6959      	ldr	r1, [r3, #20]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	895a      	ldrh	r2, [r3, #10]
 8002dec:	8b7b      	ldrh	r3, [r7, #26]
 8002dee:	f006 f9dd 	bl	80091ac <USB_ReadPMA>
 8002df2:	8b7b      	ldrh	r3, [r7, #26]
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_DB_Transmit>:
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b0a4      	sub	sp, #144	; 0x90
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 81db 	beq.w	80031cc <HAL_PCD_EP_DB_Transmit+0x3d0>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d907      	bls.n	8002e5a <HAL_PCD_EP_DB_Transmit+0x5e>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e52:	1ad2      	subs	r2, r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	e002      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x64>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 80b9 	bne.w	8002fdc <HAL_PCD_EP_DB_Transmit+0x1e0>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d126      	bne.n	8002ec0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	4413      	add	r3, r2
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	00da      	lsls	r2, r3, #3
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	4413      	add	r3, r2
 8002e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	e01a      	b.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	785b      	ldrb	r3, [r3, #1]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d116      	bne.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	4413      	add	r3, r2
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	00da      	lsls	r2, r3, #3
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	4413      	add	r3, r2
 8002eea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	785b      	ldrb	r3, [r3, #1]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d126      	bne.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x156>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	00da      	lsls	r2, r3, #3
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	801a      	strh	r2, [r3, #0]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	801a      	strh	r2, [r3, #0]
 8002f50:	e017      	b.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d113      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	4413      	add	r3, r2
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	00da      	lsls	r2, r3, #3
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	4413      	add	r3, r2
 8002f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f7a:	623b      	str	r3, [r7, #32]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f008 fb7e 	bl	800b68a <HAL_PCD_DataInStageCallback>
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 82fa 	beq.w	800358e <HAL_PCD_EP_DB_Transmit+0x792>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	82fb      	strh	r3, [r7, #22]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	441a      	add	r2, r3
 8002fc4:	8afb      	ldrh	r3, [r7, #22]
 8002fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	8013      	strh	r3, [r2, #0]
 8002fda:	e2d8      	b.n	800358e <HAL_PCD_EP_DB_Transmit+0x792>
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d021      	beq.n	800302a <HAL_PCD_EP_DB_Transmit+0x22e>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003000:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 82ac 	bne.w	800358e <HAL_PCD_EP_DB_Transmit+0x792>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800303e:	441a      	add	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	615a      	str	r2, [r3, #20]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800304c:	441a      	add	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61da      	str	r2, [r3, #28]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d30b      	bcc.n	8003076 <HAL_PCD_EP_DB_Transmit+0x27a>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	621a      	str	r2, [r3, #32]
 8003074:	e017      	b.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x2aa>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_PCD_EP_DB_Transmit+0x294>
 800307e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800308e:	e00a      	b.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x2aa>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d165      	bne.n	800317a <HAL_PCD_EP_DB_Transmit+0x37e>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030bc:	b29b      	uxth	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	4413      	add	r3, r2
 80030c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	00da      	lsls	r2, r3, #3
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	4413      	add	r3, r2
 80030d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ea:	2b3e      	cmp	r3, #62	; 0x3e
 80030ec:	d91d      	bls.n	800312a <HAL_PCD_EP_DB_Transmit+0x32e>
 80030ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003104:	3b01      	subs	r3, #1
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29a      	uxth	r2, r3
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	b29b      	uxth	r3, r3
 8003112:	029b      	lsls	r3, r3, #10
 8003114:	b29b      	uxth	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b29b      	uxth	r3, r3
 800311a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003122:	b29a      	uxth	r2, r3
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	e044      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800312a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800313c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003140:	b29a      	uxth	r2, r3
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	e035      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_PCD_EP_DB_Transmit+0x366>
 800315c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315e:	3301      	adds	r3, #1
 8003160:	64bb      	str	r3, [r7, #72]	; 0x48
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29a      	uxth	r2, r3
 8003168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316a:	b29b      	uxth	r3, r3
 800316c:	029b      	lsls	r3, r3, #10
 800316e:	b29b      	uxth	r3, r3
 8003170:	4313      	orrs	r3, r2
 8003172:	b29a      	uxth	r2, r3
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	801a      	strh	r2, [r3, #0]
 8003178:	e01c      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d118      	bne.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003196:	4413      	add	r3, r2
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	00da      	lsls	r2, r3, #3
 80031a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a2:	4413      	add	r3, r2
 80031a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031a8:	643b      	str	r3, [r7, #64]	; 0x40
 80031aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6959      	ldr	r1, [r3, #20]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	891a      	ldrh	r2, [r3, #8]
 80031c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f005 ffaf 	bl	8009128 <USB_WritePMA>
 80031ca:	e1e0      	b.n	800358e <HAL_PCD_EP_DB_Transmit+0x792>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d307      	bcc.n	8003210 <HAL_PCD_EP_DB_Transmit+0x414>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003208:	1ad2      	subs	r2, r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	619a      	str	r2, [r3, #24]
 800320e:	e002      	b.n	8003216 <HAL_PCD_EP_DB_Transmit+0x41a>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 80c0 	bne.w	80033a0 <HAL_PCD_EP_DB_Transmit+0x5a4>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d126      	bne.n	8003276 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003236:	b29b      	uxth	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800323c:	4413      	add	r3, r2
 800323e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	00da      	lsls	r2, r3, #3
 8003246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003248:	4413      	add	r3, r2
 800324a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800324e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800325a:	b29a      	uxth	r2, r3
 800325c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325e:	801a      	strh	r2, [r3, #0]
 8003260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800326a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326e:	b29a      	uxth	r2, r3
 8003270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003272:	801a      	strh	r2, [r3, #0]
 8003274:	e01a      	b.n	80032ac <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d116      	bne.n	80032ac <HAL_PCD_EP_DB_Transmit+0x4b0>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	667b      	str	r3, [r7, #100]	; 0x64
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003292:	4413      	add	r3, r2
 8003294:	667b      	str	r3, [r7, #100]	; 0x64
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	00da      	lsls	r2, r3, #3
 800329c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329e:	4413      	add	r3, r2
 80032a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032a4:	663b      	str	r3, [r7, #96]	; 0x60
 80032a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a8:	2200      	movs	r2, #0
 80032aa:	801a      	strh	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	677b      	str	r3, [r7, #116]	; 0x74
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d12b      	bne.n	8003312 <HAL_PCD_EP_DB_Transmit+0x516>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ce:	4413      	add	r3, r2
 80032d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	00da      	lsls	r2, r3, #3
 80032d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032da:	4413      	add	r3, r2
 80032dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003308:	b29a      	uxth	r2, r3
 800330a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	e017      	b.n	8003342 <HAL_PCD_EP_DB_Transmit+0x546>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d113      	bne.n	8003342 <HAL_PCD_EP_DB_Transmit+0x546>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003328:	4413      	add	r3, r2
 800332a:	677b      	str	r3, [r7, #116]	; 0x74
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00da      	lsls	r2, r3, #3
 8003332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003334:	4413      	add	r3, r2
 8003336:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800333a:	673b      	str	r3, [r7, #112]	; 0x70
 800333c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333e:	2200      	movs	r2, #0
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f008 f99e 	bl	800b68a <HAL_PCD_DataInStageCallback>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 811a 	bne.w	800358e <HAL_PCD_EP_DB_Transmit+0x792>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003374:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	441a      	add	r2, r3
 8003386:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800338a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800338e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339a:	b29b      	uxth	r3, r3
 800339c:	8013      	strh	r3, [r2, #0]
 800339e:	e0f6      	b.n	800358e <HAL_PCD_EP_DB_Transmit+0x792>
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d121      	bne.n	80033ee <HAL_PCD_EP_DB_Transmit+0x5f2>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	8013      	strh	r3, [r2, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f040 80ca 	bne.w	800358e <HAL_PCD_EP_DB_Transmit+0x792>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003402:	441a      	add	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003410:	441a      	add	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	61da      	str	r2, [r3, #28]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d30b      	bcc.n	800343a <HAL_PCD_EP_DB_Transmit+0x63e>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003432:	1ad2      	subs	r2, r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	621a      	str	r2, [r3, #32]
 8003438:	e017      	b.n	800346a <HAL_PCD_EP_DB_Transmit+0x66e>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <HAL_PCD_EP_DB_Transmit+0x658>
 8003442:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003452:	e00a      	b.n	800346a <HAL_PCD_EP_DB_Transmit+0x66e>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	657b      	str	r3, [r7, #84]	; 0x54
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	785b      	ldrb	r3, [r3, #1]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d165      	bne.n	8003544 <HAL_PCD_EP_DB_Transmit+0x748>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348c:	4413      	add	r3, r2
 800348e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	00da      	lsls	r2, r3, #3
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	4413      	add	r3, r2
 800349a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800349e:	65bb      	str	r3, [r7, #88]	; 0x58
 80034a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ae:	801a      	strh	r2, [r3, #0]
 80034b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034b4:	2b3e      	cmp	r3, #62	; 0x3e
 80034b6:	d91d      	bls.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80034b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
 80034c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80034cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ce:	3b01      	subs	r3, #1
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034da:	b29b      	uxth	r3, r3
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4313      	orrs	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	e041      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x77c>
 80034f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <HAL_PCD_EP_DB_Transmit+0x716>
 80034fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800350a:	b29a      	uxth	r2, r3
 800350c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350e:	801a      	strh	r2, [r3, #0]
 8003510:	e032      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	66bb      	str	r3, [r7, #104]	; 0x68
 800351a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_PCD_EP_DB_Transmit+0x730>
 8003526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003528:	3301      	adds	r3, #1
 800352a:	66bb      	str	r3, [r7, #104]	; 0x68
 800352c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003534:	b29b      	uxth	r3, r3
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	b29b      	uxth	r3, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	b29a      	uxth	r2, r3
 800353e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	e019      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	785b      	ldrb	r3, [r3, #1]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d115      	bne.n	8003578 <HAL_PCD_EP_DB_Transmit+0x77c>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355a:	4413      	add	r3, r2
 800355c:	657b      	str	r3, [r7, #84]	; 0x54
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	00da      	lsls	r2, r3, #3
 8003564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003566:	4413      	add	r3, r2
 8003568:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800356c:	653b      	str	r3, [r7, #80]	; 0x50
 800356e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003572:	b29a      	uxth	r2, r3
 8003574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003576:	801a      	strh	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6959      	ldr	r1, [r3, #20]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	895a      	ldrh	r2, [r3, #10]
 8003584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003588:	b29b      	uxth	r3, r3
 800358a:	f005 fdcd 	bl	8009128 <USB_WritePMA>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a8:	82bb      	strh	r3, [r7, #20]
 80035aa:	8abb      	ldrh	r3, [r7, #20]
 80035ac:	f083 0310 	eor.w	r3, r3, #16
 80035b0:	82bb      	strh	r3, [r7, #20]
 80035b2:	8abb      	ldrh	r3, [r7, #20]
 80035b4:	f083 0320 	eor.w	r3, r3, #32
 80035b8:	82bb      	strh	r3, [r7, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	441a      	add	r2, r3
 80035c8:	8abb      	ldrh	r3, [r7, #20]
 80035ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035da:	b29b      	uxth	r3, r3
 80035dc:	8013      	strh	r3, [r2, #0]
 80035de:	2300      	movs	r3, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	3790      	adds	r7, #144	; 0x90
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_PCDEx_PMAConfig>:
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	4613      	mov	r3, r2
 80035f8:	813b      	strh	r3, [r7, #8]
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_PCDEx_PMAConfig+0x36>
 8003606:	897b      	ldrh	r3, [r7, #10]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e009      	b.n	8003632 <HAL_PCDEx_PMAConfig+0x4a>
 800361e:	897a      	ldrh	r2, [r7, #10]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_PCDEx_PMAConfig+0x60>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	731a      	strb	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	b29a      	uxth	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	80da      	strh	r2, [r3, #6]
 8003646:	e00b      	b.n	8003660 <HAL_PCDEx_PMAConfig+0x78>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2201      	movs	r2, #1
 800364c:	731a      	strb	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	b29a      	uxth	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	811a      	strh	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	b29a      	uxth	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	815a      	strh	r2, [r3, #10]
 8003660:	2300      	movs	r3, #0
 8003662:	4618      	mov	r0, r3
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_PCDEx_ActivateLPM>:
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003692:	b29b      	uxth	r3, r3
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80036b4:	2300      	movs	r3, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_PWR_EnableBkUpAccess>:
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	58000400 	.word	0x58000400

080036e4 <HAL_PWREx_GetVoltageRange>:
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_PWREx_GetVoltageRange+0x18>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	58000400 	.word	0x58000400

08003700 <HAL_PWREx_EnableVddUSB>:
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_PWREx_EnableVddUSB+0x1c>)
 800370a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370e:	6053      	str	r3, [r2, #4]
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	58000400 	.word	0x58000400

08003720 <LL_RCC_HSE_IsEnabledDiv2>:
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
 8003724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003732:	d101      	bne.n	8003738 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003738:	2300      	movs	r3, #0
 800373a:	4618      	mov	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_RCC_HSE_Enable>:
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_RCC_HSE_Disable>:
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_RCC_HSE_IsReady>:
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003792:	d101      	bne.n	8003798 <LL_RCC_HSE_IsReady+0x18>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <LL_RCC_HSE_IsReady+0x1a>
 8003798:	2300      	movs	r3, #0
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_HSI_Enable>:
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_RCC_HSI_Disable>:
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_RCC_HSI_IsReady>:
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f2:	d101      	bne.n	80037f8 <LL_RCC_HSI_IsReady+0x18>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <LL_RCC_HSI_IsReady+0x1a>
 80037f8:	2300      	movs	r3, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_RCC_HSI_SetCalibTrimming>:
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_RCC_HSI48_Enable>:
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800383a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <LL_RCC_HSI48_Disable>:
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
 8003854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800385c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_RCC_HSI48_IsReady>:
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	d101      	bne.n	800388a <LL_RCC_HSI48_IsReady+0x18>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_RCC_HSI48_IsReady+0x1a>
 800388a:	2300      	movs	r3, #0
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <LL_RCC_LSE_Enable>:
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_LSE_Disable>:
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_RCC_LSE_EnableBypass>:
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_RCC_LSE_DisableBypass>:
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
 8003900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_RCC_LSE_IsReady>:
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d101      	bne.n	8003936 <LL_RCC_LSE_IsReady+0x18>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <LL_RCC_LSE_IsReady+0x1a>
 8003936:	2300      	movs	r3, #0
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_RCC_LSI1_Enable>:
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_RCC_LSI1_Disable>:
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_RCC_LSI1_IsReady>:
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d101      	bne.n	800399e <LL_RCC_LSI1_IsReady+0x18>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <LL_RCC_LSI1_IsReady+0x1a>
 800399e:	2300      	movs	r3, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <LL_RCC_LSI2_Enable>:
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_RCC_LSI2_Disable>:
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_LSI2_IsReady>:
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d101      	bne.n	8003a06 <LL_RCC_LSI2_IsReady+0x18>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <LL_RCC_LSI2_IsReady+0x1a>
 8003a06:	2300      	movs	r3, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_RCC_LSI2_SetTrimming>:
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_RCC_MSI_Enable>:
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_RCC_MSI_Disable>:
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	bf00      	nop
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_RCC_MSI_IsReady>:
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d101      	bne.n	8003a92 <LL_RCC_MSI_IsReady+0x16>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <LL_RCC_MSI_IsReady+0x18>
 8003a92:	2300      	movs	r3, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_MSI_SetRange>:
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_RCC_MSI_GetRange>:
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2bb0      	cmp	r3, #176	; 0xb0
 8003adc:	d901      	bls.n	8003ae2 <LL_RCC_MSI_GetRange+0x1c>
 8003ade:	23b0      	movs	r3, #176	; 0xb0
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_RCC_MSI_SetCalibTrimming>:
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_RCC_SetSysClkSource>:
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 0203 	bic.w	r2, r3, #3
 8003b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_GetSysClkSource>:
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_SetAHBPrescaler>:
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_C2_RCC_SetAHBPrescaler>:
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_SetAHB4Prescaler>:
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_SetAPB1Prescaler>:
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_SetAPB2Prescaler>:
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_RCC_GetAHBPrescaler>:
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_RCC_GetAHB4Prescaler>:
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_PLL_Enable>:
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_RCC_PLL_Disable>:
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_PLL_IsReady>:
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cae:	d101      	bne.n	8003cb4 <LL_RCC_PLL_IsReady+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_RCC_PLL_IsReady+0x1a>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_RCC_PLL_GetN>:
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_RCC_PLL_GetR>:
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_PLL_GetDivider>:
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_PLL_GetMainSource>:
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <LL_RCC_IsActiveFlag_HPRE>:
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d101      	bne.n	8003d3a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_RCC_IsActiveFlag_C2HPRE>:
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d5a:	d101      	bne.n	8003d60 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003d60:	2300      	movs	r3, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_RCC_IsActiveFlag_SHDHPRE>:
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d101      	bne.n	8003d86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003d86:	2300      	movs	r3, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_IsActiveFlag_PPRE1>:
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003da4:	d101      	bne.n	8003daa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003daa:	2300      	movs	r3, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_RCC_IsActiveFlag_PPRE2>:
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dc8:	d101      	bne.n	8003dce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_RCC_OscConfig>:
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b08d      	sub	sp, #52	; 0x34
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x12>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e363      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 808d 	beq.w	8003f16 <HAL_RCC_OscConfig+0x13a>
 8003dfc:	f7ff fea1 	bl	8003b42 <LL_RCC_GetSysClkSource>
 8003e00:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e02:	f7ff ff82 	bl	8003d0a <LL_RCC_PLL_GetMainSource>
 8003e06:	62b8      	str	r0, [r7, #40]	; 0x28
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_RCC_OscConfig+0x3e>
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d147      	bne.n	8003ea4 <HAL_RCC_OscConfig+0xc8>
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d144      	bne.n	8003ea4 <HAL_RCC_OscConfig+0xc8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_OscConfig+0x4a>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e347      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003e2a:	f7ff fe4c 	bl	8003ac6 <LL_RCC_MSI_GetRange>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	429c      	cmp	r4, r3
 8003e32:	d914      	bls.n	8003e5e <HAL_RCC_OscConfig+0x82>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fd05 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x6c>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e336      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fe26 	bl	8003a9e <LL_RCC_MSI_SetRange>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fe4a 	bl	8003af0 <LL_RCC_MSI_SetCalibTrimming>
 8003e5c:	e013      	b.n	8003e86 <HAL_RCC_OscConfig+0xaa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fe1b 	bl	8003a9e <LL_RCC_MSI_SetRange>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fe3f 	bl	8003af0 <LL_RCC_MSI_SetCalibTrimming>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fce6 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0xaa>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e317      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003e86:	f000 fccb 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4aa4      	ldr	r2, [pc, #656]	; (8004120 <HAL_RCC_OscConfig+0x344>)
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	4ba4      	ldr	r3, [pc, #656]	; (8004124 <HAL_RCC_OscConfig+0x348>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd f8e7 	bl	8001068 <HAL_InitTick>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d039      	beq.n	8003f14 <HAL_RCC_OscConfig+0x138>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e308      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01e      	beq.n	8003eea <HAL_RCC_OscConfig+0x10e>
 8003eac:	f7ff fdc8 	bl	8003a40 <LL_RCC_MSI_Enable>
 8003eb0:	f7fd f928 	bl	8001104 <HAL_GetTick>
 8003eb4:	6278      	str	r0, [r7, #36]	; 0x24
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xee>
 8003eb8:	f7fd f924 	bl	8001104 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xee>
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e2f5      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003eca:	f7ff fdd7 	bl	8003a7c <LL_RCC_MSI_IsReady>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f1      	beq.n	8003eb8 <HAL_RCC_OscConfig+0xdc>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fde0 	bl	8003a9e <LL_RCC_MSI_SetRange>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fe04 	bl	8003af0 <LL_RCC_MSI_SetCalibTrimming>
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x13a>
 8003eea:	f7ff fdb8 	bl	8003a5e <LL_RCC_MSI_Disable>
 8003eee:	f7fd f909 	bl	8001104 <HAL_GetTick>
 8003ef2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x12c>
 8003ef6:	f7fd f905 	bl	8001104 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x12c>
 8003f04:	2303      	movs	r3, #3
 8003f06:	e2d6      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003f08:	f7ff fdb8 	bl	8003a7c <LL_RCC_MSI_IsReady>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f1      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x11a>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x13a>
 8003f14:	bf00      	nop
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d047      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1d6>
 8003f22:	f7ff fe0e 	bl	8003b42 <LL_RCC_GetSysClkSource>
 8003f26:	6238      	str	r0, [r7, #32]
 8003f28:	f7ff feef 	bl	8003d0a <LL_RCC_PLL_GetMainSource>
 8003f2c:	61f8      	str	r0, [r7, #28]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_OscConfig+0x164>
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d108      	bne.n	8003f4c <HAL_RCC_OscConfig+0x170>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x170>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d134      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x1d6>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e2b4      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_OscConfig+0x180>
 8003f56:	f7ff fbf5 	bl	8003744 <LL_RCC_HSE_Enable>
 8003f5a:	e001      	b.n	8003f60 <HAL_RCC_OscConfig+0x184>
 8003f5c:	f7ff fc01 	bl	8003762 <LL_RCC_HSE_Disable>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d012      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1b2>
 8003f68:	f7fd f8cc 	bl	8001104 <HAL_GetTick>
 8003f6c:	6278      	str	r0, [r7, #36]	; 0x24
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1a6>
 8003f70:	f7fd f8c8 	bl	8001104 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1a6>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e299      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003f82:	f7ff fbfd 	bl	8003780 <LL_RCC_HSE_IsReady>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f1      	beq.n	8003f70 <HAL_RCC_OscConfig+0x194>
 8003f8c:	e011      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1d6>
 8003f8e:	f7fd f8b9 	bl	8001104 <HAL_GetTick>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1cc>
 8003f96:	f7fd f8b5 	bl	8001104 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b64      	cmp	r3, #100	; 0x64
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x1cc>
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e286      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003fa8:	f7ff fbea 	bl	8003780 <LL_RCC_HSE_IsReady>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f1      	bne.n	8003f96 <HAL_RCC_OscConfig+0x1ba>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04c      	beq.n	8004058 <HAL_RCC_OscConfig+0x27c>
 8003fbe:	f7ff fdc0 	bl	8003b42 <LL_RCC_GetSysClkSource>
 8003fc2:	61b8      	str	r0, [r7, #24]
 8003fc4:	f7ff fea1 	bl	8003d0a <LL_RCC_PLL_GetMainSource>
 8003fc8:	6178      	str	r0, [r7, #20]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_OscConfig+0x200>
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x218>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d10b      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x218>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x20c>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e266      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fc09 	bl	8003804 <LL_RCC_HSI_SetCalibTrimming>
 8003ff2:	e031      	b.n	8004058 <HAL_RCC_OscConfig+0x27c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d019      	beq.n	8004030 <HAL_RCC_OscConfig+0x254>
 8003ffc:	f7ff fbd2 	bl	80037a4 <LL_RCC_HSI_Enable>
 8004000:	f7fd f880 	bl	8001104 <HAL_GetTick>
 8004004:	6278      	str	r0, [r7, #36]	; 0x24
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x23e>
 8004008:	f7fd f87c 	bl	8001104 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x23e>
 8004016:	2303      	movs	r3, #3
 8004018:	e24d      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 800401a:	f7ff fbe1 	bl	80037e0 <LL_RCC_HSI_IsReady>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f1      	beq.n	8004008 <HAL_RCC_OscConfig+0x22c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fbeb 	bl	8003804 <LL_RCC_HSI_SetCalibTrimming>
 800402e:	e013      	b.n	8004058 <HAL_RCC_OscConfig+0x27c>
 8004030:	f7ff fbc7 	bl	80037c2 <LL_RCC_HSI_Disable>
 8004034:	f7fd f866 	bl	8001104 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	; 0x24
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x272>
 800403c:	f7fd f862 	bl	8001104 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x272>
 800404a:	2303      	movs	r3, #3
 800404c:	e233      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 800404e:	f7ff fbc7 	bl	80037e0 <LL_RCC_HSI_IsReady>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f1      	bne.n	800403c <HAL_RCC_OscConfig+0x260>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x296>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80a3 	beq.w	80041b8 <HAL_RCC_OscConfig+0x3dc>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d076      	beq.n	8004168 <HAL_RCC_OscConfig+0x38c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d046      	beq.n	8004114 <HAL_RCC_OscConfig+0x338>
 8004086:	f7ff fc7e 	bl	8003986 <LL_RCC_LSI1_IsReady>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d113      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2dc>
 8004090:	f7ff fc57 	bl	8003942 <LL_RCC_LSI1_Enable>
 8004094:	f7fd f836 	bl	8001104 <HAL_GetTick>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x2d2>
 800409c:	f7fd f832 	bl	8001104 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x2d2>
 80040aa:	2303      	movs	r3, #3
 80040ac:	e203      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 80040ae:	f7ff fc6a 	bl	8003986 <LL_RCC_LSI1_IsReady>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f1      	beq.n	800409c <HAL_RCC_OscConfig+0x2c0>
 80040b8:	f7ff fc77 	bl	80039aa <LL_RCC_LSI2_Enable>
 80040bc:	f7fd f822 	bl	8001104 <HAL_GetTick>
 80040c0:	6278      	str	r0, [r7, #36]	; 0x24
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x2fa>
 80040c4:	f7fd f81e 	bl	8001104 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x2fa>
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1ef      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 80040d6:	f7ff fc8a 	bl	80039ee <LL_RCC_LSI2_IsReady>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f1      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2e8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fc94 	bl	8003a12 <LL_RCC_LSI2_SetTrimming>
 80040ea:	f7ff fc3b 	bl	8003964 <LL_RCC_LSI1_Disable>
 80040ee:	f7fd f809 	bl	8001104 <HAL_GetTick>
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x32c>
 80040f6:	f7fd f805 	bl	8001104 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x32c>
 8004104:	2303      	movs	r3, #3
 8004106:	e1d6      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004108:	f7ff fc3d 	bl	8003986 <LL_RCC_LSI1_IsReady>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f1      	bne.n	80040f6 <HAL_RCC_OscConfig+0x31a>
 8004112:	e051      	b.n	80041b8 <HAL_RCC_OscConfig+0x3dc>
 8004114:	f7ff fc15 	bl	8003942 <LL_RCC_LSI1_Enable>
 8004118:	f7fc fff4 	bl	8001104 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24
 800411e:	e00c      	b.n	800413a <HAL_RCC_OscConfig+0x35e>
 8004120:	2000004c 	.word	0x2000004c
 8004124:	20000050 	.word	0x20000050
 8004128:	f7fc ffec 	bl	8001104 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x35e>
 8004136:	2303      	movs	r3, #3
 8004138:	e1bd      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 800413a:	f7ff fc24 	bl	8003986 <LL_RCC_LSI1_IsReady>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f1      	beq.n	8004128 <HAL_RCC_OscConfig+0x34c>
 8004144:	f7ff fc42 	bl	80039cc <LL_RCC_LSI2_Disable>
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x380>
 800414a:	f7fc ffdb 	bl	8001104 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b03      	cmp	r3, #3
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x380>
 8004158:	2303      	movs	r3, #3
 800415a:	e1ac      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 800415c:	f7ff fc47 	bl	80039ee <LL_RCC_LSI2_IsReady>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f1      	bne.n	800414a <HAL_RCC_OscConfig+0x36e>
 8004166:	e027      	b.n	80041b8 <HAL_RCC_OscConfig+0x3dc>
 8004168:	f7ff fc30 	bl	80039cc <LL_RCC_LSI2_Disable>
 800416c:	f7fc ffca 	bl	8001104 <HAL_GetTick>
 8004170:	6278      	str	r0, [r7, #36]	; 0x24
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x3aa>
 8004174:	f7fc ffc6 	bl	8001104 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b03      	cmp	r3, #3
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x3aa>
 8004182:	2303      	movs	r3, #3
 8004184:	e197      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004186:	f7ff fc32 	bl	80039ee <LL_RCC_LSI2_IsReady>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f1      	bne.n	8004174 <HAL_RCC_OscConfig+0x398>
 8004190:	f7ff fbe8 	bl	8003964 <LL_RCC_LSI1_Disable>
 8004194:	f7fc ffb6 	bl	8001104 <HAL_GetTick>
 8004198:	6278      	str	r0, [r7, #36]	; 0x24
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x3d2>
 800419c:	f7fc ffb2 	bl	8001104 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x3d2>
 80041aa:	2303      	movs	r3, #3
 80041ac:	e183      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 80041ae:	f7ff fbea 	bl	8003986 <LL_RCC_LSI1_IsReady>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f1      	bne.n	800419c <HAL_RCC_OscConfig+0x3c0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x4a0>
 80041c4:	4ba7      	ldr	r3, [pc, #668]	; (8004464 <HAL_RCC_OscConfig+0x688>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d114      	bne.n	80041fa <HAL_RCC_OscConfig+0x41e>
 80041d0:	f7ff fa78 	bl	80036c4 <HAL_PWR_EnableBkUpAccess>
 80041d4:	f7fc ff96 	bl	8001104 <HAL_GetTick>
 80041d8:	6278      	str	r0, [r7, #36]	; 0x24
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x412>
 80041dc:	f7fc ff92 	bl	8001104 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x412>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e163      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 80041ee:	4b9d      	ldr	r3, [pc, #628]	; (8004464 <HAL_RCC_OscConfig+0x688>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x400>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <HAL_RCC_OscConfig+0x42c>
 8004202:	f7ff fb48 	bl	8003896 <LL_RCC_LSE_Enable>
 8004206:	e00c      	b.n	8004222 <HAL_RCC_OscConfig+0x446>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b05      	cmp	r3, #5
 800420e:	d104      	bne.n	800421a <HAL_RCC_OscConfig+0x43e>
 8004210:	f7ff fb63 	bl	80038da <LL_RCC_LSE_EnableBypass>
 8004214:	f7ff fb3f 	bl	8003896 <LL_RCC_LSE_Enable>
 8004218:	e003      	b.n	8004222 <HAL_RCC_OscConfig+0x446>
 800421a:	f7ff fb4d 	bl	80038b8 <LL_RCC_LSE_Disable>
 800421e:	f7ff fb6d 	bl	80038fc <LL_RCC_LSE_DisableBypass>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d014      	beq.n	8004254 <HAL_RCC_OscConfig+0x478>
 800422a:	f7fc ff6b 	bl	8001104 <HAL_GetTick>
 800422e:	6278      	str	r0, [r7, #36]	; 0x24
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x46c>
 8004232:	f7fc ff67 	bl	8001104 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x46c>
 8004244:	2303      	movs	r3, #3
 8004246:	e136      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004248:	f7ff fb69 	bl	800391e <LL_RCC_LSE_IsReady>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ef      	beq.n	8004232 <HAL_RCC_OscConfig+0x456>
 8004252:	e013      	b.n	800427c <HAL_RCC_OscConfig+0x4a0>
 8004254:	f7fc ff56 	bl	8001104 <HAL_GetTick>
 8004258:	6278      	str	r0, [r7, #36]	; 0x24
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x496>
 800425c:	f7fc ff52 	bl	8001104 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x496>
 800426e:	2303      	movs	r3, #3
 8004270:	e121      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004272:	f7ff fb54 	bl	800391e <LL_RCC_LSE_IsReady>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ef      	bne.n	800425c <HAL_RCC_OscConfig+0x480>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d02c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x506>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d014      	beq.n	80042ba <HAL_RCC_OscConfig+0x4de>
 8004290:	f7ff facd 	bl	800382e <LL_RCC_HSI48_Enable>
 8004294:	f7fc ff36 	bl	8001104 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	; 0x24
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x4d2>
 800429c:	f7fc ff32 	bl	8001104 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x4d2>
 80042aa:	2303      	movs	r3, #3
 80042ac:	e103      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 80042ae:	f7ff fae0 	bl	8003872 <LL_RCC_HSI48_IsReady>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f1      	beq.n	800429c <HAL_RCC_OscConfig+0x4c0>
 80042b8:	e013      	b.n	80042e2 <HAL_RCC_OscConfig+0x506>
 80042ba:	f7ff fac9 	bl	8003850 <LL_RCC_HSI48_Disable>
 80042be:	f7fc ff21 	bl	8001104 <HAL_GetTick>
 80042c2:	6278      	str	r0, [r7, #36]	; 0x24
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x4fc>
 80042c6:	f7fc ff1d 	bl	8001104 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x4fc>
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0ee      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 80042d8:	f7ff facb 	bl	8003872 <LL_RCC_HSI48_IsReady>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f1      	bne.n	80042c6 <HAL_RCC_OscConfig+0x4ea>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80e4 	beq.w	80044b4 <HAL_RCC_OscConfig+0x6d8>
 80042ec:	f7ff fc29 	bl	8003b42 <LL_RCC_GetSysClkSource>
 80042f0:	6138      	str	r0, [r7, #16]
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	2b02      	cmp	r3, #2
 8004300:	f040 80b4 	bne.w	800446c <HAL_RCC_OscConfig+0x690>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0203 	and.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	429a      	cmp	r2, r3
 8004310:	d123      	bne.n	800435a <HAL_RCC_OscConfig+0x57e>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	429a      	cmp	r2, r3
 800431e:	d11c      	bne.n	800435a <HAL_RCC_OscConfig+0x57e>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	429a      	cmp	r2, r3
 800432e:	d114      	bne.n	800435a <HAL_RCC_OscConfig+0x57e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	429a      	cmp	r2, r3
 800433c:	d10d      	bne.n	800435a <HAL_RCC_OscConfig+0x57e>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	429a      	cmp	r2, r3
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x57e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	429a      	cmp	r2, r3
 8004358:	d05d      	beq.n	8004416 <HAL_RCC_OscConfig+0x63a>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d058      	beq.n	8004412 <HAL_RCC_OscConfig+0x636>
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0x596>
 800436e:	2301      	movs	r3, #1
 8004370:	e0a1      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004372:	f7ff fc84 	bl	8003c7e <LL_RCC_PLL_Disable>
 8004376:	f7fc fec5 	bl	8001104 <HAL_GetTick>
 800437a:	6278      	str	r0, [r7, #36]	; 0x24
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x5b4>
 800437e:	f7fc fec1 	bl	8001104 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x5b4>
 800438c:	2303      	movs	r3, #3
 800438e:	e092      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ef      	bne.n	800437e <HAL_RCC_OscConfig+0x5a2>
 800439e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b30      	ldr	r3, [pc, #192]	; (8004468 <HAL_RCC_OscConfig+0x68c>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043b0:	4311      	orrs	r1, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b6:	0212      	lsls	r2, r2, #8
 80043b8:	4311      	orrs	r1, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043be:	4311      	orrs	r1, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043c4:	4311      	orrs	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043ca:	430a      	orrs	r2, r1
 80043cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60cb      	str	r3, [r1, #12]
 80043d4:	f7ff fc44 	bl	8003c60 <LL_RCC_PLL_Enable>
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e6:	60d3      	str	r3, [r2, #12]
 80043e8:	f7fc fe8c 	bl	8001104 <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	; 0x24
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x626>
 80043f0:	f7fc fe88 	bl	8001104 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x626>
 80043fe:	2303      	movs	r3, #3
 8004400:	e059      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ef      	beq.n	80043f0 <HAL_RCC_OscConfig+0x614>
 8004410:	e050      	b.n	80044b4 <HAL_RCC_OscConfig+0x6d8>
 8004412:	2301      	movs	r3, #1
 8004414:	e04f      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d147      	bne.n	80044b4 <HAL_RCC_OscConfig+0x6d8>
 8004424:	f7ff fc1c 	bl	8003c60 <LL_RCC_PLL_Enable>
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	60d3      	str	r3, [r2, #12]
 8004438:	f7fc fe64 	bl	8001104 <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x676>
 8004440:	f7fc fe60 	bl	8001104 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x676>
 800444e:	2303      	movs	r3, #3
 8004450:	e031      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ef      	beq.n	8004440 <HAL_RCC_OscConfig+0x664>
 8004460:	e028      	b.n	80044b4 <HAL_RCC_OscConfig+0x6d8>
 8004462:	bf00      	nop
 8004464:	58000400 	.word	0x58000400
 8004468:	11c1808c 	.word	0x11c1808c
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b0c      	cmp	r3, #12
 8004470:	d01e      	beq.n	80044b0 <HAL_RCC_OscConfig+0x6d4>
 8004472:	f7ff fc04 	bl	8003c7e <LL_RCC_PLL_Disable>
 8004476:	f7fc fe45 	bl	8001104 <HAL_GetTick>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x6b4>
 800447e:	f7fc fe41 	bl	8001104 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x6b4>
 800448c:	2303      	movs	r3, #3
 800448e:	e012      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ef      	bne.n	800447e <HAL_RCC_OscConfig+0x6a2>
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_OscConfig+0x6e4>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	60cb      	str	r3, [r1, #12]
 80044ae:	e001      	b.n	80044b4 <HAL_RCC_OscConfig+0x6d8>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x6da>
 80044b4:	2300      	movs	r3, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	3734      	adds	r7, #52	; 0x34
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	bf00      	nop
 80044c0:	eefefffc 	.word	0xeefefffc

080044c4 <HAL_RCC_ClockConfig>:
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e12d      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 80044d8:	4b98      	ldr	r3, [pc, #608]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d91b      	bls.n	800451e <HAL_RCC_ClockConfig+0x5a>
 80044e6:	4b95      	ldr	r3, [pc, #596]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 0207 	bic.w	r2, r3, #7
 80044ee:	4993      	ldr	r1, [pc, #588]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
 80044f6:	f7fc fe05 	bl	8001104 <HAL_GetTick>
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	e008      	b.n	8004510 <HAL_RCC_ClockConfig+0x4c>
 80044fe:	f7fc fe01 	bl	8001104 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_ClockConfig+0x4c>
 800450c:	2303      	movs	r3, #3
 800450e:	e111      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 8004510:	4b8a      	ldr	r3, [pc, #552]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d1ef      	bne.n	80044fe <HAL_RCC_ClockConfig+0x3a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_RCC_ClockConfig+0x94>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fb13 	bl	8003b5a <LL_RCC_SetAHBPrescaler>
 8004534:	f7fc fde6 	bl	8001104 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	e008      	b.n	800454e <HAL_RCC_ClockConfig+0x8a>
 800453c:	f7fc fde2 	bl	8001104 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x8a>
 800454a:	2303      	movs	r3, #3
 800454c:	e0f2      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 800454e:	f7ff fbe8 	bl	8003d22 <LL_RCC_IsActiveFlag_HPRE>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f1      	beq.n	800453c <HAL_RCC_ClockConfig+0x78>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d016      	beq.n	8004592 <HAL_RCC_ClockConfig+0xce>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fb0a 	bl	8003b82 <LL_C2_RCC_SetAHBPrescaler>
 800456e:	f7fc fdc9 	bl	8001104 <HAL_GetTick>
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	e008      	b.n	8004588 <HAL_RCC_ClockConfig+0xc4>
 8004576:	f7fc fdc5 	bl	8001104 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_ClockConfig+0xc4>
 8004584:	2303      	movs	r3, #3
 8004586:	e0d5      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 8004588:	f7ff fbdd 	bl	8003d46 <LL_RCC_IsActiveFlag_C2HPRE>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f1      	beq.n	8004576 <HAL_RCC_ClockConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <HAL_RCC_ClockConfig+0x108>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fb03 	bl	8003bae <LL_RCC_SetAHB4Prescaler>
 80045a8:	f7fc fdac 	bl	8001104 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_ClockConfig+0xfe>
 80045b0:	f7fc fda8 	bl	8001104 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0xfe>
 80045be:	2303      	movs	r3, #3
 80045c0:	e0b8      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 80045c2:	f7ff fbd3 	bl	8003d6c <LL_RCC_IsActiveFlag_SHDHPRE>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f1      	beq.n	80045b0 <HAL_RCC_ClockConfig+0xec>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <HAL_RCC_ClockConfig+0x142>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fafd 	bl	8003bdc <LL_RCC_SetAPB1Prescaler>
 80045e2:	f7fc fd8f 	bl	8001104 <HAL_GetTick>
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	e008      	b.n	80045fc <HAL_RCC_ClockConfig+0x138>
 80045ea:	f7fc fd8b 	bl	8001104 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_ClockConfig+0x138>
 80045f8:	2303      	movs	r3, #3
 80045fa:	e09b      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 80045fc:	f7ff fbc9 	bl	8003d92 <LL_RCC_IsActiveFlag_PPRE1>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f1      	beq.n	80045ea <HAL_RCC_ClockConfig+0x126>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d017      	beq.n	8004642 <HAL_RCC_ClockConfig+0x17e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff faf3 	bl	8003c04 <LL_RCC_SetAPB2Prescaler>
 800461e:	f7fc fd71 	bl	8001104 <HAL_GetTick>
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	e008      	b.n	8004638 <HAL_RCC_ClockConfig+0x174>
 8004626:	f7fc fd6d 	bl	8001104 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_ClockConfig+0x174>
 8004634:	2303      	movs	r3, #3
 8004636:	e07d      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 8004638:	f7ff fbbd 	bl	8003db6 <LL_RCC_IsActiveFlag_PPRE2>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f1      	beq.n	8004626 <HAL_RCC_ClockConfig+0x162>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d043      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x212>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d106      	bne.n	8004664 <HAL_RCC_ClockConfig+0x1a0>
 8004656:	f7ff f893 	bl	8003780 <LL_RCC_HSE_IsReady>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d11e      	bne.n	800469e <HAL_RCC_ClockConfig+0x1da>
 8004660:	2301      	movs	r3, #1
 8004662:	e067      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d106      	bne.n	800467a <HAL_RCC_ClockConfig+0x1b6>
 800466c:	f7ff fb16 	bl	8003c9c <LL_RCC_PLL_IsReady>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d113      	bne.n	800469e <HAL_RCC_ClockConfig+0x1da>
 8004676:	2301      	movs	r3, #1
 8004678:	e05c      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_RCC_ClockConfig+0x1cc>
 8004682:	f7ff f9fb 	bl	8003a7c <LL_RCC_MSI_IsReady>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d108      	bne.n	800469e <HAL_RCC_ClockConfig+0x1da>
 800468c:	2301      	movs	r3, #1
 800468e:	e051      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 8004690:	f7ff f8a6 	bl	80037e0 <LL_RCC_HSI_IsReady>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0x1da>
 800469a:	2301      	movs	r3, #1
 800469c:	e04a      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fa39 	bl	8003b1a <LL_RCC_SetSysClkSource>
 80046a8:	f7fc fd2c 	bl	8001104 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x202>
 80046b0:	f7fc fd28 	bl	8001104 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x202>
 80046c2:	2303      	movs	r3, #3
 80046c4:	e036      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 80046c6:	f7ff fa3c 	bl	8003b42 <LL_RCC_GetSysClkSource>
 80046ca:	4602      	mov	r2, r0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d1ec      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x1ec>
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d21b      	bcs.n	800471c <HAL_RCC_ClockConfig+0x258>
 80046e4:	4b15      	ldr	r3, [pc, #84]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f023 0207 	bic.w	r2, r3, #7
 80046ec:	4913      	ldr	r1, [pc, #76]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	f7fc fd06 	bl	8001104 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	e008      	b.n	800470e <HAL_RCC_ClockConfig+0x24a>
 80046fc:	f7fc fd02 	bl	8001104 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_ClockConfig+0x24a>
 800470a:	2303      	movs	r3, #3
 800470c:	e012      	b.n	8004734 <HAL_RCC_ClockConfig+0x270>
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_ClockConfig+0x278>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d1ef      	bne.n	80046fc <HAL_RCC_ClockConfig+0x238>
 800471c:	f000 f880 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004720:	4603      	mov	r3, r0
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <HAL_RCC_ClockConfig+0x27c>)
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	f7fc fcf9 	bl	800111c <HAL_GetTickPrio>
 800472a:	4603      	mov	r3, r0
 800472c:	4618      	mov	r0, r3
 800472e:	f7fc fc9b 	bl	8001068 <HAL_InitTick>
 8004732:	4603      	mov	r3, r0
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	58004000 	.word	0x58004000
 8004740:	2000004c 	.word	0x2000004c

08004744 <HAL_RCC_GetSysClockFreq>:
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	f7ff f9fa 	bl	8003b42 <LL_RCC_GetSysClkSource>
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0x28>
 8004756:	f7ff f9b6 	bl	8003ac6 <LL_RCC_MSI_GetRange>
 800475a:	4603      	mov	r3, r0
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e04b      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xc0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d102      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x34>
 8004772:	4b28      	ldr	r3, [pc, #160]	; (8004814 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e045      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xc0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b08      	cmp	r3, #8
 800477c:	d10a      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x50>
 800477e:	f7fe ffcf 	bl	8003720 <LL_RCC_HSE_IsEnabledDiv2>
 8004782:	4603      	mov	r3, r0
 8004784:	2b01      	cmp	r3, #1
 8004786:	d102      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x4a>
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCC_GetSysClockFreq+0xd4>)
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e03a      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xc0>
 800478e:	4b23      	ldr	r3, [pc, #140]	; (800481c <HAL_RCC_GetSysClockFreq+0xd8>)
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e037      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xc0>
 8004794:	f7ff fab9 	bl	8003d0a <LL_RCC_PLL_GetMainSource>
 8004798:	6038      	str	r0, [r7, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d003      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x64>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d003      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x6a>
 80047a6:	e00d      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x80>
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	e015      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x96>
 80047ae:	f7fe ffb7 	bl	8003720 <LL_RCC_HSE_IsEnabledDiv2>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d102      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x7a>
 80047b8:	4b17      	ldr	r3, [pc, #92]	; (8004818 <HAL_RCC_GetSysClockFreq+0xd4>)
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	e00d      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x96>
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_RCC_GetSysClockFreq+0xd8>)
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	e00a      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x96>
 80047c4:	f7ff f97f 	bl	8003ac6 <LL_RCC_MSI_GetRange>
 80047c8:	4603      	mov	r3, r0
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	bf00      	nop
 80047da:	f7ff fa71 	bl	8003cc0 <LL_RCC_PLL_GetN>
 80047de:	4602      	mov	r2, r0
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	fb03 f402 	mul.w	r4, r3, r2
 80047e6:	f7ff fa84 	bl	8003cf2 <LL_RCC_PLL_GetDivider>
 80047ea:	4603      	mov	r3, r0
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	3301      	adds	r3, #1
 80047f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80047f4:	f7ff fa71 	bl	8003cda <LL_RCC_PLL_GetR>
 80047f8:	4603      	mov	r3, r0
 80047fa:	0f5b      	lsrs	r3, r3, #29
 80047fc:	3301      	adds	r3, #1
 80047fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bd90      	pop	{r4, r7, pc}
 800480e:	bf00      	nop
 8004810:	0800cc88 	.word	0x0800cc88
 8004814:	00f42400 	.word	0x00f42400
 8004818:	003d0900 	.word	0x003d0900
 800481c:	007a1200 	.word	0x007a1200

08004820 <HAL_RCC_GetHCLKFreq>:
 8004820:	b598      	push	{r3, r4, r7, lr}
 8004822:	af00      	add	r7, sp, #0
 8004824:	f7ff ff8e 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8004828:	4604      	mov	r4, r0
 800482a:	f7ff f9ff 	bl	8003c2c <LL_RCC_GetAHBPrescaler>
 800482e:	4603      	mov	r3, r0
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	4a03      	ldr	r2, [pc, #12]	; (8004844 <HAL_RCC_GetHCLKFreq+0x24>)
 8004838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004840:	4618      	mov	r0, r3
 8004842:	bd98      	pop	{r3, r4, r7, pc}
 8004844:	0800cc48 	.word	0x0800cc48

08004848 <RCC_SetFlashLatencyFromMSIRange>:
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2bb0      	cmp	r3, #176	; 0xb0
 8004854:	d903      	bls.n	800485e <RCC_SetFlashLatencyFromMSIRange+0x16>
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e007      	b.n	800486e <RCC_SetFlashLatencyFromMSIRange+0x26>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	4a11      	ldr	r2, [pc, #68]	; (80048ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	f7ff f9e9 	bl	8003c44 <LL_RCC_GetAHB4Prescaler>
 8004872:	4603      	mov	r3, r0
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	4a0d      	ldr	r2, [pc, #52]	; (80048b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	0c9c      	lsrs	r4, r3, #18
 8004892:	f7fe ff27 	bl	80036e4 <HAL_PWREx_GetVoltageRange>
 8004896:	4603      	mov	r3, r0
 8004898:	4619      	mov	r1, r3
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f80c 	bl	80048b8 <RCC_SetFlashLatency>
 80048a0:	4603      	mov	r3, r0
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}
 80048aa:	bf00      	nop
 80048ac:	0800cc88 	.word	0x0800cc88
 80048b0:	0800cc48 	.word	0x0800cc48
 80048b4:	431bde83 	.word	0x431bde83

080048b8 <RCC_SetFlashLatency>:
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b093      	sub	sp, #76	; 0x4c
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <RCC_SetFlashLatency+0xe8>)
 80048c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80048c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80048ce:	4a35      	ldr	r2, [pc, #212]	; (80049a4 <RCC_SetFlashLatency+0xec>)
 80048d0:	f107 031c 	add.w	r3, r7, #28
 80048d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80048d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80048da:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <RCC_SetFlashLatency+0xf0>)
 80048dc:	f107 040c 	add.w	r4, r7, #12
 80048e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80048e6:	2300      	movs	r3, #0
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d11a      	bne.n	8004928 <RCC_SetFlashLatency+0x70>
 80048f2:	2300      	movs	r3, #0
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
 80048f6:	e013      	b.n	8004920 <RCC_SetFlashLatency+0x68>
 80048f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	3348      	adds	r3, #72	; 0x48
 80048fe:	443b      	add	r3, r7
 8004900:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d807      	bhi.n	800491a <RCC_SetFlashLatency+0x62>
 800490a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3348      	adds	r3, #72	; 0x48
 8004910:	443b      	add	r3, r7
 8004912:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
 8004918:	e020      	b.n	800495c <RCC_SetFlashLatency+0xa4>
 800491a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491c:	3301      	adds	r3, #1
 800491e:	643b      	str	r3, [r7, #64]	; 0x40
 8004920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004922:	2b03      	cmp	r3, #3
 8004924:	d9e8      	bls.n	80048f8 <RCC_SetFlashLatency+0x40>
 8004926:	e019      	b.n	800495c <RCC_SetFlashLatency+0xa4>
 8004928:	2300      	movs	r3, #0
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492c:	e013      	b.n	8004956 <RCC_SetFlashLatency+0x9e>
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3348      	adds	r3, #72	; 0x48
 8004934:	443b      	add	r3, r7
 8004936:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d807      	bhi.n	8004950 <RCC_SetFlashLatency+0x98>
 8004940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	3348      	adds	r3, #72	; 0x48
 8004946:	443b      	add	r3, r7
 8004948:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
 800494e:	e005      	b.n	800495c <RCC_SetFlashLatency+0xa4>
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	3301      	adds	r3, #1
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	2b02      	cmp	r3, #2
 800495a:	d9e8      	bls.n	800492e <RCC_SetFlashLatency+0x76>
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <RCC_SetFlashLatency+0xf4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 0207 	bic.w	r2, r3, #7
 8004964:	4911      	ldr	r1, [pc, #68]	; (80049ac <RCC_SetFlashLatency+0xf4>)
 8004966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]
 800496c:	f7fc fbca 	bl	8001104 <HAL_GetTick>
 8004970:	63b8      	str	r0, [r7, #56]	; 0x38
 8004972:	e008      	b.n	8004986 <RCC_SetFlashLatency+0xce>
 8004974:	f7fc fbc6 	bl	8001104 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <RCC_SetFlashLatency+0xce>
 8004982:	2303      	movs	r3, #3
 8004984:	e007      	b.n	8004996 <RCC_SetFlashLatency+0xde>
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <RCC_SetFlashLatency+0xf4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004990:	429a      	cmp	r2, r3
 8004992:	d1ef      	bne.n	8004974 <RCC_SetFlashLatency+0xbc>
 8004994:	2300      	movs	r3, #0
 8004996:	4618      	mov	r0, r3
 8004998:	374c      	adds	r7, #76	; 0x4c
 800499a:	46bd      	mov	sp, r7
 800499c:	bd90      	pop	{r4, r7, pc}
 800499e:	bf00      	nop
 80049a0:	0800cbd4 	.word	0x0800cbd4
 80049a4:	0800cbe4 	.word	0x0800cbe4
 80049a8:	0800cbf0 	.word	0x0800cbf0
 80049ac:	58004000 	.word	0x58004000

080049b0 <LL_RCC_LSE_IsEnabled>:
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <LL_RCC_LSE_IsEnabled+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_RCC_LSE_IsEnabled+0x1a>
 80049c8:	2300      	movs	r3, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_LSE_IsReady>:
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d101      	bne.n	80049ec <LL_RCC_LSE_IsReady+0x18>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <LL_RCC_LSE_IsReady+0x1a>
 80049ec:	2300      	movs	r3, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_MSI_EnablePLLMode>:
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <LL_RCC_SetRFWKPClockSource>:
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_SetSMPSClockSource>:
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	f023 0203 	bic.w	r2, r3, #3
 8004a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	624b      	str	r3, [r1, #36]	; 0x24
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_SetSMPSPrescaler>:
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	624b      	str	r3, [r1, #36]	; 0x24
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_RCC_SetUSARTClockSource>:
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f023 0203 	bic.w	r2, r3, #3
 8004aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_SetLPUARTClockSource>:
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <LL_RCC_SetI2CClockSource>:
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b02:	43db      	mvns	r3, r3
 8004b04:	401a      	ands	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <LL_RCC_SetLPTIMClockSource>:
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	401a      	ands	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <LL_RCC_SetSAIClockSource>:
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <LL_RCC_SetRNGClockSource>:
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_RCC_SetCLK48ClockSource>:
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_RCC_SetUSBClockSource>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ffe3 	bl	8004bb0 <LL_RCC_SetCLK48ClockSource>
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <LL_RCC_SetADCClockSource>:
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_SetRTCClockSource>:
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <LL_RCC_GetRTCClockSource>:
 8004c4a:	b480      	push	{r7}
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_RCC_ForceBackupDomainReset>:
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_ReleaseBackupDomainReset>:
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_RCC_PLLSAI1_Enable>:
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <LL_RCC_PLLSAI1_Disable>:
 8004cc6:	b480      	push	{r7}
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	bf00      	nop
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <LL_RCC_PLLSAI1_IsReady>:
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf6:	d101      	bne.n	8004cfc <LL_RCC_PLLSAI1_IsReady+0x18>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_RCCEx_PeriphCLKConfig>:
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	2300      	movs	r3, #0
 8004d16:	77bb      	strb	r3, [r7, #30]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d034      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d2c:	d021      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004d2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d32:	d81b      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d38:	d01d      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d3e:	d815      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d48:	d110      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d58:	60d3      	str	r3, [r2, #12]
 8004d5a:	e00d      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f94d 	bl	8005000 <RCCEx_PLLSAI1_ConfigNP>
 8004d66:	4603      	mov	r3, r0
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e005      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004d76:	bf00      	nop
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d105      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fee8 	bl	8004b58 <LL_RCC_SetSAIClockSource>
 8004d88:	e001      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004d8a:	7ffb      	ldrb	r3, [r7, #31]
 8004d8c:	77bb      	strb	r3, [r7, #30]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d046      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004d9a:	f7ff ff56 	bl	8004c4a <LL_RCC_GetRTCClockSource>
 8004d9e:	61b8      	str	r0, [r7, #24]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d03c      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004daa:	f7fe fc8b 	bl	80036c4 <HAL_PWR_EnableBkUpAccess>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff30 	bl	8004c1e <LL_RCC_SetRTCClockSource>
 8004dbe:	e02e      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	f7ff ff4b 	bl	8004c64 <LL_RCC_ForceBackupDomainReset>
 8004dce:	f7ff ff5a 	bl	8004c86 <LL_RCC_ReleaseBackupDomainReset>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dea:	f7ff fde1 	bl	80049b0 <LL_RCC_LSE_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d114      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004df4:	f7fc f986 	bl	8001104 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dfc:	f7fc f982 	bl	8001104 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d902      	bls.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e0e:	2303      	movs	r3, #3
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e004      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e14:	f7ff fdde 	bl	80049d4 <LL_RCC_LSE_IsReady>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e1e:	7ffb      	ldrb	r3, [r7, #31]
 8004e20:	77bb      	strb	r3, [r7, #30]
 8004e22:	e001      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004e24:	7ffb      	ldrb	r3, [r7, #31]
 8004e26:	77bb      	strb	r3, [r7, #30]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fe2a 	bl	8004a92 <LL_RCC_SetUSARTClockSource>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d004      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fe35 	bl	8004abe <LL_RCC_SetLPUARTClockSource>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fe5d 	bl	8004b24 <LL_RCC_SetLPTIMClockSource>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fe52 	bl	8004b24 <LL_RCC_SetLPTIMClockSource>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fe2a 	bl	8004aea <LL_RCC_SetI2CClockSource>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fe1f 	bl	8004aea <LL_RCC_SetI2CClockSource>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fe8d 	bl	8004bdc <LL_RCC_SetUSBClockSource>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eca:	d107      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eda:	60d3      	str	r3, [r2, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ee4:	d10b      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f8e3 	bl	80050b6 <RCCEx_PLLSAI1_ConfigNQ>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	77bb      	strb	r3, [r7, #30]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d02b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f12:	d008      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fe2a 	bl	8004b84 <LL_RCC_SetRNGClockSource>
 8004f30:	e00a      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f7ff fe21 	bl	8004b84 <LL_RCC_SetRNGClockSource>
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f7ff fe34 	bl	8004bb0 <LL_RCC_SetCLK48ClockSource>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004f50:	d107      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f60:	60d3      	str	r3, [r2, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d022      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff fe3d 	bl	8004bf2 <LL_RCC_SetADCClockSource>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f80:	d107      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f90:	60d3      	str	r3, [r2, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f8e3 	bl	800516c <RCCEx_PLLSAI1_ConfigNR>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	7ffb      	ldrb	r3, [r7, #31]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004fb0:	7ffb      	ldrb	r3, [r7, #31]
 8004fb2:	77bb      	strb	r3, [r7, #30]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fd26 	bl	8004a16 <LL_RCC_SetRFWKPClockSource>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fd45 	bl	8004a6a <LL_RCC_SetSMPSPrescaler>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fd2c 	bl	8004a42 <LL_RCC_SetSMPSClockSource>
 8004fea:	7fbb      	ldrb	r3, [r7, #30]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_RCCEx_EnableMSIPLLMode>:
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f7ff fcfe 	bl	80049f8 <LL_RCC_MSI_EnablePLLMode>
 8004ffc:	bf00      	nop
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <RCCEx_PLLSAI1_ConfigNP>:
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	f7ff fe5b 	bl	8004cc6 <LL_RCC_PLLSAI1_Disable>
 8005010:	f7fc f878 	bl	8001104 <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]
 8005016:	e009      	b.n	800502c <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8005018:	f7fc f874 	bl	8001104 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d902      	bls.n	800502c <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8005026:	2303      	movs	r3, #3
 8005028:	73fb      	strb	r3, [r7, #15]
 800502a:	e004      	b.n	8005036 <RCCEx_PLLSAI1_ConfigNP+0x36>
 800502c:	f7ff fe5a 	bl	8004ce4 <LL_RCC_PLLSAI1_IsReady>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <RCCEx_PLLSAI1_ConfigNP+0x18>
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d137      	bne.n	80050ac <RCCEx_PLLSAI1_ConfigNP+0xac>
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005050:	4313      	orrs	r3, r2
 8005052:	610b      	str	r3, [r1, #16]
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005066:	4313      	orrs	r3, r2
 8005068:	610b      	str	r3, [r1, #16]
 800506a:	f7ff fe1d 	bl	8004ca8 <LL_RCC_PLLSAI1_Enable>
 800506e:	f7fc f849 	bl	8001104 <HAL_GetTick>
 8005072:	60b8      	str	r0, [r7, #8]
 8005074:	e009      	b.n	800508a <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8005076:	f7fc f845 	bl	8001104 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d902      	bls.n	800508a <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8005084:	2303      	movs	r3, #3
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	e004      	b.n	8005094 <RCCEx_PLLSAI1_ConfigNP+0x94>
 800508a:	f7ff fe2b 	bl	8004ce4 <LL_RCC_PLLSAI1_IsReady>
 800508e:	4603      	mov	r3, r0
 8005090:	2b01      	cmp	r3, #1
 8005092:	d1f0      	bne.n	8005076 <RCCEx_PLLSAI1_ConfigNP+0x76>
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d108      	bne.n	80050ac <RCCEx_PLLSAI1_ConfigNP+0xac>
 800509a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050a8:	4313      	orrs	r3, r2
 80050aa:	610b      	str	r3, [r1, #16]
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <RCCEx_PLLSAI1_ConfigNQ>:
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
 80050c2:	f7ff fe00 	bl	8004cc6 <LL_RCC_PLLSAI1_Disable>
 80050c6:	f7fc f81d 	bl	8001104 <HAL_GetTick>
 80050ca:	60b8      	str	r0, [r7, #8]
 80050cc:	e009      	b.n	80050e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80050ce:	f7fc f819 	bl	8001104 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d902      	bls.n	80050e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80050dc:	2303      	movs	r3, #3
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	e004      	b.n	80050ec <RCCEx_PLLSAI1_ConfigNQ+0x36>
 80050e2:	f7ff fdff 	bl	8004ce4 <LL_RCC_PLLSAI1_IsReady>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f0      	bne.n	80050ce <RCCEx_PLLSAI1_ConfigNQ+0x18>
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d137      	bne.n	8005162 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005106:	4313      	orrs	r3, r2
 8005108:	610b      	str	r3, [r1, #16]
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800511c:	4313      	orrs	r3, r2
 800511e:	610b      	str	r3, [r1, #16]
 8005120:	f7ff fdc2 	bl	8004ca8 <LL_RCC_PLLSAI1_Enable>
 8005124:	f7fb ffee 	bl	8001104 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]
 800512a:	e009      	b.n	8005140 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 800512c:	f7fb ffea 	bl	8001104 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d902      	bls.n	8005140 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 800513a:	2303      	movs	r3, #3
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e004      	b.n	800514a <RCCEx_PLLSAI1_ConfigNQ+0x94>
 8005140:	f7ff fdd0 	bl	8004ce4 <LL_RCC_PLLSAI1_IsReady>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d1f0      	bne.n	800512c <RCCEx_PLLSAI1_ConfigNQ+0x76>
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d108      	bne.n	8005162 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800515e:	4313      	orrs	r3, r2
 8005160:	610b      	str	r3, [r1, #16]
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <RCCEx_PLLSAI1_ConfigNR>:
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]
 8005178:	f7ff fda5 	bl	8004cc6 <LL_RCC_PLLSAI1_Disable>
 800517c:	f7fb ffc2 	bl	8001104 <HAL_GetTick>
 8005180:	60b8      	str	r0, [r7, #8]
 8005182:	e009      	b.n	8005198 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8005184:	f7fb ffbe 	bl	8001104 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d902      	bls.n	8005198 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8005192:	2303      	movs	r3, #3
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	e004      	b.n	80051a2 <RCCEx_PLLSAI1_ConfigNR+0x36>
 8005198:	f7ff fda4 	bl	8004ce4 <LL_RCC_PLLSAI1_IsReady>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <RCCEx_PLLSAI1_ConfigNR+0x18>
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d137      	bne.n	8005218 <RCCEx_PLLSAI1_ConfigNR+0xac>
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d2:	4313      	orrs	r3, r2
 80051d4:	610b      	str	r3, [r1, #16]
 80051d6:	f7ff fd67 	bl	8004ca8 <LL_RCC_PLLSAI1_Enable>
 80051da:	f7fb ff93 	bl	8001104 <HAL_GetTick>
 80051de:	60b8      	str	r0, [r7, #8]
 80051e0:	e009      	b.n	80051f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80051e2:	f7fb ff8f 	bl	8001104 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d902      	bls.n	80051f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80051f0:	2303      	movs	r3, #3
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	e004      	b.n	8005200 <RCCEx_PLLSAI1_ConfigNR+0x94>
 80051f6:	f7ff fd75 	bl	8004ce4 <LL_RCC_PLLSAI1_IsReady>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d1f0      	bne.n	80051e2 <RCCEx_PLLSAI1_ConfigNR+0x76>
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <RCCEx_PLLSAI1_ConfigNR+0xac>
 8005206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005214:	4313      	orrs	r3, r2
 8005216:	610b      	str	r3, [r1, #16]
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e049      	b.n	80052c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fb fd03 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f000 ffbf 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d001      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e036      	b.n	8005356 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_TIM_Base_Start_IT+0x94>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x44>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d115      	bne.n	8005340 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_TIM_Base_Start_IT+0x98>)
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b06      	cmp	r3, #6
 8005324:	d015      	beq.n	8005352 <HAL_TIM_Base_Start_IT+0x82>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d011      	beq.n	8005352 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	e008      	b.n	8005352 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e000      	b.n	8005354 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	00010007 	.word	0x00010007

0800536c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e049      	b.n	8005412 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f841 	bl	800541a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 ff1a 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e03c      	b.n	80054d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b04      	cmp	r3, #4
 8005460:	d109      	bne.n	8005476 <HAL_TIM_PWM_Start_DMA+0x46>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e02f      	b.n	80054d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d109      	bne.n	8005490 <HAL_TIM_PWM_Start_DMA+0x60>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	e022      	b.n	80054d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b0c      	cmp	r3, #12
 8005494:	d109      	bne.n	80054aa <HAL_TIM_PWM_Start_DMA+0x7a>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	bf0c      	ite	eq
 80054a2:	2301      	moveq	r3, #1
 80054a4:	2300      	movne	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	e015      	b.n	80054d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d109      	bne.n	80054c4 <HAL_TIM_PWM_Start_DMA+0x94>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e008      	b.n	80054d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
 80054dc:	e188      	b.n	80057f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e03c      	b.n	8005572 <HAL_TIM_PWM_Start_DMA+0x142>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d109      	bne.n	8005512 <HAL_TIM_PWM_Start_DMA+0xe2>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b01      	cmp	r3, #1
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e02f      	b.n	8005572 <HAL_TIM_PWM_Start_DMA+0x142>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d109      	bne.n	800552c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	e022      	b.n	8005572 <HAL_TIM_PWM_Start_DMA+0x142>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b0c      	cmp	r3, #12
 8005530:	d109      	bne.n	8005546 <HAL_TIM_PWM_Start_DMA+0x116>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	bf0c      	ite	eq
 800553e:	2301      	moveq	r3, #1
 8005540:	2300      	movne	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	e015      	b.n	8005572 <HAL_TIM_PWM_Start_DMA+0x142>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b10      	cmp	r3, #16
 800554a:	d109      	bne.n	8005560 <HAL_TIM_PWM_Start_DMA+0x130>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e008      	b.n	8005572 <HAL_TIM_PWM_Start_DMA+0x142>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	bf0c      	ite	eq
 800556c:	2301      	moveq	r3, #1
 800556e:	2300      	movne	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d034      	beq.n	80055e0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_TIM_PWM_Start_DMA+0x152>
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e134      	b.n	80057f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start_DMA+0x166>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	e026      	b.n	80055e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b04      	cmp	r3, #4
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start_DMA+0x176>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a4:	e01e      	b.n	80055e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start_DMA+0x186>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b4:	e016      	b.n	80055e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start_DMA+0x196>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055c4:	e00e      	b.n	80055e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d4:	e006      	b.n	80055e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055de:	e001      	b.n	80055e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e105      	b.n	80057f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }

  switch (Channel)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b0c      	cmp	r3, #12
 80055e8:	f200 80ae 	bhi.w	8005748 <HAL_TIM_PWM_Start_DMA+0x318>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005629 	.word	0x08005629
 80055f8:	08005749 	.word	0x08005749
 80055fc:	08005749 	.word	0x08005749
 8005600:	08005749 	.word	0x08005749
 8005604:	08005671 	.word	0x08005671
 8005608:	08005749 	.word	0x08005749
 800560c:	08005749 	.word	0x08005749
 8005610:	08005749 	.word	0x08005749
 8005614:	080056b9 	.word	0x080056b9
 8005618:	08005749 	.word	0x08005749
 800561c:	08005749 	.word	0x08005749
 8005620:	08005749 	.word	0x08005749
 8005624:	08005701 	.word	0x08005701
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	4a72      	ldr	r2, [pc, #456]	; (80057f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800562e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	4a71      	ldr	r2, [pc, #452]	; (80057fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005636:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	4a70      	ldr	r2, [pc, #448]	; (8005800 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800563e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3334      	adds	r3, #52	; 0x34
 800564c:	461a      	mov	r2, r3
 800564e:	887b      	ldrh	r3, [r7, #2]
 8005650:	f7fb ff28 	bl	80014a4 <HAL_DMA_Start_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e0c8      	b.n	80057f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566c:	60da      	str	r2, [r3, #12]
      break;
 800566e:	e06e      	b.n	800574e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	4a60      	ldr	r2, [pc, #384]	; (80057f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005676:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	4a5f      	ldr	r2, [pc, #380]	; (80057fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800567e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	4a5e      	ldr	r2, [pc, #376]	; (8005800 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005686:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3338      	adds	r3, #56	; 0x38
 8005694:	461a      	mov	r2, r3
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	f7fb ff04 	bl	80014a4 <HAL_DMA_Start_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0a4      	b.n	80057f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056b4:	60da      	str	r2, [r3, #12]
      break;
 80056b6:	e04a      	b.n	800574e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	4a4e      	ldr	r2, [pc, #312]	; (80057f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80056be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4a4d      	ldr	r2, [pc, #308]	; (80057fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	4a4c      	ldr	r2, [pc, #304]	; (8005800 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80056ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	333c      	adds	r3, #60	; 0x3c
 80056dc:	461a      	mov	r2, r3
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	f7fb fee0 	bl	80014a4 <HAL_DMA_Start_IT>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e080      	b.n	80057f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056fc:	60da      	str	r2, [r3, #12]
      break;
 80056fe:	e026      	b.n	800574e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	4a3b      	ldr	r2, [pc, #236]	; (80057fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800570e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005716:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3340      	adds	r3, #64	; 0x40
 8005724:	461a      	mov	r2, r3
 8005726:	887b      	ldrh	r3, [r7, #2]
 8005728:	f7fb febc 	bl	80014a4 <HAL_DMA_Start_IT>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e05c      	b.n	80057f0 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005744:	60da      	str	r2, [r3, #12]
      break;
 8005746:	e002      	b.n	800574e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
      break;
 800574c:	bf00      	nop
  }

  if (status == HAL_OK)
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d14c      	bne.n	80057ee <HAL_TIM_PWM_Start_DMA+0x3be>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2201      	movs	r2, #1
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f8bf 	bl	80068e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a27      	ldr	r2, [pc, #156]	; (8005804 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_TIM_PWM_Start_DMA+0x350>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIM_PWM_Start_DMA+0x350>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a24      	ldr	r2, [pc, #144]	; (800580c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <HAL_TIM_PWM_Start_DMA+0x354>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <HAL_TIM_PWM_Start_DMA+0x356>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a19      	ldr	r2, [pc, #100]	; (8005804 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_TIM_PWM_Start_DMA+0x37e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d115      	bne.n	80057da <HAL_TIM_PWM_Start_DMA+0x3aa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	4b16      	ldr	r3, [pc, #88]	; (8005810 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b06      	cmp	r3, #6
 80057be:	d015      	beq.n	80057ec <HAL_TIM_PWM_Start_DMA+0x3bc>
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c6:	d011      	beq.n	80057ec <HAL_TIM_PWM_Start_DMA+0x3bc>
      {
        __HAL_TIM_ENABLE(htim);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d8:	e008      	b.n	80057ec <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e000      	b.n	80057ee <HAL_TIM_PWM_Start_DMA+0x3be>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	080060d5 	.word	0x080060d5
 80057fc:	0800617d 	.word	0x0800617d
 8005800:	08006043 	.word	0x08006043
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800
 8005810:	00010007 	.word	0x00010007

08005814 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d855      	bhi.n	80058d4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005865 	.word	0x08005865
 8005834:	080058d5 	.word	0x080058d5
 8005838:	080058d5 	.word	0x080058d5
 800583c:	080058d5 	.word	0x080058d5
 8005840:	08005881 	.word	0x08005881
 8005844:	080058d5 	.word	0x080058d5
 8005848:	080058d5 	.word	0x080058d5
 800584c:	080058d5 	.word	0x080058d5
 8005850:	0800589d 	.word	0x0800589d
 8005854:	080058d5 	.word	0x080058d5
 8005858:	080058d5 	.word	0x080058d5
 800585c:	080058d5 	.word	0x080058d5
 8005860:	080058b9 	.word	0x080058b9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005872:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	4618      	mov	r0, r3
 800587a:	f7fb fe8e 	bl	800159a <HAL_DMA_Abort_IT>
      break;
 800587e:	e02c      	b.n	80058da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	4618      	mov	r0, r3
 8005896:	f7fb fe80 	bl	800159a <HAL_DMA_Abort_IT>
      break;
 800589a:	e01e      	b.n	80058da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fb fe72 	bl	800159a <HAL_DMA_Abort_IT>
      break;
 80058b6:	e010      	b.n	80058da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fb fe64 	bl	800159a <HAL_DMA_Abort_IT>
      break;
 80058d2:	e002      	b.n	80058da <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      break;
 80058d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d176      	bne.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2200      	movs	r2, #0
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fff9 	bl	80068e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a39      	ldr	r2, [pc, #228]	; (80059d8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a37      	ldr	r2, [pc, #220]	; (80059dc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a36      	ldr	r2, [pc, #216]	; (80059e0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d101      	bne.n	8005910 <HAL_TIM_PWM_Stop_DMA+0xfc>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005910:	2300      	movs	r3, #0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d017      	beq.n	8005946 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a1a      	ldr	r2, [r3, #32]
 800592c:	f240 4344 	movw	r3, #1092	; 0x444
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005944:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6a1a      	ldr	r2, [r3, #32]
 800594c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10f      	bne.n	8005976 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	f240 4344 	movw	r3, #1092	; 0x444
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <HAL_TIM_PWM_Stop_DMA+0x172>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005984:	e023      	b.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d104      	bne.n	8005996 <HAL_TIM_PWM_Stop_DMA+0x182>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005994:	e01b      	b.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b08      	cmp	r3, #8
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_PWM_Stop_DMA+0x192>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a4:	e013      	b.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b0c      	cmp	r3, #12
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059b4:	e00b      	b.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d104      	bne.n	80059c6 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c4:	e003      	b.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0202 	mvn.w	r2, #2
 8005a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fae3 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fad5 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fa fc69 	bl	800030c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d122      	bne.n	8005a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d11b      	bne.n	8005a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0204 	mvn.w	r2, #4
 8005a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fab9 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 faab 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fa fc3f 	bl	800030c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d122      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d11b      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0208 	mvn.w	r2, #8
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2204      	movs	r2, #4
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fa8f 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa81 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7fa fc15 	bl	800030c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d122      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d11b      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0210 	mvn.w	r2, #16
 8005b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2208      	movs	r2, #8
 8005b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa65 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005b28:	e005      	b.n	8005b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa57 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fa fbeb 	bl	800030c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0201 	mvn.w	r2, #1
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fa fef4 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 ffc6 	bl	8006b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba2:	d10e      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d107      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 ffb9 	bl	8006b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d10e      	bne.n	8005bee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d107      	bne.n	8005bee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa16 	bl	800601a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d10e      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d107      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f06f 0220 	mvn.w	r2, #32
 8005c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 ff79 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e0ff      	b.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b14      	cmp	r3, #20
 8005c4e:	f200 80f0 	bhi.w	8005e32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005e33 	.word	0x08005e33
 8005c60:	08005e33 	.word	0x08005e33
 8005c64:	08005e33 	.word	0x08005e33
 8005c68:	08005ced 	.word	0x08005ced
 8005c6c:	08005e33 	.word	0x08005e33
 8005c70:	08005e33 	.word	0x08005e33
 8005c74:	08005e33 	.word	0x08005e33
 8005c78:	08005d2f 	.word	0x08005d2f
 8005c7c:	08005e33 	.word	0x08005e33
 8005c80:	08005e33 	.word	0x08005e33
 8005c84:	08005e33 	.word	0x08005e33
 8005c88:	08005d6f 	.word	0x08005d6f
 8005c8c:	08005e33 	.word	0x08005e33
 8005c90:	08005e33 	.word	0x08005e33
 8005c94:	08005e33 	.word	0x08005e33
 8005c98:	08005db1 	.word	0x08005db1
 8005c9c:	08005e33 	.word	0x08005e33
 8005ca0:	08005e33 	.word	0x08005e33
 8005ca4:	08005e33 	.word	0x08005e33
 8005ca8:	08005df1 	.word	0x08005df1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fafa 	bl	80062ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0208 	orr.w	r2, r2, #8
 8005cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0204 	bic.w	r2, r2, #4
 8005cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6999      	ldr	r1, [r3, #24]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	619a      	str	r2, [r3, #24]
      break;
 8005cea:	e0a5      	b.n	8005e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fb56 	bl	80063a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	021a      	lsls	r2, r3, #8
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	619a      	str	r2, [r3, #24]
      break;
 8005d2c:	e084      	b.n	8005e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fbaf 	bl	8006498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0208 	orr.w	r2, r2, #8
 8005d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0204 	bic.w	r2, r2, #4
 8005d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69d9      	ldr	r1, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	61da      	str	r2, [r3, #28]
      break;
 8005d6c:	e064      	b.n	8005e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fc07 	bl	8006588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69d9      	ldr	r1, [r3, #28]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	021a      	lsls	r2, r3, #8
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	61da      	str	r2, [r3, #28]
      break;
 8005dae:	e043      	b.n	8005e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fc44 	bl	8006644 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0208 	orr.w	r2, r2, #8
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0204 	bic.w	r2, r2, #4
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dee:	e023      	b.n	8005e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fc7c 	bl	80066f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	021a      	lsls	r2, r3, #8
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e30:	e002      	b.n	8005e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
      break;
 8005e36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop

08005e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIM_ConfigClockSource+0x1c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e0b6      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x18a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea4:	d03e      	beq.n	8005f24 <HAL_TIM_ConfigClockSource+0xd8>
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eaa:	f200 8087 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	f000 8086 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x176>
 8005eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eba:	d87f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005ebc:	2b70      	cmp	r3, #112	; 0x70
 8005ebe:	d01a      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0xaa>
 8005ec0:	2b70      	cmp	r3, #112	; 0x70
 8005ec2:	d87b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005ec4:	2b60      	cmp	r3, #96	; 0x60
 8005ec6:	d050      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x11e>
 8005ec8:	2b60      	cmp	r3, #96	; 0x60
 8005eca:	d877      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005ecc:	2b50      	cmp	r3, #80	; 0x50
 8005ece:	d03c      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xfe>
 8005ed0:	2b50      	cmp	r3, #80	; 0x50
 8005ed2:	d873      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d058      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x13e>
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d86f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005edc:	2b30      	cmp	r3, #48	; 0x30
 8005ede:	d064      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15e>
 8005ee0:	2b30      	cmp	r3, #48	; 0x30
 8005ee2:	d86b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d060      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15e>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d867      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05c      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15e>
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d05a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15e>
 8005ef4:	e062      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6899      	ldr	r1, [r3, #8]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f000 fccb 	bl	80068a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	609a      	str	r2, [r3, #8]
      break;
 8005f22:	e04f      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6899      	ldr	r1, [r3, #8]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f000 fcb4 	bl	80068a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e03c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 fc26 	bl	80067a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2150      	movs	r1, #80	; 0x50
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fc7f 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005f68:	e02c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f000 fc45 	bl	8006806 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2160      	movs	r1, #96	; 0x60
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fc6f 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005f88:	e01c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f000 fc06 	bl	80067a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2140      	movs	r1, #64	; 0x40
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fc5f 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005fa8:	e00c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f000 fc56 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8005fba:	e003      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e000      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d107      	bne.n	800606a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006068:	e02a      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d107      	bne.n	8006084 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2202      	movs	r2, #2
 8006078:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006082:	e01d      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d107      	bne.n	800609e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2204      	movs	r2, #4
 8006092:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800609c:	e010      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d107      	bne.n	80060b8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2208      	movs	r2, #8
 80060ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060b6:	e003      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff ffb4 	bl	800602e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d10b      	bne.n	8006104 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d136      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006102:	e031      	b.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	d10b      	bne.n	8006126 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2202      	movs	r2, #2
 8006112:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d125      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	e020      	b.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d10b      	bne.n	8006148 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2204      	movs	r2, #4
 8006134:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d114      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006146:	e00f      	b.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d10a      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2208      	movs	r2, #8
 8006156:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7fa f8cf 	bl	800030c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d103      	bne.n	800619c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	771a      	strb	r2, [r3, #28]
 800619a:	e019      	b.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d103      	bne.n	80061ae <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2202      	movs	r2, #2
 80061aa:	771a      	strb	r2, [r3, #28]
 80061ac:	e010      	b.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d103      	bne.n	80061c0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	771a      	strb	r2, [r3, #28]
 80061be:	e007      	b.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d102      	bne.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2208      	movs	r2, #8
 80061ce:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff ff18 	bl	8006006 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a2a      	ldr	r2, [pc, #168]	; (80062a0 <TIM_Base_SetConfig+0xbc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_Base_SetConfig+0x20>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006202:	d108      	bne.n	8006216 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a21      	ldr	r2, [pc, #132]	; (80062a0 <TIM_Base_SetConfig+0xbc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00b      	beq.n	8006236 <TIM_Base_SetConfig+0x52>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d007      	beq.n	8006236 <TIM_Base_SetConfig+0x52>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <TIM_Base_SetConfig+0xc0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_Base_SetConfig+0x52>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <TIM_Base_SetConfig+0xc4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d108      	bne.n	8006248 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a0c      	ldr	r2, [pc, #48]	; (80062a0 <TIM_Base_SetConfig+0xbc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0xa0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a0b      	ldr	r2, [pc, #44]	; (80062a4 <TIM_Base_SetConfig+0xc0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0xa0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <TIM_Base_SetConfig+0xc4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d103      	bne.n	800628c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	615a      	str	r2, [r3, #20]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800

080062ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 0302 	bic.w	r3, r3, #2
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a24      	ldr	r2, [pc, #144]	; (8006398 <TIM_OC1_SetConfig+0xec>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_OC1_SetConfig+0x70>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a23      	ldr	r2, [pc, #140]	; (800639c <TIM_OC1_SetConfig+0xf0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC1_SetConfig+0x70>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a22      	ldr	r2, [pc, #136]	; (80063a0 <TIM_OC1_SetConfig+0xf4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d10c      	bne.n	8006336 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f023 0308 	bic.w	r3, r3, #8
 8006322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 0304 	bic.w	r3, r3, #4
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a17      	ldr	r2, [pc, #92]	; (8006398 <TIM_OC1_SetConfig+0xec>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d007      	beq.n	800634e <TIM_OC1_SetConfig+0xa2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a17      	ldr	r2, [pc, #92]	; (80063a0 <TIM_OC1_SetConfig+0xf4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <TIM_OC1_SetConfig+0xa2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <TIM_OC1_SetConfig+0xf0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d111      	bne.n	8006372 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	621a      	str	r2, [r3, #32]
}
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40014800 	.word	0x40014800
 80063a0:	40014400 	.word	0x40014400

080063a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f023 0210 	bic.w	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a22      	ldr	r2, [pc, #136]	; (800648c <TIM_OC2_SetConfig+0xe8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d10d      	bne.n	8006424 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a19      	ldr	r2, [pc, #100]	; (800648c <TIM_OC2_SetConfig+0xe8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d007      	beq.n	800643c <TIM_OC2_SetConfig+0x98>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a18      	ldr	r2, [pc, #96]	; (8006490 <TIM_OC2_SetConfig+0xec>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC2_SetConfig+0x98>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a17      	ldr	r2, [pc, #92]	; (8006494 <TIM_OC2_SetConfig+0xf0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d113      	bne.n	8006464 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40012c00 	.word	0x40012c00
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a21      	ldr	r2, [pc, #132]	; (800657c <TIM_OC3_SetConfig+0xe4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10d      	bne.n	8006516 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <TIM_OC3_SetConfig+0xe4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_OC3_SetConfig+0x96>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a17      	ldr	r2, [pc, #92]	; (8006580 <TIM_OC3_SetConfig+0xe8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_OC3_SetConfig+0x96>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a16      	ldr	r2, [pc, #88]	; (8006584 <TIM_OC3_SetConfig+0xec>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d113      	bne.n	8006556 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800

08006588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	031b      	lsls	r3, r3, #12
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a14      	ldr	r2, [pc, #80]	; (8006638 <TIM_OC4_SetConfig+0xb0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d007      	beq.n	80065fc <TIM_OC4_SetConfig+0x74>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a13      	ldr	r2, [pc, #76]	; (800663c <TIM_OC4_SetConfig+0xb4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC4_SetConfig+0x74>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a12      	ldr	r2, [pc, #72]	; (8006640 <TIM_OC4_SetConfig+0xb8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d109      	bne.n	8006610 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	019b      	lsls	r3, r3, #6
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40012c00 	.word	0x40012c00
 800663c:	40014400 	.word	0x40014400
 8006640:	40014800 	.word	0x40014800

08006644 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006688:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a13      	ldr	r2, [pc, #76]	; (80066e8 <TIM_OC5_SetConfig+0xa4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <TIM_OC5_SetConfig+0x6a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a12      	ldr	r2, [pc, #72]	; (80066ec <TIM_OC5_SetConfig+0xa8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_OC5_SetConfig+0x6a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a11      	ldr	r2, [pc, #68]	; (80066f0 <TIM_OC5_SetConfig+0xac>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d109      	bne.n	80066c2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	621a      	str	r2, [r3, #32]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40012c00 	.word	0x40012c00
 80066ec:	40014400 	.word	0x40014400
 80066f0:	40014800 	.word	0x40014800

080066f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800673a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	051b      	lsls	r3, r3, #20
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a14      	ldr	r2, [pc, #80]	; (800679c <TIM_OC6_SetConfig+0xa8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d007      	beq.n	8006760 <TIM_OC6_SetConfig+0x6c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a13      	ldr	r2, [pc, #76]	; (80067a0 <TIM_OC6_SetConfig+0xac>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_OC6_SetConfig+0x6c>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a12      	ldr	r2, [pc, #72]	; (80067a4 <TIM_OC6_SetConfig+0xb0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d109      	bne.n	8006774 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006766:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	029b      	lsls	r3, r3, #10
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40014400 	.word	0x40014400
 80067a4:	40014800 	.word	0x40014800

080067a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0201 	bic.w	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 030a 	bic.w	r3, r3, #10
 80067e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006806:	b480      	push	{r7}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0210 	bic.w	r2, r3, #16
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	031b      	lsls	r3, r3, #12
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006842:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800687c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	f043 0307 	orr.w	r3, r3, #7
 800688c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	021a      	lsls	r2, r3, #8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	609a      	str	r2, [r3, #8]
}
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2201      	movs	r2, #1
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	fa01 f303 	lsl.w	r3, r1, r3
 8006918:	431a      	orrs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006940:	2302      	movs	r3, #2
 8006942:	e04a      	b.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d108      	bne.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006974:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a12      	ldr	r2, [pc, #72]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ac:	d10c      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40012c00 	.word	0x40012c00

080069ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e078      	b.n	8006afa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a20      	ldr	r2, [pc, #128]	; (8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d106      	bne.n	8006a9a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d121      	bne.n	8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	051b      	lsls	r3, r3, #20
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d106      	bne.n	8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40012c00 	.word	0x40012c00

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USB_EnableGlobalInt>:
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006b58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USB_DisableGlobalInt>:
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	4013      	ands	r3, r2
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USB_DevInit>:
 8006bac:	b084      	sub	sp, #16
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	f107 0014 	add.w	r0, r7, #20
 8006bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8006bde:	2300      	movs	r3, #0
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	b004      	add	sp, #16
 8006bec:	4770      	bx	lr
	...

08006bf0 <USB_ActivateEndpoint>:
 8006bf0:	b480      	push	{r7}
 8006bf2:	b09d      	sub	sp, #116	; 0x74
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	78db      	ldrb	r3, [r3, #3]
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d81f      	bhi.n	8006c62 <USB_ActivateEndpoint+0x72>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <USB_ActivateEndpoint+0x38>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c6b 	.word	0x08006c6b
 8006c34:	08006c47 	.word	0x08006c47
 8006c38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c44:	e012      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>
 8006c46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006c4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c52:	e00b      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>
 8006c54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c60:	e004      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006c68:	e000      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>
 8006c6a:	bf00      	nop
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	b21a      	sxth	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b21b      	sxth	r3, r3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	7b1b      	ldrb	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 8178 	bne.w	8006fd2 <USB_ActivateEndpoint+0x3e2>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8084 	beq.w	8006df4 <USB_ActivateEndpoint+0x204>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	88db      	ldrh	r3, [r3, #6]
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	827b      	strh	r3, [r7, #18]
 8006d2e:	8a7b      	ldrh	r3, [r7, #18]
 8006d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01b      	beq.n	8006d70 <USB_ActivateEndpoint+0x180>
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	823b      	strh	r3, [r7, #16]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	8a3b      	ldrh	r3, [r7, #16]
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	78db      	ldrb	r3, [r3, #3]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d020      	beq.n	8006dba <USB_ActivateEndpoint+0x1ca>
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8e:	81bb      	strh	r3, [r7, #12]
 8006d90:	89bb      	ldrh	r3, [r7, #12]
 8006d92:	f083 0320 	eor.w	r3, r3, #32
 8006d96:	81bb      	strh	r3, [r7, #12]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	89bb      	ldrh	r3, [r7, #12]
 8006da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	8013      	strh	r3, [r2, #0]
 8006db8:	e2d5      	b.n	8007366 <USB_ActivateEndpoint+0x776>
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd0:	81fb      	strh	r3, [r7, #14]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	441a      	add	r2, r3
 8006ddc:	89fb      	ldrh	r3, [r7, #14]
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]
 8006df2:	e2b8      	b.n	8007366 <USB_ActivateEndpoint+0x776>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	4413      	add	r3, r2
 8006e06:	633b      	str	r3, [r7, #48]	; 0x30
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	00da      	lsls	r2, r3, #3
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	4413      	add	r3, r2
 8006e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	88db      	ldrh	r3, [r3, #6]
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	801a      	strh	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	4413      	add	r3, r2
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	00da      	lsls	r2, r3, #3
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	4413      	add	r3, r2
 8006e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b3e      	cmp	r3, #62	; 0x3e
 8006e62:	d91d      	bls.n	8006ea0 <USB_ActivateEndpoint+0x2b0>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <USB_ActivateEndpoint+0x28e>
 8006e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	029b      	lsls	r3, r3, #10
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	e026      	b.n	8006eee <USB_ActivateEndpoint+0x2fe>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <USB_ActivateEndpoint+0x2ce>
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e017      	b.n	8006eee <USB_ActivateEndpoint+0x2fe>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <USB_ActivateEndpoint+0x2e8>
 8006ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	029b      	lsls	r3, r3, #10
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	847b      	strh	r3, [r7, #34]	; 0x22
 8006efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01b      	beq.n	8006f3e <USB_ActivateEndpoint+0x34e>
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	843b      	strh	r3, [r7, #32]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	8c3b      	ldrh	r3, [r7, #32]
 8006f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	8013      	strh	r3, [r2, #0]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d124      	bne.n	8006f90 <USB_ActivateEndpoint+0x3a0>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	83bb      	strh	r3, [r7, #28]
 8006f5e:	8bbb      	ldrh	r3, [r7, #28]
 8006f60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f64:	83bb      	strh	r3, [r7, #28]
 8006f66:	8bbb      	ldrh	r3, [r7, #28]
 8006f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f6c:	83bb      	strh	r3, [r7, #28]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8bbb      	ldrh	r3, [r7, #28]
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
 8006f8e:	e1ea      	b.n	8007366 <USB_ActivateEndpoint+0x776>
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa6:	83fb      	strh	r3, [r7, #30]
 8006fa8:	8bfb      	ldrh	r3, [r7, #30]
 8006faa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fae:	83fb      	strh	r3, [r7, #30]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	441a      	add	r2, r3
 8006fba:	8bfb      	ldrh	r3, [r7, #30]
 8006fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	8013      	strh	r3, [r2, #0]
 8006fd0:	e1c9      	b.n	8007366 <USB_ActivateEndpoint+0x776>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	78db      	ldrb	r3, [r3, #3]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d11e      	bne.n	8007018 <USB_ActivateEndpoint+0x428>
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800700e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007012:	b29b      	uxth	r3, r3
 8007014:	8013      	strh	r3, [r2, #0]
 8007016:	e01d      	b.n	8007054 <USB_ActivateEndpoint+0x464>
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007050:	b29b      	uxth	r3, r3
 8007052:	8013      	strh	r3, [r2, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007064:	4413      	add	r3, r2
 8007066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	00da      	lsls	r2, r3, #3
 800706e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007070:	4413      	add	r3, r2
 8007072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007076:	65bb      	str	r3, [r7, #88]	; 0x58
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	891b      	ldrh	r3, [r3, #8]
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	b29b      	uxth	r3, r3
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	657b      	str	r3, [r7, #84]	; 0x54
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007098:	4413      	add	r3, r2
 800709a:	657b      	str	r3, [r7, #84]	; 0x54
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	00da      	lsls	r2, r3, #3
 80070a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070aa:	653b      	str	r3, [r7, #80]	; 0x50
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	895b      	ldrh	r3, [r3, #10]
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ba:	801a      	strh	r2, [r3, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 8093 	bne.w	80071ec <USB_ActivateEndpoint+0x5fc>
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01b      	beq.n	800711a <USB_ActivateEndpoint+0x52a>
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007116:	b29b      	uxth	r3, r3
 8007118:	8013      	strh	r3, [r2, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007128:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01b      	beq.n	800716a <USB_ActivateEndpoint+0x57a>
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007148:	877b      	strh	r3, [r7, #58]	; 0x3a
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007166:	b29b      	uxth	r3, r3
 8007168:	8013      	strh	r3, [r2, #0]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007180:	873b      	strh	r3, [r7, #56]	; 0x38
 8007182:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007188:	873b      	strh	r3, [r7, #56]	; 0x38
 800718a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800718c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007190:	873b      	strh	r3, [r7, #56]	; 0x38
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	441a      	add	r2, r3
 80071d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]
 80071ea:	e0bc      	b.n	8007366 <USB_ActivateEndpoint+0x776>
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01d      	beq.n	8007244 <USB_ActivateEndpoint+0x654>
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	441a      	add	r2, r3
 800722c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	b29b      	uxth	r3, r3
 8007242:	8013      	strh	r3, [r2, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01d      	beq.n	800729c <USB_ActivateEndpoint+0x6ac>
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	441a      	add	r2, r3
 8007284:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007298:	b29b      	uxth	r3, r3
 800729a:	8013      	strh	r3, [r2, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	78db      	ldrb	r3, [r3, #3]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d024      	beq.n	80072ee <USB_ActivateEndpoint+0x6fe>
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072c2:	f083 0320 	eor.w	r3, r3, #32
 80072c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	8013      	strh	r3, [r2, #0]
 80072ec:	e01d      	b.n	800732a <USB_ActivateEndpoint+0x73a>
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007304:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007326:	b29b      	uxth	r3, r3
 8007328:	8013      	strh	r3, [r2, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007340:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
 8007366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800736a:	4618      	mov	r0, r3
 800736c:	3774      	adds	r7, #116	; 0x74
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop

08007378 <USB_DeactivateEndpoint>:
 8007378:	b480      	push	{r7}
 800737a:	b08d      	sub	sp, #52	; 0x34
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	7b1b      	ldrb	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f040 808e 	bne.w	80074a8 <USB_DeactivateEndpoint+0x130>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d044      	beq.n	800741e <USB_DeactivateEndpoint+0xa6>
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	81bb      	strh	r3, [r7, #12]
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <USB_DeactivateEndpoint+0x6c>
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	817b      	strh	r3, [r7, #10]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	441a      	add	r2, r3
 80073ce:	897b      	ldrh	r3, [r7, #10]
 80073d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fa:	813b      	strh	r3, [r7, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
 800741c:	e192      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	827b      	strh	r3, [r7, #18]
 800742c:	8a7b      	ldrh	r3, [r7, #18]
 800742e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01b      	beq.n	800746e <USB_DeactivateEndpoint+0xf6>
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744c:	823b      	strh	r3, [r7, #16]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	8a3b      	ldrh	r3, [r7, #16]
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	81fb      	strh	r3, [r7, #14]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	89fb      	ldrh	r3, [r7, #14]
 8007492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	8013      	strh	r3, [r2, #0]
 80074a6:	e14d      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 80a5 	bne.w	80075fc <USB_DeactivateEndpoint+0x284>
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	843b      	strh	r3, [r7, #32]
 80074c0:	8c3b      	ldrh	r3, [r7, #32]
 80074c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01b      	beq.n	8007502 <USB_DeactivateEndpoint+0x18a>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	83fb      	strh	r3, [r7, #30]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	441a      	add	r2, r3
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	83bb      	strh	r3, [r7, #28]
 8007510:	8bbb      	ldrh	r3, [r7, #28]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01b      	beq.n	8007552 <USB_DeactivateEndpoint+0x1da>
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007530:	837b      	strh	r3, [r7, #26]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	8b7b      	ldrh	r3, [r7, #26]
 800753e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800754e:	b29b      	uxth	r3, r3
 8007550:	8013      	strh	r3, [r2, #0]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007568:	833b      	strh	r3, [r7, #24]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	8b3b      	ldrh	r3, [r7, #24]
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	82fb      	strh	r3, [r7, #22]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	8afb      	ldrh	r3, [r7, #22]
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d8:	82bb      	strh	r3, [r7, #20]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	441a      	add	r2, r3
 80075e4:	8abb      	ldrh	r3, [r7, #20]
 80075e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	8013      	strh	r3, [r2, #0]
 80075fa:	e0a3      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800760a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800760c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01b      	beq.n	800764c <USB_DeactivateEndpoint+0x2d4>
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007648:	b29b      	uxth	r3, r3
 800764a:	8013      	strh	r3, [r2, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	857b      	strh	r3, [r7, #42]	; 0x2a
 800765a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800765c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <USB_DeactivateEndpoint+0x324>
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	853b      	strh	r3, [r7, #40]	; 0x28
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	441a      	add	r2, r3
 8007686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007698:	b29b      	uxth	r3, r3
 800769a:	8013      	strh	r3, [r2, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	847b      	strh	r3, [r7, #34]	; 0x22
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
 8007744:	2300      	movs	r3, #0
 8007746:	4618      	mov	r0, r3
 8007748:	3734      	adds	r7, #52	; 0x34
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_EPStartXfer>:
 8007752:	b580      	push	{r7, lr}
 8007754:	b0c2      	sub	sp, #264	; 0x108
 8007756:	af00      	add	r7, sp, #0
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007760:	6018      	str	r0, [r3, #0]
 8007762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776a:	6019      	str	r1, [r3, #0]
 800776c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	2b01      	cmp	r3, #1
 800777a:	f040 86b7 	bne.w	80084ec <USB_EPStartXfer+0xd9a>
 800777e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	429a      	cmp	r2, r3
 8007798:	d908      	bls.n	80077ac <USB_EPStartXfer+0x5a>
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077aa:	e007      	b.n	80077bc <USB_EPStartXfer+0x6a>
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	7b1b      	ldrb	r3, [r3, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d13a      	bne.n	8007842 <USB_EPStartXfer+0xf0>
 80077cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6959      	ldr	r1, [r3, #20]
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	88da      	ldrh	r2, [r3, #6]
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	f001 fc98 	bl	8009128 <USB_WritePMA>
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	00da      	lsls	r2, r3, #3
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4413      	add	r3, r2
 800782e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	f000 be1f 	b.w	8008480 <USB_EPStartXfer+0xd2e>
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	78db      	ldrb	r3, [r3, #3]
 800784e:	2b02      	cmp	r3, #2
 8007850:	f040 8462 	bne.w	8008118 <USB_EPStartXfer+0x9c6>
 8007854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	429a      	cmp	r2, r3
 800786e:	f240 83df 	bls.w	8008030 <USB_EPStartXfer+0x8de>
 8007872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	441a      	add	r2, r3
 80078b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8013      	strh	r3, [r2, #0]
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6a1a      	ldr	r2, [r3, #32]
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	621a      	str	r2, [r3, #32]
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 81c7 	beq.w	8007ca2 <USB_EPStartXfer+0x550>
 8007914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	633b      	str	r3, [r7, #48]	; 0x30
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d177      	bne.n	8007a20 <USB_EPStartXfer+0x2ce>
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
 800793c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	4413      	add	r3, r2
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
 8007954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00da      	lsls	r2, r3, #3
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	4413      	add	r3, r2
 8007966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29b      	uxth	r3, r3
 8007972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007976:	b29a      	uxth	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007980:	2b3e      	cmp	r3, #62	; 0x3e
 8007982:	d921      	bls.n	80079c8 <USB_EPStartXfer+0x276>
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <USB_EPStartXfer+0x252>
 800799a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800799e:	3b01      	subs	r3, #1
 80079a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	029b      	lsls	r3, r3, #10
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	4313      	orrs	r3, r2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e050      	b.n	8007a6a <USB_EPStartXfer+0x318>
 80079c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <USB_EPStartXfer+0x294>
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079de:	b29a      	uxth	r2, r3
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	e041      	b.n	8007a6a <USB_EPStartXfer+0x318>
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <USB_EPStartXfer+0x2b4>
 80079fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e024      	b.n	8007a6a <USB_EPStartXfer+0x318>
 8007a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d11c      	bne.n	8007a6a <USB_EPStartXfer+0x318>
 8007a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	4413      	add	r3, r2
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	00da      	lsls	r2, r3, #3
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	895b      	ldrh	r3, [r3, #10]
 8007a76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6959      	ldr	r1, [r3, #20]
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a98:	6800      	ldr	r0, [r0, #0]
 8007a9a:	f001 fb45 	bl	8009128 <USB_WritePMA>
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aae:	441a      	add	r2, r3
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	615a      	str	r2, [r3, #20]
 8007abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d90f      	bls.n	8007af8 <USB_EPStartXfer+0x3a6>
 8007ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6a1a      	ldr	r2, [r3, #32]
 8007ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae8:	1ad2      	subs	r2, r2, r3
 8007aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	621a      	str	r2, [r3, #32]
 8007af6:	e00e      	b.n	8007b16 <USB_EPStartXfer+0x3c4>
 8007af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	621a      	str	r2, [r3, #32]
 8007b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d177      	bne.n	8007c16 <USB_EPStartXfer+0x4c4>
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	4413      	add	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00da      	lsls	r2, r3, #3
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b76:	2b3e      	cmp	r3, #62	; 0x3e
 8007b78:	d921      	bls.n	8007bbe <USB_EPStartXfer+0x46c>
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <USB_EPStartXfer+0x448>
 8007b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b94:	3b01      	subs	r3, #1
 8007b96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4313      	orrs	r3, r2
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e056      	b.n	8007c6c <USB_EPStartXfer+0x51a>
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <USB_EPStartXfer+0x48a>
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e047      	b.n	8007c6c <USB_EPStartXfer+0x51a>
 8007bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <USB_EPStartXfer+0x4aa>
 8007bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	029b      	lsls	r3, r3, #10
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e02a      	b.n	8007c6c <USB_EPStartXfer+0x51a>
 8007c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d122      	bne.n	8007c6c <USB_EPStartXfer+0x51a>
 8007c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	461a      	mov	r2, r3
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	4413      	add	r3, r2
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	00da      	lsls	r2, r3, #3
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	801a      	strh	r2, [r3, #0]
 8007c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	891b      	ldrh	r3, [r3, #8]
 8007c78:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8007c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6959      	ldr	r1, [r3, #20]
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c92:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c96:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	f001 fa44 	bl	8009128 <USB_WritePMA>
 8007ca0:	e3ee      	b.n	8008480 <USB_EPStartXfer+0xd2e>
 8007ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d177      	bne.n	8007da2 <USB_EPStartXfer+0x650>
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd2:	4413      	add	r3, r2
 8007cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	00da      	lsls	r2, r3, #3
 8007ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cec:	647b      	str	r3, [r7, #68]	; 0x44
 8007cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d02:	2b3e      	cmp	r3, #62	; 0x3e
 8007d04:	d921      	bls.n	8007d4a <USB_EPStartXfer+0x5f8>
 8007d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <USB_EPStartXfer+0x5d4>
 8007d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d20:	3b01      	subs	r3, #1
 8007d22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	029b      	lsls	r3, r3, #10
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e056      	b.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <USB_EPStartXfer+0x616>
 8007d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e047      	b.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <USB_EPStartXfer+0x636>
 8007d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d82:	3301      	adds	r3, #1
 8007d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	029b      	lsls	r3, r3, #10
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e02a      	b.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	785b      	ldrb	r3, [r3, #1]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d122      	bne.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd2:	4413      	add	r3, r2
 8007dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	00da      	lsls	r2, r3, #3
 8007de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de6:	4413      	add	r3, r2
 8007de8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	891b      	ldrh	r3, [r3, #8]
 8007e04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8007e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6959      	ldr	r1, [r3, #20]
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	f001 f97e 	bl	8009128 <USB_WritePMA>
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3c:	441a      	add	r2, r3
 8007e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	615a      	str	r2, [r3, #20]
 8007e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d90f      	bls.n	8007e86 <USB_EPStartXfer+0x734>
 8007e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a1a      	ldr	r2, [r3, #32]
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e76:	1ad2      	subs	r2, r2, r3
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	621a      	str	r2, [r3, #32]
 8007e84:	e00e      	b.n	8007ea4 <USB_EPStartXfer+0x752>
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	621a      	str	r2, [r3, #32]
 8007ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	643b      	str	r3, [r7, #64]	; 0x40
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d177      	bne.n	8007fb0 <USB_EPStartXfer+0x85e>
 8007ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	4413      	add	r3, r2
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	00da      	lsls	r2, r3, #3
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f10:	2b3e      	cmp	r3, #62	; 0x3e
 8007f12:	d921      	bls.n	8007f58 <USB_EPStartXfer+0x806>
 8007f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <USB_EPStartXfer+0x7e2>
 8007f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	801a      	strh	r2, [r3, #0]
 8007f56:	e050      	b.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <USB_EPStartXfer+0x824>
 8007f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e041      	b.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <USB_EPStartXfer+0x844>
 8007f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f90:	3301      	adds	r3, #1
 8007f92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	e024      	b.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d11c      	bne.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd4:	4413      	add	r3, r2
 8007fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	00da      	lsls	r2, r3, #3
 8007fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe8:	4413      	add	r3, r2
 8007fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	895b      	ldrh	r3, [r3, #10]
 8008006:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800800a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6959      	ldr	r1, [r3, #20]
 8008016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800801a:	b29b      	uxth	r3, r3
 800801c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008020:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008024:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008028:	6800      	ldr	r0, [r0, #0]
 800802a:	f001 f87d 	bl	8009128 <USB_WritePMA>
 800802e:	e227      	b.n	8008480 <USB_EPStartXfer+0xd2e>
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008066:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
 800809c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080bc:	4413      	add	r3, r2
 80080be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	00da      	lsls	r2, r3, #3
 80080ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d0:	4413      	add	r3, r2
 80080d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	891b      	ldrh	r3, [r3, #8]
 80080ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80080f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6959      	ldr	r1, [r3, #20]
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008102:	b29b      	uxth	r3, r3
 8008104:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008108:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800810c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008110:	6800      	ldr	r0, [r0, #0]
 8008112:	f001 f809 	bl	8009128 <USB_WritePMA>
 8008116:	e1b3      	b.n	8008480 <USB_EPStartXfer+0xd2e>
 8008118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6a1a      	ldr	r2, [r3, #32]
 8008124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	621a      	str	r2, [r3, #32]
 8008136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80c6 	beq.w	80082ea <USB_EPStartXfer+0xb98>
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	673b      	str	r3, [r7, #112]	; 0x70
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d177      	bne.n	800826a <USB_EPStartXfer+0xb18>
 800817a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	66bb      	str	r3, [r7, #104]	; 0x68
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008194:	b29b      	uxth	r3, r3
 8008196:	461a      	mov	r2, r3
 8008198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800819a:	4413      	add	r3, r2
 800819c:	66bb      	str	r3, [r7, #104]	; 0x68
 800819e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	00da      	lsls	r2, r3, #3
 80081ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ae:	4413      	add	r3, r2
 80081b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081b4:	667b      	str	r3, [r7, #100]	; 0x64
 80081b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c4:	801a      	strh	r2, [r3, #0]
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ca:	2b3e      	cmp	r3, #62	; 0x3e
 80081cc:	d921      	bls.n	8008212 <USB_EPStartXfer+0xac0>
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <USB_EPStartXfer+0xa9c>
 80081e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081e8:	3b01      	subs	r3, #1
 80081ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	029b      	lsls	r3, r3, #10
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	e050      	b.n	80082b4 <USB_EPStartXfer+0xb62>
 8008212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <USB_EPStartXfer+0xade>
 800821a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008228:	b29a      	uxth	r2, r3
 800822a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800822c:	801a      	strh	r2, [r3, #0]
 800822e:	e041      	b.n	80082b4 <USB_EPStartXfer+0xb62>
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USB_EPStartXfer+0xafe>
 8008246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800824a:	3301      	adds	r3, #1
 800824c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29a      	uxth	r2, r3
 8008256:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800825a:	b29b      	uxth	r3, r3
 800825c:	029b      	lsls	r3, r3, #10
 800825e:	b29b      	uxth	r3, r3
 8008260:	4313      	orrs	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008266:	801a      	strh	r2, [r3, #0]
 8008268:	e024      	b.n	80082b4 <USB_EPStartXfer+0xb62>
 800826a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d11c      	bne.n	80082b4 <USB_EPStartXfer+0xb62>
 800827a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008288:	b29b      	uxth	r3, r3
 800828a:	461a      	mov	r2, r3
 800828c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800828e:	4413      	add	r3, r2
 8008290:	673b      	str	r3, [r7, #112]	; 0x70
 8008292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	00da      	lsls	r2, r3, #3
 80082a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	895b      	ldrh	r3, [r3, #10]
 80082c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	f000 ff20 	bl	8009128 <USB_WritePMA>
 80082e8:	e0ca      	b.n	8008480 <USB_EPStartXfer+0xd2e>
 80082ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d177      	bne.n	80083ea <USB_EPStartXfer+0xc98>
 80082fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800831a:	4413      	add	r3, r2
 800831c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800831e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	00da      	lsls	r2, r3, #3
 800832c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800832e:	4413      	add	r3, r2
 8008330:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008334:	67bb      	str	r3, [r7, #120]	; 0x78
 8008336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008340:	b29a      	uxth	r2, r3
 8008342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800834a:	2b3e      	cmp	r3, #62	; 0x3e
 800834c:	d921      	bls.n	8008392 <USB_EPStartXfer+0xc40>
 800834e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <USB_EPStartXfer+0xc1c>
 8008364:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008368:	3b01      	subs	r3, #1
 800836a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800836e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008378:	b29b      	uxth	r3, r3
 800837a:	029b      	lsls	r3, r3, #10
 800837c:	b29b      	uxth	r3, r3
 800837e:	4313      	orrs	r3, r2
 8008380:	b29b      	uxth	r3, r3
 8008382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838a:	b29a      	uxth	r2, r3
 800838c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800838e:	801a      	strh	r2, [r3, #0]
 8008390:	e05c      	b.n	800844c <USB_EPStartXfer+0xcfa>
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <USB_EPStartXfer+0xc5e>
 800839a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e04d      	b.n	800844c <USB_EPStartXfer+0xcfa>
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <USB_EPStartXfer+0xc7e>
 80083c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083ca:	3301      	adds	r3, #1
 80083cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083da:	b29b      	uxth	r3, r3
 80083dc:	029b      	lsls	r3, r3, #10
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083e6:	801a      	strh	r2, [r3, #0]
 80083e8:	e030      	b.n	800844c <USB_EPStartXfer+0xcfa>
 80083ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d128      	bne.n	800844c <USB_EPStartXfer+0xcfa>
 80083fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008416:	b29b      	uxth	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800841e:	4413      	add	r3, r2
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	00da      	lsls	r2, r3, #3
 8008432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008436:	4413      	add	r3, r2
 8008438:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800843c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	891b      	ldrh	r3, [r3, #8]
 8008458:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800845c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6959      	ldr	r1, [r3, #20]
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846c:	b29b      	uxth	r3, r3
 800846e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008472:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008476:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	f000 fe54 	bl	8009128 <USB_WritePMA>
 8008480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a6:	817b      	strh	r3, [r7, #10]
 80084a8:	897b      	ldrh	r3, [r7, #10]
 80084aa:	f083 0310 	eor.w	r3, r3, #16
 80084ae:	817b      	strh	r3, [r7, #10]
 80084b0:	897b      	ldrh	r3, [r7, #10]
 80084b2:	f083 0320 	eor.w	r3, r3, #32
 80084b6:	817b      	strh	r3, [r7, #10]
 80084b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	441a      	add	r2, r3
 80084d2:	897b      	ldrh	r3, [r7, #10]
 80084d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	8013      	strh	r3, [r2, #0]
 80084e8:	f000 bcde 	b.w	8008ea8 <USB_EPStartXfer+0x1756>
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	7b1b      	ldrb	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f040 80bb 	bne.w	8008674 <USB_EPStartXfer+0xf22>
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	429a      	cmp	r2, r3
 8008518:	d917      	bls.n	800854a <USB_EPStartXfer+0xdf8>
 800851a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800852a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	619a      	str	r2, [r3, #24]
 8008548:	e00e      	b.n	8008568 <USB_EPStartXfer+0xe16>
 800854a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	619a      	str	r2, [r3, #24]
 8008568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008584:	b29b      	uxth	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800858c:	4413      	add	r3, r2
 800858e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	00da      	lsls	r2, r3, #3
 80085a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085a4:	4413      	add	r3, r2
 80085a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c6:	2b3e      	cmp	r3, #62	; 0x3e
 80085c8:	d924      	bls.n	8008614 <USB_EPStartXfer+0xec2>
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ce:	095b      	lsrs	r3, r3, #5
 80085d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USB_EPStartXfer+0xe98>
 80085e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	029b      	lsls	r3, r3, #10
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	f000 bc10 	b.w	8008e34 <USB_EPStartXfer+0x16e2>
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10c      	bne.n	8008636 <USB_EPStartXfer+0xee4>
 800861c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862c:	b29a      	uxth	r2, r3
 800862e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	e3fe      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d004      	beq.n	8008656 <USB_EPStartXfer+0xf04>
 800864c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008650:	3301      	adds	r3, #1
 8008652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29a      	uxth	r2, r3
 800865e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008662:	b29b      	uxth	r3, r3
 8008664:	029b      	lsls	r3, r3, #10
 8008666:	b29b      	uxth	r3, r3
 8008668:	4313      	orrs	r3, r2
 800866a:	b29a      	uxth	r2, r3
 800866c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	e3df      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	78db      	ldrb	r3, [r3, #3]
 8008680:	2b02      	cmp	r3, #2
 8008682:	f040 8218 	bne.w	8008ab6 <USB_EPStartXfer+0x1364>
 8008686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 809d 	bne.w	80087d2 <USB_EPStartXfer+0x1080>
 8008698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	461a      	mov	r2, r3
 80086b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086bc:	4413      	add	r3, r2
 80086be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	00da      	lsls	r2, r3, #3
 80086d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086d4:	4413      	add	r3, r2
 80086d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008700:	d92b      	bls.n	800875a <USB_EPStartXfer+0x1008>
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <USB_EPStartXfer+0xfe0>
 8008728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872c:	3b01      	subs	r3, #1
 800872e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29a      	uxth	r2, r3
 800873a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873e:	b29b      	uxth	r3, r3
 8008740:	029b      	lsls	r3, r3, #10
 8008742:	b29b      	uxth	r3, r3
 8008744:	4313      	orrs	r3, r2
 8008746:	b29b      	uxth	r3, r3
 8008748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008750:	b29a      	uxth	r2, r3
 8008752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	e070      	b.n	800883c <USB_EPStartXfer+0x10ea>
 800875a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10c      	bne.n	8008784 <USB_EPStartXfer+0x1032>
 800876a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877a:	b29a      	uxth	r2, r3
 800877c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008780:	801a      	strh	r2, [r3, #0]
 8008782:	e05b      	b.n	800883c <USB_EPStartXfer+0x10ea>
 8008784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	085b      	lsrs	r3, r3, #1
 8008792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <USB_EPStartXfer+0x1062>
 80087aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ae:	3301      	adds	r3, #1
 80087b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	029b      	lsls	r3, r3, #10
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ce:	801a      	strh	r2, [r3, #0]
 80087d0:	e034      	b.n	800883c <USB_EPStartXfer+0x10ea>
 80087d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d12c      	bne.n	800883c <USB_EPStartXfer+0x10ea>
 80087e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087fe:	b29b      	uxth	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008806:	4413      	add	r3, r2
 8008808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800880c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	00da      	lsls	r2, r3, #3
 800881a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800881e:	4413      	add	r3, r2
 8008820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	b29a      	uxth	r2, r3
 8008836:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800884a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 809d 	bne.w	8008996 <USB_EPStartXfer+0x1244>
 800885c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800886a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008878:	b29b      	uxth	r3, r3
 800887a:	461a      	mov	r2, r3
 800887c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008880:	4413      	add	r3, r2
 8008882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	00da      	lsls	r2, r3, #3
 8008894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008898:	4413      	add	r3, r2
 800889a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800889e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b3e      	cmp	r3, #62	; 0x3e
 80088c4:	d92b      	bls.n	800891e <USB_EPStartXfer+0x11cc>
 80088c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 031f 	and.w	r3, r3, #31
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <USB_EPStartXfer+0x11a4>
 80088ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f0:	3b01      	subs	r3, #1
 80088f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008902:	b29b      	uxth	r3, r3
 8008904:	029b      	lsls	r3, r3, #10
 8008906:	b29b      	uxth	r3, r3
 8008908:	4313      	orrs	r3, r2
 800890a:	b29b      	uxth	r3, r3
 800890c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008914:	b29a      	uxth	r2, r3
 8008916:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800891a:	801a      	strh	r2, [r3, #0]
 800891c:	e069      	b.n	80089f2 <USB_EPStartXfer+0x12a0>
 800891e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10c      	bne.n	8008948 <USB_EPStartXfer+0x11f6>
 800892e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e054      	b.n	80089f2 <USB_EPStartXfer+0x12a0>
 8008948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800895a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <USB_EPStartXfer+0x1226>
 800896e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008972:	3301      	adds	r3, #1
 8008974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	e02d      	b.n	80089f2 <USB_EPStartXfer+0x12a0>
 8008996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d125      	bne.n	80089f2 <USB_EPStartXfer+0x12a0>
 80089a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	461a      	mov	r2, r3
 80089b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089bc:	4413      	add	r3, r2
 80089be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	00da      	lsls	r2, r3, #3
 80089d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089d4:	4413      	add	r3, r2
 80089d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 8218 	beq.w	8008e34 <USB_EPStartXfer+0x16e2>
 8008a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8008a24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <USB_EPStartXfer+0x12ea>
 8008a30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10d      	bne.n	8008a58 <USB_EPStartXfer+0x1306>
 8008a3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f040 81f5 	bne.w	8008e34 <USB_EPStartXfer+0x16e2>
 8008a4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 81ee 	bne.w	8008e34 <USB_EPStartXfer+0x16e2>
 8008a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]
 8008ab4:	e1be      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	78db      	ldrb	r3, [r3, #3]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	f040 81b4 	bne.w	8008e30 <USB_EPStartXfer+0x16de>
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699a      	ldr	r2, [r3, #24]
 8008ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d917      	bls.n	8008b14 <USB_EPStartXfer+0x13c2>
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	699a      	ldr	r2, [r3, #24]
 8008b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	619a      	str	r2, [r3, #24]
 8008b12:	e00e      	b.n	8008b32 <USB_EPStartXfer+0x13e0>
 8008b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	619a      	str	r2, [r3, #24]
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 8085 	bne.w	8008c4e <USB_EPStartXfer+0x14fc>
 8008b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	461a      	mov	r2, r3
 8008b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b68:	4413      	add	r3, r2
 8008b6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	00da      	lsls	r2, r3, #3
 8008b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b80:	4413      	add	r3, r2
 8008b82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ba4:	d923      	bls.n	8008bee <USB_EPStartXfer+0x149c>
 8008ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb4:	f003 031f 	and.w	r3, r3, #31
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <USB_EPStartXfer+0x1474>
 8008bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	029b      	lsls	r3, r3, #10
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bea:	801a      	strh	r2, [r3, #0]
 8008bec:	e060      	b.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10c      	bne.n	8008c10 <USB_EPStartXfer+0x14be>
 8008bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c0c:	801a      	strh	r2, [r3, #0]
 8008c0e:	e04f      	b.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c14:	085b      	lsrs	r3, r3, #1
 8008c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d004      	beq.n	8008c30 <USB_EPStartXfer+0x14de>
 8008c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	029b      	lsls	r3, r3, #10
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	4313      	orrs	r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e030      	b.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d128      	bne.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c82:	4413      	add	r3, r2
 8008c84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	00da      	lsls	r2, r3, #3
 8008c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 8085 	bne.w	8008dda <USB_EPStartXfer+0x1688>
 8008cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	00da      	lsls	r2, r3, #3
 8008d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d28:	801a      	strh	r2, [r3, #0]
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d30:	d923      	bls.n	8008d7a <USB_EPStartXfer+0x1628>
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d40:	f003 031f 	and.w	r3, r3, #31
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d104      	bne.n	8008d52 <USB_EPStartXfer+0x1600>
 8008d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	029b      	lsls	r3, r3, #10
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4313      	orrs	r3, r2
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d76:	801a      	strh	r2, [r3, #0]
 8008d78:	e05c      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10c      	bne.n	8008d9c <USB_EPStartXfer+0x164a>
 8008d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	e04b      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da0:	085b      	lsrs	r3, r3, #1
 8008da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <USB_EPStartXfer+0x166a>
 8008db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008db6:	3301      	adds	r3, #1
 8008db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	029b      	lsls	r3, r3, #10
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	e02c      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d124      	bne.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e00:	4413      	add	r3, r2
 8008e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	00da      	lsls	r2, r3, #3
 8008e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e18:	4413      	add	r3, r2
 8008e1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e001      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e03a      	b.n	8008eaa <USB_EPStartXfer+0x1758>
 8008e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	441a      	add	r2, r3
 8008e90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	8013      	strh	r3, [r2, #0]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USB_EPSetStall>:
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d020      	beq.n	8008f08 <USB_EPSetStall+0x54>
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008edc:	81bb      	strh	r3, [r7, #12]
 8008ede:	89bb      	ldrh	r3, [r7, #12]
 8008ee0:	f083 0310 	eor.w	r3, r3, #16
 8008ee4:	81bb      	strh	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	441a      	add	r2, r3
 8008ef0:	89bb      	ldrh	r3, [r7, #12]
 8008ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	8013      	strh	r3, [r2, #0]
 8008f06:	e01f      	b.n	8008f48 <USB_EPSetStall+0x94>
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1e:	81fb      	strh	r3, [r7, #14]
 8008f20:	89fb      	ldrh	r3, [r7, #14]
 8008f22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f26:	81fb      	strh	r3, [r7, #14]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	441a      	add	r2, r3
 8008f32:	89fb      	ldrh	r3, [r7, #14]
 8008f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	8013      	strh	r3, [r2, #0]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USB_EPClearStall>:
 8008f56:	b480      	push	{r7}
 8008f58:	b087      	sub	sp, #28
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	7b1b      	ldrb	r3, [r3, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f040 809d 	bne.w	80090a4 <USB_EPClearStall+0x14e>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d04c      	beq.n	800900c <USB_EPClearStall+0xb6>
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	823b      	strh	r3, [r7, #16]
 8008f80:	8a3b      	ldrh	r3, [r7, #16]
 8008f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d01b      	beq.n	8008fc2 <USB_EPClearStall+0x6c>
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa0:	81fb      	strh	r3, [r7, #14]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	441a      	add	r2, r3
 8008fac:	89fb      	ldrh	r3, [r7, #14]
 8008fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	8013      	strh	r3, [r2, #0]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	78db      	ldrb	r3, [r3, #3]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d06c      	beq.n	80090a4 <USB_EPClearStall+0x14e>
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe0:	81bb      	strh	r3, [r7, #12]
 8008fe2:	89bb      	ldrh	r3, [r7, #12]
 8008fe4:	f083 0320 	eor.w	r3, r3, #32
 8008fe8:	81bb      	strh	r3, [r7, #12]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	441a      	add	r2, r3
 8008ff4:	89bb      	ldrh	r3, [r7, #12]
 8008ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009006:	b29b      	uxth	r3, r3
 8009008:	8013      	strh	r3, [r2, #0]
 800900a:	e04b      	b.n	80090a4 <USB_EPClearStall+0x14e>
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	82fb      	strh	r3, [r7, #22]
 800901a:	8afb      	ldrh	r3, [r7, #22]
 800901c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01b      	beq.n	800905c <USB_EPClearStall+0x106>
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	82bb      	strh	r3, [r7, #20]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	441a      	add	r2, r3
 8009046:	8abb      	ldrh	r3, [r7, #20]
 8009048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800904c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009058:	b29b      	uxth	r3, r3
 800905a:	8013      	strh	r3, [r2, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800906e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009072:	827b      	strh	r3, [r7, #18]
 8009074:	8a7b      	ldrh	r3, [r7, #18]
 8009076:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800907a:	827b      	strh	r3, [r7, #18]
 800907c:	8a7b      	ldrh	r3, [r7, #18]
 800907e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009082:	827b      	strh	r3, [r7, #18]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	441a      	add	r2, r3
 800908e:	8a7b      	ldrh	r3, [r7, #18]
 8009090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800909c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	8013      	strh	r3, [r2, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_SetDevAddress>:
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d103      	bne.n	80090cc <USB_SetDevAddress+0x1a>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2280      	movs	r2, #128	; 0x80
 80090c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80090cc:	2300      	movs	r3, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USB_DevConnect>:
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80090fa:	2300      	movs	r3, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USB_ReadInterrupts>:
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009116:	b29b      	uxth	r3, r3
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USB_WritePMA>:
 8009128:	b480      	push	{r7}
 800912a:	b08b      	sub	sp, #44	; 0x2c
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	460b      	mov	r3, r1
 8009138:	80fb      	strh	r3, [r7, #6]
 800913a:	4613      	mov	r3, r2
 800913c:	80bb      	strh	r3, [r7, #4]
 800913e:	88bb      	ldrh	r3, [r7, #4]
 8009140:	3301      	adds	r3, #1
 8009142:	085b      	lsrs	r3, r3, #1
 8009144:	61bb      	str	r3, [r7, #24]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	88fa      	ldrh	r2, [r7, #6]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009158:	623b      	str	r3, [r7, #32]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
 800915e:	e01b      	b.n	8009198 <USB_WritePMA+0x70>
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	827b      	strh	r3, [r7, #18]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	3301      	adds	r3, #1
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	b21a      	sxth	r2, r3
 8009170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009174:	4313      	orrs	r3, r2
 8009176:	b21b      	sxth	r3, r3
 8009178:	827b      	strh	r3, [r7, #18]
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	8a7a      	ldrh	r2, [r7, #18]
 800917e:	801a      	strh	r2, [r3, #0]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	3302      	adds	r3, #2
 8009184:	623b      	str	r3, [r7, #32]
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	3301      	adds	r3, #1
 800918a:	61fb      	str	r3, [r7, #28]
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	3301      	adds	r3, #1
 8009190:	61fb      	str	r3, [r7, #28]
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	3b01      	subs	r3, #1
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e0      	bne.n	8009160 <USB_WritePMA+0x38>
 800919e:	bf00      	nop
 80091a0:	bf00      	nop
 80091a2:	372c      	adds	r7, #44	; 0x2c
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_ReadPMA>:
 80091ac:	b480      	push	{r7}
 80091ae:	b08b      	sub	sp, #44	; 0x2c
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	460b      	mov	r3, r1
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	4613      	mov	r3, r2
 80091c0:	80bb      	strh	r3, [r7, #4]
 80091c2:	88bb      	ldrh	r3, [r7, #4]
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091dc:	623b      	str	r3, [r7, #32]
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
 80091e2:	e018      	b.n	8009216 <USB_ReadPMA+0x6a>
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	613b      	str	r3, [r7, #16]
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	3302      	adds	r3, #2
 80091f0:	623b      	str	r3, [r7, #32]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	3301      	adds	r3, #1
 80091fe:	61fb      	str	r3, [r7, #28]
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	b2da      	uxtb	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	3301      	adds	r3, #1
 800920e:	61fb      	str	r3, [r7, #28]
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	3b01      	subs	r3, #1
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e3      	bne.n	80091e4 <USB_ReadPMA+0x38>
 800921c:	88bb      	ldrh	r3, [r7, #4]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	b29b      	uxth	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	d007      	beq.n	8009238 <USB_ReadPMA+0x8c>
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	613b      	str	r3, [r7, #16]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	b2da      	uxtb	r2, r3
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	bf00      	nop
 800923a:	372c      	adds	r7, #44	; 0x2c
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009250:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009254:	f002 fc6e 	bl	800bb34 <USBD_static_malloc>
 8009258:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32b0      	adds	r2, #176	; 0xb0
 800926a:	2100      	movs	r1, #0
 800926c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009270:	2302      	movs	r3, #2
 8009272:	e0d4      	b.n	800941e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009274:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009278:	2100      	movs	r1, #0
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f002 fcce 	bl	800bc1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	32b0      	adds	r2, #176	; 0xb0
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32b0      	adds	r2, #176	; 0xb0
 800929a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7c1b      	ldrb	r3, [r3, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d138      	bne.n	800931e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092ac:	4b5e      	ldr	r3, [pc, #376]	; (8009428 <USBD_CDC_Init+0x1e4>)
 80092ae:	7819      	ldrb	r1, [r3, #0]
 80092b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092b4:	2202      	movs	r2, #2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f002 fae1 	bl	800b87e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092bc:	4b5a      	ldr	r3, [pc, #360]	; (8009428 <USBD_CDC_Init+0x1e4>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 020f 	and.w	r2, r3, #15
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	440b      	add	r3, r1
 80092d0:	3324      	adds	r3, #36	; 0x24
 80092d2:	2201      	movs	r2, #1
 80092d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092d6:	4b55      	ldr	r3, [pc, #340]	; (800942c <USBD_CDC_Init+0x1e8>)
 80092d8:	7819      	ldrb	r1, [r3, #0]
 80092da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092de:	2202      	movs	r2, #2
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f002 facc 	bl	800b87e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092e6:	4b51      	ldr	r3, [pc, #324]	; (800942c <USBD_CDC_Init+0x1e8>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092fe:	2201      	movs	r2, #1
 8009300:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009302:	4b4b      	ldr	r3, [pc, #300]	; (8009430 <USBD_CDC_Init+0x1ec>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 020f 	and.w	r2, r3, #15
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	3326      	adds	r3, #38	; 0x26
 8009318:	2210      	movs	r2, #16
 800931a:	801a      	strh	r2, [r3, #0]
 800931c:	e035      	b.n	800938a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800931e:	4b42      	ldr	r3, [pc, #264]	; (8009428 <USBD_CDC_Init+0x1e4>)
 8009320:	7819      	ldrb	r1, [r3, #0]
 8009322:	2340      	movs	r3, #64	; 0x40
 8009324:	2202      	movs	r2, #2
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f002 faa9 	bl	800b87e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800932c:	4b3e      	ldr	r3, [pc, #248]	; (8009428 <USBD_CDC_Init+0x1e4>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	f003 020f 	and.w	r2, r3, #15
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	2201      	movs	r2, #1
 8009344:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009346:	4b39      	ldr	r3, [pc, #228]	; (800942c <USBD_CDC_Init+0x1e8>)
 8009348:	7819      	ldrb	r1, [r3, #0]
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	2202      	movs	r2, #2
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f002 fa95 	bl	800b87e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009354:	4b35      	ldr	r3, [pc, #212]	; (800942c <USBD_CDC_Init+0x1e8>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 020f 	and.w	r2, r3, #15
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800936c:	2201      	movs	r2, #1
 800936e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009370:	4b2f      	ldr	r3, [pc, #188]	; (8009430 <USBD_CDC_Init+0x1ec>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 020f 	and.w	r2, r3, #15
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	3326      	adds	r3, #38	; 0x26
 8009386:	2210      	movs	r2, #16
 8009388:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800938a:	4b29      	ldr	r3, [pc, #164]	; (8009430 <USBD_CDC_Init+0x1ec>)
 800938c:	7819      	ldrb	r1, [r3, #0]
 800938e:	2308      	movs	r3, #8
 8009390:	2203      	movs	r2, #3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f002 fa73 	bl	800b87e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009398:	4b25      	ldr	r3, [pc, #148]	; (8009430 <USBD_CDC_Init+0x1ec>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 020f 	and.w	r2, r3, #15
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	3324      	adds	r3, #36	; 0x24
 80093ae:	2201      	movs	r2, #1
 80093b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	33b0      	adds	r3, #176	; 0xb0
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093e8:	2302      	movs	r3, #2
 80093ea:	e018      	b.n	800941e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7c1b      	ldrb	r3, [r3, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093f4:	4b0d      	ldr	r3, [pc, #52]	; (800942c <USBD_CDC_Init+0x1e8>)
 80093f6:	7819      	ldrb	r1, [r3, #0]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f002 fb2b 	bl	800ba5e <USBD_LL_PrepareReceive>
 8009408:	e008      	b.n	800941c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800940a:	4b08      	ldr	r3, [pc, #32]	; (800942c <USBD_CDC_Init+0x1e8>)
 800940c:	7819      	ldrb	r1, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f002 fb21 	bl	800ba5e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	200000df 	.word	0x200000df
 800942c:	200000e0 	.word	0x200000e0
 8009430:	200000e1 	.word	0x200000e1

08009434 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009440:	4b3a      	ldr	r3, [pc, #232]	; (800952c <USBD_CDC_DeInit+0xf8>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f002 fa3f 	bl	800b8ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800944c:	4b37      	ldr	r3, [pc, #220]	; (800952c <USBD_CDC_DeInit+0xf8>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 020f 	and.w	r2, r3, #15
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	3324      	adds	r3, #36	; 0x24
 8009462:	2200      	movs	r2, #0
 8009464:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009466:	4b32      	ldr	r3, [pc, #200]	; (8009530 <USBD_CDC_DeInit+0xfc>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f002 fa2c 	bl	800b8ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009472:	4b2f      	ldr	r3, [pc, #188]	; (8009530 <USBD_CDC_DeInit+0xfc>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800948a:	2200      	movs	r2, #0
 800948c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800948e:	4b29      	ldr	r3, [pc, #164]	; (8009534 <USBD_CDC_DeInit+0x100>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f002 fa18 	bl	800b8ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800949a:	4b26      	ldr	r3, [pc, #152]	; (8009534 <USBD_CDC_DeInit+0x100>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f003 020f 	and.w	r2, r3, #15
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	3324      	adds	r3, #36	; 0x24
 80094b0:	2200      	movs	r2, #0
 80094b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80094b4:	4b1f      	ldr	r3, [pc, #124]	; (8009534 <USBD_CDC_DeInit+0x100>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	f003 020f 	and.w	r2, r3, #15
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3326      	adds	r3, #38	; 0x26
 80094ca:	2200      	movs	r2, #0
 80094cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	32b0      	adds	r2, #176	; 0xb0
 80094d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01f      	beq.n	8009520 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	33b0      	adds	r3, #176	; 0xb0
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	32b0      	adds	r2, #176	; 0xb0
 80094fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009502:	4618      	mov	r0, r3
 8009504:	f002 fb24 	bl	800bb50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	32b0      	adds	r2, #176	; 0xb0
 8009512:	2100      	movs	r1, #0
 8009514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	200000df 	.word	0x200000df
 8009530:	200000e0 	.word	0x200000e0
 8009534:	200000e1 	.word	0x200000e1

08009538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	32b0      	adds	r2, #176	; 0xb0
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009552:	2300      	movs	r3, #0
 8009554:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009564:	2303      	movs	r3, #3
 8009566:	e0bf      	b.n	80096e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009570:	2b00      	cmp	r3, #0
 8009572:	d050      	beq.n	8009616 <USBD_CDC_Setup+0xde>
 8009574:	2b20      	cmp	r3, #32
 8009576:	f040 80af 	bne.w	80096d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	88db      	ldrh	r3, [r3, #6]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d03a      	beq.n	80095f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	b25b      	sxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	da1b      	bge.n	80095c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	33b0      	adds	r3, #176	; 0xb0
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80095a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	88d2      	ldrh	r2, [r2, #6]
 80095a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	88db      	ldrh	r3, [r3, #6]
 80095ae:	2b07      	cmp	r3, #7
 80095b0:	bf28      	it	cs
 80095b2:	2307      	movcs	r3, #7
 80095b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	89fa      	ldrh	r2, [r7, #14]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fd21 	bl	800b004 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80095c2:	e090      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	785a      	ldrb	r2, [r3, #1]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b3f      	cmp	r3, #63	; 0x3f
 80095d4:	d803      	bhi.n	80095de <USBD_CDC_Setup+0xa6>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	88db      	ldrh	r3, [r3, #6]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	e000      	b.n	80095e0 <USBD_CDC_Setup+0xa8>
 80095de:	2240      	movs	r2, #64	; 0x40
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095e6:	6939      	ldr	r1, [r7, #16]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80095ee:	461a      	mov	r2, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fd33 	bl	800b05c <USBD_CtlPrepareRx>
      break;
 80095f6:	e076      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	33b0      	adds	r3, #176	; 0xb0
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	7850      	ldrb	r0, [r2, #1]
 800960e:	2200      	movs	r2, #0
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	4798      	blx	r3
      break;
 8009614:	e067      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	785b      	ldrb	r3, [r3, #1]
 800961a:	2b0b      	cmp	r3, #11
 800961c:	d851      	bhi.n	80096c2 <USBD_CDC_Setup+0x18a>
 800961e:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <USBD_CDC_Setup+0xec>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	08009655 	.word	0x08009655
 8009628:	080096d1 	.word	0x080096d1
 800962c:	080096c3 	.word	0x080096c3
 8009630:	080096c3 	.word	0x080096c3
 8009634:	080096c3 	.word	0x080096c3
 8009638:	080096c3 	.word	0x080096c3
 800963c:	080096c3 	.word	0x080096c3
 8009640:	080096c3 	.word	0x080096c3
 8009644:	080096c3 	.word	0x080096c3
 8009648:	080096c3 	.word	0x080096c3
 800964c:	0800967f 	.word	0x0800967f
 8009650:	080096a9 	.word	0x080096a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b03      	cmp	r3, #3
 800965e:	d107      	bne.n	8009670 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009660:	f107 030a 	add.w	r3, r7, #10
 8009664:	2202      	movs	r2, #2
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fccb 	bl	800b004 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800966e:	e032      	b.n	80096d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fc55 	bl	800af22 <USBD_CtlError>
            ret = USBD_FAIL;
 8009678:	2303      	movs	r3, #3
 800967a:	75fb      	strb	r3, [r7, #23]
          break;
 800967c:	e02b      	b.n	80096d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b03      	cmp	r3, #3
 8009688:	d107      	bne.n	800969a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800968a:	f107 030d 	add.w	r3, r7, #13
 800968e:	2201      	movs	r2, #1
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 fcb6 	bl	800b004 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009698:	e01d      	b.n	80096d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 fc40 	bl	800af22 <USBD_CtlError>
            ret = USBD_FAIL;
 80096a2:	2303      	movs	r3, #3
 80096a4:	75fb      	strb	r3, [r7, #23]
          break;
 80096a6:	e016      	b.n	80096d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d00f      	beq.n	80096d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fc33 	bl	800af22 <USBD_CtlError>
            ret = USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096c0:	e008      	b.n	80096d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fc2c 	bl	800af22 <USBD_CtlError>
          ret = USBD_FAIL;
 80096ca:	2303      	movs	r3, #3
 80096cc:	75fb      	strb	r3, [r7, #23]
          break;
 80096ce:	e002      	b.n	80096d6 <USBD_CDC_Setup+0x19e>
          break;
 80096d0:	bf00      	nop
 80096d2:	e008      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>
          break;
 80096d4:	bf00      	nop
      }
      break;
 80096d6:	e006      	b.n	80096e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fc21 	bl	800af22 <USBD_CtlError>
      ret = USBD_FAIL;
 80096e0:	2303      	movs	r3, #3
 80096e2:	75fb      	strb	r3, [r7, #23]
      break;
 80096e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32b0      	adds	r2, #176	; 0xb0
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	e065      	b.n	80097e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	32b0      	adds	r2, #176	; 0xb0
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	f003 020f 	and.w	r2, r3, #15
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	3318      	adds	r3, #24
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d02f      	beq.n	80097a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	f003 020f 	and.w	r2, r3, #15
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	440b      	add	r3, r1
 8009756:	3318      	adds	r3, #24
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	f003 010f 	and.w	r1, r3, #15
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	460b      	mov	r3, r1
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	4403      	add	r3, r0
 800976c:	3338      	adds	r3, #56	; 0x38
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	fbb2 f1f3 	udiv	r1, r2, r3
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800977a:	2b00      	cmp	r3, #0
 800977c:	d112      	bne.n	80097a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	440b      	add	r3, r1
 8009790:	3318      	adds	r3, #24
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009796:	78f9      	ldrb	r1, [r7, #3]
 8009798:	2300      	movs	r3, #0
 800979a:	2200      	movs	r2, #0
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f002 f93d 	bl	800ba1c <USBD_LL_Transmit>
 80097a2:	e01f      	b.n	80097e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	33b0      	adds	r3, #176	; 0xb0
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d010      	beq.n	80097e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	33b0      	adds	r3, #176	; 0xb0
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80097e0:	78fa      	ldrb	r2, [r7, #3]
 80097e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	32b0      	adds	r2, #176	; 0xb0
 8009804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009808:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	32b0      	adds	r2, #176	; 0xb0
 8009814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	e01a      	b.n	8009856 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f002 f93b 	bl	800baa0 <USBD_LL_GetRxDataSize>
 800982a:	4602      	mov	r2, r0
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	33b0      	adds	r3, #176	; 0xb0
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009850:	4611      	mov	r1, r2
 8009852:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	32b0      	adds	r2, #176	; 0xb0
 8009870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800987c:	2303      	movs	r3, #3
 800987e:	e025      	b.n	80098cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	33b0      	adds	r3, #176	; 0xb0
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d01a      	beq.n	80098ca <USBD_CDC_EP0_RxReady+0x6c>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800989a:	2bff      	cmp	r3, #255	; 0xff
 800989c:	d015      	beq.n	80098ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	33b0      	adds	r3, #176	; 0xb0
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80098b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098be:	b292      	uxth	r2, r2
 80098c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	22ff      	movs	r2, #255	; 0xff
 80098c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098dc:	2182      	movs	r1, #130	; 0x82
 80098de:	4818      	ldr	r0, [pc, #96]	; (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098e0:	f000 fcbd 	bl	800a25e <USBD_GetEpDesc>
 80098e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098e6:	2101      	movs	r1, #1
 80098e8:	4815      	ldr	r0, [pc, #84]	; (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098ea:	f000 fcb8 	bl	800a25e <USBD_GetEpDesc>
 80098ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098f0:	2181      	movs	r1, #129	; 0x81
 80098f2:	4813      	ldr	r0, [pc, #76]	; (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098f4:	f000 fcb3 	bl	800a25e <USBD_GetEpDesc>
 80098f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2210      	movs	r2, #16
 8009904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d006      	beq.n	800991a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2200      	movs	r2, #0
 8009910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009914:	711a      	strb	r2, [r3, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009928:	711a      	strb	r2, [r3, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2243      	movs	r2, #67	; 0x43
 8009932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009934:	4b02      	ldr	r3, [pc, #8]	; (8009940 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	2000009c 	.word	0x2000009c

08009944 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800994c:	2182      	movs	r1, #130	; 0x82
 800994e:	4818      	ldr	r0, [pc, #96]	; (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009950:	f000 fc85 	bl	800a25e <USBD_GetEpDesc>
 8009954:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009956:	2101      	movs	r1, #1
 8009958:	4815      	ldr	r0, [pc, #84]	; (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800995a:	f000 fc80 	bl	800a25e <USBD_GetEpDesc>
 800995e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009960:	2181      	movs	r1, #129	; 0x81
 8009962:	4813      	ldr	r0, [pc, #76]	; (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009964:	f000 fc7b 	bl	800a25e <USBD_GetEpDesc>
 8009968:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2210      	movs	r2, #16
 8009974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d006      	beq.n	800998a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2200      	movs	r2, #0
 8009980:	711a      	strb	r2, [r3, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f042 0202 	orr.w	r2, r2, #2
 8009988:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	711a      	strb	r2, [r3, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f042 0202 	orr.w	r2, r2, #2
 800999c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2243      	movs	r2, #67	; 0x43
 80099a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099a4:	4b02      	ldr	r3, [pc, #8]	; (80099b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	2000009c 	.word	0x2000009c

080099b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099bc:	2182      	movs	r1, #130	; 0x82
 80099be:	4818      	ldr	r0, [pc, #96]	; (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099c0:	f000 fc4d 	bl	800a25e <USBD_GetEpDesc>
 80099c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099c6:	2101      	movs	r1, #1
 80099c8:	4815      	ldr	r0, [pc, #84]	; (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099ca:	f000 fc48 	bl	800a25e <USBD_GetEpDesc>
 80099ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099d0:	2181      	movs	r1, #129	; 0x81
 80099d2:	4813      	ldr	r0, [pc, #76]	; (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099d4:	f000 fc43 	bl	800a25e <USBD_GetEpDesc>
 80099d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2210      	movs	r2, #16
 80099e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099f4:	711a      	strb	r2, [r3, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a08:	711a      	strb	r2, [r3, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2243      	movs	r2, #67	; 0x43
 8009a12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a14:	4b02      	ldr	r3, [pc, #8]	; (8009a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	2000009c 	.word	0x2000009c

08009a24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	220a      	movs	r2, #10
 8009a30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a32:	4b03      	ldr	r3, [pc, #12]	; (8009a40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	20000058 	.word	0x20000058

08009a44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e009      	b.n	8009a6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	33b0      	adds	r3, #176	; 0xb0
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	32b0      	adds	r2, #176	; 0xb0
 8009a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e008      	b.n	8009ab0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	32b0      	adds	r2, #176	; 0xb0
 8009ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e004      	b.n	8009aea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
	...

08009af8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32b0      	adds	r2, #176	; 0xb0
 8009b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e025      	b.n	8009b6a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d11f      	bne.n	8009b68 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009b30:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <USBD_CDC_TransmitPacket+0x7c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f003 020f 	and.w	r2, r3, #15
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4403      	add	r3, r0
 8009b4a:	3318      	adds	r3, #24
 8009b4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <USBD_CDC_TransmitPacket+0x7c>)
 8009b50:	7819      	ldrb	r1, [r3, #0]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 ff5c 	bl	800ba1c <USBD_LL_Transmit>

    ret = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200000df 	.word	0x200000df

08009b78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	32b0      	adds	r2, #176	; 0xb0
 8009b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	32b0      	adds	r2, #176	; 0xb0
 8009b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e018      	b.n	8009bd8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7c1b      	ldrb	r3, [r3, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bae:	4b0c      	ldr	r3, [pc, #48]	; (8009be0 <USBD_CDC_ReceivePacket+0x68>)
 8009bb0:	7819      	ldrb	r1, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 ff4e 	bl	800ba5e <USBD_LL_PrepareReceive>
 8009bc2:	e008      	b.n	8009bd6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <USBD_CDC_ReceivePacket+0x68>)
 8009bc6:	7819      	ldrb	r1, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bce:	2340      	movs	r3, #64	; 0x40
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 ff44 	bl	800ba5e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200000e0 	.word	0x200000e0

08009be4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e01f      	b.n	8009c3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	79fa      	ldrb	r2, [r7, #7]
 8009c2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f001 fda7 	bl	800b784 <USBD_LL_Init>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e025      	b.n	8009ca8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	32ae      	adds	r2, #174	; 0xae
 8009c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	32ae      	adds	r2, #174	; 0xae
 8009c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	f107 020e 	add.w	r2, r7, #14
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4798      	blx	r3
 8009c90:	4602      	mov	r2, r0
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 fdc5 	bl	800b848 <USBD_LL_Start>
 8009cbe:	4603      	mov	r3, r0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d009      	beq.n	8009d0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	78fa      	ldrb	r2, [r7, #3]
 8009d02:	4611      	mov	r1, r2
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	78fa      	ldrb	r2, [r7, #3]
 8009d30:	4611      	mov	r1, r2
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	4798      	blx	r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f001 f8a6 	bl	800aeae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d70:	461a      	mov	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d7e:	f003 031f 	and.w	r3, r3, #31
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d01a      	beq.n	8009dbc <USBD_LL_SetupStage+0x72>
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d822      	bhi.n	8009dd0 <USBD_LL_SetupStage+0x86>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <USBD_LL_SetupStage+0x4a>
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d00a      	beq.n	8009da8 <USBD_LL_SetupStage+0x5e>
 8009d92:	e01d      	b.n	8009dd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fad3 	bl	800a348 <USBD_StdDevReq>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
      break;
 8009da6:	e020      	b.n	8009dea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fb3b 	bl	800a42c <USBD_StdItfReq>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dba:	e016      	b.n	8009dea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fb9d 	bl	800a504 <USBD_StdEPReq>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dce:	e00c      	b.n	8009dea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009dd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fd92 	bl	800b908 <USBD_LL_StallEP>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]
      break;
 8009de8:	bf00      	nop
  }

  return ret;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d16e      	bne.n	8009eea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	f040 8098 	bne.w	8009f50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d913      	bls.n	8009e54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	4293      	cmp	r3, r2
 8009e44:	bf28      	it	cs
 8009e46:	4613      	movcs	r3, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f001 f922 	bl	800b096 <USBD_CtlContinueRx>
 8009e52:	e07d      	b.n	8009f50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e5a:	f003 031f 	and.w	r3, r3, #31
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d014      	beq.n	8009e8c <USBD_LL_DataOutStage+0x98>
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d81d      	bhi.n	8009ea2 <USBD_LL_DataOutStage+0xae>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <USBD_LL_DataOutStage+0x7c>
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d003      	beq.n	8009e76 <USBD_LL_DataOutStage+0x82>
 8009e6e:	e018      	b.n	8009ea2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	75bb      	strb	r3, [r7, #22]
            break;
 8009e74:	e018      	b.n	8009ea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 f9d2 	bl	800a22a <USBD_CoreFindIF>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75bb      	strb	r3, [r7, #22]
            break;
 8009e8a:	e00d      	b.n	8009ea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	4619      	mov	r1, r3
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 f9d4 	bl	800a244 <USBD_CoreFindEP>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75bb      	strb	r3, [r7, #22]
            break;
 8009ea0:	e002      	b.n	8009ea8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	75bb      	strb	r3, [r7, #22]
            break;
 8009ea6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ea8:	7dbb      	ldrb	r3, [r7, #22]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d119      	bne.n	8009ee2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d113      	bne.n	8009ee2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009eba:	7dba      	ldrb	r2, [r7, #22]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	32ae      	adds	r2, #174	; 0xae
 8009ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009eca:	7dba      	ldrb	r2, [r7, #22]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ed2:	7dba      	ldrb	r2, [r7, #22]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	32ae      	adds	r2, #174	; 0xae
 8009ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f001 f8e8 	bl	800b0b8 <USBD_CtlSendStatus>
 8009ee8:	e032      	b.n	8009f50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f9a5 	bl	800a244 <USBD_CoreFindEP>
 8009efa:	4603      	mov	r3, r0
 8009efc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009efe:	7dbb      	ldrb	r3, [r7, #22]
 8009f00:	2bff      	cmp	r3, #255	; 0xff
 8009f02:	d025      	beq.n	8009f50 <USBD_LL_DataOutStage+0x15c>
 8009f04:	7dbb      	ldrb	r3, [r7, #22]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d122      	bne.n	8009f50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d117      	bne.n	8009f46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f16:	7dba      	ldrb	r2, [r7, #22]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	32ae      	adds	r2, #174	; 0xae
 8009f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00f      	beq.n	8009f46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f26:	7dba      	ldrb	r2, [r7, #22]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f2e:	7dba      	ldrb	r2, [r7, #22]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	32ae      	adds	r2, #174	; 0xae
 8009f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	7afa      	ldrb	r2, [r7, #11]
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	e000      	b.n	8009f52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b086      	sub	sp, #24
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	460b      	mov	r3, r1
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d16f      	bne.n	800a04e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3314      	adds	r3, #20
 8009f72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d15a      	bne.n	800a034 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	689a      	ldr	r2, [r3, #8]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d914      	bls.n	8009fb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f001 f84a 	bl	800b03a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2100      	movs	r1, #0
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f001 fd56 	bl	800ba5e <USBD_LL_PrepareReceive>
 8009fb2:	e03f      	b.n	800a034 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d11c      	bne.n	8009ffa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d316      	bcc.n	8009ffa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d20f      	bcs.n	8009ffa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2100      	movs	r1, #0
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f001 f82b 	bl	800b03a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fec:	2300      	movs	r3, #0
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f001 fd33 	bl	800ba5e <USBD_LL_PrepareReceive>
 8009ff8:	e01c      	b.n	800a034 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b03      	cmp	r3, #3
 800a004:	d10f      	bne.n	800a026 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d009      	beq.n	800a026 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a026:	2180      	movs	r1, #128	; 0x80
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f001 fc6d 	bl	800b908 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f001 f855 	bl	800b0de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d03a      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff fe42 	bl	8009cc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a04c:	e032      	b.n	800a0b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a04e:	7afb      	ldrb	r3, [r7, #11]
 800a050:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a054:	b2db      	uxtb	r3, r3
 800a056:	4619      	mov	r1, r3
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f8f3 	bl	800a244 <USBD_CoreFindEP>
 800a05e:	4603      	mov	r3, r0
 800a060:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	2bff      	cmp	r3, #255	; 0xff
 800a066:	d025      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d122      	bne.n	800a0b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b03      	cmp	r3, #3
 800a078:	d11c      	bne.n	800a0b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a07a:	7dfa      	ldrb	r2, [r7, #23]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	32ae      	adds	r2, #174	; 0xae
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d014      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a08a:	7dfa      	ldrb	r2, [r7, #23]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a092:	7dfa      	ldrb	r2, [r7, #23]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	32ae      	adds	r2, #174	; 0xae
 800a098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	7afa      	ldrb	r2, [r7, #11]
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	4798      	blx	r3
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a0aa:	7dbb      	ldrb	r3, [r7, #22]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a0b0:	7dbb      	ldrb	r3, [r7, #22]
 800a0b2:	e000      	b.n	800a0b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d014      	beq.n	800a124 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00e      	beq.n	800a124 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	6852      	ldr	r2, [r2, #4]
 800a112:	b2d2      	uxtb	r2, r2
 800a114:	4611      	mov	r1, r2
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	4798      	blx	r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a124:	2340      	movs	r3, #64	; 0x40
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 fba7 	bl	800b87e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2240      	movs	r2, #64	; 0x40
 800a13c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	2200      	movs	r2, #0
 800a144:	2180      	movs	r1, #128	; 0x80
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 fb99 	bl	800b87e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2240      	movs	r2, #64	; 0x40
 800a156:	621a      	str	r2, [r3, #32]

  return ret;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b04      	cmp	r3, #4
 800a194:	d006      	beq.n	800a1a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2204      	movs	r2, #4
 800a1a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b083      	sub	sp, #12
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d106      	bne.n	800a1dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d110      	bne.n	800a220 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a236:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a238:	4618      	mov	r0, r3
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a250:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b086      	sub	sp, #24
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	460b      	mov	r3, r1
 800a268:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	885b      	ldrh	r3, [r3, #2]
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	429a      	cmp	r2, r3
 800a284:	d920      	bls.n	800a2c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a28e:	e013      	b.n	800a2b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a290:	f107 030a 	add.w	r3, r7, #10
 800a294:	4619      	mov	r1, r3
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f000 f81b 	bl	800a2d2 <USBD_GetNextDesc>
 800a29c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	2b05      	cmp	r3, #5
 800a2a4:	d108      	bne.n	800a2b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	78fa      	ldrb	r2, [r7, #3]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d008      	beq.n	800a2c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	885b      	ldrh	r3, [r3, #2]
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	897b      	ldrh	r3, [r7, #10]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d8e5      	bhi.n	800a290 <USBD_GetEpDesc+0x32>
 800a2c4:	e000      	b.n	800a2c8 <USBD_GetEpDesc+0x6a>
          break;
 800a2c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a2c8:	693b      	ldr	r3, [r7, #16]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	881a      	ldrh	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	3301      	adds	r3, #1
 800a322:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a32a:	8a3b      	ldrh	r3, [r7, #16]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	b21a      	sxth	r2, r3
 800a330:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a334:	4313      	orrs	r3, r2
 800a336:	b21b      	sxth	r3, r3
 800a338:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a33a:	89fb      	ldrh	r3, [r7, #14]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	371c      	adds	r7, #28
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a35e:	2b40      	cmp	r3, #64	; 0x40
 800a360:	d005      	beq.n	800a36e <USBD_StdDevReq+0x26>
 800a362:	2b40      	cmp	r3, #64	; 0x40
 800a364:	d857      	bhi.n	800a416 <USBD_StdDevReq+0xce>
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00f      	beq.n	800a38a <USBD_StdDevReq+0x42>
 800a36a:	2b20      	cmp	r3, #32
 800a36c:	d153      	bne.n	800a416 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	32ae      	adds	r2, #174	; 0xae
 800a378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	4798      	blx	r3
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]
      break;
 800a388:	e04a      	b.n	800a420 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	2b09      	cmp	r3, #9
 800a390:	d83b      	bhi.n	800a40a <USBD_StdDevReq+0xc2>
 800a392:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <USBD_StdDevReq+0x50>)
 800a394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a398:	0800a3ed 	.word	0x0800a3ed
 800a39c:	0800a401 	.word	0x0800a401
 800a3a0:	0800a40b 	.word	0x0800a40b
 800a3a4:	0800a3f7 	.word	0x0800a3f7
 800a3a8:	0800a40b 	.word	0x0800a40b
 800a3ac:	0800a3cb 	.word	0x0800a3cb
 800a3b0:	0800a3c1 	.word	0x0800a3c1
 800a3b4:	0800a40b 	.word	0x0800a40b
 800a3b8:	0800a3e3 	.word	0x0800a3e3
 800a3bc:	0800a3d5 	.word	0x0800a3d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa3c 	bl	800a840 <USBD_GetDescriptor>
          break;
 800a3c8:	e024      	b.n	800a414 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fbcb 	bl	800ab68 <USBD_SetAddress>
          break;
 800a3d2:	e01f      	b.n	800a414 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fc0a 	bl	800abf0 <USBD_SetConfig>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
          break;
 800a3e0:	e018      	b.n	800a414 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fcad 	bl	800ad44 <USBD_GetConfig>
          break;
 800a3ea:	e013      	b.n	800a414 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fcde 	bl	800adb0 <USBD_GetStatus>
          break;
 800a3f4:	e00e      	b.n	800a414 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fd0d 	bl	800ae18 <USBD_SetFeature>
          break;
 800a3fe:	e009      	b.n	800a414 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fd31 	bl	800ae6a <USBD_ClrFeature>
          break;
 800a408:	e004      	b.n	800a414 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fd88 	bl	800af22 <USBD_CtlError>
          break;
 800a412:	bf00      	nop
      }
      break;
 800a414:	e004      	b.n	800a420 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fd82 	bl	800af22 <USBD_CtlError>
      break;
 800a41e:	bf00      	nop
  }

  return ret;
 800a420:	7bfb      	ldrb	r3, [r7, #15]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop

0800a42c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a442:	2b40      	cmp	r3, #64	; 0x40
 800a444:	d005      	beq.n	800a452 <USBD_StdItfReq+0x26>
 800a446:	2b40      	cmp	r3, #64	; 0x40
 800a448:	d852      	bhi.n	800a4f0 <USBD_StdItfReq+0xc4>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <USBD_StdItfReq+0x26>
 800a44e:	2b20      	cmp	r3, #32
 800a450:	d14e      	bne.n	800a4f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	3b01      	subs	r3, #1
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d840      	bhi.n	800a4e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	889b      	ldrh	r3, [r3, #4]
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b01      	cmp	r3, #1
 800a468:	d836      	bhi.n	800a4d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	889b      	ldrh	r3, [r3, #4]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff fed9 	bl	800a22a <USBD_CoreFindIF>
 800a478:	4603      	mov	r3, r0
 800a47a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	2bff      	cmp	r3, #255	; 0xff
 800a480:	d01d      	beq.n	800a4be <USBD_StdItfReq+0x92>
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d11a      	bne.n	800a4be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a488:	7bba      	ldrb	r2, [r7, #14]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	32ae      	adds	r2, #174	; 0xae
 800a48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00f      	beq.n	800a4b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a498:	7bba      	ldrb	r2, [r7, #14]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4a0:	7bba      	ldrb	r2, [r7, #14]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	32ae      	adds	r2, #174	; 0xae
 800a4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	4798      	blx	r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4b6:	e004      	b.n	800a4c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4bc:	e001      	b.n	800a4c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	88db      	ldrh	r3, [r3, #6]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d110      	bne.n	800a4ec <USBD_StdItfReq+0xc0>
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10d      	bne.n	800a4ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fdf1 	bl	800b0b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4d6:	e009      	b.n	800a4ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fd21 	bl	800af22 <USBD_CtlError>
          break;
 800a4e0:	e004      	b.n	800a4ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fd1c 	bl	800af22 <USBD_CtlError>
          break;
 800a4ea:	e000      	b.n	800a4ee <USBD_StdItfReq+0xc2>
          break;
 800a4ec:	bf00      	nop
      }
      break;
 800a4ee:	e004      	b.n	800a4fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fd15 	bl	800af22 <USBD_CtlError>
      break;
 800a4f8:	bf00      	nop
  }

  return ret;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	889b      	ldrh	r3, [r3, #4]
 800a516:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a520:	2b40      	cmp	r3, #64	; 0x40
 800a522:	d007      	beq.n	800a534 <USBD_StdEPReq+0x30>
 800a524:	2b40      	cmp	r3, #64	; 0x40
 800a526:	f200 817f 	bhi.w	800a828 <USBD_StdEPReq+0x324>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d02a      	beq.n	800a584 <USBD_StdEPReq+0x80>
 800a52e:	2b20      	cmp	r3, #32
 800a530:	f040 817a 	bne.w	800a828 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff fe83 	bl	800a244 <USBD_CoreFindEP>
 800a53e:	4603      	mov	r3, r0
 800a540:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a542:	7b7b      	ldrb	r3, [r7, #13]
 800a544:	2bff      	cmp	r3, #255	; 0xff
 800a546:	f000 8174 	beq.w	800a832 <USBD_StdEPReq+0x32e>
 800a54a:	7b7b      	ldrb	r3, [r7, #13]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 8170 	bne.w	800a832 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a552:	7b7a      	ldrb	r2, [r7, #13]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a55a:	7b7a      	ldrb	r2, [r7, #13]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	32ae      	adds	r2, #174	; 0xae
 800a560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 8163 	beq.w	800a832 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a56c:	7b7a      	ldrb	r2, [r7, #13]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	32ae      	adds	r2, #174	; 0xae
 800a572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	4798      	blx	r3
 800a57e:	4603      	mov	r3, r0
 800a580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a582:	e156      	b.n	800a832 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d008      	beq.n	800a59e <USBD_StdEPReq+0x9a>
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	f300 8145 	bgt.w	800a81c <USBD_StdEPReq+0x318>
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 809b 	beq.w	800a6ce <USBD_StdEPReq+0x1ca>
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d03c      	beq.n	800a616 <USBD_StdEPReq+0x112>
 800a59c:	e13e      	b.n	800a81c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d002      	beq.n	800a5b0 <USBD_StdEPReq+0xac>
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d016      	beq.n	800a5dc <USBD_StdEPReq+0xd8>
 800a5ae:	e02c      	b.n	800a60a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <USBD_StdEPReq+0xce>
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b80      	cmp	r3, #128	; 0x80
 800a5ba:	d00a      	beq.n	800a5d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 f9a1 	bl	800b908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c6:	2180      	movs	r1, #128	; 0x80
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 f99d 	bl	800b908 <USBD_LL_StallEP>
 800a5ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5d0:	e020      	b.n	800a614 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fca4 	bl	800af22 <USBD_CtlError>
              break;
 800a5da:	e01b      	b.n	800a614 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	885b      	ldrh	r3, [r3, #2]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10e      	bne.n	800a602 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00b      	beq.n	800a602 <USBD_StdEPReq+0xfe>
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
 800a5ec:	2b80      	cmp	r3, #128	; 0x80
 800a5ee:	d008      	beq.n	800a602 <USBD_StdEPReq+0xfe>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	88db      	ldrh	r3, [r3, #6]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d104      	bne.n	800a602 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 f983 	bl	800b908 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fd58 	bl	800b0b8 <USBD_CtlSendStatus>

              break;
 800a608:	e004      	b.n	800a614 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fc88 	bl	800af22 <USBD_CtlError>
              break;
 800a612:	bf00      	nop
          }
          break;
 800a614:	e107      	b.n	800a826 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d002      	beq.n	800a628 <USBD_StdEPReq+0x124>
 800a622:	2b03      	cmp	r3, #3
 800a624:	d016      	beq.n	800a654 <USBD_StdEPReq+0x150>
 800a626:	e04b      	b.n	800a6c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00d      	beq.n	800a64a <USBD_StdEPReq+0x146>
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	2b80      	cmp	r3, #128	; 0x80
 800a632:	d00a      	beq.n	800a64a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 f965 	bl	800b908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a63e:	2180      	movs	r1, #128	; 0x80
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 f961 	bl	800b908 <USBD_LL_StallEP>
 800a646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a648:	e040      	b.n	800a6cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fc68 	bl	800af22 <USBD_CtlError>
              break;
 800a652:	e03b      	b.n	800a6cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	885b      	ldrh	r3, [r3, #2]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d136      	bne.n	800a6ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
 800a65e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a662:	2b00      	cmp	r3, #0
 800a664:	d004      	beq.n	800a670 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 f96b 	bl	800b946 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fd21 	bl	800b0b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fde2 	bl	800a244 <USBD_CoreFindEP>
 800a680:	4603      	mov	r3, r0
 800a682:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a684:	7b7b      	ldrb	r3, [r7, #13]
 800a686:	2bff      	cmp	r3, #255	; 0xff
 800a688:	d01f      	beq.n	800a6ca <USBD_StdEPReq+0x1c6>
 800a68a:	7b7b      	ldrb	r3, [r7, #13]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d11c      	bne.n	800a6ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a690:	7b7a      	ldrb	r2, [r7, #13]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a698:	7b7a      	ldrb	r2, [r7, #13]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	32ae      	adds	r2, #174	; 0xae
 800a69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d010      	beq.n	800a6ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a6a8:	7b7a      	ldrb	r2, [r7, #13]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	32ae      	adds	r2, #174	; 0xae
 800a6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a6be:	e004      	b.n	800a6ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fc2d 	bl	800af22 <USBD_CtlError>
              break;
 800a6c8:	e000      	b.n	800a6cc <USBD_StdEPReq+0x1c8>
              break;
 800a6ca:	bf00      	nop
          }
          break;
 800a6cc:	e0ab      	b.n	800a826 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d002      	beq.n	800a6e0 <USBD_StdEPReq+0x1dc>
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d032      	beq.n	800a744 <USBD_StdEPReq+0x240>
 800a6de:	e097      	b.n	800a810 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d007      	beq.n	800a6f6 <USBD_StdEPReq+0x1f2>
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b80      	cmp	r3, #128	; 0x80
 800a6ea:	d004      	beq.n	800a6f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fc17 	bl	800af22 <USBD_CtlError>
                break;
 800a6f4:	e091      	b.n	800a81a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	da0b      	bge.n	800a716 <USBD_StdEPReq+0x212>
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a704:	4613      	mov	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	3310      	adds	r3, #16
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	4413      	add	r3, r2
 800a712:	3304      	adds	r3, #4
 800a714:	e00b      	b.n	800a72e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	4413      	add	r3, r2
 800a72c:	3304      	adds	r3, #4
 800a72e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2202      	movs	r2, #2
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fc61 	bl	800b004 <USBD_CtlSendData>
              break;
 800a742:	e06a      	b.n	800a81a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	da11      	bge.n	800a770 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	f003 020f 	and.w	r2, r3, #15
 800a752:	6879      	ldr	r1, [r7, #4]
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	440b      	add	r3, r1
 800a75e:	3324      	adds	r3, #36	; 0x24
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d117      	bne.n	800a796 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fbda 	bl	800af22 <USBD_CtlError>
                  break;
 800a76e:	e054      	b.n	800a81a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	f003 020f 	and.w	r2, r3, #15
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	4613      	mov	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	440b      	add	r3, r1
 800a782:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d104      	bne.n	800a796 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fbc7 	bl	800af22 <USBD_CtlError>
                  break;
 800a794:	e041      	b.n	800a81a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	da0b      	bge.n	800a7b6 <USBD_StdEPReq+0x2b2>
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	3310      	adds	r3, #16
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	e00b      	b.n	800a7ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7b6:	7bbb      	ldrb	r3, [r7, #14]
 800a7b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <USBD_StdEPReq+0x2d8>
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	2b80      	cmp	r3, #128	; 0x80
 800a7da:	d103      	bne.n	800a7e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e00e      	b.n	800a802 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 f8cb 	bl	800b984 <USBD_LL_IsStallEP>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	e002      	b.n	800a802 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2200      	movs	r2, #0
 800a800:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2202      	movs	r2, #2
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fbfb 	bl	800b004 <USBD_CtlSendData>
              break;
 800a80e:	e004      	b.n	800a81a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fb85 	bl	800af22 <USBD_CtlError>
              break;
 800a818:	bf00      	nop
          }
          break;
 800a81a:	e004      	b.n	800a826 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fb7f 	bl	800af22 <USBD_CtlError>
          break;
 800a824:	bf00      	nop
      }
      break;
 800a826:	e005      	b.n	800a834 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fb79 	bl	800af22 <USBD_CtlError>
      break;
 800a830:	e000      	b.n	800a834 <USBD_StdEPReq+0x330>
      break;
 800a832:	bf00      	nop
  }

  return ret;
 800a834:	7bfb      	ldrb	r3, [r7, #15]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	885b      	ldrh	r3, [r3, #2]
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	2b0e      	cmp	r3, #14
 800a862:	f200 8152 	bhi.w	800ab0a <USBD_GetDescriptor+0x2ca>
 800a866:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <USBD_GetDescriptor+0x2c>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a8dd 	.word	0x0800a8dd
 800a870:	0800a8f5 	.word	0x0800a8f5
 800a874:	0800a935 	.word	0x0800a935
 800a878:	0800ab0b 	.word	0x0800ab0b
 800a87c:	0800ab0b 	.word	0x0800ab0b
 800a880:	0800aaab 	.word	0x0800aaab
 800a884:	0800aad7 	.word	0x0800aad7
 800a888:	0800ab0b 	.word	0x0800ab0b
 800a88c:	0800ab0b 	.word	0x0800ab0b
 800a890:	0800ab0b 	.word	0x0800ab0b
 800a894:	0800ab0b 	.word	0x0800ab0b
 800a898:	0800ab0b 	.word	0x0800ab0b
 800a89c:	0800ab0b 	.word	0x0800ab0b
 800a8a0:	0800ab0b 	.word	0x0800ab0b
 800a8a4:	0800a8a9 	.word	0x0800a8a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00b      	beq.n	800a8cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	7c12      	ldrb	r2, [r2, #16]
 800a8c0:	f107 0108 	add.w	r1, r7, #8
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	4798      	blx	r3
 800a8c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8ca:	e126      	b.n	800ab1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fb27 	bl	800af22 <USBD_CtlError>
        err++;
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	72fb      	strb	r3, [r7, #11]
      break;
 800a8da:	e11e      	b.n	800ab1a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	7c12      	ldrb	r2, [r2, #16]
 800a8e8:	f107 0108 	add.w	r1, r7, #8
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	4798      	blx	r3
 800a8f0:	60f8      	str	r0, [r7, #12]
      break;
 800a8f2:	e112      	b.n	800ab1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7c1b      	ldrb	r3, [r3, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10d      	bne.n	800a918 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a904:	f107 0208 	add.w	r2, r7, #8
 800a908:	4610      	mov	r0, r2
 800a90a:	4798      	blx	r3
 800a90c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3301      	adds	r3, #1
 800a912:	2202      	movs	r2, #2
 800a914:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a916:	e100      	b.n	800ab1a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	f107 0208 	add.w	r2, r7, #8
 800a924:	4610      	mov	r0, r2
 800a926:	4798      	blx	r3
 800a928:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3301      	adds	r3, #1
 800a92e:	2202      	movs	r2, #2
 800a930:	701a      	strb	r2, [r3, #0]
      break;
 800a932:	e0f2      	b.n	800ab1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	885b      	ldrh	r3, [r3, #2]
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	f200 80ac 	bhi.w	800aa98 <USBD_GetDescriptor+0x258>
 800a940:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <USBD_GetDescriptor+0x108>)
 800a942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a946:	bf00      	nop
 800a948:	0800a961 	.word	0x0800a961
 800a94c:	0800a995 	.word	0x0800a995
 800a950:	0800a9c9 	.word	0x0800a9c9
 800a954:	0800a9fd 	.word	0x0800a9fd
 800a958:	0800aa31 	.word	0x0800aa31
 800a95c:	0800aa65 	.word	0x0800aa65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00b      	beq.n	800a984 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	7c12      	ldrb	r2, [r2, #16]
 800a978:	f107 0108 	add.w	r1, r7, #8
 800a97c:	4610      	mov	r0, r2
 800a97e:	4798      	blx	r3
 800a980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a982:	e091      	b.n	800aaa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 facb 	bl	800af22 <USBD_CtlError>
            err++;
 800a98c:	7afb      	ldrb	r3, [r7, #11]
 800a98e:	3301      	adds	r3, #1
 800a990:	72fb      	strb	r3, [r7, #11]
          break;
 800a992:	e089      	b.n	800aaa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	7c12      	ldrb	r2, [r2, #16]
 800a9ac:	f107 0108 	add.w	r1, r7, #8
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	4798      	blx	r3
 800a9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9b6:	e077      	b.n	800aaa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fab1 	bl	800af22 <USBD_CtlError>
            err++;
 800a9c0:	7afb      	ldrb	r3, [r7, #11]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9c6:	e06f      	b.n	800aaa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	7c12      	ldrb	r2, [r2, #16]
 800a9e0:	f107 0108 	add.w	r1, r7, #8
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	4798      	blx	r3
 800a9e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ea:	e05d      	b.n	800aaa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fa97 	bl	800af22 <USBD_CtlError>
            err++;
 800a9f4:	7afb      	ldrb	r3, [r7, #11]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9fa:	e055      	b.n	800aaa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	7c12      	ldrb	r2, [r2, #16]
 800aa14:	f107 0108 	add.w	r1, r7, #8
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4798      	blx	r3
 800aa1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa1e:	e043      	b.n	800aaa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fa7d 	bl	800af22 <USBD_CtlError>
            err++;
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa2e:	e03b      	b.n	800aaa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00b      	beq.n	800aa54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	7c12      	ldrb	r2, [r2, #16]
 800aa48:	f107 0108 	add.w	r1, r7, #8
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4798      	blx	r3
 800aa50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa52:	e029      	b.n	800aaa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fa63 	bl	800af22 <USBD_CtlError>
            err++;
 800aa5c:	7afb      	ldrb	r3, [r7, #11]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	72fb      	strb	r3, [r7, #11]
          break;
 800aa62:	e021      	b.n	800aaa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	7c12      	ldrb	r2, [r2, #16]
 800aa7c:	f107 0108 	add.w	r1, r7, #8
 800aa80:	4610      	mov	r0, r2
 800aa82:	4798      	blx	r3
 800aa84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa86:	e00f      	b.n	800aaa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fa49 	bl	800af22 <USBD_CtlError>
            err++;
 800aa90:	7afb      	ldrb	r3, [r7, #11]
 800aa92:	3301      	adds	r3, #1
 800aa94:	72fb      	strb	r3, [r7, #11]
          break;
 800aa96:	e007      	b.n	800aaa8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa41 	bl	800af22 <USBD_CtlError>
          err++;
 800aaa0:	7afb      	ldrb	r3, [r7, #11]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aaa6:	bf00      	nop
      }
      break;
 800aaa8:	e037      	b.n	800ab1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	7c1b      	ldrb	r3, [r3, #16]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d109      	bne.n	800aac6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaba:	f107 0208 	add.w	r2, r7, #8
 800aabe:	4610      	mov	r0, r2
 800aac0:	4798      	blx	r3
 800aac2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aac4:	e029      	b.n	800ab1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fa2a 	bl	800af22 <USBD_CtlError>
        err++;
 800aace:	7afb      	ldrb	r3, [r7, #11]
 800aad0:	3301      	adds	r3, #1
 800aad2:	72fb      	strb	r3, [r7, #11]
      break;
 800aad4:	e021      	b.n	800ab1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7c1b      	ldrb	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10d      	bne.n	800aafa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	f107 0208 	add.w	r2, r7, #8
 800aaea:	4610      	mov	r0, r2
 800aaec:	4798      	blx	r3
 800aaee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	2207      	movs	r2, #7
 800aaf6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaf8:	e00f      	b.n	800ab1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fa10 	bl	800af22 <USBD_CtlError>
        err++;
 800ab02:	7afb      	ldrb	r3, [r7, #11]
 800ab04:	3301      	adds	r3, #1
 800ab06:	72fb      	strb	r3, [r7, #11]
      break;
 800ab08:	e007      	b.n	800ab1a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fa08 	bl	800af22 <USBD_CtlError>
      err++;
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	3301      	adds	r3, #1
 800ab16:	72fb      	strb	r3, [r7, #11]
      break;
 800ab18:	bf00      	nop
  }

  if (err != 0U)
 800ab1a:	7afb      	ldrb	r3, [r7, #11]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d11e      	bne.n	800ab5e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	88db      	ldrh	r3, [r3, #6]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d016      	beq.n	800ab56 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab28:	893b      	ldrh	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00e      	beq.n	800ab4c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	88da      	ldrh	r2, [r3, #6]
 800ab32:	893b      	ldrh	r3, [r7, #8]
 800ab34:	4293      	cmp	r3, r2
 800ab36:	bf28      	it	cs
 800ab38:	4613      	movcs	r3, r2
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab3e:	893b      	ldrh	r3, [r7, #8]
 800ab40:	461a      	mov	r2, r3
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fa5d 	bl	800b004 <USBD_CtlSendData>
 800ab4a:	e009      	b.n	800ab60 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9e7 	bl	800af22 <USBD_CtlError>
 800ab54:	e004      	b.n	800ab60 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 faae 	bl	800b0b8 <USBD_CtlSendStatus>
 800ab5c:	e000      	b.n	800ab60 <USBD_GetDescriptor+0x320>
    return;
 800ab5e:	bf00      	nop
  }
}
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop

0800ab68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	889b      	ldrh	r3, [r3, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d131      	bne.n	800abde <USBD_SetAddress+0x76>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	88db      	ldrh	r3, [r3, #6]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d12d      	bne.n	800abde <USBD_SetAddress+0x76>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	885b      	ldrh	r3, [r3, #2]
 800ab86:	2b7f      	cmp	r3, #127	; 0x7f
 800ab88:	d829      	bhi.n	800abde <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	885b      	ldrh	r3, [r3, #2]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d104      	bne.n	800abac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f9bc 	bl	800af22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abaa:	e01d      	b.n	800abe8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7bfa      	ldrb	r2, [r7, #15]
 800abb0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 ff10 	bl	800b9de <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fa7a 	bl	800b0b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2202      	movs	r2, #2
 800abce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd2:	e009      	b.n	800abe8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abdc:	e004      	b.n	800abe8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 f99e 	bl	800af22 <USBD_CtlError>
  }
}
 800abe6:	bf00      	nop
 800abe8:	bf00      	nop
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	4b4e      	ldr	r3, [pc, #312]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac08:	4b4d      	ldr	r3, [pc, #308]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d905      	bls.n	800ac1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f985 	bl	800af22 <USBD_CtlError>
    return USBD_FAIL;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e08c      	b.n	800ad36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d002      	beq.n	800ac2e <USBD_SetConfig+0x3e>
 800ac28:	2b03      	cmp	r3, #3
 800ac2a:	d029      	beq.n	800ac80 <USBD_SetConfig+0x90>
 800ac2c:	e075      	b.n	800ad1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac2e:	4b44      	ldr	r3, [pc, #272]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d020      	beq.n	800ac78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac36:	4b42      	ldr	r3, [pc, #264]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac40:	4b3f      	ldr	r3, [pc, #252]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff f849 	bl	8009cde <USBD_SetClassConfig>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d008      	beq.n	800ac68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f962 	bl	800af22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2202      	movs	r2, #2
 800ac62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac66:	e065      	b.n	800ad34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fa25 	bl	800b0b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2203      	movs	r2, #3
 800ac72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac76:	e05d      	b.n	800ad34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fa1d 	bl	800b0b8 <USBD_CtlSendStatus>
      break;
 800ac7e:	e059      	b.n	800ad34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac80:	4b2f      	ldr	r3, [pc, #188]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d112      	bne.n	800acae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac90:	4b2b      	ldr	r3, [pc, #172]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac9a:	4b29      	ldr	r3, [pc, #164]	; (800ad40 <USBD_SetConfig+0x150>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7ff f838 	bl	8009d16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa06 	bl	800b0b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acac:	e042      	b.n	800ad34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800acae:	4b24      	ldr	r3, [pc, #144]	; (800ad40 <USBD_SetConfig+0x150>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d02a      	beq.n	800ad12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff f826 	bl	8009d16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acca:	4b1d      	ldr	r3, [pc, #116]	; (800ad40 <USBD_SetConfig+0x150>)
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acd4:	4b1a      	ldr	r3, [pc, #104]	; (800ad40 <USBD_SetConfig+0x150>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7fe ffff 	bl	8009cde <USBD_SetClassConfig>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00f      	beq.n	800ad0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f918 	bl	800af22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff f80b 	bl	8009d16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2202      	movs	r2, #2
 800ad04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad08:	e014      	b.n	800ad34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f9d4 	bl	800b0b8 <USBD_CtlSendStatus>
      break;
 800ad10:	e010      	b.n	800ad34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f9d0 	bl	800b0b8 <USBD_CtlSendStatus>
      break;
 800ad18:	e00c      	b.n	800ad34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f900 	bl	800af22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad22:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <USBD_SetConfig+0x150>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7fe fff4 	bl	8009d16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	73fb      	strb	r3, [r7, #15]
      break;
 800ad32:	bf00      	nop
  }

  return ret;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	2000031c 	.word	0x2000031c

0800ad44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	88db      	ldrh	r3, [r3, #6]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d004      	beq.n	800ad60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f8e2 	bl	800af22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad5e:	e023      	b.n	800ada8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	dc02      	bgt.n	800ad72 <USBD_GetConfig+0x2e>
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dc03      	bgt.n	800ad78 <USBD_GetConfig+0x34>
 800ad70:	e015      	b.n	800ad9e <USBD_GetConfig+0x5a>
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d00b      	beq.n	800ad8e <USBD_GetConfig+0x4a>
 800ad76:	e012      	b.n	800ad9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3308      	adds	r3, #8
 800ad82:	2201      	movs	r2, #1
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f93c 	bl	800b004 <USBD_CtlSendData>
        break;
 800ad8c:	e00c      	b.n	800ada8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3304      	adds	r3, #4
 800ad92:	2201      	movs	r2, #1
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f934 	bl	800b004 <USBD_CtlSendData>
        break;
 800ad9c:	e004      	b.n	800ada8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f8be 	bl	800af22 <USBD_CtlError>
        break;
 800ada6:	bf00      	nop
}
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	3b01      	subs	r3, #1
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d81e      	bhi.n	800ae06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	88db      	ldrh	r3, [r3, #6]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d004      	beq.n	800adda <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f8a5 	bl	800af22 <USBD_CtlError>
        break;
 800add8:	e01a      	b.n	800ae10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d005      	beq.n	800adf6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f043 0202 	orr.w	r2, r3, #2
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	330c      	adds	r3, #12
 800adfa:	2202      	movs	r2, #2
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f900 	bl	800b004 <USBD_CtlSendData>
      break;
 800ae04:	e004      	b.n	800ae10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f88a 	bl	800af22 <USBD_CtlError>
      break;
 800ae0e:	bf00      	nop
  }
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d107      	bne.n	800ae3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f940 	bl	800b0b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae38:	e013      	b.n	800ae62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	885b      	ldrh	r3, [r3, #2]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d10b      	bne.n	800ae5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	889b      	ldrh	r3, [r3, #4]
 800ae46:	0a1b      	lsrs	r3, r3, #8
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f930 	bl	800b0b8 <USBD_CtlSendStatus>
}
 800ae58:	e003      	b.n	800ae62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f860 	bl	800af22 <USBD_CtlError>
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d80b      	bhi.n	800ae9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	885b      	ldrh	r3, [r3, #2]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d10c      	bne.n	800aea4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f910 	bl	800b0b8 <USBD_CtlSendStatus>
      }
      break;
 800ae98:	e004      	b.n	800aea4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f840 	bl	800af22 <USBD_CtlError>
      break;
 800aea2:	e000      	b.n	800aea6 <USBD_ClrFeature+0x3c>
      break;
 800aea4:	bf00      	nop
  }
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	781a      	ldrb	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3301      	adds	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	781a      	ldrb	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f7ff fa17 	bl	800a30c <SWAPBYTE>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3301      	adds	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3301      	adds	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fa0a 	bl	800a30c <SWAPBYTE>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	3301      	adds	r3, #1
 800af04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7ff f9fd 	bl	800a30c <SWAPBYTE>
 800af12:	4603      	mov	r3, r0
 800af14:	461a      	mov	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	80da      	strh	r2, [r3, #6]
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af2c:	2180      	movs	r1, #128	; 0x80
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fcea 	bl	800b908 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af34:	2100      	movs	r1, #0
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fce6 	bl	800b908 <USBD_LL_StallEP>
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af50:	2300      	movs	r3, #0
 800af52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d036      	beq.n	800afc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af5e:	6938      	ldr	r0, [r7, #16]
 800af60:	f000 f836 	bl	800afd0 <USBD_GetLen>
 800af64:	4603      	mov	r3, r0
 800af66:	3301      	adds	r3, #1
 800af68:	b29b      	uxth	r3, r3
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	4413      	add	r3, r2
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	7812      	ldrb	r2, [r2, #0]
 800af7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
 800af80:	3301      	adds	r3, #1
 800af82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af84:	7dfb      	ldrb	r3, [r7, #23]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	4413      	add	r3, r2
 800af8a:	2203      	movs	r2, #3
 800af8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	3301      	adds	r3, #1
 800af92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af94:	e013      	b.n	800afbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	4413      	add	r3, r2
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	7812      	ldrb	r2, [r2, #0]
 800afa0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	3301      	adds	r3, #1
 800afa6:	613b      	str	r3, [r7, #16]
    idx++;
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
 800afaa:	3301      	adds	r3, #1
 800afac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800afae:	7dfb      	ldrb	r3, [r7, #23]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	4413      	add	r3, r2
 800afb4:	2200      	movs	r2, #0
 800afb6:	701a      	strb	r2, [r3, #0]
    idx++;
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	3301      	adds	r3, #1
 800afbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1e7      	bne.n	800af96 <USBD_GetString+0x52>
 800afc6:	e000      	b.n	800afca <USBD_GetString+0x86>
    return;
 800afc8:	bf00      	nop
  }
}
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800afe0:	e005      	b.n	800afee <USBD_GetLen+0x1e>
  {
    len++;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	3301      	adds	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	3301      	adds	r3, #1
 800afec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1f5      	bne.n	800afe2 <USBD_GetLen+0x12>
  }

  return len;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2202      	movs	r2, #2
 800b014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	2100      	movs	r1, #0
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 fcf6 	bl	800ba1c <USBD_LL_Transmit>

  return USBD_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	2100      	movs	r1, #0
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 fce5 	bl	800ba1c <USBD_LL_Transmit>

  return USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2203      	movs	r2, #3
 800b06c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	2100      	movs	r1, #0
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 fce9 	bl	800ba5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 fcd8 	bl	800ba5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2204      	movs	r2, #4
 800b0c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fca4 	bl	800ba1c <USBD_LL_Transmit>

  return USBD_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2205      	movs	r2, #5
 800b0ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fcb2 	bl	800ba5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b108:	2200      	movs	r2, #0
 800b10a:	4912      	ldr	r1, [pc, #72]	; (800b154 <MX_USB_Device_Init+0x50>)
 800b10c:	4812      	ldr	r0, [pc, #72]	; (800b158 <MX_USB_Device_Init+0x54>)
 800b10e:	f7fe fd69 	bl	8009be4 <USBD_Init>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b118:	f7f5 fbfe 	bl	8000918 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b11c:	490f      	ldr	r1, [pc, #60]	; (800b15c <MX_USB_Device_Init+0x58>)
 800b11e:	480e      	ldr	r0, [pc, #56]	; (800b158 <MX_USB_Device_Init+0x54>)
 800b120:	f7fe fd90 	bl	8009c44 <USBD_RegisterClass>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b12a:	f7f5 fbf5 	bl	8000918 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b12e:	490c      	ldr	r1, [pc, #48]	; (800b160 <MX_USB_Device_Init+0x5c>)
 800b130:	4809      	ldr	r0, [pc, #36]	; (800b158 <MX_USB_Device_Init+0x54>)
 800b132:	f7fe fc87 	bl	8009a44 <USBD_CDC_RegisterInterface>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b13c:	f7f5 fbec 	bl	8000918 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b140:	4805      	ldr	r0, [pc, #20]	; (800b158 <MX_USB_Device_Init+0x54>)
 800b142:	f7fe fdb5 	bl	8009cb0 <USBD_Start>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b14c:	f7f5 fbe4 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b150:	bf00      	nop
 800b152:	bd80      	pop	{r7, pc}
 800b154:	200000f8 	.word	0x200000f8
 800b158:	20000320 	.word	0x20000320
 800b15c:	20000064 	.word	0x20000064
 800b160:	200000e4 	.word	0x200000e4

0800b164 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b168:	2200      	movs	r2, #0
 800b16a:	4905      	ldr	r1, [pc, #20]	; (800b180 <CDC_Init_FS+0x1c>)
 800b16c:	4805      	ldr	r0, [pc, #20]	; (800b184 <CDC_Init_FS+0x20>)
 800b16e:	f7fe fc83 	bl	8009a78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b172:	4905      	ldr	r1, [pc, #20]	; (800b188 <CDC_Init_FS+0x24>)
 800b174:	4803      	ldr	r0, [pc, #12]	; (800b184 <CDC_Init_FS+0x20>)
 800b176:	f7fe fca1 	bl	8009abc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b17a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000dfc 	.word	0x20000dfc
 800b184:	20000320 	.word	0x20000320
 800b188:	200005fc 	.word	0x200005fc

0800b18c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b190:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b192:	4618      	mov	r0, r3
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	6039      	str	r1, [r7, #0]
 800b1a6:	71fb      	strb	r3, [r7, #7]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
 800b1ae:	2b23      	cmp	r3, #35	; 0x23
 800b1b0:	d84a      	bhi.n	800b248 <CDC_Control_FS+0xac>
 800b1b2:	a201      	add	r2, pc, #4	; (adr r2, 800b1b8 <CDC_Control_FS+0x1c>)
 800b1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b8:	0800b249 	.word	0x0800b249
 800b1bc:	0800b249 	.word	0x0800b249
 800b1c0:	0800b249 	.word	0x0800b249
 800b1c4:	0800b249 	.word	0x0800b249
 800b1c8:	0800b249 	.word	0x0800b249
 800b1cc:	0800b249 	.word	0x0800b249
 800b1d0:	0800b249 	.word	0x0800b249
 800b1d4:	0800b249 	.word	0x0800b249
 800b1d8:	0800b249 	.word	0x0800b249
 800b1dc:	0800b249 	.word	0x0800b249
 800b1e0:	0800b249 	.word	0x0800b249
 800b1e4:	0800b249 	.word	0x0800b249
 800b1e8:	0800b249 	.word	0x0800b249
 800b1ec:	0800b249 	.word	0x0800b249
 800b1f0:	0800b249 	.word	0x0800b249
 800b1f4:	0800b249 	.word	0x0800b249
 800b1f8:	0800b249 	.word	0x0800b249
 800b1fc:	0800b249 	.word	0x0800b249
 800b200:	0800b249 	.word	0x0800b249
 800b204:	0800b249 	.word	0x0800b249
 800b208:	0800b249 	.word	0x0800b249
 800b20c:	0800b249 	.word	0x0800b249
 800b210:	0800b249 	.word	0x0800b249
 800b214:	0800b249 	.word	0x0800b249
 800b218:	0800b249 	.word	0x0800b249
 800b21c:	0800b249 	.word	0x0800b249
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b249 	.word	0x0800b249
 800b228:	0800b249 	.word	0x0800b249
 800b22c:	0800b249 	.word	0x0800b249
 800b230:	0800b249 	.word	0x0800b249
 800b234:	0800b249 	.word	0x0800b249
 800b238:	0800b249 	.word	0x0800b249
 800b23c:	0800b249 	.word	0x0800b249
 800b240:	0800b249 	.word	0x0800b249
 800b244:	0800b249 	.word	0x0800b249
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b248:	bf00      	nop
  }

  return (USBD_OK);
 800b24a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	4805      	ldr	r0, [pc, #20]	; (800b27c <CDC_Receive_FS+0x24>)
 800b266:	f7fe fc29 	bl	8009abc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b26a:	4804      	ldr	r0, [pc, #16]	; (800b27c <CDC_Receive_FS+0x24>)
 800b26c:	f7fe fc84 	bl	8009b78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b270:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20000320 	.word	0x20000320

0800b280 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b290:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <CDC_Transmit_FS+0x48>)
 800b292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e00b      	b.n	800b2be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2a6:	887b      	ldrh	r3, [r7, #2]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	4806      	ldr	r0, [pc, #24]	; (800b2c8 <CDC_Transmit_FS+0x48>)
 800b2ae:	f7fe fbe3 	bl	8009a78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b2b2:	4805      	ldr	r0, [pc, #20]	; (800b2c8 <CDC_Transmit_FS+0x48>)
 800b2b4:	f7fe fc20 	bl	8009af8 <USBD_CDC_TransmitPacket>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000320 	.word	0x20000320

0800b2cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	371c      	adds	r7, #28
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	6039      	str	r1, [r7, #0]
 800b2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2212      	movs	r2, #18
 800b300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b302:	4b03      	ldr	r3, [pc, #12]	; (800b310 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	20000118 	.word	0x20000118

0800b314 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	6039      	str	r1, [r7, #0]
 800b31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2204      	movs	r2, #4
 800b324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b326:	4b03      	ldr	r3, [pc, #12]	; (800b334 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b328:	4618      	mov	r0, r3
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	2000012c 	.word	0x2000012c

0800b338 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4907      	ldr	r1, [pc, #28]	; (800b36c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b34e:	4808      	ldr	r0, [pc, #32]	; (800b370 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b350:	f7ff fdf8 	bl	800af44 <USBD_GetString>
 800b354:	e004      	b.n	800b360 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	4904      	ldr	r1, [pc, #16]	; (800b36c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b35a:	4805      	ldr	r0, [pc, #20]	; (800b370 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b35c:	f7ff fdf2 	bl	800af44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	200015fc 	.word	0x200015fc
 800b370:	0800cc00 	.word	0x0800cc00

0800b374 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	6039      	str	r1, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	4904      	ldr	r1, [pc, #16]	; (800b394 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b384:	4804      	ldr	r0, [pc, #16]	; (800b398 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b386:	f7ff fddd 	bl	800af44 <USBD_GetString>
  return USBD_StrDesc;
 800b38a:	4b02      	ldr	r3, [pc, #8]	; (800b394 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	200015fc 	.word	0x200015fc
 800b398:	0800cc18 	.word	0x0800cc18

0800b39c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	6039      	str	r1, [r7, #0]
 800b3a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	221a      	movs	r2, #26
 800b3ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3ae:	f000 f843 	bl	800b438 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b3b2:	4b02      	ldr	r3, [pc, #8]	; (800b3bc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	20000130 	.word	0x20000130

0800b3c0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	6039      	str	r1, [r7, #0]
 800b3ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3cc:	79fb      	ldrb	r3, [r7, #7]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d105      	bne.n	800b3de <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	4907      	ldr	r1, [pc, #28]	; (800b3f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b3d6:	4808      	ldr	r0, [pc, #32]	; (800b3f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b3d8:	f7ff fdb4 	bl	800af44 <USBD_GetString>
 800b3dc:	e004      	b.n	800b3e8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	4904      	ldr	r1, [pc, #16]	; (800b3f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b3e2:	4805      	ldr	r0, [pc, #20]	; (800b3f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b3e4:	f7ff fdae 	bl	800af44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3e8:	4b02      	ldr	r3, [pc, #8]	; (800b3f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	200015fc 	.word	0x200015fc
 800b3f8:	0800cc2c 	.word	0x0800cc2c

0800b3fc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d105      	bne.n	800b41a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	4907      	ldr	r1, [pc, #28]	; (800b430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b412:	4808      	ldr	r0, [pc, #32]	; (800b434 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b414:	f7ff fd96 	bl	800af44 <USBD_GetString>
 800b418:	e004      	b.n	800b424 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4904      	ldr	r1, [pc, #16]	; (800b430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b41e:	4805      	ldr	r0, [pc, #20]	; (800b434 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b420:	f7ff fd90 	bl	800af44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	200015fc 	.word	0x200015fc
 800b434:	0800cc38 	.word	0x0800cc38

0800b438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b43e:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <Get_SerialNum+0x44>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b444:	4b0e      	ldr	r3, [pc, #56]	; (800b480 <Get_SerialNum+0x48>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b44a:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <Get_SerialNum+0x4c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4413      	add	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d009      	beq.n	800b472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b45e:	2208      	movs	r2, #8
 800b460:	4909      	ldr	r1, [pc, #36]	; (800b488 <Get_SerialNum+0x50>)
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f814 	bl	800b490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b468:	2204      	movs	r2, #4
 800b46a:	4908      	ldr	r1, [pc, #32]	; (800b48c <Get_SerialNum+0x54>)
 800b46c:	68b8      	ldr	r0, [r7, #8]
 800b46e:	f000 f80f 	bl	800b490 <IntToUnicode>
  }
}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	1fff7590 	.word	0x1fff7590
 800b480:	1fff7594 	.word	0x1fff7594
 800b484:	1fff7598 	.word	0x1fff7598
 800b488:	20000132 	.word	0x20000132
 800b48c:	20000142 	.word	0x20000142

0800b490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b490:	b480      	push	{r7}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	4613      	mov	r3, r2
 800b49c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	75fb      	strb	r3, [r7, #23]
 800b4a6:	e027      	b.n	800b4f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	0f1b      	lsrs	r3, r3, #28
 800b4ac:	2b09      	cmp	r3, #9
 800b4ae:	d80b      	bhi.n	800b4c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	0f1b      	lsrs	r3, r3, #28
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	440b      	add	r3, r1
 800b4c0:	3230      	adds	r2, #48	; 0x30
 800b4c2:	b2d2      	uxtb	r2, r2
 800b4c4:	701a      	strb	r2, [r3, #0]
 800b4c6:	e00a      	b.n	800b4de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	0f1b      	lsrs	r3, r3, #28
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	7dfb      	ldrb	r3, [r7, #23]
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	440b      	add	r3, r1
 800b4d8:	3237      	adds	r2, #55	; 0x37
 800b4da:	b2d2      	uxtb	r2, r2
 800b4dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	011b      	lsls	r3, r3, #4
 800b4e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	005b      	lsls	r3, r3, #1
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	75fb      	strb	r3, [r7, #23]
 800b4f8:	7dfa      	ldrb	r2, [r7, #23]
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d3d3      	bcc.n	800b4a8 <IntToUnicode+0x18>
  }
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	371c      	adds	r7, #28
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <LL_AHB2_GRP1_EnableClock>:
{
 800b50e:	b480      	push	{r7}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b51a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b51c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4313      	orrs	r3, r2
 800b524:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b52a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4013      	ands	r3, r2
 800b530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b532:	68fb      	ldr	r3, [r7, #12]
}
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b54c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b54e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4313      	orrs	r3, r2
 800b556:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b55c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4013      	ands	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b564:	68fb      	ldr	r3, [r7, #12]
}
 800b566:	bf00      	nop
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
	...

0800b574 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b09c      	sub	sp, #112	; 0x70
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b57c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	605a      	str	r2, [r3, #4]
 800b586:	609a      	str	r2, [r3, #8]
 800b588:	60da      	str	r2, [r3, #12]
 800b58a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b58c:	f107 030c 	add.w	r3, r7, #12
 800b590:	2250      	movs	r2, #80	; 0x50
 800b592:	2100      	movs	r1, #0
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fb41 	bl	800bc1c <memset>
  if(pcdHandle->Instance==USB)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a23      	ldr	r2, [pc, #140]	; (800b62c <HAL_PCD_MspInit+0xb8>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d13e      	bne.n	800b622 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b5a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800b5aa:	2318      	movs	r3, #24
 800b5ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800b5ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b5b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800b5b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800b5ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b5be:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800b5c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b5c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b5ca:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b5cc:	f107 030c 	add.w	r3, r7, #12
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7f9 fb99 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800b5dc:	f7f5 f99c 	bl	8000918 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5e0:	2001      	movs	r0, #1
 800b5e2:	f7ff ff94 	bl	800b50e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800b5f8:	230a      	movs	r3, #10
 800b5fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b600:	4619      	mov	r1, r3
 800b602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b606:	f7f6 f979 	bl	80018fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b60a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b60e:	f7ff ff97 	bl	800b540 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b612:	2200      	movs	r2, #0
 800b614:	2100      	movs	r1, #0
 800b616:	2014      	movs	r0, #20
 800b618:	f7f5 fe67 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b61c:	2014      	movs	r0, #20
 800b61e:	f7f5 fe7e 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b622:	bf00      	nop
 800b624:	3770      	adds	r7, #112	; 0x70
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	40006800 	.word	0x40006800

0800b630 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	f7fe fb7f 	bl	8009d4a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b666:	78fa      	ldrb	r2, [r7, #3]
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	00db      	lsls	r3, r3, #3
 800b672:	440b      	add	r3, r1
 800b674:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	4619      	mov	r1, r3
 800b67e:	f7fe fbb9 	bl	8009df4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b082      	sub	sp, #8
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b69c:	78fa      	ldrb	r2, [r7, #3]
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	440b      	add	r3, r1
 800b6aa:	333c      	adds	r3, #60	; 0x3c
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	78fb      	ldrb	r3, [r7, #3]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	f7fe fc52 	bl	8009f5a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe fd8c 	bl	800a1ea <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d001      	beq.n	800b6f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6ee:	f7f5 f913 	bl	8000918 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b6f8:	7bfa      	ldrb	r2, [r7, #15]
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe fd30 	bl	800a162 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fe fcd8 	bl	800a0be <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b70e:	bf00      	nop
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
	...

0800b718 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fd2b 	bl	800a182 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b734:	4b04      	ldr	r3, [pc, #16]	; (800b748 <HAL_PCD_SuspendCallback+0x30>)
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	4a03      	ldr	r2, [pc, #12]	; (800b748 <HAL_PCD_SuspendCallback+0x30>)
 800b73a:	f043 0306 	orr.w	r3, r3, #6
 800b73e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	e000ed00 	.word	0xe000ed00

0800b74c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b75c:	4b08      	ldr	r3, [pc, #32]	; (800b780 <HAL_PCD_ResumeCallback+0x34>)
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	4a07      	ldr	r2, [pc, #28]	; (800b780 <HAL_PCD_ResumeCallback+0x34>)
 800b762:	f023 0306 	bic.w	r3, r3, #6
 800b766:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b768:	f000 f9fc 	bl	800bb64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fd21 	bl	800a1ba <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b778:	bf00      	nop
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	e000ed00 	.word	0xe000ed00

0800b784 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b78c:	4a2c      	ldr	r2, [pc, #176]	; (800b840 <USBD_LL_Init+0xbc>)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a2a      	ldr	r2, [pc, #168]	; (800b840 <USBD_LL_Init+0xbc>)
 800b798:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b79c:	f7f7 ffb0 	bl	8003700 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800b7a0:	4b27      	ldr	r3, [pc, #156]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7a2:	4a28      	ldr	r2, [pc, #160]	; (800b844 <USBD_LL_Init+0xc0>)
 800b7a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b7a6:	4b26      	ldr	r3, [pc, #152]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7a8:	2208      	movs	r2, #8
 800b7aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b7ac:	4b24      	ldr	r3, [pc, #144]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b7b2:	4b23      	ldr	r3, [pc, #140]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b7b8:	4b21      	ldr	r3, [pc, #132]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7be:	4b20      	ldr	r3, [pc, #128]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7c4:	4b1e      	ldr	r3, [pc, #120]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7ca:	4b1d      	ldr	r3, [pc, #116]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7d0:	481b      	ldr	r0, [pc, #108]	; (800b840 <USBD_LL_Init+0xbc>)
 800b7d2:	f7f6 fa33 	bl	8001c3c <HAL_PCD_Init>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b7dc:	f7f5 f89c 	bl	8000918 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7e6:	2318      	movs	r3, #24
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	f7f7 fefc 	bl	80035e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7f6:	2358      	movs	r3, #88	; 0x58
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2180      	movs	r1, #128	; 0x80
 800b7fc:	f7f7 fef4 	bl	80035e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b806:	23c0      	movs	r3, #192	; 0xc0
 800b808:	2200      	movs	r2, #0
 800b80a:	2181      	movs	r1, #129	; 0x81
 800b80c:	f7f7 feec 	bl	80035e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b816:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b81a:	2200      	movs	r2, #0
 800b81c:	2101      	movs	r1, #1
 800b81e:	f7f7 fee3 	bl	80035e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82c:	2200      	movs	r2, #0
 800b82e:	2182      	movs	r1, #130	; 0x82
 800b830:	f7f7 feda 	bl	80035e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200017fc 	.word	0x200017fc
 800b844:	40006800 	.word	0x40006800

0800b848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f6 fac5 	bl	8001dee <HAL_PCD_Start>
 800b864:	4603      	mov	r3, r0
 800b866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b868:	7bfb      	ldrb	r3, [r7, #15]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 f980 	bl	800bb70 <USBD_Get_USB_Status>
 800b870:	4603      	mov	r3, r0
 800b872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b874:	7bbb      	ldrb	r3, [r7, #14]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	4608      	mov	r0, r1
 800b888:	4611      	mov	r1, r2
 800b88a:	461a      	mov	r2, r3
 800b88c:	4603      	mov	r3, r0
 800b88e:	70fb      	strb	r3, [r7, #3]
 800b890:	460b      	mov	r3, r1
 800b892:	70bb      	strb	r3, [r7, #2]
 800b894:	4613      	mov	r3, r2
 800b896:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b8a6:	78bb      	ldrb	r3, [r7, #2]
 800b8a8:	883a      	ldrh	r2, [r7, #0]
 800b8aa:	78f9      	ldrb	r1, [r7, #3]
 800b8ac:	f7f6 fc0d 	bl	80020ca <HAL_PCD_EP_Open>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 f95a 	bl	800bb70 <USBD_Get_USB_Status>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8e4:	78fa      	ldrb	r2, [r7, #3]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f6 fc4b 	bl	8002184 <HAL_PCD_EP_Close>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 f93b 	bl	800bb70 <USBD_Get_USB_Status>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	460b      	mov	r3, r1
 800b912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b922:	78fa      	ldrb	r2, [r7, #3]
 800b924:	4611      	mov	r1, r2
 800b926:	4618      	mov	r0, r3
 800b928:	f7f6 fcf4 	bl	8002314 <HAL_PCD_EP_SetStall>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	4618      	mov	r0, r3
 800b934:	f000 f91c 	bl	800bb70 <USBD_Get_USB_Status>
 800b938:	4603      	mov	r3, r0
 800b93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	460b      	mov	r3, r1
 800b950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b960:	78fa      	ldrb	r2, [r7, #3]
 800b962:	4611      	mov	r1, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f7f6 fd27 	bl	80023b8 <HAL_PCD_EP_ClrStall>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	4618      	mov	r0, r3
 800b972:	f000 f8fd 	bl	800bb70 <USBD_Get_USB_Status>
 800b976:	4603      	mov	r3, r0
 800b978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	da0c      	bge.n	800b9ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b9a0:	78fb      	ldrb	r3, [r7, #3]
 800b9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a6:	68f9      	ldr	r1, [r7, #12]
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	00db      	lsls	r3, r3, #3
 800b9b2:	440b      	add	r3, r1
 800b9b4:	3302      	adds	r3, #2
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	e00b      	b.n	800b9d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b9ba:	78fb      	ldrb	r3, [r7, #3]
 800b9bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c0:	68f9      	ldr	r1, [r7, #12]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	440b      	add	r3, r1
 800b9cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b9d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9f8:	78fa      	ldrb	r2, [r7, #3]
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7f6 fb3f 	bl	8002080 <HAL_PCD_SetAddress>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 f8b1 	bl	800bb70 <USBD_Get_USB_Status>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	607a      	str	r2, [r7, #4]
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba3a:	7af9      	ldrb	r1, [r7, #11]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	f7f6 fc31 	bl	80022a6 <HAL_PCD_EP_Transmit>
 800ba44:	4603      	mov	r3, r0
 800ba46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 f890 	bl	800bb70 <USBD_Get_USB_Status>
 800ba50:	4603      	mov	r3, r0
 800ba52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba54:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b086      	sub	sp, #24
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	603b      	str	r3, [r7, #0]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba7c:	7af9      	ldrb	r1, [r7, #11]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	f7f6 fbc7 	bl	8002214 <HAL_PCD_EP_Receive>
 800ba86:	4603      	mov	r3, r0
 800ba88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba8a:	7dfb      	ldrb	r3, [r7, #23]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f86f 	bl	800bb70 <USBD_Get_USB_Status>
 800ba92:	4603      	mov	r3, r0
 800ba94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	460b      	mov	r3, r1
 800baaa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bab2:	78fa      	ldrb	r2, [r7, #3]
 800bab4:	4611      	mov	r1, r2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7f6 fbdd 	bl	8002276 <HAL_PCD_EP_GetRxCount>
 800babc:	4603      	mov	r3, r0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
	...

0800bac8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <HAL_PCDEx_LPM_Callback+0x18>
 800bada:	2b01      	cmp	r3, #1
 800badc:	d013      	beq.n	800bb06 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bade:	e023      	b.n	800bb28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bae8:	f000 f83c 	bl	800bb64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baec:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	4a0f      	ldr	r2, [pc, #60]	; (800bb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800baf2:	f023 0306 	bic.w	r3, r3, #6
 800baf6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe fb5b 	bl	800a1ba <USBD_LL_Resume>
    break;
 800bb04:	e010      	b.n	800bb28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe fb38 	bl	800a182 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d005      	beq.n	800bb26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb1a:	4b05      	ldr	r3, [pc, #20]	; (800bb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	4a04      	ldr	r2, [pc, #16]	; (800bb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb20:	f043 0306 	orr.w	r3, r3, #6
 800bb24:	6113      	str	r3, [r2, #16]
    break;
 800bb26:	bf00      	nop
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	e000ed00 	.word	0xe000ed00

0800bb34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb3c:	4b03      	ldr	r3, [pc, #12]	; (800bb4c <USBD_static_malloc+0x18>)
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	20001af0 	.word	0x20001af0

0800bb50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800bb58:	bf00      	nop
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb68:	f7f4 fd04 	bl	8000574 <SystemClock_Config>
}
 800bb6c:	bf00      	nop
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d817      	bhi.n	800bbb4 <USBD_Get_USB_Status+0x44>
 800bb84:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <USBD_Get_USB_Status+0x1c>)
 800bb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8a:	bf00      	nop
 800bb8c:	0800bb9d 	.word	0x0800bb9d
 800bb90:	0800bba3 	.word	0x0800bba3
 800bb94:	0800bba9 	.word	0x0800bba9
 800bb98:	0800bbaf 	.word	0x0800bbaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bba0:	e00b      	b.n	800bbba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bba2:	2303      	movs	r3, #3
 800bba4:	73fb      	strb	r3, [r7, #15]
    break;
 800bba6:	e008      	b.n	800bbba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bbac:	e005      	b.n	800bbba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb2:	e002      	b.n	800bbba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb8:	bf00      	nop
  }
  return usb_status;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <__errno>:
 800bbc8:	4b01      	ldr	r3, [pc, #4]	; (800bbd0 <__errno+0x8>)
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	2000014c 	.word	0x2000014c

0800bbd4 <__libc_init_array>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	4d0d      	ldr	r5, [pc, #52]	; (800bc0c <__libc_init_array+0x38>)
 800bbd8:	4c0d      	ldr	r4, [pc, #52]	; (800bc10 <__libc_init_array+0x3c>)
 800bbda:	1b64      	subs	r4, r4, r5
 800bbdc:	10a4      	asrs	r4, r4, #2
 800bbde:	2600      	movs	r6, #0
 800bbe0:	42a6      	cmp	r6, r4
 800bbe2:	d109      	bne.n	800bbf8 <__libc_init_array+0x24>
 800bbe4:	4d0b      	ldr	r5, [pc, #44]	; (800bc14 <__libc_init_array+0x40>)
 800bbe6:	4c0c      	ldr	r4, [pc, #48]	; (800bc18 <__libc_init_array+0x44>)
 800bbe8:	f000 ffae 	bl	800cb48 <_init>
 800bbec:	1b64      	subs	r4, r4, r5
 800bbee:	10a4      	asrs	r4, r4, #2
 800bbf0:	2600      	movs	r6, #0
 800bbf2:	42a6      	cmp	r6, r4
 800bbf4:	d105      	bne.n	800bc02 <__libc_init_array+0x2e>
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbfc:	4798      	blx	r3
 800bbfe:	3601      	adds	r6, #1
 800bc00:	e7ee      	b.n	800bbe0 <__libc_init_array+0xc>
 800bc02:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc06:	4798      	blx	r3
 800bc08:	3601      	adds	r6, #1
 800bc0a:	e7f2      	b.n	800bbf2 <__libc_init_array+0x1e>
 800bc0c:	0800cd60 	.word	0x0800cd60
 800bc10:	0800cd60 	.word	0x0800cd60
 800bc14:	0800cd60 	.word	0x0800cd60
 800bc18:	0800cd64 	.word	0x0800cd64

0800bc1c <memset>:
 800bc1c:	4402      	add	r2, r0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d100      	bne.n	800bc26 <memset+0xa>
 800bc24:	4770      	bx	lr
 800bc26:	f803 1b01 	strb.w	r1, [r3], #1
 800bc2a:	e7f9      	b.n	800bc20 <memset+0x4>

0800bc2c <iprintf>:
 800bc2c:	b40f      	push	{r0, r1, r2, r3}
 800bc2e:	4b0a      	ldr	r3, [pc, #40]	; (800bc58 <iprintf+0x2c>)
 800bc30:	b513      	push	{r0, r1, r4, lr}
 800bc32:	681c      	ldr	r4, [r3, #0]
 800bc34:	b124      	cbz	r4, 800bc40 <iprintf+0x14>
 800bc36:	69a3      	ldr	r3, [r4, #24]
 800bc38:	b913      	cbnz	r3, 800bc40 <iprintf+0x14>
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 f866 	bl	800bd0c <__sinit>
 800bc40:	ab05      	add	r3, sp, #20
 800bc42:	9a04      	ldr	r2, [sp, #16]
 800bc44:	68a1      	ldr	r1, [r4, #8]
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f000 f9bd 	bl	800bfc8 <_vfiprintf_r>
 800bc4e:	b002      	add	sp, #8
 800bc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc54:	b004      	add	sp, #16
 800bc56:	4770      	bx	lr
 800bc58:	2000014c 	.word	0x2000014c

0800bc5c <std>:
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	4604      	mov	r4, r0
 800bc62:	e9c0 3300 	strd	r3, r3, [r0]
 800bc66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc6a:	6083      	str	r3, [r0, #8]
 800bc6c:	8181      	strh	r1, [r0, #12]
 800bc6e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc70:	81c2      	strh	r2, [r0, #14]
 800bc72:	6183      	str	r3, [r0, #24]
 800bc74:	4619      	mov	r1, r3
 800bc76:	2208      	movs	r2, #8
 800bc78:	305c      	adds	r0, #92	; 0x5c
 800bc7a:	f7ff ffcf 	bl	800bc1c <memset>
 800bc7e:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <std+0x38>)
 800bc80:	6263      	str	r3, [r4, #36]	; 0x24
 800bc82:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <std+0x3c>)
 800bc84:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc86:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <std+0x40>)
 800bc88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc8a:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <std+0x44>)
 800bc8c:	6224      	str	r4, [r4, #32]
 800bc8e:	6323      	str	r3, [r4, #48]	; 0x30
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	bf00      	nop
 800bc94:	0800c571 	.word	0x0800c571
 800bc98:	0800c593 	.word	0x0800c593
 800bc9c:	0800c5cb 	.word	0x0800c5cb
 800bca0:	0800c5ef 	.word	0x0800c5ef

0800bca4 <_cleanup_r>:
 800bca4:	4901      	ldr	r1, [pc, #4]	; (800bcac <_cleanup_r+0x8>)
 800bca6:	f000 b8af 	b.w	800be08 <_fwalk_reent>
 800bcaa:	bf00      	nop
 800bcac:	0800c8c9 	.word	0x0800c8c9

0800bcb0 <__sfmoreglue>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	2268      	movs	r2, #104	; 0x68
 800bcb4:	1e4d      	subs	r5, r1, #1
 800bcb6:	4355      	muls	r5, r2
 800bcb8:	460e      	mov	r6, r1
 800bcba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcbe:	f000 f8e5 	bl	800be8c <_malloc_r>
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	b140      	cbz	r0, 800bcd8 <__sfmoreglue+0x28>
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	e9c0 1600 	strd	r1, r6, [r0]
 800bccc:	300c      	adds	r0, #12
 800bcce:	60a0      	str	r0, [r4, #8]
 800bcd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcd4:	f7ff ffa2 	bl	800bc1c <memset>
 800bcd8:	4620      	mov	r0, r4
 800bcda:	bd70      	pop	{r4, r5, r6, pc}

0800bcdc <__sfp_lock_acquire>:
 800bcdc:	4801      	ldr	r0, [pc, #4]	; (800bce4 <__sfp_lock_acquire+0x8>)
 800bcde:	f000 b8b3 	b.w	800be48 <__retarget_lock_acquire_recursive>
 800bce2:	bf00      	nop
 800bce4:	20001d11 	.word	0x20001d11

0800bce8 <__sfp_lock_release>:
 800bce8:	4801      	ldr	r0, [pc, #4]	; (800bcf0 <__sfp_lock_release+0x8>)
 800bcea:	f000 b8ae 	b.w	800be4a <__retarget_lock_release_recursive>
 800bcee:	bf00      	nop
 800bcf0:	20001d11 	.word	0x20001d11

0800bcf4 <__sinit_lock_acquire>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	; (800bcfc <__sinit_lock_acquire+0x8>)
 800bcf6:	f000 b8a7 	b.w	800be48 <__retarget_lock_acquire_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	20001d12 	.word	0x20001d12

0800bd00 <__sinit_lock_release>:
 800bd00:	4801      	ldr	r0, [pc, #4]	; (800bd08 <__sinit_lock_release+0x8>)
 800bd02:	f000 b8a2 	b.w	800be4a <__retarget_lock_release_recursive>
 800bd06:	bf00      	nop
 800bd08:	20001d12 	.word	0x20001d12

0800bd0c <__sinit>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	4604      	mov	r4, r0
 800bd10:	f7ff fff0 	bl	800bcf4 <__sinit_lock_acquire>
 800bd14:	69a3      	ldr	r3, [r4, #24]
 800bd16:	b11b      	cbz	r3, 800bd20 <__sinit+0x14>
 800bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd1c:	f7ff bff0 	b.w	800bd00 <__sinit_lock_release>
 800bd20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd24:	6523      	str	r3, [r4, #80]	; 0x50
 800bd26:	4b13      	ldr	r3, [pc, #76]	; (800bd74 <__sinit+0x68>)
 800bd28:	4a13      	ldr	r2, [pc, #76]	; (800bd78 <__sinit+0x6c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	bf04      	itt	eq
 800bd32:	2301      	moveq	r3, #1
 800bd34:	61a3      	streq	r3, [r4, #24]
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 f820 	bl	800bd7c <__sfp>
 800bd3c:	6060      	str	r0, [r4, #4]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 f81c 	bl	800bd7c <__sfp>
 800bd44:	60a0      	str	r0, [r4, #8]
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 f818 	bl	800bd7c <__sfp>
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	60e0      	str	r0, [r4, #12]
 800bd50:	2104      	movs	r1, #4
 800bd52:	6860      	ldr	r0, [r4, #4]
 800bd54:	f7ff ff82 	bl	800bc5c <std>
 800bd58:	68a0      	ldr	r0, [r4, #8]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	2109      	movs	r1, #9
 800bd5e:	f7ff ff7d 	bl	800bc5c <std>
 800bd62:	68e0      	ldr	r0, [r4, #12]
 800bd64:	2202      	movs	r2, #2
 800bd66:	2112      	movs	r1, #18
 800bd68:	f7ff ff78 	bl	800bc5c <std>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	61a3      	str	r3, [r4, #24]
 800bd70:	e7d2      	b.n	800bd18 <__sinit+0xc>
 800bd72:	bf00      	nop
 800bd74:	0800ccc8 	.word	0x0800ccc8
 800bd78:	0800bca5 	.word	0x0800bca5

0800bd7c <__sfp>:
 800bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7e:	4607      	mov	r7, r0
 800bd80:	f7ff ffac 	bl	800bcdc <__sfp_lock_acquire>
 800bd84:	4b1e      	ldr	r3, [pc, #120]	; (800be00 <__sfp+0x84>)
 800bd86:	681e      	ldr	r6, [r3, #0]
 800bd88:	69b3      	ldr	r3, [r6, #24]
 800bd8a:	b913      	cbnz	r3, 800bd92 <__sfp+0x16>
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7ff ffbd 	bl	800bd0c <__sinit>
 800bd92:	3648      	adds	r6, #72	; 0x48
 800bd94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	d503      	bpl.n	800bda4 <__sfp+0x28>
 800bd9c:	6833      	ldr	r3, [r6, #0]
 800bd9e:	b30b      	cbz	r3, 800bde4 <__sfp+0x68>
 800bda0:	6836      	ldr	r6, [r6, #0]
 800bda2:	e7f7      	b.n	800bd94 <__sfp+0x18>
 800bda4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bda8:	b9d5      	cbnz	r5, 800bde0 <__sfp+0x64>
 800bdaa:	4b16      	ldr	r3, [pc, #88]	; (800be04 <__sfp+0x88>)
 800bdac:	60e3      	str	r3, [r4, #12]
 800bdae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdb2:	6665      	str	r5, [r4, #100]	; 0x64
 800bdb4:	f000 f847 	bl	800be46 <__retarget_lock_init_recursive>
 800bdb8:	f7ff ff96 	bl	800bce8 <__sfp_lock_release>
 800bdbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bdc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdc4:	6025      	str	r5, [r4, #0]
 800bdc6:	61a5      	str	r5, [r4, #24]
 800bdc8:	2208      	movs	r2, #8
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdd0:	f7ff ff24 	bl	800bc1c <memset>
 800bdd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bddc:	4620      	mov	r0, r4
 800bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde0:	3468      	adds	r4, #104	; 0x68
 800bde2:	e7d9      	b.n	800bd98 <__sfp+0x1c>
 800bde4:	2104      	movs	r1, #4
 800bde6:	4638      	mov	r0, r7
 800bde8:	f7ff ff62 	bl	800bcb0 <__sfmoreglue>
 800bdec:	4604      	mov	r4, r0
 800bdee:	6030      	str	r0, [r6, #0]
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d1d5      	bne.n	800bda0 <__sfp+0x24>
 800bdf4:	f7ff ff78 	bl	800bce8 <__sfp_lock_release>
 800bdf8:	230c      	movs	r3, #12
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	e7ee      	b.n	800bddc <__sfp+0x60>
 800bdfe:	bf00      	nop
 800be00:	0800ccc8 	.word	0x0800ccc8
 800be04:	ffff0001 	.word	0xffff0001

0800be08 <_fwalk_reent>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4606      	mov	r6, r0
 800be0e:	4688      	mov	r8, r1
 800be10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be14:	2700      	movs	r7, #0
 800be16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be1a:	f1b9 0901 	subs.w	r9, r9, #1
 800be1e:	d505      	bpl.n	800be2c <_fwalk_reent+0x24>
 800be20:	6824      	ldr	r4, [r4, #0]
 800be22:	2c00      	cmp	r4, #0
 800be24:	d1f7      	bne.n	800be16 <_fwalk_reent+0xe>
 800be26:	4638      	mov	r0, r7
 800be28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2c:	89ab      	ldrh	r3, [r5, #12]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d907      	bls.n	800be42 <_fwalk_reent+0x3a>
 800be32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be36:	3301      	adds	r3, #1
 800be38:	d003      	beq.n	800be42 <_fwalk_reent+0x3a>
 800be3a:	4629      	mov	r1, r5
 800be3c:	4630      	mov	r0, r6
 800be3e:	47c0      	blx	r8
 800be40:	4307      	orrs	r7, r0
 800be42:	3568      	adds	r5, #104	; 0x68
 800be44:	e7e9      	b.n	800be1a <_fwalk_reent+0x12>

0800be46 <__retarget_lock_init_recursive>:
 800be46:	4770      	bx	lr

0800be48 <__retarget_lock_acquire_recursive>:
 800be48:	4770      	bx	lr

0800be4a <__retarget_lock_release_recursive>:
 800be4a:	4770      	bx	lr

0800be4c <sbrk_aligned>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	4e0e      	ldr	r6, [pc, #56]	; (800be88 <sbrk_aligned+0x3c>)
 800be50:	460c      	mov	r4, r1
 800be52:	6831      	ldr	r1, [r6, #0]
 800be54:	4605      	mov	r5, r0
 800be56:	b911      	cbnz	r1, 800be5e <sbrk_aligned+0x12>
 800be58:	f000 fb7a 	bl	800c550 <_sbrk_r>
 800be5c:	6030      	str	r0, [r6, #0]
 800be5e:	4621      	mov	r1, r4
 800be60:	4628      	mov	r0, r5
 800be62:	f000 fb75 	bl	800c550 <_sbrk_r>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	d00a      	beq.n	800be80 <sbrk_aligned+0x34>
 800be6a:	1cc4      	adds	r4, r0, #3
 800be6c:	f024 0403 	bic.w	r4, r4, #3
 800be70:	42a0      	cmp	r0, r4
 800be72:	d007      	beq.n	800be84 <sbrk_aligned+0x38>
 800be74:	1a21      	subs	r1, r4, r0
 800be76:	4628      	mov	r0, r5
 800be78:	f000 fb6a 	bl	800c550 <_sbrk_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	d101      	bne.n	800be84 <sbrk_aligned+0x38>
 800be80:	f04f 34ff 	mov.w	r4, #4294967295
 800be84:	4620      	mov	r0, r4
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	20001d18 	.word	0x20001d18

0800be8c <_malloc_r>:
 800be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be90:	1ccd      	adds	r5, r1, #3
 800be92:	f025 0503 	bic.w	r5, r5, #3
 800be96:	3508      	adds	r5, #8
 800be98:	2d0c      	cmp	r5, #12
 800be9a:	bf38      	it	cc
 800be9c:	250c      	movcc	r5, #12
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	4607      	mov	r7, r0
 800bea2:	db01      	blt.n	800bea8 <_malloc_r+0x1c>
 800bea4:	42a9      	cmp	r1, r5
 800bea6:	d905      	bls.n	800beb4 <_malloc_r+0x28>
 800bea8:	230c      	movs	r3, #12
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	2600      	movs	r6, #0
 800beae:	4630      	mov	r0, r6
 800beb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb4:	4e2e      	ldr	r6, [pc, #184]	; (800bf70 <_malloc_r+0xe4>)
 800beb6:	f000 fdbb 	bl	800ca30 <__malloc_lock>
 800beba:	6833      	ldr	r3, [r6, #0]
 800bebc:	461c      	mov	r4, r3
 800bebe:	bb34      	cbnz	r4, 800bf0e <_malloc_r+0x82>
 800bec0:	4629      	mov	r1, r5
 800bec2:	4638      	mov	r0, r7
 800bec4:	f7ff ffc2 	bl	800be4c <sbrk_aligned>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	4604      	mov	r4, r0
 800becc:	d14d      	bne.n	800bf6a <_malloc_r+0xde>
 800bece:	6834      	ldr	r4, [r6, #0]
 800bed0:	4626      	mov	r6, r4
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	d140      	bne.n	800bf58 <_malloc_r+0xcc>
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	4631      	mov	r1, r6
 800beda:	4638      	mov	r0, r7
 800bedc:	eb04 0803 	add.w	r8, r4, r3
 800bee0:	f000 fb36 	bl	800c550 <_sbrk_r>
 800bee4:	4580      	cmp	r8, r0
 800bee6:	d13a      	bne.n	800bf5e <_malloc_r+0xd2>
 800bee8:	6821      	ldr	r1, [r4, #0]
 800beea:	3503      	adds	r5, #3
 800beec:	1a6d      	subs	r5, r5, r1
 800beee:	f025 0503 	bic.w	r5, r5, #3
 800bef2:	3508      	adds	r5, #8
 800bef4:	2d0c      	cmp	r5, #12
 800bef6:	bf38      	it	cc
 800bef8:	250c      	movcc	r5, #12
 800befa:	4629      	mov	r1, r5
 800befc:	4638      	mov	r0, r7
 800befe:	f7ff ffa5 	bl	800be4c <sbrk_aligned>
 800bf02:	3001      	adds	r0, #1
 800bf04:	d02b      	beq.n	800bf5e <_malloc_r+0xd2>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	442b      	add	r3, r5
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	e00e      	b.n	800bf2c <_malloc_r+0xa0>
 800bf0e:	6822      	ldr	r2, [r4, #0]
 800bf10:	1b52      	subs	r2, r2, r5
 800bf12:	d41e      	bmi.n	800bf52 <_malloc_r+0xc6>
 800bf14:	2a0b      	cmp	r2, #11
 800bf16:	d916      	bls.n	800bf46 <_malloc_r+0xba>
 800bf18:	1961      	adds	r1, r4, r5
 800bf1a:	42a3      	cmp	r3, r4
 800bf1c:	6025      	str	r5, [r4, #0]
 800bf1e:	bf18      	it	ne
 800bf20:	6059      	strne	r1, [r3, #4]
 800bf22:	6863      	ldr	r3, [r4, #4]
 800bf24:	bf08      	it	eq
 800bf26:	6031      	streq	r1, [r6, #0]
 800bf28:	5162      	str	r2, [r4, r5]
 800bf2a:	604b      	str	r3, [r1, #4]
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	f104 060b 	add.w	r6, r4, #11
 800bf32:	f000 fd83 	bl	800ca3c <__malloc_unlock>
 800bf36:	f026 0607 	bic.w	r6, r6, #7
 800bf3a:	1d23      	adds	r3, r4, #4
 800bf3c:	1af2      	subs	r2, r6, r3
 800bf3e:	d0b6      	beq.n	800beae <_malloc_r+0x22>
 800bf40:	1b9b      	subs	r3, r3, r6
 800bf42:	50a3      	str	r3, [r4, r2]
 800bf44:	e7b3      	b.n	800beae <_malloc_r+0x22>
 800bf46:	6862      	ldr	r2, [r4, #4]
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	bf0c      	ite	eq
 800bf4c:	6032      	streq	r2, [r6, #0]
 800bf4e:	605a      	strne	r2, [r3, #4]
 800bf50:	e7ec      	b.n	800bf2c <_malloc_r+0xa0>
 800bf52:	4623      	mov	r3, r4
 800bf54:	6864      	ldr	r4, [r4, #4]
 800bf56:	e7b2      	b.n	800bebe <_malloc_r+0x32>
 800bf58:	4634      	mov	r4, r6
 800bf5a:	6876      	ldr	r6, [r6, #4]
 800bf5c:	e7b9      	b.n	800bed2 <_malloc_r+0x46>
 800bf5e:	230c      	movs	r3, #12
 800bf60:	603b      	str	r3, [r7, #0]
 800bf62:	4638      	mov	r0, r7
 800bf64:	f000 fd6a 	bl	800ca3c <__malloc_unlock>
 800bf68:	e7a1      	b.n	800beae <_malloc_r+0x22>
 800bf6a:	6025      	str	r5, [r4, #0]
 800bf6c:	e7de      	b.n	800bf2c <_malloc_r+0xa0>
 800bf6e:	bf00      	nop
 800bf70:	20001d14 	.word	0x20001d14

0800bf74 <__sfputc_r>:
 800bf74:	6893      	ldr	r3, [r2, #8]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	b410      	push	{r4}
 800bf7c:	6093      	str	r3, [r2, #8]
 800bf7e:	da08      	bge.n	800bf92 <__sfputc_r+0x1e>
 800bf80:	6994      	ldr	r4, [r2, #24]
 800bf82:	42a3      	cmp	r3, r4
 800bf84:	db01      	blt.n	800bf8a <__sfputc_r+0x16>
 800bf86:	290a      	cmp	r1, #10
 800bf88:	d103      	bne.n	800bf92 <__sfputc_r+0x1e>
 800bf8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf8e:	f000 bb33 	b.w	800c5f8 <__swbuf_r>
 800bf92:	6813      	ldr	r3, [r2, #0]
 800bf94:	1c58      	adds	r0, r3, #1
 800bf96:	6010      	str	r0, [r2, #0]
 800bf98:	7019      	strb	r1, [r3, #0]
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <__sfputs_r>:
 800bfa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	460f      	mov	r7, r1
 800bfa8:	4614      	mov	r4, r2
 800bfaa:	18d5      	adds	r5, r2, r3
 800bfac:	42ac      	cmp	r4, r5
 800bfae:	d101      	bne.n	800bfb4 <__sfputs_r+0x12>
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	e007      	b.n	800bfc4 <__sfputs_r+0x22>
 800bfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb8:	463a      	mov	r2, r7
 800bfba:	4630      	mov	r0, r6
 800bfbc:	f7ff ffda 	bl	800bf74 <__sfputc_r>
 800bfc0:	1c43      	adds	r3, r0, #1
 800bfc2:	d1f3      	bne.n	800bfac <__sfputs_r+0xa>
 800bfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfc8 <_vfiprintf_r>:
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	460d      	mov	r5, r1
 800bfce:	b09d      	sub	sp, #116	; 0x74
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	4698      	mov	r8, r3
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	b118      	cbz	r0, 800bfe0 <_vfiprintf_r+0x18>
 800bfd8:	6983      	ldr	r3, [r0, #24]
 800bfda:	b90b      	cbnz	r3, 800bfe0 <_vfiprintf_r+0x18>
 800bfdc:	f7ff fe96 	bl	800bd0c <__sinit>
 800bfe0:	4b89      	ldr	r3, [pc, #548]	; (800c208 <_vfiprintf_r+0x240>)
 800bfe2:	429d      	cmp	r5, r3
 800bfe4:	d11b      	bne.n	800c01e <_vfiprintf_r+0x56>
 800bfe6:	6875      	ldr	r5, [r6, #4]
 800bfe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfea:	07d9      	lsls	r1, r3, #31
 800bfec:	d405      	bmi.n	800bffa <_vfiprintf_r+0x32>
 800bfee:	89ab      	ldrh	r3, [r5, #12]
 800bff0:	059a      	lsls	r2, r3, #22
 800bff2:	d402      	bmi.n	800bffa <_vfiprintf_r+0x32>
 800bff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bff6:	f7ff ff27 	bl	800be48 <__retarget_lock_acquire_recursive>
 800bffa:	89ab      	ldrh	r3, [r5, #12]
 800bffc:	071b      	lsls	r3, r3, #28
 800bffe:	d501      	bpl.n	800c004 <_vfiprintf_r+0x3c>
 800c000:	692b      	ldr	r3, [r5, #16]
 800c002:	b9eb      	cbnz	r3, 800c040 <_vfiprintf_r+0x78>
 800c004:	4629      	mov	r1, r5
 800c006:	4630      	mov	r0, r6
 800c008:	f000 fb5a 	bl	800c6c0 <__swsetup_r>
 800c00c:	b1c0      	cbz	r0, 800c040 <_vfiprintf_r+0x78>
 800c00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c010:	07dc      	lsls	r4, r3, #31
 800c012:	d50e      	bpl.n	800c032 <_vfiprintf_r+0x6a>
 800c014:	f04f 30ff 	mov.w	r0, #4294967295
 800c018:	b01d      	add	sp, #116	; 0x74
 800c01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01e:	4b7b      	ldr	r3, [pc, #492]	; (800c20c <_vfiprintf_r+0x244>)
 800c020:	429d      	cmp	r5, r3
 800c022:	d101      	bne.n	800c028 <_vfiprintf_r+0x60>
 800c024:	68b5      	ldr	r5, [r6, #8]
 800c026:	e7df      	b.n	800bfe8 <_vfiprintf_r+0x20>
 800c028:	4b79      	ldr	r3, [pc, #484]	; (800c210 <_vfiprintf_r+0x248>)
 800c02a:	429d      	cmp	r5, r3
 800c02c:	bf08      	it	eq
 800c02e:	68f5      	ldreq	r5, [r6, #12]
 800c030:	e7da      	b.n	800bfe8 <_vfiprintf_r+0x20>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	0598      	lsls	r0, r3, #22
 800c036:	d4ed      	bmi.n	800c014 <_vfiprintf_r+0x4c>
 800c038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c03a:	f7ff ff06 	bl	800be4a <__retarget_lock_release_recursive>
 800c03e:	e7e9      	b.n	800c014 <_vfiprintf_r+0x4c>
 800c040:	2300      	movs	r3, #0
 800c042:	9309      	str	r3, [sp, #36]	; 0x24
 800c044:	2320      	movs	r3, #32
 800c046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c04e:	2330      	movs	r3, #48	; 0x30
 800c050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c214 <_vfiprintf_r+0x24c>
 800c054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c058:	f04f 0901 	mov.w	r9, #1
 800c05c:	4623      	mov	r3, r4
 800c05e:	469a      	mov	sl, r3
 800c060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c064:	b10a      	cbz	r2, 800c06a <_vfiprintf_r+0xa2>
 800c066:	2a25      	cmp	r2, #37	; 0x25
 800c068:	d1f9      	bne.n	800c05e <_vfiprintf_r+0x96>
 800c06a:	ebba 0b04 	subs.w	fp, sl, r4
 800c06e:	d00b      	beq.n	800c088 <_vfiprintf_r+0xc0>
 800c070:	465b      	mov	r3, fp
 800c072:	4622      	mov	r2, r4
 800c074:	4629      	mov	r1, r5
 800c076:	4630      	mov	r0, r6
 800c078:	f7ff ff93 	bl	800bfa2 <__sfputs_r>
 800c07c:	3001      	adds	r0, #1
 800c07e:	f000 80aa 	beq.w	800c1d6 <_vfiprintf_r+0x20e>
 800c082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c084:	445a      	add	r2, fp
 800c086:	9209      	str	r2, [sp, #36]	; 0x24
 800c088:	f89a 3000 	ldrb.w	r3, [sl]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f000 80a2 	beq.w	800c1d6 <_vfiprintf_r+0x20e>
 800c092:	2300      	movs	r3, #0
 800c094:	f04f 32ff 	mov.w	r2, #4294967295
 800c098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c09c:	f10a 0a01 	add.w	sl, sl, #1
 800c0a0:	9304      	str	r3, [sp, #16]
 800c0a2:	9307      	str	r3, [sp, #28]
 800c0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c0aa:	4654      	mov	r4, sl
 800c0ac:	2205      	movs	r2, #5
 800c0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b2:	4858      	ldr	r0, [pc, #352]	; (800c214 <_vfiprintf_r+0x24c>)
 800c0b4:	f7f4 f864 	bl	8000180 <memchr>
 800c0b8:	9a04      	ldr	r2, [sp, #16]
 800c0ba:	b9d8      	cbnz	r0, 800c0f4 <_vfiprintf_r+0x12c>
 800c0bc:	06d1      	lsls	r1, r2, #27
 800c0be:	bf44      	itt	mi
 800c0c0:	2320      	movmi	r3, #32
 800c0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0c6:	0713      	lsls	r3, r2, #28
 800c0c8:	bf44      	itt	mi
 800c0ca:	232b      	movmi	r3, #43	; 0x2b
 800c0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d6:	d015      	beq.n	800c104 <_vfiprintf_r+0x13c>
 800c0d8:	9a07      	ldr	r2, [sp, #28]
 800c0da:	4654      	mov	r4, sl
 800c0dc:	2000      	movs	r0, #0
 800c0de:	f04f 0c0a 	mov.w	ip, #10
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0e8:	3b30      	subs	r3, #48	; 0x30
 800c0ea:	2b09      	cmp	r3, #9
 800c0ec:	d94e      	bls.n	800c18c <_vfiprintf_r+0x1c4>
 800c0ee:	b1b0      	cbz	r0, 800c11e <_vfiprintf_r+0x156>
 800c0f0:	9207      	str	r2, [sp, #28]
 800c0f2:	e014      	b.n	800c11e <_vfiprintf_r+0x156>
 800c0f4:	eba0 0308 	sub.w	r3, r0, r8
 800c0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	9304      	str	r3, [sp, #16]
 800c100:	46a2      	mov	sl, r4
 800c102:	e7d2      	b.n	800c0aa <_vfiprintf_r+0xe2>
 800c104:	9b03      	ldr	r3, [sp, #12]
 800c106:	1d19      	adds	r1, r3, #4
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	9103      	str	r1, [sp, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	bfbb      	ittet	lt
 800c110:	425b      	neglt	r3, r3
 800c112:	f042 0202 	orrlt.w	r2, r2, #2
 800c116:	9307      	strge	r3, [sp, #28]
 800c118:	9307      	strlt	r3, [sp, #28]
 800c11a:	bfb8      	it	lt
 800c11c:	9204      	strlt	r2, [sp, #16]
 800c11e:	7823      	ldrb	r3, [r4, #0]
 800c120:	2b2e      	cmp	r3, #46	; 0x2e
 800c122:	d10c      	bne.n	800c13e <_vfiprintf_r+0x176>
 800c124:	7863      	ldrb	r3, [r4, #1]
 800c126:	2b2a      	cmp	r3, #42	; 0x2a
 800c128:	d135      	bne.n	800c196 <_vfiprintf_r+0x1ce>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	1d1a      	adds	r2, r3, #4
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	9203      	str	r2, [sp, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	bfb8      	it	lt
 800c136:	f04f 33ff 	movlt.w	r3, #4294967295
 800c13a:	3402      	adds	r4, #2
 800c13c:	9305      	str	r3, [sp, #20]
 800c13e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c224 <_vfiprintf_r+0x25c>
 800c142:	7821      	ldrb	r1, [r4, #0]
 800c144:	2203      	movs	r2, #3
 800c146:	4650      	mov	r0, sl
 800c148:	f7f4 f81a 	bl	8000180 <memchr>
 800c14c:	b140      	cbz	r0, 800c160 <_vfiprintf_r+0x198>
 800c14e:	2340      	movs	r3, #64	; 0x40
 800c150:	eba0 000a 	sub.w	r0, r0, sl
 800c154:	fa03 f000 	lsl.w	r0, r3, r0
 800c158:	9b04      	ldr	r3, [sp, #16]
 800c15a:	4303      	orrs	r3, r0
 800c15c:	3401      	adds	r4, #1
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c164:	482c      	ldr	r0, [pc, #176]	; (800c218 <_vfiprintf_r+0x250>)
 800c166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c16a:	2206      	movs	r2, #6
 800c16c:	f7f4 f808 	bl	8000180 <memchr>
 800c170:	2800      	cmp	r0, #0
 800c172:	d03f      	beq.n	800c1f4 <_vfiprintf_r+0x22c>
 800c174:	4b29      	ldr	r3, [pc, #164]	; (800c21c <_vfiprintf_r+0x254>)
 800c176:	bb1b      	cbnz	r3, 800c1c0 <_vfiprintf_r+0x1f8>
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	3307      	adds	r3, #7
 800c17c:	f023 0307 	bic.w	r3, r3, #7
 800c180:	3308      	adds	r3, #8
 800c182:	9303      	str	r3, [sp, #12]
 800c184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c186:	443b      	add	r3, r7
 800c188:	9309      	str	r3, [sp, #36]	; 0x24
 800c18a:	e767      	b.n	800c05c <_vfiprintf_r+0x94>
 800c18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c190:	460c      	mov	r4, r1
 800c192:	2001      	movs	r0, #1
 800c194:	e7a5      	b.n	800c0e2 <_vfiprintf_r+0x11a>
 800c196:	2300      	movs	r3, #0
 800c198:	3401      	adds	r4, #1
 800c19a:	9305      	str	r3, [sp, #20]
 800c19c:	4619      	mov	r1, r3
 800c19e:	f04f 0c0a 	mov.w	ip, #10
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1a8:	3a30      	subs	r2, #48	; 0x30
 800c1aa:	2a09      	cmp	r2, #9
 800c1ac:	d903      	bls.n	800c1b6 <_vfiprintf_r+0x1ee>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0c5      	beq.n	800c13e <_vfiprintf_r+0x176>
 800c1b2:	9105      	str	r1, [sp, #20]
 800c1b4:	e7c3      	b.n	800c13e <_vfiprintf_r+0x176>
 800c1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e7f0      	b.n	800c1a2 <_vfiprintf_r+0x1da>
 800c1c0:	ab03      	add	r3, sp, #12
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	462a      	mov	r2, r5
 800c1c6:	4b16      	ldr	r3, [pc, #88]	; (800c220 <_vfiprintf_r+0x258>)
 800c1c8:	a904      	add	r1, sp, #16
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f3af 8000 	nop.w
 800c1d0:	4607      	mov	r7, r0
 800c1d2:	1c78      	adds	r0, r7, #1
 800c1d4:	d1d6      	bne.n	800c184 <_vfiprintf_r+0x1bc>
 800c1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1d8:	07d9      	lsls	r1, r3, #31
 800c1da:	d405      	bmi.n	800c1e8 <_vfiprintf_r+0x220>
 800c1dc:	89ab      	ldrh	r3, [r5, #12]
 800c1de:	059a      	lsls	r2, r3, #22
 800c1e0:	d402      	bmi.n	800c1e8 <_vfiprintf_r+0x220>
 800c1e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1e4:	f7ff fe31 	bl	800be4a <__retarget_lock_release_recursive>
 800c1e8:	89ab      	ldrh	r3, [r5, #12]
 800c1ea:	065b      	lsls	r3, r3, #25
 800c1ec:	f53f af12 	bmi.w	800c014 <_vfiprintf_r+0x4c>
 800c1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1f2:	e711      	b.n	800c018 <_vfiprintf_r+0x50>
 800c1f4:	ab03      	add	r3, sp, #12
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4b09      	ldr	r3, [pc, #36]	; (800c220 <_vfiprintf_r+0x258>)
 800c1fc:	a904      	add	r1, sp, #16
 800c1fe:	4630      	mov	r0, r6
 800c200:	f000 f880 	bl	800c304 <_printf_i>
 800c204:	e7e4      	b.n	800c1d0 <_vfiprintf_r+0x208>
 800c206:	bf00      	nop
 800c208:	0800ccec 	.word	0x0800ccec
 800c20c:	0800cd0c 	.word	0x0800cd0c
 800c210:	0800cccc 	.word	0x0800cccc
 800c214:	0800cd2c 	.word	0x0800cd2c
 800c218:	0800cd36 	.word	0x0800cd36
 800c21c:	00000000 	.word	0x00000000
 800c220:	0800bfa3 	.word	0x0800bfa3
 800c224:	0800cd32 	.word	0x0800cd32

0800c228 <_printf_common>:
 800c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	4616      	mov	r6, r2
 800c22e:	4699      	mov	r9, r3
 800c230:	688a      	ldr	r2, [r1, #8]
 800c232:	690b      	ldr	r3, [r1, #16]
 800c234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c238:	4293      	cmp	r3, r2
 800c23a:	bfb8      	it	lt
 800c23c:	4613      	movlt	r3, r2
 800c23e:	6033      	str	r3, [r6, #0]
 800c240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c244:	4607      	mov	r7, r0
 800c246:	460c      	mov	r4, r1
 800c248:	b10a      	cbz	r2, 800c24e <_printf_common+0x26>
 800c24a:	3301      	adds	r3, #1
 800c24c:	6033      	str	r3, [r6, #0]
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	0699      	lsls	r1, r3, #26
 800c252:	bf42      	ittt	mi
 800c254:	6833      	ldrmi	r3, [r6, #0]
 800c256:	3302      	addmi	r3, #2
 800c258:	6033      	strmi	r3, [r6, #0]
 800c25a:	6825      	ldr	r5, [r4, #0]
 800c25c:	f015 0506 	ands.w	r5, r5, #6
 800c260:	d106      	bne.n	800c270 <_printf_common+0x48>
 800c262:	f104 0a19 	add.w	sl, r4, #25
 800c266:	68e3      	ldr	r3, [r4, #12]
 800c268:	6832      	ldr	r2, [r6, #0]
 800c26a:	1a9b      	subs	r3, r3, r2
 800c26c:	42ab      	cmp	r3, r5
 800c26e:	dc26      	bgt.n	800c2be <_printf_common+0x96>
 800c270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c274:	1e13      	subs	r3, r2, #0
 800c276:	6822      	ldr	r2, [r4, #0]
 800c278:	bf18      	it	ne
 800c27a:	2301      	movne	r3, #1
 800c27c:	0692      	lsls	r2, r2, #26
 800c27e:	d42b      	bmi.n	800c2d8 <_printf_common+0xb0>
 800c280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c284:	4649      	mov	r1, r9
 800c286:	4638      	mov	r0, r7
 800c288:	47c0      	blx	r8
 800c28a:	3001      	adds	r0, #1
 800c28c:	d01e      	beq.n	800c2cc <_printf_common+0xa4>
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	68e5      	ldr	r5, [r4, #12]
 800c292:	6832      	ldr	r2, [r6, #0]
 800c294:	f003 0306 	and.w	r3, r3, #6
 800c298:	2b04      	cmp	r3, #4
 800c29a:	bf08      	it	eq
 800c29c:	1aad      	subeq	r5, r5, r2
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	6922      	ldr	r2, [r4, #16]
 800c2a2:	bf0c      	ite	eq
 800c2a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2a8:	2500      	movne	r5, #0
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	bfc4      	itt	gt
 800c2ae:	1a9b      	subgt	r3, r3, r2
 800c2b0:	18ed      	addgt	r5, r5, r3
 800c2b2:	2600      	movs	r6, #0
 800c2b4:	341a      	adds	r4, #26
 800c2b6:	42b5      	cmp	r5, r6
 800c2b8:	d11a      	bne.n	800c2f0 <_printf_common+0xc8>
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	e008      	b.n	800c2d0 <_printf_common+0xa8>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	4652      	mov	r2, sl
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	47c0      	blx	r8
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d103      	bne.n	800c2d4 <_printf_common+0xac>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	e7c6      	b.n	800c266 <_printf_common+0x3e>
 800c2d8:	18e1      	adds	r1, r4, r3
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	2030      	movs	r0, #48	; 0x30
 800c2de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2e2:	4422      	add	r2, r4
 800c2e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2ec:	3302      	adds	r3, #2
 800c2ee:	e7c7      	b.n	800c280 <_printf_common+0x58>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	47c0      	blx	r8
 800c2fa:	3001      	adds	r0, #1
 800c2fc:	d0e6      	beq.n	800c2cc <_printf_common+0xa4>
 800c2fe:	3601      	adds	r6, #1
 800c300:	e7d9      	b.n	800c2b6 <_printf_common+0x8e>
	...

0800c304 <_printf_i>:
 800c304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c308:	7e0f      	ldrb	r7, [r1, #24]
 800c30a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c30c:	2f78      	cmp	r7, #120	; 0x78
 800c30e:	4691      	mov	r9, r2
 800c310:	4680      	mov	r8, r0
 800c312:	460c      	mov	r4, r1
 800c314:	469a      	mov	sl, r3
 800c316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c31a:	d807      	bhi.n	800c32c <_printf_i+0x28>
 800c31c:	2f62      	cmp	r7, #98	; 0x62
 800c31e:	d80a      	bhi.n	800c336 <_printf_i+0x32>
 800c320:	2f00      	cmp	r7, #0
 800c322:	f000 80d8 	beq.w	800c4d6 <_printf_i+0x1d2>
 800c326:	2f58      	cmp	r7, #88	; 0x58
 800c328:	f000 80a3 	beq.w	800c472 <_printf_i+0x16e>
 800c32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c334:	e03a      	b.n	800c3ac <_printf_i+0xa8>
 800c336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c33a:	2b15      	cmp	r3, #21
 800c33c:	d8f6      	bhi.n	800c32c <_printf_i+0x28>
 800c33e:	a101      	add	r1, pc, #4	; (adr r1, 800c344 <_printf_i+0x40>)
 800c340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c344:	0800c39d 	.word	0x0800c39d
 800c348:	0800c3b1 	.word	0x0800c3b1
 800c34c:	0800c32d 	.word	0x0800c32d
 800c350:	0800c32d 	.word	0x0800c32d
 800c354:	0800c32d 	.word	0x0800c32d
 800c358:	0800c32d 	.word	0x0800c32d
 800c35c:	0800c3b1 	.word	0x0800c3b1
 800c360:	0800c32d 	.word	0x0800c32d
 800c364:	0800c32d 	.word	0x0800c32d
 800c368:	0800c32d 	.word	0x0800c32d
 800c36c:	0800c32d 	.word	0x0800c32d
 800c370:	0800c4bd 	.word	0x0800c4bd
 800c374:	0800c3e1 	.word	0x0800c3e1
 800c378:	0800c49f 	.word	0x0800c49f
 800c37c:	0800c32d 	.word	0x0800c32d
 800c380:	0800c32d 	.word	0x0800c32d
 800c384:	0800c4df 	.word	0x0800c4df
 800c388:	0800c32d 	.word	0x0800c32d
 800c38c:	0800c3e1 	.word	0x0800c3e1
 800c390:	0800c32d 	.word	0x0800c32d
 800c394:	0800c32d 	.word	0x0800c32d
 800c398:	0800c4a7 	.word	0x0800c4a7
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	1d1a      	adds	r2, r3, #4
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	602a      	str	r2, [r5, #0]
 800c3a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e0a3      	b.n	800c4f8 <_printf_i+0x1f4>
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	6829      	ldr	r1, [r5, #0]
 800c3b4:	0606      	lsls	r6, r0, #24
 800c3b6:	f101 0304 	add.w	r3, r1, #4
 800c3ba:	d50a      	bpl.n	800c3d2 <_printf_i+0xce>
 800c3bc:	680e      	ldr	r6, [r1, #0]
 800c3be:	602b      	str	r3, [r5, #0]
 800c3c0:	2e00      	cmp	r6, #0
 800c3c2:	da03      	bge.n	800c3cc <_printf_i+0xc8>
 800c3c4:	232d      	movs	r3, #45	; 0x2d
 800c3c6:	4276      	negs	r6, r6
 800c3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3cc:	485e      	ldr	r0, [pc, #376]	; (800c548 <_printf_i+0x244>)
 800c3ce:	230a      	movs	r3, #10
 800c3d0:	e019      	b.n	800c406 <_printf_i+0x102>
 800c3d2:	680e      	ldr	r6, [r1, #0]
 800c3d4:	602b      	str	r3, [r5, #0]
 800c3d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3da:	bf18      	it	ne
 800c3dc:	b236      	sxthne	r6, r6
 800c3de:	e7ef      	b.n	800c3c0 <_printf_i+0xbc>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	6820      	ldr	r0, [r4, #0]
 800c3e4:	1d19      	adds	r1, r3, #4
 800c3e6:	6029      	str	r1, [r5, #0]
 800c3e8:	0601      	lsls	r1, r0, #24
 800c3ea:	d501      	bpl.n	800c3f0 <_printf_i+0xec>
 800c3ec:	681e      	ldr	r6, [r3, #0]
 800c3ee:	e002      	b.n	800c3f6 <_printf_i+0xf2>
 800c3f0:	0646      	lsls	r6, r0, #25
 800c3f2:	d5fb      	bpl.n	800c3ec <_printf_i+0xe8>
 800c3f4:	881e      	ldrh	r6, [r3, #0]
 800c3f6:	4854      	ldr	r0, [pc, #336]	; (800c548 <_printf_i+0x244>)
 800c3f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c3fa:	bf0c      	ite	eq
 800c3fc:	2308      	moveq	r3, #8
 800c3fe:	230a      	movne	r3, #10
 800c400:	2100      	movs	r1, #0
 800c402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c406:	6865      	ldr	r5, [r4, #4]
 800c408:	60a5      	str	r5, [r4, #8]
 800c40a:	2d00      	cmp	r5, #0
 800c40c:	bfa2      	ittt	ge
 800c40e:	6821      	ldrge	r1, [r4, #0]
 800c410:	f021 0104 	bicge.w	r1, r1, #4
 800c414:	6021      	strge	r1, [r4, #0]
 800c416:	b90e      	cbnz	r6, 800c41c <_printf_i+0x118>
 800c418:	2d00      	cmp	r5, #0
 800c41a:	d04d      	beq.n	800c4b8 <_printf_i+0x1b4>
 800c41c:	4615      	mov	r5, r2
 800c41e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c422:	fb03 6711 	mls	r7, r3, r1, r6
 800c426:	5dc7      	ldrb	r7, [r0, r7]
 800c428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c42c:	4637      	mov	r7, r6
 800c42e:	42bb      	cmp	r3, r7
 800c430:	460e      	mov	r6, r1
 800c432:	d9f4      	bls.n	800c41e <_printf_i+0x11a>
 800c434:	2b08      	cmp	r3, #8
 800c436:	d10b      	bne.n	800c450 <_printf_i+0x14c>
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	07de      	lsls	r6, r3, #31
 800c43c:	d508      	bpl.n	800c450 <_printf_i+0x14c>
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	6861      	ldr	r1, [r4, #4]
 800c442:	4299      	cmp	r1, r3
 800c444:	bfde      	ittt	le
 800c446:	2330      	movle	r3, #48	; 0x30
 800c448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c44c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c450:	1b52      	subs	r2, r2, r5
 800c452:	6122      	str	r2, [r4, #16]
 800c454:	f8cd a000 	str.w	sl, [sp]
 800c458:	464b      	mov	r3, r9
 800c45a:	aa03      	add	r2, sp, #12
 800c45c:	4621      	mov	r1, r4
 800c45e:	4640      	mov	r0, r8
 800c460:	f7ff fee2 	bl	800c228 <_printf_common>
 800c464:	3001      	adds	r0, #1
 800c466:	d14c      	bne.n	800c502 <_printf_i+0x1fe>
 800c468:	f04f 30ff 	mov.w	r0, #4294967295
 800c46c:	b004      	add	sp, #16
 800c46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c472:	4835      	ldr	r0, [pc, #212]	; (800c548 <_printf_i+0x244>)
 800c474:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c478:	6829      	ldr	r1, [r5, #0]
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c480:	6029      	str	r1, [r5, #0]
 800c482:	061d      	lsls	r5, r3, #24
 800c484:	d514      	bpl.n	800c4b0 <_printf_i+0x1ac>
 800c486:	07df      	lsls	r7, r3, #31
 800c488:	bf44      	itt	mi
 800c48a:	f043 0320 	orrmi.w	r3, r3, #32
 800c48e:	6023      	strmi	r3, [r4, #0]
 800c490:	b91e      	cbnz	r6, 800c49a <_printf_i+0x196>
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	f023 0320 	bic.w	r3, r3, #32
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	2310      	movs	r3, #16
 800c49c:	e7b0      	b.n	800c400 <_printf_i+0xfc>
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	f043 0320 	orr.w	r3, r3, #32
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	2378      	movs	r3, #120	; 0x78
 800c4a8:	4828      	ldr	r0, [pc, #160]	; (800c54c <_printf_i+0x248>)
 800c4aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4ae:	e7e3      	b.n	800c478 <_printf_i+0x174>
 800c4b0:	0659      	lsls	r1, r3, #25
 800c4b2:	bf48      	it	mi
 800c4b4:	b2b6      	uxthmi	r6, r6
 800c4b6:	e7e6      	b.n	800c486 <_printf_i+0x182>
 800c4b8:	4615      	mov	r5, r2
 800c4ba:	e7bb      	b.n	800c434 <_printf_i+0x130>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	6826      	ldr	r6, [r4, #0]
 800c4c0:	6961      	ldr	r1, [r4, #20]
 800c4c2:	1d18      	adds	r0, r3, #4
 800c4c4:	6028      	str	r0, [r5, #0]
 800c4c6:	0635      	lsls	r5, r6, #24
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	d501      	bpl.n	800c4d0 <_printf_i+0x1cc>
 800c4cc:	6019      	str	r1, [r3, #0]
 800c4ce:	e002      	b.n	800c4d6 <_printf_i+0x1d2>
 800c4d0:	0670      	lsls	r0, r6, #25
 800c4d2:	d5fb      	bpl.n	800c4cc <_printf_i+0x1c8>
 800c4d4:	8019      	strh	r1, [r3, #0]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	6123      	str	r3, [r4, #16]
 800c4da:	4615      	mov	r5, r2
 800c4dc:	e7ba      	b.n	800c454 <_printf_i+0x150>
 800c4de:	682b      	ldr	r3, [r5, #0]
 800c4e0:	1d1a      	adds	r2, r3, #4
 800c4e2:	602a      	str	r2, [r5, #0]
 800c4e4:	681d      	ldr	r5, [r3, #0]
 800c4e6:	6862      	ldr	r2, [r4, #4]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f7f3 fe48 	bl	8000180 <memchr>
 800c4f0:	b108      	cbz	r0, 800c4f6 <_printf_i+0x1f2>
 800c4f2:	1b40      	subs	r0, r0, r5
 800c4f4:	6060      	str	r0, [r4, #4]
 800c4f6:	6863      	ldr	r3, [r4, #4]
 800c4f8:	6123      	str	r3, [r4, #16]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c500:	e7a8      	b.n	800c454 <_printf_i+0x150>
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	462a      	mov	r2, r5
 800c506:	4649      	mov	r1, r9
 800c508:	4640      	mov	r0, r8
 800c50a:	47d0      	blx	sl
 800c50c:	3001      	adds	r0, #1
 800c50e:	d0ab      	beq.n	800c468 <_printf_i+0x164>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	079b      	lsls	r3, r3, #30
 800c514:	d413      	bmi.n	800c53e <_printf_i+0x23a>
 800c516:	68e0      	ldr	r0, [r4, #12]
 800c518:	9b03      	ldr	r3, [sp, #12]
 800c51a:	4298      	cmp	r0, r3
 800c51c:	bfb8      	it	lt
 800c51e:	4618      	movlt	r0, r3
 800c520:	e7a4      	b.n	800c46c <_printf_i+0x168>
 800c522:	2301      	movs	r3, #1
 800c524:	4632      	mov	r2, r6
 800c526:	4649      	mov	r1, r9
 800c528:	4640      	mov	r0, r8
 800c52a:	47d0      	blx	sl
 800c52c:	3001      	adds	r0, #1
 800c52e:	d09b      	beq.n	800c468 <_printf_i+0x164>
 800c530:	3501      	adds	r5, #1
 800c532:	68e3      	ldr	r3, [r4, #12]
 800c534:	9903      	ldr	r1, [sp, #12]
 800c536:	1a5b      	subs	r3, r3, r1
 800c538:	42ab      	cmp	r3, r5
 800c53a:	dcf2      	bgt.n	800c522 <_printf_i+0x21e>
 800c53c:	e7eb      	b.n	800c516 <_printf_i+0x212>
 800c53e:	2500      	movs	r5, #0
 800c540:	f104 0619 	add.w	r6, r4, #25
 800c544:	e7f5      	b.n	800c532 <_printf_i+0x22e>
 800c546:	bf00      	nop
 800c548:	0800cd3d 	.word	0x0800cd3d
 800c54c:	0800cd4e 	.word	0x0800cd4e

0800c550 <_sbrk_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d06      	ldr	r5, [pc, #24]	; (800c56c <_sbrk_r+0x1c>)
 800c554:	2300      	movs	r3, #0
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	602b      	str	r3, [r5, #0]
 800c55c:	f7f4 fca2 	bl	8000ea4 <_sbrk>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_sbrk_r+0x1a>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_sbrk_r+0x1a>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	20001d1c 	.word	0x20001d1c

0800c570 <__sread>:
 800c570:	b510      	push	{r4, lr}
 800c572:	460c      	mov	r4, r1
 800c574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c578:	f000 fab2 	bl	800cae0 <_read_r>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	bfab      	itete	ge
 800c580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c582:	89a3      	ldrhlt	r3, [r4, #12]
 800c584:	181b      	addge	r3, r3, r0
 800c586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c58a:	bfac      	ite	ge
 800c58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c58e:	81a3      	strhlt	r3, [r4, #12]
 800c590:	bd10      	pop	{r4, pc}

0800c592 <__swrite>:
 800c592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c596:	461f      	mov	r7, r3
 800c598:	898b      	ldrh	r3, [r1, #12]
 800c59a:	05db      	lsls	r3, r3, #23
 800c59c:	4605      	mov	r5, r0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	4616      	mov	r6, r2
 800c5a2:	d505      	bpl.n	800c5b0 <__swrite+0x1e>
 800c5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f000 f9c8 	bl	800c940 <_lseek_r>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5ba:	81a3      	strh	r3, [r4, #12]
 800c5bc:	4632      	mov	r2, r6
 800c5be:	463b      	mov	r3, r7
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	f000 b869 	b.w	800c69c <_write_r>

0800c5ca <__sseek>:
 800c5ca:	b510      	push	{r4, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d2:	f000 f9b5 	bl	800c940 <_lseek_r>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	bf15      	itete	ne
 800c5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5e6:	81a3      	strheq	r3, [r4, #12]
 800c5e8:	bf18      	it	ne
 800c5ea:	81a3      	strhne	r3, [r4, #12]
 800c5ec:	bd10      	pop	{r4, pc}

0800c5ee <__sclose>:
 800c5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f2:	f000 b8d3 	b.w	800c79c <_close_r>
	...

0800c5f8 <__swbuf_r>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	460e      	mov	r6, r1
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	4605      	mov	r5, r0
 800c600:	b118      	cbz	r0, 800c60a <__swbuf_r+0x12>
 800c602:	6983      	ldr	r3, [r0, #24]
 800c604:	b90b      	cbnz	r3, 800c60a <__swbuf_r+0x12>
 800c606:	f7ff fb81 	bl	800bd0c <__sinit>
 800c60a:	4b21      	ldr	r3, [pc, #132]	; (800c690 <__swbuf_r+0x98>)
 800c60c:	429c      	cmp	r4, r3
 800c60e:	d12b      	bne.n	800c668 <__swbuf_r+0x70>
 800c610:	686c      	ldr	r4, [r5, #4]
 800c612:	69a3      	ldr	r3, [r4, #24]
 800c614:	60a3      	str	r3, [r4, #8]
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	071a      	lsls	r2, r3, #28
 800c61a:	d52f      	bpl.n	800c67c <__swbuf_r+0x84>
 800c61c:	6923      	ldr	r3, [r4, #16]
 800c61e:	b36b      	cbz	r3, 800c67c <__swbuf_r+0x84>
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	6820      	ldr	r0, [r4, #0]
 800c624:	1ac0      	subs	r0, r0, r3
 800c626:	6963      	ldr	r3, [r4, #20]
 800c628:	b2f6      	uxtb	r6, r6
 800c62a:	4283      	cmp	r3, r0
 800c62c:	4637      	mov	r7, r6
 800c62e:	dc04      	bgt.n	800c63a <__swbuf_r+0x42>
 800c630:	4621      	mov	r1, r4
 800c632:	4628      	mov	r0, r5
 800c634:	f000 f948 	bl	800c8c8 <_fflush_r>
 800c638:	bb30      	cbnz	r0, 800c688 <__swbuf_r+0x90>
 800c63a:	68a3      	ldr	r3, [r4, #8]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	60a3      	str	r3, [r4, #8]
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	6022      	str	r2, [r4, #0]
 800c646:	701e      	strb	r6, [r3, #0]
 800c648:	6963      	ldr	r3, [r4, #20]
 800c64a:	3001      	adds	r0, #1
 800c64c:	4283      	cmp	r3, r0
 800c64e:	d004      	beq.n	800c65a <__swbuf_r+0x62>
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	07db      	lsls	r3, r3, #31
 800c654:	d506      	bpl.n	800c664 <__swbuf_r+0x6c>
 800c656:	2e0a      	cmp	r6, #10
 800c658:	d104      	bne.n	800c664 <__swbuf_r+0x6c>
 800c65a:	4621      	mov	r1, r4
 800c65c:	4628      	mov	r0, r5
 800c65e:	f000 f933 	bl	800c8c8 <_fflush_r>
 800c662:	b988      	cbnz	r0, 800c688 <__swbuf_r+0x90>
 800c664:	4638      	mov	r0, r7
 800c666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <__swbuf_r+0x9c>)
 800c66a:	429c      	cmp	r4, r3
 800c66c:	d101      	bne.n	800c672 <__swbuf_r+0x7a>
 800c66e:	68ac      	ldr	r4, [r5, #8]
 800c670:	e7cf      	b.n	800c612 <__swbuf_r+0x1a>
 800c672:	4b09      	ldr	r3, [pc, #36]	; (800c698 <__swbuf_r+0xa0>)
 800c674:	429c      	cmp	r4, r3
 800c676:	bf08      	it	eq
 800c678:	68ec      	ldreq	r4, [r5, #12]
 800c67a:	e7ca      	b.n	800c612 <__swbuf_r+0x1a>
 800c67c:	4621      	mov	r1, r4
 800c67e:	4628      	mov	r0, r5
 800c680:	f000 f81e 	bl	800c6c0 <__swsetup_r>
 800c684:	2800      	cmp	r0, #0
 800c686:	d0cb      	beq.n	800c620 <__swbuf_r+0x28>
 800c688:	f04f 37ff 	mov.w	r7, #4294967295
 800c68c:	e7ea      	b.n	800c664 <__swbuf_r+0x6c>
 800c68e:	bf00      	nop
 800c690:	0800ccec 	.word	0x0800ccec
 800c694:	0800cd0c 	.word	0x0800cd0c
 800c698:	0800cccc 	.word	0x0800cccc

0800c69c <_write_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4d07      	ldr	r5, [pc, #28]	; (800c6bc <_write_r+0x20>)
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	602a      	str	r2, [r5, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f7f4 f9c4 	bl	8000a38 <_write>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d102      	bne.n	800c6ba <_write_r+0x1e>
 800c6b4:	682b      	ldr	r3, [r5, #0]
 800c6b6:	b103      	cbz	r3, 800c6ba <_write_r+0x1e>
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	20001d1c 	.word	0x20001d1c

0800c6c0 <__swsetup_r>:
 800c6c0:	4b32      	ldr	r3, [pc, #200]	; (800c78c <__swsetup_r+0xcc>)
 800c6c2:	b570      	push	{r4, r5, r6, lr}
 800c6c4:	681d      	ldr	r5, [r3, #0]
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	b125      	cbz	r5, 800c6d6 <__swsetup_r+0x16>
 800c6cc:	69ab      	ldr	r3, [r5, #24]
 800c6ce:	b913      	cbnz	r3, 800c6d6 <__swsetup_r+0x16>
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f7ff fb1b 	bl	800bd0c <__sinit>
 800c6d6:	4b2e      	ldr	r3, [pc, #184]	; (800c790 <__swsetup_r+0xd0>)
 800c6d8:	429c      	cmp	r4, r3
 800c6da:	d10f      	bne.n	800c6fc <__swsetup_r+0x3c>
 800c6dc:	686c      	ldr	r4, [r5, #4]
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6e4:	0719      	lsls	r1, r3, #28
 800c6e6:	d42c      	bmi.n	800c742 <__swsetup_r+0x82>
 800c6e8:	06dd      	lsls	r5, r3, #27
 800c6ea:	d411      	bmi.n	800c710 <__swsetup_r+0x50>
 800c6ec:	2309      	movs	r3, #9
 800c6ee:	6033      	str	r3, [r6, #0]
 800c6f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6f4:	81a3      	strh	r3, [r4, #12]
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fa:	e03e      	b.n	800c77a <__swsetup_r+0xba>
 800c6fc:	4b25      	ldr	r3, [pc, #148]	; (800c794 <__swsetup_r+0xd4>)
 800c6fe:	429c      	cmp	r4, r3
 800c700:	d101      	bne.n	800c706 <__swsetup_r+0x46>
 800c702:	68ac      	ldr	r4, [r5, #8]
 800c704:	e7eb      	b.n	800c6de <__swsetup_r+0x1e>
 800c706:	4b24      	ldr	r3, [pc, #144]	; (800c798 <__swsetup_r+0xd8>)
 800c708:	429c      	cmp	r4, r3
 800c70a:	bf08      	it	eq
 800c70c:	68ec      	ldreq	r4, [r5, #12]
 800c70e:	e7e6      	b.n	800c6de <__swsetup_r+0x1e>
 800c710:	0758      	lsls	r0, r3, #29
 800c712:	d512      	bpl.n	800c73a <__swsetup_r+0x7a>
 800c714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c716:	b141      	cbz	r1, 800c72a <__swsetup_r+0x6a>
 800c718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c71c:	4299      	cmp	r1, r3
 800c71e:	d002      	beq.n	800c726 <__swsetup_r+0x66>
 800c720:	4630      	mov	r0, r6
 800c722:	f000 f991 	bl	800ca48 <_free_r>
 800c726:	2300      	movs	r3, #0
 800c728:	6363      	str	r3, [r4, #52]	; 0x34
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c730:	81a3      	strh	r3, [r4, #12]
 800c732:	2300      	movs	r3, #0
 800c734:	6063      	str	r3, [r4, #4]
 800c736:	6923      	ldr	r3, [r4, #16]
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	f043 0308 	orr.w	r3, r3, #8
 800c740:	81a3      	strh	r3, [r4, #12]
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	b94b      	cbnz	r3, 800c75a <__swsetup_r+0x9a>
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c750:	d003      	beq.n	800c75a <__swsetup_r+0x9a>
 800c752:	4621      	mov	r1, r4
 800c754:	4630      	mov	r0, r6
 800c756:	f000 f92b 	bl	800c9b0 <__smakebuf_r>
 800c75a:	89a0      	ldrh	r0, [r4, #12]
 800c75c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c760:	f010 0301 	ands.w	r3, r0, #1
 800c764:	d00a      	beq.n	800c77c <__swsetup_r+0xbc>
 800c766:	2300      	movs	r3, #0
 800c768:	60a3      	str	r3, [r4, #8]
 800c76a:	6963      	ldr	r3, [r4, #20]
 800c76c:	425b      	negs	r3, r3
 800c76e:	61a3      	str	r3, [r4, #24]
 800c770:	6923      	ldr	r3, [r4, #16]
 800c772:	b943      	cbnz	r3, 800c786 <__swsetup_r+0xc6>
 800c774:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c778:	d1ba      	bne.n	800c6f0 <__swsetup_r+0x30>
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	0781      	lsls	r1, r0, #30
 800c77e:	bf58      	it	pl
 800c780:	6963      	ldrpl	r3, [r4, #20]
 800c782:	60a3      	str	r3, [r4, #8]
 800c784:	e7f4      	b.n	800c770 <__swsetup_r+0xb0>
 800c786:	2000      	movs	r0, #0
 800c788:	e7f7      	b.n	800c77a <__swsetup_r+0xba>
 800c78a:	bf00      	nop
 800c78c:	2000014c 	.word	0x2000014c
 800c790:	0800ccec 	.word	0x0800ccec
 800c794:	0800cd0c 	.word	0x0800cd0c
 800c798:	0800cccc 	.word	0x0800cccc

0800c79c <_close_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d06      	ldr	r5, [pc, #24]	; (800c7b8 <_close_r+0x1c>)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	602b      	str	r3, [r5, #0]
 800c7a8:	f7f4 fb47 	bl	8000e3a <_close>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d102      	bne.n	800c7b6 <_close_r+0x1a>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	b103      	cbz	r3, 800c7b6 <_close_r+0x1a>
 800c7b4:	6023      	str	r3, [r4, #0]
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	20001d1c 	.word	0x20001d1c

0800c7bc <__sflush_r>:
 800c7bc:	898a      	ldrh	r2, [r1, #12]
 800c7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	0710      	lsls	r0, r2, #28
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	d458      	bmi.n	800c87c <__sflush_r+0xc0>
 800c7ca:	684b      	ldr	r3, [r1, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dc05      	bgt.n	800c7dc <__sflush_r+0x20>
 800c7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	dc02      	bgt.n	800c7dc <__sflush_r+0x20>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7de:	2e00      	cmp	r6, #0
 800c7e0:	d0f9      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7e8:	682f      	ldr	r7, [r5, #0]
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	d032      	beq.n	800c854 <__sflush_r+0x98>
 800c7ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	075a      	lsls	r2, r3, #29
 800c7f4:	d505      	bpl.n	800c802 <__sflush_r+0x46>
 800c7f6:	6863      	ldr	r3, [r4, #4]
 800c7f8:	1ac0      	subs	r0, r0, r3
 800c7fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7fc:	b10b      	cbz	r3, 800c802 <__sflush_r+0x46>
 800c7fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c800:	1ac0      	subs	r0, r0, r3
 800c802:	2300      	movs	r3, #0
 800c804:	4602      	mov	r2, r0
 800c806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c808:	6a21      	ldr	r1, [r4, #32]
 800c80a:	4628      	mov	r0, r5
 800c80c:	47b0      	blx	r6
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	d106      	bne.n	800c822 <__sflush_r+0x66>
 800c814:	6829      	ldr	r1, [r5, #0]
 800c816:	291d      	cmp	r1, #29
 800c818:	d82c      	bhi.n	800c874 <__sflush_r+0xb8>
 800c81a:	4a2a      	ldr	r2, [pc, #168]	; (800c8c4 <__sflush_r+0x108>)
 800c81c:	40ca      	lsrs	r2, r1
 800c81e:	07d6      	lsls	r6, r2, #31
 800c820:	d528      	bpl.n	800c874 <__sflush_r+0xb8>
 800c822:	2200      	movs	r2, #0
 800c824:	6062      	str	r2, [r4, #4]
 800c826:	04d9      	lsls	r1, r3, #19
 800c828:	6922      	ldr	r2, [r4, #16]
 800c82a:	6022      	str	r2, [r4, #0]
 800c82c:	d504      	bpl.n	800c838 <__sflush_r+0x7c>
 800c82e:	1c42      	adds	r2, r0, #1
 800c830:	d101      	bne.n	800c836 <__sflush_r+0x7a>
 800c832:	682b      	ldr	r3, [r5, #0]
 800c834:	b903      	cbnz	r3, 800c838 <__sflush_r+0x7c>
 800c836:	6560      	str	r0, [r4, #84]	; 0x54
 800c838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c83a:	602f      	str	r7, [r5, #0]
 800c83c:	2900      	cmp	r1, #0
 800c83e:	d0ca      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c844:	4299      	cmp	r1, r3
 800c846:	d002      	beq.n	800c84e <__sflush_r+0x92>
 800c848:	4628      	mov	r0, r5
 800c84a:	f000 f8fd 	bl	800ca48 <_free_r>
 800c84e:	2000      	movs	r0, #0
 800c850:	6360      	str	r0, [r4, #52]	; 0x34
 800c852:	e7c1      	b.n	800c7d8 <__sflush_r+0x1c>
 800c854:	6a21      	ldr	r1, [r4, #32]
 800c856:	2301      	movs	r3, #1
 800c858:	4628      	mov	r0, r5
 800c85a:	47b0      	blx	r6
 800c85c:	1c41      	adds	r1, r0, #1
 800c85e:	d1c7      	bne.n	800c7f0 <__sflush_r+0x34>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0c4      	beq.n	800c7f0 <__sflush_r+0x34>
 800c866:	2b1d      	cmp	r3, #29
 800c868:	d001      	beq.n	800c86e <__sflush_r+0xb2>
 800c86a:	2b16      	cmp	r3, #22
 800c86c:	d101      	bne.n	800c872 <__sflush_r+0xb6>
 800c86e:	602f      	str	r7, [r5, #0]
 800c870:	e7b1      	b.n	800c7d6 <__sflush_r+0x1a>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c878:	81a3      	strh	r3, [r4, #12]
 800c87a:	e7ad      	b.n	800c7d8 <__sflush_r+0x1c>
 800c87c:	690f      	ldr	r7, [r1, #16]
 800c87e:	2f00      	cmp	r7, #0
 800c880:	d0a9      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c882:	0793      	lsls	r3, r2, #30
 800c884:	680e      	ldr	r6, [r1, #0]
 800c886:	bf08      	it	eq
 800c888:	694b      	ldreq	r3, [r1, #20]
 800c88a:	600f      	str	r7, [r1, #0]
 800c88c:	bf18      	it	ne
 800c88e:	2300      	movne	r3, #0
 800c890:	eba6 0807 	sub.w	r8, r6, r7
 800c894:	608b      	str	r3, [r1, #8]
 800c896:	f1b8 0f00 	cmp.w	r8, #0
 800c89a:	dd9c      	ble.n	800c7d6 <__sflush_r+0x1a>
 800c89c:	6a21      	ldr	r1, [r4, #32]
 800c89e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8a0:	4643      	mov	r3, r8
 800c8a2:	463a      	mov	r2, r7
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	47b0      	blx	r6
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	dc06      	bgt.n	800c8ba <__sflush_r+0xfe>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b2:	81a3      	strh	r3, [r4, #12]
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b8:	e78e      	b.n	800c7d8 <__sflush_r+0x1c>
 800c8ba:	4407      	add	r7, r0
 800c8bc:	eba8 0800 	sub.w	r8, r8, r0
 800c8c0:	e7e9      	b.n	800c896 <__sflush_r+0xda>
 800c8c2:	bf00      	nop
 800c8c4:	20400001 	.word	0x20400001

0800c8c8 <_fflush_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	690b      	ldr	r3, [r1, #16]
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	b913      	cbnz	r3, 800c8d8 <_fflush_r+0x10>
 800c8d2:	2500      	movs	r5, #0
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	b118      	cbz	r0, 800c8e2 <_fflush_r+0x1a>
 800c8da:	6983      	ldr	r3, [r0, #24]
 800c8dc:	b90b      	cbnz	r3, 800c8e2 <_fflush_r+0x1a>
 800c8de:	f7ff fa15 	bl	800bd0c <__sinit>
 800c8e2:	4b14      	ldr	r3, [pc, #80]	; (800c934 <_fflush_r+0x6c>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	d11b      	bne.n	800c920 <_fflush_r+0x58>
 800c8e8:	686c      	ldr	r4, [r5, #4]
 800c8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0ef      	beq.n	800c8d2 <_fflush_r+0xa>
 800c8f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8f4:	07d0      	lsls	r0, r2, #31
 800c8f6:	d404      	bmi.n	800c902 <_fflush_r+0x3a>
 800c8f8:	0599      	lsls	r1, r3, #22
 800c8fa:	d402      	bmi.n	800c902 <_fflush_r+0x3a>
 800c8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8fe:	f7ff faa3 	bl	800be48 <__retarget_lock_acquire_recursive>
 800c902:	4628      	mov	r0, r5
 800c904:	4621      	mov	r1, r4
 800c906:	f7ff ff59 	bl	800c7bc <__sflush_r>
 800c90a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c90c:	07da      	lsls	r2, r3, #31
 800c90e:	4605      	mov	r5, r0
 800c910:	d4e0      	bmi.n	800c8d4 <_fflush_r+0xc>
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	059b      	lsls	r3, r3, #22
 800c916:	d4dd      	bmi.n	800c8d4 <_fflush_r+0xc>
 800c918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c91a:	f7ff fa96 	bl	800be4a <__retarget_lock_release_recursive>
 800c91e:	e7d9      	b.n	800c8d4 <_fflush_r+0xc>
 800c920:	4b05      	ldr	r3, [pc, #20]	; (800c938 <_fflush_r+0x70>)
 800c922:	429c      	cmp	r4, r3
 800c924:	d101      	bne.n	800c92a <_fflush_r+0x62>
 800c926:	68ac      	ldr	r4, [r5, #8]
 800c928:	e7df      	b.n	800c8ea <_fflush_r+0x22>
 800c92a:	4b04      	ldr	r3, [pc, #16]	; (800c93c <_fflush_r+0x74>)
 800c92c:	429c      	cmp	r4, r3
 800c92e:	bf08      	it	eq
 800c930:	68ec      	ldreq	r4, [r5, #12]
 800c932:	e7da      	b.n	800c8ea <_fflush_r+0x22>
 800c934:	0800ccec 	.word	0x0800ccec
 800c938:	0800cd0c 	.word	0x0800cd0c
 800c93c:	0800cccc 	.word	0x0800cccc

0800c940 <_lseek_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_lseek_r+0x20>)
 800c944:	4604      	mov	r4, r0
 800c946:	4608      	mov	r0, r1
 800c948:	4611      	mov	r1, r2
 800c94a:	2200      	movs	r2, #0
 800c94c:	602a      	str	r2, [r5, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	f7f4 fa9a 	bl	8000e88 <_lseek>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_lseek_r+0x1e>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_lseek_r+0x1e>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	20001d1c 	.word	0x20001d1c

0800c964 <__swhatbuf_r>:
 800c964:	b570      	push	{r4, r5, r6, lr}
 800c966:	460e      	mov	r6, r1
 800c968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c96c:	2900      	cmp	r1, #0
 800c96e:	b096      	sub	sp, #88	; 0x58
 800c970:	4614      	mov	r4, r2
 800c972:	461d      	mov	r5, r3
 800c974:	da08      	bge.n	800c988 <__swhatbuf_r+0x24>
 800c976:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	602a      	str	r2, [r5, #0]
 800c97e:	061a      	lsls	r2, r3, #24
 800c980:	d410      	bmi.n	800c9a4 <__swhatbuf_r+0x40>
 800c982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c986:	e00e      	b.n	800c9a6 <__swhatbuf_r+0x42>
 800c988:	466a      	mov	r2, sp
 800c98a:	f000 f8bb 	bl	800cb04 <_fstat_r>
 800c98e:	2800      	cmp	r0, #0
 800c990:	dbf1      	blt.n	800c976 <__swhatbuf_r+0x12>
 800c992:	9a01      	ldr	r2, [sp, #4]
 800c994:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c998:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c99c:	425a      	negs	r2, r3
 800c99e:	415a      	adcs	r2, r3
 800c9a0:	602a      	str	r2, [r5, #0]
 800c9a2:	e7ee      	b.n	800c982 <__swhatbuf_r+0x1e>
 800c9a4:	2340      	movs	r3, #64	; 0x40
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	b016      	add	sp, #88	; 0x58
 800c9ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9b0 <__smakebuf_r>:
 800c9b0:	898b      	ldrh	r3, [r1, #12]
 800c9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9b4:	079d      	lsls	r5, r3, #30
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	d507      	bpl.n	800c9cc <__smakebuf_r+0x1c>
 800c9bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	6123      	str	r3, [r4, #16]
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	6163      	str	r3, [r4, #20]
 800c9c8:	b002      	add	sp, #8
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
 800c9cc:	ab01      	add	r3, sp, #4
 800c9ce:	466a      	mov	r2, sp
 800c9d0:	f7ff ffc8 	bl	800c964 <__swhatbuf_r>
 800c9d4:	9900      	ldr	r1, [sp, #0]
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f7ff fa57 	bl	800be8c <_malloc_r>
 800c9de:	b948      	cbnz	r0, 800c9f4 <__smakebuf_r+0x44>
 800c9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e4:	059a      	lsls	r2, r3, #22
 800c9e6:	d4ef      	bmi.n	800c9c8 <__smakebuf_r+0x18>
 800c9e8:	f023 0303 	bic.w	r3, r3, #3
 800c9ec:	f043 0302 	orr.w	r3, r3, #2
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	e7e3      	b.n	800c9bc <__smakebuf_r+0xc>
 800c9f4:	4b0d      	ldr	r3, [pc, #52]	; (800ca2c <__smakebuf_r+0x7c>)
 800c9f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	6020      	str	r0, [r4, #0]
 800c9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca00:	81a3      	strh	r3, [r4, #12]
 800ca02:	9b00      	ldr	r3, [sp, #0]
 800ca04:	6163      	str	r3, [r4, #20]
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	6120      	str	r0, [r4, #16]
 800ca0a:	b15b      	cbz	r3, 800ca24 <__smakebuf_r+0x74>
 800ca0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca10:	4630      	mov	r0, r6
 800ca12:	f000 f889 	bl	800cb28 <_isatty_r>
 800ca16:	b128      	cbz	r0, 800ca24 <__smakebuf_r+0x74>
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	f023 0303 	bic.w	r3, r3, #3
 800ca1e:	f043 0301 	orr.w	r3, r3, #1
 800ca22:	81a3      	strh	r3, [r4, #12]
 800ca24:	89a0      	ldrh	r0, [r4, #12]
 800ca26:	4305      	orrs	r5, r0
 800ca28:	81a5      	strh	r5, [r4, #12]
 800ca2a:	e7cd      	b.n	800c9c8 <__smakebuf_r+0x18>
 800ca2c:	0800bca5 	.word	0x0800bca5

0800ca30 <__malloc_lock>:
 800ca30:	4801      	ldr	r0, [pc, #4]	; (800ca38 <__malloc_lock+0x8>)
 800ca32:	f7ff ba09 	b.w	800be48 <__retarget_lock_acquire_recursive>
 800ca36:	bf00      	nop
 800ca38:	20001d10 	.word	0x20001d10

0800ca3c <__malloc_unlock>:
 800ca3c:	4801      	ldr	r0, [pc, #4]	; (800ca44 <__malloc_unlock+0x8>)
 800ca3e:	f7ff ba04 	b.w	800be4a <__retarget_lock_release_recursive>
 800ca42:	bf00      	nop
 800ca44:	20001d10 	.word	0x20001d10

0800ca48 <_free_r>:
 800ca48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca4a:	2900      	cmp	r1, #0
 800ca4c:	d044      	beq.n	800cad8 <_free_r+0x90>
 800ca4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca52:	9001      	str	r0, [sp, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f1a1 0404 	sub.w	r4, r1, #4
 800ca5a:	bfb8      	it	lt
 800ca5c:	18e4      	addlt	r4, r4, r3
 800ca5e:	f7ff ffe7 	bl	800ca30 <__malloc_lock>
 800ca62:	4a1e      	ldr	r2, [pc, #120]	; (800cadc <_free_r+0x94>)
 800ca64:	9801      	ldr	r0, [sp, #4]
 800ca66:	6813      	ldr	r3, [r2, #0]
 800ca68:	b933      	cbnz	r3, 800ca78 <_free_r+0x30>
 800ca6a:	6063      	str	r3, [r4, #4]
 800ca6c:	6014      	str	r4, [r2, #0]
 800ca6e:	b003      	add	sp, #12
 800ca70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca74:	f7ff bfe2 	b.w	800ca3c <__malloc_unlock>
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	d908      	bls.n	800ca8e <_free_r+0x46>
 800ca7c:	6825      	ldr	r5, [r4, #0]
 800ca7e:	1961      	adds	r1, r4, r5
 800ca80:	428b      	cmp	r3, r1
 800ca82:	bf01      	itttt	eq
 800ca84:	6819      	ldreq	r1, [r3, #0]
 800ca86:	685b      	ldreq	r3, [r3, #4]
 800ca88:	1949      	addeq	r1, r1, r5
 800ca8a:	6021      	streq	r1, [r4, #0]
 800ca8c:	e7ed      	b.n	800ca6a <_free_r+0x22>
 800ca8e:	461a      	mov	r2, r3
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	b10b      	cbz	r3, 800ca98 <_free_r+0x50>
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d9fa      	bls.n	800ca8e <_free_r+0x46>
 800ca98:	6811      	ldr	r1, [r2, #0]
 800ca9a:	1855      	adds	r5, r2, r1
 800ca9c:	42a5      	cmp	r5, r4
 800ca9e:	d10b      	bne.n	800cab8 <_free_r+0x70>
 800caa0:	6824      	ldr	r4, [r4, #0]
 800caa2:	4421      	add	r1, r4
 800caa4:	1854      	adds	r4, r2, r1
 800caa6:	42a3      	cmp	r3, r4
 800caa8:	6011      	str	r1, [r2, #0]
 800caaa:	d1e0      	bne.n	800ca6e <_free_r+0x26>
 800caac:	681c      	ldr	r4, [r3, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	6053      	str	r3, [r2, #4]
 800cab2:	4421      	add	r1, r4
 800cab4:	6011      	str	r1, [r2, #0]
 800cab6:	e7da      	b.n	800ca6e <_free_r+0x26>
 800cab8:	d902      	bls.n	800cac0 <_free_r+0x78>
 800caba:	230c      	movs	r3, #12
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	e7d6      	b.n	800ca6e <_free_r+0x26>
 800cac0:	6825      	ldr	r5, [r4, #0]
 800cac2:	1961      	adds	r1, r4, r5
 800cac4:	428b      	cmp	r3, r1
 800cac6:	bf04      	itt	eq
 800cac8:	6819      	ldreq	r1, [r3, #0]
 800caca:	685b      	ldreq	r3, [r3, #4]
 800cacc:	6063      	str	r3, [r4, #4]
 800cace:	bf04      	itt	eq
 800cad0:	1949      	addeq	r1, r1, r5
 800cad2:	6021      	streq	r1, [r4, #0]
 800cad4:	6054      	str	r4, [r2, #4]
 800cad6:	e7ca      	b.n	800ca6e <_free_r+0x26>
 800cad8:	b003      	add	sp, #12
 800cada:	bd30      	pop	{r4, r5, pc}
 800cadc:	20001d14 	.word	0x20001d14

0800cae0 <_read_r>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	4d07      	ldr	r5, [pc, #28]	; (800cb00 <_read_r+0x20>)
 800cae4:	4604      	mov	r4, r0
 800cae6:	4608      	mov	r0, r1
 800cae8:	4611      	mov	r1, r2
 800caea:	2200      	movs	r2, #0
 800caec:	602a      	str	r2, [r5, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	f7f4 f986 	bl	8000e00 <_read>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d102      	bne.n	800cafe <_read_r+0x1e>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	b103      	cbz	r3, 800cafe <_read_r+0x1e>
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	20001d1c 	.word	0x20001d1c

0800cb04 <_fstat_r>:
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	4d07      	ldr	r5, [pc, #28]	; (800cb24 <_fstat_r+0x20>)
 800cb08:	2300      	movs	r3, #0
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	4608      	mov	r0, r1
 800cb0e:	4611      	mov	r1, r2
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	f7f4 f99e 	bl	8000e52 <_fstat>
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	d102      	bne.n	800cb20 <_fstat_r+0x1c>
 800cb1a:	682b      	ldr	r3, [r5, #0]
 800cb1c:	b103      	cbz	r3, 800cb20 <_fstat_r+0x1c>
 800cb1e:	6023      	str	r3, [r4, #0]
 800cb20:	bd38      	pop	{r3, r4, r5, pc}
 800cb22:	bf00      	nop
 800cb24:	20001d1c 	.word	0x20001d1c

0800cb28 <_isatty_r>:
 800cb28:	b538      	push	{r3, r4, r5, lr}
 800cb2a:	4d06      	ldr	r5, [pc, #24]	; (800cb44 <_isatty_r+0x1c>)
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	4604      	mov	r4, r0
 800cb30:	4608      	mov	r0, r1
 800cb32:	602b      	str	r3, [r5, #0]
 800cb34:	f7f4 f99d 	bl	8000e72 <_isatty>
 800cb38:	1c43      	adds	r3, r0, #1
 800cb3a:	d102      	bne.n	800cb42 <_isatty_r+0x1a>
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	b103      	cbz	r3, 800cb42 <_isatty_r+0x1a>
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	bd38      	pop	{r3, r4, r5, pc}
 800cb44:	20001d1c 	.word	0x20001d1c

0800cb48 <_init>:
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	bf00      	nop
 800cb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb4e:	bc08      	pop	{r3}
 800cb50:	469e      	mov	lr, r3
 800cb52:	4770      	bx	lr

0800cb54 <_fini>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr
